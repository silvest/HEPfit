/*
 * Copyright (C) 2014 HEPfit Collaboration
 *
 *
 * For the licensing terms see doc/COPYING.
 */

#include "NPSMEFTd6General.h"
#include <limits>
#include <gsl/gsl_sf.h>
#include <boost/bind/bind.hpp>
#include "gslpp_function_adapter.h"
#include <TF1.h>
#include <Math/WrappedTF1.h>
#include <Math/BrentRootFinder.h>


using namespace boost::placeholders;

const std::string NPSMEFTd6General::NPSMEFTd6GeneralVars[NNPSMEFTd6GeneralVars]
        = {
    //    "g1_LNP", "g2_LNP", "g3_LNP", "lambdaH_LNP", "muH_LNP",
    //    "Yu_LNP", "Yc_LNP", "Yt_LNP",  "Yd_LNP", "Ys_LNP", "Yb_LNP",
    //    "Ye_LNP", "Ymu_LNP", "Ytau_LNP",
    //    "s12CKM_LNP", "s13CKM_LNP", "s23CKM_LNP", "dCKM_LNP",
    "CG_LNP", "CW_LNP", "CHG_LNP", "CHW_LNP", "CHB_LNP",
    "CHWB_LNP", "CHD_LNP", "CHbox_LNP", "CH_LNP",
    "CGtilde_LNP", "CWtilde_LNP", "CHGtilde_LNP", "CHWtilde_LNP", "CHBtilde_LNP", "CHWtildeB_LNP",
    "CHl1_11r_LNP", "CHl1_12r_LNP", "CHl1_13r_LNP", "CHl1_22r_LNP", "CHl1_23r_LNP", "CHl1_33r_LNP",
    "CHl1_12i_LNP", "CHl1_13i_LNP", "CHl1_23i_LNP",
    "CHl3_11r_LNP", "CHl3_12r_LNP", "CHl3_13r_LNP", "CHl3_22r_LNP", "CHl3_23r_LNP", "CHl3_33r_LNP",
    "CHl3_12i_LNP", "CHl3_13i_LNP", "CHl3_23i_LNP",
    "CHe_11r_LNP", "CHe_12r_LNP", "CHe_13r_LNP", "CHe_22r_LNP", "CHe_23r_LNP", "CHe_33r_LNP",
    "CHe_12i_LNP", "CHe_13i_LNP", "CHe_23i_LNP",
    "CHq1_11r_LNP", "CHq1_12r_LNP", "CHq1_13r_LNP", "CHq1_22r_LNP", "CHq1_23r_LNP", "CHq1_33r_LNP",
    "CHq1_12i_LNP", "CHq1_13i_LNP", "CHq1_23i_LNP",
    "CHq3_11r_LNP", "CHq3_12r_LNP", "CHq3_13r_LNP", "CHq3_22r_LNP", "CHq3_23r_LNP", "CHq3_33r_LNP",
    "CHq3_12i_LNP", "CHq3_13i_LNP", "CHq3_23i_LNP",
    "CHu_11r_LNP", "CHu_12r_LNP", "CHu_13r_LNP", "CHu_22r_LNP", "CHu_23r_LNP", "CHu_33r_LNP",
    "CHu_12i_LNP", "CHu_13i_LNP", "CHu_23i_LNP",
    "CHd_11r_LNP", "CHd_12r_LNP", "CHd_13r_LNP", "CHd_22r_LNP", "CHd_23r_LNP", "CHd_33r_LNP",
    "CHd_12i_LNP", "CHd_13i_LNP", "CHd_23i_LNP",
    "CHud_11r_LNP", "CHud_12r_LNP", "CHud_13r_LNP", "CHud_21r_LNP", "CHud_22r_LNP", "CHud_23r_LNP", "CHud_31r_LNP", "CHud_32r_LNP", "CHud_33r_LNP",
    "CHud_11i_LNP", "CHud_12i_LNP", "CHud_13i_LNP", "CHud_21i_LNP", "CHud_22i_LNP", "CHud_23i_LNP", "CHud_31i_LNP", "CHud_32i_LNP", "CHud_33i_LNP",
    "CeH_11r_LNP", "CeH_12r_LNP", "CeH_13r_LNP", "CeH_21r_LNP", "CeH_22r_LNP", "CeH_23r_LNP", "CeH_31r_LNP", "CeH_32r_LNP", "CeH_33r_LNP",
    "CeH_11i_LNP", "CeH_12i_LNP", "CeH_13i_LNP", "CeH_21i_LNP", "CeH_22i_LNP", "CeH_23i_LNP", "CeH_31i_LNP", "CeH_32i_LNP", "CeH_33i_LNP",
    "CuH_11r_LNP", "CuH_12r_LNP", "CuH_13r_LNP", "CuH_21r_LNP", "CuH_22r_LNP", "CuH_23r_LNP", "CuH_31r_LNP", "CuH_32r_LNP", "CuH_33r_LNP",
    "CuH_11i_LNP", "CuH_12i_LNP", "CuH_13i_LNP", "CuH_21i_LNP", "CuH_22i_LNP", "CuH_23i_LNP", "CuH_31i_LNP", "CuH_32i_LNP", "CuH_33i_LNP",
    "CdH_11r_LNP", "CdH_12r_LNP", "CdH_13r_LNP", "CdH_21r_LNP", "CdH_22r_LNP", "CdH_23r_LNP", "CdH_31r_LNP", "CdH_32r_LNP", "CdH_33r_LNP",
    "CdH_11i_LNP", "CdH_12i_LNP", "CdH_13i_LNP", "CdH_21i_LNP", "CdH_22i_LNP", "CdH_23i_LNP", "CdH_31i_LNP", "CdH_32i_LNP", "CdH_33i_LNP",
    "CuG_11r_LNP", "CuG_12r_LNP", "CuG_13r_LNP", "CuG_21r_LNP", "CuG_22r_LNP", "CuG_23r_LNP", "CuG_31r_LNP", "CuG_32r_LNP", "CuG_33r_LNP",
    "CuG_11i_LNP", "CuG_12i_LNP", "CuG_13i_LNP", "CuG_21i_LNP", "CuG_22i_LNP", "CuG_23i_LNP", "CuG_31i_LNP", "CuG_32i_LNP", "CuG_33i_LNP",
    "CuW_11r_LNP", "CuW_12r_LNP", "CuW_13r_LNP", "CuW_21r_LNP", "CuW_22r_LNP", "CuW_23r_LNP", "CuW_31r_LNP", "CuW_32r_LNP", "CuW_33r_LNP",
    "CuW_11i_LNP", "CuW_12i_LNP", "CuW_13i_LNP", "CuW_21i_LNP", "CuW_22i_LNP", "CuW_23i_LNP", "CuW_31i_LNP", "CuW_32i_LNP", "CuW_33i_LNP",
    "CuB_11r_LNP", "CuB_12r_LNP", "CuB_13r_LNP", "CuB_21r_LNP", "CuB_22r_LNP", "CuB_23r_LNP", "CuB_31r_LNP", "CuB_32r_LNP", "CuB_33r_LNP",
    "CuB_11i_LNP", "CuB_12i_LNP", "CuB_13i_LNP", "CuB_21i_LNP", "CuB_22i_LNP", "CuB_23i_LNP", "CuB_31i_LNP", "CuB_32i_LNP", "CuB_33i_LNP",
    "CdG_11r_LNP", "CdG_12r_LNP", "CdG_13r_LNP", "CdG_21r_LNP", "CdG_22r_LNP", "CdG_23r_LNP", "CdG_31r_LNP", "CdG_32r_LNP", "CdG_33r_LNP",
    "CdG_11i_LNP", "CdG_12i_LNP", "CdG_13i_LNP", "CdG_21i_LNP", "CdG_22i_LNP", "CdG_23i_LNP", "CdG_31i_LNP", "CdG_32i_LNP", "CdG_33i_LNP",
    "CdW_11r_LNP", "CdW_12r_LNP", "CdW_13r_LNP", "CdW_21r_LNP", "CdW_22r_LNP", "CdW_23r_LNP", "CdW_31r_LNP", "CdW_32r_LNP", "CdW_33r_LNP",
    "CdW_11i_LNP", "CdW_12i_LNP", "CdW_13i_LNP", "CdW_21i_LNP", "CdW_22i_LNP", "CdW_23i_LNP", "CdW_31i_LNP", "CdW_32i_LNP", "CdW_33i_LNP",
    "CdB_11r_LNP", "CdB_12r_LNP", "CdB_13r_LNP", "CdB_21r_LNP", "CdB_22r_LNP", "CdB_23r_LNP", "CdB_31r_LNP", "CdB_32r_LNP", "CdB_33r_LNP",
    "CdB_11i_LNP", "CdB_12i_LNP", "CdB_13i_LNP", "CdB_21i_LNP", "CdB_22i_LNP", "CdB_23i_LNP", "CdB_31i_LNP", "CdB_32i_LNP", "CdB_33i_LNP",
    "CeW_11r_LNP", "CeW_12r_LNP", "CeW_13r_LNP", "CeW_21r_LNP", "CeW_22r_LNP", "CeW_23r_LNP", "CeW_31r_LNP", "CeW_32r_LNP", "CeW_33r_LNP",
    "CeW_11i_LNP", "CeW_12i_LNP", "CeW_13i_LNP", "CeW_21i_LNP", "CeW_22i_LNP", "CeW_23i_LNP", "CeW_31i_LNP", "CeW_32i_LNP", "CeW_33i_LNP",
    "CeB_11r_LNP", "CeB_12r_LNP", "CeB_13r_LNP", "CeB_21r_LNP", "CeB_22r_LNP", "CeB_23r_LNP", "CeB_31r_LNP", "CeB_32r_LNP", "CeB_33r_LNP",
    "CeB_11i_LNP", "CeB_12i_LNP", "CeB_13i_LNP", "CeB_21i_LNP", "CeB_22i_LNP", "CeB_23i_LNP", "CeB_31i_LNP", "CeB_32i_LNP", "CeB_33i_LNP",
    "Cll_1111r_LNP", "Cll_1112r_LNP", "Cll_1113r_LNP", "Cll_1122r_LNP", "Cll_1123r_LNP", "Cll_1133r_LNP", "Cll_1212r_LNP", "Cll_1213r_LNP", "Cll_1221r_LNP",
    "Cll_1222r_LNP", "Cll_1223r_LNP", "Cll_1231r_LNP", "Cll_1232r_LNP", "Cll_1233r_LNP", "Cll_1313r_LNP", "Cll_1322r_LNP", "Cll_1323r_LNP", "Cll_1331r_LNP",
    "Cll_1332r_LNP", "Cll_1333r_LNP", "Cll_2222r_LNP", "Cll_2223r_LNP", "Cll_2233r_LNP", "Cll_2323r_LNP", "Cll_2332r_LNP", "Cll_2333r_LNP", "Cll_3333r_LNP",
    "Cll_1112i_LNP", "Cll_1113i_LNP", "Cll_1123i_LNP", "Cll_1212i_LNP", "Cll_1213i_LNP", "Cll_1222i_LNP", "Cll_1223i_LNP", "Cll_1231i_LNP", "Cll_1232i_LNP",
    "Cll_1233i_LNP", "Cll_1313i_LNP", "Cll_1322i_LNP", "Cll_1323i_LNP", "Cll_1332i_LNP", "Cll_1333i_LNP", "Cll_2223i_LNP", "Cll_2323i_LNP", "Cll_2333i_LNP",
    "Clq1_1111r_LNP", "Clq1_1112r_LNP", "Clq1_1113r_LNP", "Clq1_1122r_LNP", "Clq1_1123r_LNP", "Clq1_1133r_LNP", "Clq1_1211r_LNP", "Clq1_1212r_LNP", "Clq1_1213r_LNP",
    "Clq1_1221r_LNP", "Clq1_1222r_LNP", "Clq1_1223r_LNP", "Clq1_1231r_LNP", "Clq1_1232r_LNP", "Clq1_1233r_LNP", "Clq1_1311r_LNP", "Clq1_1312r_LNP", "Clq1_1313r_LNP",
    "Clq1_1321r_LNP", "Clq1_1322r_LNP", "Clq1_1323r_LNP", "Clq1_1331r_LNP", "Clq1_1332r_LNP", "Clq1_1333r_LNP", "Clq1_2211r_LNP", "Clq1_2212r_LNP", "Clq1_2213r_LNP",
    "Clq1_2222r_LNP", "Clq1_2223r_LNP", "Clq1_2233r_LNP", "Clq1_2311r_LNP", "Clq1_2312r_LNP", "Clq1_2313r_LNP", "Clq1_2321r_LNP", "Clq1_2322r_LNP", "Clq1_2323r_LNP",
    "Clq1_2331r_LNP", "Clq1_2332r_LNP", "Clq1_2333r_LNP", "Clq1_3311r_LNP", "Clq1_3312r_LNP", "Clq1_3313r_LNP", "Clq1_3322r_LNP", "Clq1_3323r_LNP", "Clq1_3333r_LNP",
    "Clq1_1112i_LNP", "Clq1_1113i_LNP", "Clq1_1123i_LNP", "Clq1_1211i_LNP", "Clq1_1212i_LNP", "Clq1_1213i_LNP", "Clq1_1221i_LNP", "Clq1_1222i_LNP", "Clq1_1223i_LNP",
    "Clq1_1231i_LNP", "Clq1_1232i_LNP", "Clq1_1233i_LNP", "Clq1_1311i_LNP", "Clq1_1312i_LNP", "Clq1_1313i_LNP", "Clq1_1321i_LNP", "Clq1_1322i_LNP", "Clq1_1323i_LNP",
    "Clq1_1331i_LNP", "Clq1_1332i_LNP", "Clq1_1333i_LNP", "Clq1_2212i_LNP", "Clq1_2213i_LNP", "Clq1_2223i_LNP", "Clq1_2312i_LNP", "Clq1_2313i_LNP", "Clq1_2321i_LNP",
    "Clq1_2322i_LNP", "Clq1_2323i_LNP", "Clq1_2331i_LNP", "Clq1_2332i_LNP", "Clq1_2333i_LNP", "Clq1_2311i_LNP", "Clq1_3312i_LNP", "Clq1_3313i_LNP", "Clq1_3323i_LNP",
    "Clq3_1111r_LNP", "Clq3_1112r_LNP", "Clq3_1113r_LNP", "Clq3_1122r_LNP", "Clq3_1123r_LNP", "Clq3_1133r_LNP", "Clq3_1211r_LNP", "Clq3_1212r_LNP", "Clq3_1213r_LNP",
    "Clq3_1221r_LNP", "Clq3_1222r_LNP", "Clq3_1223r_LNP", "Clq3_1231r_LNP", "Clq3_1232r_LNP", "Clq3_1233r_LNP", "Clq3_1311r_LNP", "Clq3_1312r_LNP", "Clq3_1313r_LNP",
    "Clq3_1321r_LNP", "Clq3_1322r_LNP", "Clq3_1323r_LNP", "Clq3_1331r_LNP", "Clq3_1332r_LNP", "Clq3_1333r_LNP", "Clq3_2211r_LNP", "Clq3_2212r_LNP", "Clq3_2213r_LNP",
    "Clq3_2222r_LNP", "Clq3_2223r_LNP", "Clq3_2233r_LNP", "Clq3_2311r_LNP", "Clq3_2312r_LNP", "Clq3_2313r_LNP", "Clq3_2321r_LNP", "Clq3_2322r_LNP", "Clq3_2323r_LNP",
    "Clq3_2331r_LNP", "Clq3_2332r_LNP", "Clq3_2333r_LNP", "Clq3_3311r_LNP", "Clq3_3312r_LNP", "Clq3_3313r_LNP", "Clq3_3322r_LNP", "Clq3_3323r_LNP", "Clq3_3333r_LNP",
    "Clq3_1112i_LNP", "Clq3_1113i_LNP", "Clq3_1123i_LNP", "Clq3_1211i_LNP", "Clq3_1212i_LNP", "Clq3_1213i_LNP", "Clq3_1221i_LNP", "Clq3_1222i_LNP", "Clq3_1223i_LNP",
    "Clq3_1231i_LNP", "Clq3_1232i_LNP", "Clq3_1233i_LNP", "Clq3_1311i_LNP", "Clq3_1312i_LNP", "Clq3_1313i_LNP", "Clq3_1321i_LNP", "Clq3_1322i_LNP", "Clq3_1323i_LNP",
    "Clq3_1331i_LNP", "Clq3_1332i_LNP", "Clq3_1333i_LNP", "Clq3_2212i_LNP", "Clq3_2213i_LNP", "Clq3_2223i_LNP", "Clq3_2312i_LNP", "Clq3_2313i_LNP", "Clq3_2321i_LNP",
    "Clq3_2322i_LNP", "Clq3_2323i_LNP", "Clq3_2331i_LNP", "Clq3_2332i_LNP", "Clq3_2333i_LNP", "Clq3_2311i_LNP", "Clq3_3312i_LNP", "Clq3_3313i_LNP", "Clq3_3323i_LNP",
    "Cee_1111r_LNP", "Cee_1112r_LNP", "Cee_1113r_LNP", "Cee_1122r_LNP", "Cee_1123r_LNP", "Cee_1133r_LNP", "Cee_1212r_LNP", "Cee_1213r_LNP", "Cee_1222r_LNP",
    "Cee_1223r_LNP", "Cee_1232r_LNP", "Cee_1233r_LNP", "Cee_1313r_LNP", "Cee_1323r_LNP", "Cee_1333r_LNP", "Cee_2222r_LNP", "Cee_2223r_LNP", "Cee_2233r_LNP",
    "Cee_2323r_LNP", "Cee_2333r_LNP", "Cee_3333r_LNP", "Cee_1112i_LNP", "Cee_1113i_LNP", "Cee_1123i_LNP", "Cee_1212i_LNP", "Cee_1213i_LNP", "Cee_1222i_LNP",
    "Cee_1223i_LNP", "Cee_1232i_LNP", "Cee_1233i_LNP", "Cee_1313i_LNP", "Cee_1323i_LNP", "Cee_1333i_LNP", "Cee_2223i_LNP", "Cee_2323i_LNP", "Cee_2333i_LNP",
    "Ceu_1111r_LNP", "Ceu_1112r_LNP", "Ceu_1113r_LNP", "Ceu_1122r_LNP", "Ceu_1123r_LNP", "Ceu_1133r_LNP", "Ceu_1211r_LNP", "Ceu_1212r_LNP", "Ceu_1213r_LNP",
    "Ceu_1221r_LNP", "Ceu_1222r_LNP", "Ceu_1223r_LNP", "Ceu_1231r_LNP", "Ceu_1232r_LNP", "Ceu_1233r_LNP", "Ceu_1311r_LNP", "Ceu_1312r_LNP", "Ceu_1313r_LNP",
    "Ceu_1321r_LNP", "Ceu_1322r_LNP", "Ceu_1323r_LNP", "Ceu_1331r_LNP", "Ceu_1332r_LNP", "Ceu_1333r_LNP", "Ceu_2211r_LNP", "Ceu_2212r_LNP", "Ceu_2213r_LNP",
    "Ceu_2222r_LNP", "Ceu_2223r_LNP", "Ceu_2233r_LNP", "Ceu_2311r_LNP", "Ceu_2312r_LNP", "Ceu_2313r_LNP", "Ceu_2321r_LNP", "Ceu_2322r_LNP", "Ceu_2323r_LNP",
    "Ceu_2331r_LNP", "Ceu_2332r_LNP", "Ceu_2333r_LNP", "Ceu_3311r_LNP", "Ceu_3312r_LNP", "Ceu_3313r_LNP", "Ceu_3322r_LNP", "Ceu_3323r_LNP", "Ceu_3333r_LNP",
    "Ceu_1112i_LNP", "Ceu_1113i_LNP", "Ceu_1123i_LNP", "Ceu_1211i_LNP", "Ceu_1212i_LNP", "Ceu_1213i_LNP", "Ceu_1221i_LNP", "Ceu_1222i_LNP", "Ceu_1223i_LNP",
    "Ceu_1231i_LNP", "Ceu_1232i_LNP", "Ceu_1233i_LNP", "Ceu_1311i_LNP", "Ceu_1312i_LNP", "Ceu_1313i_LNP", "Ceu_1321i_LNP", "Ceu_1322i_LNP", "Ceu_1323i_LNP",
    "Ceu_1331i_LNP", "Ceu_1332i_LNP", "Ceu_1333i_LNP", "Ceu_2212i_LNP", "Ceu_2213i_LNP", "Ceu_2223i_LNP", "Ceu_2312i_LNP", "Ceu_2313i_LNP", "Ceu_2321i_LNP",
    "Ceu_2322i_LNP", "Ceu_2323i_LNP", "Ceu_2331i_LNP", "Ceu_2332i_LNP", "Ceu_2333i_LNP", "Ceu_2311i_LNP", "Ceu_3312i_LNP", "Ceu_3313i_LNP", "Ceu_3323i_LNP",
    "Ced_1111r_LNP", "Ced_1112r_LNP", "Ced_1113r_LNP", "Ced_1122r_LNP", "Ced_1123r_LNP", "Ced_1133r_LNP", "Ced_1211r_LNP", "Ced_1212r_LNP", "Ced_1213r_LNP",
    "Ced_1221r_LNP", "Ced_1222r_LNP", "Ced_1223r_LNP", "Ced_1231r_LNP", "Ced_1232r_LNP", "Ced_1233r_LNP", "Ced_1311r_LNP", "Ced_1312r_LNP", "Ced_1313r_LNP",
    "Ced_1321r_LNP", "Ced_1322r_LNP", "Ced_1323r_LNP", "Ced_1331r_LNP", "Ced_1332r_LNP", "Ced_1333r_LNP", "Ced_2211r_LNP", "Ced_2212r_LNP", "Ced_2213r_LNP",
    "Ced_2222r_LNP", "Ced_2223r_LNP", "Ced_2233r_LNP", "Ced_2311r_LNP", "Ced_2312r_LNP", "Ced_2313r_LNP", "Ced_2321r_LNP", "Ced_2322r_LNP", "Ced_2323r_LNP",
    "Ced_2331r_LNP", "Ced_2332r_LNP", "Ced_2333r_LNP", "Ced_3311r_LNP", "Ced_3312r_LNP", "Ced_3313r_LNP", "Ced_3322r_LNP", "Ced_3323r_LNP", "Ced_3333r_LNP",
    "Ced_1112i_LNP", "Ced_1113i_LNP", "Ced_1123i_LNP", "Ced_1211i_LNP", "Ced_1212i_LNP", "Ced_1213i_LNP", "Ced_1221i_LNP", "Ced_1222i_LNP", "Ced_1223i_LNP",
    "Ced_1231i_LNP", "Ced_1232i_LNP", "Ced_1233i_LNP", "Ced_1311i_LNP", "Ced_1312i_LNP", "Ced_1313i_LNP", "Ced_1321i_LNP", "Ced_1322i_LNP", "Ced_1323i_LNP",
    "Ced_1331i_LNP", "Ced_1332i_LNP", "Ced_1333i_LNP", "Ced_2212i_LNP", "Ced_2213i_LNP", "Ced_2223i_LNP", "Ced_2312i_LNP", "Ced_2313i_LNP", "Ced_2321i_LNP",
    "Ced_2322i_LNP", "Ced_2323i_LNP", "Ced_2331i_LNP", "Ced_2332i_LNP", "Ced_2333i_LNP", "Ced_2311i_LNP", "Ced_3312i_LNP", "Ced_3313i_LNP", "Ced_3323i_LNP",
    "Cle_1111r_LNP", "Cle_1112r_LNP", "Cle_1113r_LNP", "Cle_1122r_LNP", "Cle_1123r_LNP", "Cle_1133r_LNP", "Cle_1211r_LNP", "Cle_1212r_LNP", "Cle_1213r_LNP",
    "Cle_1221r_LNP", "Cle_1222r_LNP", "Cle_1223r_LNP", "Cle_1231r_LNP", "Cle_1232r_LNP", "Cle_1233r_LNP", "Cle_1311r_LNP", "Cle_1312r_LNP", "Cle_1313r_LNP",
    "Cle_1321r_LNP", "Cle_1322r_LNP", "Cle_1323r_LNP", "Cle_1331r_LNP", "Cle_1332r_LNP", "Cle_1333r_LNP", "Cle_2211r_LNP", "Cle_2212r_LNP", "Cle_2213r_LNP",
    "Cle_2222r_LNP", "Cle_2223r_LNP", "Cle_2233r_LNP", "Cle_2311r_LNP", "Cle_2312r_LNP", "Cle_2313r_LNP", "Cle_2321r_LNP", "Cle_2322r_LNP", "Cle_2323r_LNP",
    "Cle_2331r_LNP", "Cle_2332r_LNP", "Cle_2333r_LNP", "Cle_3311r_LNP", "Cle_3312r_LNP", "Cle_3313r_LNP", "Cle_3322r_LNP", "Cle_3323r_LNP", "Cle_3333r_LNP",
    "Cle_1112i_LNP", "Cle_1113i_LNP", "Cle_1123i_LNP", "Cle_1211i_LNP", "Cle_1212i_LNP", "Cle_1213i_LNP", "Cle_1221i_LNP", "Cle_1222i_LNP", "Cle_1223i_LNP",
    "Cle_1231i_LNP", "Cle_1232i_LNP", "Cle_1233i_LNP", "Cle_1311i_LNP", "Cle_1312i_LNP", "Cle_1313i_LNP", "Cle_1321i_LNP", "Cle_1322i_LNP", "Cle_1323i_LNP",
    "Cle_1331i_LNP", "Cle_1332i_LNP", "Cle_1333i_LNP", "Cle_2212i_LNP", "Cle_2213i_LNP", "Cle_2223i_LNP", "Cle_2312i_LNP", "Cle_2313i_LNP", "Cle_2321i_LNP",
    "Cle_2322i_LNP", "Cle_2323i_LNP", "Cle_2331i_LNP", "Cle_2332i_LNP", "Cle_2333i_LNP", "Cle_2311i_LNP", "Cle_3312i_LNP", "Cle_3313i_LNP", "Cle_3323i_LNP",
    "Clu_1111r_LNP", "Clu_1112r_LNP", "Clu_1113r_LNP", "Clu_1122r_LNP", "Clu_1123r_LNP", "Clu_1133r_LNP", "Clu_1211r_LNP", "Clu_1212r_LNP", "Clu_1213r_LNP",
    "Clu_1221r_LNP", "Clu_1222r_LNP", "Clu_1223r_LNP", "Clu_1231r_LNP", "Clu_1232r_LNP", "Clu_1233r_LNP", "Clu_1311r_LNP", "Clu_1312r_LNP", "Clu_1313r_LNP",
    "Clu_1321r_LNP", "Clu_1322r_LNP", "Clu_1323r_LNP", "Clu_1331r_LNP", "Clu_1332r_LNP", "Clu_1333r_LNP", "Clu_2211r_LNP", "Clu_2212r_LNP", "Clu_2213r_LNP",
    "Clu_2222r_LNP", "Clu_2223r_LNP", "Clu_2233r_LNP", "Clu_2311r_LNP", "Clu_2312r_LNP", "Clu_2313r_LNP", "Clu_2321r_LNP", "Clu_2322r_LNP", "Clu_2323r_LNP",
    "Clu_2331r_LNP", "Clu_2332r_LNP", "Clu_2333r_LNP", "Clu_3311r_LNP", "Clu_3312r_LNP", "Clu_3313r_LNP", "Clu_3322r_LNP", "Clu_3323r_LNP", "Clu_3333r_LNP",
    "Clu_1112i_LNP", "Clu_1113i_LNP", "Clu_1123i_LNP", "Clu_1211i_LNP", "Clu_1212i_LNP", "Clu_1213i_LNP", "Clu_1221i_LNP", "Clu_1222i_LNP", "Clu_1223i_LNP",
    "Clu_1231i_LNP", "Clu_1232i_LNP", "Clu_1233i_LNP", "Clu_1311i_LNP", "Clu_1312i_LNP", "Clu_1313i_LNP", "Clu_1321i_LNP", "Clu_1322i_LNP", "Clu_1323i_LNP",
    "Clu_1331i_LNP", "Clu_1332i_LNP", "Clu_1333i_LNP", "Clu_2212i_LNP", "Clu_2213i_LNP", "Clu_2223i_LNP", "Clu_2312i_LNP", "Clu_2313i_LNP", "Clu_2321i_LNP",
    "Clu_2322i_LNP", "Clu_2323i_LNP", "Clu_2331i_LNP", "Clu_2332i_LNP", "Clu_2333i_LNP", "Clu_2311i_LNP", "Clu_3312i_LNP", "Clu_3313i_LNP", "Clu_3323i_LNP",
    "Cld_1111r_LNP", "Cld_1112r_LNP", "Cld_1113r_LNP", "Cld_1122r_LNP", "Cld_1123r_LNP", "Cld_1133r_LNP", "Cld_1211r_LNP", "Cld_1212r_LNP", "Cld_1213r_LNP",
    "Cld_1221r_LNP", "Cld_1222r_LNP", "Cld_1223r_LNP", "Cld_1231r_LNP", "Cld_1232r_LNP", "Cld_1233r_LNP", "Cld_1311r_LNP", "Cld_1312r_LNP", "Cld_1313r_LNP",
    "Cld_1321r_LNP", "Cld_1322r_LNP", "Cld_1323r_LNP", "Cld_1331r_LNP", "Cld_1332r_LNP", "Cld_1333r_LNP", "Cld_2211r_LNP", "Cld_2212r_LNP", "Cld_2213r_LNP",
    "Cld_2222r_LNP", "Cld_2223r_LNP", "Cld_2233r_LNP", "Cld_2311r_LNP", "Cld_2312r_LNP", "Cld_2313r_LNP", "Cld_2321r_LNP", "Cld_2322r_LNP", "Cld_2323r_LNP",
    "Cld_2331r_LNP", "Cld_2332r_LNP", "Cld_2333r_LNP", "Cld_3311r_LNP", "Cld_3312r_LNP", "Cld_3313r_LNP", "Cld_3322r_LNP", "Cld_3323r_LNP", "Cld_3333r_LNP",
    "Cld_1112i_LNP", "Cld_1113i_LNP", "Cld_1123i_LNP", "Cld_1211i_LNP", "Cld_1212i_LNP", "Cld_1213i_LNP", "Cld_1221i_LNP", "Cld_1222i_LNP", "Cld_1223i_LNP",
    "Cld_1231i_LNP", "Cld_1232i_LNP", "Cld_1233i_LNP", "Cld_1311i_LNP", "Cld_1312i_LNP", "Cld_1313i_LNP", "Cld_1321i_LNP", "Cld_1322i_LNP", "Cld_1323i_LNP",
    "Cld_1331i_LNP", "Cld_1332i_LNP", "Cld_1333i_LNP", "Cld_2212i_LNP", "Cld_2213i_LNP", "Cld_2223i_LNP", "Cld_2312i_LNP", "Cld_2313i_LNP", "Cld_2321i_LNP",
    "Cld_2322i_LNP", "Cld_2323i_LNP", "Cld_2331i_LNP", "Cld_2332i_LNP", "Cld_2333i_LNP", "Cld_2311i_LNP", "Cld_3312i_LNP", "Cld_3313i_LNP", "Cld_3323i_LNP",
    "Cqe_1111r_LNP", "Cqe_1112r_LNP", "Cqe_1113r_LNP", "Cqe_1122r_LNP", "Cqe_1123r_LNP", "Cqe_1133r_LNP", "Cqe_1211r_LNP", "Cqe_1212r_LNP", "Cqe_1213r_LNP",
    "Cqe_1221r_LNP", "Cqe_1222r_LNP", "Cqe_1223r_LNP", "Cqe_1231r_LNP", "Cqe_1232r_LNP", "Cqe_1233r_LNP", "Cqe_1311r_LNP", "Cqe_1312r_LNP", "Cqe_1313r_LNP",
    "Cqe_1321r_LNP", "Cqe_1322r_LNP", "Cqe_1323r_LNP", "Cqe_1331r_LNP", "Cqe_1332r_LNP", "Cqe_1333r_LNP", "Cqe_2211r_LNP", "Cqe_2212r_LNP", "Cqe_2213r_LNP",
    "Cqe_2222r_LNP", "Cqe_2223r_LNP", "Cqe_2233r_LNP", "Cqe_2311r_LNP", "Cqe_2312r_LNP", "Cqe_2313r_LNP", "Cqe_2321r_LNP", "Cqe_2322r_LNP", "Cqe_2323r_LNP",
    "Cqe_2331r_LNP", "Cqe_2332r_LNP", "Cqe_2333r_LNP", "Cqe_3311r_LNP", "Cqe_3312r_LNP", "Cqe_3313r_LNP", "Cqe_3322r_LNP", "Cqe_3323r_LNP", "Cqe_3333r_LNP",
    "Cqe_1112i_LNP", "Cqe_1113i_LNP", "Cqe_1123i_LNP", "Cqe_1211i_LNP", "Cqe_1212i_LNP", "Cqe_1213i_LNP", "Cqe_1221i_LNP", "Cqe_1222i_LNP", "Cqe_1223i_LNP",
    "Cqe_1231i_LNP", "Cqe_1232i_LNP", "Cqe_1233i_LNP", "Cqe_1311i_LNP", "Cqe_1312i_LNP", "Cqe_1313i_LNP", "Cqe_1321i_LNP", "Cqe_1322i_LNP", "Cqe_1323i_LNP",
    "Cqe_1331i_LNP", "Cqe_1332i_LNP", "Cqe_1333i_LNP", "Cqe_2212i_LNP", "Cqe_2213i_LNP", "Cqe_2223i_LNP", "Cqe_2312i_LNP", "Cqe_2313i_LNP", "Cqe_2321i_LNP",
    "Cqe_2322i_LNP", "Cqe_2323i_LNP", "Cqe_2331i_LNP", "Cqe_2332i_LNP", "Cqe_2333i_LNP", "Cqe_2311i_LNP", "Cqe_3312i_LNP", "Cqe_3313i_LNP", "Cqe_3323i_LNP",
    "Cledq_1111r_LNP", "Cledq_1112r_LNP", "Cledq_1113r_LNP", "Cledq_1121r_LNP", "Cledq_1122r_LNP", "Cledq_1123r_LNP", "Cledq_1131r_LNP", "Cledq_1132r_LNP", "Cledq_1133r_LNP",
    "Cledq_1211r_LNP", "Cledq_1212r_LNP", "Cledq_1213r_LNP", "Cledq_1221r_LNP", "Cledq_1222r_LNP", "Cledq_1223r_LNP", "Cledq_1231r_LNP", "Cledq_1232r_LNP", "Cledq_1233r_LNP",
    "Cledq_1311r_LNP", "Cledq_1312r_LNP", "Cledq_1313r_LNP", "Cledq_1321r_LNP", "Cledq_1322r_LNP", "Cledq_1323r_LNP", "Cledq_1331r_LNP", "Cledq_1332r_LNP", "Cledq_1333r_LNP",
    "Cledq_2111r_LNP", "Cledq_2112r_LNP", "Cledq_2113r_LNP", "Cledq_2121r_LNP", "Cledq_2122r_LNP", "Cledq_2123r_LNP", "Cledq_2131r_LNP", "Cledq_2132r_LNP", "Cledq_2133r_LNP",
    "Cledq_2211r_LNP", "Cledq_2212r_LNP", "Cledq_2213r_LNP", "Cledq_2221r_LNP", "Cledq_2222r_LNP", "Cledq_2223r_LNP", "Cledq_2231r_LNP", "Cledq_2232r_LNP", "Cledq_2233r_LNP",
    "Cledq_2311r_LNP", "Cledq_2312r_LNP", "Cledq_2313r_LNP", "Cledq_2321r_LNP", "Cledq_2322r_LNP", "Cledq_2323r_LNP", "Cledq_2331r_LNP", "Cledq_2332r_LNP", "Cledq_2333r_LNP",
    "Cledq_3111r_LNP", "Cledq_3112r_LNP", "Cledq_3113r_LNP", "Cledq_3121r_LNP", "Cledq_3122r_LNP", "Cledq_3123r_LNP", "Cledq_3131r_LNP", "Cledq_3132r_LNP", "Cledq_3133r_LNP",
    "Cledq_3211r_LNP", "Cledq_3212r_LNP", "Cledq_3213r_LNP", "Cledq_3221r_LNP", "Cledq_3222r_LNP", "Cledq_3223r_LNP", "Cledq_3231r_LNP", "Cledq_3232r_LNP", "Cledq_3233r_LNP",
    "Cledq_3311r_LNP", "Cledq_3312r_LNP", "Cledq_3313r_LNP", "Cledq_3321r_LNP", "Cledq_3322r_LNP", "Cledq_3323r_LNP", "Cledq_3331r_LNP", "Cledq_3332r_LNP", "Cledq_3333r_LNP",
    "Cledq_1111i_LNP", "Cledq_1112i_LNP", "Cledq_1113i_LNP", "Cledq_1121i_LNP", "Cledq_1122i_LNP", "Cledq_1123i_LNP", "Cledq_1131i_LNP", "Cledq_1132i_LNP", "Cledq_1133i_LNP",
    "Cledq_1211i_LNP", "Cledq_1212i_LNP", "Cledq_1213i_LNP", "Cledq_1221i_LNP", "Cledq_1222i_LNP", "Cledq_1223i_LNP", "Cledq_1231i_LNP", "Cledq_1232i_LNP", "Cledq_1233i_LNP",
    "Cledq_1311i_LNP", "Cledq_1312i_LNP", "Cledq_1313i_LNP", "Cledq_1321i_LNP", "Cledq_1322i_LNP", "Cledq_1323i_LNP", "Cledq_1331i_LNP", "Cledq_1332i_LNP", "Cledq_1333i_LNP",
    "Cledq_2111i_LNP", "Cledq_2112i_LNP", "Cledq_2113i_LNP", "Cledq_2121i_LNP", "Cledq_2122i_LNP", "Cledq_2123i_LNP", "Cledq_2131i_LNP", "Cledq_2132i_LNP", "Cledq_2133i_LNP",
    "Cledq_2211i_LNP", "Cledq_2212i_LNP", "Cledq_2213i_LNP", "Cledq_2221i_LNP", "Cledq_2222i_LNP", "Cledq_2223i_LNP", "Cledq_2231i_LNP", "Cledq_2232i_LNP", "Cledq_2233i_LNP",
    "Cledq_2311i_LNP", "Cledq_2312i_LNP", "Cledq_2313i_LNP", "Cledq_2321i_LNP", "Cledq_2322i_LNP", "Cledq_2323i_LNP", "Cledq_2331i_LNP", "Cledq_2332i_LNP", "Cledq_2333i_LNP",
    "Cledq_3111i_LNP", "Cledq_3112i_LNP", "Cledq_3113i_LNP", "Cledq_3121i_LNP", "Cledq_3122i_LNP", "Cledq_3123i_LNP", "Cledq_3131i_LNP", "Cledq_3132i_LNP", "Cledq_3133i_LNP",
    "Cledq_3211i_LNP", "Cledq_3212i_LNP", "Cledq_3213i_LNP", "Cledq_3221i_LNP", "Cledq_3222i_LNP", "Cledq_3223i_LNP", "Cledq_3231i_LNP", "Cledq_3232i_LNP", "Cledq_3233i_LNP",
    "Cledq_3311i_LNP", "Cledq_3312i_LNP", "Cledq_3313i_LNP", "Cledq_3321i_LNP", "Cledq_3322i_LNP", "Cledq_3323i_LNP", "Cledq_3331i_LNP", "Cledq_3332i_LNP", "Cledq_3333i_LNP",
    "Cqq1_1111r_LNP", "Cqq1_1112r_LNP", "Cqq1_1113r_LNP", "Cqq1_1122r_LNP", "Cqq1_1123r_LNP", "Cqq1_1133r_LNP", "Cqq1_1212r_LNP", "Cqq1_1213r_LNP", "Cqq1_1221r_LNP",
    "Cqq1_1222r_LNP", "Cqq1_1223r_LNP", "Cqq1_1231r_LNP", "Cqq1_1232r_LNP", "Cqq1_1233r_LNP", "Cqq1_1313r_LNP", "Cqq1_1322r_LNP", "Cqq1_1323r_LNP", "Cqq1_1331r_LNP",
    "Cqq1_1332r_LNP", "Cqq1_1333r_LNP", "Cqq1_2222r_LNP", "Cqq1_2223r_LNP", "Cqq1_2233r_LNP", "Cqq1_2323r_LNP", "Cqq1_2332r_LNP", "Cqq1_2333r_LNP", "Cqq1_3333r_LNP",
    "Cqq1_1112i_LNP", "Cqq1_1113i_LNP", "Cqq1_1123i_LNP", "Cqq1_1212i_LNP", "Cqq1_1213i_LNP", "Cqq1_1222i_LNP", "Cqq1_1223i_LNP", "Cqq1_1231i_LNP", "Cqq1_1232i_LNP",
    "Cqq1_1233i_LNP", "Cqq1_1313i_LNP", "Cqq1_1322i_LNP", "Cqq1_1323i_LNP", "Cqq1_1332i_LNP", "Cqq1_1333i_LNP", "Cqq1_2223i_LNP", "Cqq1_2323i_LNP", "Cqq1_2333i_LNP",
    "Cqq3_1111r_LNP", "Cqq3_1112r_LNP", "Cqq3_1113r_LNP", "Cqq3_1122r_LNP", "Cqq3_1123r_LNP", "Cqq3_1133r_LNP", "Cqq3_1212r_LNP", "Cqq3_1213r_LNP", "Cqq3_1221r_LNP",
    "Cqq3_1222r_LNP", "Cqq3_1223r_LNP", "Cqq3_1231r_LNP", "Cqq3_1232r_LNP", "Cqq3_1233r_LNP", "Cqq3_1313r_LNP", "Cqq3_1322r_LNP", "Cqq3_1323r_LNP", "Cqq3_1331r_LNP",
    "Cqq3_1332r_LNP", "Cqq3_1333r_LNP", "Cqq3_2222r_LNP", "Cqq3_2223r_LNP", "Cqq3_2233r_LNP", "Cqq3_2323r_LNP", "Cqq3_2332r_LNP", "Cqq3_2333r_LNP", "Cqq3_3333r_LNP",
    "Cqq3_1112i_LNP", "Cqq3_1113i_LNP", "Cqq3_1123i_LNP", "Cqq3_1212i_LNP", "Cqq3_1213i_LNP", "Cqq3_1222i_LNP", "Cqq3_1223i_LNP", "Cqq3_1231i_LNP", "Cqq3_1232i_LNP",
    "Cqq3_1233i_LNP", "Cqq3_1313i_LNP", "Cqq3_1322i_LNP", "Cqq3_1323i_LNP", "Cqq3_1332i_LNP", "Cqq3_1333i_LNP", "Cqq3_2223i_LNP", "Cqq3_2323i_LNP", "Cqq3_2333i_LNP",
    "Cuu_1111r_LNP", "Cuu_1112r_LNP", "Cuu_1113r_LNP", "Cuu_1122r_LNP", "Cuu_1123r_LNP", "Cuu_1133r_LNP", "Cuu_1212r_LNP", "Cuu_1213r_LNP", "Cuu_1221r_LNP",
    "Cuu_1222r_LNP", "Cuu_1223r_LNP", "Cuu_1231r_LNP", "Cuu_1232r_LNP", "Cuu_1233r_LNP", "Cuu_1313r_LNP", "Cuu_1322r_LNP", "Cuu_1323r_LNP", "Cuu_1331r_LNP",
    "Cuu_1332r_LNP", "Cuu_1333r_LNP", "Cuu_2222r_LNP", "Cuu_2223r_LNP", "Cuu_2233r_LNP", "Cuu_2323r_LNP", "Cuu_2332r_LNP", "Cuu_2333r_LNP", "Cuu_3333r_LNP",
    "Cuu_1112i_LNP", "Cuu_1113i_LNP", "Cuu_1123i_LNP", "Cuu_1212i_LNP", "Cuu_1213i_LNP", "Cuu_1222i_LNP", "Cuu_1223i_LNP", "Cuu_1231i_LNP", "Cuu_1232i_LNP",
    "Cuu_1233i_LNP", "Cuu_1313i_LNP", "Cuu_1322i_LNP", "Cuu_1323i_LNP", "Cuu_1332i_LNP", "Cuu_1333i_LNP", "Cuu_2223i_LNP", "Cuu_2323i_LNP", "Cuu_2333i_LNP",
    "Cdd_1111r_LNP", "Cdd_1112r_LNP", "Cdd_1113r_LNP", "Cdd_1122r_LNP", "Cdd_1123r_LNP", "Cdd_1133r_LNP", "Cdd_1212r_LNP", "Cdd_1213r_LNP", "Cdd_1221r_LNP",
    "Cdd_1222r_LNP", "Cdd_1223r_LNP", "Cdd_1231r_LNP", "Cdd_1232r_LNP", "Cdd_1233r_LNP", "Cdd_1313r_LNP", "Cdd_1322r_LNP", "Cdd_1323r_LNP", "Cdd_1331r_LNP",
    "Cdd_1332r_LNP", "Cdd_1333r_LNP", "Cdd_2222r_LNP", "Cdd_2223r_LNP", "Cdd_2233r_LNP", "Cdd_2323r_LNP", "Cdd_2332r_LNP", "Cdd_2333r_LNP", "Cdd_3333r_LNP",
    "Cdd_1112i_LNP", "Cdd_1113i_LNP", "Cdd_1123i_LNP", "Cdd_1212i_LNP", "Cdd_1213i_LNP", "Cdd_1222i_LNP", "Cdd_1223i_LNP", "Cdd_1231i_LNP", "Cdd_1232i_LNP",
    "Cdd_1233i_LNP", "Cdd_1313i_LNP", "Cdd_1322i_LNP", "Cdd_1323i_LNP", "Cdd_1332i_LNP", "Cdd_1333i_LNP", "Cdd_2223i_LNP", "Cdd_2323i_LNP", "Cdd_2333i_LNP",
    "Cud1_1111r_LNP", "Cud1_1112r_LNP", "Cud1_1113r_LNP", "Cud1_1122r_LNP", "Cud1_1123r_LNP", "Cud1_1133r_LNP", "Cud1_1211r_LNP", "Cud1_1212r_LNP", "Cud1_1213r_LNP",
    "Cud1_1221r_LNP", "Cud1_1222r_LNP", "Cud1_1223r_LNP", "Cud1_1231r_LNP", "Cud1_1232r_LNP", "Cud1_1233r_LNP", "Cud1_1311r_LNP", "Cud1_1312r_LNP", "Cud1_1313r_LNP",
    "Cud1_1321r_LNP", "Cud1_1322r_LNP", "Cud1_1323r_LNP", "Cud1_1331r_LNP", "Cud1_1332r_LNP", "Cud1_1333r_LNP", "Cud1_2211r_LNP", "Cud1_2212r_LNP", "Cud1_2213r_LNP",
    "Cud1_2222r_LNP", "Cud1_2223r_LNP", "Cud1_2233r_LNP", "Cud1_2311r_LNP", "Cud1_2312r_LNP", "Cud1_2313r_LNP", "Cud1_2321r_LNP", "Cud1_2322r_LNP", "Cud1_2323r_LNP",
    "Cud1_2331r_LNP", "Cud1_2332r_LNP", "Cud1_2333r_LNP", "Cud1_3311r_LNP", "Cud1_3312r_LNP", "Cud1_3313r_LNP", "Cud1_3322r_LNP", "Cud1_3323r_LNP", "Cud1_3333r_LNP",
    "Cud1_1112i_LNP", "Cud1_1113i_LNP", "Cud1_1123i_LNP", "Cud1_1211i_LNP", "Cud1_1212i_LNP", "Cud1_1213i_LNP", "Cud1_1221i_LNP", "Cud1_1222i_LNP", "Cud1_1223i_LNP",
    "Cud1_1231i_LNP", "Cud1_1232i_LNP", "Cud1_1233i_LNP", "Cud1_1311i_LNP", "Cud1_1312i_LNP", "Cud1_1313i_LNP", "Cud1_1321i_LNP", "Cud1_1322i_LNP", "Cud1_1323i_LNP",
    "Cud1_1331i_LNP", "Cud1_1332i_LNP", "Cud1_1333i_LNP", "Cud1_2212i_LNP", "Cud1_2213i_LNP", "Cud1_2223i_LNP", "Cud1_2312i_LNP", "Cud1_2313i_LNP", "Cud1_2321i_LNP",
    "Cud1_2322i_LNP", "Cud1_2323i_LNP", "Cud1_2331i_LNP", "Cud1_2332i_LNP", "Cud1_2333i_LNP", "Cud1_2311i_LNP", "Cud1_3312i_LNP", "Cud1_3313i_LNP", "Cud1_3323i_LNP",
    "Cud8_1111r_LNP", "Cud8_1112r_LNP", "Cud8_1113r_LNP", "Cud8_1122r_LNP", "Cud8_1123r_LNP", "Cud8_1133r_LNP", "Cud8_1211r_LNP", "Cud8_1212r_LNP", "Cud8_1213r_LNP",
    "Cud8_1221r_LNP", "Cud8_1222r_LNP", "Cud8_1223r_LNP", "Cud8_1231r_LNP", "Cud8_1232r_LNP", "Cud8_1233r_LNP", "Cud8_1311r_LNP", "Cud8_1312r_LNP", "Cud8_1313r_LNP",
    "Cud8_1321r_LNP", "Cud8_1322r_LNP", "Cud8_1323r_LNP", "Cud8_1331r_LNP", "Cud8_1332r_LNP", "Cud8_1333r_LNP", "Cud8_2211r_LNP", "Cud8_2212r_LNP", "Cud8_2213r_LNP",
    "Cud8_2222r_LNP", "Cud8_2223r_LNP", "Cud8_2233r_LNP", "Cud8_2311r_LNP", "Cud8_2312r_LNP", "Cud8_2313r_LNP", "Cud8_2321r_LNP", "Cud8_2322r_LNP", "Cud8_2323r_LNP",
    "Cud8_2331r_LNP", "Cud8_2332r_LNP", "Cud8_2333r_LNP", "Cud8_3311r_LNP", "Cud8_3312r_LNP", "Cud8_3313r_LNP", "Cud8_3322r_LNP", "Cud8_3323r_LNP", "Cud8_3333r_LNP",
    "Cud8_1112i_LNP", "Cud8_1113i_LNP", "Cud8_1123i_LNP", "Cud8_1211i_LNP", "Cud8_1212i_LNP", "Cud8_1213i_LNP", "Cud8_1221i_LNP", "Cud8_1222i_LNP", "Cud8_1223i_LNP",
    "Cud8_1231i_LNP", "Cud8_1232i_LNP", "Cud8_1233i_LNP", "Cud8_1311i_LNP", "Cud8_1312i_LNP", "Cud8_1313i_LNP", "Cud8_1321i_LNP", "Cud8_1322i_LNP", "Cud8_1323i_LNP",
    "Cud8_1331i_LNP", "Cud8_1332i_LNP", "Cud8_1333i_LNP", "Cud8_2212i_LNP", "Cud8_2213i_LNP", "Cud8_2223i_LNP", "Cud8_2312i_LNP", "Cud8_2313i_LNP", "Cud8_2321i_LNP",
    "Cud8_2322i_LNP", "Cud8_2323i_LNP", "Cud8_2331i_LNP", "Cud8_2332i_LNP", "Cud8_2333i_LNP", "Cud8_2311i_LNP", "Cud8_3312i_LNP", "Cud8_3313i_LNP", "Cud8_3323i_LNP",
    "Cqu1_1111r_LNP", "Cqu1_1112r_LNP", "Cqu1_1113r_LNP", "Cqu1_1122r_LNP", "Cqu1_1123r_LNP", "Cqu1_1133r_LNP", "Cqu1_1211r_LNP", "Cqu1_1212r_LNP", "Cqu1_1213r_LNP",
    "Cqu1_1221r_LNP", "Cqu1_1222r_LNP", "Cqu1_1223r_LNP", "Cqu1_1231r_LNP", "Cqu1_1232r_LNP", "Cqu1_1233r_LNP", "Cqu1_1311r_LNP", "Cqu1_1312r_LNP", "Cqu1_1313r_LNP",
    "Cqu1_1321r_LNP", "Cqu1_1322r_LNP", "Cqu1_1323r_LNP", "Cqu1_1331r_LNP", "Cqu1_1332r_LNP", "Cqu1_1333r_LNP", "Cqu1_2211r_LNP", "Cqu1_2212r_LNP", "Cqu1_2213r_LNP",
    "Cqu1_2222r_LNP", "Cqu1_2223r_LNP", "Cqu1_2233r_LNP", "Cqu1_2311r_LNP", "Cqu1_2312r_LNP", "Cqu1_2313r_LNP", "Cqu1_2321r_LNP", "Cqu1_2322r_LNP", "Cqu1_2323r_LNP",
    "Cqu1_2331r_LNP", "Cqu1_2332r_LNP", "Cqu1_2333r_LNP", "Cqu1_3311r_LNP", "Cqu1_3312r_LNP", "Cqu1_3313r_LNP", "Cqu1_3322r_LNP", "Cqu1_3323r_LNP", "Cqu1_3333r_LNP",
    "Cqu1_1112i_LNP", "Cqu1_1113i_LNP", "Cqu1_1123i_LNP", "Cqu1_1211i_LNP", "Cqu1_1212i_LNP", "Cqu1_1213i_LNP", "Cqu1_1221i_LNP", "Cqu1_1222i_LNP", "Cqu1_1223i_LNP",
    "Cqu1_1231i_LNP", "Cqu1_1232i_LNP", "Cqu1_1233i_LNP", "Cqu1_1311i_LNP", "Cqu1_1312i_LNP", "Cqu1_1313i_LNP", "Cqu1_1321i_LNP", "Cqu1_1322i_LNP", "Cqu1_1323i_LNP",
    "Cqu1_1331i_LNP", "Cqu1_1332i_LNP", "Cqu1_1333i_LNP", "Cqu1_2212i_LNP", "Cqu1_2213i_LNP", "Cqu1_2223i_LNP", "Cqu1_2312i_LNP", "Cqu1_2313i_LNP", "Cqu1_2321i_LNP",
    "Cqu1_2322i_LNP", "Cqu1_2323i_LNP", "Cqu1_2331i_LNP", "Cqu1_2332i_LNP", "Cqu1_2333i_LNP", "Cqu1_2311i_LNP", "Cqu1_3312i_LNP", "Cqu1_3313i_LNP", "Cqu1_3323i_LNP",
    "Cqu8_1111r_LNP", "Cqu8_1112r_LNP", "Cqu8_1113r_LNP", "Cqu8_1122r_LNP", "Cqu8_1123r_LNP", "Cqu8_1133r_LNP", "Cqu8_1211r_LNP", "Cqu8_1212r_LNP", "Cqu8_1213r_LNP",
    "Cqu8_1221r_LNP", "Cqu8_1222r_LNP", "Cqu8_1223r_LNP", "Cqu8_1231r_LNP", "Cqu8_1232r_LNP", "Cqu8_1233r_LNP", "Cqu8_1311r_LNP", "Cqu8_1312r_LNP", "Cqu8_1313r_LNP",
    "Cqu8_1321r_LNP", "Cqu8_1322r_LNP", "Cqu8_1323r_LNP", "Cqu8_1331r_LNP", "Cqu8_1332r_LNP", "Cqu8_1333r_LNP", "Cqu8_2211r_LNP", "Cqu8_2212r_LNP", "Cqu8_2213r_LNP",
    "Cqu8_2222r_LNP", "Cqu8_2223r_LNP", "Cqu8_2233r_LNP", "Cqu8_2311r_LNP", "Cqu8_2312r_LNP", "Cqu8_2313r_LNP", "Cqu8_2321r_LNP", "Cqu8_2322r_LNP", "Cqu8_2323r_LNP",
    "Cqu8_2331r_LNP", "Cqu8_2332r_LNP", "Cqu8_2333r_LNP", "Cqu8_3311r_LNP", "Cqu8_3312r_LNP", "Cqu8_3313r_LNP", "Cqu8_3322r_LNP", "Cqu8_3323r_LNP", "Cqu8_3333r_LNP",
    "Cqu8_1112i_LNP", "Cqu8_1113i_LNP", "Cqu8_1123i_LNP", "Cqu8_1211i_LNP", "Cqu8_1212i_LNP", "Cqu8_1213i_LNP", "Cqu8_1221i_LNP", "Cqu8_1222i_LNP", "Cqu8_1223i_LNP",
    "Cqu8_1231i_LNP", "Cqu8_1232i_LNP", "Cqu8_1233i_LNP", "Cqu8_1311i_LNP", "Cqu8_1312i_LNP", "Cqu8_1313i_LNP", "Cqu8_1321i_LNP", "Cqu8_1322i_LNP", "Cqu8_1323i_LNP",
    "Cqu8_1331i_LNP", "Cqu8_1332i_LNP", "Cqu8_1333i_LNP", "Cqu8_2212i_LNP", "Cqu8_2213i_LNP", "Cqu8_2223i_LNP", "Cqu8_2312i_LNP", "Cqu8_2313i_LNP", "Cqu8_2321i_LNP",
    "Cqu8_2322i_LNP", "Cqu8_2323i_LNP", "Cqu8_2331i_LNP", "Cqu8_2332i_LNP", "Cqu8_2333i_LNP", "Cqu8_2311i_LNP", "Cqu8_3312i_LNP", "Cqu8_3313i_LNP", "Cqu8_3323i_LNP",
    "Cqd1_1111r_LNP", "Cqd1_1112r_LNP", "Cqd1_1113r_LNP", "Cqd1_1122r_LNP", "Cqd1_1123r_LNP", "Cqd1_1133r_LNP", "Cqd1_1211r_LNP", "Cqd1_1212r_LNP", "Cqd1_1213r_LNP",
    "Cqd1_1221r_LNP", "Cqd1_1222r_LNP", "Cqd1_1223r_LNP", "Cqd1_1231r_LNP", "Cqd1_1232r_LNP", "Cqd1_1233r_LNP", "Cqd1_1311r_LNP", "Cqd1_1312r_LNP", "Cqd1_1313r_LNP",
    "Cqd1_1321r_LNP", "Cqd1_1322r_LNP", "Cqd1_1323r_LNP", "Cqd1_1331r_LNP", "Cqd1_1332r_LNP", "Cqd1_1333r_LNP", "Cqd1_2211r_LNP", "Cqd1_2212r_LNP", "Cqd1_2213r_LNP",
    "Cqd1_2222r_LNP", "Cqd1_2223r_LNP", "Cqd1_2233r_LNP", "Cqd1_2311r_LNP", "Cqd1_2312r_LNP", "Cqd1_2313r_LNP", "Cqd1_2321r_LNP", "Cqd1_2322r_LNP", "Cqd1_2323r_LNP",
    "Cqd1_2331r_LNP", "Cqd1_2332r_LNP", "Cqd1_2333r_LNP", "Cqd1_3311r_LNP", "Cqd1_3312r_LNP", "Cqd1_3313r_LNP", "Cqd1_3322r_LNP", "Cqd1_3323r_LNP", "Cqd1_3333r_LNP",
    "Cqd1_1112i_LNP", "Cqd1_1113i_LNP", "Cqd1_1123i_LNP", "Cqd1_1211i_LNP", "Cqd1_1212i_LNP", "Cqd1_1213i_LNP", "Cqd1_1221i_LNP", "Cqd1_1222i_LNP", "Cqd1_1223i_LNP",
    "Cqd1_1231i_LNP", "Cqd1_1232i_LNP", "Cqd1_1233i_LNP", "Cqd1_1311i_LNP", "Cqd1_1312i_LNP", "Cqd1_1313i_LNP", "Cqd1_1321i_LNP", "Cqd1_1322i_LNP", "Cqd1_1323i_LNP",
    "Cqd1_1331i_LNP", "Cqd1_1332i_LNP", "Cqd1_1333i_LNP", "Cqd1_2212i_LNP", "Cqd1_2213i_LNP", "Cqd1_2223i_LNP", "Cqd1_2312i_LNP", "Cqd1_2313i_LNP", "Cqd1_2321i_LNP",
    "Cqd1_2322i_LNP", "Cqd1_2323i_LNP", "Cqd1_2331i_LNP", "Cqd1_2332i_LNP", "Cqd1_2333i_LNP", "Cqd1_2311i_LNP", "Cqd1_3312i_LNP", "Cqd1_3313i_LNP", "Cqd1_3323i_LNP",
    "Cqd8_1111r_LNP", "Cqd8_1112r_LNP", "Cqd8_1113r_LNP", "Cqd8_1122r_LNP", "Cqd8_1123r_LNP", "Cqd8_1133r_LNP", "Cqd8_1211r_LNP", "Cqd8_1212r_LNP", "Cqd8_1213r_LNP",
    "Cqd8_1221r_LNP", "Cqd8_1222r_LNP", "Cqd8_1223r_LNP", "Cqd8_1231r_LNP", "Cqd8_1232r_LNP", "Cqd8_1233r_LNP", "Cqd8_1311r_LNP", "Cqd8_1312r_LNP", "Cqd8_1313r_LNP",
    "Cqd8_1321r_LNP", "Cqd8_1322r_LNP", "Cqd8_1323r_LNP", "Cqd8_1331r_LNP", "Cqd8_1332r_LNP", "Cqd8_1333r_LNP", "Cqd8_2211r_LNP", "Cqd8_2212r_LNP", "Cqd8_2213r_LNP",
    "Cqd8_2222r_LNP", "Cqd8_2223r_LNP", "Cqd8_2233r_LNP", "Cqd8_2311r_LNP", "Cqd8_2312r_LNP", "Cqd8_2313r_LNP", "Cqd8_2321r_LNP", "Cqd8_2322r_LNP", "Cqd8_2323r_LNP",
    "Cqd8_2331r_LNP", "Cqd8_2332r_LNP", "Cqd8_2333r_LNP", "Cqd8_3311r_LNP", "Cqd8_3312r_LNP", "Cqd8_3313r_LNP", "Cqd8_3322r_LNP", "Cqd8_3323r_LNP", "Cqd8_3333r_LNP",
    "Cqd8_1112i_LNP", "Cqd8_1113i_LNP", "Cqd8_1123i_LNP", "Cqd8_1211i_LNP", "Cqd8_1212i_LNP", "Cqd8_1213i_LNP", "Cqd8_1221i_LNP", "Cqd8_1222i_LNP", "Cqd8_1223i_LNP",
    "Cqd8_1231i_LNP", "Cqd8_1232i_LNP", "Cqd8_1233i_LNP", "Cqd8_1311i_LNP", "Cqd8_1312i_LNP", "Cqd8_1313i_LNP", "Cqd8_1321i_LNP", "Cqd8_1322i_LNP", "Cqd8_1323i_LNP",
    "Cqd8_1331i_LNP", "Cqd8_1332i_LNP", "Cqd8_1333i_LNP", "Cqd8_2212i_LNP", "Cqd8_2213i_LNP", "Cqd8_2223i_LNP", "Cqd8_2312i_LNP", "Cqd8_2313i_LNP", "Cqd8_2321i_LNP",
    "Cqd8_2322i_LNP", "Cqd8_2323i_LNP", "Cqd8_2331i_LNP", "Cqd8_2332i_LNP", "Cqd8_2333i_LNP", "Cqd8_2311i_LNP", "Cqd8_3312i_LNP", "Cqd8_3313i_LNP", "Cqd8_3323i_LNP",
    "Cquqd1_1111r_LNP", "Cquqd1_1112r_LNP", "Cquqd1_1113r_LNP", "Cquqd1_1121r_LNP", "Cquqd1_1122r_LNP", "Cquqd1_1123r_LNP", "Cquqd1_1131r_LNP", "Cquqd1_1132r_LNP", "Cquqd1_1133r_LNP",
    "Cquqd1_1211r_LNP", "Cquqd1_1212r_LNP", "Cquqd1_1213r_LNP", "Cquqd1_1221r_LNP", "Cquqd1_1222r_LNP", "Cquqd1_1223r_LNP", "Cquqd1_1231r_LNP", "Cquqd1_1232r_LNP", "Cquqd1_1233r_LNP",
    "Cquqd1_1311r_LNP", "Cquqd1_1312r_LNP", "Cquqd1_1313r_LNP", "Cquqd1_1321r_LNP", "Cquqd1_1322r_LNP", "Cquqd1_1323r_LNP", "Cquqd1_1331r_LNP", "Cquqd1_1332r_LNP", "Cquqd1_1333r_LNP",
    "Cquqd1_2111r_LNP", "Cquqd1_2112r_LNP", "Cquqd1_2113r_LNP", "Cquqd1_2121r_LNP", "Cquqd1_2122r_LNP", "Cquqd1_2123r_LNP", "Cquqd1_2131r_LNP", "Cquqd1_2132r_LNP", "Cquqd1_2133r_LNP",
    "Cquqd1_2211r_LNP", "Cquqd1_2212r_LNP", "Cquqd1_2213r_LNP", "Cquqd1_2221r_LNP", "Cquqd1_2222r_LNP", "Cquqd1_2223r_LNP", "Cquqd1_2231r_LNP", "Cquqd1_2232r_LNP", "Cquqd1_2233r_LNP",
    "Cquqd1_2311r_LNP", "Cquqd1_2312r_LNP", "Cquqd1_2313r_LNP", "Cquqd1_2321r_LNP", "Cquqd1_2322r_LNP", "Cquqd1_2323r_LNP", "Cquqd1_2331r_LNP", "Cquqd1_2332r_LNP", "Cquqd1_2333r_LNP",
    "Cquqd1_3111r_LNP", "Cquqd1_3112r_LNP", "Cquqd1_3113r_LNP", "Cquqd1_3121r_LNP", "Cquqd1_3122r_LNP", "Cquqd1_3123r_LNP", "Cquqd1_3131r_LNP", "Cquqd1_3132r_LNP", "Cquqd1_3133r_LNP",
    "Cquqd1_3211r_LNP", "Cquqd1_3212r_LNP", "Cquqd1_3213r_LNP", "Cquqd1_3221r_LNP", "Cquqd1_3222r_LNP", "Cquqd1_3223r_LNP", "Cquqd1_3231r_LNP", "Cquqd1_3232r_LNP", "Cquqd1_3233r_LNP",
    "Cquqd1_3311r_LNP", "Cquqd1_3312r_LNP", "Cquqd1_3313r_LNP", "Cquqd1_3321r_LNP", "Cquqd1_3322r_LNP", "Cquqd1_3323r_LNP", "Cquqd1_3331r_LNP", "Cquqd1_3332r_LNP", "Cquqd1_3333r_LNP",
    "Cquqd1_1111i_LNP", "Cquqd1_1112i_LNP", "Cquqd1_1113i_LNP", "Cquqd1_1121i_LNP", "Cquqd1_1122i_LNP", "Cquqd1_1123i_LNP", "Cquqd1_1131i_LNP", "Cquqd1_1132i_LNP", "Cquqd1_1133i_LNP",
    "Cquqd1_1211i_LNP", "Cquqd1_1212i_LNP", "Cquqd1_1213i_LNP", "Cquqd1_1221i_LNP", "Cquqd1_1222i_LNP", "Cquqd1_1223i_LNP", "Cquqd1_1231i_LNP", "Cquqd1_1232i_LNP", "Cquqd1_1233i_LNP",
    "Cquqd1_1311i_LNP", "Cquqd1_1312i_LNP", "Cquqd1_1313i_LNP", "Cquqd1_1321i_LNP", "Cquqd1_1322i_LNP", "Cquqd1_1323i_LNP", "Cquqd1_1331i_LNP", "Cquqd1_1332i_LNP", "Cquqd1_1333i_LNP",
    "Cquqd1_2111i_LNP", "Cquqd1_2112i_LNP", "Cquqd1_2113i_LNP", "Cquqd1_2121i_LNP", "Cquqd1_2122i_LNP", "Cquqd1_2123i_LNP", "Cquqd1_2131i_LNP", "Cquqd1_2132i_LNP", "Cquqd1_2133i_LNP",
    "Cquqd1_2211i_LNP", "Cquqd1_2212i_LNP", "Cquqd1_2213i_LNP", "Cquqd1_2221i_LNP", "Cquqd1_2222i_LNP", "Cquqd1_2223i_LNP", "Cquqd1_2231i_LNP", "Cquqd1_2232i_LNP", "Cquqd1_2233i_LNP",
    "Cquqd1_2311i_LNP", "Cquqd1_2312i_LNP", "Cquqd1_2313i_LNP", "Cquqd1_2321i_LNP", "Cquqd1_2322i_LNP", "Cquqd1_2323i_LNP", "Cquqd1_2331i_LNP", "Cquqd1_2332i_LNP", "Cquqd1_2333i_LNP",
    "Cquqd1_3111i_LNP", "Cquqd1_3112i_LNP", "Cquqd1_3113i_LNP", "Cquqd1_3121i_LNP", "Cquqd1_3122i_LNP", "Cquqd1_3123i_LNP", "Cquqd1_3131i_LNP", "Cquqd1_3132i_LNP", "Cquqd1_3133i_LNP",
    "Cquqd1_3211i_LNP", "Cquqd1_3212i_LNP", "Cquqd1_3213i_LNP", "Cquqd1_3221i_LNP", "Cquqd1_3222i_LNP", "Cquqd1_3223i_LNP", "Cquqd1_3231i_LNP", "Cquqd1_3232i_LNP", "Cquqd1_3233i_LNP",
    "Cquqd1_3311i_LNP", "Cquqd1_3312i_LNP", "Cquqd1_3313i_LNP", "Cquqd1_3321i_LNP", "Cquqd1_3322i_LNP", "Cquqd1_3323i_LNP", "Cquqd1_3331i_LNP", "Cquqd1_3332i_LNP", "Cquqd1_3333i_LNP",
    "Cquqd8_1111r_LNP", "Cquqd8_1112r_LNP", "Cquqd8_1113r_LNP", "Cquqd8_1121r_LNP", "Cquqd8_1122r_LNP", "Cquqd8_1123r_LNP", "Cquqd8_1131r_LNP", "Cquqd8_1132r_LNP", "Cquqd8_1133r_LNP",
    "Cquqd8_1211r_LNP", "Cquqd8_1212r_LNP", "Cquqd8_1213r_LNP", "Cquqd8_1221r_LNP", "Cquqd8_1222r_LNP", "Cquqd8_1223r_LNP", "Cquqd8_1231r_LNP", "Cquqd8_1232r_LNP", "Cquqd8_1233r_LNP",
    "Cquqd8_1311r_LNP", "Cquqd8_1312r_LNP", "Cquqd8_1313r_LNP", "Cquqd8_1321r_LNP", "Cquqd8_1322r_LNP", "Cquqd8_1323r_LNP", "Cquqd8_1331r_LNP", "Cquqd8_1332r_LNP", "Cquqd8_1333r_LNP",
    "Cquqd8_2111r_LNP", "Cquqd8_2112r_LNP", "Cquqd8_2113r_LNP", "Cquqd8_2121r_LNP", "Cquqd8_2122r_LNP", "Cquqd8_2123r_LNP", "Cquqd8_2131r_LNP", "Cquqd8_2132r_LNP", "Cquqd8_2133r_LNP",
    "Cquqd8_2211r_LNP", "Cquqd8_2212r_LNP", "Cquqd8_2213r_LNP", "Cquqd8_2221r_LNP", "Cquqd8_2222r_LNP", "Cquqd8_2223r_LNP", "Cquqd8_2231r_LNP", "Cquqd8_2232r_LNP", "Cquqd8_2233r_LNP",
    "Cquqd8_2311r_LNP", "Cquqd8_2312r_LNP", "Cquqd8_2313r_LNP", "Cquqd8_2321r_LNP", "Cquqd8_2322r_LNP", "Cquqd8_2323r_LNP", "Cquqd8_2331r_LNP", "Cquqd8_2332r_LNP", "Cquqd8_2333r_LNP",
    "Cquqd8_3111r_LNP", "Cquqd8_3112r_LNP", "Cquqd8_3113r_LNP", "Cquqd8_3121r_LNP", "Cquqd8_3122r_LNP", "Cquqd8_3123r_LNP", "Cquqd8_3131r_LNP", "Cquqd8_3132r_LNP", "Cquqd8_3133r_LNP",
    "Cquqd8_3211r_LNP", "Cquqd8_3212r_LNP", "Cquqd8_3213r_LNP", "Cquqd8_3221r_LNP", "Cquqd8_3222r_LNP", "Cquqd8_3223r_LNP", "Cquqd8_3231r_LNP", "Cquqd8_3232r_LNP", "Cquqd8_3233r_LNP",
    "Cquqd8_3311r_LNP", "Cquqd8_3312r_LNP", "Cquqd8_3313r_LNP", "Cquqd8_3321r_LNP", "Cquqd8_3322r_LNP", "Cquqd8_3323r_LNP", "Cquqd8_3331r_LNP", "Cquqd8_3332r_LNP", "Cquqd8_3333r_LNP",
    "Cquqd8_1111i_LNP", "Cquqd8_1112i_LNP", "Cquqd8_1113i_LNP", "Cquqd8_1121i_LNP", "Cquqd8_1122i_LNP", "Cquqd8_1123i_LNP", "Cquqd8_1131i_LNP", "Cquqd8_1132i_LNP", "Cquqd8_1133i_LNP",
    "Cquqd8_1211i_LNP", "Cquqd8_1212i_LNP", "Cquqd8_1213i_LNP", "Cquqd8_1221i_LNP", "Cquqd8_1222i_LNP", "Cquqd8_1223i_LNP", "Cquqd8_1231i_LNP", "Cquqd8_1232i_LNP", "Cquqd8_1233i_LNP",
    "Cquqd8_1311i_LNP", "Cquqd8_1312i_LNP", "Cquqd8_1313i_LNP", "Cquqd8_1321i_LNP", "Cquqd8_1322i_LNP", "Cquqd8_1323i_LNP", "Cquqd8_1331i_LNP", "Cquqd8_1332i_LNP", "Cquqd8_1333i_LNP",
    "Cquqd8_2111i_LNP", "Cquqd8_2112i_LNP", "Cquqd8_2113i_LNP", "Cquqd8_2121i_LNP", "Cquqd8_2122i_LNP", "Cquqd8_2123i_LNP", "Cquqd8_2131i_LNP", "Cquqd8_2132i_LNP", "Cquqd8_2133i_LNP",
    "Cquqd8_2211i_LNP", "Cquqd8_2212i_LNP", "Cquqd8_2213i_LNP", "Cquqd8_2221i_LNP", "Cquqd8_2222i_LNP", "Cquqd8_2223i_LNP", "Cquqd8_2231i_LNP", "Cquqd8_2232i_LNP", "Cquqd8_2233i_LNP",
    "Cquqd8_2311i_LNP", "Cquqd8_2312i_LNP", "Cquqd8_2313i_LNP", "Cquqd8_2321i_LNP", "Cquqd8_2322i_LNP", "Cquqd8_2323i_LNP", "Cquqd8_2331i_LNP", "Cquqd8_2332i_LNP", "Cquqd8_2333i_LNP",
    "Cquqd8_3111i_LNP", "Cquqd8_3112i_LNP", "Cquqd8_3113i_LNP", "Cquqd8_3121i_LNP", "Cquqd8_3122i_LNP", "Cquqd8_3123i_LNP", "Cquqd8_3131i_LNP", "Cquqd8_3132i_LNP", "Cquqd8_3133i_LNP",
    "Cquqd8_3211i_LNP", "Cquqd8_3212i_LNP", "Cquqd8_3213i_LNP", "Cquqd8_3221i_LNP", "Cquqd8_3222i_LNP", "Cquqd8_3223i_LNP", "Cquqd8_3231i_LNP", "Cquqd8_3232i_LNP", "Cquqd8_3233i_LNP",
    "Cquqd8_3311i_LNP", "Cquqd8_3312i_LNP", "Cquqd8_3313i_LNP", "Cquqd8_3321i_LNP", "Cquqd8_3322i_LNP", "Cquqd8_3323i_LNP", "Cquqd8_3331i_LNP", "Cquqd8_3332i_LNP", "Cquqd8_3333i_LNP",
    "Clequ1_1111r_LNP", "Clequ1_1112r_LNP", "Clequ1_1113r_LNP", "Clequ1_1121r_LNP", "Clequ1_1122r_LNP", "Clequ1_1123r_LNP", "Clequ1_1131r_LNP", "Clequ1_1132r_LNP", "Clequ1_1133r_LNP",
    "Clequ1_1211r_LNP", "Clequ1_1212r_LNP", "Clequ1_1213r_LNP", "Clequ1_1221r_LNP", "Clequ1_1222r_LNP", "Clequ1_1223r_LNP", "Clequ1_1231r_LNP", "Clequ1_1232r_LNP", "Clequ1_1233r_LNP",
    "Clequ1_1311r_LNP", "Clequ1_1312r_LNP", "Clequ1_1313r_LNP", "Clequ1_1321r_LNP", "Clequ1_1322r_LNP", "Clequ1_1323r_LNP", "Clequ1_1331r_LNP", "Clequ1_1332r_LNP", "Clequ1_1333r_LNP",
    "Clequ1_2111r_LNP", "Clequ1_2112r_LNP", "Clequ1_2113r_LNP", "Clequ1_2121r_LNP", "Clequ1_2122r_LNP", "Clequ1_2123r_LNP", "Clequ1_2131r_LNP", "Clequ1_2132r_LNP", "Clequ1_2133r_LNP",
    "Clequ1_2211r_LNP", "Clequ1_2212r_LNP", "Clequ1_2213r_LNP", "Clequ1_2221r_LNP", "Clequ1_2222r_LNP", "Clequ1_2223r_LNP", "Clequ1_2231r_LNP", "Clequ1_2232r_LNP", "Clequ1_2233r_LNP",
    "Clequ1_2311r_LNP", "Clequ1_2312r_LNP", "Clequ1_2313r_LNP", "Clequ1_2321r_LNP", "Clequ1_2322r_LNP", "Clequ1_2323r_LNP", "Clequ1_2331r_LNP", "Clequ1_2332r_LNP", "Clequ1_2333r_LNP",
    "Clequ1_3111r_LNP", "Clequ1_3112r_LNP", "Clequ1_3113r_LNP", "Clequ1_3121r_LNP", "Clequ1_3122r_LNP", "Clequ1_3123r_LNP", "Clequ1_3131r_LNP", "Clequ1_3132r_LNP", "Clequ1_3133r_LNP",
    "Clequ1_3211r_LNP", "Clequ1_3212r_LNP", "Clequ1_3213r_LNP", "Clequ1_3221r_LNP", "Clequ1_3222r_LNP", "Clequ1_3223r_LNP", "Clequ1_3231r_LNP", "Clequ1_3232r_LNP", "Clequ1_3233r_LNP",
    "Clequ1_3311r_LNP", "Clequ1_3312r_LNP", "Clequ1_3313r_LNP", "Clequ1_3321r_LNP", "Clequ1_3322r_LNP", "Clequ1_3323r_LNP", "Clequ1_3331r_LNP", "Clequ1_3332r_LNP", "Clequ1_3333r_LNP",
    "Clequ1_1111i_LNP", "Clequ1_1112i_LNP", "Clequ1_1113i_LNP", "Clequ1_1121i_LNP", "Clequ1_1122i_LNP", "Clequ1_1123i_LNP", "Clequ1_1131i_LNP", "Clequ1_1132i_LNP", "Clequ1_1133i_LNP",
    "Clequ1_1211i_LNP", "Clequ1_1212i_LNP", "Clequ1_1213i_LNP", "Clequ1_1221i_LNP", "Clequ1_1222i_LNP", "Clequ1_1223i_LNP", "Clequ1_1231i_LNP", "Clequ1_1232i_LNP", "Clequ1_1233i_LNP",
    "Clequ1_1311i_LNP", "Clequ1_1312i_LNP", "Clequ1_1313i_LNP", "Clequ1_1321i_LNP", "Clequ1_1322i_LNP", "Clequ1_1323i_LNP", "Clequ1_1331i_LNP", "Clequ1_1332i_LNP", "Clequ1_1333i_LNP",
    "Clequ1_2111i_LNP", "Clequ1_2112i_LNP", "Clequ1_2113i_LNP", "Clequ1_2121i_LNP", "Clequ1_2122i_LNP", "Clequ1_2123i_LNP", "Clequ1_2131i_LNP", "Clequ1_2132i_LNP", "Clequ1_2133i_LNP",
    "Clequ1_2211i_LNP", "Clequ1_2212i_LNP", "Clequ1_2213i_LNP", "Clequ1_2221i_LNP", "Clequ1_2222i_LNP", "Clequ1_2223i_LNP", "Clequ1_2231i_LNP", "Clequ1_2232i_LNP", "Clequ1_2233i_LNP",
    "Clequ1_2311i_LNP", "Clequ1_2312i_LNP", "Clequ1_2313i_LNP", "Clequ1_2321i_LNP", "Clequ1_2322i_LNP", "Clequ1_2323i_LNP", "Clequ1_2331i_LNP", "Clequ1_2332i_LNP", "Clequ1_2333i_LNP",
    "Clequ1_3111i_LNP", "Clequ1_3112i_LNP", "Clequ1_3113i_LNP", "Clequ1_3121i_LNP", "Clequ1_3122i_LNP", "Clequ1_3123i_LNP", "Clequ1_3131i_LNP", "Clequ1_3132i_LNP", "Clequ1_3133i_LNP",
    "Clequ1_3211i_LNP", "Clequ1_3212i_LNP", "Clequ1_3213i_LNP", "Clequ1_3221i_LNP", "Clequ1_3222i_LNP", "Clequ1_3223i_LNP", "Clequ1_3231i_LNP", "Clequ1_3232i_LNP", "Clequ1_3233i_LNP",
    "Clequ1_3311i_LNP", "Clequ1_3312i_LNP", "Clequ1_3313i_LNP", "Clequ1_3321i_LNP", "Clequ1_3322i_LNP", "Clequ1_3323i_LNP", "Clequ1_3331i_LNP", "Clequ1_3332i_LNP", "Clequ1_3333i_LNP",
    "Clequ3_1111r_LNP", "Clequ3_1112r_LNP", "Clequ3_1113r_LNP", "Clequ3_1121r_LNP", "Clequ3_1122r_LNP", "Clequ3_1123r_LNP", "Clequ3_1131r_LNP", "Clequ3_1132r_LNP", "Clequ3_1133r_LNP",
    "Clequ3_1211r_LNP", "Clequ3_1212r_LNP", "Clequ3_1213r_LNP", "Clequ3_1221r_LNP", "Clequ3_1222r_LNP", "Clequ3_1223r_LNP", "Clequ3_1231r_LNP", "Clequ3_1232r_LNP", "Clequ3_1233r_LNP",
    "Clequ3_1311r_LNP", "Clequ3_1312r_LNP", "Clequ3_1313r_LNP", "Clequ3_1321r_LNP", "Clequ3_1322r_LNP", "Clequ3_1323r_LNP", "Clequ3_1331r_LNP", "Clequ3_1332r_LNP", "Clequ3_1333r_LNP",
    "Clequ3_2111r_LNP", "Clequ3_2112r_LNP", "Clequ3_2113r_LNP", "Clequ3_2121r_LNP", "Clequ3_2122r_LNP", "Clequ3_2123r_LNP", "Clequ3_2131r_LNP", "Clequ3_2132r_LNP", "Clequ3_2133r_LNP",
    "Clequ3_2211r_LNP", "Clequ3_2212r_LNP", "Clequ3_2213r_LNP", "Clequ3_2221r_LNP", "Clequ3_2222r_LNP", "Clequ3_2223r_LNP", "Clequ3_2231r_LNP", "Clequ3_2232r_LNP", "Clequ3_2233r_LNP",
    "Clequ3_2311r_LNP", "Clequ3_2312r_LNP", "Clequ3_2313r_LNP", "Clequ3_2321r_LNP", "Clequ3_2322r_LNP", "Clequ3_2323r_LNP", "Clequ3_2331r_LNP", "Clequ3_2332r_LNP", "Clequ3_2333r_LNP",
    "Clequ3_3111r_LNP", "Clequ3_3112r_LNP", "Clequ3_3113r_LNP", "Clequ3_3121r_LNP", "Clequ3_3122r_LNP", "Clequ3_3123r_LNP", "Clequ3_3131r_LNP", "Clequ3_3132r_LNP", "Clequ3_3133r_LNP",
    "Clequ3_3211r_LNP", "Clequ3_3212r_LNP", "Clequ3_3213r_LNP", "Clequ3_3221r_LNP", "Clequ3_3222r_LNP", "Clequ3_3223r_LNP", "Clequ3_3231r_LNP", "Clequ3_3232r_LNP", "Clequ3_3233r_LNP",
    "Clequ3_3311r_LNP", "Clequ3_3312r_LNP", "Clequ3_3313r_LNP", "Clequ3_3321r_LNP", "Clequ3_3322r_LNP", "Clequ3_3323r_LNP", "Clequ3_3331r_LNP", "Clequ3_3332r_LNP", "Clequ3_3333r_LNP",
    "Clequ3_1111i_LNP", "Clequ3_1112i_LNP", "Clequ3_1113i_LNP", "Clequ3_1121i_LNP", "Clequ3_1122i_LNP", "Clequ3_1123i_LNP", "Clequ3_1131i_LNP", "Clequ3_1132i_LNP", "Clequ3_1133i_LNP",
    "Clequ3_1211i_LNP", "Clequ3_1212i_LNP", "Clequ3_1213i_LNP", "Clequ3_1221i_LNP", "Clequ3_1222i_LNP", "Clequ3_1223i_LNP", "Clequ3_1231i_LNP", "Clequ3_1232i_LNP", "Clequ3_1233i_LNP",
    "Clequ3_1311i_LNP", "Clequ3_1312i_LNP", "Clequ3_1313i_LNP", "Clequ3_1321i_LNP", "Clequ3_1322i_LNP", "Clequ3_1323i_LNP", "Clequ3_1331i_LNP", "Clequ3_1332i_LNP", "Clequ3_1333i_LNP",
    "Clequ3_2111i_LNP", "Clequ3_2112i_LNP", "Clequ3_2113i_LNP", "Clequ3_2121i_LNP", "Clequ3_2122i_LNP", "Clequ3_2123i_LNP", "Clequ3_2131i_LNP", "Clequ3_2132i_LNP", "Clequ3_2133i_LNP",
    "Clequ3_2211i_LNP", "Clequ3_2212i_LNP", "Clequ3_2213i_LNP", "Clequ3_2221i_LNP", "Clequ3_2222i_LNP", "Clequ3_2223i_LNP", "Clequ3_2231i_LNP", "Clequ3_2232i_LNP", "Clequ3_2233i_LNP",
    "Clequ3_2311i_LNP", "Clequ3_2312i_LNP", "Clequ3_2313i_LNP", "Clequ3_2321i_LNP", "Clequ3_2322i_LNP", "Clequ3_2323i_LNP", "Clequ3_2331i_LNP", "Clequ3_2332i_LNP", "Clequ3_2333i_LNP",
    "Clequ3_3111i_LNP", "Clequ3_3112i_LNP", "Clequ3_3113i_LNP", "Clequ3_3121i_LNP", "Clequ3_3122i_LNP", "Clequ3_3123i_LNP", "Clequ3_3131i_LNP", "Clequ3_3132i_LNP", "Clequ3_3133i_LNP",
    "Clequ3_3211i_LNP", "Clequ3_3212i_LNP", "Clequ3_3213i_LNP", "Clequ3_3221i_LNP", "Clequ3_3222i_LNP", "Clequ3_3223i_LNP", "Clequ3_3231i_LNP", "Clequ3_3232i_LNP", "Clequ3_3233i_LNP",
    "Clequ3_3311i_LNP", "Clequ3_3312i_LNP", "Clequ3_3313i_LNP", "Clequ3_3321i_LNP", "Clequ3_3322i_LNP", "Clequ3_3323i_LNP", "Clequ3_3331i_LNP", "Clequ3_3332i_LNP", "Clequ3_3333i_LNP",
    "Lambda_NP",
    "BrHinv", "BrHexo",
    "eggFint", "eggFpar", "ettHint", "ettHpar",
    "eVBFint", "eVBFpar", "eWHint", "eWHpar", "eZHint", "eZHpar",
    "eeeWBFint", "eeeWBFpar", "eeeZHint", "eeeZHpar", "eeettHint", "eeettHpar",
    "eepWBFint", "eepWBFpar", "eepZBFint", "eepZBFpar",
    "eHggint", "eHggpar", "eHWWint", "eHWWpar", "eHZZint", "eHZZpar", "eHZgaint", "eHZgapar",
    "eHgagaint", "eHgagapar", "eHmumuint", "eHmumupar", "eHtautauint", "eHtautaupar",
    "eHccint", "eHccpar", "eHbbint", "eHbbpar",
    "eeeWWint", "edeeWWdcint",
    "eggFHgaga", "eggFHZga", "eggFHZZ", "eggFHWW", "eggFHtautau", "eggFHbb", "eggFHmumu",
    "eVBFHgaga", "eVBFHZga", "eVBFHZZ", "eVBFHWW", "eVBFHtautau", "eVBFHbb", "eVBFHmumu",
    "eWHgaga", "eWHZga", "eWHZZ", "eWHWW", "eWHtautau", "eWHbb", "eWHmumu",
    "eZHgaga", "eZHZga", "eZHZZ", "eZHWW", "eZHtautau", "eZHbb", "eZHmumu",
    "ettHgaga", "ettHZga", "ettHZZ", "ettHWW", "ettHtautau", "ettHbb", "ettHmumu",
    "eVBFHinv", "eVHinv"
};

NPSMEFTd6General::NPSMEFTd6General()
:
NPbase(), NPSMEFTd6GM(*this),
        SMEFTEvolEW(), 
        SMEFTEvolMH(), SMEFTEvol240(), SMEFTEvol365(), SMEFTEvol550(), 
        SMEFTEvol1000(), SMEFTEvol1500(), SMEFTEvol3000(), SMEFTEvol5000(), 
        SMEFTEvolUV(),
        VuL(gslpp::matrix<complex>::Id(3)), VuLd(gslpp::matrix<complex>::Id(3)), 
        VuR(gslpp::matrix<complex>::Id(3)), VuRd(gslpp::matrix<complex>::Id(3)), 
        VdL(gslpp::matrix<complex>::Id(3)), VdLd(gslpp::matrix<complex>::Id(3)), 
        VdR(gslpp::matrix<complex>::Id(3)), VdRd(gslpp::matrix<complex>::Id(3)), 
        VeL(gslpp::matrix<complex>::Id(3)), VeLd(gslpp::matrix<complex>::Id(3)), 
        VeR(gslpp::matrix<complex>::Id(3)), VeRd(gslpp::matrix<complex>::Id(3)), 
        MUQ(3, 0.), MDQ(3, 0.) {
    
    setModelName("NPSMEFTd6General");
    
    FlagMWinput = false;
    FlagQuadraticTerms = false;
    FlagHiggsSM = false;
    FlagLoopHd6 = false;
    FlagLoopH3d6Quad = false;
    FlagRGEci = true;
    FlagCorrsInSMRunning = true;
    FlagmultiScaleRGE = false;
    FlagfiniteNLO = false;
    FlagmatchLEFT = true;
    FlagNewTerms = false;
    SMEFTBasisFlag = "UP";
    flavBas = 1;
    setModelLinearized();

    w_WW = gsl_integration_cquad_workspace_alloc(100);

    SMM.setObj((StandardModelMatching&) NPSMEFTd6GM.getObj());

    if (getModelName().compare("NPSMEFTd6General") == 0) {
        // Map for the purely bosonic operators: CP even 
        ModelParamMap.insert(std::make_pair("CG_LNP", std::cref(CG_LNP)));
        ModelParamMap.insert(std::make_pair("CW_LNP", std::cref(CW_LNP)));
        ModelParamMap.insert(std::make_pair("CHG_LNP", std::cref(CHG_LNP)));
        ModelParamMap.insert(std::make_pair("CHW_LNP", std::cref(CHW_LNP)));
        ModelParamMap.insert(std::make_pair("CHB_LNP", std::cref(CHB_LNP)));
        ModelParamMap.insert(std::make_pair("CHWB_LNP", std::cref(CHWB_LNP)));
        ModelParamMap.insert(std::make_pair("CHD_LNP", std::cref(CHD_LNP)));
        ModelParamMap.insert(std::make_pair("CHbox_LNP", std::cref(CHbox_LNP)));
        ModelParamMap.insert(std::make_pair("CH_LNP", std::cref(CH_LNP)));
        // Map for the purely bosonic operators: CP odd 
        ModelParamMap.insert(std::make_pair("CGtilde_LNP", std::cref(CGtilde_LNP)));
        ModelParamMap.insert(std::make_pair("CWtilde_LNP", std::cref(CWtilde_LNP)));
        ModelParamMap.insert(std::make_pair("CHGtilde_LNP", std::cref(CHGtilde_LNP)));
        ModelParamMap.insert(std::make_pair("CHWtilde_LNP", std::cref(CHWtilde_LNP)));
        ModelParamMap.insert(std::make_pair("CHBtilde_LNP", std::cref(CHBtilde_LNP)));
        ModelParamMap.insert(std::make_pair("CHWtildeB_LNP", std::cref(CHWtildeB_LNP)));
        // Map for the Higgs-Lepton operators 
        ModelParamMap.insert(std::make_pair("CHl1_11r_LNP", std::cref(CHl1_11r_LNP)));
        ModelParamMap.insert(std::make_pair("CHl1_12r_LNP", std::cref(CHl1_12r_LNP)));
        ModelParamMap.insert(std::make_pair("CHl1_13r_LNP", std::cref(CHl1_13r_LNP)));
        ModelParamMap.insert(std::make_pair("CHl1_22r_LNP", std::cref(CHl1_22r_LNP)));
        ModelParamMap.insert(std::make_pair("CHl1_23r_LNP", std::cref(CHl1_23r_LNP)));
        ModelParamMap.insert(std::make_pair("CHl1_33r_LNP", std::cref(CHl1_33r_LNP)));
        ModelParamMap.insert(std::make_pair("CHl1_12i_LNP", std::cref(CHl1_12i_LNP)));
        ModelParamMap.insert(std::make_pair("CHl1_13i_LNP", std::cref(CHl1_13i_LNP)));
        ModelParamMap.insert(std::make_pair("CHl1_23i_LNP", std::cref(CHl1_23i_LNP)));
        ModelParamMap.insert(std::make_pair("CHl3_11r_LNP", std::cref(CHl3_11r_LNP)));
        ModelParamMap.insert(std::make_pair("CHl3_12r_LNP", std::cref(CHl3_12r_LNP)));
        ModelParamMap.insert(std::make_pair("CHl3_13r_LNP", std::cref(CHl3_13r_LNP)));
        ModelParamMap.insert(std::make_pair("CHl3_22r_LNP", std::cref(CHl3_22r_LNP)));
        ModelParamMap.insert(std::make_pair("CHl3_23r_LNP", std::cref(CHl3_23r_LNP)));
        ModelParamMap.insert(std::make_pair("CHl3_33r_LNP", std::cref(CHl3_33r_LNP)));
        ModelParamMap.insert(std::make_pair("CHl3_12i_LNP", std::cref(CHl3_12i_LNP)));
        ModelParamMap.insert(std::make_pair("CHl3_13i_LNP", std::cref(CHl3_13i_LNP)));
        ModelParamMap.insert(std::make_pair("CHl3_23i_LNP", std::cref(CHl3_23i_LNP)));
        ModelParamMap.insert(std::make_pair("CHe_11r_LNP", std::cref(CHe_11r_LNP)));
        ModelParamMap.insert(std::make_pair("CHe_12r_LNP", std::cref(CHe_12r_LNP)));
        ModelParamMap.insert(std::make_pair("CHe_13r_LNP", std::cref(CHe_13r_LNP)));
        ModelParamMap.insert(std::make_pair("CHe_22r_LNP", std::cref(CHe_22r_LNP)));
        ModelParamMap.insert(std::make_pair("CHe_23r_LNP", std::cref(CHe_23r_LNP)));
        ModelParamMap.insert(std::make_pair("CHe_33r_LNP", std::cref(CHe_33r_LNP)));
        ModelParamMap.insert(std::make_pair("CHe_12i_LNP", std::cref(CHe_12i_LNP)));
        ModelParamMap.insert(std::make_pair("CHe_13i_LNP", std::cref(CHe_13i_LNP)));
        ModelParamMap.insert(std::make_pair("CHe_23i_LNP", std::cref(CHe_23i_LNP)));
        ModelParamMap.insert(std::make_pair("CeH_11r_LNP", std::cref(CeH_11r_LNP)));
        ModelParamMap.insert(std::make_pair("CeH_12r_LNP", std::cref(CeH_12r_LNP)));
        ModelParamMap.insert(std::make_pair("CeH_13r_LNP", std::cref(CeH_13r_LNP)));
        ModelParamMap.insert(std::make_pair("CeH_21r_LNP", std::cref(CeH_21r_LNP)));
        ModelParamMap.insert(std::make_pair("CeH_22r_LNP", std::cref(CeH_22r_LNP)));
        ModelParamMap.insert(std::make_pair("CeH_23r_LNP", std::cref(CeH_23r_LNP)));
        ModelParamMap.insert(std::make_pair("CeH_31r_LNP", std::cref(CeH_31r_LNP)));
        ModelParamMap.insert(std::make_pair("CeH_32r_LNP", std::cref(CeH_32r_LNP)));
        ModelParamMap.insert(std::make_pair("CeH_33r_LNP", std::cref(CeH_33r_LNP)));
        ModelParamMap.insert(std::make_pair("CeH_11i_LNP", std::cref(CeH_11i_LNP)));
        ModelParamMap.insert(std::make_pair("CeH_12i_LNP", std::cref(CeH_12i_LNP)));
        ModelParamMap.insert(std::make_pair("CeH_13i_LNP", std::cref(CeH_13i_LNP)));
        ModelParamMap.insert(std::make_pair("CeH_21i_LNP", std::cref(CeH_21i_LNP)));
        ModelParamMap.insert(std::make_pair("CeH_22i_LNP", std::cref(CeH_22i_LNP)));
        ModelParamMap.insert(std::make_pair("CeH_23i_LNP", std::cref(CeH_23i_LNP)));
        ModelParamMap.insert(std::make_pair("CeH_31i_LNP", std::cref(CeH_31i_LNP)));
        ModelParamMap.insert(std::make_pair("CeH_32i_LNP", std::cref(CeH_32i_LNP)));
        ModelParamMap.insert(std::make_pair("CeH_33i_LNP", std::cref(CeH_33i_LNP)));
        // Map for the Four-Lepton four-fermion operators 
        ModelParamMap.insert(std::make_pair("Cll_1111r_LNP", std::cref(Cll_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1112r_LNP", std::cref(Cll_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1113r_LNP", std::cref(Cll_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1122r_LNP", std::cref(Cll_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1123r_LNP", std::cref(Cll_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1133r_LNP", std::cref(Cll_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1212r_LNP", std::cref(Cll_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1213r_LNP", std::cref(Cll_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1221r_LNP", std::cref(Cll_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1222r_LNP", std::cref(Cll_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1223r_LNP", std::cref(Cll_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1231r_LNP", std::cref(Cll_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1232r_LNP", std::cref(Cll_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1233r_LNP", std::cref(Cll_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1313r_LNP", std::cref(Cll_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1322r_LNP", std::cref(Cll_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1323r_LNP", std::cref(Cll_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1331r_LNP", std::cref(Cll_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1332r_LNP", std::cref(Cll_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1333r_LNP", std::cref(Cll_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_2222r_LNP", std::cref(Cll_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_2223r_LNP", std::cref(Cll_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_2233r_LNP", std::cref(Cll_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_2323r_LNP", std::cref(Cll_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_2332r_LNP", std::cref(Cll_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_2333r_LNP", std::cref(Cll_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_3333r_LNP", std::cref(Cll_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1112i_LNP", std::cref(Cll_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1113i_LNP", std::cref(Cll_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1123i_LNP", std::cref(Cll_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1212i_LNP", std::cref(Cll_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1213i_LNP", std::cref(Cll_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1222i_LNP", std::cref(Cll_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1223i_LNP", std::cref(Cll_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1231i_LNP", std::cref(Cll_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1232i_LNP", std::cref(Cll_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1233i_LNP", std::cref(Cll_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1313i_LNP", std::cref(Cll_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1322i_LNP", std::cref(Cll_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1323i_LNP", std::cref(Cll_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1332i_LNP", std::cref(Cll_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_1333i_LNP", std::cref(Cll_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_2223i_LNP", std::cref(Cll_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_2323i_LNP", std::cref(Cll_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cll_2333i_LNP", std::cref(Cll_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1111r_LNP", std::cref(Cee_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1112r_LNP", std::cref(Cee_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1113r_LNP", std::cref(Cee_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1122r_LNP", std::cref(Cee_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1123r_LNP", std::cref(Cee_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1133r_LNP", std::cref(Cee_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1212r_LNP", std::cref(Cee_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1213r_LNP", std::cref(Cee_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1222r_LNP", std::cref(Cee_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1223r_LNP", std::cref(Cee_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1232r_LNP", std::cref(Cee_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1233r_LNP", std::cref(Cee_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1313r_LNP", std::cref(Cee_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1323r_LNP", std::cref(Cee_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1333r_LNP", std::cref(Cee_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_2222r_LNP", std::cref(Cee_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_2223r_LNP", std::cref(Cee_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_2233r_LNP", std::cref(Cee_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_2323r_LNP", std::cref(Cee_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_2333r_LNP", std::cref(Cee_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_3333r_LNP", std::cref(Cee_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1112i_LNP", std::cref(Cee_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1113i_LNP", std::cref(Cee_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1123i_LNP", std::cref(Cee_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1212i_LNP", std::cref(Cee_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1213i_LNP", std::cref(Cee_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1222i_LNP", std::cref(Cee_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1223i_LNP", std::cref(Cee_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1232i_LNP", std::cref(Cee_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1233i_LNP", std::cref(Cee_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1313i_LNP", std::cref(Cee_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1323i_LNP", std::cref(Cee_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_1333i_LNP", std::cref(Cee_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_2223i_LNP", std::cref(Cee_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_2323i_LNP", std::cref(Cee_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cee_2333i_LNP", std::cref(Cee_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1111r_LNP", std::cref(Cle_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1112r_LNP", std::cref(Cle_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1113r_LNP", std::cref(Cle_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1122r_LNP", std::cref(Cle_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1123r_LNP", std::cref(Cle_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1133r_LNP", std::cref(Cle_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1211r_LNP", std::cref(Cle_1211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1212r_LNP", std::cref(Cle_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1213r_LNP", std::cref(Cle_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1221r_LNP", std::cref(Cle_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1222r_LNP", std::cref(Cle_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1223r_LNP", std::cref(Cle_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1231r_LNP", std::cref(Cle_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1232r_LNP", std::cref(Cle_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1233r_LNP", std::cref(Cle_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1311r_LNP", std::cref(Cle_1311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1312r_LNP", std::cref(Cle_1312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1313r_LNP", std::cref(Cle_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1321r_LNP", std::cref(Cle_1321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1322r_LNP", std::cref(Cle_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1323r_LNP", std::cref(Cle_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1331r_LNP", std::cref(Cle_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1332r_LNP", std::cref(Cle_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1333r_LNP", std::cref(Cle_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2211r_LNP", std::cref(Cle_2211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2212r_LNP", std::cref(Cle_2212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2213r_LNP", std::cref(Cle_2213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2222r_LNP", std::cref(Cle_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2223r_LNP", std::cref(Cle_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2233r_LNP", std::cref(Cle_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2311r_LNP", std::cref(Cle_2311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2312r_LNP", std::cref(Cle_2312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2313r_LNP", std::cref(Cle_2313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2321r_LNP", std::cref(Cle_2321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2322r_LNP", std::cref(Cle_2322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2323r_LNP", std::cref(Cle_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2331r_LNP", std::cref(Cle_2331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2332r_LNP", std::cref(Cle_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2333r_LNP", std::cref(Cle_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_3311r_LNP", std::cref(Cle_3311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_3312r_LNP", std::cref(Cle_3312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_3313r_LNP", std::cref(Cle_3313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_3322r_LNP", std::cref(Cle_3322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_3323r_LNP", std::cref(Cle_3323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_3333r_LNP", std::cref(Cle_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1112i_LNP", std::cref(Cle_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1113i_LNP", std::cref(Cle_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1123i_LNP", std::cref(Cle_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1211i_LNP", std::cref(Cle_1211i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1212i_LNP", std::cref(Cle_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1213i_LNP", std::cref(Cle_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1221i_LNP", std::cref(Cle_1221i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1222i_LNP", std::cref(Cle_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1223i_LNP", std::cref(Cle_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1231i_LNP", std::cref(Cle_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1232i_LNP", std::cref(Cle_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1233i_LNP", std::cref(Cle_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1311i_LNP", std::cref(Cle_1311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1312i_LNP", std::cref(Cle_1312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1313i_LNP", std::cref(Cle_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1321i_LNP", std::cref(Cle_1321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1322i_LNP", std::cref(Cle_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1323i_LNP", std::cref(Cle_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1331i_LNP", std::cref(Cle_1331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1332i_LNP", std::cref(Cle_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_1333i_LNP", std::cref(Cle_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2212i_LNP", std::cref(Cle_2212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2213i_LNP", std::cref(Cle_2213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2223i_LNP", std::cref(Cle_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2312i_LNP", std::cref(Cle_2312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2313i_LNP", std::cref(Cle_2313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2321i_LNP", std::cref(Cle_2321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2322i_LNP", std::cref(Cle_2322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2323i_LNP", std::cref(Cle_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2331i_LNP", std::cref(Cle_2331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2332i_LNP", std::cref(Cle_2332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2333i_LNP", std::cref(Cle_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_2311i_LNP", std::cref(Cle_2311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_3312i_LNP", std::cref(Cle_3312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_3313i_LNP", std::cref(Cle_3313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cle_3323i_LNP", std::cref(Cle_3323i_LNP)));
        // Map for the Higgs-Quark operators 
        ModelParamMap.insert(std::make_pair("CHq1_11r_LNP", std::cref(CHq1_11r_LNP)));
        ModelParamMap.insert(std::make_pair("CHq1_12r_LNP", std::cref(CHq1_12r_LNP)));
        ModelParamMap.insert(std::make_pair("CHq1_13r_LNP", std::cref(CHq1_13r_LNP)));
        ModelParamMap.insert(std::make_pair("CHq1_22r_LNP", std::cref(CHq1_22r_LNP)));
        ModelParamMap.insert(std::make_pair("CHq1_23r_LNP", std::cref(CHq1_23r_LNP)));
        ModelParamMap.insert(std::make_pair("CHq1_33r_LNP", std::cref(CHq1_33r_LNP)));
        ModelParamMap.insert(std::make_pair("CHq1_12i_LNP", std::cref(CHq1_12i_LNP)));
        ModelParamMap.insert(std::make_pair("CHq1_13i_LNP", std::cref(CHq1_13i_LNP)));
        ModelParamMap.insert(std::make_pair("CHq1_23i_LNP", std::cref(CHq1_23i_LNP)));
        ModelParamMap.insert(std::make_pair("CHq3_11r_LNP", std::cref(CHq3_11r_LNP)));
        ModelParamMap.insert(std::make_pair("CHq3_12r_LNP", std::cref(CHq3_12r_LNP)));
        ModelParamMap.insert(std::make_pair("CHq3_13r_LNP", std::cref(CHq3_13r_LNP)));
        ModelParamMap.insert(std::make_pair("CHq3_22r_LNP", std::cref(CHq3_22r_LNP)));
        ModelParamMap.insert(std::make_pair("CHq3_23r_LNP", std::cref(CHq3_23r_LNP)));
        ModelParamMap.insert(std::make_pair("CHq3_33r_LNP", std::cref(CHq3_33r_LNP)));
        ModelParamMap.insert(std::make_pair("CHq3_12i_LNP", std::cref(CHq3_12i_LNP)));
        ModelParamMap.insert(std::make_pair("CHq3_13i_LNP", std::cref(CHq3_13i_LNP)));
        ModelParamMap.insert(std::make_pair("CHq3_23i_LNP", std::cref(CHq3_23i_LNP)));
        ModelParamMap.insert(std::make_pair("CHu_11r_LNP", std::cref(CHu_11r_LNP)));
        ModelParamMap.insert(std::make_pair("CHu_12r_LNP", std::cref(CHu_12r_LNP)));
        ModelParamMap.insert(std::make_pair("CHu_13r_LNP", std::cref(CHu_13r_LNP)));
        ModelParamMap.insert(std::make_pair("CHu_22r_LNP", std::cref(CHu_22r_LNP)));
        ModelParamMap.insert(std::make_pair("CHu_23r_LNP", std::cref(CHu_23r_LNP)));
        ModelParamMap.insert(std::make_pair("CHu_33r_LNP", std::cref(CHu_33r_LNP)));
        ModelParamMap.insert(std::make_pair("CHu_12i_LNP", std::cref(CHu_12i_LNP)));
        ModelParamMap.insert(std::make_pair("CHu_13i_LNP", std::cref(CHu_13i_LNP)));
        ModelParamMap.insert(std::make_pair("CHu_23i_LNP", std::cref(CHu_23i_LNP)));
        ModelParamMap.insert(std::make_pair("CHd_11r_LNP", std::cref(CHd_11r_LNP)));
        ModelParamMap.insert(std::make_pair("CHd_12r_LNP", std::cref(CHd_12r_LNP)));
        ModelParamMap.insert(std::make_pair("CHd_13r_LNP", std::cref(CHd_13r_LNP)));
        ModelParamMap.insert(std::make_pair("CHd_22r_LNP", std::cref(CHd_22r_LNP)));
        ModelParamMap.insert(std::make_pair("CHd_23r_LNP", std::cref(CHd_23r_LNP)));
        ModelParamMap.insert(std::make_pair("CHd_33r_LNP", std::cref(CHd_33r_LNP)));
        ModelParamMap.insert(std::make_pair("CHd_12i_LNP", std::cref(CHd_12i_LNP)));
        ModelParamMap.insert(std::make_pair("CHd_13i_LNP", std::cref(CHd_13i_LNP)));
        ModelParamMap.insert(std::make_pair("CHd_23i_LNP", std::cref(CHd_23i_LNP)));
        ModelParamMap.insert(std::make_pair("CHud_11r_LNP", std::cref(CHud_11r_LNP)));
        ModelParamMap.insert(std::make_pair("CHud_12r_LNP", std::cref(CHud_12r_LNP)));
        ModelParamMap.insert(std::make_pair("CHud_13r_LNP", std::cref(CHud_13r_LNP)));
        ModelParamMap.insert(std::make_pair("CHud_21r_LNP", std::cref(CHud_21r_LNP)));
        ModelParamMap.insert(std::make_pair("CHud_22r_LNP", std::cref(CHud_22r_LNP)));
        ModelParamMap.insert(std::make_pair("CHud_23r_LNP", std::cref(CHud_23r_LNP)));
        ModelParamMap.insert(std::make_pair("CHud_31r_LNP", std::cref(CHud_31r_LNP)));
        ModelParamMap.insert(std::make_pair("CHud_32r_LNP", std::cref(CHud_32r_LNP)));
        ModelParamMap.insert(std::make_pair("CHud_33r_LNP", std::cref(CHud_33r_LNP)));
        ModelParamMap.insert(std::make_pair("CHud_11i_LNP", std::cref(CHud_11i_LNP)));
        ModelParamMap.insert(std::make_pair("CHud_12i_LNP", std::cref(CHud_12i_LNP)));
        ModelParamMap.insert(std::make_pair("CHud_13i_LNP", std::cref(CHud_13i_LNP)));
        ModelParamMap.insert(std::make_pair("CHud_21i_LNP", std::cref(CHud_21i_LNP)));
        ModelParamMap.insert(std::make_pair("CHud_22i_LNP", std::cref(CHud_22i_LNP)));
        ModelParamMap.insert(std::make_pair("CHud_23i_LNP", std::cref(CHud_23i_LNP)));
        ModelParamMap.insert(std::make_pair("CHud_31i_LNP", std::cref(CHud_31i_LNP)));
        ModelParamMap.insert(std::make_pair("CHud_32i_LNP", std::cref(CHud_32i_LNP)));
        ModelParamMap.insert(std::make_pair("CHud_33i_LNP", std::cref(CHud_33i_LNP)));
        ModelParamMap.insert(std::make_pair("CuH_11r_LNP", std::cref(CuH_11r_LNP)));
        ModelParamMap.insert(std::make_pair("CuH_12r_LNP", std::cref(CuH_12r_LNP)));
        ModelParamMap.insert(std::make_pair("CuH_13r_LNP", std::cref(CuH_13r_LNP)));
        ModelParamMap.insert(std::make_pair("CuH_21r_LNP", std::cref(CuH_21r_LNP)));
        ModelParamMap.insert(std::make_pair("CuH_22r_LNP", std::cref(CuH_22r_LNP)));
        ModelParamMap.insert(std::make_pair("CuH_23r_LNP", std::cref(CuH_23r_LNP)));
        ModelParamMap.insert(std::make_pair("CuH_31r_LNP", std::cref(CuH_31r_LNP)));
        ModelParamMap.insert(std::make_pair("CuH_32r_LNP", std::cref(CuH_32r_LNP)));
        ModelParamMap.insert(std::make_pair("CuH_33r_LNP", std::cref(CuH_33r_LNP)));
        ModelParamMap.insert(std::make_pair("CuH_11i_LNP", std::cref(CuH_11i_LNP)));
        ModelParamMap.insert(std::make_pair("CuH_12i_LNP", std::cref(CuH_12i_LNP)));
        ModelParamMap.insert(std::make_pair("CuH_13i_LNP", std::cref(CuH_13i_LNP)));
        ModelParamMap.insert(std::make_pair("CuH_21i_LNP", std::cref(CuH_21i_LNP)));
        ModelParamMap.insert(std::make_pair("CuH_22i_LNP", std::cref(CuH_22i_LNP)));
        ModelParamMap.insert(std::make_pair("CuH_23i_LNP", std::cref(CuH_23i_LNP)));
        ModelParamMap.insert(std::make_pair("CuH_31i_LNP", std::cref(CuH_31i_LNP)));
        ModelParamMap.insert(std::make_pair("CuH_32i_LNP", std::cref(CuH_32i_LNP)));
        ModelParamMap.insert(std::make_pair("CuH_33i_LNP", std::cref(CuH_33i_LNP)));
        ModelParamMap.insert(std::make_pair("CdH_11r_LNP", std::cref(CdH_11r_LNP)));
        ModelParamMap.insert(std::make_pair("CdH_12r_LNP", std::cref(CdH_12r_LNP)));
        ModelParamMap.insert(std::make_pair("CdH_13r_LNP", std::cref(CdH_13r_LNP)));
        ModelParamMap.insert(std::make_pair("CdH_21r_LNP", std::cref(CdH_21r_LNP)));
        ModelParamMap.insert(std::make_pair("CdH_22r_LNP", std::cref(CdH_22r_LNP)));
        ModelParamMap.insert(std::make_pair("CdH_23r_LNP", std::cref(CdH_23r_LNP)));
        ModelParamMap.insert(std::make_pair("CdH_31r_LNP", std::cref(CdH_31r_LNP)));
        ModelParamMap.insert(std::make_pair("CdH_32r_LNP", std::cref(CdH_32r_LNP)));
        ModelParamMap.insert(std::make_pair("CdH_33r_LNP", std::cref(CdH_33r_LNP)));
        ModelParamMap.insert(std::make_pair("CdH_11i_LNP", std::cref(CdH_11i_LNP)));
        ModelParamMap.insert(std::make_pair("CdH_12i_LNP", std::cref(CdH_12i_LNP)));
        ModelParamMap.insert(std::make_pair("CdH_13i_LNP", std::cref(CdH_13i_LNP)));
        ModelParamMap.insert(std::make_pair("CdH_21i_LNP", std::cref(CdH_21i_LNP)));
        ModelParamMap.insert(std::make_pair("CdH_22i_LNP", std::cref(CdH_22i_LNP)));
        ModelParamMap.insert(std::make_pair("CdH_23i_LNP", std::cref(CdH_23i_LNP)));
        ModelParamMap.insert(std::make_pair("CdH_31i_LNP", std::cref(CdH_31i_LNP)));
        ModelParamMap.insert(std::make_pair("CdH_32i_LNP", std::cref(CdH_32i_LNP)));
        ModelParamMap.insert(std::make_pair("CdH_33i_LNP", std::cref(CdH_33i_LNP)));
        // Map for the dipole operators 
        ModelParamMap.insert(std::make_pair("CuG_11r_LNP", std::cref(CuG_11r_LNP)));
        ModelParamMap.insert(std::make_pair("CuG_12r_LNP", std::cref(CuG_12r_LNP)));
        ModelParamMap.insert(std::make_pair("CuG_13r_LNP", std::cref(CuG_13r_LNP)));
        ModelParamMap.insert(std::make_pair("CuG_21r_LNP", std::cref(CuG_21r_LNP)));
        ModelParamMap.insert(std::make_pair("CuG_22r_LNP", std::cref(CuG_22r_LNP)));
        ModelParamMap.insert(std::make_pair("CuG_23r_LNP", std::cref(CuG_23r_LNP)));
        ModelParamMap.insert(std::make_pair("CuG_31r_LNP", std::cref(CuG_31r_LNP)));
        ModelParamMap.insert(std::make_pair("CuG_32r_LNP", std::cref(CuG_32r_LNP)));
        ModelParamMap.insert(std::make_pair("CuG_33r_LNP", std::cref(CuG_33r_LNP)));
        ModelParamMap.insert(std::make_pair("CuG_11i_LNP", std::cref(CuG_11i_LNP)));
        ModelParamMap.insert(std::make_pair("CuG_12i_LNP", std::cref(CuG_12i_LNP)));
        ModelParamMap.insert(std::make_pair("CuG_13i_LNP", std::cref(CuG_13i_LNP)));
        ModelParamMap.insert(std::make_pair("CuG_21i_LNP", std::cref(CuG_21i_LNP)));
        ModelParamMap.insert(std::make_pair("CuG_22i_LNP", std::cref(CuG_22i_LNP)));
        ModelParamMap.insert(std::make_pair("CuG_23i_LNP", std::cref(CuG_23i_LNP)));
        ModelParamMap.insert(std::make_pair("CuG_31i_LNP", std::cref(CuG_31i_LNP)));
        ModelParamMap.insert(std::make_pair("CuG_32i_LNP", std::cref(CuG_32i_LNP)));
        ModelParamMap.insert(std::make_pair("CuG_33i_LNP", std::cref(CuG_33i_LNP)));
        ModelParamMap.insert(std::make_pair("CuW_11r_LNP", std::cref(CuW_11r_LNP)));
        ModelParamMap.insert(std::make_pair("CuW_12r_LNP", std::cref(CuW_12r_LNP)));
        ModelParamMap.insert(std::make_pair("CuW_13r_LNP", std::cref(CuW_13r_LNP)));
        ModelParamMap.insert(std::make_pair("CuW_21r_LNP", std::cref(CuW_21r_LNP)));
        ModelParamMap.insert(std::make_pair("CuW_22r_LNP", std::cref(CuW_22r_LNP)));
        ModelParamMap.insert(std::make_pair("CuW_23r_LNP", std::cref(CuW_23r_LNP)));
        ModelParamMap.insert(std::make_pair("CuW_31r_LNP", std::cref(CuW_31r_LNP)));
        ModelParamMap.insert(std::make_pair("CuW_32r_LNP", std::cref(CuW_32r_LNP)));
        ModelParamMap.insert(std::make_pair("CuW_33r_LNP", std::cref(CuW_33r_LNP)));
        ModelParamMap.insert(std::make_pair("CuW_11i_LNP", std::cref(CuW_11i_LNP)));
        ModelParamMap.insert(std::make_pair("CuW_12i_LNP", std::cref(CuW_12i_LNP)));
        ModelParamMap.insert(std::make_pair("CuW_13i_LNP", std::cref(CuW_13i_LNP)));
        ModelParamMap.insert(std::make_pair("CuW_21i_LNP", std::cref(CuW_21i_LNP)));
        ModelParamMap.insert(std::make_pair("CuW_22i_LNP", std::cref(CuW_22i_LNP)));
        ModelParamMap.insert(std::make_pair("CuW_23i_LNP", std::cref(CuW_23i_LNP)));
        ModelParamMap.insert(std::make_pair("CuW_31i_LNP", std::cref(CuW_31i_LNP)));
        ModelParamMap.insert(std::make_pair("CuW_32i_LNP", std::cref(CuW_32i_LNP)));
        ModelParamMap.insert(std::make_pair("CuW_33i_LNP", std::cref(CuW_33i_LNP)));
        ModelParamMap.insert(std::make_pair("CuB_11r_LNP", std::cref(CuB_11r_LNP)));
        ModelParamMap.insert(std::make_pair("CuB_12r_LNP", std::cref(CuB_12r_LNP)));
        ModelParamMap.insert(std::make_pair("CuB_13r_LNP", std::cref(CuB_13r_LNP)));
        ModelParamMap.insert(std::make_pair("CuB_21r_LNP", std::cref(CuB_21r_LNP)));
        ModelParamMap.insert(std::make_pair("CuB_22r_LNP", std::cref(CuB_22r_LNP)));
        ModelParamMap.insert(std::make_pair("CuB_23r_LNP", std::cref(CuB_23r_LNP)));
        ModelParamMap.insert(std::make_pair("CuB_31r_LNP", std::cref(CuB_31r_LNP)));
        ModelParamMap.insert(std::make_pair("CuB_32r_LNP", std::cref(CuB_32r_LNP)));
        ModelParamMap.insert(std::make_pair("CuB_33r_LNP", std::cref(CuB_33r_LNP)));
        ModelParamMap.insert(std::make_pair("CuB_11i_LNP", std::cref(CuB_11i_LNP)));
        ModelParamMap.insert(std::make_pair("CuB_12i_LNP", std::cref(CuB_12i_LNP)));
        ModelParamMap.insert(std::make_pair("CuB_13i_LNP", std::cref(CuB_13i_LNP)));
        ModelParamMap.insert(std::make_pair("CuB_21i_LNP", std::cref(CuB_21i_LNP)));
        ModelParamMap.insert(std::make_pair("CuB_22i_LNP", std::cref(CuB_22i_LNP)));
        ModelParamMap.insert(std::make_pair("CuB_23i_LNP", std::cref(CuB_23i_LNP)));
        ModelParamMap.insert(std::make_pair("CuB_31i_LNP", std::cref(CuB_31i_LNP)));
        ModelParamMap.insert(std::make_pair("CuB_32i_LNP", std::cref(CuB_32i_LNP)));
        ModelParamMap.insert(std::make_pair("CuB_33i_LNP", std::cref(CuB_33i_LNP)));
        ModelParamMap.insert(std::make_pair("CdG_11r_LNP", std::cref(CdG_11r_LNP)));
        ModelParamMap.insert(std::make_pair("CdG_12r_LNP", std::cref(CdG_12r_LNP)));
        ModelParamMap.insert(std::make_pair("CdG_13r_LNP", std::cref(CdG_13r_LNP)));
        ModelParamMap.insert(std::make_pair("CdG_21r_LNP", std::cref(CdG_21r_LNP)));
        ModelParamMap.insert(std::make_pair("CdG_22r_LNP", std::cref(CdG_22r_LNP)));
        ModelParamMap.insert(std::make_pair("CdG_23r_LNP", std::cref(CdG_23r_LNP)));
        ModelParamMap.insert(std::make_pair("CdG_31r_LNP", std::cref(CdG_31r_LNP)));
        ModelParamMap.insert(std::make_pair("CdG_32r_LNP", std::cref(CdG_32r_LNP)));
        ModelParamMap.insert(std::make_pair("CdG_33r_LNP", std::cref(CdG_33r_LNP)));
        ModelParamMap.insert(std::make_pair("CdG_11i_LNP", std::cref(CdG_11i_LNP)));
        ModelParamMap.insert(std::make_pair("CdG_12i_LNP", std::cref(CdG_12i_LNP)));
        ModelParamMap.insert(std::make_pair("CdG_13i_LNP", std::cref(CdG_13i_LNP)));
        ModelParamMap.insert(std::make_pair("CdG_21i_LNP", std::cref(CdG_21i_LNP)));
        ModelParamMap.insert(std::make_pair("CdG_22i_LNP", std::cref(CdG_22i_LNP)));
        ModelParamMap.insert(std::make_pair("CdG_23i_LNP", std::cref(CdG_23i_LNP)));
        ModelParamMap.insert(std::make_pair("CdG_31i_LNP", std::cref(CdG_31i_LNP)));
        ModelParamMap.insert(std::make_pair("CdG_32i_LNP", std::cref(CdG_32i_LNP)));
        ModelParamMap.insert(std::make_pair("CdG_33i_LNP", std::cref(CdG_33i_LNP)));
        ModelParamMap.insert(std::make_pair("CdW_11r_LNP", std::cref(CdW_11r_LNP)));
        ModelParamMap.insert(std::make_pair("CdW_12r_LNP", std::cref(CdW_12r_LNP)));
        ModelParamMap.insert(std::make_pair("CdW_13r_LNP", std::cref(CdW_13r_LNP)));
        ModelParamMap.insert(std::make_pair("CdW_21r_LNP", std::cref(CdW_21r_LNP)));
        ModelParamMap.insert(std::make_pair("CdW_22r_LNP", std::cref(CdW_22r_LNP)));
        ModelParamMap.insert(std::make_pair("CdW_23r_LNP", std::cref(CdW_23r_LNP)));
        ModelParamMap.insert(std::make_pair("CdW_31r_LNP", std::cref(CdW_31r_LNP)));
        ModelParamMap.insert(std::make_pair("CdW_32r_LNP", std::cref(CdW_32r_LNP)));
        ModelParamMap.insert(std::make_pair("CdW_33r_LNP", std::cref(CdW_33r_LNP)));
        ModelParamMap.insert(std::make_pair("CdW_11i_LNP", std::cref(CdW_11i_LNP)));
        ModelParamMap.insert(std::make_pair("CdW_12i_LNP", std::cref(CdW_12i_LNP)));
        ModelParamMap.insert(std::make_pair("CdW_13i_LNP", std::cref(CdW_13i_LNP)));
        ModelParamMap.insert(std::make_pair("CdW_21i_LNP", std::cref(CdW_21i_LNP)));
        ModelParamMap.insert(std::make_pair("CdW_22i_LNP", std::cref(CdW_22i_LNP)));
        ModelParamMap.insert(std::make_pair("CdW_23i_LNP", std::cref(CdW_23i_LNP)));
        ModelParamMap.insert(std::make_pair("CdW_31i_LNP", std::cref(CdW_31i_LNP)));
        ModelParamMap.insert(std::make_pair("CdW_32i_LNP", std::cref(CdW_32i_LNP)));
        ModelParamMap.insert(std::make_pair("CdW_33i_LNP", std::cref(CdW_33i_LNP)));
        ModelParamMap.insert(std::make_pair("CdB_11r_LNP", std::cref(CdB_11r_LNP)));
        ModelParamMap.insert(std::make_pair("CdB_12r_LNP", std::cref(CdB_12r_LNP)));
        ModelParamMap.insert(std::make_pair("CdB_13r_LNP", std::cref(CdB_13r_LNP)));
        ModelParamMap.insert(std::make_pair("CdB_21r_LNP", std::cref(CdB_21r_LNP)));
        ModelParamMap.insert(std::make_pair("CdB_22r_LNP", std::cref(CdB_22r_LNP)));
        ModelParamMap.insert(std::make_pair("CdB_23r_LNP", std::cref(CdB_23r_LNP)));
        ModelParamMap.insert(std::make_pair("CdB_31r_LNP", std::cref(CdB_31r_LNP)));
        ModelParamMap.insert(std::make_pair("CdB_32r_LNP", std::cref(CdB_32r_LNP)));
        ModelParamMap.insert(std::make_pair("CdB_33r_LNP", std::cref(CdB_33r_LNP)));
        ModelParamMap.insert(std::make_pair("CdB_11i_LNP", std::cref(CdB_11i_LNP)));
        ModelParamMap.insert(std::make_pair("CdB_12i_LNP", std::cref(CdB_12i_LNP)));
        ModelParamMap.insert(std::make_pair("CdB_13i_LNP", std::cref(CdB_13i_LNP)));
        ModelParamMap.insert(std::make_pair("CdB_21i_LNP", std::cref(CdB_21i_LNP)));
        ModelParamMap.insert(std::make_pair("CdB_22i_LNP", std::cref(CdB_22i_LNP)));
        ModelParamMap.insert(std::make_pair("CdB_23i_LNP", std::cref(CdB_23i_LNP)));
        ModelParamMap.insert(std::make_pair("CdB_31i_LNP", std::cref(CdB_31i_LNP)));
        ModelParamMap.insert(std::make_pair("CdB_32i_LNP", std::cref(CdB_32i_LNP)));
        ModelParamMap.insert(std::make_pair("CdB_33i_LNP", std::cref(CdB_33i_LNP)));
        ModelParamMap.insert(std::make_pair("CeW_11r_LNP", std::cref(CeW_11r_LNP)));
        ModelParamMap.insert(std::make_pair("CeW_12r_LNP", std::cref(CeW_12r_LNP)));
        ModelParamMap.insert(std::make_pair("CeW_13r_LNP", std::cref(CeW_13r_LNP)));
        ModelParamMap.insert(std::make_pair("CeW_21r_LNP", std::cref(CeW_21r_LNP)));
        ModelParamMap.insert(std::make_pair("CeW_22r_LNP", std::cref(CeW_22r_LNP)));
        ModelParamMap.insert(std::make_pair("CeW_23r_LNP", std::cref(CeW_23r_LNP)));
        ModelParamMap.insert(std::make_pair("CeW_31r_LNP", std::cref(CeW_31r_LNP)));
        ModelParamMap.insert(std::make_pair("CeW_32r_LNP", std::cref(CeW_32r_LNP)));
        ModelParamMap.insert(std::make_pair("CeW_33r_LNP", std::cref(CeW_33r_LNP)));
        ModelParamMap.insert(std::make_pair("CeW_11i_LNP", std::cref(CeW_11i_LNP)));
        ModelParamMap.insert(std::make_pair("CeW_12i_LNP", std::cref(CeW_12i_LNP)));
        ModelParamMap.insert(std::make_pair("CeW_13i_LNP", std::cref(CeW_13i_LNP)));
        ModelParamMap.insert(std::make_pair("CeW_21i_LNP", std::cref(CeW_21i_LNP)));
        ModelParamMap.insert(std::make_pair("CeW_22i_LNP", std::cref(CeW_22i_LNP)));
        ModelParamMap.insert(std::make_pair("CeW_23i_LNP", std::cref(CeW_23i_LNP)));
        ModelParamMap.insert(std::make_pair("CeW_31i_LNP", std::cref(CeW_31i_LNP)));
        ModelParamMap.insert(std::make_pair("CeW_32i_LNP", std::cref(CeW_32i_LNP)));
        ModelParamMap.insert(std::make_pair("CeW_33i_LNP", std::cref(CeW_33i_LNP)));
        ModelParamMap.insert(std::make_pair("CeB_11r_LNP", std::cref(CeB_11r_LNP)));
        ModelParamMap.insert(std::make_pair("CeB_12r_LNP", std::cref(CeB_12r_LNP)));
        ModelParamMap.insert(std::make_pair("CeB_13r_LNP", std::cref(CeB_13r_LNP)));
        ModelParamMap.insert(std::make_pair("CeB_21r_LNP", std::cref(CeB_21r_LNP)));
        ModelParamMap.insert(std::make_pair("CeB_22r_LNP", std::cref(CeB_22r_LNP)));
        ModelParamMap.insert(std::make_pair("CeB_23r_LNP", std::cref(CeB_23r_LNP)));
        ModelParamMap.insert(std::make_pair("CeB_31r_LNP", std::cref(CeB_31r_LNP)));
        ModelParamMap.insert(std::make_pair("CeB_32r_LNP", std::cref(CeB_32r_LNP)));
        ModelParamMap.insert(std::make_pair("CeB_33r_LNP", std::cref(CeB_33r_LNP)));
        ModelParamMap.insert(std::make_pair("CeB_11i_LNP", std::cref(CeB_11i_LNP)));
        ModelParamMap.insert(std::make_pair("CeB_12i_LNP", std::cref(CeB_12i_LNP)));
        ModelParamMap.insert(std::make_pair("CeB_13i_LNP", std::cref(CeB_13i_LNP)));
        ModelParamMap.insert(std::make_pair("CeB_21i_LNP", std::cref(CeB_21i_LNP)));
        ModelParamMap.insert(std::make_pair("CeB_22i_LNP", std::cref(CeB_22i_LNP)));
        ModelParamMap.insert(std::make_pair("CeB_23i_LNP", std::cref(CeB_23i_LNP)));
        ModelParamMap.insert(std::make_pair("CeB_31i_LNP", std::cref(CeB_31i_LNP)));
        ModelParamMap.insert(std::make_pair("CeB_32i_LNP", std::cref(CeB_32i_LNP)));
        ModelParamMap.insert(std::make_pair("CeB_33i_LNP", std::cref(CeB_33i_LNP)));
        // Map for the Four-Quark four-fermion operators: LL, RR, LLRR 
        ModelParamMap.insert(std::make_pair("Cqq1_1111r_LNP", std::cref(Cqq1_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1112r_LNP", std::cref(Cqq1_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1113r_LNP", std::cref(Cqq1_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1122r_LNP", std::cref(Cqq1_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1123r_LNP", std::cref(Cqq1_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1133r_LNP", std::cref(Cqq1_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1212r_LNP", std::cref(Cqq1_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1213r_LNP", std::cref(Cqq1_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1221r_LNP", std::cref(Cqq1_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1222r_LNP", std::cref(Cqq1_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1223r_LNP", std::cref(Cqq1_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1231r_LNP", std::cref(Cqq1_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1232r_LNP", std::cref(Cqq1_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1233r_LNP", std::cref(Cqq1_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1313r_LNP", std::cref(Cqq1_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1322r_LNP", std::cref(Cqq1_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1323r_LNP", std::cref(Cqq1_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1331r_LNP", std::cref(Cqq1_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1332r_LNP", std::cref(Cqq1_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1333r_LNP", std::cref(Cqq1_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_2222r_LNP", std::cref(Cqq1_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_2223r_LNP", std::cref(Cqq1_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_2233r_LNP", std::cref(Cqq1_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_2323r_LNP", std::cref(Cqq1_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_2332r_LNP", std::cref(Cqq1_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_2333r_LNP", std::cref(Cqq1_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_3333r_LNP", std::cref(Cqq1_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1112i_LNP", std::cref(Cqq1_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1113i_LNP", std::cref(Cqq1_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1123i_LNP", std::cref(Cqq1_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1212i_LNP", std::cref(Cqq1_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1213i_LNP", std::cref(Cqq1_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1222i_LNP", std::cref(Cqq1_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1223i_LNP", std::cref(Cqq1_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1231i_LNP", std::cref(Cqq1_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1232i_LNP", std::cref(Cqq1_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1233i_LNP", std::cref(Cqq1_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1313i_LNP", std::cref(Cqq1_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1322i_LNP", std::cref(Cqq1_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1323i_LNP", std::cref(Cqq1_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1332i_LNP", std::cref(Cqq1_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_1333i_LNP", std::cref(Cqq1_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_2223i_LNP", std::cref(Cqq1_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_2323i_LNP", std::cref(Cqq1_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq1_2333i_LNP", std::cref(Cqq1_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1111r_LNP", std::cref(Cqq3_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1112r_LNP", std::cref(Cqq3_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1113r_LNP", std::cref(Cqq3_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1122r_LNP", std::cref(Cqq3_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1123r_LNP", std::cref(Cqq3_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1133r_LNP", std::cref(Cqq3_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1212r_LNP", std::cref(Cqq3_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1213r_LNP", std::cref(Cqq3_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1221r_LNP", std::cref(Cqq3_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1222r_LNP", std::cref(Cqq3_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1223r_LNP", std::cref(Cqq3_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1231r_LNP", std::cref(Cqq3_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1232r_LNP", std::cref(Cqq3_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1233r_LNP", std::cref(Cqq3_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1313r_LNP", std::cref(Cqq3_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1322r_LNP", std::cref(Cqq3_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1323r_LNP", std::cref(Cqq3_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1331r_LNP", std::cref(Cqq3_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1332r_LNP", std::cref(Cqq3_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1333r_LNP", std::cref(Cqq3_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_2222r_LNP", std::cref(Cqq3_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_2223r_LNP", std::cref(Cqq3_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_2233r_LNP", std::cref(Cqq3_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_2323r_LNP", std::cref(Cqq3_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_2332r_LNP", std::cref(Cqq3_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_2333r_LNP", std::cref(Cqq3_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_3333r_LNP", std::cref(Cqq3_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1112i_LNP", std::cref(Cqq3_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1113i_LNP", std::cref(Cqq3_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1123i_LNP", std::cref(Cqq3_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1212i_LNP", std::cref(Cqq3_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1213i_LNP", std::cref(Cqq3_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1222i_LNP", std::cref(Cqq3_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1223i_LNP", std::cref(Cqq3_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1231i_LNP", std::cref(Cqq3_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1232i_LNP", std::cref(Cqq3_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1233i_LNP", std::cref(Cqq3_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1313i_LNP", std::cref(Cqq3_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1322i_LNP", std::cref(Cqq3_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1323i_LNP", std::cref(Cqq3_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1332i_LNP", std::cref(Cqq3_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_1333i_LNP", std::cref(Cqq3_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_2223i_LNP", std::cref(Cqq3_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_2323i_LNP", std::cref(Cqq3_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqq3_2333i_LNP", std::cref(Cqq3_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1111r_LNP", std::cref(Cuu_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1112r_LNP", std::cref(Cuu_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1113r_LNP", std::cref(Cuu_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1122r_LNP", std::cref(Cuu_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1123r_LNP", std::cref(Cuu_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1133r_LNP", std::cref(Cuu_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1212r_LNP", std::cref(Cuu_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1213r_LNP", std::cref(Cuu_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1221r_LNP", std::cref(Cuu_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1222r_LNP", std::cref(Cuu_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1223r_LNP", std::cref(Cuu_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1231r_LNP", std::cref(Cuu_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1232r_LNP", std::cref(Cuu_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1233r_LNP", std::cref(Cuu_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1313r_LNP", std::cref(Cuu_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1322r_LNP", std::cref(Cuu_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1323r_LNP", std::cref(Cuu_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1331r_LNP", std::cref(Cuu_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1332r_LNP", std::cref(Cuu_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1333r_LNP", std::cref(Cuu_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_2222r_LNP", std::cref(Cuu_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_2223r_LNP", std::cref(Cuu_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_2233r_LNP", std::cref(Cuu_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_2323r_LNP", std::cref(Cuu_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_2332r_LNP", std::cref(Cuu_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_2333r_LNP", std::cref(Cuu_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_3333r_LNP", std::cref(Cuu_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1112i_LNP", std::cref(Cuu_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1113i_LNP", std::cref(Cuu_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1123i_LNP", std::cref(Cuu_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1212i_LNP", std::cref(Cuu_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1213i_LNP", std::cref(Cuu_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1222i_LNP", std::cref(Cuu_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1223i_LNP", std::cref(Cuu_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1231i_LNP", std::cref(Cuu_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1232i_LNP", std::cref(Cuu_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1233i_LNP", std::cref(Cuu_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1313i_LNP", std::cref(Cuu_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1322i_LNP", std::cref(Cuu_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1323i_LNP", std::cref(Cuu_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1332i_LNP", std::cref(Cuu_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_1333i_LNP", std::cref(Cuu_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_2223i_LNP", std::cref(Cuu_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_2323i_LNP", std::cref(Cuu_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cuu_2333i_LNP", std::cref(Cuu_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1111r_LNP", std::cref(Cdd_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1112r_LNP", std::cref(Cdd_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1113r_LNP", std::cref(Cdd_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1122r_LNP", std::cref(Cdd_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1123r_LNP", std::cref(Cdd_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1133r_LNP", std::cref(Cdd_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1212r_LNP", std::cref(Cdd_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1213r_LNP", std::cref(Cdd_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1221r_LNP", std::cref(Cdd_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1222r_LNP", std::cref(Cdd_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1223r_LNP", std::cref(Cdd_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1231r_LNP", std::cref(Cdd_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1232r_LNP", std::cref(Cdd_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1233r_LNP", std::cref(Cdd_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1313r_LNP", std::cref(Cdd_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1322r_LNP", std::cref(Cdd_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1323r_LNP", std::cref(Cdd_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1331r_LNP", std::cref(Cdd_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1332r_LNP", std::cref(Cdd_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1333r_LNP", std::cref(Cdd_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_2222r_LNP", std::cref(Cdd_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_2223r_LNP", std::cref(Cdd_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_2233r_LNP", std::cref(Cdd_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_2323r_LNP", std::cref(Cdd_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_2332r_LNP", std::cref(Cdd_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_2333r_LNP", std::cref(Cdd_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_3333r_LNP", std::cref(Cdd_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1112i_LNP", std::cref(Cdd_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1113i_LNP", std::cref(Cdd_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1123i_LNP", std::cref(Cdd_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1212i_LNP", std::cref(Cdd_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1213i_LNP", std::cref(Cdd_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1222i_LNP", std::cref(Cdd_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1223i_LNP", std::cref(Cdd_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1231i_LNP", std::cref(Cdd_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1232i_LNP", std::cref(Cdd_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1233i_LNP", std::cref(Cdd_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1313i_LNP", std::cref(Cdd_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1322i_LNP", std::cref(Cdd_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1323i_LNP", std::cref(Cdd_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1332i_LNP", std::cref(Cdd_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_1333i_LNP", std::cref(Cdd_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_2223i_LNP", std::cref(Cdd_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_2323i_LNP", std::cref(Cdd_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cdd_2333i_LNP", std::cref(Cdd_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1111r_LNP", std::cref(Cud1_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1112r_LNP", std::cref(Cud1_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1113r_LNP", std::cref(Cud1_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1122r_LNP", std::cref(Cud1_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1123r_LNP", std::cref(Cud1_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1133r_LNP", std::cref(Cud1_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1211r_LNP", std::cref(Cud1_1211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1212r_LNP", std::cref(Cud1_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1213r_LNP", std::cref(Cud1_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1221r_LNP", std::cref(Cud1_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1222r_LNP", std::cref(Cud1_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1223r_LNP", std::cref(Cud1_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1231r_LNP", std::cref(Cud1_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1232r_LNP", std::cref(Cud1_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1233r_LNP", std::cref(Cud1_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1311r_LNP", std::cref(Cud1_1311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1312r_LNP", std::cref(Cud1_1312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1313r_LNP", std::cref(Cud1_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1321r_LNP", std::cref(Cud1_1321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1322r_LNP", std::cref(Cud1_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1323r_LNP", std::cref(Cud1_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1331r_LNP", std::cref(Cud1_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1332r_LNP", std::cref(Cud1_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1333r_LNP", std::cref(Cud1_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2211r_LNP", std::cref(Cud1_2211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2212r_LNP", std::cref(Cud1_2212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2213r_LNP", std::cref(Cud1_2213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2222r_LNP", std::cref(Cud1_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2223r_LNP", std::cref(Cud1_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2233r_LNP", std::cref(Cud1_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2311r_LNP", std::cref(Cud1_2311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2312r_LNP", std::cref(Cud1_2312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2313r_LNP", std::cref(Cud1_2313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2321r_LNP", std::cref(Cud1_2321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2322r_LNP", std::cref(Cud1_2322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2323r_LNP", std::cref(Cud1_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2331r_LNP", std::cref(Cud1_2331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2332r_LNP", std::cref(Cud1_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2333r_LNP", std::cref(Cud1_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_3311r_LNP", std::cref(Cud1_3311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_3312r_LNP", std::cref(Cud1_3312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_3313r_LNP", std::cref(Cud1_3313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_3322r_LNP", std::cref(Cud1_3322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_3323r_LNP", std::cref(Cud1_3323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_3333r_LNP", std::cref(Cud1_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1112i_LNP", std::cref(Cud1_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1113i_LNP", std::cref(Cud1_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1123i_LNP", std::cref(Cud1_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1211i_LNP", std::cref(Cud1_1211i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1212i_LNP", std::cref(Cud1_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1213i_LNP", std::cref(Cud1_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1221i_LNP", std::cref(Cud1_1221i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1222i_LNP", std::cref(Cud1_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1223i_LNP", std::cref(Cud1_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1231i_LNP", std::cref(Cud1_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1232i_LNP", std::cref(Cud1_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1233i_LNP", std::cref(Cud1_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1311i_LNP", std::cref(Cud1_1311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1312i_LNP", std::cref(Cud1_1312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1313i_LNP", std::cref(Cud1_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1321i_LNP", std::cref(Cud1_1321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1322i_LNP", std::cref(Cud1_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1323i_LNP", std::cref(Cud1_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1331i_LNP", std::cref(Cud1_1331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1332i_LNP", std::cref(Cud1_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_1333i_LNP", std::cref(Cud1_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2212i_LNP", std::cref(Cud1_2212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2213i_LNP", std::cref(Cud1_2213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2223i_LNP", std::cref(Cud1_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2312i_LNP", std::cref(Cud1_2312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2313i_LNP", std::cref(Cud1_2313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2321i_LNP", std::cref(Cud1_2321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2322i_LNP", std::cref(Cud1_2322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2323i_LNP", std::cref(Cud1_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2331i_LNP", std::cref(Cud1_2331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2332i_LNP", std::cref(Cud1_2332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2333i_LNP", std::cref(Cud1_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_2311i_LNP", std::cref(Cud1_2311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_3312i_LNP", std::cref(Cud1_3312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_3313i_LNP", std::cref(Cud1_3313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud1_3323i_LNP", std::cref(Cud1_3323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1111r_LNP", std::cref(Cud8_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1112r_LNP", std::cref(Cud8_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1113r_LNP", std::cref(Cud8_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1122r_LNP", std::cref(Cud8_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1123r_LNP", std::cref(Cud8_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1133r_LNP", std::cref(Cud8_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1211r_LNP", std::cref(Cud8_1211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1212r_LNP", std::cref(Cud8_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1213r_LNP", std::cref(Cud8_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1221r_LNP", std::cref(Cud8_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1222r_LNP", std::cref(Cud8_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1223r_LNP", std::cref(Cud8_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1231r_LNP", std::cref(Cud8_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1232r_LNP", std::cref(Cud8_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1233r_LNP", std::cref(Cud8_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1311r_LNP", std::cref(Cud8_1311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1312r_LNP", std::cref(Cud8_1312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1313r_LNP", std::cref(Cud8_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1321r_LNP", std::cref(Cud8_1321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1322r_LNP", std::cref(Cud8_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1323r_LNP", std::cref(Cud8_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1331r_LNP", std::cref(Cud8_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1332r_LNP", std::cref(Cud8_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1333r_LNP", std::cref(Cud8_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2211r_LNP", std::cref(Cud8_2211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2212r_LNP", std::cref(Cud8_2212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2213r_LNP", std::cref(Cud8_2213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2222r_LNP", std::cref(Cud8_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2223r_LNP", std::cref(Cud8_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2233r_LNP", std::cref(Cud8_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2311r_LNP", std::cref(Cud8_2311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2312r_LNP", std::cref(Cud8_2312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2313r_LNP", std::cref(Cud8_2313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2321r_LNP", std::cref(Cud8_2321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2322r_LNP", std::cref(Cud8_2322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2323r_LNP", std::cref(Cud8_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2331r_LNP", std::cref(Cud8_2331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2332r_LNP", std::cref(Cud8_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2333r_LNP", std::cref(Cud8_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_3311r_LNP", std::cref(Cud8_3311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_3312r_LNP", std::cref(Cud8_3312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_3313r_LNP", std::cref(Cud8_3313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_3322r_LNP", std::cref(Cud8_3322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_3323r_LNP", std::cref(Cud8_3323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_3333r_LNP", std::cref(Cud8_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1112i_LNP", std::cref(Cud8_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1113i_LNP", std::cref(Cud8_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1123i_LNP", std::cref(Cud8_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1211i_LNP", std::cref(Cud8_1211i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1212i_LNP", std::cref(Cud8_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1213i_LNP", std::cref(Cud8_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1221i_LNP", std::cref(Cud8_1221i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1222i_LNP", std::cref(Cud8_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1223i_LNP", std::cref(Cud8_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1231i_LNP", std::cref(Cud8_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1232i_LNP", std::cref(Cud8_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1233i_LNP", std::cref(Cud8_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1311i_LNP", std::cref(Cud8_1311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1312i_LNP", std::cref(Cud8_1312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1313i_LNP", std::cref(Cud8_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1321i_LNP", std::cref(Cud8_1321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1322i_LNP", std::cref(Cud8_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1323i_LNP", std::cref(Cud8_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1331i_LNP", std::cref(Cud8_1331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1332i_LNP", std::cref(Cud8_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_1333i_LNP", std::cref(Cud8_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2212i_LNP", std::cref(Cud8_2212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2213i_LNP", std::cref(Cud8_2213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2223i_LNP", std::cref(Cud8_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2312i_LNP", std::cref(Cud8_2312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2313i_LNP", std::cref(Cud8_2313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2321i_LNP", std::cref(Cud8_2321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2322i_LNP", std::cref(Cud8_2322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2323i_LNP", std::cref(Cud8_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2331i_LNP", std::cref(Cud8_2331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2332i_LNP", std::cref(Cud8_2332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2333i_LNP", std::cref(Cud8_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_2311i_LNP", std::cref(Cud8_2311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_3312i_LNP", std::cref(Cud8_3312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_3313i_LNP", std::cref(Cud8_3313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cud8_3323i_LNP", std::cref(Cud8_3323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1111r_LNP", std::cref(Cqu1_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1112r_LNP", std::cref(Cqu1_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1113r_LNP", std::cref(Cqu1_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1122r_LNP", std::cref(Cqu1_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1123r_LNP", std::cref(Cqu1_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1133r_LNP", std::cref(Cqu1_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1211r_LNP", std::cref(Cqu1_1211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1212r_LNP", std::cref(Cqu1_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1213r_LNP", std::cref(Cqu1_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1221r_LNP", std::cref(Cqu1_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1222r_LNP", std::cref(Cqu1_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1223r_LNP", std::cref(Cqu1_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1231r_LNP", std::cref(Cqu1_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1232r_LNP", std::cref(Cqu1_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1233r_LNP", std::cref(Cqu1_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1311r_LNP", std::cref(Cqu1_1311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1312r_LNP", std::cref(Cqu1_1312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1313r_LNP", std::cref(Cqu1_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1321r_LNP", std::cref(Cqu1_1321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1322r_LNP", std::cref(Cqu1_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1323r_LNP", std::cref(Cqu1_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1331r_LNP", std::cref(Cqu1_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1332r_LNP", std::cref(Cqu1_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1333r_LNP", std::cref(Cqu1_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2211r_LNP", std::cref(Cqu1_2211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2212r_LNP", std::cref(Cqu1_2212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2213r_LNP", std::cref(Cqu1_2213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2222r_LNP", std::cref(Cqu1_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2223r_LNP", std::cref(Cqu1_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2233r_LNP", std::cref(Cqu1_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2311r_LNP", std::cref(Cqu1_2311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2312r_LNP", std::cref(Cqu1_2312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2313r_LNP", std::cref(Cqu1_2313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2321r_LNP", std::cref(Cqu1_2321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2322r_LNP", std::cref(Cqu1_2322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2323r_LNP", std::cref(Cqu1_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2331r_LNP", std::cref(Cqu1_2331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2332r_LNP", std::cref(Cqu1_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2333r_LNP", std::cref(Cqu1_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_3311r_LNP", std::cref(Cqu1_3311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_3312r_LNP", std::cref(Cqu1_3312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_3313r_LNP", std::cref(Cqu1_3313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_3322r_LNP", std::cref(Cqu1_3322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_3323r_LNP", std::cref(Cqu1_3323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_3333r_LNP", std::cref(Cqu1_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1112i_LNP", std::cref(Cqu1_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1113i_LNP", std::cref(Cqu1_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1123i_LNP", std::cref(Cqu1_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1211i_LNP", std::cref(Cqu1_1211i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1212i_LNP", std::cref(Cqu1_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1213i_LNP", std::cref(Cqu1_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1221i_LNP", std::cref(Cqu1_1221i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1222i_LNP", std::cref(Cqu1_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1223i_LNP", std::cref(Cqu1_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1231i_LNP", std::cref(Cqu1_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1232i_LNP", std::cref(Cqu1_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1233i_LNP", std::cref(Cqu1_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1311i_LNP", std::cref(Cqu1_1311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1312i_LNP", std::cref(Cqu1_1312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1313i_LNP", std::cref(Cqu1_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1321i_LNP", std::cref(Cqu1_1321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1322i_LNP", std::cref(Cqu1_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1323i_LNP", std::cref(Cqu1_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1331i_LNP", std::cref(Cqu1_1331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1332i_LNP", std::cref(Cqu1_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_1333i_LNP", std::cref(Cqu1_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2212i_LNP", std::cref(Cqu1_2212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2213i_LNP", std::cref(Cqu1_2213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2223i_LNP", std::cref(Cqu1_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2312i_LNP", std::cref(Cqu1_2312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2313i_LNP", std::cref(Cqu1_2313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2321i_LNP", std::cref(Cqu1_2321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2322i_LNP", std::cref(Cqu1_2322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2323i_LNP", std::cref(Cqu1_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2331i_LNP", std::cref(Cqu1_2331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2332i_LNP", std::cref(Cqu1_2332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2333i_LNP", std::cref(Cqu1_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_2311i_LNP", std::cref(Cqu1_2311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_3312i_LNP", std::cref(Cqu1_3312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_3313i_LNP", std::cref(Cqu1_3313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu1_3323i_LNP", std::cref(Cqu1_3323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1111r_LNP", std::cref(Cqu8_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1112r_LNP", std::cref(Cqu8_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1113r_LNP", std::cref(Cqu8_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1122r_LNP", std::cref(Cqu8_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1123r_LNP", std::cref(Cqu8_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1133r_LNP", std::cref(Cqu8_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1211r_LNP", std::cref(Cqu8_1211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1212r_LNP", std::cref(Cqu8_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1213r_LNP", std::cref(Cqu8_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1221r_LNP", std::cref(Cqu8_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1222r_LNP", std::cref(Cqu8_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1223r_LNP", std::cref(Cqu8_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1231r_LNP", std::cref(Cqu8_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1232r_LNP", std::cref(Cqu8_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1233r_LNP", std::cref(Cqu8_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1311r_LNP", std::cref(Cqu8_1311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1312r_LNP", std::cref(Cqu8_1312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1313r_LNP", std::cref(Cqu8_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1321r_LNP", std::cref(Cqu8_1321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1322r_LNP", std::cref(Cqu8_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1323r_LNP", std::cref(Cqu8_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1331r_LNP", std::cref(Cqu8_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1332r_LNP", std::cref(Cqu8_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1333r_LNP", std::cref(Cqu8_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2211r_LNP", std::cref(Cqu8_2211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2212r_LNP", std::cref(Cqu8_2212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2213r_LNP", std::cref(Cqu8_2213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2222r_LNP", std::cref(Cqu8_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2223r_LNP", std::cref(Cqu8_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2233r_LNP", std::cref(Cqu8_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2311r_LNP", std::cref(Cqu8_2311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2312r_LNP", std::cref(Cqu8_2312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2313r_LNP", std::cref(Cqu8_2313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2321r_LNP", std::cref(Cqu8_2321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2322r_LNP", std::cref(Cqu8_2322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2323r_LNP", std::cref(Cqu8_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2331r_LNP", std::cref(Cqu8_2331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2332r_LNP", std::cref(Cqu8_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2333r_LNP", std::cref(Cqu8_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_3311r_LNP", std::cref(Cqu8_3311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_3312r_LNP", std::cref(Cqu8_3312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_3313r_LNP", std::cref(Cqu8_3313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_3322r_LNP", std::cref(Cqu8_3322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_3323r_LNP", std::cref(Cqu8_3323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_3333r_LNP", std::cref(Cqu8_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1112i_LNP", std::cref(Cqu8_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1113i_LNP", std::cref(Cqu8_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1123i_LNP", std::cref(Cqu8_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1211i_LNP", std::cref(Cqu8_1211i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1212i_LNP", std::cref(Cqu8_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1213i_LNP", std::cref(Cqu8_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1221i_LNP", std::cref(Cqu8_1221i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1222i_LNP", std::cref(Cqu8_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1223i_LNP", std::cref(Cqu8_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1231i_LNP", std::cref(Cqu8_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1232i_LNP", std::cref(Cqu8_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1233i_LNP", std::cref(Cqu8_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1311i_LNP", std::cref(Cqu8_1311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1312i_LNP", std::cref(Cqu8_1312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1313i_LNP", std::cref(Cqu8_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1321i_LNP", std::cref(Cqu8_1321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1322i_LNP", std::cref(Cqu8_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1323i_LNP", std::cref(Cqu8_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1331i_LNP", std::cref(Cqu8_1331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1332i_LNP", std::cref(Cqu8_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_1333i_LNP", std::cref(Cqu8_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2212i_LNP", std::cref(Cqu8_2212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2213i_LNP", std::cref(Cqu8_2213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2223i_LNP", std::cref(Cqu8_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2312i_LNP", std::cref(Cqu8_2312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2313i_LNP", std::cref(Cqu8_2313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2321i_LNP", std::cref(Cqu8_2321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2322i_LNP", std::cref(Cqu8_2322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2323i_LNP", std::cref(Cqu8_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2331i_LNP", std::cref(Cqu8_2331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2332i_LNP", std::cref(Cqu8_2332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2333i_LNP", std::cref(Cqu8_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_2311i_LNP", std::cref(Cqu8_2311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_3312i_LNP", std::cref(Cqu8_3312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_3313i_LNP", std::cref(Cqu8_3313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqu8_3323i_LNP", std::cref(Cqu8_3323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1111r_LNP", std::cref(Cqd1_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1112r_LNP", std::cref(Cqd1_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1113r_LNP", std::cref(Cqd1_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1122r_LNP", std::cref(Cqd1_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1123r_LNP", std::cref(Cqd1_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1133r_LNP", std::cref(Cqd1_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1211r_LNP", std::cref(Cqd1_1211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1212r_LNP", std::cref(Cqd1_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1213r_LNP", std::cref(Cqd1_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1221r_LNP", std::cref(Cqd1_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1222r_LNP", std::cref(Cqd1_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1223r_LNP", std::cref(Cqd1_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1231r_LNP", std::cref(Cqd1_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1232r_LNP", std::cref(Cqd1_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1233r_LNP", std::cref(Cqd1_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1311r_LNP", std::cref(Cqd1_1311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1312r_LNP", std::cref(Cqd1_1312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1313r_LNP", std::cref(Cqd1_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1321r_LNP", std::cref(Cqd1_1321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1322r_LNP", std::cref(Cqd1_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1323r_LNP", std::cref(Cqd1_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1331r_LNP", std::cref(Cqd1_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1332r_LNP", std::cref(Cqd1_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1333r_LNP", std::cref(Cqd1_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2211r_LNP", std::cref(Cqd1_2211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2212r_LNP", std::cref(Cqd1_2212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2213r_LNP", std::cref(Cqd1_2213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2222r_LNP", std::cref(Cqd1_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2223r_LNP", std::cref(Cqd1_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2233r_LNP", std::cref(Cqd1_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2311r_LNP", std::cref(Cqd1_2311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2312r_LNP", std::cref(Cqd1_2312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2313r_LNP", std::cref(Cqd1_2313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2321r_LNP", std::cref(Cqd1_2321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2322r_LNP", std::cref(Cqd1_2322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2323r_LNP", std::cref(Cqd1_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2331r_LNP", std::cref(Cqd1_2331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2332r_LNP", std::cref(Cqd1_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2333r_LNP", std::cref(Cqd1_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_3311r_LNP", std::cref(Cqd1_3311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_3312r_LNP", std::cref(Cqd1_3312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_3313r_LNP", std::cref(Cqd1_3313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_3322r_LNP", std::cref(Cqd1_3322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_3323r_LNP", std::cref(Cqd1_3323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_3333r_LNP", std::cref(Cqd1_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1112i_LNP", std::cref(Cqd1_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1113i_LNP", std::cref(Cqd1_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1123i_LNP", std::cref(Cqd1_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1211i_LNP", std::cref(Cqd1_1211i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1212i_LNP", std::cref(Cqd1_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1213i_LNP", std::cref(Cqd1_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1221i_LNP", std::cref(Cqd1_1221i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1222i_LNP", std::cref(Cqd1_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1223i_LNP", std::cref(Cqd1_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1231i_LNP", std::cref(Cqd1_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1232i_LNP", std::cref(Cqd1_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1233i_LNP", std::cref(Cqd1_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1311i_LNP", std::cref(Cqd1_1311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1312i_LNP", std::cref(Cqd1_1312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1313i_LNP", std::cref(Cqd1_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1321i_LNP", std::cref(Cqd1_1321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1322i_LNP", std::cref(Cqd1_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1323i_LNP", std::cref(Cqd1_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1331i_LNP", std::cref(Cqd1_1331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1332i_LNP", std::cref(Cqd1_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_1333i_LNP", std::cref(Cqd1_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2212i_LNP", std::cref(Cqd1_2212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2213i_LNP", std::cref(Cqd1_2213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2223i_LNP", std::cref(Cqd1_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2312i_LNP", std::cref(Cqd1_2312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2313i_LNP", std::cref(Cqd1_2313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2321i_LNP", std::cref(Cqd1_2321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2322i_LNP", std::cref(Cqd1_2322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2323i_LNP", std::cref(Cqd1_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2331i_LNP", std::cref(Cqd1_2331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2332i_LNP", std::cref(Cqd1_2332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2333i_LNP", std::cref(Cqd1_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_2311i_LNP", std::cref(Cqd1_2311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_3312i_LNP", std::cref(Cqd1_3312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_3313i_LNP", std::cref(Cqd1_3313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd1_3323i_LNP", std::cref(Cqd1_3323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1111r_LNP", std::cref(Cqd8_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1112r_LNP", std::cref(Cqd8_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1113r_LNP", std::cref(Cqd8_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1122r_LNP", std::cref(Cqd8_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1123r_LNP", std::cref(Cqd8_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1133r_LNP", std::cref(Cqd8_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1211r_LNP", std::cref(Cqd8_1211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1212r_LNP", std::cref(Cqd8_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1213r_LNP", std::cref(Cqd8_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1221r_LNP", std::cref(Cqd8_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1222r_LNP", std::cref(Cqd8_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1223r_LNP", std::cref(Cqd8_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1231r_LNP", std::cref(Cqd8_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1232r_LNP", std::cref(Cqd8_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1233r_LNP", std::cref(Cqd8_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1311r_LNP", std::cref(Cqd8_1311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1312r_LNP", std::cref(Cqd8_1312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1313r_LNP", std::cref(Cqd8_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1321r_LNP", std::cref(Cqd8_1321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1322r_LNP", std::cref(Cqd8_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1323r_LNP", std::cref(Cqd8_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1331r_LNP", std::cref(Cqd8_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1332r_LNP", std::cref(Cqd8_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1333r_LNP", std::cref(Cqd8_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2211r_LNP", std::cref(Cqd8_2211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2212r_LNP", std::cref(Cqd8_2212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2213r_LNP", std::cref(Cqd8_2213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2222r_LNP", std::cref(Cqd8_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2223r_LNP", std::cref(Cqd8_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2233r_LNP", std::cref(Cqd8_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2311r_LNP", std::cref(Cqd8_2311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2312r_LNP", std::cref(Cqd8_2312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2313r_LNP", std::cref(Cqd8_2313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2321r_LNP", std::cref(Cqd8_2321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2322r_LNP", std::cref(Cqd8_2322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2323r_LNP", std::cref(Cqd8_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2331r_LNP", std::cref(Cqd8_2331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2332r_LNP", std::cref(Cqd8_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2333r_LNP", std::cref(Cqd8_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_3311r_LNP", std::cref(Cqd8_3311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_3312r_LNP", std::cref(Cqd8_3312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_3313r_LNP", std::cref(Cqd8_3313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_3322r_LNP", std::cref(Cqd8_3322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_3323r_LNP", std::cref(Cqd8_3323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_3333r_LNP", std::cref(Cqd8_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1112i_LNP", std::cref(Cqd8_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1113i_LNP", std::cref(Cqd8_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1123i_LNP", std::cref(Cqd8_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1211i_LNP", std::cref(Cqd8_1211i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1212i_LNP", std::cref(Cqd8_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1213i_LNP", std::cref(Cqd8_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1221i_LNP", std::cref(Cqd8_1221i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1222i_LNP", std::cref(Cqd8_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1223i_LNP", std::cref(Cqd8_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1231i_LNP", std::cref(Cqd8_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1232i_LNP", std::cref(Cqd8_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1233i_LNP", std::cref(Cqd8_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1311i_LNP", std::cref(Cqd8_1311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1312i_LNP", std::cref(Cqd8_1312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1313i_LNP", std::cref(Cqd8_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1321i_LNP", std::cref(Cqd8_1321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1322i_LNP", std::cref(Cqd8_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1323i_LNP", std::cref(Cqd8_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1331i_LNP", std::cref(Cqd8_1331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1332i_LNP", std::cref(Cqd8_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_1333i_LNP", std::cref(Cqd8_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2212i_LNP", std::cref(Cqd8_2212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2213i_LNP", std::cref(Cqd8_2213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2223i_LNP", std::cref(Cqd8_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2312i_LNP", std::cref(Cqd8_2312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2313i_LNP", std::cref(Cqd8_2313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2321i_LNP", std::cref(Cqd8_2321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2322i_LNP", std::cref(Cqd8_2322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2323i_LNP", std::cref(Cqd8_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2331i_LNP", std::cref(Cqd8_2331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2332i_LNP", std::cref(Cqd8_2332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2333i_LNP", std::cref(Cqd8_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_2311i_LNP", std::cref(Cqd8_2311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_3312i_LNP", std::cref(Cqd8_3312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_3313i_LNP", std::cref(Cqd8_3313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqd8_3323i_LNP", std::cref(Cqd8_3323i_LNP)));
        // Map for the Lepton-Quark four-fermion operators: LL, RR, LLRR 
        ModelParamMap.insert(std::make_pair("Clq1_1111r_LNP", std::cref(Clq1_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1112r_LNP", std::cref(Clq1_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1113r_LNP", std::cref(Clq1_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1122r_LNP", std::cref(Clq1_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1123r_LNP", std::cref(Clq1_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1133r_LNP", std::cref(Clq1_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1211r_LNP", std::cref(Clq1_1211r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1212r_LNP", std::cref(Clq1_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1213r_LNP", std::cref(Clq1_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1221r_LNP", std::cref(Clq1_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1222r_LNP", std::cref(Clq1_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1223r_LNP", std::cref(Clq1_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1231r_LNP", std::cref(Clq1_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1232r_LNP", std::cref(Clq1_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1233r_LNP", std::cref(Clq1_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1311r_LNP", std::cref(Clq1_1311r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1312r_LNP", std::cref(Clq1_1312r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1313r_LNP", std::cref(Clq1_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1321r_LNP", std::cref(Clq1_1321r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1322r_LNP", std::cref(Clq1_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1323r_LNP", std::cref(Clq1_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1331r_LNP", std::cref(Clq1_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1332r_LNP", std::cref(Clq1_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1333r_LNP", std::cref(Clq1_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2211r_LNP", std::cref(Clq1_2211r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2212r_LNP", std::cref(Clq1_2212r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2213r_LNP", std::cref(Clq1_2213r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2222r_LNP", std::cref(Clq1_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2223r_LNP", std::cref(Clq1_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2233r_LNP", std::cref(Clq1_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2311r_LNP", std::cref(Clq1_2311r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2312r_LNP", std::cref(Clq1_2312r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2313r_LNP", std::cref(Clq1_2313r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2321r_LNP", std::cref(Clq1_2321r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2322r_LNP", std::cref(Clq1_2322r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2323r_LNP", std::cref(Clq1_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2331r_LNP", std::cref(Clq1_2331r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2332r_LNP", std::cref(Clq1_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2333r_LNP", std::cref(Clq1_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_3311r_LNP", std::cref(Clq1_3311r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_3312r_LNP", std::cref(Clq1_3312r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_3313r_LNP", std::cref(Clq1_3313r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_3322r_LNP", std::cref(Clq1_3322r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_3323r_LNP", std::cref(Clq1_3323r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_3333r_LNP", std::cref(Clq1_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1112i_LNP", std::cref(Clq1_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1113i_LNP", std::cref(Clq1_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1123i_LNP", std::cref(Clq1_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1211i_LNP", std::cref(Clq1_1211i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1212i_LNP", std::cref(Clq1_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1213i_LNP", std::cref(Clq1_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1221i_LNP", std::cref(Clq1_1221i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1222i_LNP", std::cref(Clq1_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1223i_LNP", std::cref(Clq1_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1231i_LNP", std::cref(Clq1_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1232i_LNP", std::cref(Clq1_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1233i_LNP", std::cref(Clq1_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1311i_LNP", std::cref(Clq1_1311i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1312i_LNP", std::cref(Clq1_1312i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1313i_LNP", std::cref(Clq1_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1321i_LNP", std::cref(Clq1_1321i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1322i_LNP", std::cref(Clq1_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1323i_LNP", std::cref(Clq1_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1331i_LNP", std::cref(Clq1_1331i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1332i_LNP", std::cref(Clq1_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_1333i_LNP", std::cref(Clq1_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2212i_LNP", std::cref(Clq1_2212i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2213i_LNP", std::cref(Clq1_2213i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2223i_LNP", std::cref(Clq1_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2312i_LNP", std::cref(Clq1_2312i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2313i_LNP", std::cref(Clq1_2313i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2321i_LNP", std::cref(Clq1_2321i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2322i_LNP", std::cref(Clq1_2322i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2323i_LNP", std::cref(Clq1_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2331i_LNP", std::cref(Clq1_2331i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2332i_LNP", std::cref(Clq1_2332i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2333i_LNP", std::cref(Clq1_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_2311i_LNP", std::cref(Clq1_2311i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_3312i_LNP", std::cref(Clq1_3312i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_3313i_LNP", std::cref(Clq1_3313i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq1_3323i_LNP", std::cref(Clq1_3323i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1111r_LNP", std::cref(Clq3_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1112r_LNP", std::cref(Clq3_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1113r_LNP", std::cref(Clq3_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1122r_LNP", std::cref(Clq3_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1123r_LNP", std::cref(Clq3_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1133r_LNP", std::cref(Clq3_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1211r_LNP", std::cref(Clq3_1211r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1212r_LNP", std::cref(Clq3_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1213r_LNP", std::cref(Clq3_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1221r_LNP", std::cref(Clq3_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1222r_LNP", std::cref(Clq3_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1223r_LNP", std::cref(Clq3_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1231r_LNP", std::cref(Clq3_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1232r_LNP", std::cref(Clq3_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1233r_LNP", std::cref(Clq3_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1311r_LNP", std::cref(Clq3_1311r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1312r_LNP", std::cref(Clq3_1312r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1313r_LNP", std::cref(Clq3_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1321r_LNP", std::cref(Clq3_1321r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1322r_LNP", std::cref(Clq3_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1323r_LNP", std::cref(Clq3_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1331r_LNP", std::cref(Clq3_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1332r_LNP", std::cref(Clq3_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1333r_LNP", std::cref(Clq3_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2211r_LNP", std::cref(Clq3_2211r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2212r_LNP", std::cref(Clq3_2212r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2213r_LNP", std::cref(Clq3_2213r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2222r_LNP", std::cref(Clq3_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2223r_LNP", std::cref(Clq3_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2233r_LNP", std::cref(Clq3_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2311r_LNP", std::cref(Clq3_2311r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2312r_LNP", std::cref(Clq3_2312r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2313r_LNP", std::cref(Clq3_2313r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2321r_LNP", std::cref(Clq3_2321r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2322r_LNP", std::cref(Clq3_2322r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2323r_LNP", std::cref(Clq3_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2331r_LNP", std::cref(Clq3_2331r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2332r_LNP", std::cref(Clq3_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2333r_LNP", std::cref(Clq3_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_3311r_LNP", std::cref(Clq3_3311r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_3312r_LNP", std::cref(Clq3_3312r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_3313r_LNP", std::cref(Clq3_3313r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_3322r_LNP", std::cref(Clq3_3322r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_3323r_LNP", std::cref(Clq3_3323r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_3333r_LNP", std::cref(Clq3_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1112i_LNP", std::cref(Clq3_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1113i_LNP", std::cref(Clq3_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1123i_LNP", std::cref(Clq3_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1211i_LNP", std::cref(Clq3_1211i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1212i_LNP", std::cref(Clq3_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1213i_LNP", std::cref(Clq3_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1221i_LNP", std::cref(Clq3_1221i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1222i_LNP", std::cref(Clq3_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1223i_LNP", std::cref(Clq3_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1231i_LNP", std::cref(Clq3_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1232i_LNP", std::cref(Clq3_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1233i_LNP", std::cref(Clq3_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1311i_LNP", std::cref(Clq3_1311i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1312i_LNP", std::cref(Clq3_1312i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1313i_LNP", std::cref(Clq3_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1321i_LNP", std::cref(Clq3_1321i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1322i_LNP", std::cref(Clq3_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1323i_LNP", std::cref(Clq3_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1331i_LNP", std::cref(Clq3_1331i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1332i_LNP", std::cref(Clq3_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_1333i_LNP", std::cref(Clq3_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2212i_LNP", std::cref(Clq3_2212i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2213i_LNP", std::cref(Clq3_2213i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2223i_LNP", std::cref(Clq3_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2312i_LNP", std::cref(Clq3_2312i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2313i_LNP", std::cref(Clq3_2313i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2321i_LNP", std::cref(Clq3_2321i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2322i_LNP", std::cref(Clq3_2322i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2323i_LNP", std::cref(Clq3_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2331i_LNP", std::cref(Clq3_2331i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2332i_LNP", std::cref(Clq3_2332i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2333i_LNP", std::cref(Clq3_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_2311i_LNP", std::cref(Clq3_2311i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_3312i_LNP", std::cref(Clq3_3312i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_3313i_LNP", std::cref(Clq3_3313i_LNP)));
        ModelParamMap.insert(std::make_pair("Clq3_3323i_LNP", std::cref(Clq3_3323i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1111r_LNP", std::cref(Ceu_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1112r_LNP", std::cref(Ceu_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1113r_LNP", std::cref(Ceu_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1122r_LNP", std::cref(Ceu_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1123r_LNP", std::cref(Ceu_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1133r_LNP", std::cref(Ceu_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1211r_LNP", std::cref(Ceu_1211r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1212r_LNP", std::cref(Ceu_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1213r_LNP", std::cref(Ceu_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1221r_LNP", std::cref(Ceu_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1222r_LNP", std::cref(Ceu_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1223r_LNP", std::cref(Ceu_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1231r_LNP", std::cref(Ceu_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1232r_LNP", std::cref(Ceu_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1233r_LNP", std::cref(Ceu_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1311r_LNP", std::cref(Ceu_1311r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1312r_LNP", std::cref(Ceu_1312r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1313r_LNP", std::cref(Ceu_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1321r_LNP", std::cref(Ceu_1321r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1322r_LNP", std::cref(Ceu_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1323r_LNP", std::cref(Ceu_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1331r_LNP", std::cref(Ceu_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1332r_LNP", std::cref(Ceu_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1333r_LNP", std::cref(Ceu_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2211r_LNP", std::cref(Ceu_2211r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2212r_LNP", std::cref(Ceu_2212r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2213r_LNP", std::cref(Ceu_2213r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2222r_LNP", std::cref(Ceu_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2223r_LNP", std::cref(Ceu_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2233r_LNP", std::cref(Ceu_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2311r_LNP", std::cref(Ceu_2311r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2312r_LNP", std::cref(Ceu_2312r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2313r_LNP", std::cref(Ceu_2313r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2321r_LNP", std::cref(Ceu_2321r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2322r_LNP", std::cref(Ceu_2322r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2323r_LNP", std::cref(Ceu_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2331r_LNP", std::cref(Ceu_2331r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2332r_LNP", std::cref(Ceu_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2333r_LNP", std::cref(Ceu_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_3311r_LNP", std::cref(Ceu_3311r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_3312r_LNP", std::cref(Ceu_3312r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_3313r_LNP", std::cref(Ceu_3313r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_3322r_LNP", std::cref(Ceu_3322r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_3323r_LNP", std::cref(Ceu_3323r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_3333r_LNP", std::cref(Ceu_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1112i_LNP", std::cref(Ceu_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1113i_LNP", std::cref(Ceu_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1123i_LNP", std::cref(Ceu_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1211i_LNP", std::cref(Ceu_1211i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1212i_LNP", std::cref(Ceu_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1213i_LNP", std::cref(Ceu_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1221i_LNP", std::cref(Ceu_1221i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1222i_LNP", std::cref(Ceu_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1223i_LNP", std::cref(Ceu_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1231i_LNP", std::cref(Ceu_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1232i_LNP", std::cref(Ceu_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1233i_LNP", std::cref(Ceu_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1311i_LNP", std::cref(Ceu_1311i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1312i_LNP", std::cref(Ceu_1312i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1313i_LNP", std::cref(Ceu_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1321i_LNP", std::cref(Ceu_1321i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1322i_LNP", std::cref(Ceu_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1323i_LNP", std::cref(Ceu_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1331i_LNP", std::cref(Ceu_1331i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1332i_LNP", std::cref(Ceu_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_1333i_LNP", std::cref(Ceu_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2212i_LNP", std::cref(Ceu_2212i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2213i_LNP", std::cref(Ceu_2213i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2223i_LNP", std::cref(Ceu_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2312i_LNP", std::cref(Ceu_2312i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2313i_LNP", std::cref(Ceu_2313i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2321i_LNP", std::cref(Ceu_2321i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2322i_LNP", std::cref(Ceu_2322i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2323i_LNP", std::cref(Ceu_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2331i_LNP", std::cref(Ceu_2331i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2332i_LNP", std::cref(Ceu_2332i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2333i_LNP", std::cref(Ceu_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_2311i_LNP", std::cref(Ceu_2311i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_3312i_LNP", std::cref(Ceu_3312i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_3313i_LNP", std::cref(Ceu_3313i_LNP)));
        ModelParamMap.insert(std::make_pair("Ceu_3323i_LNP", std::cref(Ceu_3323i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1111r_LNP", std::cref(Ced_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1112r_LNP", std::cref(Ced_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1113r_LNP", std::cref(Ced_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1122r_LNP", std::cref(Ced_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1123r_LNP", std::cref(Ced_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1133r_LNP", std::cref(Ced_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1211r_LNP", std::cref(Ced_1211r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1212r_LNP", std::cref(Ced_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1213r_LNP", std::cref(Ced_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1221r_LNP", std::cref(Ced_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1222r_LNP", std::cref(Ced_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1223r_LNP", std::cref(Ced_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1231r_LNP", std::cref(Ced_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1232r_LNP", std::cref(Ced_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1233r_LNP", std::cref(Ced_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1311r_LNP", std::cref(Ced_1311r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1312r_LNP", std::cref(Ced_1312r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1313r_LNP", std::cref(Ced_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1321r_LNP", std::cref(Ced_1321r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1322r_LNP", std::cref(Ced_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1323r_LNP", std::cref(Ced_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1331r_LNP", std::cref(Ced_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1332r_LNP", std::cref(Ced_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1333r_LNP", std::cref(Ced_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2211r_LNP", std::cref(Ced_2211r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2212r_LNP", std::cref(Ced_2212r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2213r_LNP", std::cref(Ced_2213r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2222r_LNP", std::cref(Ced_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2223r_LNP", std::cref(Ced_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2233r_LNP", std::cref(Ced_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2311r_LNP", std::cref(Ced_2311r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2312r_LNP", std::cref(Ced_2312r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2313r_LNP", std::cref(Ced_2313r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2321r_LNP", std::cref(Ced_2321r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2322r_LNP", std::cref(Ced_2322r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2323r_LNP", std::cref(Ced_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2331r_LNP", std::cref(Ced_2331r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2332r_LNP", std::cref(Ced_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2333r_LNP", std::cref(Ced_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_3311r_LNP", std::cref(Ced_3311r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_3312r_LNP", std::cref(Ced_3312r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_3313r_LNP", std::cref(Ced_3313r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_3322r_LNP", std::cref(Ced_3322r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_3323r_LNP", std::cref(Ced_3323r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_3333r_LNP", std::cref(Ced_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1112i_LNP", std::cref(Ced_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1113i_LNP", std::cref(Ced_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1123i_LNP", std::cref(Ced_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1211i_LNP", std::cref(Ced_1211i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1212i_LNP", std::cref(Ced_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1213i_LNP", std::cref(Ced_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1221i_LNP", std::cref(Ced_1221i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1222i_LNP", std::cref(Ced_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1223i_LNP", std::cref(Ced_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1231i_LNP", std::cref(Ced_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1232i_LNP", std::cref(Ced_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1233i_LNP", std::cref(Ced_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1311i_LNP", std::cref(Ced_1311i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1312i_LNP", std::cref(Ced_1312i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1313i_LNP", std::cref(Ced_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1321i_LNP", std::cref(Ced_1321i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1322i_LNP", std::cref(Ced_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1323i_LNP", std::cref(Ced_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1331i_LNP", std::cref(Ced_1331i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1332i_LNP", std::cref(Ced_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_1333i_LNP", std::cref(Ced_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2212i_LNP", std::cref(Ced_2212i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2213i_LNP", std::cref(Ced_2213i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2223i_LNP", std::cref(Ced_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2312i_LNP", std::cref(Ced_2312i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2313i_LNP", std::cref(Ced_2313i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2321i_LNP", std::cref(Ced_2321i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2322i_LNP", std::cref(Ced_2322i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2323i_LNP", std::cref(Ced_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2331i_LNP", std::cref(Ced_2331i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2332i_LNP", std::cref(Ced_2332i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2333i_LNP", std::cref(Ced_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_2311i_LNP", std::cref(Ced_2311i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_3312i_LNP", std::cref(Ced_3312i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_3313i_LNP", std::cref(Ced_3313i_LNP)));
        ModelParamMap.insert(std::make_pair("Ced_3323i_LNP", std::cref(Ced_3323i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1111r_LNP", std::cref(Clu_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1112r_LNP", std::cref(Clu_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1113r_LNP", std::cref(Clu_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1122r_LNP", std::cref(Clu_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1123r_LNP", std::cref(Clu_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1133r_LNP", std::cref(Clu_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1211r_LNP", std::cref(Clu_1211r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1212r_LNP", std::cref(Clu_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1213r_LNP", std::cref(Clu_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1221r_LNP", std::cref(Clu_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1222r_LNP", std::cref(Clu_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1223r_LNP", std::cref(Clu_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1231r_LNP", std::cref(Clu_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1232r_LNP", std::cref(Clu_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1233r_LNP", std::cref(Clu_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1311r_LNP", std::cref(Clu_1311r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1312r_LNP", std::cref(Clu_1312r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1313r_LNP", std::cref(Clu_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1321r_LNP", std::cref(Clu_1321r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1322r_LNP", std::cref(Clu_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1323r_LNP", std::cref(Clu_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1331r_LNP", std::cref(Clu_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1332r_LNP", std::cref(Clu_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1333r_LNP", std::cref(Clu_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2211r_LNP", std::cref(Clu_2211r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2212r_LNP", std::cref(Clu_2212r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2213r_LNP", std::cref(Clu_2213r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2222r_LNP", std::cref(Clu_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2223r_LNP", std::cref(Clu_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2233r_LNP", std::cref(Clu_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2311r_LNP", std::cref(Clu_2311r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2312r_LNP", std::cref(Clu_2312r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2313r_LNP", std::cref(Clu_2313r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2321r_LNP", std::cref(Clu_2321r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2322r_LNP", std::cref(Clu_2322r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2323r_LNP", std::cref(Clu_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2331r_LNP", std::cref(Clu_2331r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2332r_LNP", std::cref(Clu_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2333r_LNP", std::cref(Clu_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_3311r_LNP", std::cref(Clu_3311r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_3312r_LNP", std::cref(Clu_3312r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_3313r_LNP", std::cref(Clu_3313r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_3322r_LNP", std::cref(Clu_3322r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_3323r_LNP", std::cref(Clu_3323r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_3333r_LNP", std::cref(Clu_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1112i_LNP", std::cref(Clu_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1113i_LNP", std::cref(Clu_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1123i_LNP", std::cref(Clu_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1211i_LNP", std::cref(Clu_1211i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1212i_LNP", std::cref(Clu_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1213i_LNP", std::cref(Clu_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1221i_LNP", std::cref(Clu_1221i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1222i_LNP", std::cref(Clu_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1223i_LNP", std::cref(Clu_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1231i_LNP", std::cref(Clu_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1232i_LNP", std::cref(Clu_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1233i_LNP", std::cref(Clu_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1311i_LNP", std::cref(Clu_1311i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1312i_LNP", std::cref(Clu_1312i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1313i_LNP", std::cref(Clu_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1321i_LNP", std::cref(Clu_1321i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1322i_LNP", std::cref(Clu_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1323i_LNP", std::cref(Clu_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1331i_LNP", std::cref(Clu_1331i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1332i_LNP", std::cref(Clu_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_1333i_LNP", std::cref(Clu_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2212i_LNP", std::cref(Clu_2212i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2213i_LNP", std::cref(Clu_2213i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2223i_LNP", std::cref(Clu_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2312i_LNP", std::cref(Clu_2312i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2313i_LNP", std::cref(Clu_2313i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2321i_LNP", std::cref(Clu_2321i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2322i_LNP", std::cref(Clu_2322i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2323i_LNP", std::cref(Clu_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2331i_LNP", std::cref(Clu_2331i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2332i_LNP", std::cref(Clu_2332i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2333i_LNP", std::cref(Clu_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_2311i_LNP", std::cref(Clu_2311i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_3312i_LNP", std::cref(Clu_3312i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_3313i_LNP", std::cref(Clu_3313i_LNP)));
        ModelParamMap.insert(std::make_pair("Clu_3323i_LNP", std::cref(Clu_3323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1111r_LNP", std::cref(Cld_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1112r_LNP", std::cref(Cld_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1113r_LNP", std::cref(Cld_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1122r_LNP", std::cref(Cld_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1123r_LNP", std::cref(Cld_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1133r_LNP", std::cref(Cld_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1211r_LNP", std::cref(Cld_1211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1212r_LNP", std::cref(Cld_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1213r_LNP", std::cref(Cld_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1221r_LNP", std::cref(Cld_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1222r_LNP", std::cref(Cld_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1223r_LNP", std::cref(Cld_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1231r_LNP", std::cref(Cld_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1232r_LNP", std::cref(Cld_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1233r_LNP", std::cref(Cld_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1311r_LNP", std::cref(Cld_1311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1312r_LNP", std::cref(Cld_1312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1313r_LNP", std::cref(Cld_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1321r_LNP", std::cref(Cld_1321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1322r_LNP", std::cref(Cld_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1323r_LNP", std::cref(Cld_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1331r_LNP", std::cref(Cld_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1332r_LNP", std::cref(Cld_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1333r_LNP", std::cref(Cld_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2211r_LNP", std::cref(Cld_2211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2212r_LNP", std::cref(Cld_2212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2213r_LNP", std::cref(Cld_2213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2222r_LNP", std::cref(Cld_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2223r_LNP", std::cref(Cld_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2233r_LNP", std::cref(Cld_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2311r_LNP", std::cref(Cld_2311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2312r_LNP", std::cref(Cld_2312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2313r_LNP", std::cref(Cld_2313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2321r_LNP", std::cref(Cld_2321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2322r_LNP", std::cref(Cld_2322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2323r_LNP", std::cref(Cld_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2331r_LNP", std::cref(Cld_2331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2332r_LNP", std::cref(Cld_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2333r_LNP", std::cref(Cld_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_3311r_LNP", std::cref(Cld_3311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_3312r_LNP", std::cref(Cld_3312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_3313r_LNP", std::cref(Cld_3313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_3322r_LNP", std::cref(Cld_3322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_3323r_LNP", std::cref(Cld_3323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_3333r_LNP", std::cref(Cld_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1112i_LNP", std::cref(Cld_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1113i_LNP", std::cref(Cld_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1123i_LNP", std::cref(Cld_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1211i_LNP", std::cref(Cld_1211i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1212i_LNP", std::cref(Cld_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1213i_LNP", std::cref(Cld_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1221i_LNP", std::cref(Cld_1221i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1222i_LNP", std::cref(Cld_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1223i_LNP", std::cref(Cld_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1231i_LNP", std::cref(Cld_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1232i_LNP", std::cref(Cld_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1233i_LNP", std::cref(Cld_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1311i_LNP", std::cref(Cld_1311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1312i_LNP", std::cref(Cld_1312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1313i_LNP", std::cref(Cld_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1321i_LNP", std::cref(Cld_1321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1322i_LNP", std::cref(Cld_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1323i_LNP", std::cref(Cld_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1331i_LNP", std::cref(Cld_1331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1332i_LNP", std::cref(Cld_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_1333i_LNP", std::cref(Cld_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2212i_LNP", std::cref(Cld_2212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2213i_LNP", std::cref(Cld_2213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2223i_LNP", std::cref(Cld_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2312i_LNP", std::cref(Cld_2312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2313i_LNP", std::cref(Cld_2313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2321i_LNP", std::cref(Cld_2321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2322i_LNP", std::cref(Cld_2322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2323i_LNP", std::cref(Cld_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2331i_LNP", std::cref(Cld_2331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2332i_LNP", std::cref(Cld_2332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2333i_LNP", std::cref(Cld_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_2311i_LNP", std::cref(Cld_2311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_3312i_LNP", std::cref(Cld_3312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_3313i_LNP", std::cref(Cld_3313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cld_3323i_LNP", std::cref(Cld_3323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1111r_LNP", std::cref(Cqe_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1112r_LNP", std::cref(Cqe_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1113r_LNP", std::cref(Cqe_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1122r_LNP", std::cref(Cqe_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1123r_LNP", std::cref(Cqe_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1133r_LNP", std::cref(Cqe_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1211r_LNP", std::cref(Cqe_1211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1212r_LNP", std::cref(Cqe_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1213r_LNP", std::cref(Cqe_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1221r_LNP", std::cref(Cqe_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1222r_LNP", std::cref(Cqe_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1223r_LNP", std::cref(Cqe_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1231r_LNP", std::cref(Cqe_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1232r_LNP", std::cref(Cqe_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1233r_LNP", std::cref(Cqe_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1311r_LNP", std::cref(Cqe_1311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1312r_LNP", std::cref(Cqe_1312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1313r_LNP", std::cref(Cqe_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1321r_LNP", std::cref(Cqe_1321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1322r_LNP", std::cref(Cqe_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1323r_LNP", std::cref(Cqe_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1331r_LNP", std::cref(Cqe_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1332r_LNP", std::cref(Cqe_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1333r_LNP", std::cref(Cqe_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2211r_LNP", std::cref(Cqe_2211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2212r_LNP", std::cref(Cqe_2212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2213r_LNP", std::cref(Cqe_2213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2222r_LNP", std::cref(Cqe_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2223r_LNP", std::cref(Cqe_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2233r_LNP", std::cref(Cqe_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2311r_LNP", std::cref(Cqe_2311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2312r_LNP", std::cref(Cqe_2312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2313r_LNP", std::cref(Cqe_2313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2321r_LNP", std::cref(Cqe_2321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2322r_LNP", std::cref(Cqe_2322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2323r_LNP", std::cref(Cqe_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2331r_LNP", std::cref(Cqe_2331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2332r_LNP", std::cref(Cqe_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2333r_LNP", std::cref(Cqe_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_3311r_LNP", std::cref(Cqe_3311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_3312r_LNP", std::cref(Cqe_3312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_3313r_LNP", std::cref(Cqe_3313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_3322r_LNP", std::cref(Cqe_3322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_3323r_LNP", std::cref(Cqe_3323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_3333r_LNP", std::cref(Cqe_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1112i_LNP", std::cref(Cqe_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1113i_LNP", std::cref(Cqe_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1123i_LNP", std::cref(Cqe_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1211i_LNP", std::cref(Cqe_1211i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1212i_LNP", std::cref(Cqe_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1213i_LNP", std::cref(Cqe_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1221i_LNP", std::cref(Cqe_1221i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1222i_LNP", std::cref(Cqe_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1223i_LNP", std::cref(Cqe_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1231i_LNP", std::cref(Cqe_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1232i_LNP", std::cref(Cqe_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1233i_LNP", std::cref(Cqe_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1311i_LNP", std::cref(Cqe_1311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1312i_LNP", std::cref(Cqe_1312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1313i_LNP", std::cref(Cqe_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1321i_LNP", std::cref(Cqe_1321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1322i_LNP", std::cref(Cqe_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1323i_LNP", std::cref(Cqe_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1331i_LNP", std::cref(Cqe_1331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1332i_LNP", std::cref(Cqe_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_1333i_LNP", std::cref(Cqe_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2212i_LNP", std::cref(Cqe_2212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2213i_LNP", std::cref(Cqe_2213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2223i_LNP", std::cref(Cqe_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2312i_LNP", std::cref(Cqe_2312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2313i_LNP", std::cref(Cqe_2313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2321i_LNP", std::cref(Cqe_2321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2322i_LNP", std::cref(Cqe_2322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2323i_LNP", std::cref(Cqe_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2331i_LNP", std::cref(Cqe_2331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2332i_LNP", std::cref(Cqe_2332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2333i_LNP", std::cref(Cqe_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_2311i_LNP", std::cref(Cqe_2311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_3312i_LNP", std::cref(Cqe_3312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_3313i_LNP", std::cref(Cqe_3313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cqe_3323i_LNP", std::cref(Cqe_3323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1111r_LNP", std::cref(Cledq_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1112r_LNP", std::cref(Cledq_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1113r_LNP", std::cref(Cledq_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1121r_LNP", std::cref(Cledq_1121r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1122r_LNP", std::cref(Cledq_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1123r_LNP", std::cref(Cledq_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1131r_LNP", std::cref(Cledq_1131r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1132r_LNP", std::cref(Cledq_1132r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1133r_LNP", std::cref(Cledq_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1211r_LNP", std::cref(Cledq_1211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1212r_LNP", std::cref(Cledq_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1213r_LNP", std::cref(Cledq_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1221r_LNP", std::cref(Cledq_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1222r_LNP", std::cref(Cledq_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1223r_LNP", std::cref(Cledq_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1231r_LNP", std::cref(Cledq_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1232r_LNP", std::cref(Cledq_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1233r_LNP", std::cref(Cledq_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1311r_LNP", std::cref(Cledq_1311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1312r_LNP", std::cref(Cledq_1312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1313r_LNP", std::cref(Cledq_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1321r_LNP", std::cref(Cledq_1321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1322r_LNP", std::cref(Cledq_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1323r_LNP", std::cref(Cledq_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1331r_LNP", std::cref(Cledq_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1332r_LNP", std::cref(Cledq_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1333r_LNP", std::cref(Cledq_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2111r_LNP", std::cref(Cledq_2111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2112r_LNP", std::cref(Cledq_2112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2113r_LNP", std::cref(Cledq_2113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2121r_LNP", std::cref(Cledq_2121r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2122r_LNP", std::cref(Cledq_2122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2123r_LNP", std::cref(Cledq_2123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2131r_LNP", std::cref(Cledq_2131r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2132r_LNP", std::cref(Cledq_2132r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2133r_LNP", std::cref(Cledq_2133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2211r_LNP", std::cref(Cledq_2211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2212r_LNP", std::cref(Cledq_2212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2213r_LNP", std::cref(Cledq_2213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2221r_LNP", std::cref(Cledq_2221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2222r_LNP", std::cref(Cledq_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2223r_LNP", std::cref(Cledq_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2231r_LNP", std::cref(Cledq_2231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2232r_LNP", std::cref(Cledq_2232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2233r_LNP", std::cref(Cledq_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2311r_LNP", std::cref(Cledq_2311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2312r_LNP", std::cref(Cledq_2312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2313r_LNP", std::cref(Cledq_2313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2321r_LNP", std::cref(Cledq_2321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2322r_LNP", std::cref(Cledq_2322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2323r_LNP", std::cref(Cledq_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2331r_LNP", std::cref(Cledq_2331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2332r_LNP", std::cref(Cledq_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2333r_LNP", std::cref(Cledq_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3111r_LNP", std::cref(Cledq_3111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3112r_LNP", std::cref(Cledq_3112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3113r_LNP", std::cref(Cledq_3113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3121r_LNP", std::cref(Cledq_3121r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3122r_LNP", std::cref(Cledq_3122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3123r_LNP", std::cref(Cledq_3123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3131r_LNP", std::cref(Cledq_3131r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3132r_LNP", std::cref(Cledq_3132r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3133r_LNP", std::cref(Cledq_3133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3211r_LNP", std::cref(Cledq_3211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3212r_LNP", std::cref(Cledq_3212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3213r_LNP", std::cref(Cledq_3213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3221r_LNP", std::cref(Cledq_3221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3222r_LNP", std::cref(Cledq_3222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3223r_LNP", std::cref(Cledq_3223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3231r_LNP", std::cref(Cledq_3231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3232r_LNP", std::cref(Cledq_3232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3233r_LNP", std::cref(Cledq_3233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3311r_LNP", std::cref(Cledq_3311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3312r_LNP", std::cref(Cledq_3312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3313r_LNP", std::cref(Cledq_3313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3321r_LNP", std::cref(Cledq_3321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3322r_LNP", std::cref(Cledq_3322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3323r_LNP", std::cref(Cledq_3323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3331r_LNP", std::cref(Cledq_3331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3332r_LNP", std::cref(Cledq_3332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3333r_LNP", std::cref(Cledq_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1111i_LNP", std::cref(Cledq_1111i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1112i_LNP", std::cref(Cledq_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1113i_LNP", std::cref(Cledq_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1121i_LNP", std::cref(Cledq_1121i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1122i_LNP", std::cref(Cledq_1122i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1123i_LNP", std::cref(Cledq_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1131i_LNP", std::cref(Cledq_1131i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1132i_LNP", std::cref(Cledq_1132i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1133i_LNP", std::cref(Cledq_1133i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1211i_LNP", std::cref(Cledq_1211i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1212i_LNP", std::cref(Cledq_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1213i_LNP", std::cref(Cledq_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1221i_LNP", std::cref(Cledq_1221i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1222i_LNP", std::cref(Cledq_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1223i_LNP", std::cref(Cledq_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1231i_LNP", std::cref(Cledq_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1232i_LNP", std::cref(Cledq_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1233i_LNP", std::cref(Cledq_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1311i_LNP", std::cref(Cledq_1311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1312i_LNP", std::cref(Cledq_1312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1313i_LNP", std::cref(Cledq_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1321i_LNP", std::cref(Cledq_1321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1322i_LNP", std::cref(Cledq_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1323i_LNP", std::cref(Cledq_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1331i_LNP", std::cref(Cledq_1331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1332i_LNP", std::cref(Cledq_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_1333i_LNP", std::cref(Cledq_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2111i_LNP", std::cref(Cledq_2111i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2112i_LNP", std::cref(Cledq_2112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2113i_LNP", std::cref(Cledq_2113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2121i_LNP", std::cref(Cledq_2121i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2122i_LNP", std::cref(Cledq_2122i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2123i_LNP", std::cref(Cledq_2123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2131i_LNP", std::cref(Cledq_2131i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2132i_LNP", std::cref(Cledq_2132i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2133i_LNP", std::cref(Cledq_2133i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2211i_LNP", std::cref(Cledq_2211i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2212i_LNP", std::cref(Cledq_2212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2213i_LNP", std::cref(Cledq_2213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2221i_LNP", std::cref(Cledq_2221i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2222i_LNP", std::cref(Cledq_2222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2223i_LNP", std::cref(Cledq_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2231i_LNP", std::cref(Cledq_2231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2232i_LNP", std::cref(Cledq_2232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2233i_LNP", std::cref(Cledq_2233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2311i_LNP", std::cref(Cledq_2311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2312i_LNP", std::cref(Cledq_2312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2313i_LNP", std::cref(Cledq_2313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2321i_LNP", std::cref(Cledq_2321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2322i_LNP", std::cref(Cledq_2322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2323i_LNP", std::cref(Cledq_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2331i_LNP", std::cref(Cledq_2331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2332i_LNP", std::cref(Cledq_2332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_2333i_LNP", std::cref(Cledq_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3111i_LNP", std::cref(Cledq_3111i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3112i_LNP", std::cref(Cledq_3112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3113i_LNP", std::cref(Cledq_3113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3121i_LNP", std::cref(Cledq_3121i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3122i_LNP", std::cref(Cledq_3122i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3123i_LNP", std::cref(Cledq_3123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3131i_LNP", std::cref(Cledq_3131i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3132i_LNP", std::cref(Cledq_3132i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3133i_LNP", std::cref(Cledq_3133i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3211i_LNP", std::cref(Cledq_3211i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3212i_LNP", std::cref(Cledq_3212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3213i_LNP", std::cref(Cledq_3213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3221i_LNP", std::cref(Cledq_3221i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3222i_LNP", std::cref(Cledq_3222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3223i_LNP", std::cref(Cledq_3223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3231i_LNP", std::cref(Cledq_3231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3232i_LNP", std::cref(Cledq_3232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3233i_LNP", std::cref(Cledq_3233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3311i_LNP", std::cref(Cledq_3311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3312i_LNP", std::cref(Cledq_3312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3313i_LNP", std::cref(Cledq_3313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3321i_LNP", std::cref(Cledq_3321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3322i_LNP", std::cref(Cledq_3322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3323i_LNP", std::cref(Cledq_3323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3331i_LNP", std::cref(Cledq_3331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3332i_LNP", std::cref(Cledq_3332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cledq_3333i_LNP", std::cref(Cledq_3333i_LNP)));
        // Map for the Four-Quark four-fermion operators: LRLR
        ModelParamMap.insert(std::make_pair("Cquqd1_1111r_LNP", std::cref(Cquqd1_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1112r_LNP", std::cref(Cquqd1_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1113r_LNP", std::cref(Cquqd1_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1121r_LNP", std::cref(Cquqd1_1121r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1122r_LNP", std::cref(Cquqd1_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1123r_LNP", std::cref(Cquqd1_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1131r_LNP", std::cref(Cquqd1_1131r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1132r_LNP", std::cref(Cquqd1_1132r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1133r_LNP", std::cref(Cquqd1_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1211r_LNP", std::cref(Cquqd1_1211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1212r_LNP", std::cref(Cquqd1_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1213r_LNP", std::cref(Cquqd1_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1221r_LNP", std::cref(Cquqd1_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1222r_LNP", std::cref(Cquqd1_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1223r_LNP", std::cref(Cquqd1_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1231r_LNP", std::cref(Cquqd1_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1232r_LNP", std::cref(Cquqd1_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1233r_LNP", std::cref(Cquqd1_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1311r_LNP", std::cref(Cquqd1_1311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1312r_LNP", std::cref(Cquqd1_1312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1313r_LNP", std::cref(Cquqd1_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1321r_LNP", std::cref(Cquqd1_1321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1322r_LNP", std::cref(Cquqd1_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1323r_LNP", std::cref(Cquqd1_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1331r_LNP", std::cref(Cquqd1_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1332r_LNP", std::cref(Cquqd1_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1333r_LNP", std::cref(Cquqd1_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2111r_LNP", std::cref(Cquqd1_2111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2112r_LNP", std::cref(Cquqd1_2112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2113r_LNP", std::cref(Cquqd1_2113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2121r_LNP", std::cref(Cquqd1_2121r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2122r_LNP", std::cref(Cquqd1_2122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2123r_LNP", std::cref(Cquqd1_2123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2131r_LNP", std::cref(Cquqd1_2131r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2132r_LNP", std::cref(Cquqd1_2132r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2133r_LNP", std::cref(Cquqd1_2133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2211r_LNP", std::cref(Cquqd1_2211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2212r_LNP", std::cref(Cquqd1_2212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2213r_LNP", std::cref(Cquqd1_2213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2221r_LNP", std::cref(Cquqd1_2221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2222r_LNP", std::cref(Cquqd1_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2223r_LNP", std::cref(Cquqd1_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2231r_LNP", std::cref(Cquqd1_2231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2232r_LNP", std::cref(Cquqd1_2232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2233r_LNP", std::cref(Cquqd1_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2311r_LNP", std::cref(Cquqd1_2311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2312r_LNP", std::cref(Cquqd1_2312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2313r_LNP", std::cref(Cquqd1_2313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2321r_LNP", std::cref(Cquqd1_2321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2322r_LNP", std::cref(Cquqd1_2322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2323r_LNP", std::cref(Cquqd1_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2331r_LNP", std::cref(Cquqd1_2331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2332r_LNP", std::cref(Cquqd1_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2333r_LNP", std::cref(Cquqd1_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3111r_LNP", std::cref(Cquqd1_3111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3112r_LNP", std::cref(Cquqd1_3112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3113r_LNP", std::cref(Cquqd1_3113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3121r_LNP", std::cref(Cquqd1_3121r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3122r_LNP", std::cref(Cquqd1_3122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3123r_LNP", std::cref(Cquqd1_3123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3131r_LNP", std::cref(Cquqd1_3131r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3132r_LNP", std::cref(Cquqd1_3132r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3133r_LNP", std::cref(Cquqd1_3133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3211r_LNP", std::cref(Cquqd1_3211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3212r_LNP", std::cref(Cquqd1_3212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3213r_LNP", std::cref(Cquqd1_3213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3221r_LNP", std::cref(Cquqd1_3221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3222r_LNP", std::cref(Cquqd1_3222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3223r_LNP", std::cref(Cquqd1_3223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3231r_LNP", std::cref(Cquqd1_3231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3232r_LNP", std::cref(Cquqd1_3232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3233r_LNP", std::cref(Cquqd1_3233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3311r_LNP", std::cref(Cquqd1_3311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3312r_LNP", std::cref(Cquqd1_3312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3313r_LNP", std::cref(Cquqd1_3313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3321r_LNP", std::cref(Cquqd1_3321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3322r_LNP", std::cref(Cquqd1_3322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3323r_LNP", std::cref(Cquqd1_3323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3331r_LNP", std::cref(Cquqd1_3331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3332r_LNP", std::cref(Cquqd1_3332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3333r_LNP", std::cref(Cquqd1_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1111i_LNP", std::cref(Cquqd1_1111i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1112i_LNP", std::cref(Cquqd1_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1113i_LNP", std::cref(Cquqd1_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1121i_LNP", std::cref(Cquqd1_1121i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1122i_LNP", std::cref(Cquqd1_1122i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1123i_LNP", std::cref(Cquqd1_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1131i_LNP", std::cref(Cquqd1_1131i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1132i_LNP", std::cref(Cquqd1_1132i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1133i_LNP", std::cref(Cquqd1_1133i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1211i_LNP", std::cref(Cquqd1_1211i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1212i_LNP", std::cref(Cquqd1_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1213i_LNP", std::cref(Cquqd1_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1221i_LNP", std::cref(Cquqd1_1221i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1222i_LNP", std::cref(Cquqd1_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1223i_LNP", std::cref(Cquqd1_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1231i_LNP", std::cref(Cquqd1_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1232i_LNP", std::cref(Cquqd1_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1233i_LNP", std::cref(Cquqd1_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1311i_LNP", std::cref(Cquqd1_1311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1312i_LNP", std::cref(Cquqd1_1312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1313i_LNP", std::cref(Cquqd1_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1321i_LNP", std::cref(Cquqd1_1321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1322i_LNP", std::cref(Cquqd1_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1323i_LNP", std::cref(Cquqd1_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1331i_LNP", std::cref(Cquqd1_1331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1332i_LNP", std::cref(Cquqd1_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_1333i_LNP", std::cref(Cquqd1_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2111i_LNP", std::cref(Cquqd1_2111i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2112i_LNP", std::cref(Cquqd1_2112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2113i_LNP", std::cref(Cquqd1_2113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2121i_LNP", std::cref(Cquqd1_2121i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2122i_LNP", std::cref(Cquqd1_2122i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2123i_LNP", std::cref(Cquqd1_2123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2131i_LNP", std::cref(Cquqd1_2131i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2132i_LNP", std::cref(Cquqd1_2132i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2133i_LNP", std::cref(Cquqd1_2133i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2211i_LNP", std::cref(Cquqd1_2211i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2212i_LNP", std::cref(Cquqd1_2212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2213i_LNP", std::cref(Cquqd1_2213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2221i_LNP", std::cref(Cquqd1_2221i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2222i_LNP", std::cref(Cquqd1_2222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2223i_LNP", std::cref(Cquqd1_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2231i_LNP", std::cref(Cquqd1_2231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2232i_LNP", std::cref(Cquqd1_2232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2233i_LNP", std::cref(Cquqd1_2233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2311i_LNP", std::cref(Cquqd1_2311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2312i_LNP", std::cref(Cquqd1_2312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2313i_LNP", std::cref(Cquqd1_2313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2321i_LNP", std::cref(Cquqd1_2321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2322i_LNP", std::cref(Cquqd1_2322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2323i_LNP", std::cref(Cquqd1_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2331i_LNP", std::cref(Cquqd1_2331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2332i_LNP", std::cref(Cquqd1_2332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_2333i_LNP", std::cref(Cquqd1_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3111i_LNP", std::cref(Cquqd1_3111i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3112i_LNP", std::cref(Cquqd1_3112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3113i_LNP", std::cref(Cquqd1_3113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3121i_LNP", std::cref(Cquqd1_3121i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3122i_LNP", std::cref(Cquqd1_3122i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3123i_LNP", std::cref(Cquqd1_3123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3131i_LNP", std::cref(Cquqd1_3131i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3132i_LNP", std::cref(Cquqd1_3132i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3133i_LNP", std::cref(Cquqd1_3133i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3211i_LNP", std::cref(Cquqd1_3211i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3212i_LNP", std::cref(Cquqd1_3212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3213i_LNP", std::cref(Cquqd1_3213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3221i_LNP", std::cref(Cquqd1_3221i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3222i_LNP", std::cref(Cquqd1_3222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3223i_LNP", std::cref(Cquqd1_3223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3231i_LNP", std::cref(Cquqd1_3231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3232i_LNP", std::cref(Cquqd1_3232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3233i_LNP", std::cref(Cquqd1_3233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3311i_LNP", std::cref(Cquqd1_3311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3312i_LNP", std::cref(Cquqd1_3312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3313i_LNP", std::cref(Cquqd1_3313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3321i_LNP", std::cref(Cquqd1_3321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3322i_LNP", std::cref(Cquqd1_3322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3323i_LNP", std::cref(Cquqd1_3323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3331i_LNP", std::cref(Cquqd1_3331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3332i_LNP", std::cref(Cquqd1_3332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd1_3333i_LNP", std::cref(Cquqd1_3333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1111r_LNP", std::cref(Cquqd8_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1112r_LNP", std::cref(Cquqd8_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1113r_LNP", std::cref(Cquqd8_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1121r_LNP", std::cref(Cquqd8_1121r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1122r_LNP", std::cref(Cquqd8_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1123r_LNP", std::cref(Cquqd8_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1131r_LNP", std::cref(Cquqd8_1131r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1132r_LNP", std::cref(Cquqd8_1132r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1133r_LNP", std::cref(Cquqd8_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1211r_LNP", std::cref(Cquqd8_1211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1212r_LNP", std::cref(Cquqd8_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1213r_LNP", std::cref(Cquqd8_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1221r_LNP", std::cref(Cquqd8_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1222r_LNP", std::cref(Cquqd8_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1223r_LNP", std::cref(Cquqd8_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1231r_LNP", std::cref(Cquqd8_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1232r_LNP", std::cref(Cquqd8_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1233r_LNP", std::cref(Cquqd8_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1311r_LNP", std::cref(Cquqd8_1311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1312r_LNP", std::cref(Cquqd8_1312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1313r_LNP", std::cref(Cquqd8_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1321r_LNP", std::cref(Cquqd8_1321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1322r_LNP", std::cref(Cquqd8_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1323r_LNP", std::cref(Cquqd8_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1331r_LNP", std::cref(Cquqd8_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1332r_LNP", std::cref(Cquqd8_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1333r_LNP", std::cref(Cquqd8_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2111r_LNP", std::cref(Cquqd8_2111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2112r_LNP", std::cref(Cquqd8_2112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2113r_LNP", std::cref(Cquqd8_2113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2121r_LNP", std::cref(Cquqd8_2121r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2122r_LNP", std::cref(Cquqd8_2122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2123r_LNP", std::cref(Cquqd8_2123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2131r_LNP", std::cref(Cquqd8_2131r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2132r_LNP", std::cref(Cquqd8_2132r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2133r_LNP", std::cref(Cquqd8_2133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2211r_LNP", std::cref(Cquqd8_2211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2212r_LNP", std::cref(Cquqd8_2212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2213r_LNP", std::cref(Cquqd8_2213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2221r_LNP", std::cref(Cquqd8_2221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2222r_LNP", std::cref(Cquqd8_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2223r_LNP", std::cref(Cquqd8_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2231r_LNP", std::cref(Cquqd8_2231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2232r_LNP", std::cref(Cquqd8_2232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2233r_LNP", std::cref(Cquqd8_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2311r_LNP", std::cref(Cquqd8_2311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2312r_LNP", std::cref(Cquqd8_2312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2313r_LNP", std::cref(Cquqd8_2313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2321r_LNP", std::cref(Cquqd8_2321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2322r_LNP", std::cref(Cquqd8_2322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2323r_LNP", std::cref(Cquqd8_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2331r_LNP", std::cref(Cquqd8_2331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2332r_LNP", std::cref(Cquqd8_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2333r_LNP", std::cref(Cquqd8_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3111r_LNP", std::cref(Cquqd8_3111r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3112r_LNP", std::cref(Cquqd8_3112r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3113r_LNP", std::cref(Cquqd8_3113r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3121r_LNP", std::cref(Cquqd8_3121r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3122r_LNP", std::cref(Cquqd8_3122r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3123r_LNP", std::cref(Cquqd8_3123r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3131r_LNP", std::cref(Cquqd8_3131r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3132r_LNP", std::cref(Cquqd8_3132r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3133r_LNP", std::cref(Cquqd8_3133r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3211r_LNP", std::cref(Cquqd8_3211r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3212r_LNP", std::cref(Cquqd8_3212r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3213r_LNP", std::cref(Cquqd8_3213r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3221r_LNP", std::cref(Cquqd8_3221r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3222r_LNP", std::cref(Cquqd8_3222r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3223r_LNP", std::cref(Cquqd8_3223r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3231r_LNP", std::cref(Cquqd8_3231r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3232r_LNP", std::cref(Cquqd8_3232r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3233r_LNP", std::cref(Cquqd8_3233r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3311r_LNP", std::cref(Cquqd8_3311r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3312r_LNP", std::cref(Cquqd8_3312r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3313r_LNP", std::cref(Cquqd8_3313r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3321r_LNP", std::cref(Cquqd8_3321r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3322r_LNP", std::cref(Cquqd8_3322r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3323r_LNP", std::cref(Cquqd8_3323r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3331r_LNP", std::cref(Cquqd8_3331r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3332r_LNP", std::cref(Cquqd8_3332r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3333r_LNP", std::cref(Cquqd8_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1111i_LNP", std::cref(Cquqd8_1111i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1112i_LNP", std::cref(Cquqd8_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1113i_LNP", std::cref(Cquqd8_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1121i_LNP", std::cref(Cquqd8_1121i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1122i_LNP", std::cref(Cquqd8_1122i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1123i_LNP", std::cref(Cquqd8_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1131i_LNP", std::cref(Cquqd8_1131i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1132i_LNP", std::cref(Cquqd8_1132i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1133i_LNP", std::cref(Cquqd8_1133i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1211i_LNP", std::cref(Cquqd8_1211i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1212i_LNP", std::cref(Cquqd8_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1213i_LNP", std::cref(Cquqd8_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1221i_LNP", std::cref(Cquqd8_1221i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1222i_LNP", std::cref(Cquqd8_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1223i_LNP", std::cref(Cquqd8_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1231i_LNP", std::cref(Cquqd8_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1232i_LNP", std::cref(Cquqd8_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1233i_LNP", std::cref(Cquqd8_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1311i_LNP", std::cref(Cquqd8_1311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1312i_LNP", std::cref(Cquqd8_1312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1313i_LNP", std::cref(Cquqd8_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1321i_LNP", std::cref(Cquqd8_1321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1322i_LNP", std::cref(Cquqd8_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1323i_LNP", std::cref(Cquqd8_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1331i_LNP", std::cref(Cquqd8_1331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1332i_LNP", std::cref(Cquqd8_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_1333i_LNP", std::cref(Cquqd8_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2111i_LNP", std::cref(Cquqd8_2111i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2112i_LNP", std::cref(Cquqd8_2112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2113i_LNP", std::cref(Cquqd8_2113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2121i_LNP", std::cref(Cquqd8_2121i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2122i_LNP", std::cref(Cquqd8_2122i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2123i_LNP", std::cref(Cquqd8_2123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2131i_LNP", std::cref(Cquqd8_2131i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2132i_LNP", std::cref(Cquqd8_2132i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2133i_LNP", std::cref(Cquqd8_2133i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2211i_LNP", std::cref(Cquqd8_2211i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2212i_LNP", std::cref(Cquqd8_2212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2213i_LNP", std::cref(Cquqd8_2213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2221i_LNP", std::cref(Cquqd8_2221i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2222i_LNP", std::cref(Cquqd8_2222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2223i_LNP", std::cref(Cquqd8_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2231i_LNP", std::cref(Cquqd8_2231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2232i_LNP", std::cref(Cquqd8_2232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2233i_LNP", std::cref(Cquqd8_2233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2311i_LNP", std::cref(Cquqd8_2311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2312i_LNP", std::cref(Cquqd8_2312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2313i_LNP", std::cref(Cquqd8_2313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2321i_LNP", std::cref(Cquqd8_2321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2322i_LNP", std::cref(Cquqd8_2322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2323i_LNP", std::cref(Cquqd8_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2331i_LNP", std::cref(Cquqd8_2331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2332i_LNP", std::cref(Cquqd8_2332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_2333i_LNP", std::cref(Cquqd8_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3111i_LNP", std::cref(Cquqd8_3111i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3112i_LNP", std::cref(Cquqd8_3112i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3113i_LNP", std::cref(Cquqd8_3113i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3121i_LNP", std::cref(Cquqd8_3121i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3122i_LNP", std::cref(Cquqd8_3122i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3123i_LNP", std::cref(Cquqd8_3123i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3131i_LNP", std::cref(Cquqd8_3131i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3132i_LNP", std::cref(Cquqd8_3132i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3133i_LNP", std::cref(Cquqd8_3133i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3211i_LNP", std::cref(Cquqd8_3211i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3212i_LNP", std::cref(Cquqd8_3212i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3213i_LNP", std::cref(Cquqd8_3213i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3221i_LNP", std::cref(Cquqd8_3221i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3222i_LNP", std::cref(Cquqd8_3222i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3223i_LNP", std::cref(Cquqd8_3223i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3231i_LNP", std::cref(Cquqd8_3231i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3232i_LNP", std::cref(Cquqd8_3232i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3233i_LNP", std::cref(Cquqd8_3233i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3311i_LNP", std::cref(Cquqd8_3311i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3312i_LNP", std::cref(Cquqd8_3312i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3313i_LNP", std::cref(Cquqd8_3313i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3321i_LNP", std::cref(Cquqd8_3321i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3322i_LNP", std::cref(Cquqd8_3322i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3323i_LNP", std::cref(Cquqd8_3323i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3331i_LNP", std::cref(Cquqd8_3331i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3332i_LNP", std::cref(Cquqd8_3332i_LNP)));
        ModelParamMap.insert(std::make_pair("Cquqd8_3333i_LNP", std::cref(Cquqd8_3333i_LNP)));
        // Map for the Lepton-Quark four-fermion operators: LRLR 
        ModelParamMap.insert(std::make_pair("Clequ1_1111r_LNP", std::cref(Clequ1_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1112r_LNP", std::cref(Clequ1_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1113r_LNP", std::cref(Clequ1_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1121r_LNP", std::cref(Clequ1_1121r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1122r_LNP", std::cref(Clequ1_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1123r_LNP", std::cref(Clequ1_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1131r_LNP", std::cref(Clequ1_1131r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1132r_LNP", std::cref(Clequ1_1132r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1133r_LNP", std::cref(Clequ1_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1211r_LNP", std::cref(Clequ1_1211r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1212r_LNP", std::cref(Clequ1_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1213r_LNP", std::cref(Clequ1_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1221r_LNP", std::cref(Clequ1_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1222r_LNP", std::cref(Clequ1_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1223r_LNP", std::cref(Clequ1_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1231r_LNP", std::cref(Clequ1_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1232r_LNP", std::cref(Clequ1_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1233r_LNP", std::cref(Clequ1_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1311r_LNP", std::cref(Clequ1_1311r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1312r_LNP", std::cref(Clequ1_1312r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1313r_LNP", std::cref(Clequ1_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1321r_LNP", std::cref(Clequ1_1321r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1322r_LNP", std::cref(Clequ1_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1323r_LNP", std::cref(Clequ1_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1331r_LNP", std::cref(Clequ1_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1332r_LNP", std::cref(Clequ1_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1333r_LNP", std::cref(Clequ1_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2111r_LNP", std::cref(Clequ1_2111r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2112r_LNP", std::cref(Clequ1_2112r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2113r_LNP", std::cref(Clequ1_2113r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2121r_LNP", std::cref(Clequ1_2121r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2122r_LNP", std::cref(Clequ1_2122r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2123r_LNP", std::cref(Clequ1_2123r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2131r_LNP", std::cref(Clequ1_2131r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2132r_LNP", std::cref(Clequ1_2132r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2133r_LNP", std::cref(Clequ1_2133r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2211r_LNP", std::cref(Clequ1_2211r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2212r_LNP", std::cref(Clequ1_2212r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2213r_LNP", std::cref(Clequ1_2213r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2221r_LNP", std::cref(Clequ1_2221r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2222r_LNP", std::cref(Clequ1_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2223r_LNP", std::cref(Clequ1_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2231r_LNP", std::cref(Clequ1_2231r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2232r_LNP", std::cref(Clequ1_2232r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2233r_LNP", std::cref(Clequ1_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2311r_LNP", std::cref(Clequ1_2311r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2312r_LNP", std::cref(Clequ1_2312r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2313r_LNP", std::cref(Clequ1_2313r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2321r_LNP", std::cref(Clequ1_2321r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2322r_LNP", std::cref(Clequ1_2322r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2323r_LNP", std::cref(Clequ1_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2331r_LNP", std::cref(Clequ1_2331r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2332r_LNP", std::cref(Clequ1_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2333r_LNP", std::cref(Clequ1_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3111r_LNP", std::cref(Clequ1_3111r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3112r_LNP", std::cref(Clequ1_3112r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3113r_LNP", std::cref(Clequ1_3113r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3121r_LNP", std::cref(Clequ1_3121r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3122r_LNP", std::cref(Clequ1_3122r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3123r_LNP", std::cref(Clequ1_3123r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3131r_LNP", std::cref(Clequ1_3131r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3132r_LNP", std::cref(Clequ1_3132r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3133r_LNP", std::cref(Clequ1_3133r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3211r_LNP", std::cref(Clequ1_3211r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3212r_LNP", std::cref(Clequ1_3212r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3213r_LNP", std::cref(Clequ1_3213r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3221r_LNP", std::cref(Clequ1_3221r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3222r_LNP", std::cref(Clequ1_3222r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3223r_LNP", std::cref(Clequ1_3223r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3231r_LNP", std::cref(Clequ1_3231r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3232r_LNP", std::cref(Clequ1_3232r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3233r_LNP", std::cref(Clequ1_3233r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3311r_LNP", std::cref(Clequ1_3311r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3312r_LNP", std::cref(Clequ1_3312r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3313r_LNP", std::cref(Clequ1_3313r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3321r_LNP", std::cref(Clequ1_3321r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3322r_LNP", std::cref(Clequ1_3322r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3323r_LNP", std::cref(Clequ1_3323r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3331r_LNP", std::cref(Clequ1_3331r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3332r_LNP", std::cref(Clequ1_3332r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3333r_LNP", std::cref(Clequ1_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1111i_LNP", std::cref(Clequ1_1111i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1112i_LNP", std::cref(Clequ1_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1113i_LNP", std::cref(Clequ1_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1121i_LNP", std::cref(Clequ1_1121i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1122i_LNP", std::cref(Clequ1_1122i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1123i_LNP", std::cref(Clequ1_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1131i_LNP", std::cref(Clequ1_1131i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1132i_LNP", std::cref(Clequ1_1132i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1133i_LNP", std::cref(Clequ1_1133i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1211i_LNP", std::cref(Clequ1_1211i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1212i_LNP", std::cref(Clequ1_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1213i_LNP", std::cref(Clequ1_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1221i_LNP", std::cref(Clequ1_1221i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1222i_LNP", std::cref(Clequ1_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1223i_LNP", std::cref(Clequ1_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1231i_LNP", std::cref(Clequ1_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1232i_LNP", std::cref(Clequ1_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1233i_LNP", std::cref(Clequ1_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1311i_LNP", std::cref(Clequ1_1311i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1312i_LNP", std::cref(Clequ1_1312i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1313i_LNP", std::cref(Clequ1_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1321i_LNP", std::cref(Clequ1_1321i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1322i_LNP", std::cref(Clequ1_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1323i_LNP", std::cref(Clequ1_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1331i_LNP", std::cref(Clequ1_1331i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1332i_LNP", std::cref(Clequ1_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_1333i_LNP", std::cref(Clequ1_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2111i_LNP", std::cref(Clequ1_2111i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2112i_LNP", std::cref(Clequ1_2112i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2113i_LNP", std::cref(Clequ1_2113i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2121i_LNP", std::cref(Clequ1_2121i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2122i_LNP", std::cref(Clequ1_2122i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2123i_LNP", std::cref(Clequ1_2123i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2131i_LNP", std::cref(Clequ1_2131i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2132i_LNP", std::cref(Clequ1_2132i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2133i_LNP", std::cref(Clequ1_2133i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2211i_LNP", std::cref(Clequ1_2211i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2212i_LNP", std::cref(Clequ1_2212i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2213i_LNP", std::cref(Clequ1_2213i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2221i_LNP", std::cref(Clequ1_2221i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2222i_LNP", std::cref(Clequ1_2222i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2223i_LNP", std::cref(Clequ1_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2231i_LNP", std::cref(Clequ1_2231i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2232i_LNP", std::cref(Clequ1_2232i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2233i_LNP", std::cref(Clequ1_2233i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2311i_LNP", std::cref(Clequ1_2311i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2312i_LNP", std::cref(Clequ1_2312i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2313i_LNP", std::cref(Clequ1_2313i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2321i_LNP", std::cref(Clequ1_2321i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2322i_LNP", std::cref(Clequ1_2322i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2323i_LNP", std::cref(Clequ1_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2331i_LNP", std::cref(Clequ1_2331i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2332i_LNP", std::cref(Clequ1_2332i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_2333i_LNP", std::cref(Clequ1_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3111i_LNP", std::cref(Clequ1_3111i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3112i_LNP", std::cref(Clequ1_3112i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3113i_LNP", std::cref(Clequ1_3113i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3121i_LNP", std::cref(Clequ1_3121i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3122i_LNP", std::cref(Clequ1_3122i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3123i_LNP", std::cref(Clequ1_3123i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3131i_LNP", std::cref(Clequ1_3131i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3132i_LNP", std::cref(Clequ1_3132i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3133i_LNP", std::cref(Clequ1_3133i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3211i_LNP", std::cref(Clequ1_3211i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3212i_LNP", std::cref(Clequ1_3212i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3213i_LNP", std::cref(Clequ1_3213i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3221i_LNP", std::cref(Clequ1_3221i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3222i_LNP", std::cref(Clequ1_3222i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3223i_LNP", std::cref(Clequ1_3223i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3231i_LNP", std::cref(Clequ1_3231i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3232i_LNP", std::cref(Clequ1_3232i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3233i_LNP", std::cref(Clequ1_3233i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3311i_LNP", std::cref(Clequ1_3311i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3312i_LNP", std::cref(Clequ1_3312i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3313i_LNP", std::cref(Clequ1_3313i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3321i_LNP", std::cref(Clequ1_3321i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3322i_LNP", std::cref(Clequ1_3322i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3323i_LNP", std::cref(Clequ1_3323i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3331i_LNP", std::cref(Clequ1_3331i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3332i_LNP", std::cref(Clequ1_3332i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ1_3333i_LNP", std::cref(Clequ1_3333i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1111r_LNP", std::cref(Clequ3_1111r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1112r_LNP", std::cref(Clequ3_1112r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1113r_LNP", std::cref(Clequ3_1113r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1121r_LNP", std::cref(Clequ3_1121r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1122r_LNP", std::cref(Clequ3_1122r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1123r_LNP", std::cref(Clequ3_1123r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1131r_LNP", std::cref(Clequ3_1131r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1132r_LNP", std::cref(Clequ3_1132r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1133r_LNP", std::cref(Clequ3_1133r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1211r_LNP", std::cref(Clequ3_1211r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1212r_LNP", std::cref(Clequ3_1212r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1213r_LNP", std::cref(Clequ3_1213r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1221r_LNP", std::cref(Clequ3_1221r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1222r_LNP", std::cref(Clequ3_1222r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1223r_LNP", std::cref(Clequ3_1223r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1231r_LNP", std::cref(Clequ3_1231r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1232r_LNP", std::cref(Clequ3_1232r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1233r_LNP", std::cref(Clequ3_1233r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1311r_LNP", std::cref(Clequ3_1311r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1312r_LNP", std::cref(Clequ3_1312r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1313r_LNP", std::cref(Clequ3_1313r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1321r_LNP", std::cref(Clequ3_1321r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1322r_LNP", std::cref(Clequ3_1322r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1323r_LNP", std::cref(Clequ3_1323r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1331r_LNP", std::cref(Clequ3_1331r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1332r_LNP", std::cref(Clequ3_1332r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1333r_LNP", std::cref(Clequ3_1333r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2111r_LNP", std::cref(Clequ3_2111r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2112r_LNP", std::cref(Clequ3_2112r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2113r_LNP", std::cref(Clequ3_2113r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2121r_LNP", std::cref(Clequ3_2121r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2122r_LNP", std::cref(Clequ3_2122r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2123r_LNP", std::cref(Clequ3_2123r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2131r_LNP", std::cref(Clequ3_2131r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2132r_LNP", std::cref(Clequ3_2132r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2133r_LNP", std::cref(Clequ3_2133r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2211r_LNP", std::cref(Clequ3_2211r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2212r_LNP", std::cref(Clequ3_2212r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2213r_LNP", std::cref(Clequ3_2213r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2221r_LNP", std::cref(Clequ3_2221r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2222r_LNP", std::cref(Clequ3_2222r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2223r_LNP", std::cref(Clequ3_2223r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2231r_LNP", std::cref(Clequ3_2231r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2232r_LNP", std::cref(Clequ3_2232r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2233r_LNP", std::cref(Clequ3_2233r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2311r_LNP", std::cref(Clequ3_2311r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2312r_LNP", std::cref(Clequ3_2312r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2313r_LNP", std::cref(Clequ3_2313r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2321r_LNP", std::cref(Clequ3_2321r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2322r_LNP", std::cref(Clequ3_2322r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2323r_LNP", std::cref(Clequ3_2323r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2331r_LNP", std::cref(Clequ3_2331r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2332r_LNP", std::cref(Clequ3_2332r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2333r_LNP", std::cref(Clequ3_2333r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3111r_LNP", std::cref(Clequ3_3111r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3112r_LNP", std::cref(Clequ3_3112r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3113r_LNP", std::cref(Clequ3_3113r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3121r_LNP", std::cref(Clequ3_3121r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3122r_LNP", std::cref(Clequ3_3122r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3123r_LNP", std::cref(Clequ3_3123r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3131r_LNP", std::cref(Clequ3_3131r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3132r_LNP", std::cref(Clequ3_3132r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3133r_LNP", std::cref(Clequ3_3133r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3211r_LNP", std::cref(Clequ3_3211r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3212r_LNP", std::cref(Clequ3_3212r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3213r_LNP", std::cref(Clequ3_3213r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3221r_LNP", std::cref(Clequ3_3221r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3222r_LNP", std::cref(Clequ3_3222r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3223r_LNP", std::cref(Clequ3_3223r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3231r_LNP", std::cref(Clequ3_3231r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3232r_LNP", std::cref(Clequ3_3232r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3233r_LNP", std::cref(Clequ3_3233r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3311r_LNP", std::cref(Clequ3_3311r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3312r_LNP", std::cref(Clequ3_3312r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3313r_LNP", std::cref(Clequ3_3313r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3321r_LNP", std::cref(Clequ3_3321r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3322r_LNP", std::cref(Clequ3_3322r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3323r_LNP", std::cref(Clequ3_3323r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3331r_LNP", std::cref(Clequ3_3331r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3332r_LNP", std::cref(Clequ3_3332r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3333r_LNP", std::cref(Clequ3_3333r_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1111i_LNP", std::cref(Clequ3_1111i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1112i_LNP", std::cref(Clequ3_1112i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1113i_LNP", std::cref(Clequ3_1113i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1121i_LNP", std::cref(Clequ3_1121i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1122i_LNP", std::cref(Clequ3_1122i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1123i_LNP", std::cref(Clequ3_1123i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1131i_LNP", std::cref(Clequ3_1131i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1132i_LNP", std::cref(Clequ3_1132i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1133i_LNP", std::cref(Clequ3_1133i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1211i_LNP", std::cref(Clequ3_1211i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1212i_LNP", std::cref(Clequ3_1212i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1213i_LNP", std::cref(Clequ3_1213i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1221i_LNP", std::cref(Clequ3_1221i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1222i_LNP", std::cref(Clequ3_1222i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1223i_LNP", std::cref(Clequ3_1223i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1231i_LNP", std::cref(Clequ3_1231i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1232i_LNP", std::cref(Clequ3_1232i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1233i_LNP", std::cref(Clequ3_1233i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1311i_LNP", std::cref(Clequ3_1311i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1312i_LNP", std::cref(Clequ3_1312i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1313i_LNP", std::cref(Clequ3_1313i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1321i_LNP", std::cref(Clequ3_1321i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1322i_LNP", std::cref(Clequ3_1322i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1323i_LNP", std::cref(Clequ3_1323i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1331i_LNP", std::cref(Clequ3_1331i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1332i_LNP", std::cref(Clequ3_1332i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_1333i_LNP", std::cref(Clequ3_1333i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2111i_LNP", std::cref(Clequ3_2111i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2112i_LNP", std::cref(Clequ3_2112i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2113i_LNP", std::cref(Clequ3_2113i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2121i_LNP", std::cref(Clequ3_2121i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2122i_LNP", std::cref(Clequ3_2122i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2123i_LNP", std::cref(Clequ3_2123i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2131i_LNP", std::cref(Clequ3_2131i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2132i_LNP", std::cref(Clequ3_2132i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2133i_LNP", std::cref(Clequ3_2133i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2211i_LNP", std::cref(Clequ3_2211i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2212i_LNP", std::cref(Clequ3_2212i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2213i_LNP", std::cref(Clequ3_2213i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2221i_LNP", std::cref(Clequ3_2221i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2222i_LNP", std::cref(Clequ3_2222i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2223i_LNP", std::cref(Clequ3_2223i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2231i_LNP", std::cref(Clequ3_2231i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2232i_LNP", std::cref(Clequ3_2232i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2233i_LNP", std::cref(Clequ3_2233i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2311i_LNP", std::cref(Clequ3_2311i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2312i_LNP", std::cref(Clequ3_2312i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2313i_LNP", std::cref(Clequ3_2313i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2321i_LNP", std::cref(Clequ3_2321i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2322i_LNP", std::cref(Clequ3_2322i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2323i_LNP", std::cref(Clequ3_2323i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2331i_LNP", std::cref(Clequ3_2331i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2332i_LNP", std::cref(Clequ3_2332i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_2333i_LNP", std::cref(Clequ3_2333i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3111i_LNP", std::cref(Clequ3_3111i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3112i_LNP", std::cref(Clequ3_3112i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3113i_LNP", std::cref(Clequ3_3113i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3121i_LNP", std::cref(Clequ3_3121i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3122i_LNP", std::cref(Clequ3_3122i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3123i_LNP", std::cref(Clequ3_3123i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3131i_LNP", std::cref(Clequ3_3131i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3132i_LNP", std::cref(Clequ3_3132i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3133i_LNP", std::cref(Clequ3_3133i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3211i_LNP", std::cref(Clequ3_3211i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3212i_LNP", std::cref(Clequ3_3212i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3213i_LNP", std::cref(Clequ3_3213i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3221i_LNP", std::cref(Clequ3_3221i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3222i_LNP", std::cref(Clequ3_3222i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3223i_LNP", std::cref(Clequ3_3223i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3231i_LNP", std::cref(Clequ3_3231i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3232i_LNP", std::cref(Clequ3_3232i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3233i_LNP", std::cref(Clequ3_3233i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3311i_LNP", std::cref(Clequ3_3311i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3312i_LNP", std::cref(Clequ3_3312i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3313i_LNP", std::cref(Clequ3_3313i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3321i_LNP", std::cref(Clequ3_3321i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3322i_LNP", std::cref(Clequ3_3322i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3323i_LNP", std::cref(Clequ3_3323i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3331i_LNP", std::cref(Clequ3_3331i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3332i_LNP", std::cref(Clequ3_3332i_LNP)));
        ModelParamMap.insert(std::make_pair("Clequ3_3333i_LNP", std::cref(Clequ3_3333i_LNP)));

    }

    ModelParamMap.insert(std::make_pair("Lambda_NP", std::cref(Lambda_NP)));
    ModelParamMap.insert(std::make_pair("BrHinv", std::cref(BrHinv)));
    ModelParamMap.insert(std::make_pair("BrHexo", std::cref(BrHexo)));
    ModelParamMap.insert(std::make_pair("eggFint", std::cref(eggFint)));
    ModelParamMap.insert(std::make_pair("eggFpar", std::cref(eggFpar)));
    ModelParamMap.insert(std::make_pair("ettHint", std::cref(ettHint)));
    ModelParamMap.insert(std::make_pair("ettHpar", std::cref(ettHpar)));
    ModelParamMap.insert(std::make_pair("eVBFint", std::cref(eVBFint)));
    ModelParamMap.insert(std::make_pair("eVBFpar", std::cref(eVBFpar)));
    ModelParamMap.insert(std::make_pair("eWHint", std::cref(eWHint)));
    ModelParamMap.insert(std::make_pair("eWHpar", std::cref(eWHpar)));
    ModelParamMap.insert(std::make_pair("eZHint", std::cref(eZHint)));
    ModelParamMap.insert(std::make_pair("eZHpar", std::cref(eZHpar)));
    ModelParamMap.insert(std::make_pair("eeeWBFint", std::cref(eeeWBFint)));
    ModelParamMap.insert(std::make_pair("eeeWBFpar", std::cref(eeeWBFpar)));
    ModelParamMap.insert(std::make_pair("eeeZHint", std::cref(eeeZHint)));
    ModelParamMap.insert(std::make_pair("eeeZHpar", std::cref(eeeZHpar)));
    ModelParamMap.insert(std::make_pair("eeettHint", std::cref(eeettHint)));
    ModelParamMap.insert(std::make_pair("eeettHpar", std::cref(eeettHpar)));
    ModelParamMap.insert(std::make_pair("eepWBFint", std::cref(eepWBFint)));
    ModelParamMap.insert(std::make_pair("eepWBFpar", std::cref(eepWBFpar)));
    ModelParamMap.insert(std::make_pair("eepZBFint", std::cref(eepZBFint)));
    ModelParamMap.insert(std::make_pair("eepZBFpar", std::cref(eepZBFpar)));
    ModelParamMap.insert(std::make_pair("eHggint", std::cref(eHggint)));
    ModelParamMap.insert(std::make_pair("eHggpar", std::cref(eHggpar)));
    ModelParamMap.insert(std::make_pair("eHWWint", std::cref(eHWWint)));
    ModelParamMap.insert(std::make_pair("eHWWpar", std::cref(eHWWpar)));
    ModelParamMap.insert(std::make_pair("eHZZint", std::cref(eHZZint)));
    ModelParamMap.insert(std::make_pair("eHZZpar", std::cref(eHZZpar)));
    ModelParamMap.insert(std::make_pair("eHZgaint", std::cref(eHZgaint)));
    ModelParamMap.insert(std::make_pair("eHZgapar", std::cref(eHZgapar)));
    ModelParamMap.insert(std::make_pair("eHgagaint", std::cref(eHgagaint)));
    ModelParamMap.insert(std::make_pair("eHgagapar", std::cref(eHgagapar)));
    ModelParamMap.insert(std::make_pair("eHmumuint", std::cref(eHmumuint)));
    ModelParamMap.insert(std::make_pair("eHmumupar", std::cref(eHmumupar)));
    ModelParamMap.insert(std::make_pair("eHtautauint", std::cref(eHtautauint)));
    ModelParamMap.insert(std::make_pair("eHtautaupar", std::cref(eHtautaupar)));
    ModelParamMap.insert(std::make_pair("eHccint", std::cref(eHccint)));
    ModelParamMap.insert(std::make_pair("eHccpar", std::cref(eHccpar)));
    ModelParamMap.insert(std::make_pair("eHbbint", std::cref(eHbbint)));
    ModelParamMap.insert(std::make_pair("eHbbpar", std::cref(eHbbpar)));
    ModelParamMap.insert(std::make_pair("eeeWWint", std::cref(eeeWWint)));
    ModelParamMap.insert(std::make_pair("edeeWWdcint", std::cref(edeeWWdcint)));
    ModelParamMap.insert(std::make_pair("eggFHgaga", std::cref(eggFHgaga)));
    ModelParamMap.insert(std::make_pair("eggFHZga", std::cref(eggFHZga)));
    ModelParamMap.insert(std::make_pair("eggFHZZ", std::cref(eggFHZZ)));
    ModelParamMap.insert(std::make_pair("eggFHWW", std::cref(eggFHWW)));
    ModelParamMap.insert(std::make_pair("eggFHtautau", std::cref(eggFHtautau)));
    ModelParamMap.insert(std::make_pair("eggFHbb", std::cref(eggFHbb)));
    ModelParamMap.insert(std::make_pair("eggFHmumu", std::cref(eggFHmumu)));
    ModelParamMap.insert(std::make_pair("eVBFHgaga", std::cref(eVBFHgaga)));
    ModelParamMap.insert(std::make_pair("eVBFHZga", std::cref(eVBFHZga)));
    ModelParamMap.insert(std::make_pair("eVBFHZZ", std::cref(eVBFHZZ)));
    ModelParamMap.insert(std::make_pair("eVBFHWW", std::cref(eVBFHWW)));
    ModelParamMap.insert(std::make_pair("eVBFHtautau", std::cref(eVBFHtautau)));
    ModelParamMap.insert(std::make_pair("eVBFHbb", std::cref(eVBFHbb)));
    ModelParamMap.insert(std::make_pair("eVBFHmumu", std::cref(eVBFHmumu)));
    ModelParamMap.insert(std::make_pair("eWHgaga", std::cref(eWHgaga)));
    ModelParamMap.insert(std::make_pair("eWHZga", std::cref(eWHZga)));
    ModelParamMap.insert(std::make_pair("eWHZZ", std::cref(eWHZZ)));
    ModelParamMap.insert(std::make_pair("eWHWW", std::cref(eWHWW)));
    ModelParamMap.insert(std::make_pair("eWHtautau", std::cref(eWHtautau)));
    ModelParamMap.insert(std::make_pair("eWHbb", std::cref(eWHbb)));
    ModelParamMap.insert(std::make_pair("eWHmumu", std::cref(eWHmumu)));
    ModelParamMap.insert(std::make_pair("eZHgaga", std::cref(eZHgaga)));
    ModelParamMap.insert(std::make_pair("eZHZga", std::cref(eZHZga)));
    ModelParamMap.insert(std::make_pair("eZHZZ", std::cref(eZHZZ)));
    ModelParamMap.insert(std::make_pair("eZHWW", std::cref(eZHWW)));
    ModelParamMap.insert(std::make_pair("eZHtautau", std::cref(eZHtautau)));
    ModelParamMap.insert(std::make_pair("eZHbb", std::cref(eZHbb)));
    ModelParamMap.insert(std::make_pair("eZHmumu", std::cref(eZHmumu)));
    ModelParamMap.insert(std::make_pair("ettHgaga", std::cref(ettHgaga)));
    ModelParamMap.insert(std::make_pair("ettHZga", std::cref(ettHZga)));
    ModelParamMap.insert(std::make_pair("ettHZZ", std::cref(ettHZZ)));
    ModelParamMap.insert(std::make_pair("ettHWW", std::cref(ettHWW)));
    ModelParamMap.insert(std::make_pair("ettHtautau", std::cref(ettHtautau)));
    ModelParamMap.insert(std::make_pair("ettHbb", std::cref(ettHbb)));
    ModelParamMap.insert(std::make_pair("ettHmumu", std::cref(ettHmumu)));
    ModelParamMap.insert(std::make_pair("eVBFHinv", std::cref(eVBFHinv)));
    ModelParamMap.insert(std::make_pair("eVHinv", std::cref(eVHinv)));

    if (FlagMWinput) {
        //  MW scheme
        cAsch = 0.;
        cWsch = 1.;
    } else {
        //  ALpha scheme
        cAsch = 1.;
        cWsch = 0.;
    }

    if (!FlagLoopHd6) {
        cLHd6 = 0.0;
    } else {
        cLHd6 = 1.0;
    }
    
    if (!FlagHiggsSM) {
        cHSM = 0.0;
    } else {
        cHSM = 1.0;
    }
    
    if (FlagLoopH3d6Quad || FlagQuadraticTerms) {
        cLH3d62 = 1.0;
    } else {
        cLH3d62 = 0.0;
    }
    
    if (!FlagfiniteNLO) {
        cNLOd6 = 0.0;
    } else {
        cNLOd6 = 1.0;
    }

}

//If we do not set the SMEFTEvol in the SetParameter this is not needed

bool NPSMEFTd6General::Init(const std::map<std::string, double>& DPars) {
    std::map<std::string, double> myDPars(DPars);

    Lambda_NP = myDPars.at("Lambda_NP"); //done here since it's needed for the numerical value of Wilson Coefficients in SetParameters()
    LambdaNP2 = Lambda_NP * Lambda_NP;
    LambdaNPm2 = 1. / LambdaNP2;

    return (StandardModel::Init(myDPars));
}

bool NPSMEFTd6General::PreUpdate() {
    SMEFTEvolEW.Reset();    
    SMEFTEvolMH.Reset();
    SMEFTEvol240.Reset();
    SMEFTEvol365.Reset();
    SMEFTEvol550.Reset();
    SMEFTEvol1000.Reset();
    SMEFTEvol1500.Reset();
    SMEFTEvol3000.Reset();
    SMEFTEvol5000.Reset();
    SMEFTEvolUV.Reset();

    isSMInitialConditionComputed = false;

    if (!NPbase::PreUpdate()) return (false);

    return (true);
}

void NPSMEFTd6General::ChangeToEvolutorsBasisPureSM() {
    //In this function we switch from the SM parameters used in the SM class to those needed for the evolutor using the SM expressions
    //(Parameters at the EW scale, which we take to be muw ~ Mz)

    //Here we have included the expressions for the alpha and Mw schemes, enabling or the other depending on the corresponding flag
    g1_LEW = cAsch * ( sqrt(2 * sqrt(2) * GF * (Mz * Mz - sqrt(Mz * Mz * (Mz * Mz - (2 * sqrt(2) * M_PI * trueSM.alphaMz()) / GF)))) ) 
            + cWsch * sqrt( 4. * sqrt(2.) * GF * ( Mz * Mz - Mw_inp * Mw_inp ) );
    
    g2_LEW = cAsch * ( sqrt(2 * sqrt(2) * GF * (Mz * Mz + sqrt(Mz * Mz * (Mz * Mz - (2 * sqrt(2) * M_PI * trueSM.alphaMz()) / GF)))) )
            + cWsch * sqrt( 4. * sqrt(2.) * GF * Mw_inp * Mw_inp );
    
    g3_LEW = sqrt(4 * M_PI * AlsMz);
    
    mH2_LEW = mHl*mHl;
    lambdaH_LEW = (GF * mHl * mHl) / sqrt(2);

    me_LEW = leptons[ELECTRON].getMass();
    mmu_LEW = leptons[MU].getMass();
    mtau_LEW = leptons[TAU].getMass();

    mu_LEW = Mrun(muw, quarks[UP].getMass_scale(), quarks[UP].getMass(), QCD::UP);
    mc_LEW = Mrun(muw, quarks[CHARM].getMass(), QCD::CHARM);
    mt_LEW = Mrun(muw, quarks[TOP].getMass(), QCD::TOP);

    md_LEW = Mrun(muw, quarks[DOWN].getMass_scale(), quarks[DOWN].getMass(), QCD::DOWN);
    ms_LEW = Mrun(muw, quarks[STRANGE].getMass_scale(), quarks[STRANGE].getMass(), QCD::STRANGE);
    mb_LEW = Mrun(muw, quarks[BOTTOM].getMass(), QCD::BOTTOM);

    CKM aux_CKM;
    aux_CKM.computeCKMwithWolfenstein(lambda, A, rhob, etab);
    s12CKM_LEW = aux_CKM.gets12();
    s13CKM_LEW = aux_CKM.gets13();
    s23CKM_LEW = aux_CKM.gets23();
    dCKM_LEW = aux_CKM.getdelta();

}

void NPSMEFTd6General::ChangeToEvolutorsBasisSMEFTtoSM() {
    //In this function we switch from the SM parameters used in the SM class to those needed for the evolutor using as first approximation
    // the SMEFT expressions with the coefficients evaluated at the UV scale. This gives a better approximation of the model parameters
    // in the SM model as the physical ones (e.g. mtpole as the pole mass.)
    //(Parameters at the EW scale)
    double d_A,d_h,d_MZ,d_MW,d_GF,d_v;
       
    // Renormalization of fields
    d_A = -2.0 * sW_tree * cW_tree * CHWB_LNP * v2/ LambdaNP2;    
    d_h = (-CHD_LNP / 4.0 + CHbox_LNP) * v2/ LambdaNP2;

    //  NP corrections to Z and W mass Lagrangian parameters
    d_MZ = (sW_tree * cW_tree * CHWB_LNP + 0.25 * CHD_LNP + (3.0 / 8.0) * CH_LNP / lambdaH_tree) * v2/ LambdaNP2;
    d_MW = (3.0 / 8.0) * (CH_LNP / lambdaH_tree) * v2/ LambdaNP2;

    //  NP correction to Fermi constant, as extracted from muon decay
    d_GF = (CHl3_11r_LNP + CHl3_22r_LNP - Cll_1221r_LNP) * v2/ LambdaNP2;

    //  NP correction to the vev, as extracted from GF
    d_v = 0.5 * d_GF;
    
    //Here we have included the expressions for the alpha and Mw schemes, enabling or the other depending on the corresponding flag
    g1_LEW = cAsch * ( sqrt(2 * sqrt(2) * GF * (Mz * Mz - sqrt(Mz * Mz * (Mz * Mz - (2 * sqrt(2) * M_PI * trueSM.alphaMz()) / GF)))) * ( 1.0 - 0.5 * d_A - 0.5 * sW2_tree*(d_GF-2.0*(d_MW-d_MZ) - d_A)/(sW2_tree - cW2_tree) ) ) 
            + cWsch * sqrt( 4. * sqrt(2.) * GF * ( Mz * Mz - Mw_inp * Mw_inp )) * ( 1.0 -0.5 * d_GF +(d_MW-d_MZ)/sW2_tree);
    
    g2_LEW = cAsch * ( sqrt(2 * sqrt(2) * GF * (Mz * Mz + sqrt(Mz * Mz * (Mz * Mz - (2 * sqrt(2) * M_PI * trueSM.alphaMz()) / GF)))) * ( 1.0 - 0.5 * d_A + 0.5 * cW2_tree*(d_GF-2.0*(d_MW-d_MZ) - d_A)/(sW2_tree - cW2_tree) ) )
            + cWsch * sqrt( 4. * sqrt(2.) * GF * Mw_inp * Mw_inp ) * ( 1.0 -0.5 * d_GF);
    
    g3_LEW = sqrt(4 * M_PI * AlsMz);
    
    //Rewrite lambdaH_LEW expression so that the correction that appears when computing the vev is exactly like v*(1+d_v)
    mH2_LEW = mHl*mHl * ( 1.0 - 2.0 * ( d_h + d_MW ) + 3.0 * CH_LNP * v2* v2 / mHl/mHl/ LambdaNP2 );  
    lambdaH_LEW = ((GF * mH2_LEW) / sqrt(2)) * pow(1/(1.0 + d_v)/(1.0 - d_MW), 2.0); // ((GF * mHl * mHl) / sqrt(2)) * (1.0 - 2.0 * d_h - d_GF + 3.0 * CH_LNP * v2* v2 / mHl/mHl/ LambdaNP2);

    me_LEW = leptons[ELECTRON].getMass();
    mmu_LEW = leptons[MU].getMass();
    mtau_LEW = leptons[TAU].getMass();

    mu_LEW = Mrun(muw, quarks[UP].getMass_scale(), quarks[UP].getMass(), QCD::UP);
    mc_LEW = Mrun(muw, quarks[CHARM].getMass(), QCD::CHARM);
    mt_LEW = Mrun(muw, quarks[TOP].getMass(), QCD::TOP);
    
    md_LEW = Mrun(muw, quarks[DOWN].getMass_scale(), quarks[DOWN].getMass(), QCD::DOWN);
    ms_LEW = Mrun(muw, quarks[STRANGE].getMass_scale(), quarks[STRANGE].getMass(), QCD::STRANGE);
    mb_LEW = Mrun(muw, quarks[BOTTOM].getMass(), QCD::BOTTOM);
    
    //std::cout<<"mt="<<mtpole<<", mb="<<quarks[BOTTOM].getMass()<<""<<std::endl;
    //std::cout<<"vevSM="<<sqrt(mH2_LEW/lambdaH_LEW/2.0)<<std::endl;
    //std::cout<<"me=("<<me_LEW<<","<<mmu_LEW<<","<<mtau_LEW<<")"<<std::endl;
    //std::cout<<"mu=("<<mu_LEW<<","<<mc_LEW<<","<<mt_LEW<<")"<<std::endl;
    //std::cout<<"md=("<<md_LEW<<","<<ms_LEW<<","<<mb_LEW<<")"<<std::endl;
    
    // Add the unphysical ( 1.0 - d_MW ) in a way that the effect cancels exactly when computing the SM expressions of the Yukawas, 
    // with one coming from the vev obtained from mH2_LEW, lambdaH_LEW. Otherwise the effect from the vev will affect the CfH contributions
    me_LEW = (me_LEW + 0.5 * v() * CeH_11r_LNP * v2 /sqrt(2.0)/ LambdaNP2) * ( 1.0 - d_MW ); //me_LEW * ( 1.0 - d_MW ) + 0.5 * v() * CeH_11r_LNP * v2 /sqrt(2.0)/ LambdaNP2;
    mmu_LEW = (mmu_LEW + 0.5 * v() * CeH_22r_LNP * v2 /sqrt(2.0)/ LambdaNP2) * ( 1.0 - d_MW ); //mmu_LEW * ( 1.0 - d_MW ) + 0.5 * v() * CeH_22r_LNP * v2 /sqrt(2.0)/ LambdaNP2;
    mtau_LEW = (mtau_LEW + 0.5 * v() * CeH_33r_LNP * v2 /sqrt(2.0)/ LambdaNP2) * ( 1.0 - d_MW ); //mtau_LEW * ( 1.0 - d_MW ) + 0.5 * v() * CeH_33r_LNP * v2 /sqrt(2.0)/ LambdaNP2;
    
    mu_LEW = (mu_LEW + 0.5 * v() * CuH_11r_LNP * v2 /sqrt(2.0)/ LambdaNP2) * ( 1.0 - d_MW ); //mu_LEW * ( 1.0 - d_MW ) + 0.5 * v() * CuH_11r_LNP * v2 /sqrt(2.0)/ LambdaNP2;
    mc_LEW = (mc_LEW + 0.5 * v() * CuH_22r_LNP * v2 /sqrt(2.0)/ LambdaNP2) * ( 1.0 - d_MW ); //mc_LEW * ( 1.0 - d_MW ) + 0.5 * v() * CuH_22r_LNP * v2 /sqrt(2.0)/ LambdaNP2;
    mt_LEW = (mt_LEW + 0.5 * v() * CuH_33r_LNP * v2 /sqrt(2.0)/ LambdaNP2) * ( 1.0 - d_MW ); //mt_LEW * ( 1.0 - d_MW ) + 0.5 * v() * CuH_33r_LNP * v2 /sqrt(2.0)/ LambdaNP2;
    
    md_LEW = (md_LEW + 0.5 * v() * CdH_11r_LNP * v2 /sqrt(2.0)/ LambdaNP2) * ( 1.0 - d_MW ); //md_LEW * ( 1.0 - d_MW ) + 0.5 * v() * CdH_11r_LNP * v2 /sqrt(2.0)/ LambdaNP2;
    ms_LEW = (ms_LEW + 0.5 * v() * CdH_22r_LNP * v2 /sqrt(2.0)/ LambdaNP2) * ( 1.0 - d_MW ); //ms_LEW * ( 1.0 - d_MW ) + 0.5 * v() * CdH_22r_LNP * v2 /sqrt(2.0)/ LambdaNP2;
    mb_LEW = (mb_LEW + 0.5 * v() * CdH_33r_LNP * v2 /sqrt(2.0)/ LambdaNP2) * ( 1.0 - d_MW ); //mb_LEW * ( 1.0 - d_MW ) + 0.5 * v() * CdH_33r_LNP * v2 /sqrt(2.0)/ LambdaNP2;
    
    //std::cout<<"me+NP=("<<me_LEW<<","<<mmu_LEW<<","<<mtau_LEW<<")"<<std::endl;
    //std::cout<<"mu+NP=("<<mu_LEW<<","<<mc_LEW<<","<<mt_LEW<<")"<<std::endl;
    //std::cout<<"md+NP=("<<md_LEW<<","<<ms_LEW<<","<<mb_LEW<<")"<<std::endl;
    //std::cout<<"-------------------------------------------------------"<<std::endl;

    // This part uncorrected
    CKM aux_CKM;
    aux_CKM.computeCKMwithWolfenstein(lambda, A, rhob, etab);
    s12CKM_LEW = aux_CKM.gets12();
    s13CKM_LEW = aux_CKM.gets13();
    s23CKM_LEW = aux_CKM.gets23();
    dCKM_LEW = aux_CKM.getdelta();

}


void NPSMEFTd6General::setSMEFTEvolWC(RGESolver& RGevol) {

    RGevol.SetCoefficient("CG", CG_LNP / LambdaNP2);
    RGevol.SetCoefficient("CW", CW_LNP / LambdaNP2);

    RGevol.SetCoefficient("CHG", CHG_LNP / LambdaNP2);
    RGevol.SetCoefficient("CHW", CHW_LNP / LambdaNP2);
    RGevol.SetCoefficient("CHB", CHB_LNP / LambdaNP2);

    RGevol.SetCoefficient("CHWB", CHWB_LNP / LambdaNP2);
    RGevol.SetCoefficient("CHD", CHD_LNP / LambdaNP2);

    RGevol.SetCoefficient("CHbox", CHbox_LNP / LambdaNP2);
    RGevol.SetCoefficient("CH", CH_LNP / LambdaNP2);
    RGevol.SetCoefficient("CGtilde", CGtilde_LNP / LambdaNP2);
    RGevol.SetCoefficient("CWtilde", CWtilde_LNP / LambdaNP2);
    RGevol.SetCoefficient("CHGtilde", CHGtilde_LNP / LambdaNP2);
    RGevol.SetCoefficient("CHWtilde", CHWtilde_LNP / LambdaNP2);
    RGevol.SetCoefficient("CHBtilde", CHBtilde_LNP / LambdaNP2);
    RGevol.SetCoefficient("CHWtildeB", CHWtildeB_LNP / LambdaNP2);
    RGevol.SetCoefficient("CHl1R", CHl1_11r_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CHl1R", CHl1_12r_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CHl1R", CHl1_13r_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CHl1R", CHl1_22r_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CHl1R", CHl1_23r_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CHl1R", CHl1_33r_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CHl1I", CHl1_12i_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CHl1I", CHl1_13i_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CHl1I", CHl1_23i_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CHl3R", CHl3_11r_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CHl3R", CHl3_12r_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CHl3R", CHl3_13r_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CHl3R", CHl3_22r_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CHl3R", CHl3_23r_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CHl3R", CHl3_33r_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CHl3I", CHl3_12i_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CHl3I", CHl3_13i_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CHl3I", CHl3_23i_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CHeR", CHe_11r_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CHeR", CHe_12r_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CHeR", CHe_13r_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CHeR", CHe_22r_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CHeR", CHe_23r_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CHeR", CHe_33r_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CHeI", CHe_12i_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CHeI", CHe_13i_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CHeI", CHe_23i_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CHq1R", CHq1_11r_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CHq1R", CHq1_12r_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CHq1R", CHq1_13r_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CHq1R", CHq1_22r_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CHq1R", CHq1_23r_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CHq1R", CHq1_33r_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CHq1I", CHq1_12i_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CHq1I", CHq1_13i_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CHq1I", CHq1_23i_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CHq3R", CHq3_11r_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CHq3R", CHq3_12r_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CHq3R", CHq3_13r_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CHq3R", CHq3_22r_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CHq3R", CHq3_23r_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CHq3R", CHq3_33r_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CHq3I", CHq3_12i_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CHq3I", CHq3_13i_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CHq3I", CHq3_23i_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CHuR", CHu_11r_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CHuR", CHu_12r_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CHuR", CHu_13r_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CHuR", CHu_22r_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CHuR", CHu_23r_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CHuR", CHu_33r_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CHuI", CHu_12i_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CHuI", CHu_13i_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CHuI", CHu_23i_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CHdR", CHd_11r_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CHdR", CHd_12r_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CHdR", CHd_13r_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CHdR", CHd_22r_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CHdR", CHd_23r_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CHdR", CHd_33r_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CHdI", CHd_12i_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CHdI", CHd_13i_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CHdI", CHd_23i_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CHudR", CHud_11r_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CHudR", CHud_12r_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CHudR", CHud_13r_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CHudR", CHud_21r_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CHudR", CHud_22r_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CHudR", CHud_23r_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CHudR", CHud_31r_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CHudR", CHud_32r_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CHudR", CHud_33r_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CHudI", CHud_11i_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CHudI", CHud_12i_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CHudI", CHud_13i_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CHudI", CHud_21i_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CHudI", CHud_22i_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CHudI", CHud_23i_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CHudI", CHud_31i_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CHudI", CHud_32i_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CHudI", CHud_33i_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CeHR", CeH_11r_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CeHR", CeH_12r_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CeHR", CeH_13r_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CeHR", CeH_21r_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CeHR", CeH_22r_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CeHR", CeH_23r_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CeHR", CeH_31r_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CeHR", CeH_32r_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CeHR", CeH_33r_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CeHI", CeH_11i_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CeHI", CeH_12i_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CeHI", CeH_13i_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CeHI", CeH_21i_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CeHI", CeH_22i_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CeHI", CeH_23i_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CeHI", CeH_31i_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CeHI", CeH_32i_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CeHI", CeH_33i_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CuHR", CuH_11r_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CuHR", CuH_12r_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CuHR", CuH_13r_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CuHR", CuH_21r_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CuHR", CuH_22r_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CuHR", CuH_23r_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CuHR", CuH_31r_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CuHR", CuH_32r_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CuHR", CuH_33r_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CuHI", CuH_11i_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CuHI", CuH_12i_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CuHI", CuH_13i_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CuHI", CuH_21i_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CuHI", CuH_22i_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CuHI", CuH_23i_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CuHI", CuH_31i_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CuHI", CuH_32i_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CuHI", CuH_33i_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CdHR", CdH_11r_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CdHR", CdH_12r_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CdHR", CdH_13r_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CdHR", CdH_21r_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CdHR", CdH_22r_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CdHR", CdH_23r_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CdHR", CdH_31r_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CdHR", CdH_32r_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CdHR", CdH_33r_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CdHI", CdH_11i_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CdHI", CdH_12i_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CdHI", CdH_13i_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CdHI", CdH_21i_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CdHI", CdH_22i_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CdHI", CdH_23i_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CdHI", CdH_31i_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CdHI", CdH_32i_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CdHI", CdH_33i_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CuGR", CuG_11r_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CuGR", CuG_12r_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CuGR", CuG_13r_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CuGR", CuG_21r_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CuGR", CuG_22r_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CuGR", CuG_23r_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CuGR", CuG_31r_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CuGR", CuG_32r_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CuGR", CuG_33r_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CuGI", CuG_11i_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CuGI", CuG_12i_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CuGI", CuG_13i_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CuGI", CuG_21i_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CuGI", CuG_22i_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CuGI", CuG_23i_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CuGI", CuG_31i_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CuGI", CuG_32i_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CuGI", CuG_33i_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CuWR", CuW_11r_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CuWR", CuW_12r_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CuWR", CuW_13r_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CuWR", CuW_21r_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CuWR", CuW_22r_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CuWR", CuW_23r_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CuWR", CuW_31r_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CuWR", CuW_32r_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CuWR", CuW_33r_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CuWI", CuW_11i_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CuWI", CuW_12i_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CuWI", CuW_13i_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CuWI", CuW_21i_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CuWI", CuW_22i_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CuWI", CuW_23i_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CuWI", CuW_31i_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CuWI", CuW_32i_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CuWI", CuW_33i_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CuBR", CuB_11r_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CuBR", CuB_12r_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CuBR", CuB_13r_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CuBR", CuB_21r_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CuBR", CuB_22r_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CuBR", CuB_23r_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CuBR", CuB_31r_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CuBR", CuB_32r_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CuBR", CuB_33r_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CuBI", CuB_11i_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CuBI", CuB_12i_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CuBI", CuB_13i_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CuBI", CuB_21i_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CuBI", CuB_22i_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CuBI", CuB_23i_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CuBI", CuB_31i_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CuBI", CuB_32i_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CuBI", CuB_33i_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CdGR", CdG_11r_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CdGR", CdG_12r_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CdGR", CdG_13r_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CdGR", CdG_21r_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CdGR", CdG_22r_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CdGR", CdG_23r_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CdGR", CdG_31r_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CdGR", CdG_32r_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CdGR", CdG_33r_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CdGI", CdG_11i_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CdGI", CdG_12i_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CdGI", CdG_13i_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CdGI", CdG_21i_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CdGI", CdG_22i_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CdGI", CdG_23i_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CdGI", CdG_31i_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CdGI", CdG_32i_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CdGI", CdG_33i_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CdWR", CdW_11r_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CdWR", CdW_12r_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CdWR", CdW_13r_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CdWR", CdW_21r_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CdWR", CdW_22r_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CdWR", CdW_23r_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CdWR", CdW_31r_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CdWR", CdW_32r_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CdWR", CdW_33r_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CdWI", CdW_11i_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CdWI", CdW_12i_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CdWI", CdW_13i_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CdWI", CdW_21i_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CdWI", CdW_22i_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CdWI", CdW_23i_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CdWI", CdW_31i_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CdWI", CdW_32i_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CdWI", CdW_33i_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CdBR", CdB_11r_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CdBR", CdB_12r_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CdBR", CdB_13r_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CdBR", CdB_21r_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CdBR", CdB_22r_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CdBR", CdB_23r_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CdBR", CdB_31r_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CdBR", CdB_32r_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CdBR", CdB_33r_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CdBI", CdB_11i_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CdBI", CdB_12i_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CdBI", CdB_13i_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CdBI", CdB_21i_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CdBI", CdB_22i_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CdBI", CdB_23i_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CdBI", CdB_31i_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CdBI", CdB_32i_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CdBI", CdB_33i_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CeWR", CeW_11r_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CeWR", CeW_12r_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CeWR", CeW_13r_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CeWR", CeW_21r_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CeWR", CeW_22r_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CeWR", CeW_23r_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CeWR", CeW_31r_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CeWR", CeW_32r_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CeWR", CeW_33r_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CeWI", CeW_11i_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CeWI", CeW_12i_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CeWI", CeW_13i_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CeWI", CeW_21i_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CeWI", CeW_22i_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CeWI", CeW_23i_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CeWI", CeW_31i_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CeWI", CeW_32i_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CeWI", CeW_33i_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CeBR", CeB_11r_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CeBR", CeB_12r_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CeBR", CeB_13r_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CeBR", CeB_21r_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CeBR", CeB_22r_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CeBR", CeB_23r_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CeBR", CeB_31r_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CeBR", CeB_32r_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CeBR", CeB_33r_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CeBI", CeB_11i_LNP / LambdaNP2, 0, 0);
    RGevol.SetCoefficient("CeBI", CeB_12i_LNP / LambdaNP2, 0, 1);
    RGevol.SetCoefficient("CeBI", CeB_13i_LNP / LambdaNP2, 0, 2);
    RGevol.SetCoefficient("CeBI", CeB_21i_LNP / LambdaNP2, 1, 0);
    RGevol.SetCoefficient("CeBI", CeB_22i_LNP / LambdaNP2, 1, 1);
    RGevol.SetCoefficient("CeBI", CeB_23i_LNP / LambdaNP2, 1, 2);
    RGevol.SetCoefficient("CeBI", CeB_31i_LNP / LambdaNP2, 2, 0);
    RGevol.SetCoefficient("CeBI", CeB_32i_LNP / LambdaNP2, 2, 1);
    RGevol.SetCoefficient("CeBI", CeB_33i_LNP / LambdaNP2, 2, 2);
    RGevol.SetCoefficient("CllR", Cll_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("CllR", Cll_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CllR", Cll_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CllR", Cll_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("CllR", Cll_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CllR", Cll_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("CllR", Cll_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CllR", Cll_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CllR", Cll_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("CllR", Cll_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CllR", Cll_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CllR", Cll_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CllR", Cll_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CllR", Cll_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CllR", Cll_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CllR", Cll_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CllR", Cll_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CllR", Cll_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("CllR", Cll_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CllR", Cll_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CllR", Cll_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("CllR", Cll_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CllR", Cll_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("CllR", Cll_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CllR", Cll_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("CllR", Cll_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CllR", Cll_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("CllI", Cll_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CllI", Cll_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CllI", Cll_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CllI", Cll_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CllI", Cll_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CllI", Cll_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CllI", Cll_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CllI", Cll_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CllI", Cll_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CllI", Cll_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CllI", Cll_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CllI", Cll_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CllI", Cll_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CllI", Cll_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CllI", Cll_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CllI", Cll_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CllI", Cll_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CllI", Cll_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Clq1R", Clq1_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("Clq1R", Clq1_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Clq1R", Clq1_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Clq1R", Clq1_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("Clq1R", Clq1_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Clq1R", Clq1_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("Clq1R", Clq1_1211r_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Clq1R", Clq1_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Clq1R", Clq1_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Clq1R", Clq1_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Clq1R", Clq1_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Clq1R", Clq1_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Clq1R", Clq1_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Clq1R", Clq1_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Clq1R", Clq1_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Clq1R", Clq1_1311r_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Clq1R", Clq1_1312r_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Clq1R", Clq1_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Clq1R", Clq1_1321r_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Clq1R", Clq1_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Clq1R", Clq1_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Clq1R", Clq1_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Clq1R", Clq1_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Clq1R", Clq1_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Clq1R", Clq1_2211r_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("Clq1R", Clq1_2212r_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Clq1R", Clq1_2213r_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Clq1R", Clq1_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("Clq1R", Clq1_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Clq1R", Clq1_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("Clq1R", Clq1_2311r_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Clq1R", Clq1_2312r_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Clq1R", Clq1_2313r_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Clq1R", Clq1_2321r_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Clq1R", Clq1_2322r_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Clq1R", Clq1_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Clq1R", Clq1_2331r_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Clq1R", Clq1_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Clq1R", Clq1_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Clq1R", Clq1_3311r_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("Clq1R", Clq1_3312r_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Clq1R", Clq1_3313r_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Clq1R", Clq1_3322r_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("Clq1R", Clq1_3323r_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Clq1R", Clq1_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("Clq1I", Clq1_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Clq1I", Clq1_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Clq1I", Clq1_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Clq1I", Clq1_1211i_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Clq1I", Clq1_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Clq1I", Clq1_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Clq1I", Clq1_1221i_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Clq1I", Clq1_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Clq1I", Clq1_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Clq1I", Clq1_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Clq1I", Clq1_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Clq1I", Clq1_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Clq1I", Clq1_1311i_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Clq1I", Clq1_1312i_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Clq1I", Clq1_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Clq1I", Clq1_1321i_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Clq1I", Clq1_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Clq1I", Clq1_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Clq1I", Clq1_1331i_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Clq1I", Clq1_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Clq1I", Clq1_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Clq1I", Clq1_2212i_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Clq1I", Clq1_2213i_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Clq1I", Clq1_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Clq1I", Clq1_2311i_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Clq1I", Clq1_2312i_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Clq1I", Clq1_2313i_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Clq1I", Clq1_2321i_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Clq1I", Clq1_2322i_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Clq1I", Clq1_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Clq1I", Clq1_2331i_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Clq1I", Clq1_2332i_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Clq1I", Clq1_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Clq1I", Clq1_3312i_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Clq1I", Clq1_3313i_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Clq1I", Clq1_3323i_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Clq3R", Clq3_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("Clq3R", Clq3_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Clq3R", Clq3_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Clq3R", Clq3_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("Clq3R", Clq3_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Clq3R", Clq3_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("Clq3R", Clq3_1211r_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Clq3R", Clq3_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Clq3R", Clq3_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Clq3R", Clq3_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Clq3R", Clq3_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Clq3R", Clq3_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Clq3R", Clq3_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Clq3R", Clq3_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Clq3R", Clq3_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Clq3R", Clq3_1311r_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Clq3R", Clq3_1312r_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Clq3R", Clq3_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Clq3R", Clq3_1321r_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Clq3R", Clq3_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Clq3R", Clq3_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Clq3R", Clq3_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Clq3R", Clq3_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Clq3R", Clq3_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Clq3R", Clq3_2211r_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("Clq3R", Clq3_2212r_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Clq3R", Clq3_2213r_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Clq3R", Clq3_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("Clq3R", Clq3_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Clq3R", Clq3_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("Clq3R", Clq3_2311r_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Clq3R", Clq3_2312r_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Clq3R", Clq3_2313r_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Clq3R", Clq3_2321r_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Clq3R", Clq3_2322r_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Clq3R", Clq3_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Clq3R", Clq3_2331r_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Clq3R", Clq3_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Clq3R", Clq3_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Clq3R", Clq3_3311r_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("Clq3R", Clq3_3312r_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Clq3R", Clq3_3313r_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Clq3R", Clq3_3322r_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("Clq3R", Clq3_3323r_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Clq3R", Clq3_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("Clq3I", Clq3_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Clq3I", Clq3_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Clq3I", Clq3_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Clq3I", Clq3_1211i_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Clq3I", Clq3_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Clq3I", Clq3_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Clq3I", Clq3_1221i_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Clq3I", Clq3_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Clq3I", Clq3_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Clq3I", Clq3_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Clq3I", Clq3_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Clq3I", Clq3_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Clq3I", Clq3_1311i_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Clq3I", Clq3_1312i_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Clq3I", Clq3_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Clq3I", Clq3_1321i_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Clq3I", Clq3_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Clq3I", Clq3_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Clq3I", Clq3_1331i_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Clq3I", Clq3_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Clq3I", Clq3_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Clq3I", Clq3_2212i_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Clq3I", Clq3_2213i_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Clq3I", Clq3_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Clq3I", Clq3_2311i_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Clq3I", Clq3_2312i_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Clq3I", Clq3_2313i_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Clq3I", Clq3_2321i_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Clq3I", Clq3_2322i_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Clq3I", Clq3_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Clq3I", Clq3_2331i_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Clq3I", Clq3_2332i_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Clq3I", Clq3_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Clq3I", Clq3_3312i_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Clq3I", Clq3_3313i_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Clq3I", Clq3_3323i_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("CeeR", Cee_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("CeeR", Cee_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CeeR", Cee_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CeeR", Cee_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("CeeR", Cee_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CeeR", Cee_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("CeeR", Cee_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CeeR", Cee_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CeeR", Cee_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CeeR", Cee_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CeeR", Cee_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CeeR", Cee_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CeeR", Cee_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CeeR", Cee_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CeeR", Cee_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CeeR", Cee_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("CeeR", Cee_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CeeR", Cee_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("CeeR", Cee_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CeeR", Cee_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CeeR", Cee_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("CeeI", Cee_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CeeI", Cee_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CeeI", Cee_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CeeI", Cee_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CeeI", Cee_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CeeI", Cee_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CeeI", Cee_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CeeI", Cee_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CeeI", Cee_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CeeI", Cee_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CeeI", Cee_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CeeI", Cee_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CeeI", Cee_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CeeI", Cee_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CeeI", Cee_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CeuR", Ceu_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("CeuR", Ceu_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CeuR", Ceu_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CeuR", Ceu_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("CeuR", Ceu_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CeuR", Ceu_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("CeuR", Ceu_1211r_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("CeuR", Ceu_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CeuR", Ceu_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CeuR", Ceu_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("CeuR", Ceu_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CeuR", Ceu_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CeuR", Ceu_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CeuR", Ceu_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CeuR", Ceu_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CeuR", Ceu_1311r_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("CeuR", Ceu_1312r_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("CeuR", Ceu_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CeuR", Ceu_1321r_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("CeuR", Ceu_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CeuR", Ceu_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CeuR", Ceu_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("CeuR", Ceu_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CeuR", Ceu_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CeuR", Ceu_2211r_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("CeuR", Ceu_2212r_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("CeuR", Ceu_2213r_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("CeuR", Ceu_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("CeuR", Ceu_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CeuR", Ceu_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("CeuR", Ceu_2311r_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("CeuR", Ceu_2312r_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("CeuR", Ceu_2313r_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("CeuR", Ceu_2321r_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("CeuR", Ceu_2322r_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("CeuR", Ceu_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CeuR", Ceu_2331r_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("CeuR", Ceu_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("CeuR", Ceu_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CeuR", Ceu_3311r_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("CeuR", Ceu_3312r_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("CeuR", Ceu_3313r_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("CeuR", Ceu_3322r_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("CeuR", Ceu_3323r_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("CeuR", Ceu_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("CeuI", Ceu_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CeuI", Ceu_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CeuI", Ceu_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CeuI", Ceu_1211i_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("CeuI", Ceu_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CeuI", Ceu_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CeuI", Ceu_1221i_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("CeuI", Ceu_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CeuI", Ceu_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CeuI", Ceu_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CeuI", Ceu_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CeuI", Ceu_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CeuI", Ceu_1311i_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("CeuI", Ceu_1312i_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("CeuI", Ceu_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CeuI", Ceu_1321i_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("CeuI", Ceu_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CeuI", Ceu_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CeuI", Ceu_1331i_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("CeuI", Ceu_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CeuI", Ceu_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CeuI", Ceu_2212i_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("CeuI", Ceu_2213i_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("CeuI", Ceu_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CeuI", Ceu_2311i_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("CeuI", Ceu_2312i_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("CeuI", Ceu_2313i_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("CeuI", Ceu_2321i_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("CeuI", Ceu_2322i_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("CeuI", Ceu_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CeuI", Ceu_2331i_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("CeuI", Ceu_2332i_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("CeuI", Ceu_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CeuI", Ceu_3312i_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("CeuI", Ceu_3313i_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("CeuI", Ceu_3323i_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("CedR", Ced_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("CedR", Ced_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CedR", Ced_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CedR", Ced_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("CedR", Ced_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CedR", Ced_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("CedR", Ced_1211r_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("CedR", Ced_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CedR", Ced_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CedR", Ced_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("CedR", Ced_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CedR", Ced_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CedR", Ced_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CedR", Ced_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CedR", Ced_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CedR", Ced_1311r_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("CedR", Ced_1312r_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("CedR", Ced_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CedR", Ced_1321r_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("CedR", Ced_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CedR", Ced_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CedR", Ced_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("CedR", Ced_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CedR", Ced_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CedR", Ced_2211r_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("CedR", Ced_2212r_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("CedR", Ced_2213r_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("CedR", Ced_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("CedR", Ced_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CedR", Ced_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("CedR", Ced_2311r_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("CedR", Ced_2312r_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("CedR", Ced_2313r_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("CedR", Ced_2321r_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("CedR", Ced_2322r_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("CedR", Ced_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CedR", Ced_2331r_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("CedR", Ced_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("CedR", Ced_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CedR", Ced_3311r_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("CedR", Ced_3312r_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("CedR", Ced_3313r_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("CedR", Ced_3322r_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("CedR", Ced_3323r_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("CedR", Ced_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("CedI", Ced_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CedI", Ced_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CedI", Ced_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CedI", Ced_1211i_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("CedI", Ced_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CedI", Ced_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CedI", Ced_1221i_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("CedI", Ced_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CedI", Ced_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CedI", Ced_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CedI", Ced_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CedI", Ced_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CedI", Ced_1311i_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("CedI", Ced_1312i_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("CedI", Ced_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CedI", Ced_1321i_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("CedI", Ced_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CedI", Ced_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CedI", Ced_1331i_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("CedI", Ced_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CedI", Ced_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CedI", Ced_2212i_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("CedI", Ced_2213i_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("CedI", Ced_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CedI", Ced_2311i_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("CedI", Ced_2312i_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("CedI", Ced_2313i_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("CedI", Ced_2321i_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("CedI", Ced_2322i_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("CedI", Ced_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CedI", Ced_2331i_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("CedI", Ced_2332i_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("CedI", Ced_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CedI", Ced_3312i_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("CedI", Ced_3313i_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("CedI", Ced_3323i_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("CleR", Cle_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("CleR", Cle_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CleR", Cle_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CleR", Cle_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("CleR", Cle_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CleR", Cle_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("CleR", Cle_1211r_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("CleR", Cle_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CleR", Cle_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CleR", Cle_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("CleR", Cle_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CleR", Cle_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CleR", Cle_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CleR", Cle_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CleR", Cle_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CleR", Cle_1311r_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("CleR", Cle_1312r_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("CleR", Cle_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CleR", Cle_1321r_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("CleR", Cle_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CleR", Cle_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CleR", Cle_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("CleR", Cle_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CleR", Cle_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CleR", Cle_2211r_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("CleR", Cle_2212r_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("CleR", Cle_2213r_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("CleR", Cle_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("CleR", Cle_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CleR", Cle_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("CleR", Cle_2311r_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("CleR", Cle_2312r_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("CleR", Cle_2313r_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("CleR", Cle_2321r_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("CleR", Cle_2322r_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("CleR", Cle_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CleR", Cle_2331r_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("CleR", Cle_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("CleR", Cle_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CleR", Cle_3311r_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("CleR", Cle_3312r_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("CleR", Cle_3313r_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("CleR", Cle_3322r_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("CleR", Cle_3323r_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("CleR", Cle_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("CleI", Cle_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CleI", Cle_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CleI", Cle_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CleI", Cle_1211i_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("CleI", Cle_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CleI", Cle_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CleI", Cle_1221i_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("CleI", Cle_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CleI", Cle_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CleI", Cle_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CleI", Cle_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CleI", Cle_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CleI", Cle_1311i_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("CleI", Cle_1312i_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("CleI", Cle_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CleI", Cle_1321i_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("CleI", Cle_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CleI", Cle_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CleI", Cle_1331i_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("CleI", Cle_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CleI", Cle_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CleI", Cle_2212i_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("CleI", Cle_2213i_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("CleI", Cle_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CleI", Cle_2311i_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("CleI", Cle_2312i_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("CleI", Cle_2313i_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("CleI", Cle_2321i_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("CleI", Cle_2322i_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("CleI", Cle_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CleI", Cle_2331i_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("CleI", Cle_2332i_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("CleI", Cle_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CleI", Cle_3312i_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("CleI", Cle_3313i_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("CleI", Cle_3323i_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("CluR", Clu_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("CluR", Clu_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CluR", Clu_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CluR", Clu_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("CluR", Clu_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CluR", Clu_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("CluR", Clu_1211r_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("CluR", Clu_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CluR", Clu_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CluR", Clu_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("CluR", Clu_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CluR", Clu_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CluR", Clu_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CluR", Clu_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CluR", Clu_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CluR", Clu_1311r_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("CluR", Clu_1312r_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("CluR", Clu_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CluR", Clu_1321r_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("CluR", Clu_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CluR", Clu_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CluR", Clu_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("CluR", Clu_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CluR", Clu_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CluR", Clu_2211r_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("CluR", Clu_2212r_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("CluR", Clu_2213r_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("CluR", Clu_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("CluR", Clu_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CluR", Clu_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("CluR", Clu_2311r_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("CluR", Clu_2312r_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("CluR", Clu_2313r_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("CluR", Clu_2321r_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("CluR", Clu_2322r_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("CluR", Clu_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CluR", Clu_2331r_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("CluR", Clu_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("CluR", Clu_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CluR", Clu_3311r_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("CluR", Clu_3312r_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("CluR", Clu_3313r_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("CluR", Clu_3322r_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("CluR", Clu_3323r_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("CluR", Clu_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("CluI", Clu_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CluI", Clu_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CluI", Clu_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CluI", Clu_1211i_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("CluI", Clu_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CluI", Clu_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CluI", Clu_1221i_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("CluI", Clu_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CluI", Clu_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CluI", Clu_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CluI", Clu_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CluI", Clu_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CluI", Clu_1311i_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("CluI", Clu_1312i_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("CluI", Clu_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CluI", Clu_1321i_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("CluI", Clu_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CluI", Clu_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CluI", Clu_1331i_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("CluI", Clu_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CluI", Clu_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CluI", Clu_2212i_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("CluI", Clu_2213i_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("CluI", Clu_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CluI", Clu_2311i_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("CluI", Clu_2312i_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("CluI", Clu_2313i_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("CluI", Clu_2321i_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("CluI", Clu_2322i_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("CluI", Clu_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CluI", Clu_2331i_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("CluI", Clu_2332i_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("CluI", Clu_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CluI", Clu_3312i_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("CluI", Clu_3313i_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("CluI", Clu_3323i_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("CldR", Cld_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("CldR", Cld_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CldR", Cld_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CldR", Cld_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("CldR", Cld_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CldR", Cld_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("CldR", Cld_1211r_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("CldR", Cld_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CldR", Cld_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CldR", Cld_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("CldR", Cld_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CldR", Cld_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CldR", Cld_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CldR", Cld_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CldR", Cld_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CldR", Cld_1311r_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("CldR", Cld_1312r_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("CldR", Cld_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CldR", Cld_1321r_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("CldR", Cld_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CldR", Cld_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CldR", Cld_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("CldR", Cld_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CldR", Cld_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CldR", Cld_2211r_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("CldR", Cld_2212r_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("CldR", Cld_2213r_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("CldR", Cld_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("CldR", Cld_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CldR", Cld_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("CldR", Cld_2311r_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("CldR", Cld_2312r_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("CldR", Cld_2313r_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("CldR", Cld_2321r_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("CldR", Cld_2322r_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("CldR", Cld_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CldR", Cld_2331r_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("CldR", Cld_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("CldR", Cld_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CldR", Cld_3311r_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("CldR", Cld_3312r_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("CldR", Cld_3313r_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("CldR", Cld_3322r_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("CldR", Cld_3323r_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("CldR", Cld_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("CldI", Cld_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CldI", Cld_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CldI", Cld_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CldI", Cld_1211i_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("CldI", Cld_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CldI", Cld_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CldI", Cld_1221i_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("CldI", Cld_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CldI", Cld_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CldI", Cld_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CldI", Cld_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CldI", Cld_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CldI", Cld_1311i_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("CldI", Cld_1312i_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("CldI", Cld_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CldI", Cld_1321i_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("CldI", Cld_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CldI", Cld_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CldI", Cld_1331i_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("CldI", Cld_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CldI", Cld_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CldI", Cld_2212i_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("CldI", Cld_2213i_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("CldI", Cld_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CldI", Cld_2311i_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("CldI", Cld_2312i_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("CldI", Cld_2313i_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("CldI", Cld_2321i_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("CldI", Cld_2322i_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("CldI", Cld_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CldI", Cld_2331i_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("CldI", Cld_2332i_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("CldI", Cld_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CldI", Cld_3312i_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("CldI", Cld_3313i_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("CldI", Cld_3323i_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("CqeR", Cqe_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("CqeR", Cqe_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CqeR", Cqe_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CqeR", Cqe_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("CqeR", Cqe_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CqeR", Cqe_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("CqeR", Cqe_1211r_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("CqeR", Cqe_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CqeR", Cqe_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CqeR", Cqe_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("CqeR", Cqe_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CqeR", Cqe_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CqeR", Cqe_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CqeR", Cqe_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CqeR", Cqe_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CqeR", Cqe_1311r_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("CqeR", Cqe_1312r_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("CqeR", Cqe_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CqeR", Cqe_1321r_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("CqeR", Cqe_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CqeR", Cqe_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CqeR", Cqe_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("CqeR", Cqe_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CqeR", Cqe_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CqeR", Cqe_2211r_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("CqeR", Cqe_2212r_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("CqeR", Cqe_2213r_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("CqeR", Cqe_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("CqeR", Cqe_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CqeR", Cqe_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("CqeR", Cqe_2311r_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("CqeR", Cqe_2312r_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("CqeR", Cqe_2313r_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("CqeR", Cqe_2321r_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("CqeR", Cqe_2322r_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("CqeR", Cqe_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CqeR", Cqe_2331r_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("CqeR", Cqe_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("CqeR", Cqe_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CqeR", Cqe_3311r_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("CqeR", Cqe_3312r_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("CqeR", Cqe_3313r_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("CqeR", Cqe_3322r_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("CqeR", Cqe_3323r_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("CqeR", Cqe_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("CqeI", Cqe_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CqeI", Cqe_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CqeI", Cqe_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CqeI", Cqe_1211i_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("CqeI", Cqe_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CqeI", Cqe_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CqeI", Cqe_1221i_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("CqeI", Cqe_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CqeI", Cqe_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CqeI", Cqe_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CqeI", Cqe_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CqeI", Cqe_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CqeI", Cqe_1311i_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("CqeI", Cqe_1312i_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("CqeI", Cqe_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CqeI", Cqe_1321i_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("CqeI", Cqe_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CqeI", Cqe_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CqeI", Cqe_1331i_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("CqeI", Cqe_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CqeI", Cqe_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CqeI", Cqe_2212i_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("CqeI", Cqe_2213i_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("CqeI", Cqe_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CqeI", Cqe_2311i_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("CqeI", Cqe_2312i_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("CqeI", Cqe_2313i_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("CqeI", Cqe_2321i_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("CqeI", Cqe_2322i_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("CqeI", Cqe_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CqeI", Cqe_2331i_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("CqeI", Cqe_2332i_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("CqeI", Cqe_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CqeI", Cqe_3312i_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("CqeI", Cqe_3313i_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("CqeI", Cqe_3323i_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("CledqR", Cledq_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("CledqR", Cledq_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CledqR", Cledq_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CledqR", Cledq_1121r_LNP / LambdaNP2, 0, 0, 1, 0);
    RGevol.SetCoefficient("CledqR", Cledq_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("CledqR", Cledq_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CledqR", Cledq_1131r_LNP / LambdaNP2, 0, 0, 2, 0);
    RGevol.SetCoefficient("CledqR", Cledq_1132r_LNP / LambdaNP2, 0, 0, 2, 1);
    RGevol.SetCoefficient("CledqR", Cledq_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("CledqR", Cledq_1211r_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("CledqR", Cledq_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CledqR", Cledq_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CledqR", Cledq_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("CledqR", Cledq_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CledqR", Cledq_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CledqR", Cledq_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CledqR", Cledq_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CledqR", Cledq_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CledqR", Cledq_1311r_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("CledqR", Cledq_1312r_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("CledqR", Cledq_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CledqR", Cledq_1321r_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("CledqR", Cledq_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CledqR", Cledq_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CledqR", Cledq_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("CledqR", Cledq_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CledqR", Cledq_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CledqR", Cledq_2111r_LNP / LambdaNP2, 1, 0, 0, 0);
    RGevol.SetCoefficient("CledqR", Cledq_2112r_LNP / LambdaNP2, 1, 0, 0, 1);
    RGevol.SetCoefficient("CledqR", Cledq_2113r_LNP / LambdaNP2, 1, 0, 0, 2);
    RGevol.SetCoefficient("CledqR", Cledq_2121r_LNP / LambdaNP2, 1, 0, 1, 0);
    RGevol.SetCoefficient("CledqR", Cledq_2122r_LNP / LambdaNP2, 1, 0, 1, 1);
    RGevol.SetCoefficient("CledqR", Cledq_2123r_LNP / LambdaNP2, 1, 0, 1, 2);
    RGevol.SetCoefficient("CledqR", Cledq_2131r_LNP / LambdaNP2, 1, 0, 2, 0);
    RGevol.SetCoefficient("CledqR", Cledq_2132r_LNP / LambdaNP2, 1, 0, 2, 1);
    RGevol.SetCoefficient("CledqR", Cledq_2133r_LNP / LambdaNP2, 1, 0, 2, 2);
    RGevol.SetCoefficient("CledqR", Cledq_2211r_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("CledqR", Cledq_2212r_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("CledqR", Cledq_2213r_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("CledqR", Cledq_2221r_LNP / LambdaNP2, 1, 1, 1, 0);
    RGevol.SetCoefficient("CledqR", Cledq_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("CledqR", Cledq_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CledqR", Cledq_2231r_LNP / LambdaNP2, 1, 1, 2, 0);
    RGevol.SetCoefficient("CledqR", Cledq_2232r_LNP / LambdaNP2, 1, 1, 2, 1);
    RGevol.SetCoefficient("CledqR", Cledq_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("CledqR", Cledq_2311r_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("CledqR", Cledq_2312r_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("CledqR", Cledq_2313r_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("CledqR", Cledq_2321r_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("CledqR", Cledq_2322r_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("CledqR", Cledq_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CledqR", Cledq_2331r_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("CledqR", Cledq_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("CledqR", Cledq_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CledqR", Cledq_3111r_LNP / LambdaNP2, 2, 0, 0, 0);
    RGevol.SetCoefficient("CledqR", Cledq_3112r_LNP / LambdaNP2, 2, 0, 0, 1);
    RGevol.SetCoefficient("CledqR", Cledq_3113r_LNP / LambdaNP2, 2, 0, 0, 2);
    RGevol.SetCoefficient("CledqR", Cledq_3121r_LNP / LambdaNP2, 2, 0, 1, 0);
    RGevol.SetCoefficient("CledqR", Cledq_3122r_LNP / LambdaNP2, 2, 0, 1, 1);
    RGevol.SetCoefficient("CledqR", Cledq_3123r_LNP / LambdaNP2, 2, 0, 1, 2);
    RGevol.SetCoefficient("CledqR", Cledq_3131r_LNP / LambdaNP2, 2, 0, 2, 0);
    RGevol.SetCoefficient("CledqR", Cledq_3132r_LNP / LambdaNP2, 2, 0, 2, 1);
    RGevol.SetCoefficient("CledqR", Cledq_3133r_LNP / LambdaNP2, 2, 0, 2, 2);
    RGevol.SetCoefficient("CledqR", Cledq_3211r_LNP / LambdaNP2, 2, 1, 0, 0);
    RGevol.SetCoefficient("CledqR", Cledq_3212r_LNP / LambdaNP2, 2, 1, 0, 1);
    RGevol.SetCoefficient("CledqR", Cledq_3213r_LNP / LambdaNP2, 2, 1, 0, 2);
    RGevol.SetCoefficient("CledqR", Cledq_3221r_LNP / LambdaNP2, 2, 1, 1, 0);
    RGevol.SetCoefficient("CledqR", Cledq_3222r_LNP / LambdaNP2, 2, 1, 1, 1);
    RGevol.SetCoefficient("CledqR", Cledq_3223r_LNP / LambdaNP2, 2, 1, 1, 2);
    RGevol.SetCoefficient("CledqR", Cledq_3231r_LNP / LambdaNP2, 2, 1, 2, 0);
    RGevol.SetCoefficient("CledqR", Cledq_3232r_LNP / LambdaNP2, 2, 1, 2, 1);
    RGevol.SetCoefficient("CledqR", Cledq_3233r_LNP / LambdaNP2, 2, 1, 2, 2);
    RGevol.SetCoefficient("CledqR", Cledq_3311r_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("CledqR", Cledq_3312r_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("CledqR", Cledq_3313r_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("CledqR", Cledq_3321r_LNP / LambdaNP2, 2, 2, 1, 0);
    RGevol.SetCoefficient("CledqR", Cledq_3322r_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("CledqR", Cledq_3323r_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("CledqR", Cledq_3331r_LNP / LambdaNP2, 2, 2, 2, 0);
    RGevol.SetCoefficient("CledqR", Cledq_3332r_LNP / LambdaNP2, 2, 2, 2, 1);
    RGevol.SetCoefficient("CledqR", Cledq_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("CledqI", Cledq_1111i_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("CledqI", Cledq_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CledqI", Cledq_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CledqI", Cledq_1121i_LNP / LambdaNP2, 0, 0, 1, 0);
    RGevol.SetCoefficient("CledqI", Cledq_1122i_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("CledqI", Cledq_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CledqI", Cledq_1131i_LNP / LambdaNP2, 0, 0, 2, 0);
    RGevol.SetCoefficient("CledqI", Cledq_1132i_LNP / LambdaNP2, 0, 0, 2, 1);
    RGevol.SetCoefficient("CledqI", Cledq_1133i_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("CledqI", Cledq_1211i_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("CledqI", Cledq_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CledqI", Cledq_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CledqI", Cledq_1221i_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("CledqI", Cledq_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CledqI", Cledq_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CledqI", Cledq_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CledqI", Cledq_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CledqI", Cledq_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CledqI", Cledq_1311i_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("CledqI", Cledq_1312i_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("CledqI", Cledq_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CledqI", Cledq_1321i_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("CledqI", Cledq_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CledqI", Cledq_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CledqI", Cledq_1331i_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("CledqI", Cledq_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CledqI", Cledq_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CledqI", Cledq_2111i_LNP / LambdaNP2, 1, 0, 0, 0);
    RGevol.SetCoefficient("CledqI", Cledq_2112i_LNP / LambdaNP2, 1, 0, 0, 1);
    RGevol.SetCoefficient("CledqI", Cledq_2113i_LNP / LambdaNP2, 1, 0, 0, 2);
    RGevol.SetCoefficient("CledqI", Cledq_2121i_LNP / LambdaNP2, 1, 0, 1, 0);
    RGevol.SetCoefficient("CledqI", Cledq_2122i_LNP / LambdaNP2, 1, 0, 1, 1);
    RGevol.SetCoefficient("CledqI", Cledq_2123i_LNP / LambdaNP2, 1, 0, 1, 2);
    RGevol.SetCoefficient("CledqI", Cledq_2131i_LNP / LambdaNP2, 1, 0, 2, 0);
    RGevol.SetCoefficient("CledqI", Cledq_2132i_LNP / LambdaNP2, 1, 0, 2, 1);
    RGevol.SetCoefficient("CledqI", Cledq_2133i_LNP / LambdaNP2, 1, 0, 2, 2);
    RGevol.SetCoefficient("CledqI", Cledq_2211i_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("CledqI", Cledq_2212i_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("CledqI", Cledq_2213i_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("CledqI", Cledq_2221i_LNP / LambdaNP2, 1, 1, 1, 0);
    RGevol.SetCoefficient("CledqI", Cledq_2222i_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("CledqI", Cledq_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CledqI", Cledq_2231i_LNP / LambdaNP2, 1, 1, 2, 0);
    RGevol.SetCoefficient("CledqI", Cledq_2232i_LNP / LambdaNP2, 1, 1, 2, 1);
    RGevol.SetCoefficient("CledqI", Cledq_2233i_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("CledqI", Cledq_2311i_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("CledqI", Cledq_2312i_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("CledqI", Cledq_2313i_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("CledqI", Cledq_2321i_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("CledqI", Cledq_2322i_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("CledqI", Cledq_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CledqI", Cledq_2331i_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("CledqI", Cledq_2332i_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("CledqI", Cledq_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CledqI", Cledq_3111i_LNP / LambdaNP2, 2, 0, 0, 0);
    RGevol.SetCoefficient("CledqI", Cledq_3112i_LNP / LambdaNP2, 2, 0, 0, 1);
    RGevol.SetCoefficient("CledqI", Cledq_3113i_LNP / LambdaNP2, 2, 0, 0, 2);
    RGevol.SetCoefficient("CledqI", Cledq_3121i_LNP / LambdaNP2, 2, 0, 1, 0);
    RGevol.SetCoefficient("CledqI", Cledq_3122i_LNP / LambdaNP2, 2, 0, 1, 1);
    RGevol.SetCoefficient("CledqI", Cledq_3123i_LNP / LambdaNP2, 2, 0, 1, 2);
    RGevol.SetCoefficient("CledqI", Cledq_3131i_LNP / LambdaNP2, 2, 0, 2, 0);
    RGevol.SetCoefficient("CledqI", Cledq_3132i_LNP / LambdaNP2, 2, 0, 2, 1);
    RGevol.SetCoefficient("CledqI", Cledq_3133i_LNP / LambdaNP2, 2, 0, 2, 2);
    RGevol.SetCoefficient("CledqI", Cledq_3211i_LNP / LambdaNP2, 2, 1, 0, 0);
    RGevol.SetCoefficient("CledqI", Cledq_3212i_LNP / LambdaNP2, 2, 1, 0, 1);
    RGevol.SetCoefficient("CledqI", Cledq_3213i_LNP / LambdaNP2, 2, 1, 0, 2);
    RGevol.SetCoefficient("CledqI", Cledq_3221i_LNP / LambdaNP2, 2, 1, 1, 0);
    RGevol.SetCoefficient("CledqI", Cledq_3222i_LNP / LambdaNP2, 2, 1, 1, 1);
    RGevol.SetCoefficient("CledqI", Cledq_3223i_LNP / LambdaNP2, 2, 1, 1, 2);
    RGevol.SetCoefficient("CledqI", Cledq_3231i_LNP / LambdaNP2, 2, 1, 2, 0);
    RGevol.SetCoefficient("CledqI", Cledq_3232i_LNP / LambdaNP2, 2, 1, 2, 1);
    RGevol.SetCoefficient("CledqI", Cledq_3233i_LNP / LambdaNP2, 2, 1, 2, 2);
    RGevol.SetCoefficient("CledqI", Cledq_3311i_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("CledqI", Cledq_3312i_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("CledqI", Cledq_3313i_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("CledqI", Cledq_3321i_LNP / LambdaNP2, 2, 2, 1, 0);
    RGevol.SetCoefficient("CledqI", Cledq_3322i_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("CledqI", Cledq_3323i_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("CledqI", Cledq_3331i_LNP / LambdaNP2, 2, 2, 2, 0);
    RGevol.SetCoefficient("CledqI", Cledq_3332i_LNP / LambdaNP2, 2, 2, 2, 1);
    RGevol.SetCoefficient("CledqI", Cledq_3333i_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cqq1R", Cqq1_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cqq1R", Cqq1_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("Cqq1R", Cqq1_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cqq1R", Cqq1_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("Cqq1R", Cqq1_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cqq1R", Cqq1_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Cqq1R", Cqq1_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cqq1R", Cqq1_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("Cqq1I", Cqq1_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cqq1I", Cqq1_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cqq1I", Cqq1_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cqq1I", Cqq1_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cqq1I", Cqq1_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cqq1I", Cqq1_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cqq1I", Cqq1_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cqq1I", Cqq1_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cqq1I", Cqq1_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cqq1I", Cqq1_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cqq1I", Cqq1_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cqq1I", Cqq1_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cqq1I", Cqq1_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cqq1I", Cqq1_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cqq1I", Cqq1_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cqq1I", Cqq1_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cqq1I", Cqq1_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cqq1I", Cqq1_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cqq3R", Cqq3_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cqq3R", Cqq3_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("Cqq3R", Cqq3_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cqq3R", Cqq3_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("Cqq3R", Cqq3_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cqq3R", Cqq3_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Cqq3R", Cqq3_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cqq3R", Cqq3_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("Cqq3I", Cqq3_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cqq3I", Cqq3_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cqq3I", Cqq3_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cqq3I", Cqq3_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cqq3I", Cqq3_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cqq3I", Cqq3_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cqq3I", Cqq3_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cqq3I", Cqq3_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cqq3I", Cqq3_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cqq3I", Cqq3_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cqq3I", Cqq3_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cqq3I", Cqq3_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cqq3I", Cqq3_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cqq3I", Cqq3_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cqq3I", Cqq3_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cqq3I", Cqq3_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cqq3I", Cqq3_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cqq3I", Cqq3_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CuuR", Cuu_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("CuuR", Cuu_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CuuR", Cuu_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CuuR", Cuu_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("CuuR", Cuu_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CuuR", Cuu_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("CuuR", Cuu_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CuuR", Cuu_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CuuR", Cuu_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("CuuR", Cuu_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CuuR", Cuu_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CuuR", Cuu_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CuuR", Cuu_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CuuR", Cuu_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CuuR", Cuu_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CuuR", Cuu_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CuuR", Cuu_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CuuR", Cuu_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("CuuR", Cuu_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CuuR", Cuu_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CuuR", Cuu_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("CuuR", Cuu_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CuuR", Cuu_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("CuuR", Cuu_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CuuR", Cuu_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("CuuR", Cuu_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CuuR", Cuu_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("CuuI", Cuu_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CuuI", Cuu_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CuuI", Cuu_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CuuI", Cuu_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CuuI", Cuu_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CuuI", Cuu_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CuuI", Cuu_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CuuI", Cuu_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CuuI", Cuu_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CuuI", Cuu_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CuuI", Cuu_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CuuI", Cuu_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CuuI", Cuu_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CuuI", Cuu_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CuuI", Cuu_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CuuI", Cuu_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CuuI", Cuu_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CuuI", Cuu_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CddR", Cdd_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("CddR", Cdd_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CddR", Cdd_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CddR", Cdd_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("CddR", Cdd_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CddR", Cdd_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("CddR", Cdd_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CddR", Cdd_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CddR", Cdd_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("CddR", Cdd_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CddR", Cdd_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CddR", Cdd_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CddR", Cdd_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CddR", Cdd_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CddR", Cdd_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CddR", Cdd_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CddR", Cdd_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CddR", Cdd_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("CddR", Cdd_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CddR", Cdd_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CddR", Cdd_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("CddR", Cdd_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CddR", Cdd_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("CddR", Cdd_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CddR", Cdd_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("CddR", Cdd_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("CddR", Cdd_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("CddI", Cdd_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("CddI", Cdd_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("CddI", Cdd_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("CddI", Cdd_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("CddI", Cdd_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("CddI", Cdd_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("CddI", Cdd_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("CddI", Cdd_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("CddI", Cdd_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("CddI", Cdd_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("CddI", Cdd_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("CddI", Cdd_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("CddI", Cdd_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("CddI", Cdd_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("CddI", Cdd_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("CddI", Cdd_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("CddI", Cdd_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("CddI", Cdd_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cud1R", Cud1_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("Cud1R", Cud1_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cud1R", Cud1_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cud1R", Cud1_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("Cud1R", Cud1_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cud1R", Cud1_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("Cud1R", Cud1_1211r_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Cud1R", Cud1_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cud1R", Cud1_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cud1R", Cud1_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Cud1R", Cud1_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cud1R", Cud1_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cud1R", Cud1_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cud1R", Cud1_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cud1R", Cud1_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cud1R", Cud1_1311r_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Cud1R", Cud1_1312r_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Cud1R", Cud1_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cud1R", Cud1_1321r_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Cud1R", Cud1_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cud1R", Cud1_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cud1R", Cud1_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Cud1R", Cud1_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cud1R", Cud1_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cud1R", Cud1_2211r_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("Cud1R", Cud1_2212r_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Cud1R", Cud1_2213r_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Cud1R", Cud1_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("Cud1R", Cud1_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cud1R", Cud1_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("Cud1R", Cud1_2311r_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Cud1R", Cud1_2312r_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Cud1R", Cud1_2313r_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Cud1R", Cud1_2321r_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Cud1R", Cud1_2322r_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Cud1R", Cud1_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cud1R", Cud1_2331r_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Cud1R", Cud1_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Cud1R", Cud1_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cud1R", Cud1_3311r_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("Cud1R", Cud1_3312r_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Cud1R", Cud1_3313r_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Cud1R", Cud1_3322r_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("Cud1R", Cud1_3323r_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Cud1R", Cud1_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("Cud1I", Cud1_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cud1I", Cud1_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cud1I", Cud1_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cud1I", Cud1_1211i_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Cud1I", Cud1_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cud1I", Cud1_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cud1I", Cud1_1221i_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Cud1I", Cud1_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cud1I", Cud1_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cud1I", Cud1_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cud1I", Cud1_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cud1I", Cud1_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cud1I", Cud1_1311i_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Cud1I", Cud1_1312i_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Cud1I", Cud1_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cud1I", Cud1_1321i_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Cud1I", Cud1_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cud1I", Cud1_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cud1I", Cud1_1331i_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Cud1I", Cud1_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cud1I", Cud1_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cud1I", Cud1_2212i_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Cud1I", Cud1_2213i_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Cud1I", Cud1_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cud1I", Cud1_2311i_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Cud1I", Cud1_2312i_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Cud1I", Cud1_2313i_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Cud1I", Cud1_2321i_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Cud1I", Cud1_2322i_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Cud1I", Cud1_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cud1I", Cud1_2331i_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Cud1I", Cud1_2332i_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Cud1I", Cud1_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cud1I", Cud1_3312i_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Cud1I", Cud1_3313i_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Cud1I", Cud1_3323i_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Cud8R", Cud8_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("Cud8R", Cud8_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cud8R", Cud8_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cud8R", Cud8_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("Cud8R", Cud8_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cud8R", Cud8_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("Cud8R", Cud8_1211r_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Cud8R", Cud8_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cud8R", Cud8_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cud8R", Cud8_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Cud8R", Cud8_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cud8R", Cud8_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cud8R", Cud8_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cud8R", Cud8_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cud8R", Cud8_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cud8R", Cud8_1311r_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Cud8R", Cud8_1312r_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Cud8R", Cud8_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cud8R", Cud8_1321r_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Cud8R", Cud8_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cud8R", Cud8_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cud8R", Cud8_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Cud8R", Cud8_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cud8R", Cud8_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cud8R", Cud8_2211r_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("Cud8R", Cud8_2212r_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Cud8R", Cud8_2213r_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Cud8R", Cud8_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("Cud8R", Cud8_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cud8R", Cud8_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("Cud8R", Cud8_2311r_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Cud8R", Cud8_2312r_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Cud8R", Cud8_2313r_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Cud8R", Cud8_2321r_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Cud8R", Cud8_2322r_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Cud8R", Cud8_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cud8R", Cud8_2331r_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Cud8R", Cud8_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Cud8R", Cud8_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cud8R", Cud8_3311r_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("Cud8R", Cud8_3312r_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Cud8R", Cud8_3313r_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Cud8R", Cud8_3322r_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("Cud8R", Cud8_3323r_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Cud8R", Cud8_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("Cud8I", Cud8_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cud8I", Cud8_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cud8I", Cud8_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cud8I", Cud8_1211i_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Cud8I", Cud8_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cud8I", Cud8_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cud8I", Cud8_1221i_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Cud8I", Cud8_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cud8I", Cud8_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cud8I", Cud8_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cud8I", Cud8_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cud8I", Cud8_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cud8I", Cud8_1311i_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Cud8I", Cud8_1312i_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Cud8I", Cud8_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cud8I", Cud8_1321i_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Cud8I", Cud8_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cud8I", Cud8_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cud8I", Cud8_1331i_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Cud8I", Cud8_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cud8I", Cud8_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cud8I", Cud8_2212i_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Cud8I", Cud8_2213i_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Cud8I", Cud8_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cud8I", Cud8_2311i_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Cud8I", Cud8_2312i_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Cud8I", Cud8_2313i_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Cud8I", Cud8_2321i_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Cud8I", Cud8_2322i_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Cud8I", Cud8_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cud8I", Cud8_2331i_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Cud8I", Cud8_2332i_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Cud8I", Cud8_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cud8I", Cud8_3312i_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Cud8I", Cud8_3313i_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Cud8I", Cud8_3323i_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1211r_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1311r_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1312r_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1321r_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cqu1R", Cqu1_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cqu1R", Cqu1_2211r_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("Cqu1R", Cqu1_2212r_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Cqu1R", Cqu1_2213r_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Cqu1R", Cqu1_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("Cqu1R", Cqu1_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cqu1R", Cqu1_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("Cqu1R", Cqu1_2311r_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Cqu1R", Cqu1_2312r_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Cqu1R", Cqu1_2313r_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Cqu1R", Cqu1_2321r_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Cqu1R", Cqu1_2322r_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Cqu1R", Cqu1_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cqu1R", Cqu1_2331r_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Cqu1R", Cqu1_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Cqu1R", Cqu1_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cqu1R", Cqu1_3311r_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("Cqu1R", Cqu1_3312r_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Cqu1R", Cqu1_3313r_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Cqu1R", Cqu1_3322r_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("Cqu1R", Cqu1_3323r_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Cqu1R", Cqu1_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1211i_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1221i_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1311i_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1312i_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1321i_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1331i_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cqu1I", Cqu1_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cqu1I", Cqu1_2212i_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Cqu1I", Cqu1_2213i_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Cqu1I", Cqu1_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cqu1I", Cqu1_2311i_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Cqu1I", Cqu1_2312i_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Cqu1I", Cqu1_2313i_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Cqu1I", Cqu1_2321i_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Cqu1I", Cqu1_2322i_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Cqu1I", Cqu1_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cqu1I", Cqu1_2331i_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Cqu1I", Cqu1_2332i_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Cqu1I", Cqu1_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cqu1I", Cqu1_3312i_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Cqu1I", Cqu1_3313i_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Cqu1I", Cqu1_3323i_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1211r_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1311r_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1312r_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1321r_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cqu8R", Cqu8_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cqu8R", Cqu8_2211r_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("Cqu8R", Cqu8_2212r_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Cqu8R", Cqu8_2213r_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Cqu8R", Cqu8_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("Cqu8R", Cqu8_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cqu8R", Cqu8_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("Cqu8R", Cqu8_2311r_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Cqu8R", Cqu8_2312r_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Cqu8R", Cqu8_2313r_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Cqu8R", Cqu8_2321r_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Cqu8R", Cqu8_2322r_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Cqu8R", Cqu8_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cqu8R", Cqu8_2331r_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Cqu8R", Cqu8_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Cqu8R", Cqu8_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cqu8R", Cqu8_3311r_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("Cqu8R", Cqu8_3312r_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Cqu8R", Cqu8_3313r_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Cqu8R", Cqu8_3322r_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("Cqu8R", Cqu8_3323r_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Cqu8R", Cqu8_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1211i_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1221i_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1311i_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1312i_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1321i_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1331i_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cqu8I", Cqu8_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cqu8I", Cqu8_2212i_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Cqu8I", Cqu8_2213i_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Cqu8I", Cqu8_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cqu8I", Cqu8_2311i_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Cqu8I", Cqu8_2312i_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Cqu8I", Cqu8_2313i_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Cqu8I", Cqu8_2321i_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Cqu8I", Cqu8_2322i_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Cqu8I", Cqu8_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cqu8I", Cqu8_2331i_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Cqu8I", Cqu8_2332i_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Cqu8I", Cqu8_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cqu8I", Cqu8_3312i_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Cqu8I", Cqu8_3313i_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Cqu8I", Cqu8_3323i_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1211r_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1311r_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1312r_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1321r_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cqd1R", Cqd1_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cqd1R", Cqd1_2211r_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("Cqd1R", Cqd1_2212r_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Cqd1R", Cqd1_2213r_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Cqd1R", Cqd1_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("Cqd1R", Cqd1_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cqd1R", Cqd1_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("Cqd1R", Cqd1_2311r_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Cqd1R", Cqd1_2312r_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Cqd1R", Cqd1_2313r_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Cqd1R", Cqd1_2321r_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Cqd1R", Cqd1_2322r_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Cqd1R", Cqd1_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cqd1R", Cqd1_2331r_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Cqd1R", Cqd1_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Cqd1R", Cqd1_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cqd1R", Cqd1_3311r_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("Cqd1R", Cqd1_3312r_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Cqd1R", Cqd1_3313r_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Cqd1R", Cqd1_3322r_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("Cqd1R", Cqd1_3323r_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Cqd1R", Cqd1_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1211i_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1221i_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1311i_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1312i_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1321i_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1331i_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cqd1I", Cqd1_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cqd1I", Cqd1_2212i_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Cqd1I", Cqd1_2213i_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Cqd1I", Cqd1_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cqd1I", Cqd1_2311i_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Cqd1I", Cqd1_2312i_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Cqd1I", Cqd1_2313i_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Cqd1I", Cqd1_2321i_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Cqd1I", Cqd1_2322i_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Cqd1I", Cqd1_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cqd1I", Cqd1_2331i_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Cqd1I", Cqd1_2332i_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Cqd1I", Cqd1_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cqd1I", Cqd1_3312i_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Cqd1I", Cqd1_3313i_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Cqd1I", Cqd1_3323i_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1211r_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1311r_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1312r_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1321r_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cqd8R", Cqd8_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cqd8R", Cqd8_2211r_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("Cqd8R", Cqd8_2212r_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Cqd8R", Cqd8_2213r_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Cqd8R", Cqd8_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("Cqd8R", Cqd8_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cqd8R", Cqd8_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("Cqd8R", Cqd8_2311r_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Cqd8R", Cqd8_2312r_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Cqd8R", Cqd8_2313r_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Cqd8R", Cqd8_2321r_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Cqd8R", Cqd8_2322r_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Cqd8R", Cqd8_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cqd8R", Cqd8_2331r_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Cqd8R", Cqd8_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Cqd8R", Cqd8_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cqd8R", Cqd8_3311r_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("Cqd8R", Cqd8_3312r_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Cqd8R", Cqd8_3313r_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Cqd8R", Cqd8_3322r_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("Cqd8R", Cqd8_3323r_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Cqd8R", Cqd8_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1211i_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1221i_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1311i_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1312i_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1321i_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1331i_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cqd8I", Cqd8_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cqd8I", Cqd8_2212i_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Cqd8I", Cqd8_2213i_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Cqd8I", Cqd8_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cqd8I", Cqd8_2311i_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Cqd8I", Cqd8_2312i_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Cqd8I", Cqd8_2313i_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Cqd8I", Cqd8_2321i_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Cqd8I", Cqd8_2322i_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Cqd8I", Cqd8_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cqd8I", Cqd8_2331i_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Cqd8I", Cqd8_2332i_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Cqd8I", Cqd8_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cqd8I", Cqd8_3312i_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Cqd8I", Cqd8_3313i_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Cqd8I", Cqd8_3323i_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1121r_LNP / LambdaNP2, 0, 0, 1, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1131r_LNP / LambdaNP2, 0, 0, 2, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1132r_LNP / LambdaNP2, 0, 0, 2, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1211r_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1311r_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1312r_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1321r_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2111r_LNP / LambdaNP2, 1, 0, 0, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2112r_LNP / LambdaNP2, 1, 0, 0, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2113r_LNP / LambdaNP2, 1, 0, 0, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2121r_LNP / LambdaNP2, 1, 0, 1, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2122r_LNP / LambdaNP2, 1, 0, 1, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2123r_LNP / LambdaNP2, 1, 0, 1, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2131r_LNP / LambdaNP2, 1, 0, 2, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2132r_LNP / LambdaNP2, 1, 0, 2, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2133r_LNP / LambdaNP2, 1, 0, 2, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2211r_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2212r_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2213r_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2221r_LNP / LambdaNP2, 1, 1, 1, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2231r_LNP / LambdaNP2, 1, 1, 2, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2232r_LNP / LambdaNP2, 1, 1, 2, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2311r_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2312r_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2313r_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2321r_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2322r_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2331r_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3111r_LNP / LambdaNP2, 2, 0, 0, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3112r_LNP / LambdaNP2, 2, 0, 0, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3113r_LNP / LambdaNP2, 2, 0, 0, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3121r_LNP / LambdaNP2, 2, 0, 1, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3122r_LNP / LambdaNP2, 2, 0, 1, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3123r_LNP / LambdaNP2, 2, 0, 1, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3131r_LNP / LambdaNP2, 2, 0, 2, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3132r_LNP / LambdaNP2, 2, 0, 2, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3133r_LNP / LambdaNP2, 2, 0, 2, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3211r_LNP / LambdaNP2, 2, 1, 0, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3212r_LNP / LambdaNP2, 2, 1, 0, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3213r_LNP / LambdaNP2, 2, 1, 0, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3221r_LNP / LambdaNP2, 2, 1, 1, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3222r_LNP / LambdaNP2, 2, 1, 1, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3223r_LNP / LambdaNP2, 2, 1, 1, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3231r_LNP / LambdaNP2, 2, 1, 2, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3232r_LNP / LambdaNP2, 2, 1, 2, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3233r_LNP / LambdaNP2, 2, 1, 2, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3311r_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3312r_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3313r_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3321r_LNP / LambdaNP2, 2, 2, 1, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3322r_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3323r_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3331r_LNP / LambdaNP2, 2, 2, 2, 0);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3332r_LNP / LambdaNP2, 2, 2, 2, 1);
    RGevol.SetCoefficient("Cquqd1R", Cquqd1_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1111i_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1121i_LNP / LambdaNP2, 0, 0, 1, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1122i_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1131i_LNP / LambdaNP2, 0, 0, 2, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1132i_LNP / LambdaNP2, 0, 0, 2, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1133i_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1211i_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1221i_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1311i_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1312i_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1321i_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1331i_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2111i_LNP / LambdaNP2, 1, 0, 0, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2112i_LNP / LambdaNP2, 1, 0, 0, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2113i_LNP / LambdaNP2, 1, 0, 0, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2121i_LNP / LambdaNP2, 1, 0, 1, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2122i_LNP / LambdaNP2, 1, 0, 1, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2123i_LNP / LambdaNP2, 1, 0, 1, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2131i_LNP / LambdaNP2, 1, 0, 2, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2132i_LNP / LambdaNP2, 1, 0, 2, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2133i_LNP / LambdaNP2, 1, 0, 2, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2211i_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2212i_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2213i_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2221i_LNP / LambdaNP2, 1, 1, 1, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2222i_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2231i_LNP / LambdaNP2, 1, 1, 2, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2232i_LNP / LambdaNP2, 1, 1, 2, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2233i_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2311i_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2312i_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2313i_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2321i_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2322i_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2331i_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2332i_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3111i_LNP / LambdaNP2, 2, 0, 0, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3112i_LNP / LambdaNP2, 2, 0, 0, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3113i_LNP / LambdaNP2, 2, 0, 0, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3121i_LNP / LambdaNP2, 2, 0, 1, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3122i_LNP / LambdaNP2, 2, 0, 1, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3123i_LNP / LambdaNP2, 2, 0, 1, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3131i_LNP / LambdaNP2, 2, 0, 2, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3132i_LNP / LambdaNP2, 2, 0, 2, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3133i_LNP / LambdaNP2, 2, 0, 2, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3211i_LNP / LambdaNP2, 2, 1, 0, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3212i_LNP / LambdaNP2, 2, 1, 0, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3213i_LNP / LambdaNP2, 2, 1, 0, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3221i_LNP / LambdaNP2, 2, 1, 1, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3222i_LNP / LambdaNP2, 2, 1, 1, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3223i_LNP / LambdaNP2, 2, 1, 1, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3231i_LNP / LambdaNP2, 2, 1, 2, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3232i_LNP / LambdaNP2, 2, 1, 2, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3233i_LNP / LambdaNP2, 2, 1, 2, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3311i_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3312i_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3313i_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3321i_LNP / LambdaNP2, 2, 2, 1, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3322i_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3323i_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3331i_LNP / LambdaNP2, 2, 2, 2, 0);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3332i_LNP / LambdaNP2, 2, 2, 2, 1);
    RGevol.SetCoefficient("Cquqd1I", Cquqd1_3333i_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1121r_LNP / LambdaNP2, 0, 0, 1, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1131r_LNP / LambdaNP2, 0, 0, 2, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1132r_LNP / LambdaNP2, 0, 0, 2, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1211r_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1311r_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1312r_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1321r_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2111r_LNP / LambdaNP2, 1, 0, 0, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2112r_LNP / LambdaNP2, 1, 0, 0, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2113r_LNP / LambdaNP2, 1, 0, 0, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2121r_LNP / LambdaNP2, 1, 0, 1, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2122r_LNP / LambdaNP2, 1, 0, 1, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2123r_LNP / LambdaNP2, 1, 0, 1, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2131r_LNP / LambdaNP2, 1, 0, 2, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2132r_LNP / LambdaNP2, 1, 0, 2, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2133r_LNP / LambdaNP2, 1, 0, 2, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2211r_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2212r_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2213r_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2221r_LNP / LambdaNP2, 1, 1, 1, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2231r_LNP / LambdaNP2, 1, 1, 2, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2232r_LNP / LambdaNP2, 1, 1, 2, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2311r_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2312r_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2313r_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2321r_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2322r_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2331r_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3111r_LNP / LambdaNP2, 2, 0, 0, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3112r_LNP / LambdaNP2, 2, 0, 0, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3113r_LNP / LambdaNP2, 2, 0, 0, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3121r_LNP / LambdaNP2, 2, 0, 1, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3122r_LNP / LambdaNP2, 2, 0, 1, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3123r_LNP / LambdaNP2, 2, 0, 1, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3131r_LNP / LambdaNP2, 2, 0, 2, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3132r_LNP / LambdaNP2, 2, 0, 2, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3133r_LNP / LambdaNP2, 2, 0, 2, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3211r_LNP / LambdaNP2, 2, 1, 0, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3212r_LNP / LambdaNP2, 2, 1, 0, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3213r_LNP / LambdaNP2, 2, 1, 0, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3221r_LNP / LambdaNP2, 2, 1, 1, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3222r_LNP / LambdaNP2, 2, 1, 1, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3223r_LNP / LambdaNP2, 2, 1, 1, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3231r_LNP / LambdaNP2, 2, 1, 2, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3232r_LNP / LambdaNP2, 2, 1, 2, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3233r_LNP / LambdaNP2, 2, 1, 2, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3311r_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3312r_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3313r_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3321r_LNP / LambdaNP2, 2, 2, 1, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3322r_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3323r_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3331r_LNP / LambdaNP2, 2, 2, 2, 0);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3332r_LNP / LambdaNP2, 2, 2, 2, 1);
    RGevol.SetCoefficient("Cquqd8R", Cquqd8_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1111i_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1121i_LNP / LambdaNP2, 0, 0, 1, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1122i_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1131i_LNP / LambdaNP2, 0, 0, 2, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1132i_LNP / LambdaNP2, 0, 0, 2, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1133i_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1211i_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1221i_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1311i_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1312i_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1321i_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1331i_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2111i_LNP / LambdaNP2, 1, 0, 0, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2112i_LNP / LambdaNP2, 1, 0, 0, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2113i_LNP / LambdaNP2, 1, 0, 0, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2121i_LNP / LambdaNP2, 1, 0, 1, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2122i_LNP / LambdaNP2, 1, 0, 1, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2123i_LNP / LambdaNP2, 1, 0, 1, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2131i_LNP / LambdaNP2, 1, 0, 2, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2132i_LNP / LambdaNP2, 1, 0, 2, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2133i_LNP / LambdaNP2, 1, 0, 2, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2211i_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2212i_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2213i_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2221i_LNP / LambdaNP2, 1, 1, 1, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2222i_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2231i_LNP / LambdaNP2, 1, 1, 2, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2232i_LNP / LambdaNP2, 1, 1, 2, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2233i_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2311i_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2312i_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2313i_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2321i_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2322i_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2331i_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2332i_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3111i_LNP / LambdaNP2, 2, 0, 0, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3112i_LNP / LambdaNP2, 2, 0, 0, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3113i_LNP / LambdaNP2, 2, 0, 0, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3121i_LNP / LambdaNP2, 2, 0, 1, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3122i_LNP / LambdaNP2, 2, 0, 1, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3123i_LNP / LambdaNP2, 2, 0, 1, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3131i_LNP / LambdaNP2, 2, 0, 2, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3132i_LNP / LambdaNP2, 2, 0, 2, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3133i_LNP / LambdaNP2, 2, 0, 2, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3211i_LNP / LambdaNP2, 2, 1, 0, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3212i_LNP / LambdaNP2, 2, 1, 0, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3213i_LNP / LambdaNP2, 2, 1, 0, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3221i_LNP / LambdaNP2, 2, 1, 1, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3222i_LNP / LambdaNP2, 2, 1, 1, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3223i_LNP / LambdaNP2, 2, 1, 1, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3231i_LNP / LambdaNP2, 2, 1, 2, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3232i_LNP / LambdaNP2, 2, 1, 2, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3233i_LNP / LambdaNP2, 2, 1, 2, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3311i_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3312i_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3313i_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3321i_LNP / LambdaNP2, 2, 2, 1, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3322i_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3323i_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3331i_LNP / LambdaNP2, 2, 2, 2, 0);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3332i_LNP / LambdaNP2, 2, 2, 2, 1);
    RGevol.SetCoefficient("Cquqd8I", Cquqd8_3333i_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1121r_LNP / LambdaNP2, 0, 0, 1, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1131r_LNP / LambdaNP2, 0, 0, 2, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1132r_LNP / LambdaNP2, 0, 0, 2, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1211r_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1311r_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1312r_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1321r_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2111r_LNP / LambdaNP2, 1, 0, 0, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2112r_LNP / LambdaNP2, 1, 0, 0, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2113r_LNP / LambdaNP2, 1, 0, 0, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2121r_LNP / LambdaNP2, 1, 0, 1, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2122r_LNP / LambdaNP2, 1, 0, 1, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2123r_LNP / LambdaNP2, 1, 0, 1, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2131r_LNP / LambdaNP2, 1, 0, 2, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2132r_LNP / LambdaNP2, 1, 0, 2, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2133r_LNP / LambdaNP2, 1, 0, 2, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2211r_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2212r_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2213r_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2221r_LNP / LambdaNP2, 1, 1, 1, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2231r_LNP / LambdaNP2, 1, 1, 2, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2232r_LNP / LambdaNP2, 1, 1, 2, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2311r_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2312r_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2313r_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2321r_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2322r_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2331r_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3111r_LNP / LambdaNP2, 2, 0, 0, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3112r_LNP / LambdaNP2, 2, 0, 0, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3113r_LNP / LambdaNP2, 2, 0, 0, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3121r_LNP / LambdaNP2, 2, 0, 1, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3122r_LNP / LambdaNP2, 2, 0, 1, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3123r_LNP / LambdaNP2, 2, 0, 1, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3131r_LNP / LambdaNP2, 2, 0, 2, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3132r_LNP / LambdaNP2, 2, 0, 2, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3133r_LNP / LambdaNP2, 2, 0, 2, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3211r_LNP / LambdaNP2, 2, 1, 0, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3212r_LNP / LambdaNP2, 2, 1, 0, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3213r_LNP / LambdaNP2, 2, 1, 0, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3221r_LNP / LambdaNP2, 2, 1, 1, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3222r_LNP / LambdaNP2, 2, 1, 1, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3223r_LNP / LambdaNP2, 2, 1, 1, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3231r_LNP / LambdaNP2, 2, 1, 2, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3232r_LNP / LambdaNP2, 2, 1, 2, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3233r_LNP / LambdaNP2, 2, 1, 2, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3311r_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3312r_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3313r_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3321r_LNP / LambdaNP2, 2, 2, 1, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3322r_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3323r_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3331r_LNP / LambdaNP2, 2, 2, 2, 0);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3332r_LNP / LambdaNP2, 2, 2, 2, 1);
    RGevol.SetCoefficient("Clequ1R", Clequ1_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1111i_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1121i_LNP / LambdaNP2, 0, 0, 1, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1122i_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1131i_LNP / LambdaNP2, 0, 0, 2, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1132i_LNP / LambdaNP2, 0, 0, 2, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1133i_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1211i_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1221i_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1311i_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1312i_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1321i_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1331i_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2111i_LNP / LambdaNP2, 1, 0, 0, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2112i_LNP / LambdaNP2, 1, 0, 0, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2113i_LNP / LambdaNP2, 1, 0, 0, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2121i_LNP / LambdaNP2, 1, 0, 1, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2122i_LNP / LambdaNP2, 1, 0, 1, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2123i_LNP / LambdaNP2, 1, 0, 1, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2131i_LNP / LambdaNP2, 1, 0, 2, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2132i_LNP / LambdaNP2, 1, 0, 2, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2133i_LNP / LambdaNP2, 1, 0, 2, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2211i_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2212i_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2213i_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2221i_LNP / LambdaNP2, 1, 1, 1, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2222i_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2231i_LNP / LambdaNP2, 1, 1, 2, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2232i_LNP / LambdaNP2, 1, 1, 2, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2233i_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2311i_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2312i_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2313i_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2321i_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2322i_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2331i_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2332i_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3111i_LNP / LambdaNP2, 2, 0, 0, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3112i_LNP / LambdaNP2, 2, 0, 0, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3113i_LNP / LambdaNP2, 2, 0, 0, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3121i_LNP / LambdaNP2, 2, 0, 1, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3122i_LNP / LambdaNP2, 2, 0, 1, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3123i_LNP / LambdaNP2, 2, 0, 1, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3131i_LNP / LambdaNP2, 2, 0, 2, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3132i_LNP / LambdaNP2, 2, 0, 2, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3133i_LNP / LambdaNP2, 2, 0, 2, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3211i_LNP / LambdaNP2, 2, 1, 0, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3212i_LNP / LambdaNP2, 2, 1, 0, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3213i_LNP / LambdaNP2, 2, 1, 0, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3221i_LNP / LambdaNP2, 2, 1, 1, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3222i_LNP / LambdaNP2, 2, 1, 1, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3223i_LNP / LambdaNP2, 2, 1, 1, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3231i_LNP / LambdaNP2, 2, 1, 2, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3232i_LNP / LambdaNP2, 2, 1, 2, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3233i_LNP / LambdaNP2, 2, 1, 2, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3311i_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3312i_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3313i_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3321i_LNP / LambdaNP2, 2, 2, 1, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3322i_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3323i_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3331i_LNP / LambdaNP2, 2, 2, 2, 0);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3332i_LNP / LambdaNP2, 2, 2, 2, 1);
    RGevol.SetCoefficient("Clequ1I", Clequ1_3333i_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1111r_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1112r_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1113r_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1121r_LNP / LambdaNP2, 0, 0, 1, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1122r_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1123r_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1131r_LNP / LambdaNP2, 0, 0, 2, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1132r_LNP / LambdaNP2, 0, 0, 2, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1133r_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1211r_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1212r_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1213r_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1221r_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1222r_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1223r_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1231r_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1232r_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1233r_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1311r_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1312r_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1313r_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1321r_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1322r_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1323r_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1331r_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1332r_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_1333r_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2111r_LNP / LambdaNP2, 1, 0, 0, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2112r_LNP / LambdaNP2, 1, 0, 0, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2113r_LNP / LambdaNP2, 1, 0, 0, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2121r_LNP / LambdaNP2, 1, 0, 1, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2122r_LNP / LambdaNP2, 1, 0, 1, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2123r_LNP / LambdaNP2, 1, 0, 1, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2131r_LNP / LambdaNP2, 1, 0, 2, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2132r_LNP / LambdaNP2, 1, 0, 2, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2133r_LNP / LambdaNP2, 1, 0, 2, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2211r_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2212r_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2213r_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2221r_LNP / LambdaNP2, 1, 1, 1, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2222r_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2223r_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2231r_LNP / LambdaNP2, 1, 1, 2, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2232r_LNP / LambdaNP2, 1, 1, 2, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2233r_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2311r_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2312r_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2313r_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2321r_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2322r_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2323r_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2331r_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2332r_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_2333r_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3111r_LNP / LambdaNP2, 2, 0, 0, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3112r_LNP / LambdaNP2, 2, 0, 0, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3113r_LNP / LambdaNP2, 2, 0, 0, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3121r_LNP / LambdaNP2, 2, 0, 1, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3122r_LNP / LambdaNP2, 2, 0, 1, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3123r_LNP / LambdaNP2, 2, 0, 1, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3131r_LNP / LambdaNP2, 2, 0, 2, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3132r_LNP / LambdaNP2, 2, 0, 2, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3133r_LNP / LambdaNP2, 2, 0, 2, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3211r_LNP / LambdaNP2, 2, 1, 0, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3212r_LNP / LambdaNP2, 2, 1, 0, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3213r_LNP / LambdaNP2, 2, 1, 0, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3221r_LNP / LambdaNP2, 2, 1, 1, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3222r_LNP / LambdaNP2, 2, 1, 1, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3223r_LNP / LambdaNP2, 2, 1, 1, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3231r_LNP / LambdaNP2, 2, 1, 2, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3232r_LNP / LambdaNP2, 2, 1, 2, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3233r_LNP / LambdaNP2, 2, 1, 2, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3311r_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3312r_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3313r_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3321r_LNP / LambdaNP2, 2, 2, 1, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3322r_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3323r_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3331r_LNP / LambdaNP2, 2, 2, 2, 0);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3332r_LNP / LambdaNP2, 2, 2, 2, 1);
    RGevol.SetCoefficient("Clequ3R", Clequ3_3333r_LNP / LambdaNP2, 2, 2, 2, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1111i_LNP / LambdaNP2, 0, 0, 0, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1112i_LNP / LambdaNP2, 0, 0, 0, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1113i_LNP / LambdaNP2, 0, 0, 0, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1121i_LNP / LambdaNP2, 0, 0, 1, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1122i_LNP / LambdaNP2, 0, 0, 1, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1123i_LNP / LambdaNP2, 0, 0, 1, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1131i_LNP / LambdaNP2, 0, 0, 2, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1132i_LNP / LambdaNP2, 0, 0, 2, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1133i_LNP / LambdaNP2, 0, 0, 2, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1211i_LNP / LambdaNP2, 0, 1, 0, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1212i_LNP / LambdaNP2, 0, 1, 0, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1213i_LNP / LambdaNP2, 0, 1, 0, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1221i_LNP / LambdaNP2, 0, 1, 1, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1222i_LNP / LambdaNP2, 0, 1, 1, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1223i_LNP / LambdaNP2, 0, 1, 1, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1231i_LNP / LambdaNP2, 0, 1, 2, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1232i_LNP / LambdaNP2, 0, 1, 2, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1233i_LNP / LambdaNP2, 0, 1, 2, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1311i_LNP / LambdaNP2, 0, 2, 0, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1312i_LNP / LambdaNP2, 0, 2, 0, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1313i_LNP / LambdaNP2, 0, 2, 0, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1321i_LNP / LambdaNP2, 0, 2, 1, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1322i_LNP / LambdaNP2, 0, 2, 1, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1323i_LNP / LambdaNP2, 0, 2, 1, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1331i_LNP / LambdaNP2, 0, 2, 2, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1332i_LNP / LambdaNP2, 0, 2, 2, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_1333i_LNP / LambdaNP2, 0, 2, 2, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2111i_LNP / LambdaNP2, 1, 0, 0, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2112i_LNP / LambdaNP2, 1, 0, 0, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2113i_LNP / LambdaNP2, 1, 0, 0, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2121i_LNP / LambdaNP2, 1, 0, 1, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2122i_LNP / LambdaNP2, 1, 0, 1, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2123i_LNP / LambdaNP2, 1, 0, 1, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2131i_LNP / LambdaNP2, 1, 0, 2, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2132i_LNP / LambdaNP2, 1, 0, 2, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2133i_LNP / LambdaNP2, 1, 0, 2, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2211i_LNP / LambdaNP2, 1, 1, 0, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2212i_LNP / LambdaNP2, 1, 1, 0, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2213i_LNP / LambdaNP2, 1, 1, 0, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2221i_LNP / LambdaNP2, 1, 1, 1, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2222i_LNP / LambdaNP2, 1, 1, 1, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2223i_LNP / LambdaNP2, 1, 1, 1, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2231i_LNP / LambdaNP2, 1, 1, 2, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2232i_LNP / LambdaNP2, 1, 1, 2, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2233i_LNP / LambdaNP2, 1, 1, 2, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2311i_LNP / LambdaNP2, 1, 2, 0, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2312i_LNP / LambdaNP2, 1, 2, 0, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2313i_LNP / LambdaNP2, 1, 2, 0, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2321i_LNP / LambdaNP2, 1, 2, 1, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2322i_LNP / LambdaNP2, 1, 2, 1, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2323i_LNP / LambdaNP2, 1, 2, 1, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2331i_LNP / LambdaNP2, 1, 2, 2, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2332i_LNP / LambdaNP2, 1, 2, 2, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_2333i_LNP / LambdaNP2, 1, 2, 2, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3111i_LNP / LambdaNP2, 2, 0, 0, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3112i_LNP / LambdaNP2, 2, 0, 0, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3113i_LNP / LambdaNP2, 2, 0, 0, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3121i_LNP / LambdaNP2, 2, 0, 1, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3122i_LNP / LambdaNP2, 2, 0, 1, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3123i_LNP / LambdaNP2, 2, 0, 1, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3131i_LNP / LambdaNP2, 2, 0, 2, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3132i_LNP / LambdaNP2, 2, 0, 2, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3133i_LNP / LambdaNP2, 2, 0, 2, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3211i_LNP / LambdaNP2, 2, 1, 0, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3212i_LNP / LambdaNP2, 2, 1, 0, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3213i_LNP / LambdaNP2, 2, 1, 0, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3221i_LNP / LambdaNP2, 2, 1, 1, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3222i_LNP / LambdaNP2, 2, 1, 1, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3223i_LNP / LambdaNP2, 2, 1, 1, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3231i_LNP / LambdaNP2, 2, 1, 2, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3232i_LNP / LambdaNP2, 2, 1, 2, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3233i_LNP / LambdaNP2, 2, 1, 2, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3311i_LNP / LambdaNP2, 2, 2, 0, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3312i_LNP / LambdaNP2, 2, 2, 0, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3313i_LNP / LambdaNP2, 2, 2, 0, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3321i_LNP / LambdaNP2, 2, 2, 1, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3322i_LNP / LambdaNP2, 2, 2, 1, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3323i_LNP / LambdaNP2, 2, 2, 1, 2);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3331i_LNP / LambdaNP2, 2, 2, 2, 0);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3332i_LNP / LambdaNP2, 2, 2, 2, 1);
    RGevol.SetCoefficient("Clequ3I", Clequ3_3333i_LNP / LambdaNP2, 2, 2, 2, 2);


}

void NPSMEFTd6General::printNonVanishingSMEFTCoeffEW() const {

    if (SMEFTEvolEW.GetCoefficient("g1") != 0.) std::cout << "g1 = " << SMEFTEvolEW.GetCoefficient("g1") << std::endl;
    if (SMEFTEvolEW.GetCoefficient("g2") != 0.) std::cout << "g2 = " << SMEFTEvolEW.GetCoefficient("g2") << std::endl;
    if (SMEFTEvolEW.GetCoefficient("g3") != 0.) std::cout << "g3 = " << SMEFTEvolEW.GetCoefficient("g3") << std::endl;
    if (SMEFTEvolEW.GetCoefficient("lambda") != 0.) std::cout << "lambda = " << SMEFTEvolEW.GetCoefficient("lambda") << std::endl;
    if (SMEFTEvolEW.GetCoefficient("mh2") != 0.) std::cout << "mh2 = " << SMEFTEvolEW.GetCoefficient("mh2") << std::endl;

    if (SMEFTEvolEW.GetCKMAngle("s12") != 0.) std::cout << "s12 = " << SMEFTEvolEW.GetCKMAngle("s12") << std::endl;
    if (SMEFTEvolEW.GetCKMAngle("s23") != 0.) std::cout << "s23 = " << SMEFTEvolEW.GetCKMAngle("s23") << std::endl;
    if (SMEFTEvolEW.GetCKMAngle("s13") != 0.) std::cout << "s13 = " << SMEFTEvolEW.GetCKMAngle("s13") << std::endl;
    if (SMEFTEvolEW.GetCKMPhase() != 0.) std::cout << "delta = " << SMEFTEvolEW.GetCKMPhase() << std::endl;

    if (SMEFTEvolEW.GetCoefficient("YuR", 0, 0) != 0.) std::cout << "YuR" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("YuR", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YuI", 0, 0) != 0.) std::cout << "YuI" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("YuI", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YuR", 0, 1) != 0.) std::cout << "YuR" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("YuR", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YuI", 0, 1) != 0.) std::cout << "YuI" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("YuI", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YuR", 0, 2) != 0.) std::cout << "YuR" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("YuR", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YuI", 0, 2) != 0.) std::cout << "YuI" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("YuI", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YuR", 1, 0) != 0.) std::cout << "YuR" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("YuR", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YuI", 1, 0) != 0.) std::cout << "YuI" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("YuI", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YuR", 1, 1) != 0.) std::cout << "YuR" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("YuR", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YuI", 1, 1) != 0.) std::cout << "YuI" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("YuI", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YuR", 1, 2) != 0.) std::cout << "YuR" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("YuR", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YuI", 1, 2) != 0.) std::cout << "YuI" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("YuI", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YuR", 2, 0) != 0.) std::cout << "YuR" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("YuR", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YuI", 2, 0) != 0.) std::cout << "YuI" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("YuI", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YuR", 2, 1) != 0.) std::cout << "YuR" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("YuR", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YuI", 2, 1) != 0.) std::cout << "YuI" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("YuI", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YuR", 2, 2) != 0.) std::cout << "YuR" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("YuR", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YuI", 2, 2) != 0.) std::cout << "YuI" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("YuI", 2, 2) << std::endl;

    if (SMEFTEvolEW.GetCoefficient("YdR", 0, 0) != 0.) std::cout << "YdR" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("YdR", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YdI", 0, 0) != 0.) std::cout << "YdI" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("YdI", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YdR", 0, 1) != 0.) std::cout << "YdR" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("YdR", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YdI", 0, 1) != 0.) std::cout << "YdI" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("YdI", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YdR", 0, 2) != 0.) std::cout << "YdR" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("YdR", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YdI", 0, 2) != 0.) std::cout << "YdI" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("YdI", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YdR", 1, 0) != 0.) std::cout << "YdR" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("YdR", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YdI", 1, 0) != 0.) std::cout << "YdI" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("YdI", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YdR", 1, 1) != 0.) std::cout << "YdR" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("YdR", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YdI", 1, 1) != 0.) std::cout << "YdI" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("YdI", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YdR", 1, 2) != 0.) std::cout << "YdR" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("YdR", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YdI", 1, 2) != 0.) std::cout << "YdI" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("YdI", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YdR", 2, 0) != 0.) std::cout << "YdR" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("YdR", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YdI", 2, 0) != 0.) std::cout << "YdI" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("YdI", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YdR", 2, 1) != 0.) std::cout << "YdR" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("YdR", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YdI", 2, 1) != 0.) std::cout << "YdI" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("YdI", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YdR", 2, 2) != 0.) std::cout << "YdR" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("YdR", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YdI", 2, 2) != 0.) std::cout << "YdI" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("YdI", 2, 2) << std::endl;

    if (SMEFTEvolEW.GetCoefficient("YeR", 0, 0) != 0.) std::cout << "YeR" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("YeR", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YeI", 0, 0) != 0.) std::cout << "YeI" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("YeI", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YeR", 0, 1) != 0.) std::cout << "YeR" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("YeR", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YeI", 0, 1) != 0.) std::cout << "YeI" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("YeI", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YeR", 0, 2) != 0.) std::cout << "YeR" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("YeR", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YeI", 0, 2) != 0.) std::cout << "YeI" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("YeI", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YeR", 1, 0) != 0.) std::cout << "YeR" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("YeR", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YeI", 1, 0) != 0.) std::cout << "YeI" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("YeI", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YeR", 1, 1) != 0.) std::cout << "YeR" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("YeR", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YeI", 1, 1) != 0.) std::cout << "YeI" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("YeI", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YeR", 1, 2) != 0.) std::cout << "YeR" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("YeR", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YeI", 1, 2) != 0.) std::cout << "YeI" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("YeI", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YeR", 2, 0) != 0.) std::cout << "YeR" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("YeR", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YeI", 2, 0) != 0.) std::cout << "YeI" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("YeI", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YeR", 2, 1) != 0.) std::cout << "YeR" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("YeR", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YeI", 2, 1) != 0.) std::cout << "YeI" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("YeI", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YeR", 2, 2) != 0.) std::cout << "YeR" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("YeR", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("YeI", 2, 2) != 0.) std::cout << "YeI" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("YeI", 2, 2) << std::endl;


    if (SMEFTEvolEW.GetCoefficient("CG") != 0.) std::cout << "CG = " << SMEFTEvolEW.GetCoefficient("CG") << std::endl;

    if (SMEFTEvolEW.GetCoefficient("CW") != 0.) std::cout << "CW" << " = " << SMEFTEvolEW.GetCoefficient("CW") << std::endl;

    if (SMEFTEvolEW.GetCoefficient("CHG") != 0.) std::cout << "CHG" << " = " << SMEFTEvolEW.GetCoefficient("CHG") << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHW") != 0.) std::cout << "CHW" << " = " << SMEFTEvolEW.GetCoefficient("CHW") << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHB") != 0.) std::cout << "CHB" << " = " << SMEFTEvolEW.GetCoefficient("CHB") << std::endl;

    if (SMEFTEvolEW.GetCoefficient("CHWB") != 0.) std::cout << "CHWB" << " = " << SMEFTEvolEW.GetCoefficient("CHWB") << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHD") != 0.) std::cout << "CHD" << " = " << SMEFTEvolEW.GetCoefficient("CHD") << std::endl;

    if (SMEFTEvolEW.GetCoefficient("CHbox") != 0.) std::cout << "CHbox" << " = " << SMEFTEvolEW.GetCoefficient("CHbox") << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CH") != 0.) std::cout << "CH" << " = " << SMEFTEvolEW.GetCoefficient("CH") << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CGtilde") != 0.) std::cout << "CGtilde" << " = " << SMEFTEvolEW.GetCoefficient("CGtilde") << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CWtilde") != 0.) std::cout << "CWtilde" << " = " << SMEFTEvolEW.GetCoefficient("CWtilde") << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHGtilde") != 0.) std::cout << "CHGtilde" << " = " << SMEFTEvolEW.GetCoefficient("CHGtilde") << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHWtilde") != 0.) std::cout << "CHWtilde" << " = " << SMEFTEvolEW.GetCoefficient("CHWtilde") << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHBtilde") != 0.) std::cout << "CHBtilde" << " = " << SMEFTEvolEW.GetCoefficient("CHBtilde") << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHWtildeB") != 0.) std::cout << "CHWtildeB" << " = " << SMEFTEvolEW.GetCoefficient("CHWtildeB") << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHl1R", 0, 0) != 0.) std::cout << "CHl1R" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CHl1R", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHl1R", 0, 1) != 0.) std::cout << "CHl1R" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHl1R", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHl1R", 0, 2) != 0.) std::cout << "CHl1R" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHl1R", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHl1R", 1, 1) != 0.) std::cout << "CHl1R" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHl1R", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHl1R", 1, 2) != 0.) std::cout << "CHl1R" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHl1R", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHl1R", 2, 2) != 0.) std::cout << "CHl1R" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHl1R", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHl1I", 0, 1) != 0.) std::cout << "CHl1I" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHl1I", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHl1I", 0, 2) != 0.) std::cout << "CHl1I" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHl1I", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHl1I", 1, 2) != 0.) std::cout << "CHl1I" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHl1I", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHl3R", 0, 0) != 0.) std::cout << "CHl3R" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CHl3R", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHl3R", 0, 1) != 0.) std::cout << "CHl3R" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHl3R", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHl3R", 0, 2) != 0.) std::cout << "CHl3R" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHl3R", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHl3R", 1, 1) != 0.) std::cout << "CHl3R" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHl3R", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHl3R", 1, 2) != 0.) std::cout << "CHl3R" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHl3R", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHl3R", 2, 2) != 0.) std::cout << "CHl3R" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHl3R", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHl3I", 0, 1) != 0.) std::cout << "CHl3I" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHl3I", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHl3I", 0, 2) != 0.) std::cout << "CHl3I" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHl3I", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHl3I", 1, 2) != 0.) std::cout << "CHl3I" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHl3I", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHeR", 0, 0) != 0.) std::cout << "CHeR" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CHeR", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHeR", 0, 1) != 0.) std::cout << "CHeR" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHeR", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHeR", 0, 2) != 0.) std::cout << "CHeR" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHeR", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHeR", 1, 1) != 0.) std::cout << "CHeR" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHeR", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHeR", 1, 2) != 0.) std::cout << "CHeR" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHeR", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHeR", 2, 2) != 0.) std::cout << "CHeR" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHeR", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHeI", 0, 1) != 0.) std::cout << "CHeI" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHeI", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHeI", 0, 2) != 0.) std::cout << "CHeI" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHeI", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHeI", 1, 2) != 0.) std::cout << "CHeI" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHeI", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHq1R", 0, 0) != 0.) std::cout << "CHq1R" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CHq1R", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHq1R", 0, 1) != 0.) std::cout << "CHq1R" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHq1R", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHq1R", 0, 2) != 0.) std::cout << "CHq1R" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHq1R", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHq1R", 1, 1) != 0.) std::cout << "CHq1R" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHq1R", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHq1R", 1, 2) != 0.) std::cout << "CHq1R" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHq1R", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHq1R", 2, 2) != 0.) std::cout << "CHq1R" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHq1R", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHq1I", 0, 1) != 0.) std::cout << "CHq1I" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHq1I", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHq1I", 0, 2) != 0.) std::cout << "CHq1I" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHq1I", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHq1I", 1, 2) != 0.) std::cout << "CHq1I" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHq1I", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHq3R", 0, 0) != 0.) std::cout << "CHq3R" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CHq3R", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHq3R", 0, 1) != 0.) std::cout << "CHq3R" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHq3R", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHq3R", 0, 2) != 0.) std::cout << "CHq3R" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHq3R", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHq3R", 1, 1) != 0.) std::cout << "CHq3R" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHq3R", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHq3R", 1, 2) != 0.) std::cout << "CHq3R" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHq3R", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHq3R", 2, 2) != 0.) std::cout << "CHq3R" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHq3R", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHq3I", 0, 1) != 0.) std::cout << "CHq3I" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHq3I", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHq3I", 0, 2) != 0.) std::cout << "CHq3I" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHq3I", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHq3I", 1, 2) != 0.) std::cout << "CHq3I" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHq3I", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHuR", 0, 0) != 0.) std::cout << "CHuR" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CHuR", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHuR", 0, 1) != 0.) std::cout << "CHuR" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHuR", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHuR", 0, 2) != 0.) std::cout << "CHuR" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHuR", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHuR", 1, 1) != 0.) std::cout << "CHuR" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHuR", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHuR", 1, 2) != 0.) std::cout << "CHuR" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHuR", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHuR", 2, 2) != 0.) std::cout << "CHuR" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHuR", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHuI", 0, 1) != 0.) std::cout << "CHuI" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHuI", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHuI", 0, 2) != 0.) std::cout << "CHuI" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHuI", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHuI", 1, 2) != 0.) std::cout << "CHuI" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHuI", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHdR", 0, 0) != 0.) std::cout << "CHdR" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CHdR", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHdR", 0, 1) != 0.) std::cout << "CHdR" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHdR", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHdR", 0, 2) != 0.) std::cout << "CHdR" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHdR", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHdR", 1, 1) != 0.) std::cout << "CHdR" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHdR", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHdR", 1, 2) != 0.) std::cout << "CHdR" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHdR", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHdR", 2, 2) != 0.) std::cout << "CHdR" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHdR", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHdI", 0, 1) != 0.) std::cout << "CHdI" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHdI", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHdI", 0, 2) != 0.) std::cout << "CHdI" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHdI", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHdI", 1, 2) != 0.) std::cout << "CHdI" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHdI", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHudR", 0, 0) != 0.) std::cout << "CHudR" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CHudR", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHudR", 0, 1) != 0.) std::cout << "CHudR" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHudR", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHudR", 0, 2) != 0.) std::cout << "CHudR" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHudR", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHudR", 1, 0) != 0.) std::cout << "CHudR" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CHudR", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHudR", 1, 1) != 0.) std::cout << "CHudR" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHudR", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHudR", 1, 2) != 0.) std::cout << "CHudR" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHudR", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHudR", 2, 0) != 0.) std::cout << "CHudR" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CHudR", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHudR", 2, 1) != 0.) std::cout << "CHudR" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHudR", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHudR", 2, 2) != 0.) std::cout << "CHudR" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHudR", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHudI", 0, 0) != 0.) std::cout << "CHudI" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CHudI", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHudI", 0, 1) != 0.) std::cout << "CHudI" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHudI", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHudI", 0, 2) != 0.) std::cout << "CHudI" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHudI", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHudI", 1, 0) != 0.) std::cout << "CHudI" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CHudI", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHudI", 1, 1) != 0.) std::cout << "CHudI" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHudI", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHudI", 1, 2) != 0.) std::cout << "CHudI" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHudI", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHudI", 2, 0) != 0.) std::cout << "CHudI" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CHudI", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHudI", 2, 1) != 0.) std::cout << "CHudI" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CHudI", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CHudI", 2, 2) != 0.) std::cout << "CHudI" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CHudI", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeHR", 0, 0) != 0.) std::cout << "CeHR" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeHR", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeHR", 0, 1) != 0.) std::cout << "CeHR" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeHR", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeHR", 0, 2) != 0.) std::cout << "CeHR" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeHR", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeHR", 1, 0) != 0.) std::cout << "CeHR" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeHR", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeHR", 1, 1) != 0.) std::cout << "CeHR" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeHR", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeHR", 1, 2) != 0.) std::cout << "CeHR" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeHR", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeHR", 2, 0) != 0.) std::cout << "CeHR" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeHR", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeHR", 2, 1) != 0.) std::cout << "CeHR" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeHR", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeHR", 2, 2) != 0.) std::cout << "CeHR" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeHR", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeHI", 0, 0) != 0.) std::cout << "CeHI" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeHI", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeHI", 0, 1) != 0.) std::cout << "CeHI" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeHI", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeHI", 0, 2) != 0.) std::cout << "CeHI" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeHI", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeHI", 1, 0) != 0.) std::cout << "CeHI" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeHI", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeHI", 1, 1) != 0.) std::cout << "CeHI" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeHI", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeHI", 1, 2) != 0.) std::cout << "CeHI" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeHI", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeHI", 2, 0) != 0.) std::cout << "CeHI" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeHI", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeHI", 2, 1) != 0.) std::cout << "CeHI" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeHI", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeHI", 2, 2) != 0.) std::cout << "CeHI" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeHI", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuHR", 0, 0) != 0.) std::cout << "CuHR" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuHR", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuHR", 0, 1) != 0.) std::cout << "CuHR" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuHR", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuHR", 0, 2) != 0.) std::cout << "CuHR" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuHR", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuHR", 1, 0) != 0.) std::cout << "CuHR" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuHR", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuHR", 1, 1) != 0.) std::cout << "CuHR" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuHR", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuHR", 1, 2) != 0.) std::cout << "CuHR" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuHR", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuHR", 2, 0) != 0.) std::cout << "CuHR" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuHR", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuHR", 2, 1) != 0.) std::cout << "CuHR" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuHR", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuHR", 2, 2) != 0.) std::cout << "CuHR" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuHR", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuHI", 0, 0) != 0.) std::cout << "CuHI" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuHI", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuHI", 0, 1) != 0.) std::cout << "CuHI" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuHI", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuHI", 0, 2) != 0.) std::cout << "CuHI" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuHI", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuHI", 1, 0) != 0.) std::cout << "CuHI" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuHI", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuHI", 1, 1) != 0.) std::cout << "CuHI" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuHI", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuHI", 1, 2) != 0.) std::cout << "CuHI" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuHI", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuHI", 2, 0) != 0.) std::cout << "CuHI" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuHI", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuHI", 2, 1) != 0.) std::cout << "CuHI" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuHI", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuHI", 2, 2) != 0.) std::cout << "CuHI" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuHI", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdHR", 0, 0) != 0.) std::cout << "CdHR" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdHR", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdHR", 0, 1) != 0.) std::cout << "CdHR" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdHR", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdHR", 0, 2) != 0.) std::cout << "CdHR" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdHR", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdHR", 1, 0) != 0.) std::cout << "CdHR" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdHR", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdHR", 1, 1) != 0.) std::cout << "CdHR" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdHR", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdHR", 1, 2) != 0.) std::cout << "CdHR" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdHR", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdHR", 2, 0) != 0.) std::cout << "CdHR" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdHR", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdHR", 2, 1) != 0.) std::cout << "CdHR" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdHR", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdHR", 2, 2) != 0.) std::cout << "CdHR" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdHR", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdHI", 0, 0) != 0.) std::cout << "CdHI" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdHI", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdHI", 0, 1) != 0.) std::cout << "CdHI" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdHI", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdHI", 0, 2) != 0.) std::cout << "CdHI" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdHI", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdHI", 1, 0) != 0.) std::cout << "CdHI" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdHI", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdHI", 1, 1) != 0.) std::cout << "CdHI" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdHI", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdHI", 1, 2) != 0.) std::cout << "CdHI" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdHI", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdHI", 2, 0) != 0.) std::cout << "CdHI" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdHI", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdHI", 2, 1) != 0.) std::cout << "CdHI" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdHI", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdHI", 2, 2) != 0.) std::cout << "CdHI" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdHI", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuGR", 0, 0) != 0.) std::cout << "CuGR" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuGR", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuGR", 0, 1) != 0.) std::cout << "CuGR" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuGR", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuGR", 0, 2) != 0.) std::cout << "CuGR" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuGR", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuGR", 1, 0) != 0.) std::cout << "CuGR" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuGR", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuGR", 1, 1) != 0.) std::cout << "CuGR" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuGR", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuGR", 1, 2) != 0.) std::cout << "CuGR" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuGR", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuGR", 2, 0) != 0.) std::cout << "CuGR" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuGR", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuGR", 2, 1) != 0.) std::cout << "CuGR" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuGR", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuGR", 2, 2) != 0.) std::cout << "CuGR" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuGR", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuGI", 0, 0) != 0.) std::cout << "CuGI" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuGI", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuGI", 0, 1) != 0.) std::cout << "CuGI" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuGI", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuGI", 0, 2) != 0.) std::cout << "CuGI" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuGI", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuGI", 1, 0) != 0.) std::cout << "CuGI" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuGI", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuGI", 1, 1) != 0.) std::cout << "CuGI" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuGI", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuGI", 1, 2) != 0.) std::cout << "CuGI" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuGI", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuGI", 2, 0) != 0.) std::cout << "CuGI" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuGI", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuGI", 2, 1) != 0.) std::cout << "CuGI" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuGI", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuGI", 2, 2) != 0.) std::cout << "CuGI" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuGI", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuWR", 0, 0) != 0.) std::cout << "CuWR" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuWR", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuWR", 0, 1) != 0.) std::cout << "CuWR" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuWR", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuWR", 0, 2) != 0.) std::cout << "CuWR" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuWR", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuWR", 1, 0) != 0.) std::cout << "CuWR" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuWR", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuWR", 1, 1) != 0.) std::cout << "CuWR" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuWR", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuWR", 1, 2) != 0.) std::cout << "CuWR" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuWR", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuWR", 2, 0) != 0.) std::cout << "CuWR" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuWR", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuWR", 2, 1) != 0.) std::cout << "CuWR" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuWR", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuWR", 2, 2) != 0.) std::cout << "CuWR" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuWR", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuWI", 0, 0) != 0.) std::cout << "CuWI" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuWI", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuWI", 0, 1) != 0.) std::cout << "CuWI" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuWI", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuWI", 0, 2) != 0.) std::cout << "CuWI" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuWI", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuWI", 1, 0) != 0.) std::cout << "CuWI" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuWI", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuWI", 1, 1) != 0.) std::cout << "CuWI" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuWI", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuWI", 1, 2) != 0.) std::cout << "CuWI" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuWI", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuWI", 2, 0) != 0.) std::cout << "CuWI" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuWI", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuWI", 2, 1) != 0.) std::cout << "CuWI" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuWI", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuWI", 2, 2) != 0.) std::cout << "CuWI" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuWI", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuBR", 0, 0) != 0.) std::cout << "CuBR" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuBR", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuBR", 0, 1) != 0.) std::cout << "CuBR" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuBR", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuBR", 0, 2) != 0.) std::cout << "CuBR" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuBR", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuBR", 1, 0) != 0.) std::cout << "CuBR" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuBR", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuBR", 1, 1) != 0.) std::cout << "CuBR" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuBR", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuBR", 1, 2) != 0.) std::cout << "CuBR" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuBR", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuBR", 2, 0) != 0.) std::cout << "CuBR" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuBR", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuBR", 2, 1) != 0.) std::cout << "CuBR" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuBR", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuBR", 2, 2) != 0.) std::cout << "CuBR" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuBR", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuBI", 0, 0) != 0.) std::cout << "CuBI" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuBI", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuBI", 0, 1) != 0.) std::cout << "CuBI" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuBI", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuBI", 0, 2) != 0.) std::cout << "CuBI" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuBI", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuBI", 1, 0) != 0.) std::cout << "CuBI" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuBI", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuBI", 1, 1) != 0.) std::cout << "CuBI" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuBI", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuBI", 1, 2) != 0.) std::cout << "CuBI" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuBI", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuBI", 2, 0) != 0.) std::cout << "CuBI" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuBI", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuBI", 2, 1) != 0.) std::cout << "CuBI" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuBI", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuBI", 2, 2) != 0.) std::cout << "CuBI" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuBI", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdGR", 0, 0) != 0.) std::cout << "CdGR" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdGR", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdGR", 0, 1) != 0.) std::cout << "CdGR" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdGR", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdGR", 0, 2) != 0.) std::cout << "CdGR" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdGR", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdGR", 1, 0) != 0.) std::cout << "CdGR" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdGR", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdGR", 1, 1) != 0.) std::cout << "CdGR" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdGR", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdGR", 1, 2) != 0.) std::cout << "CdGR" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdGR", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdGR", 2, 0) != 0.) std::cout << "CdGR" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdGR", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdGR", 2, 1) != 0.) std::cout << "CdGR" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdGR", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdGR", 2, 2) != 0.) std::cout << "CdGR" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdGR", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdGI", 0, 0) != 0.) std::cout << "CdGI" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdGI", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdGI", 0, 1) != 0.) std::cout << "CdGI" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdGI", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdGI", 0, 2) != 0.) std::cout << "CdGI" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdGI", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdGI", 1, 0) != 0.) std::cout << "CdGI" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdGI", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdGI", 1, 1) != 0.) std::cout << "CdGI" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdGI", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdGI", 1, 2) != 0.) std::cout << "CdGI" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdGI", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdGI", 2, 0) != 0.) std::cout << "CdGI" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdGI", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdGI", 2, 1) != 0.) std::cout << "CdGI" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdGI", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdGI", 2, 2) != 0.) std::cout << "CdGI" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdGI", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdWR", 0, 0) != 0.) std::cout << "CdWR" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdWR", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdWR", 0, 1) != 0.) std::cout << "CdWR" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdWR", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdWR", 0, 2) != 0.) std::cout << "CdWR" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdWR", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdWR", 1, 0) != 0.) std::cout << "CdWR" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdWR", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdWR", 1, 1) != 0.) std::cout << "CdWR" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdWR", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdWR", 1, 2) != 0.) std::cout << "CdWR" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdWR", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdWR", 2, 0) != 0.) std::cout << "CdWR" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdWR", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdWR", 2, 1) != 0.) std::cout << "CdWR" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdWR", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdWR", 2, 2) != 0.) std::cout << "CdWR" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdWR", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdWI", 0, 0) != 0.) std::cout << "CdWI" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdWI", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdWI", 0, 1) != 0.) std::cout << "CdWI" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdWI", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdWI", 0, 2) != 0.) std::cout << "CdWI" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdWI", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdWI", 1, 0) != 0.) std::cout << "CdWI" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdWI", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdWI", 1, 1) != 0.) std::cout << "CdWI" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdWI", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdWI", 1, 2) != 0.) std::cout << "CdWI" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdWI", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdWI", 2, 0) != 0.) std::cout << "CdWI" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdWI", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdWI", 2, 1) != 0.) std::cout << "CdWI" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdWI", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdWI", 2, 2) != 0.) std::cout << "CdWI" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdWI", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdBR", 0, 0) != 0.) std::cout << "CdBR" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdBR", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdBR", 0, 1) != 0.) std::cout << "CdBR" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdBR", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdBR", 0, 2) != 0.) std::cout << "CdBR" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdBR", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdBR", 1, 0) != 0.) std::cout << "CdBR" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdBR", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdBR", 1, 1) != 0.) std::cout << "CdBR" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdBR", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdBR", 1, 2) != 0.) std::cout << "CdBR" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdBR", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdBR", 2, 0) != 0.) std::cout << "CdBR" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdBR", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdBR", 2, 1) != 0.) std::cout << "CdBR" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdBR", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdBR", 2, 2) != 0.) std::cout << "CdBR" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdBR", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdBI", 0, 0) != 0.) std::cout << "CdBI" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdBI", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdBI", 0, 1) != 0.) std::cout << "CdBI" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdBI", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdBI", 0, 2) != 0.) std::cout << "CdBI" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdBI", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdBI", 1, 0) != 0.) std::cout << "CdBI" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdBI", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdBI", 1, 1) != 0.) std::cout << "CdBI" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdBI", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdBI", 1, 2) != 0.) std::cout << "CdBI" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdBI", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdBI", 2, 0) != 0.) std::cout << "CdBI" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CdBI", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdBI", 2, 1) != 0.) std::cout << "CdBI" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CdBI", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CdBI", 2, 2) != 0.) std::cout << "CdBI" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CdBI", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeWR", 0, 0) != 0.) std::cout << "CeWR" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeWR", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeWR", 0, 1) != 0.) std::cout << "CeWR" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeWR", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeWR", 0, 2) != 0.) std::cout << "CeWR" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeWR", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeWR", 1, 0) != 0.) std::cout << "CeWR" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeWR", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeWR", 1, 1) != 0.) std::cout << "CeWR" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeWR", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeWR", 1, 2) != 0.) std::cout << "CeWR" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeWR", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeWR", 2, 0) != 0.) std::cout << "CeWR" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeWR", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeWR", 2, 1) != 0.) std::cout << "CeWR" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeWR", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeWR", 2, 2) != 0.) std::cout << "CeWR" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeWR", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeWI", 0, 0) != 0.) std::cout << "CeWI" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeWI", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeWI", 0, 1) != 0.) std::cout << "CeWI" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeWI", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeWI", 0, 2) != 0.) std::cout << "CeWI" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeWI", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeWI", 1, 0) != 0.) std::cout << "CeWI" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeWI", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeWI", 1, 1) != 0.) std::cout << "CeWI" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeWI", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeWI", 1, 2) != 0.) std::cout << "CeWI" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeWI", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeWI", 2, 0) != 0.) std::cout << "CeWI" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeWI", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeWI", 2, 1) != 0.) std::cout << "CeWI" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeWI", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeWI", 2, 2) != 0.) std::cout << "CeWI" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeWI", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeBR", 0, 0) != 0.) std::cout << "CeBR" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeBR", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeBR", 0, 1) != 0.) std::cout << "CeBR" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeBR", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeBR", 0, 2) != 0.) std::cout << "CeBR" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeBR", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeBR", 1, 0) != 0.) std::cout << "CeBR" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeBR", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeBR", 1, 1) != 0.) std::cout << "CeBR" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeBR", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeBR", 1, 2) != 0.) std::cout << "CeBR" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeBR", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeBR", 2, 0) != 0.) std::cout << "CeBR" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeBR", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeBR", 2, 1) != 0.) std::cout << "CeBR" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeBR", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeBR", 2, 2) != 0.) std::cout << "CeBR" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeBR", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeBI", 0, 0) != 0.) std::cout << "CeBI" << ", 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeBI", 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeBI", 0, 1) != 0.) std::cout << "CeBI" << ", 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeBI", 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeBI", 0, 2) != 0.) std::cout << "CeBI" << ", 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeBI", 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeBI", 1, 0) != 0.) std::cout << "CeBI" << ", 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeBI", 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeBI", 1, 1) != 0.) std::cout << "CeBI" << ", 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeBI", 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeBI", 1, 2) != 0.) std::cout << "CeBI" << ", 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeBI", 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeBI", 2, 0) != 0.) std::cout << "CeBI" << ", 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeBI", 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeBI", 2, 1) != 0.) std::cout << "CeBI" << ", 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeBI", 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeBI", 2, 2) != 0.) std::cout << "CeBI" << ", 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeBI", 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 0, 0, 0) != 0.) std::cout << "CllR" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 0, 0, 1) != 0.) std::cout << "CllR" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 0, 0, 2) != 0.) std::cout << "CllR" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 0, 1, 1) != 0.) std::cout << "CllR" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 0, 1, 2) != 0.) std::cout << "CllR" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 0, 2, 2) != 0.) std::cout << "CllR" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 1, 0, 1) != 0.) std::cout << "CllR" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 1, 0, 2) != 0.) std::cout << "CllR" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 1, 1, 0) != 0.) std::cout << "CllR" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 1, 1, 1) != 0.) std::cout << "CllR" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 1, 1, 2) != 0.) std::cout << "CllR" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 1, 2, 0) != 0.) std::cout << "CllR" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 1, 2, 1) != 0.) std::cout << "CllR" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 1, 2, 2) != 0.) std::cout << "CllR" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 2, 0, 2) != 0.) std::cout << "CllR" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 2, 1, 1) != 0.) std::cout << "CllR" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 2, 1, 2) != 0.) std::cout << "CllR" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 2, 2, 0) != 0.) std::cout << "CllR" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 2, 2, 1) != 0.) std::cout << "CllR" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 0, 2, 2, 2) != 0.) std::cout << "CllR" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 1, 1, 1, 1) != 0.) std::cout << "CllR" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 1, 1, 1, 2) != 0.) std::cout << "CllR" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 1, 1, 2, 2) != 0.) std::cout << "CllR" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 1, 2, 1, 2) != 0.) std::cout << "CllR" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 1, 2, 2, 1) != 0.) std::cout << "CllR" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 1, 2, 2, 2) != 0.) std::cout << "CllR" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllR", 2, 2, 2, 2) != 0.) std::cout << "CllR" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllR", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllI", 0, 0, 0, 1) != 0.) std::cout << "CllI" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CllI", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllI", 0, 0, 0, 2) != 0.) std::cout << "CllI" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllI", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllI", 0, 0, 1, 2) != 0.) std::cout << "CllI" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllI", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllI", 0, 1, 0, 1) != 0.) std::cout << "CllI" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CllI", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllI", 0, 1, 0, 2) != 0.) std::cout << "CllI" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllI", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllI", 0, 1, 1, 1) != 0.) std::cout << "CllI" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CllI", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllI", 0, 1, 1, 2) != 0.) std::cout << "CllI" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllI", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllI", 0, 1, 2, 0) != 0.) std::cout << "CllI" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CllI", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllI", 0, 1, 2, 1) != 0.) std::cout << "CllI" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CllI", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllI", 0, 1, 2, 2) != 0.) std::cout << "CllI" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllI", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllI", 0, 2, 0, 2) != 0.) std::cout << "CllI" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllI", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllI", 0, 2, 1, 1) != 0.) std::cout << "CllI" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CllI", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllI", 0, 2, 1, 2) != 0.) std::cout << "CllI" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllI", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllI", 0, 2, 2, 1) != 0.) std::cout << "CllI" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CllI", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllI", 0, 2, 2, 2) != 0.) std::cout << "CllI" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllI", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllI", 1, 1, 1, 2) != 0.) std::cout << "CllI" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllI", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllI", 1, 2, 1, 2) != 0.) std::cout << "CllI" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllI", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CllI", 1, 2, 2, 2) != 0.) std::cout << "CllI" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CllI", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 0, 0, 0) != 0.) std::cout << "Clq1R" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 0, 0, 1) != 0.) std::cout << "Clq1R" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 0, 0, 2) != 0.) std::cout << "Clq1R" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 0, 1, 1) != 0.) std::cout << "Clq1R" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 0, 1, 2) != 0.) std::cout << "Clq1R" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 0, 2, 2) != 0.) std::cout << "Clq1R" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 1, 0, 0) != 0.) std::cout << "Clq1R" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 1, 0, 1) != 0.) std::cout << "Clq1R" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 1, 0, 2) != 0.) std::cout << "Clq1R" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 1, 1, 0) != 0.) std::cout << "Clq1R" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 1, 1, 1) != 0.) std::cout << "Clq1R" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 1, 1, 2) != 0.) std::cout << "Clq1R" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 1, 2, 0) != 0.) std::cout << "Clq1R" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 1, 2, 1) != 0.) std::cout << "Clq1R" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 1, 2, 2) != 0.) std::cout << "Clq1R" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 2, 0, 0) != 0.) std::cout << "Clq1R" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 2, 0, 1) != 0.) std::cout << "Clq1R" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 2, 0, 2) != 0.) std::cout << "Clq1R" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 2, 1, 0) != 0.) std::cout << "Clq1R" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 2, 1, 1) != 0.) std::cout << "Clq1R" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 2, 1, 2) != 0.) std::cout << "Clq1R" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 2, 2, 0) != 0.) std::cout << "Clq1R" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 2, 2, 1) != 0.) std::cout << "Clq1R" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 0, 2, 2, 2) != 0.) std::cout << "Clq1R" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 1, 1, 0, 0) != 0.) std::cout << "Clq1R" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 1, 1, 0, 1) != 0.) std::cout << "Clq1R" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 1, 1, 0, 2) != 0.) std::cout << "Clq1R" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 1, 1, 1, 1) != 0.) std::cout << "Clq1R" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 1, 1, 1, 2) != 0.) std::cout << "Clq1R" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 1, 1, 2, 2) != 0.) std::cout << "Clq1R" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 1, 2, 0, 0) != 0.) std::cout << "Clq1R" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 1, 2, 0, 1) != 0.) std::cout << "Clq1R" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 1, 2, 0, 2) != 0.) std::cout << "Clq1R" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 1, 2, 1, 0) != 0.) std::cout << "Clq1R" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 1, 2, 1, 1) != 0.) std::cout << "Clq1R" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 1, 2, 1, 2) != 0.) std::cout << "Clq1R" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 1, 2, 2, 0) != 0.) std::cout << "Clq1R" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 1, 2, 2, 1) != 0.) std::cout << "Clq1R" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 1, 2, 2, 2) != 0.) std::cout << "Clq1R" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 2, 2, 0, 0) != 0.) std::cout << "Clq1R" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 2, 2, 0, 1) != 0.) std::cout << "Clq1R" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 2, 2, 0, 2) != 0.) std::cout << "Clq1R" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 2, 2, 1, 1) != 0.) std::cout << "Clq1R" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 2, 2, 1, 2) != 0.) std::cout << "Clq1R" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1R", 2, 2, 2, 2) != 0.) std::cout << "Clq1R" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1R", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 0, 0, 1) != 0.) std::cout << "Clq1I" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 0, 0, 2) != 0.) std::cout << "Clq1I" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 0, 1, 2) != 0.) std::cout << "Clq1I" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 1, 0, 0) != 0.) std::cout << "Clq1I" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 1, 0, 1) != 0.) std::cout << "Clq1I" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 1, 0, 2) != 0.) std::cout << "Clq1I" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 1, 1, 0) != 0.) std::cout << "Clq1I" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 1, 1, 1) != 0.) std::cout << "Clq1I" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 1, 1, 2) != 0.) std::cout << "Clq1I" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 1, 2, 0) != 0.) std::cout << "Clq1I" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 1, 2, 1) != 0.) std::cout << "Clq1I" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 1, 2, 2) != 0.) std::cout << "Clq1I" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 2, 0, 0) != 0.) std::cout << "Clq1I" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 2, 0, 1) != 0.) std::cout << "Clq1I" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 2, 0, 2) != 0.) std::cout << "Clq1I" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 2, 1, 0) != 0.) std::cout << "Clq1I" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 2, 1, 1) != 0.) std::cout << "Clq1I" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 2, 1, 2) != 0.) std::cout << "Clq1I" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 2, 2, 0) != 0.) std::cout << "Clq1I" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 2, 2, 1) != 0.) std::cout << "Clq1I" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 0, 2, 2, 2) != 0.) std::cout << "Clq1I" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 1, 1, 0, 1) != 0.) std::cout << "Clq1I" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 1, 1, 0, 2) != 0.) std::cout << "Clq1I" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 1, 1, 1, 2) != 0.) std::cout << "Clq1I" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 1, 2, 0, 0) != 0.) std::cout << "Clq1I" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 1, 2, 0, 1) != 0.) std::cout << "Clq1I" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 1, 2, 0, 2) != 0.) std::cout << "Clq1I" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 1, 2, 1, 0) != 0.) std::cout << "Clq1I" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 1, 2, 1, 1) != 0.) std::cout << "Clq1I" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 1, 2, 1, 2) != 0.) std::cout << "Clq1I" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 1, 2, 2, 0) != 0.) std::cout << "Clq1I" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 1, 2, 2, 1) != 0.) std::cout << "Clq1I" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 1, 2, 2, 2) != 0.) std::cout << "Clq1I" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 2, 2, 0, 1) != 0.) std::cout << "Clq1I" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 2, 2, 0, 2) != 0.) std::cout << "Clq1I" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq1I", 2, 2, 1, 2) != 0.) std::cout << "Clq1I" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq1I", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 0, 0, 0) != 0.) std::cout << "Clq3R" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 0, 0, 1) != 0.) std::cout << "Clq3R" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 0, 0, 2) != 0.) std::cout << "Clq3R" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 0, 1, 1) != 0.) std::cout << "Clq3R" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 0, 1, 2) != 0.) std::cout << "Clq3R" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 0, 2, 2) != 0.) std::cout << "Clq3R" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 1, 0, 0) != 0.) std::cout << "Clq3R" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 1, 0, 1) != 0.) std::cout << "Clq3R" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 1, 0, 2) != 0.) std::cout << "Clq3R" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 1, 1, 0) != 0.) std::cout << "Clq3R" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 1, 1, 1) != 0.) std::cout << "Clq3R" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 1, 1, 2) != 0.) std::cout << "Clq3R" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 1, 2, 0) != 0.) std::cout << "Clq3R" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 1, 2, 1) != 0.) std::cout << "Clq3R" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 1, 2, 2) != 0.) std::cout << "Clq3R" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 2, 0, 0) != 0.) std::cout << "Clq3R" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 2, 0, 1) != 0.) std::cout << "Clq3R" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 2, 0, 2) != 0.) std::cout << "Clq3R" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 2, 1, 0) != 0.) std::cout << "Clq3R" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 2, 1, 1) != 0.) std::cout << "Clq3R" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 2, 1, 2) != 0.) std::cout << "Clq3R" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 2, 2, 0) != 0.) std::cout << "Clq3R" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 2, 2, 1) != 0.) std::cout << "Clq3R" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 0, 2, 2, 2) != 0.) std::cout << "Clq3R" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 1, 1, 0, 0) != 0.) std::cout << "Clq3R" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 1, 1, 0, 1) != 0.) std::cout << "Clq3R" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 1, 1, 0, 2) != 0.) std::cout << "Clq3R" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 1, 1, 1, 1) != 0.) std::cout << "Clq3R" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 1, 1, 1, 2) != 0.) std::cout << "Clq3R" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 1, 1, 2, 2) != 0.) std::cout << "Clq3R" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 1, 2, 0, 0) != 0.) std::cout << "Clq3R" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 1, 2, 0, 1) != 0.) std::cout << "Clq3R" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 1, 2, 0, 2) != 0.) std::cout << "Clq3R" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 1, 2, 1, 0) != 0.) std::cout << "Clq3R" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 1, 2, 1, 1) != 0.) std::cout << "Clq3R" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 1, 2, 1, 2) != 0.) std::cout << "Clq3R" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 1, 2, 2, 0) != 0.) std::cout << "Clq3R" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 1, 2, 2, 1) != 0.) std::cout << "Clq3R" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 1, 2, 2, 2) != 0.) std::cout << "Clq3R" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 2, 2, 0, 0) != 0.) std::cout << "Clq3R" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 2, 2, 0, 1) != 0.) std::cout << "Clq3R" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 2, 2, 0, 2) != 0.) std::cout << "Clq3R" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 2, 2, 1, 1) != 0.) std::cout << "Clq3R" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 2, 2, 1, 2) != 0.) std::cout << "Clq3R" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3R", 2, 2, 2, 2) != 0.) std::cout << "Clq3R" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3R", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 0, 0, 1) != 0.) std::cout << "Clq3I" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 0, 0, 2) != 0.) std::cout << "Clq3I" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 0, 1, 2) != 0.) std::cout << "Clq3I" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 1, 0, 0) != 0.) std::cout << "Clq3I" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 1, 0, 1) != 0.) std::cout << "Clq3I" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 1, 0, 2) != 0.) std::cout << "Clq3I" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 1, 1, 0) != 0.) std::cout << "Clq3I" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 1, 1, 1) != 0.) std::cout << "Clq3I" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 1, 1, 2) != 0.) std::cout << "Clq3I" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 1, 2, 0) != 0.) std::cout << "Clq3I" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 1, 2, 1) != 0.) std::cout << "Clq3I" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 1, 2, 2) != 0.) std::cout << "Clq3I" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 2, 0, 0) != 0.) std::cout << "Clq3I" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 2, 0, 1) != 0.) std::cout << "Clq3I" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 2, 0, 2) != 0.) std::cout << "Clq3I" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 2, 1, 0) != 0.) std::cout << "Clq3I" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 2, 1, 1) != 0.) std::cout << "Clq3I" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 2, 1, 2) != 0.) std::cout << "Clq3I" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 2, 2, 0) != 0.) std::cout << "Clq3I" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 2, 2, 1) != 0.) std::cout << "Clq3I" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 0, 2, 2, 2) != 0.) std::cout << "Clq3I" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 1, 1, 0, 1) != 0.) std::cout << "Clq3I" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 1, 1, 0, 2) != 0.) std::cout << "Clq3I" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 1, 1, 1, 2) != 0.) std::cout << "Clq3I" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 1, 2, 0, 0) != 0.) std::cout << "Clq3I" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 1, 2, 0, 1) != 0.) std::cout << "Clq3I" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 1, 2, 0, 2) != 0.) std::cout << "Clq3I" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 1, 2, 1, 0) != 0.) std::cout << "Clq3I" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 1, 2, 1, 1) != 0.) std::cout << "Clq3I" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 1, 2, 1, 2) != 0.) std::cout << "Clq3I" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 1, 2, 2, 0) != 0.) std::cout << "Clq3I" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 1, 2, 2, 1) != 0.) std::cout << "Clq3I" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 1, 2, 2, 2) != 0.) std::cout << "Clq3I" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 2, 2, 0, 1) != 0.) std::cout << "Clq3I" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 2, 2, 0, 2) != 0.) std::cout << "Clq3I" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clq3I", 2, 2, 1, 2) != 0.) std::cout << "Clq3I" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clq3I", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 0, 0, 0, 0) != 0.) std::cout << "CeeR" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 0, 0, 0, 1) != 0.) std::cout << "CeeR" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 0, 0, 0, 2) != 0.) std::cout << "CeeR" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 0, 0, 1, 1) != 0.) std::cout << "CeeR" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 0, 0, 1, 2) != 0.) std::cout << "CeeR" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 0, 0, 2, 2) != 0.) std::cout << "CeeR" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 0, 1, 0, 1) != 0.) std::cout << "CeeR" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 0, 1, 0, 2) != 0.) std::cout << "CeeR" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 0, 1, 1, 1) != 0.) std::cout << "CeeR" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 0, 1, 1, 2) != 0.) std::cout << "CeeR" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 0, 1, 2, 1) != 0.) std::cout << "CeeR" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 0, 1, 2, 2) != 0.) std::cout << "CeeR" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 0, 2, 0, 2) != 0.) std::cout << "CeeR" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 0, 2, 1, 2) != 0.) std::cout << "CeeR" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 0, 2, 2, 2) != 0.) std::cout << "CeeR" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 1, 1, 1, 1) != 0.) std::cout << "CeeR" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 1, 1, 1, 2) != 0.) std::cout << "CeeR" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 1, 1, 2, 2) != 0.) std::cout << "CeeR" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 1, 2, 1, 2) != 0.) std::cout << "CeeR" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 1, 2, 2, 2) != 0.) std::cout << "CeeR" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeR", 2, 2, 2, 2) != 0.) std::cout << "CeeR" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeR", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeI", 0, 0, 0, 1) != 0.) std::cout << "CeeI" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeeI", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeI", 0, 0, 0, 2) != 0.) std::cout << "CeeI" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeI", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeI", 0, 0, 1, 2) != 0.) std::cout << "CeeI" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeI", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeI", 0, 1, 0, 1) != 0.) std::cout << "CeeI" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeeI", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeI", 0, 1, 0, 2) != 0.) std::cout << "CeeI" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeI", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeI", 0, 1, 1, 1) != 0.) std::cout << "CeeI" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeeI", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeI", 0, 1, 1, 2) != 0.) std::cout << "CeeI" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeI", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeI", 0, 1, 2, 1) != 0.) std::cout << "CeeI" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeeI", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeI", 0, 1, 2, 2) != 0.) std::cout << "CeeI" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeI", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeI", 0, 2, 0, 2) != 0.) std::cout << "CeeI" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeI", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeI", 0, 2, 1, 2) != 0.) std::cout << "CeeI" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeI", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeI", 0, 2, 2, 2) != 0.) std::cout << "CeeI" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeI", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeI", 1, 1, 1, 2) != 0.) std::cout << "CeeI" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeI", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeI", 1, 2, 1, 2) != 0.) std::cout << "CeeI" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeI", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeeI", 1, 2, 2, 2) != 0.) std::cout << "CeeI" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeeI", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 0, 0, 0) != 0.) std::cout << "CeuR" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 0, 0, 1) != 0.) std::cout << "CeuR" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 0, 0, 2) != 0.) std::cout << "CeuR" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 0, 1, 1) != 0.) std::cout << "CeuR" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 0, 1, 2) != 0.) std::cout << "CeuR" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 0, 2, 2) != 0.) std::cout << "CeuR" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 1, 0, 0) != 0.) std::cout << "CeuR" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 1, 0, 1) != 0.) std::cout << "CeuR" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 1, 0, 2) != 0.) std::cout << "CeuR" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 1, 1, 0) != 0.) std::cout << "CeuR" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 1, 1, 1) != 0.) std::cout << "CeuR" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 1, 1, 2) != 0.) std::cout << "CeuR" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 1, 2, 0) != 0.) std::cout << "CeuR" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 1, 2, 1) != 0.) std::cout << "CeuR" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 1, 2, 2) != 0.) std::cout << "CeuR" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 2, 0, 0) != 0.) std::cout << "CeuR" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 2, 0, 1) != 0.) std::cout << "CeuR" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 2, 0, 2) != 0.) std::cout << "CeuR" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 2, 1, 0) != 0.) std::cout << "CeuR" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 2, 1, 1) != 0.) std::cout << "CeuR" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 2, 1, 2) != 0.) std::cout << "CeuR" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 2, 2, 0) != 0.) std::cout << "CeuR" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 2, 2, 1) != 0.) std::cout << "CeuR" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 0, 2, 2, 2) != 0.) std::cout << "CeuR" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 1, 1, 0, 0) != 0.) std::cout << "CeuR" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 1, 1, 0, 1) != 0.) std::cout << "CeuR" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 1, 1, 0, 2) != 0.) std::cout << "CeuR" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 1, 1, 1, 1) != 0.) std::cout << "CeuR" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 1, 1, 1, 2) != 0.) std::cout << "CeuR" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 1, 1, 2, 2) != 0.) std::cout << "CeuR" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 1, 2, 0, 0) != 0.) std::cout << "CeuR" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 1, 2, 0, 1) != 0.) std::cout << "CeuR" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 1, 2, 0, 2) != 0.) std::cout << "CeuR" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 1, 2, 1, 0) != 0.) std::cout << "CeuR" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 1, 2, 1, 1) != 0.) std::cout << "CeuR" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 1, 2, 1, 2) != 0.) std::cout << "CeuR" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 1, 2, 2, 0) != 0.) std::cout << "CeuR" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 1, 2, 2, 1) != 0.) std::cout << "CeuR" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 1, 2, 2, 2) != 0.) std::cout << "CeuR" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 2, 2, 0, 0) != 0.) std::cout << "CeuR" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 2, 2, 0, 1) != 0.) std::cout << "CeuR" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 2, 2, 0, 2) != 0.) std::cout << "CeuR" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 2, 2, 1, 1) != 0.) std::cout << "CeuR" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 2, 2, 1, 2) != 0.) std::cout << "CeuR" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuR", 2, 2, 2, 2) != 0.) std::cout << "CeuR" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuR", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 0, 0, 1) != 0.) std::cout << "CeuI" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 0, 0, 2) != 0.) std::cout << "CeuI" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 0, 1, 2) != 0.) std::cout << "CeuI" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 1, 0, 0) != 0.) std::cout << "CeuI" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 1, 0, 1) != 0.) std::cout << "CeuI" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 1, 0, 2) != 0.) std::cout << "CeuI" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 1, 1, 0) != 0.) std::cout << "CeuI" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 1, 1, 1) != 0.) std::cout << "CeuI" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 1, 1, 2) != 0.) std::cout << "CeuI" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 1, 2, 0) != 0.) std::cout << "CeuI" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 1, 2, 1) != 0.) std::cout << "CeuI" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 1, 2, 2) != 0.) std::cout << "CeuI" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 2, 0, 0) != 0.) std::cout << "CeuI" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 2, 0, 1) != 0.) std::cout << "CeuI" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 2, 0, 2) != 0.) std::cout << "CeuI" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 2, 1, 0) != 0.) std::cout << "CeuI" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 2, 1, 1) != 0.) std::cout << "CeuI" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 2, 1, 2) != 0.) std::cout << "CeuI" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 2, 2, 0) != 0.) std::cout << "CeuI" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 2, 2, 1) != 0.) std::cout << "CeuI" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 0, 2, 2, 2) != 0.) std::cout << "CeuI" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 1, 1, 0, 1) != 0.) std::cout << "CeuI" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 1, 1, 0, 2) != 0.) std::cout << "CeuI" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 1, 1, 1, 2) != 0.) std::cout << "CeuI" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 1, 2, 0, 0) != 0.) std::cout << "CeuI" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 1, 2, 0, 1) != 0.) std::cout << "CeuI" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 1, 2, 0, 2) != 0.) std::cout << "CeuI" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 1, 2, 1, 0) != 0.) std::cout << "CeuI" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 1, 2, 1, 1) != 0.) std::cout << "CeuI" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 1, 2, 1, 2) != 0.) std::cout << "CeuI" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 1, 2, 2, 0) != 0.) std::cout << "CeuI" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 1, 2, 2, 1) != 0.) std::cout << "CeuI" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 1, 2, 2, 2) != 0.) std::cout << "CeuI" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 2, 2, 0, 1) != 0.) std::cout << "CeuI" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 2, 2, 0, 2) != 0.) std::cout << "CeuI" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CeuI", 2, 2, 1, 2) != 0.) std::cout << "CeuI" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CeuI", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 0, 0, 0) != 0.) std::cout << "CedR" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 0, 0, 1) != 0.) std::cout << "CedR" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 0, 0, 2) != 0.) std::cout << "CedR" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 0, 1, 1) != 0.) std::cout << "CedR" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 0, 1, 2) != 0.) std::cout << "CedR" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 0, 2, 2) != 0.) std::cout << "CedR" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 1, 0, 0) != 0.) std::cout << "CedR" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 1, 0, 1) != 0.) std::cout << "CedR" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 1, 0, 2) != 0.) std::cout << "CedR" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 1, 1, 0) != 0.) std::cout << "CedR" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 1, 1, 1) != 0.) std::cout << "CedR" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 1, 1, 2) != 0.) std::cout << "CedR" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 1, 2, 0) != 0.) std::cout << "CedR" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 1, 2, 1) != 0.) std::cout << "CedR" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 1, 2, 2) != 0.) std::cout << "CedR" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 2, 0, 0) != 0.) std::cout << "CedR" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 2, 0, 1) != 0.) std::cout << "CedR" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 2, 0, 2) != 0.) std::cout << "CedR" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 2, 1, 0) != 0.) std::cout << "CedR" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 2, 1, 1) != 0.) std::cout << "CedR" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 2, 1, 2) != 0.) std::cout << "CedR" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 2, 2, 0) != 0.) std::cout << "CedR" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 2, 2, 1) != 0.) std::cout << "CedR" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 0, 2, 2, 2) != 0.) std::cout << "CedR" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 1, 1, 0, 0) != 0.) std::cout << "CedR" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 1, 1, 0, 1) != 0.) std::cout << "CedR" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 1, 1, 0, 2) != 0.) std::cout << "CedR" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 1, 1, 1, 1) != 0.) std::cout << "CedR" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 1, 1, 1, 2) != 0.) std::cout << "CedR" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 1, 1, 2, 2) != 0.) std::cout << "CedR" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 1, 2, 0, 0) != 0.) std::cout << "CedR" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 1, 2, 0, 1) != 0.) std::cout << "CedR" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 1, 2, 0, 2) != 0.) std::cout << "CedR" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 1, 2, 1, 0) != 0.) std::cout << "CedR" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 1, 2, 1, 1) != 0.) std::cout << "CedR" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 1, 2, 1, 2) != 0.) std::cout << "CedR" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 1, 2, 2, 0) != 0.) std::cout << "CedR" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 1, 2, 2, 1) != 0.) std::cout << "CedR" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 1, 2, 2, 2) != 0.) std::cout << "CedR" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 2, 2, 0, 0) != 0.) std::cout << "CedR" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 2, 2, 0, 1) != 0.) std::cout << "CedR" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 2, 2, 0, 2) != 0.) std::cout << "CedR" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 2, 2, 1, 1) != 0.) std::cout << "CedR" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 2, 2, 1, 2) != 0.) std::cout << "CedR" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedR", 2, 2, 2, 2) != 0.) std::cout << "CedR" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedR", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 0, 0, 1) != 0.) std::cout << "CedI" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 0, 0, 2) != 0.) std::cout << "CedI" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 0, 1, 2) != 0.) std::cout << "CedI" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 1, 0, 0) != 0.) std::cout << "CedI" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 1, 0, 1) != 0.) std::cout << "CedI" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 1, 0, 2) != 0.) std::cout << "CedI" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 1, 1, 0) != 0.) std::cout << "CedI" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 1, 1, 1) != 0.) std::cout << "CedI" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 1, 1, 2) != 0.) std::cout << "CedI" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 1, 2, 0) != 0.) std::cout << "CedI" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 1, 2, 1) != 0.) std::cout << "CedI" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 1, 2, 2) != 0.) std::cout << "CedI" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 2, 0, 0) != 0.) std::cout << "CedI" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 2, 0, 1) != 0.) std::cout << "CedI" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 2, 0, 2) != 0.) std::cout << "CedI" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 2, 1, 0) != 0.) std::cout << "CedI" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 2, 1, 1) != 0.) std::cout << "CedI" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 2, 1, 2) != 0.) std::cout << "CedI" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 2, 2, 0) != 0.) std::cout << "CedI" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 2, 2, 1) != 0.) std::cout << "CedI" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 0, 2, 2, 2) != 0.) std::cout << "CedI" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 1, 1, 0, 1) != 0.) std::cout << "CedI" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 1, 1, 0, 2) != 0.) std::cout << "CedI" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 1, 1, 1, 2) != 0.) std::cout << "CedI" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 1, 2, 0, 0) != 0.) std::cout << "CedI" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 1, 2, 0, 1) != 0.) std::cout << "CedI" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 1, 2, 0, 2) != 0.) std::cout << "CedI" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 1, 2, 1, 0) != 0.) std::cout << "CedI" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 1, 2, 1, 1) != 0.) std::cout << "CedI" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 1, 2, 1, 2) != 0.) std::cout << "CedI" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 1, 2, 2, 0) != 0.) std::cout << "CedI" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 1, 2, 2, 1) != 0.) std::cout << "CedI" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 1, 2, 2, 2) != 0.) std::cout << "CedI" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 2, 2, 0, 1) != 0.) std::cout << "CedI" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 2, 2, 0, 2) != 0.) std::cout << "CedI" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CedI", 2, 2, 1, 2) != 0.) std::cout << "CedI" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CedI", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 0, 0, 0) != 0.) std::cout << "CleR" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 0, 0, 1) != 0.) std::cout << "CleR" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 0, 0, 2) != 0.) std::cout << "CleR" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 0, 1, 1) != 0.) std::cout << "CleR" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 0, 1, 2) != 0.) std::cout << "CleR" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 0, 2, 2) != 0.) std::cout << "CleR" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 1, 0, 0) != 0.) std::cout << "CleR" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 1, 0, 1) != 0.) std::cout << "CleR" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 1, 0, 2) != 0.) std::cout << "CleR" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 1, 1, 0) != 0.) std::cout << "CleR" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 1, 1, 1) != 0.) std::cout << "CleR" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 1, 1, 2) != 0.) std::cout << "CleR" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 1, 2, 0) != 0.) std::cout << "CleR" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 1, 2, 1) != 0.) std::cout << "CleR" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 1, 2, 2) != 0.) std::cout << "CleR" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 2, 0, 0) != 0.) std::cout << "CleR" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 2, 0, 1) != 0.) std::cout << "CleR" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 2, 0, 2) != 0.) std::cout << "CleR" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 2, 1, 0) != 0.) std::cout << "CleR" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 2, 1, 1) != 0.) std::cout << "CleR" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 2, 1, 2) != 0.) std::cout << "CleR" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 2, 2, 0) != 0.) std::cout << "CleR" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 2, 2, 1) != 0.) std::cout << "CleR" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 0, 2, 2, 2) != 0.) std::cout << "CleR" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 1, 1, 0, 0) != 0.) std::cout << "CleR" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 1, 1, 0, 1) != 0.) std::cout << "CleR" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 1, 1, 0, 2) != 0.) std::cout << "CleR" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 1, 1, 1, 1) != 0.) std::cout << "CleR" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 1, 1, 1, 2) != 0.) std::cout << "CleR" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 1, 1, 2, 2) != 0.) std::cout << "CleR" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 1, 2, 0, 0) != 0.) std::cout << "CleR" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 1, 2, 0, 1) != 0.) std::cout << "CleR" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 1, 2, 0, 2) != 0.) std::cout << "CleR" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 1, 2, 1, 0) != 0.) std::cout << "CleR" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 1, 2, 1, 1) != 0.) std::cout << "CleR" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 1, 2, 1, 2) != 0.) std::cout << "CleR" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 1, 2, 2, 0) != 0.) std::cout << "CleR" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 1, 2, 2, 1) != 0.) std::cout << "CleR" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 1, 2, 2, 2) != 0.) std::cout << "CleR" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 2, 2, 0, 0) != 0.) std::cout << "CleR" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 2, 2, 0, 1) != 0.) std::cout << "CleR" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 2, 2, 0, 2) != 0.) std::cout << "CleR" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 2, 2, 1, 1) != 0.) std::cout << "CleR" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 2, 2, 1, 2) != 0.) std::cout << "CleR" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleR", 2, 2, 2, 2) != 0.) std::cout << "CleR" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleR", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 0, 0, 1) != 0.) std::cout << "CleI" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 0, 0, 2) != 0.) std::cout << "CleI" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 0, 1, 2) != 0.) std::cout << "CleI" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 1, 0, 0) != 0.) std::cout << "CleI" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 1, 0, 1) != 0.) std::cout << "CleI" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 1, 0, 2) != 0.) std::cout << "CleI" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 1, 1, 0) != 0.) std::cout << "CleI" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 1, 1, 1) != 0.) std::cout << "CleI" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 1, 1, 2) != 0.) std::cout << "CleI" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 1, 2, 0) != 0.) std::cout << "CleI" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 1, 2, 1) != 0.) std::cout << "CleI" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 1, 2, 2) != 0.) std::cout << "CleI" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 2, 0, 0) != 0.) std::cout << "CleI" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 2, 0, 1) != 0.) std::cout << "CleI" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 2, 0, 2) != 0.) std::cout << "CleI" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 2, 1, 0) != 0.) std::cout << "CleI" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 2, 1, 1) != 0.) std::cout << "CleI" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 2, 1, 2) != 0.) std::cout << "CleI" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 2, 2, 0) != 0.) std::cout << "CleI" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 2, 2, 1) != 0.) std::cout << "CleI" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 0, 2, 2, 2) != 0.) std::cout << "CleI" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 1, 1, 0, 1) != 0.) std::cout << "CleI" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 1, 1, 0, 2) != 0.) std::cout << "CleI" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 1, 1, 1, 2) != 0.) std::cout << "CleI" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 1, 2, 0, 0) != 0.) std::cout << "CleI" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 1, 2, 0, 1) != 0.) std::cout << "CleI" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 1, 2, 0, 2) != 0.) std::cout << "CleI" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 1, 2, 1, 0) != 0.) std::cout << "CleI" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 1, 2, 1, 1) != 0.) std::cout << "CleI" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 1, 2, 1, 2) != 0.) std::cout << "CleI" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 1, 2, 2, 0) != 0.) std::cout << "CleI" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 1, 2, 2, 1) != 0.) std::cout << "CleI" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 1, 2, 2, 2) != 0.) std::cout << "CleI" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 2, 2, 0, 1) != 0.) std::cout << "CleI" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 2, 2, 0, 2) != 0.) std::cout << "CleI" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CleI", 2, 2, 1, 2) != 0.) std::cout << "CleI" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CleI", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 0, 0, 0) != 0.) std::cout << "CluR" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 0, 0, 1) != 0.) std::cout << "CluR" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 0, 0, 2) != 0.) std::cout << "CluR" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 0, 1, 1) != 0.) std::cout << "CluR" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 0, 1, 2) != 0.) std::cout << "CluR" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 0, 2, 2) != 0.) std::cout << "CluR" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 1, 0, 0) != 0.) std::cout << "CluR" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 1, 0, 1) != 0.) std::cout << "CluR" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 1, 0, 2) != 0.) std::cout << "CluR" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 1, 1, 0) != 0.) std::cout << "CluR" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 1, 1, 1) != 0.) std::cout << "CluR" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 1, 1, 2) != 0.) std::cout << "CluR" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 1, 2, 0) != 0.) std::cout << "CluR" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 1, 2, 1) != 0.) std::cout << "CluR" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 1, 2, 2) != 0.) std::cout << "CluR" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 2, 0, 0) != 0.) std::cout << "CluR" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 2, 0, 1) != 0.) std::cout << "CluR" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 2, 0, 2) != 0.) std::cout << "CluR" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 2, 1, 0) != 0.) std::cout << "CluR" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 2, 1, 1) != 0.) std::cout << "CluR" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 2, 1, 2) != 0.) std::cout << "CluR" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 2, 2, 0) != 0.) std::cout << "CluR" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 2, 2, 1) != 0.) std::cout << "CluR" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 0, 2, 2, 2) != 0.) std::cout << "CluR" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 1, 1, 0, 0) != 0.) std::cout << "CluR" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 1, 1, 0, 1) != 0.) std::cout << "CluR" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 1, 1, 0, 2) != 0.) std::cout << "CluR" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 1, 1, 1, 1) != 0.) std::cout << "CluR" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 1, 1, 1, 2) != 0.) std::cout << "CluR" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 1, 1, 2, 2) != 0.) std::cout << "CluR" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 1, 2, 0, 0) != 0.) std::cout << "CluR" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 1, 2, 0, 1) != 0.) std::cout << "CluR" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 1, 2, 0, 2) != 0.) std::cout << "CluR" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 1, 2, 1, 0) != 0.) std::cout << "CluR" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 1, 2, 1, 1) != 0.) std::cout << "CluR" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 1, 2, 1, 2) != 0.) std::cout << "CluR" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 1, 2, 2, 0) != 0.) std::cout << "CluR" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 1, 2, 2, 1) != 0.) std::cout << "CluR" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 1, 2, 2, 2) != 0.) std::cout << "CluR" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 2, 2, 0, 0) != 0.) std::cout << "CluR" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 2, 2, 0, 1) != 0.) std::cout << "CluR" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 2, 2, 0, 2) != 0.) std::cout << "CluR" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 2, 2, 1, 1) != 0.) std::cout << "CluR" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 2, 2, 1, 2) != 0.) std::cout << "CluR" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluR", 2, 2, 2, 2) != 0.) std::cout << "CluR" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluR", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 0, 0, 1) != 0.) std::cout << "CluI" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 0, 0, 2) != 0.) std::cout << "CluI" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 0, 1, 2) != 0.) std::cout << "CluI" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 1, 0, 0) != 0.) std::cout << "CluI" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 1, 0, 1) != 0.) std::cout << "CluI" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 1, 0, 2) != 0.) std::cout << "CluI" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 1, 1, 0) != 0.) std::cout << "CluI" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 1, 1, 1) != 0.) std::cout << "CluI" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 1, 1, 2) != 0.) std::cout << "CluI" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 1, 2, 0) != 0.) std::cout << "CluI" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 1, 2, 1) != 0.) std::cout << "CluI" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 1, 2, 2) != 0.) std::cout << "CluI" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 2, 0, 0) != 0.) std::cout << "CluI" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 2, 0, 1) != 0.) std::cout << "CluI" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 2, 0, 2) != 0.) std::cout << "CluI" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 2, 1, 0) != 0.) std::cout << "CluI" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 2, 1, 1) != 0.) std::cout << "CluI" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 2, 1, 2) != 0.) std::cout << "CluI" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 2, 2, 0) != 0.) std::cout << "CluI" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 2, 2, 1) != 0.) std::cout << "CluI" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 0, 2, 2, 2) != 0.) std::cout << "CluI" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 1, 1, 0, 1) != 0.) std::cout << "CluI" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 1, 1, 0, 2) != 0.) std::cout << "CluI" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 1, 1, 1, 2) != 0.) std::cout << "CluI" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 1, 2, 0, 0) != 0.) std::cout << "CluI" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 1, 2, 0, 1) != 0.) std::cout << "CluI" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 1, 2, 0, 2) != 0.) std::cout << "CluI" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 1, 2, 1, 0) != 0.) std::cout << "CluI" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 1, 2, 1, 1) != 0.) std::cout << "CluI" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 1, 2, 1, 2) != 0.) std::cout << "CluI" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 1, 2, 2, 0) != 0.) std::cout << "CluI" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 1, 2, 2, 1) != 0.) std::cout << "CluI" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 1, 2, 2, 2) != 0.) std::cout << "CluI" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 2, 2, 0, 1) != 0.) std::cout << "CluI" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 2, 2, 0, 2) != 0.) std::cout << "CluI" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CluI", 2, 2, 1, 2) != 0.) std::cout << "CluI" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CluI", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 0, 0, 0) != 0.) std::cout << "CldR" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 0, 0, 1) != 0.) std::cout << "CldR" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 0, 0, 2) != 0.) std::cout << "CldR" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 0, 1, 1) != 0.) std::cout << "CldR" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 0, 1, 2) != 0.) std::cout << "CldR" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 0, 2, 2) != 0.) std::cout << "CldR" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 1, 0, 0) != 0.) std::cout << "CldR" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 1, 0, 1) != 0.) std::cout << "CldR" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 1, 0, 2) != 0.) std::cout << "CldR" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 1, 1, 0) != 0.) std::cout << "CldR" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 1, 1, 1) != 0.) std::cout << "CldR" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 1, 1, 2) != 0.) std::cout << "CldR" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 1, 2, 0) != 0.) std::cout << "CldR" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 1, 2, 1) != 0.) std::cout << "CldR" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 1, 2, 2) != 0.) std::cout << "CldR" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 2, 0, 0) != 0.) std::cout << "CldR" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 2, 0, 1) != 0.) std::cout << "CldR" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 2, 0, 2) != 0.) std::cout << "CldR" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 2, 1, 0) != 0.) std::cout << "CldR" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 2, 1, 1) != 0.) std::cout << "CldR" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 2, 1, 2) != 0.) std::cout << "CldR" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 2, 2, 0) != 0.) std::cout << "CldR" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 2, 2, 1) != 0.) std::cout << "CldR" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 0, 2, 2, 2) != 0.) std::cout << "CldR" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 1, 1, 0, 0) != 0.) std::cout << "CldR" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 1, 1, 0, 1) != 0.) std::cout << "CldR" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 1, 1, 0, 2) != 0.) std::cout << "CldR" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 1, 1, 1, 1) != 0.) std::cout << "CldR" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 1, 1, 1, 2) != 0.) std::cout << "CldR" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 1, 1, 2, 2) != 0.) std::cout << "CldR" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 1, 2, 0, 0) != 0.) std::cout << "CldR" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 1, 2, 0, 1) != 0.) std::cout << "CldR" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 1, 2, 0, 2) != 0.) std::cout << "CldR" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 1, 2, 1, 0) != 0.) std::cout << "CldR" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 1, 2, 1, 1) != 0.) std::cout << "CldR" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 1, 2, 1, 2) != 0.) std::cout << "CldR" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 1, 2, 2, 0) != 0.) std::cout << "CldR" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 1, 2, 2, 1) != 0.) std::cout << "CldR" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 1, 2, 2, 2) != 0.) std::cout << "CldR" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 2, 2, 0, 0) != 0.) std::cout << "CldR" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 2, 2, 0, 1) != 0.) std::cout << "CldR" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 2, 2, 0, 2) != 0.) std::cout << "CldR" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 2, 2, 1, 1) != 0.) std::cout << "CldR" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 2, 2, 1, 2) != 0.) std::cout << "CldR" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldR", 2, 2, 2, 2) != 0.) std::cout << "CldR" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldR", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 0, 0, 1) != 0.) std::cout << "CldI" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 0, 0, 2) != 0.) std::cout << "CldI" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 0, 1, 2) != 0.) std::cout << "CldI" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 1, 0, 0) != 0.) std::cout << "CldI" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 1, 0, 1) != 0.) std::cout << "CldI" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 1, 0, 2) != 0.) std::cout << "CldI" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 1, 1, 0) != 0.) std::cout << "CldI" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 1, 1, 1) != 0.) std::cout << "CldI" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 1, 1, 2) != 0.) std::cout << "CldI" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 1, 2, 0) != 0.) std::cout << "CldI" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 1, 2, 1) != 0.) std::cout << "CldI" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 1, 2, 2) != 0.) std::cout << "CldI" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 2, 0, 0) != 0.) std::cout << "CldI" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 2, 0, 1) != 0.) std::cout << "CldI" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 2, 0, 2) != 0.) std::cout << "CldI" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 2, 1, 0) != 0.) std::cout << "CldI" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 2, 1, 1) != 0.) std::cout << "CldI" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 2, 1, 2) != 0.) std::cout << "CldI" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 2, 2, 0) != 0.) std::cout << "CldI" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 2, 2, 1) != 0.) std::cout << "CldI" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 0, 2, 2, 2) != 0.) std::cout << "CldI" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 1, 1, 0, 1) != 0.) std::cout << "CldI" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 1, 1, 0, 2) != 0.) std::cout << "CldI" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 1, 1, 1, 2) != 0.) std::cout << "CldI" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 1, 2, 0, 0) != 0.) std::cout << "CldI" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 1, 2, 0, 1) != 0.) std::cout << "CldI" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 1, 2, 0, 2) != 0.) std::cout << "CldI" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 1, 2, 1, 0) != 0.) std::cout << "CldI" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 1, 2, 1, 1) != 0.) std::cout << "CldI" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 1, 2, 1, 2) != 0.) std::cout << "CldI" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 1, 2, 2, 0) != 0.) std::cout << "CldI" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 1, 2, 2, 1) != 0.) std::cout << "CldI" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 1, 2, 2, 2) != 0.) std::cout << "CldI" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 2, 2, 0, 1) != 0.) std::cout << "CldI" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 2, 2, 0, 2) != 0.) std::cout << "CldI" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CldI", 2, 2, 1, 2) != 0.) std::cout << "CldI" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CldI", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 0, 0, 0) != 0.) std::cout << "CqeR" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 0, 0, 1) != 0.) std::cout << "CqeR" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 0, 0, 2) != 0.) std::cout << "CqeR" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 0, 1, 1) != 0.) std::cout << "CqeR" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 0, 1, 2) != 0.) std::cout << "CqeR" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 0, 2, 2) != 0.) std::cout << "CqeR" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 1, 0, 0) != 0.) std::cout << "CqeR" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 1, 0, 1) != 0.) std::cout << "CqeR" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 1, 0, 2) != 0.) std::cout << "CqeR" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 1, 1, 0) != 0.) std::cout << "CqeR" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 1, 1, 1) != 0.) std::cout << "CqeR" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 1, 1, 2) != 0.) std::cout << "CqeR" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 1, 2, 0) != 0.) std::cout << "CqeR" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 1, 2, 1) != 0.) std::cout << "CqeR" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 1, 2, 2) != 0.) std::cout << "CqeR" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 2, 0, 0) != 0.) std::cout << "CqeR" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 2, 0, 1) != 0.) std::cout << "CqeR" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 2, 0, 2) != 0.) std::cout << "CqeR" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 2, 1, 0) != 0.) std::cout << "CqeR" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 2, 1, 1) != 0.) std::cout << "CqeR" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 2, 1, 2) != 0.) std::cout << "CqeR" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 2, 2, 0) != 0.) std::cout << "CqeR" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 2, 2, 1) != 0.) std::cout << "CqeR" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 0, 2, 2, 2) != 0.) std::cout << "CqeR" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 1, 1, 0, 0) != 0.) std::cout << "CqeR" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 1, 1, 0, 1) != 0.) std::cout << "CqeR" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 1, 1, 0, 2) != 0.) std::cout << "CqeR" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 1, 1, 1, 1) != 0.) std::cout << "CqeR" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 1, 1, 1, 2) != 0.) std::cout << "CqeR" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 1, 1, 2, 2) != 0.) std::cout << "CqeR" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 1, 2, 0, 0) != 0.) std::cout << "CqeR" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 1, 2, 0, 1) != 0.) std::cout << "CqeR" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 1, 2, 0, 2) != 0.) std::cout << "CqeR" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 1, 2, 1, 0) != 0.) std::cout << "CqeR" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 1, 2, 1, 1) != 0.) std::cout << "CqeR" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 1, 2, 1, 2) != 0.) std::cout << "CqeR" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 1, 2, 2, 0) != 0.) std::cout << "CqeR" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 1, 2, 2, 1) != 0.) std::cout << "CqeR" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 1, 2, 2, 2) != 0.) std::cout << "CqeR" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 2, 2, 0, 0) != 0.) std::cout << "CqeR" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 2, 2, 0, 1) != 0.) std::cout << "CqeR" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 2, 2, 0, 2) != 0.) std::cout << "CqeR" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 2, 2, 1, 1) != 0.) std::cout << "CqeR" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 2, 2, 1, 2) != 0.) std::cout << "CqeR" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeR", 2, 2, 2, 2) != 0.) std::cout << "CqeR" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeR", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 0, 0, 1) != 0.) std::cout << "CqeI" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 0, 0, 2) != 0.) std::cout << "CqeI" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 0, 1, 2) != 0.) std::cout << "CqeI" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 1, 0, 0) != 0.) std::cout << "CqeI" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 1, 0, 1) != 0.) std::cout << "CqeI" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 1, 0, 2) != 0.) std::cout << "CqeI" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 1, 1, 0) != 0.) std::cout << "CqeI" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 1, 1, 1) != 0.) std::cout << "CqeI" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 1, 1, 2) != 0.) std::cout << "CqeI" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 1, 2, 0) != 0.) std::cout << "CqeI" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 1, 2, 1) != 0.) std::cout << "CqeI" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 1, 2, 2) != 0.) std::cout << "CqeI" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 2, 0, 0) != 0.) std::cout << "CqeI" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 2, 0, 1) != 0.) std::cout << "CqeI" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 2, 0, 2) != 0.) std::cout << "CqeI" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 2, 1, 0) != 0.) std::cout << "CqeI" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 2, 1, 1) != 0.) std::cout << "CqeI" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 2, 1, 2) != 0.) std::cout << "CqeI" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 2, 2, 0) != 0.) std::cout << "CqeI" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 2, 2, 1) != 0.) std::cout << "CqeI" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 0, 2, 2, 2) != 0.) std::cout << "CqeI" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 1, 1, 0, 1) != 0.) std::cout << "CqeI" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 1, 1, 0, 2) != 0.) std::cout << "CqeI" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 1, 1, 1, 2) != 0.) std::cout << "CqeI" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 1, 2, 0, 0) != 0.) std::cout << "CqeI" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 1, 2, 0, 1) != 0.) std::cout << "CqeI" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 1, 2, 0, 2) != 0.) std::cout << "CqeI" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 1, 2, 1, 0) != 0.) std::cout << "CqeI" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 1, 2, 1, 1) != 0.) std::cout << "CqeI" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 1, 2, 1, 2) != 0.) std::cout << "CqeI" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 1, 2, 2, 0) != 0.) std::cout << "CqeI" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 1, 2, 2, 1) != 0.) std::cout << "CqeI" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 1, 2, 2, 2) != 0.) std::cout << "CqeI" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 2, 2, 0, 1) != 0.) std::cout << "CqeI" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 2, 2, 0, 2) != 0.) std::cout << "CqeI" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CqeI", 2, 2, 1, 2) != 0.) std::cout << "CqeI" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CqeI", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 0, 0, 0) != 0.) std::cout << "CledqR" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 0, 0, 1) != 0.) std::cout << "CledqR" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 0, 0, 2) != 0.) std::cout << "CledqR" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 0, 1, 0) != 0.) std::cout << "CledqR" << ", 0, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 0, 1, 1) != 0.) std::cout << "CledqR" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 0, 1, 2) != 0.) std::cout << "CledqR" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 0, 2, 0) != 0.) std::cout << "CledqR" << ", 0, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 0, 2, 1) != 0.) std::cout << "CledqR" << ", 0, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 0, 2, 2) != 0.) std::cout << "CledqR" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 1, 0, 0) != 0.) std::cout << "CledqR" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 1, 0, 1) != 0.) std::cout << "CledqR" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 1, 0, 2) != 0.) std::cout << "CledqR" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 1, 1, 0) != 0.) std::cout << "CledqR" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 1, 1, 1) != 0.) std::cout << "CledqR" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 1, 1, 2) != 0.) std::cout << "CledqR" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 1, 2, 0) != 0.) std::cout << "CledqR" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 1, 2, 1) != 0.) std::cout << "CledqR" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 1, 2, 2) != 0.) std::cout << "CledqR" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 2, 0, 0) != 0.) std::cout << "CledqR" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 2, 0, 1) != 0.) std::cout << "CledqR" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 2, 0, 2) != 0.) std::cout << "CledqR" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 2, 1, 0) != 0.) std::cout << "CledqR" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 2, 1, 1) != 0.) std::cout << "CledqR" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 2, 1, 2) != 0.) std::cout << "CledqR" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 2, 2, 0) != 0.) std::cout << "CledqR" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 2, 2, 1) != 0.) std::cout << "CledqR" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 0, 2, 2, 2) != 0.) std::cout << "CledqR" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 0, 0, 0) != 0.) std::cout << "CledqR" << ", 1, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 0, 0, 1) != 0.) std::cout << "CledqR" << ", 1, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 0, 0, 2) != 0.) std::cout << "CledqR" << ", 1, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 0, 1, 0) != 0.) std::cout << "CledqR" << ", 1, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 0, 1, 1) != 0.) std::cout << "CledqR" << ", 1, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 0, 1, 2) != 0.) std::cout << "CledqR" << ", 1, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 0, 2, 0) != 0.) std::cout << "CledqR" << ", 1, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 0, 2, 1) != 0.) std::cout << "CledqR" << ", 1, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 0, 2, 2) != 0.) std::cout << "CledqR" << ", 1, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 1, 0, 0) != 0.) std::cout << "CledqR" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 1, 0, 1) != 0.) std::cout << "CledqR" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 1, 0, 2) != 0.) std::cout << "CledqR" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 1, 1, 0) != 0.) std::cout << "CledqR" << ", 1, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 1, 1, 1) != 0.) std::cout << "CledqR" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 1, 1, 2) != 0.) std::cout << "CledqR" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 1, 2, 0) != 0.) std::cout << "CledqR" << ", 1, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 1, 2, 1) != 0.) std::cout << "CledqR" << ", 1, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 1, 2, 2) != 0.) std::cout << "CledqR" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 2, 0, 0) != 0.) std::cout << "CledqR" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 2, 0, 1) != 0.) std::cout << "CledqR" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 2, 0, 2) != 0.) std::cout << "CledqR" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 2, 1, 0) != 0.) std::cout << "CledqR" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 2, 1, 1) != 0.) std::cout << "CledqR" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 2, 1, 2) != 0.) std::cout << "CledqR" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 2, 2, 0) != 0.) std::cout << "CledqR" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 2, 2, 1) != 0.) std::cout << "CledqR" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 1, 2, 2, 2) != 0.) std::cout << "CledqR" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 0, 0, 0) != 0.) std::cout << "CledqR" << ", 2, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 0, 0, 1) != 0.) std::cout << "CledqR" << ", 2, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 0, 0, 2) != 0.) std::cout << "CledqR" << ", 2, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 0, 1, 0) != 0.) std::cout << "CledqR" << ", 2, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 0, 1, 1) != 0.) std::cout << "CledqR" << ", 2, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 0, 1, 2) != 0.) std::cout << "CledqR" << ", 2, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 0, 2, 0) != 0.) std::cout << "CledqR" << ", 2, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 0, 2, 1) != 0.) std::cout << "CledqR" << ", 2, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 0, 2, 2) != 0.) std::cout << "CledqR" << ", 2, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 1, 0, 0) != 0.) std::cout << "CledqR" << ", 2, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 1, 0, 1) != 0.) std::cout << "CledqR" << ", 2, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 1, 0, 2) != 0.) std::cout << "CledqR" << ", 2, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 1, 1, 0) != 0.) std::cout << "CledqR" << ", 2, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 1, 1, 1) != 0.) std::cout << "CledqR" << ", 2, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 1, 1, 2) != 0.) std::cout << "CledqR" << ", 2, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 1, 2, 0) != 0.) std::cout << "CledqR" << ", 2, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 1, 2, 1) != 0.) std::cout << "CledqR" << ", 2, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 1, 2, 2) != 0.) std::cout << "CledqR" << ", 2, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 2, 0, 0) != 0.) std::cout << "CledqR" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 2, 0, 1) != 0.) std::cout << "CledqR" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 2, 0, 2) != 0.) std::cout << "CledqR" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 2, 1, 0) != 0.) std::cout << "CledqR" << ", 2, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 2, 1, 1) != 0.) std::cout << "CledqR" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 2, 1, 2) != 0.) std::cout << "CledqR" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 2, 2, 0) != 0.) std::cout << "CledqR" << ", 2, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 2, 2, 1) != 0.) std::cout << "CledqR" << ", 2, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqR", 2, 2, 2, 2) != 0.) std::cout << "CledqR" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqR", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 0, 0, 0) != 0.) std::cout << "CledqI" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 0, 0, 1) != 0.) std::cout << "CledqI" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 0, 0, 2) != 0.) std::cout << "CledqI" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 0, 1, 0) != 0.) std::cout << "CledqI" << ", 0, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 0, 1, 1) != 0.) std::cout << "CledqI" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 0, 1, 2) != 0.) std::cout << "CledqI" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 0, 2, 0) != 0.) std::cout << "CledqI" << ", 0, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 0, 2, 1) != 0.) std::cout << "CledqI" << ", 0, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 0, 2, 2) != 0.) std::cout << "CledqI" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 1, 0, 0) != 0.) std::cout << "CledqI" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 1, 0, 1) != 0.) std::cout << "CledqI" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 1, 0, 2) != 0.) std::cout << "CledqI" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 1, 1, 0) != 0.) std::cout << "CledqI" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 1, 1, 1) != 0.) std::cout << "CledqI" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 1, 1, 2) != 0.) std::cout << "CledqI" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 1, 2, 0) != 0.) std::cout << "CledqI" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 1, 2, 1) != 0.) std::cout << "CledqI" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 1, 2, 2) != 0.) std::cout << "CledqI" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 2, 0, 0) != 0.) std::cout << "CledqI" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 2, 0, 1) != 0.) std::cout << "CledqI" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 2, 0, 2) != 0.) std::cout << "CledqI" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 2, 1, 0) != 0.) std::cout << "CledqI" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 2, 1, 1) != 0.) std::cout << "CledqI" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 2, 1, 2) != 0.) std::cout << "CledqI" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 2, 2, 0) != 0.) std::cout << "CledqI" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 2, 2, 1) != 0.) std::cout << "CledqI" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 0, 2, 2, 2) != 0.) std::cout << "CledqI" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 0, 0, 0) != 0.) std::cout << "CledqI" << ", 1, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 0, 0, 1) != 0.) std::cout << "CledqI" << ", 1, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 0, 0, 2) != 0.) std::cout << "CledqI" << ", 1, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 0, 1, 0) != 0.) std::cout << "CledqI" << ", 1, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 0, 1, 1) != 0.) std::cout << "CledqI" << ", 1, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 0, 1, 2) != 0.) std::cout << "CledqI" << ", 1, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 0, 2, 0) != 0.) std::cout << "CledqI" << ", 1, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 0, 2, 1) != 0.) std::cout << "CledqI" << ", 1, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 0, 2, 2) != 0.) std::cout << "CledqI" << ", 1, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 1, 0, 0) != 0.) std::cout << "CledqI" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 1, 0, 1) != 0.) std::cout << "CledqI" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 1, 0, 2) != 0.) std::cout << "CledqI" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 1, 1, 0) != 0.) std::cout << "CledqI" << ", 1, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 1, 1, 1) != 0.) std::cout << "CledqI" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 1, 1, 2) != 0.) std::cout << "CledqI" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 1, 2, 0) != 0.) std::cout << "CledqI" << ", 1, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 1, 2, 1) != 0.) std::cout << "CledqI" << ", 1, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 1, 2, 2) != 0.) std::cout << "CledqI" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 2, 0, 0) != 0.) std::cout << "CledqI" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 2, 0, 1) != 0.) std::cout << "CledqI" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 2, 0, 2) != 0.) std::cout << "CledqI" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 2, 1, 0) != 0.) std::cout << "CledqI" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 2, 1, 1) != 0.) std::cout << "CledqI" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 2, 1, 2) != 0.) std::cout << "CledqI" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 2, 2, 0) != 0.) std::cout << "CledqI" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 2, 2, 1) != 0.) std::cout << "CledqI" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 1, 2, 2, 2) != 0.) std::cout << "CledqI" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 0, 0, 0) != 0.) std::cout << "CledqI" << ", 2, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 0, 0, 1) != 0.) std::cout << "CledqI" << ", 2, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 0, 0, 2) != 0.) std::cout << "CledqI" << ", 2, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 0, 1, 0) != 0.) std::cout << "CledqI" << ", 2, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 0, 1, 1) != 0.) std::cout << "CledqI" << ", 2, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 0, 1, 2) != 0.) std::cout << "CledqI" << ", 2, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 0, 2, 0) != 0.) std::cout << "CledqI" << ", 2, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 0, 2, 1) != 0.) std::cout << "CledqI" << ", 2, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 0, 2, 2) != 0.) std::cout << "CledqI" << ", 2, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 1, 0, 0) != 0.) std::cout << "CledqI" << ", 2, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 1, 0, 1) != 0.) std::cout << "CledqI" << ", 2, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 1, 0, 2) != 0.) std::cout << "CledqI" << ", 2, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 1, 1, 0) != 0.) std::cout << "CledqI" << ", 2, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 1, 1, 1) != 0.) std::cout << "CledqI" << ", 2, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 1, 1, 2) != 0.) std::cout << "CledqI" << ", 2, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 1, 2, 0) != 0.) std::cout << "CledqI" << ", 2, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 1, 2, 1) != 0.) std::cout << "CledqI" << ", 2, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 1, 2, 2) != 0.) std::cout << "CledqI" << ", 2, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 2, 0, 0) != 0.) std::cout << "CledqI" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 2, 0, 1) != 0.) std::cout << "CledqI" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 2, 0, 2) != 0.) std::cout << "CledqI" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 2, 1, 0) != 0.) std::cout << "CledqI" << ", 2, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 2, 1, 1) != 0.) std::cout << "CledqI" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 2, 1, 2) != 0.) std::cout << "CledqI" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 2, 2, 0) != 0.) std::cout << "CledqI" << ", 2, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 2, 2, 1) != 0.) std::cout << "CledqI" << ", 2, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CledqI", 2, 2, 2, 2) != 0.) std::cout << "CledqI" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CledqI", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 0, 0, 0) != 0.) std::cout << "Cqq1R" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 0, 0, 1) != 0.) std::cout << "Cqq1R" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 0, 0, 2) != 0.) std::cout << "Cqq1R" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 0, 1, 1) != 0.) std::cout << "Cqq1R" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 0, 1, 2) != 0.) std::cout << "Cqq1R" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 0, 2, 2) != 0.) std::cout << "Cqq1R" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 1, 0, 1) != 0.) std::cout << "Cqq1R" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 1, 0, 2) != 0.) std::cout << "Cqq1R" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 1, 1, 0) != 0.) std::cout << "Cqq1R" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 1, 1, 1) != 0.) std::cout << "Cqq1R" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 1, 1, 2) != 0.) std::cout << "Cqq1R" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 1, 2, 0) != 0.) std::cout << "Cqq1R" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 1, 2, 1) != 0.) std::cout << "Cqq1R" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 1, 2, 2) != 0.) std::cout << "Cqq1R" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 2, 0, 2) != 0.) std::cout << "Cqq1R" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 2, 1, 1) != 0.) std::cout << "Cqq1R" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 2, 1, 2) != 0.) std::cout << "Cqq1R" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 2, 2, 0) != 0.) std::cout << "Cqq1R" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 2, 2, 1) != 0.) std::cout << "Cqq1R" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 2, 2, 2) != 0.) std::cout << "Cqq1R" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 1, 1, 1, 1) != 0.) std::cout << "Cqq1R" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 1, 1, 1, 2) != 0.) std::cout << "Cqq1R" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 1, 1, 2, 2) != 0.) std::cout << "Cqq1R" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 1, 2, 1, 2) != 0.) std::cout << "Cqq1R" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 1, 2, 2, 1) != 0.) std::cout << "Cqq1R" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 1, 2, 2, 2) != 0.) std::cout << "Cqq1R" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1R", 2, 2, 2, 2) != 0.) std::cout << "Cqq1R" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1R", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 0, 0, 1) != 0.) std::cout << "Cqq1I" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 0, 0, 2) != 0.) std::cout << "Cqq1I" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 0, 1, 2) != 0.) std::cout << "Cqq1I" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 1, 0, 1) != 0.) std::cout << "Cqq1I" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 1, 0, 2) != 0.) std::cout << "Cqq1I" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 1, 1, 1) != 0.) std::cout << "Cqq1I" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 1, 1, 2) != 0.) std::cout << "Cqq1I" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 1, 2, 0) != 0.) std::cout << "Cqq1I" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 1, 2, 1) != 0.) std::cout << "Cqq1I" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 1, 2, 2) != 0.) std::cout << "Cqq1I" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 2, 0, 2) != 0.) std::cout << "Cqq1I" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 2, 1, 1) != 0.) std::cout << "Cqq1I" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 2, 1, 2) != 0.) std::cout << "Cqq1I" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 2, 2, 1) != 0.) std::cout << "Cqq1I" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 2, 2, 2) != 0.) std::cout << "Cqq1I" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1I", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1I", 1, 1, 1, 2) != 0.) std::cout << "Cqq1I" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1I", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1I", 1, 2, 1, 2) != 0.) std::cout << "Cqq1I" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1I", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq1I", 1, 2, 2, 2) != 0.) std::cout << "Cqq1I" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq1I", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 0, 0, 0) != 0.) std::cout << "Cqq3R" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 0, 0, 1) != 0.) std::cout << "Cqq3R" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 0, 0, 2) != 0.) std::cout << "Cqq3R" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 0, 1, 1) != 0.) std::cout << "Cqq3R" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 0, 1, 2) != 0.) std::cout << "Cqq3R" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 0, 2, 2) != 0.) std::cout << "Cqq3R" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 1, 0, 1) != 0.) std::cout << "Cqq3R" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 1, 0, 2) != 0.) std::cout << "Cqq3R" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 1, 1, 0) != 0.) std::cout << "Cqq3R" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 1, 1, 1) != 0.) std::cout << "Cqq3R" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 1, 1, 2) != 0.) std::cout << "Cqq3R" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 1, 2, 0) != 0.) std::cout << "Cqq3R" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 1, 2, 1) != 0.) std::cout << "Cqq3R" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 1, 2, 2) != 0.) std::cout << "Cqq3R" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 2, 0, 2) != 0.) std::cout << "Cqq3R" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 2, 1, 1) != 0.) std::cout << "Cqq3R" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 2, 1, 2) != 0.) std::cout << "Cqq3R" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 2, 2, 0) != 0.) std::cout << "Cqq3R" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 2, 2, 1) != 0.) std::cout << "Cqq3R" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 2, 2, 2) != 0.) std::cout << "Cqq3R" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 1, 1, 1, 1) != 0.) std::cout << "Cqq3R" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 1, 1, 1, 2) != 0.) std::cout << "Cqq3R" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 1, 1, 2, 2) != 0.) std::cout << "Cqq3R" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 1, 2, 1, 2) != 0.) std::cout << "Cqq3R" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 1, 2, 2, 1) != 0.) std::cout << "Cqq3R" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 1, 2, 2, 2) != 0.) std::cout << "Cqq3R" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3R", 2, 2, 2, 2) != 0.) std::cout << "Cqq3R" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3R", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 0, 0, 1) != 0.) std::cout << "Cqq3I" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 0, 0, 2) != 0.) std::cout << "Cqq3I" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 0, 1, 2) != 0.) std::cout << "Cqq3I" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 1, 0, 1) != 0.) std::cout << "Cqq3I" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 1, 0, 2) != 0.) std::cout << "Cqq3I" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 1, 1, 1) != 0.) std::cout << "Cqq3I" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 1, 1, 2) != 0.) std::cout << "Cqq3I" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 1, 2, 0) != 0.) std::cout << "Cqq3I" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 1, 2, 1) != 0.) std::cout << "Cqq3I" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 1, 2, 2) != 0.) std::cout << "Cqq3I" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 2, 0, 2) != 0.) std::cout << "Cqq3I" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 2, 1, 1) != 0.) std::cout << "Cqq3I" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 2, 1, 2) != 0.) std::cout << "Cqq3I" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 2, 2, 1) != 0.) std::cout << "Cqq3I" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 2, 2, 2) != 0.) std::cout << "Cqq3I" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3I", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3I", 1, 1, 1, 2) != 0.) std::cout << "Cqq3I" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3I", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3I", 1, 2, 1, 2) != 0.) std::cout << "Cqq3I" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3I", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqq3I", 1, 2, 2, 2) != 0.) std::cout << "Cqq3I" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqq3I", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 0, 0, 0) != 0.) std::cout << "CuuR" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 0, 0, 1) != 0.) std::cout << "CuuR" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 0, 0, 2) != 0.) std::cout << "CuuR" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 0, 1, 1) != 0.) std::cout << "CuuR" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 0, 1, 2) != 0.) std::cout << "CuuR" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 0, 2, 2) != 0.) std::cout << "CuuR" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 1, 0, 1) != 0.) std::cout << "CuuR" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 1, 0, 2) != 0.) std::cout << "CuuR" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 1, 1, 0) != 0.) std::cout << "CuuR" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 1, 1, 1) != 0.) std::cout << "CuuR" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 1, 1, 2) != 0.) std::cout << "CuuR" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 1, 2, 0) != 0.) std::cout << "CuuR" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 1, 2, 1) != 0.) std::cout << "CuuR" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 1, 2, 2) != 0.) std::cout << "CuuR" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 2, 0, 2) != 0.) std::cout << "CuuR" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 2, 1, 1) != 0.) std::cout << "CuuR" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 2, 1, 2) != 0.) std::cout << "CuuR" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 2, 2, 0) != 0.) std::cout << "CuuR" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 2, 2, 1) != 0.) std::cout << "CuuR" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 0, 2, 2, 2) != 0.) std::cout << "CuuR" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 1, 1, 1, 1) != 0.) std::cout << "CuuR" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 1, 1, 1, 2) != 0.) std::cout << "CuuR" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 1, 1, 2, 2) != 0.) std::cout << "CuuR" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 1, 2, 1, 2) != 0.) std::cout << "CuuR" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 1, 2, 2, 1) != 0.) std::cout << "CuuR" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 1, 2, 2, 2) != 0.) std::cout << "CuuR" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuR", 2, 2, 2, 2) != 0.) std::cout << "CuuR" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuR", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuI", 0, 0, 0, 1) != 0.) std::cout << "CuuI" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuuI", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuI", 0, 0, 0, 2) != 0.) std::cout << "CuuI" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuI", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuI", 0, 0, 1, 2) != 0.) std::cout << "CuuI" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuI", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuI", 0, 1, 0, 1) != 0.) std::cout << "CuuI" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuuI", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuI", 0, 1, 0, 2) != 0.) std::cout << "CuuI" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuI", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuI", 0, 1, 1, 1) != 0.) std::cout << "CuuI" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuuI", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuI", 0, 1, 1, 2) != 0.) std::cout << "CuuI" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuI", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuI", 0, 1, 2, 0) != 0.) std::cout << "CuuI" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CuuI", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuI", 0, 1, 2, 1) != 0.) std::cout << "CuuI" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuuI", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuI", 0, 1, 2, 2) != 0.) std::cout << "CuuI" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuI", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuI", 0, 2, 0, 2) != 0.) std::cout << "CuuI" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuI", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuI", 0, 2, 1, 1) != 0.) std::cout << "CuuI" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuuI", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuI", 0, 2, 1, 2) != 0.) std::cout << "CuuI" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuI", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuI", 0, 2, 2, 1) != 0.) std::cout << "CuuI" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CuuI", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuI", 0, 2, 2, 2) != 0.) std::cout << "CuuI" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuI", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuI", 1, 1, 1, 2) != 0.) std::cout << "CuuI" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuI", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuI", 1, 2, 1, 2) != 0.) std::cout << "CuuI" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuI", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CuuI", 1, 2, 2, 2) != 0.) std::cout << "CuuI" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CuuI", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 0, 0, 0) != 0.) std::cout << "CddR" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 0, 0, 1) != 0.) std::cout << "CddR" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 0, 0, 2) != 0.) std::cout << "CddR" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 0, 1, 1) != 0.) std::cout << "CddR" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 0, 1, 2) != 0.) std::cout << "CddR" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 0, 2, 2) != 0.) std::cout << "CddR" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 1, 0, 1) != 0.) std::cout << "CddR" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 1, 0, 2) != 0.) std::cout << "CddR" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 1, 1, 0) != 0.) std::cout << "CddR" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 1, 1, 1) != 0.) std::cout << "CddR" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 1, 1, 2) != 0.) std::cout << "CddR" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 1, 2, 0) != 0.) std::cout << "CddR" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 1, 2, 1) != 0.) std::cout << "CddR" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 1, 2, 2) != 0.) std::cout << "CddR" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 2, 0, 2) != 0.) std::cout << "CddR" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 2, 1, 1) != 0.) std::cout << "CddR" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 2, 1, 2) != 0.) std::cout << "CddR" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 2, 2, 0) != 0.) std::cout << "CddR" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 2, 2, 1) != 0.) std::cout << "CddR" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 0, 2, 2, 2) != 0.) std::cout << "CddR" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 1, 1, 1, 1) != 0.) std::cout << "CddR" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 1, 1, 1, 2) != 0.) std::cout << "CddR" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 1, 1, 2, 2) != 0.) std::cout << "CddR" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 1, 2, 1, 2) != 0.) std::cout << "CddR" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 1, 2, 2, 1) != 0.) std::cout << "CddR" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 1, 2, 2, 2) != 0.) std::cout << "CddR" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddR", 2, 2, 2, 2) != 0.) std::cout << "CddR" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddR", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddI", 0, 0, 0, 1) != 0.) std::cout << "CddI" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CddI", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddI", 0, 0, 0, 2) != 0.) std::cout << "CddI" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddI", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddI", 0, 0, 1, 2) != 0.) std::cout << "CddI" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddI", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddI", 0, 1, 0, 1) != 0.) std::cout << "CddI" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("CddI", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddI", 0, 1, 0, 2) != 0.) std::cout << "CddI" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddI", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddI", 0, 1, 1, 1) != 0.) std::cout << "CddI" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CddI", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddI", 0, 1, 1, 2) != 0.) std::cout << "CddI" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddI", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddI", 0, 1, 2, 0) != 0.) std::cout << "CddI" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("CddI", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddI", 0, 1, 2, 1) != 0.) std::cout << "CddI" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CddI", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddI", 0, 1, 2, 2) != 0.) std::cout << "CddI" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddI", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddI", 0, 2, 0, 2) != 0.) std::cout << "CddI" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddI", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddI", 0, 2, 1, 1) != 0.) std::cout << "CddI" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("CddI", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddI", 0, 2, 1, 2) != 0.) std::cout << "CddI" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddI", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddI", 0, 2, 2, 1) != 0.) std::cout << "CddI" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("CddI", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddI", 0, 2, 2, 2) != 0.) std::cout << "CddI" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddI", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddI", 1, 1, 1, 2) != 0.) std::cout << "CddI" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddI", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddI", 1, 2, 1, 2) != 0.) std::cout << "CddI" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddI", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("CddI", 1, 2, 2, 2) != 0.) std::cout << "CddI" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("CddI", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 0, 0, 0) != 0.) std::cout << "Cud1R" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 0, 0, 1) != 0.) std::cout << "Cud1R" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 0, 0, 2) != 0.) std::cout << "Cud1R" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 0, 1, 1) != 0.) std::cout << "Cud1R" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 0, 1, 2) != 0.) std::cout << "Cud1R" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 0, 2, 2) != 0.) std::cout << "Cud1R" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 1, 0, 0) != 0.) std::cout << "Cud1R" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 1, 0, 1) != 0.) std::cout << "Cud1R" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 1, 0, 2) != 0.) std::cout << "Cud1R" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 1, 1, 0) != 0.) std::cout << "Cud1R" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 1, 1, 1) != 0.) std::cout << "Cud1R" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 1, 1, 2) != 0.) std::cout << "Cud1R" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 1, 2, 0) != 0.) std::cout << "Cud1R" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 1, 2, 1) != 0.) std::cout << "Cud1R" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 1, 2, 2) != 0.) std::cout << "Cud1R" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 2, 0, 0) != 0.) std::cout << "Cud1R" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 2, 0, 1) != 0.) std::cout << "Cud1R" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 2, 0, 2) != 0.) std::cout << "Cud1R" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 2, 1, 0) != 0.) std::cout << "Cud1R" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 2, 1, 1) != 0.) std::cout << "Cud1R" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 2, 1, 2) != 0.) std::cout << "Cud1R" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 2, 2, 0) != 0.) std::cout << "Cud1R" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 2, 2, 1) != 0.) std::cout << "Cud1R" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 0, 2, 2, 2) != 0.) std::cout << "Cud1R" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 1, 1, 0, 0) != 0.) std::cout << "Cud1R" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 1, 1, 0, 1) != 0.) std::cout << "Cud1R" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 1, 1, 0, 2) != 0.) std::cout << "Cud1R" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 1, 1, 1, 1) != 0.) std::cout << "Cud1R" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 1, 1, 1, 2) != 0.) std::cout << "Cud1R" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 1, 1, 2, 2) != 0.) std::cout << "Cud1R" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 1, 2, 0, 0) != 0.) std::cout << "Cud1R" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 1, 2, 0, 1) != 0.) std::cout << "Cud1R" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 1, 2, 0, 2) != 0.) std::cout << "Cud1R" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 1, 2, 1, 0) != 0.) std::cout << "Cud1R" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 1, 2, 1, 1) != 0.) std::cout << "Cud1R" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 1, 2, 1, 2) != 0.) std::cout << "Cud1R" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 1, 2, 2, 0) != 0.) std::cout << "Cud1R" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 1, 2, 2, 1) != 0.) std::cout << "Cud1R" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 1, 2, 2, 2) != 0.) std::cout << "Cud1R" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 2, 2, 0, 0) != 0.) std::cout << "Cud1R" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 2, 2, 0, 1) != 0.) std::cout << "Cud1R" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 2, 2, 0, 2) != 0.) std::cout << "Cud1R" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 2, 2, 1, 1) != 0.) std::cout << "Cud1R" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 2, 2, 1, 2) != 0.) std::cout << "Cud1R" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1R", 2, 2, 2, 2) != 0.) std::cout << "Cud1R" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1R", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 0, 0, 1) != 0.) std::cout << "Cud1I" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 0, 0, 2) != 0.) std::cout << "Cud1I" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 0, 1, 2) != 0.) std::cout << "Cud1I" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 1, 0, 0) != 0.) std::cout << "Cud1I" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 1, 0, 1) != 0.) std::cout << "Cud1I" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 1, 0, 2) != 0.) std::cout << "Cud1I" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 1, 1, 0) != 0.) std::cout << "Cud1I" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 1, 1, 1) != 0.) std::cout << "Cud1I" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 1, 1, 2) != 0.) std::cout << "Cud1I" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 1, 2, 0) != 0.) std::cout << "Cud1I" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 1, 2, 1) != 0.) std::cout << "Cud1I" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 1, 2, 2) != 0.) std::cout << "Cud1I" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 2, 0, 0) != 0.) std::cout << "Cud1I" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 2, 0, 1) != 0.) std::cout << "Cud1I" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 2, 0, 2) != 0.) std::cout << "Cud1I" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 2, 1, 0) != 0.) std::cout << "Cud1I" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 2, 1, 1) != 0.) std::cout << "Cud1I" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 2, 1, 2) != 0.) std::cout << "Cud1I" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 2, 2, 0) != 0.) std::cout << "Cud1I" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 2, 2, 1) != 0.) std::cout << "Cud1I" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 0, 2, 2, 2) != 0.) std::cout << "Cud1I" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 1, 1, 0, 1) != 0.) std::cout << "Cud1I" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 1, 1, 0, 2) != 0.) std::cout << "Cud1I" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 1, 1, 1, 2) != 0.) std::cout << "Cud1I" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 1, 2, 0, 0) != 0.) std::cout << "Cud1I" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 1, 2, 0, 1) != 0.) std::cout << "Cud1I" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 1, 2, 0, 2) != 0.) std::cout << "Cud1I" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 1, 2, 1, 0) != 0.) std::cout << "Cud1I" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 1, 2, 1, 1) != 0.) std::cout << "Cud1I" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 1, 2, 1, 2) != 0.) std::cout << "Cud1I" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 1, 2, 2, 0) != 0.) std::cout << "Cud1I" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 1, 2, 2, 1) != 0.) std::cout << "Cud1I" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 1, 2, 2, 2) != 0.) std::cout << "Cud1I" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 2, 2, 0, 1) != 0.) std::cout << "Cud1I" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 2, 2, 0, 2) != 0.) std::cout << "Cud1I" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud1I", 2, 2, 1, 2) != 0.) std::cout << "Cud1I" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud1I", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 0, 0, 0) != 0.) std::cout << "Cud8R" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 0, 0, 1) != 0.) std::cout << "Cud8R" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 0, 0, 2) != 0.) std::cout << "Cud8R" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 0, 1, 1) != 0.) std::cout << "Cud8R" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 0, 1, 2) != 0.) std::cout << "Cud8R" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 0, 2, 2) != 0.) std::cout << "Cud8R" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 1, 0, 0) != 0.) std::cout << "Cud8R" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 1, 0, 1) != 0.) std::cout << "Cud8R" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 1, 0, 2) != 0.) std::cout << "Cud8R" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 1, 1, 0) != 0.) std::cout << "Cud8R" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 1, 1, 1) != 0.) std::cout << "Cud8R" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 1, 1, 2) != 0.) std::cout << "Cud8R" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 1, 2, 0) != 0.) std::cout << "Cud8R" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 1, 2, 1) != 0.) std::cout << "Cud8R" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 1, 2, 2) != 0.) std::cout << "Cud8R" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 2, 0, 0) != 0.) std::cout << "Cud8R" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 2, 0, 1) != 0.) std::cout << "Cud8R" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 2, 0, 2) != 0.) std::cout << "Cud8R" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 2, 1, 0) != 0.) std::cout << "Cud8R" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 2, 1, 1) != 0.) std::cout << "Cud8R" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 2, 1, 2) != 0.) std::cout << "Cud8R" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 2, 2, 0) != 0.) std::cout << "Cud8R" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 2, 2, 1) != 0.) std::cout << "Cud8R" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 0, 2, 2, 2) != 0.) std::cout << "Cud8R" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 1, 1, 0, 0) != 0.) std::cout << "Cud8R" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 1, 1, 0, 1) != 0.) std::cout << "Cud8R" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 1, 1, 0, 2) != 0.) std::cout << "Cud8R" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 1, 1, 1, 1) != 0.) std::cout << "Cud8R" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 1, 1, 1, 2) != 0.) std::cout << "Cud8R" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 1, 1, 2, 2) != 0.) std::cout << "Cud8R" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 1, 2, 0, 0) != 0.) std::cout << "Cud8R" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 1, 2, 0, 1) != 0.) std::cout << "Cud8R" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 1, 2, 0, 2) != 0.) std::cout << "Cud8R" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 1, 2, 1, 0) != 0.) std::cout << "Cud8R" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 1, 2, 1, 1) != 0.) std::cout << "Cud8R" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 1, 2, 1, 2) != 0.) std::cout << "Cud8R" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 1, 2, 2, 0) != 0.) std::cout << "Cud8R" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 1, 2, 2, 1) != 0.) std::cout << "Cud8R" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 1, 2, 2, 2) != 0.) std::cout << "Cud8R" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 2, 2, 0, 0) != 0.) std::cout << "Cud8R" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 2, 2, 0, 1) != 0.) std::cout << "Cud8R" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 2, 2, 0, 2) != 0.) std::cout << "Cud8R" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 2, 2, 1, 1) != 0.) std::cout << "Cud8R" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 2, 2, 1, 2) != 0.) std::cout << "Cud8R" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8R", 2, 2, 2, 2) != 0.) std::cout << "Cud8R" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8R", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 0, 0, 1) != 0.) std::cout << "Cud8I" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 0, 0, 2) != 0.) std::cout << "Cud8I" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 0, 1, 2) != 0.) std::cout << "Cud8I" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 1, 0, 0) != 0.) std::cout << "Cud8I" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 1, 0, 1) != 0.) std::cout << "Cud8I" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 1, 0, 2) != 0.) std::cout << "Cud8I" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 1, 1, 0) != 0.) std::cout << "Cud8I" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 1, 1, 1) != 0.) std::cout << "Cud8I" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 1, 1, 2) != 0.) std::cout << "Cud8I" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 1, 2, 0) != 0.) std::cout << "Cud8I" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 1, 2, 1) != 0.) std::cout << "Cud8I" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 1, 2, 2) != 0.) std::cout << "Cud8I" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 2, 0, 0) != 0.) std::cout << "Cud8I" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 2, 0, 1) != 0.) std::cout << "Cud8I" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 2, 0, 2) != 0.) std::cout << "Cud8I" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 2, 1, 0) != 0.) std::cout << "Cud8I" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 2, 1, 1) != 0.) std::cout << "Cud8I" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 2, 1, 2) != 0.) std::cout << "Cud8I" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 2, 2, 0) != 0.) std::cout << "Cud8I" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 2, 2, 1) != 0.) std::cout << "Cud8I" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 0, 2, 2, 2) != 0.) std::cout << "Cud8I" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 1, 1, 0, 1) != 0.) std::cout << "Cud8I" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 1, 1, 0, 2) != 0.) std::cout << "Cud8I" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 1, 1, 1, 2) != 0.) std::cout << "Cud8I" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 1, 2, 0, 0) != 0.) std::cout << "Cud8I" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 1, 2, 0, 1) != 0.) std::cout << "Cud8I" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 1, 2, 0, 2) != 0.) std::cout << "Cud8I" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 1, 2, 1, 0) != 0.) std::cout << "Cud8I" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 1, 2, 1, 1) != 0.) std::cout << "Cud8I" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 1, 2, 1, 2) != 0.) std::cout << "Cud8I" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 1, 2, 2, 0) != 0.) std::cout << "Cud8I" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 1, 2, 2, 1) != 0.) std::cout << "Cud8I" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 1, 2, 2, 2) != 0.) std::cout << "Cud8I" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 2, 2, 0, 1) != 0.) std::cout << "Cud8I" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 2, 2, 0, 2) != 0.) std::cout << "Cud8I" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cud8I", 2, 2, 1, 2) != 0.) std::cout << "Cud8I" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cud8I", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 0, 0, 0) != 0.) std::cout << "Cqu1R" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 0, 0, 1) != 0.) std::cout << "Cqu1R" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 0, 0, 2) != 0.) std::cout << "Cqu1R" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 0, 1, 1) != 0.) std::cout << "Cqu1R" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 0, 1, 2) != 0.) std::cout << "Cqu1R" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 0, 2, 2) != 0.) std::cout << "Cqu1R" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 1, 0, 0) != 0.) std::cout << "Cqu1R" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 1, 0, 1) != 0.) std::cout << "Cqu1R" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 1, 0, 2) != 0.) std::cout << "Cqu1R" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 1, 1, 0) != 0.) std::cout << "Cqu1R" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 1, 1, 1) != 0.) std::cout << "Cqu1R" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 1, 1, 2) != 0.) std::cout << "Cqu1R" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 1, 2, 0) != 0.) std::cout << "Cqu1R" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 1, 2, 1) != 0.) std::cout << "Cqu1R" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 1, 2, 2) != 0.) std::cout << "Cqu1R" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 2, 0, 0) != 0.) std::cout << "Cqu1R" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 2, 0, 1) != 0.) std::cout << "Cqu1R" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 2, 0, 2) != 0.) std::cout << "Cqu1R" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 2, 1, 0) != 0.) std::cout << "Cqu1R" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 2, 1, 1) != 0.) std::cout << "Cqu1R" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 2, 1, 2) != 0.) std::cout << "Cqu1R" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 2, 2, 0) != 0.) std::cout << "Cqu1R" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 2, 2, 1) != 0.) std::cout << "Cqu1R" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 2, 2, 2) != 0.) std::cout << "Cqu1R" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 1, 0, 0) != 0.) std::cout << "Cqu1R" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 1, 0, 1) != 0.) std::cout << "Cqu1R" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 1, 0, 2) != 0.) std::cout << "Cqu1R" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 1, 1, 1) != 0.) std::cout << "Cqu1R" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 1, 1, 2) != 0.) std::cout << "Cqu1R" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 1, 2, 2) != 0.) std::cout << "Cqu1R" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 2, 0, 0) != 0.) std::cout << "Cqu1R" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 2, 0, 1) != 0.) std::cout << "Cqu1R" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 2, 0, 2) != 0.) std::cout << "Cqu1R" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 2, 1, 0) != 0.) std::cout << "Cqu1R" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 2, 1, 1) != 0.) std::cout << "Cqu1R" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 2, 1, 2) != 0.) std::cout << "Cqu1R" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 2, 2, 0) != 0.) std::cout << "Cqu1R" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 2, 2, 1) != 0.) std::cout << "Cqu1R" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 2, 2, 2) != 0.) std::cout << "Cqu1R" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 2, 2, 0, 0) != 0.) std::cout << "Cqu1R" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 2, 2, 0, 1) != 0.) std::cout << "Cqu1R" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 2, 2, 0, 2) != 0.) std::cout << "Cqu1R" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 2, 2, 1, 1) != 0.) std::cout << "Cqu1R" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 2, 2, 1, 2) != 0.) std::cout << "Cqu1R" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1R", 2, 2, 2, 2) != 0.) std::cout << "Cqu1R" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1R", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 0, 0, 1) != 0.) std::cout << "Cqu1I" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 0, 0, 2) != 0.) std::cout << "Cqu1I" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 0, 1, 2) != 0.) std::cout << "Cqu1I" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 1, 0, 0) != 0.) std::cout << "Cqu1I" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 1, 0, 1) != 0.) std::cout << "Cqu1I" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 1, 0, 2) != 0.) std::cout << "Cqu1I" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 1, 1, 0) != 0.) std::cout << "Cqu1I" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 1, 1, 1) != 0.) std::cout << "Cqu1I" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 1, 1, 2) != 0.) std::cout << "Cqu1I" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 1, 2, 0) != 0.) std::cout << "Cqu1I" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 1, 2, 1) != 0.) std::cout << "Cqu1I" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 1, 2, 2) != 0.) std::cout << "Cqu1I" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 2, 0, 0) != 0.) std::cout << "Cqu1I" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 2, 0, 1) != 0.) std::cout << "Cqu1I" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 2, 0, 2) != 0.) std::cout << "Cqu1I" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 2, 1, 0) != 0.) std::cout << "Cqu1I" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 2, 1, 1) != 0.) std::cout << "Cqu1I" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 2, 1, 2) != 0.) std::cout << "Cqu1I" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 2, 2, 0) != 0.) std::cout << "Cqu1I" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 2, 2, 1) != 0.) std::cout << "Cqu1I" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 2, 2, 2) != 0.) std::cout << "Cqu1I" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 1, 0, 1) != 0.) std::cout << "Cqu1I" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 1, 0, 2) != 0.) std::cout << "Cqu1I" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 1, 1, 2) != 0.) std::cout << "Cqu1I" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 2, 0, 0) != 0.) std::cout << "Cqu1I" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 2, 0, 1) != 0.) std::cout << "Cqu1I" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 2, 0, 2) != 0.) std::cout << "Cqu1I" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 2, 1, 0) != 0.) std::cout << "Cqu1I" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 2, 1, 1) != 0.) std::cout << "Cqu1I" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 2, 1, 2) != 0.) std::cout << "Cqu1I" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 2, 2, 0) != 0.) std::cout << "Cqu1I" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 2, 2, 1) != 0.) std::cout << "Cqu1I" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 2, 2, 2) != 0.) std::cout << "Cqu1I" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 2, 2, 0, 1) != 0.) std::cout << "Cqu1I" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 2, 2, 0, 2) != 0.) std::cout << "Cqu1I" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu1I", 2, 2, 1, 2) != 0.) std::cout << "Cqu1I" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu1I", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 0, 0, 0) != 0.) std::cout << "Cqu8R" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 0, 0, 1) != 0.) std::cout << "Cqu8R" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 0, 0, 2) != 0.) std::cout << "Cqu8R" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 0, 1, 1) != 0.) std::cout << "Cqu8R" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 0, 1, 2) != 0.) std::cout << "Cqu8R" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 0, 2, 2) != 0.) std::cout << "Cqu8R" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 1, 0, 0) != 0.) std::cout << "Cqu8R" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 1, 0, 1) != 0.) std::cout << "Cqu8R" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 1, 0, 2) != 0.) std::cout << "Cqu8R" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 1, 1, 0) != 0.) std::cout << "Cqu8R" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 1, 1, 1) != 0.) std::cout << "Cqu8R" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 1, 1, 2) != 0.) std::cout << "Cqu8R" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 1, 2, 0) != 0.) std::cout << "Cqu8R" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 1, 2, 1) != 0.) std::cout << "Cqu8R" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 1, 2, 2) != 0.) std::cout << "Cqu8R" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 2, 0, 0) != 0.) std::cout << "Cqu8R" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 2, 0, 1) != 0.) std::cout << "Cqu8R" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 2, 0, 2) != 0.) std::cout << "Cqu8R" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 2, 1, 0) != 0.) std::cout << "Cqu8R" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 2, 1, 1) != 0.) std::cout << "Cqu8R" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 2, 1, 2) != 0.) std::cout << "Cqu8R" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 2, 2, 0) != 0.) std::cout << "Cqu8R" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 2, 2, 1) != 0.) std::cout << "Cqu8R" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 2, 2, 2) != 0.) std::cout << "Cqu8R" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 1, 0, 0) != 0.) std::cout << "Cqu8R" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 1, 0, 1) != 0.) std::cout << "Cqu8R" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 1, 0, 2) != 0.) std::cout << "Cqu8R" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 1, 1, 1) != 0.) std::cout << "Cqu8R" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 1, 1, 2) != 0.) std::cout << "Cqu8R" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 1, 2, 2) != 0.) std::cout << "Cqu8R" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 2, 0, 0) != 0.) std::cout << "Cqu8R" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 2, 0, 1) != 0.) std::cout << "Cqu8R" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 2, 0, 2) != 0.) std::cout << "Cqu8R" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 2, 1, 0) != 0.) std::cout << "Cqu8R" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 2, 1, 1) != 0.) std::cout << "Cqu8R" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 2, 1, 2) != 0.) std::cout << "Cqu8R" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 2, 2, 0) != 0.) std::cout << "Cqu8R" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 2, 2, 1) != 0.) std::cout << "Cqu8R" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 2, 2, 2) != 0.) std::cout << "Cqu8R" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 2, 2, 0, 0) != 0.) std::cout << "Cqu8R" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 2, 2, 0, 1) != 0.) std::cout << "Cqu8R" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 2, 2, 0, 2) != 0.) std::cout << "Cqu8R" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 2, 2, 1, 1) != 0.) std::cout << "Cqu8R" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 2, 2, 1, 2) != 0.) std::cout << "Cqu8R" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8R", 2, 2, 2, 2) != 0.) std::cout << "Cqu8R" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8R", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 0, 0, 1) != 0.) std::cout << "Cqu8I" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 0, 0, 2) != 0.) std::cout << "Cqu8I" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 0, 1, 2) != 0.) std::cout << "Cqu8I" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 1, 0, 0) != 0.) std::cout << "Cqu8I" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 1, 0, 1) != 0.) std::cout << "Cqu8I" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 1, 0, 2) != 0.) std::cout << "Cqu8I" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 1, 1, 0) != 0.) std::cout << "Cqu8I" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 1, 1, 1) != 0.) std::cout << "Cqu8I" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 1, 1, 2) != 0.) std::cout << "Cqu8I" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 1, 2, 0) != 0.) std::cout << "Cqu8I" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 1, 2, 1) != 0.) std::cout << "Cqu8I" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 1, 2, 2) != 0.) std::cout << "Cqu8I" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 2, 0, 0) != 0.) std::cout << "Cqu8I" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 2, 0, 1) != 0.) std::cout << "Cqu8I" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 2, 0, 2) != 0.) std::cout << "Cqu8I" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 2, 1, 0) != 0.) std::cout << "Cqu8I" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 2, 1, 1) != 0.) std::cout << "Cqu8I" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 2, 1, 2) != 0.) std::cout << "Cqu8I" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 2, 2, 0) != 0.) std::cout << "Cqu8I" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 2, 2, 1) != 0.) std::cout << "Cqu8I" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 2, 2, 2) != 0.) std::cout << "Cqu8I" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 1, 0, 1) != 0.) std::cout << "Cqu8I" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 1, 0, 2) != 0.) std::cout << "Cqu8I" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 1, 1, 2) != 0.) std::cout << "Cqu8I" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 2, 0, 0) != 0.) std::cout << "Cqu8I" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 2, 0, 1) != 0.) std::cout << "Cqu8I" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 2, 0, 2) != 0.) std::cout << "Cqu8I" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 2, 1, 0) != 0.) std::cout << "Cqu8I" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 2, 1, 1) != 0.) std::cout << "Cqu8I" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 2, 1, 2) != 0.) std::cout << "Cqu8I" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 2, 2, 0) != 0.) std::cout << "Cqu8I" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 2, 2, 1) != 0.) std::cout << "Cqu8I" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 2, 2, 2) != 0.) std::cout << "Cqu8I" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 2, 2, 0, 1) != 0.) std::cout << "Cqu8I" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 2, 2, 0, 2) != 0.) std::cout << "Cqu8I" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqu8I", 2, 2, 1, 2) != 0.) std::cout << "Cqu8I" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqu8I", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 0, 0, 0) != 0.) std::cout << "Cqd1R" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 0, 0, 1) != 0.) std::cout << "Cqd1R" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 0, 0, 2) != 0.) std::cout << "Cqd1R" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 0, 1, 1) != 0.) std::cout << "Cqd1R" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 0, 1, 2) != 0.) std::cout << "Cqd1R" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 0, 2, 2) != 0.) std::cout << "Cqd1R" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 1, 0, 0) != 0.) std::cout << "Cqd1R" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 1, 0, 1) != 0.) std::cout << "Cqd1R" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 1, 0, 2) != 0.) std::cout << "Cqd1R" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 1, 1, 0) != 0.) std::cout << "Cqd1R" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 1, 1, 1) != 0.) std::cout << "Cqd1R" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 1, 1, 2) != 0.) std::cout << "Cqd1R" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 1, 2, 0) != 0.) std::cout << "Cqd1R" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 1, 2, 1) != 0.) std::cout << "Cqd1R" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 1, 2, 2) != 0.) std::cout << "Cqd1R" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 2, 0, 0) != 0.) std::cout << "Cqd1R" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 2, 0, 1) != 0.) std::cout << "Cqd1R" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 2, 0, 2) != 0.) std::cout << "Cqd1R" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 2, 1, 0) != 0.) std::cout << "Cqd1R" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 2, 1, 1) != 0.) std::cout << "Cqd1R" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 2, 1, 2) != 0.) std::cout << "Cqd1R" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 2, 2, 0) != 0.) std::cout << "Cqd1R" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 2, 2, 1) != 0.) std::cout << "Cqd1R" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 2, 2, 2) != 0.) std::cout << "Cqd1R" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 1, 0, 0) != 0.) std::cout << "Cqd1R" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 1, 0, 1) != 0.) std::cout << "Cqd1R" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 1, 0, 2) != 0.) std::cout << "Cqd1R" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 1, 1, 1) != 0.) std::cout << "Cqd1R" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 1, 1, 2) != 0.) std::cout << "Cqd1R" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 1, 2, 2) != 0.) std::cout << "Cqd1R" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 2, 0, 0) != 0.) std::cout << "Cqd1R" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 2, 0, 1) != 0.) std::cout << "Cqd1R" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 2, 0, 2) != 0.) std::cout << "Cqd1R" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 2, 1, 0) != 0.) std::cout << "Cqd1R" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 2, 1, 1) != 0.) std::cout << "Cqd1R" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 2, 1, 2) != 0.) std::cout << "Cqd1R" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 2, 2, 0) != 0.) std::cout << "Cqd1R" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 2, 2, 1) != 0.) std::cout << "Cqd1R" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 2, 2, 2) != 0.) std::cout << "Cqd1R" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 2, 2, 0, 0) != 0.) std::cout << "Cqd1R" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 2, 2, 0, 1) != 0.) std::cout << "Cqd1R" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 2, 2, 0, 2) != 0.) std::cout << "Cqd1R" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 2, 2, 1, 1) != 0.) std::cout << "Cqd1R" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 2, 2, 1, 2) != 0.) std::cout << "Cqd1R" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1R", 2, 2, 2, 2) != 0.) std::cout << "Cqd1R" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1R", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 0, 0, 1) != 0.) std::cout << "Cqd1I" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 0, 0, 2) != 0.) std::cout << "Cqd1I" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 0, 1, 2) != 0.) std::cout << "Cqd1I" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 1, 0, 0) != 0.) std::cout << "Cqd1I" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 1, 0, 1) != 0.) std::cout << "Cqd1I" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 1, 0, 2) != 0.) std::cout << "Cqd1I" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 1, 1, 0) != 0.) std::cout << "Cqd1I" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 1, 1, 1) != 0.) std::cout << "Cqd1I" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 1, 1, 2) != 0.) std::cout << "Cqd1I" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 1, 2, 0) != 0.) std::cout << "Cqd1I" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 1, 2, 1) != 0.) std::cout << "Cqd1I" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 1, 2, 2) != 0.) std::cout << "Cqd1I" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 2, 0, 0) != 0.) std::cout << "Cqd1I" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 2, 0, 1) != 0.) std::cout << "Cqd1I" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 2, 0, 2) != 0.) std::cout << "Cqd1I" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 2, 1, 0) != 0.) std::cout << "Cqd1I" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 2, 1, 1) != 0.) std::cout << "Cqd1I" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 2, 1, 2) != 0.) std::cout << "Cqd1I" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 2, 2, 0) != 0.) std::cout << "Cqd1I" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 2, 2, 1) != 0.) std::cout << "Cqd1I" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 2, 2, 2) != 0.) std::cout << "Cqd1I" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 1, 0, 1) != 0.) std::cout << "Cqd1I" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 1, 0, 2) != 0.) std::cout << "Cqd1I" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 1, 1, 2) != 0.) std::cout << "Cqd1I" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 2, 0, 0) != 0.) std::cout << "Cqd1I" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 2, 0, 1) != 0.) std::cout << "Cqd1I" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 2, 0, 2) != 0.) std::cout << "Cqd1I" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 2, 1, 0) != 0.) std::cout << "Cqd1I" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 2, 1, 1) != 0.) std::cout << "Cqd1I" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 2, 1, 2) != 0.) std::cout << "Cqd1I" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 2, 2, 0) != 0.) std::cout << "Cqd1I" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 2, 2, 1) != 0.) std::cout << "Cqd1I" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 2, 2, 2) != 0.) std::cout << "Cqd1I" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 2, 2, 0, 1) != 0.) std::cout << "Cqd1I" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 2, 2, 0, 2) != 0.) std::cout << "Cqd1I" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd1I", 2, 2, 1, 2) != 0.) std::cout << "Cqd1I" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd1I", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 0, 0, 0) != 0.) std::cout << "Cqd8R" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 0, 0, 1) != 0.) std::cout << "Cqd8R" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 0, 0, 2) != 0.) std::cout << "Cqd8R" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 0, 1, 1) != 0.) std::cout << "Cqd8R" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 0, 1, 2) != 0.) std::cout << "Cqd8R" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 0, 2, 2) != 0.) std::cout << "Cqd8R" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 1, 0, 0) != 0.) std::cout << "Cqd8R" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 1, 0, 1) != 0.) std::cout << "Cqd8R" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 1, 0, 2) != 0.) std::cout << "Cqd8R" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 1, 1, 0) != 0.) std::cout << "Cqd8R" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 1, 1, 1) != 0.) std::cout << "Cqd8R" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 1, 1, 2) != 0.) std::cout << "Cqd8R" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 1, 2, 0) != 0.) std::cout << "Cqd8R" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 1, 2, 1) != 0.) std::cout << "Cqd8R" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 1, 2, 2) != 0.) std::cout << "Cqd8R" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 2, 0, 0) != 0.) std::cout << "Cqd8R" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 2, 0, 1) != 0.) std::cout << "Cqd8R" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 2, 0, 2) != 0.) std::cout << "Cqd8R" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 2, 1, 0) != 0.) std::cout << "Cqd8R" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 2, 1, 1) != 0.) std::cout << "Cqd8R" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 2, 1, 2) != 0.) std::cout << "Cqd8R" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 2, 2, 0) != 0.) std::cout << "Cqd8R" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 2, 2, 1) != 0.) std::cout << "Cqd8R" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 2, 2, 2) != 0.) std::cout << "Cqd8R" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 1, 0, 0) != 0.) std::cout << "Cqd8R" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 1, 0, 1) != 0.) std::cout << "Cqd8R" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 1, 0, 2) != 0.) std::cout << "Cqd8R" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 1, 1, 1) != 0.) std::cout << "Cqd8R" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 1, 1, 2) != 0.) std::cout << "Cqd8R" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 1, 2, 2) != 0.) std::cout << "Cqd8R" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 2, 0, 0) != 0.) std::cout << "Cqd8R" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 2, 0, 1) != 0.) std::cout << "Cqd8R" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 2, 0, 2) != 0.) std::cout << "Cqd8R" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 2, 1, 0) != 0.) std::cout << "Cqd8R" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 2, 1, 1) != 0.) std::cout << "Cqd8R" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 2, 1, 2) != 0.) std::cout << "Cqd8R" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 2, 2, 0) != 0.) std::cout << "Cqd8R" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 2, 2, 1) != 0.) std::cout << "Cqd8R" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 2, 2, 2) != 0.) std::cout << "Cqd8R" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 2, 2, 0, 0) != 0.) std::cout << "Cqd8R" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 2, 2, 0, 1) != 0.) std::cout << "Cqd8R" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 2, 2, 0, 2) != 0.) std::cout << "Cqd8R" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 2, 2, 1, 1) != 0.) std::cout << "Cqd8R" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 2, 2, 1, 2) != 0.) std::cout << "Cqd8R" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8R", 2, 2, 2, 2) != 0.) std::cout << "Cqd8R" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8R", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 0, 0, 1) != 0.) std::cout << "Cqd8I" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 0, 0, 2) != 0.) std::cout << "Cqd8I" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 0, 1, 2) != 0.) std::cout << "Cqd8I" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 1, 0, 0) != 0.) std::cout << "Cqd8I" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 1, 0, 1) != 0.) std::cout << "Cqd8I" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 1, 0, 2) != 0.) std::cout << "Cqd8I" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 1, 1, 0) != 0.) std::cout << "Cqd8I" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 1, 1, 1) != 0.) std::cout << "Cqd8I" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 1, 1, 2) != 0.) std::cout << "Cqd8I" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 1, 2, 0) != 0.) std::cout << "Cqd8I" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 1, 2, 1) != 0.) std::cout << "Cqd8I" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 1, 2, 2) != 0.) std::cout << "Cqd8I" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 2, 0, 0) != 0.) std::cout << "Cqd8I" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 2, 0, 1) != 0.) std::cout << "Cqd8I" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 2, 0, 2) != 0.) std::cout << "Cqd8I" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 2, 1, 0) != 0.) std::cout << "Cqd8I" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 2, 1, 1) != 0.) std::cout << "Cqd8I" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 2, 1, 2) != 0.) std::cout << "Cqd8I" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 2, 2, 0) != 0.) std::cout << "Cqd8I" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 2, 2, 1) != 0.) std::cout << "Cqd8I" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 2, 2, 2) != 0.) std::cout << "Cqd8I" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 1, 0, 1) != 0.) std::cout << "Cqd8I" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 1, 0, 2) != 0.) std::cout << "Cqd8I" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 1, 1, 2) != 0.) std::cout << "Cqd8I" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 2, 0, 0) != 0.) std::cout << "Cqd8I" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 2, 0, 1) != 0.) std::cout << "Cqd8I" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 2, 0, 2) != 0.) std::cout << "Cqd8I" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 2, 1, 0) != 0.) std::cout << "Cqd8I" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 2, 1, 1) != 0.) std::cout << "Cqd8I" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 2, 1, 2) != 0.) std::cout << "Cqd8I" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 2, 2, 0) != 0.) std::cout << "Cqd8I" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 2, 2, 1) != 0.) std::cout << "Cqd8I" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 2, 2, 2) != 0.) std::cout << "Cqd8I" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 2, 2, 0, 1) != 0.) std::cout << "Cqd8I" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 2, 2, 0, 2) != 0.) std::cout << "Cqd8I" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cqd8I", 2, 2, 1, 2) != 0.) std::cout << "Cqd8I" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cqd8I", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 0, 0, 0) != 0.) std::cout << "Cquqd1R" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 0, 0, 1) != 0.) std::cout << "Cquqd1R" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 0, 0, 2) != 0.) std::cout << "Cquqd1R" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 0, 1, 0) != 0.) std::cout << "Cquqd1R" << ", 0, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 0, 1, 1) != 0.) std::cout << "Cquqd1R" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 0, 1, 2) != 0.) std::cout << "Cquqd1R" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 0, 2, 0) != 0.) std::cout << "Cquqd1R" << ", 0, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 0, 2, 1) != 0.) std::cout << "Cquqd1R" << ", 0, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 0, 2, 2) != 0.) std::cout << "Cquqd1R" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 1, 0, 0) != 0.) std::cout << "Cquqd1R" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 1, 0, 1) != 0.) std::cout << "Cquqd1R" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 1, 0, 2) != 0.) std::cout << "Cquqd1R" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 1, 1, 0) != 0.) std::cout << "Cquqd1R" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 1, 1, 1) != 0.) std::cout << "Cquqd1R" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 1, 1, 2) != 0.) std::cout << "Cquqd1R" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 1, 2, 0) != 0.) std::cout << "Cquqd1R" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 1, 2, 1) != 0.) std::cout << "Cquqd1R" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 1, 2, 2) != 0.) std::cout << "Cquqd1R" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 2, 0, 0) != 0.) std::cout << "Cquqd1R" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 2, 0, 1) != 0.) std::cout << "Cquqd1R" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 2, 0, 2) != 0.) std::cout << "Cquqd1R" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 2, 1, 0) != 0.) std::cout << "Cquqd1R" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 2, 1, 1) != 0.) std::cout << "Cquqd1R" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 2, 1, 2) != 0.) std::cout << "Cquqd1R" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 2, 2, 0) != 0.) std::cout << "Cquqd1R" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 2, 2, 1) != 0.) std::cout << "Cquqd1R" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 2, 2, 2) != 0.) std::cout << "Cquqd1R" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 0, 0, 0) != 0.) std::cout << "Cquqd1R" << ", 1, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 0, 0, 1) != 0.) std::cout << "Cquqd1R" << ", 1, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 0, 0, 2) != 0.) std::cout << "Cquqd1R" << ", 1, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 0, 1, 0) != 0.) std::cout << "Cquqd1R" << ", 1, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 0, 1, 1) != 0.) std::cout << "Cquqd1R" << ", 1, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 0, 1, 2) != 0.) std::cout << "Cquqd1R" << ", 1, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 0, 2, 0) != 0.) std::cout << "Cquqd1R" << ", 1, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 0, 2, 1) != 0.) std::cout << "Cquqd1R" << ", 1, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 0, 2, 2) != 0.) std::cout << "Cquqd1R" << ", 1, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 1, 0, 0) != 0.) std::cout << "Cquqd1R" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 1, 0, 1) != 0.) std::cout << "Cquqd1R" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 1, 0, 2) != 0.) std::cout << "Cquqd1R" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 1, 1, 0) != 0.) std::cout << "Cquqd1R" << ", 1, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 1, 1, 1) != 0.) std::cout << "Cquqd1R" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 1, 1, 2) != 0.) std::cout << "Cquqd1R" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 1, 2, 0) != 0.) std::cout << "Cquqd1R" << ", 1, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 1, 2, 1) != 0.) std::cout << "Cquqd1R" << ", 1, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 1, 2, 2) != 0.) std::cout << "Cquqd1R" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 2, 0, 0) != 0.) std::cout << "Cquqd1R" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 2, 0, 1) != 0.) std::cout << "Cquqd1R" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 2, 0, 2) != 0.) std::cout << "Cquqd1R" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 2, 1, 0) != 0.) std::cout << "Cquqd1R" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 2, 1, 1) != 0.) std::cout << "Cquqd1R" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 2, 1, 2) != 0.) std::cout << "Cquqd1R" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 2, 2, 0) != 0.) std::cout << "Cquqd1R" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 2, 2, 1) != 0.) std::cout << "Cquqd1R" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 2, 2, 2) != 0.) std::cout << "Cquqd1R" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 0, 0, 0) != 0.) std::cout << "Cquqd1R" << ", 2, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 0, 0, 1) != 0.) std::cout << "Cquqd1R" << ", 2, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 0, 0, 2) != 0.) std::cout << "Cquqd1R" << ", 2, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 0, 1, 0) != 0.) std::cout << "Cquqd1R" << ", 2, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 0, 1, 1) != 0.) std::cout << "Cquqd1R" << ", 2, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 0, 1, 2) != 0.) std::cout << "Cquqd1R" << ", 2, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 0, 2, 0) != 0.) std::cout << "Cquqd1R" << ", 2, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 0, 2, 1) != 0.) std::cout << "Cquqd1R" << ", 2, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 0, 2, 2) != 0.) std::cout << "Cquqd1R" << ", 2, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 1, 0, 0) != 0.) std::cout << "Cquqd1R" << ", 2, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 1, 0, 1) != 0.) std::cout << "Cquqd1R" << ", 2, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 1, 0, 2) != 0.) std::cout << "Cquqd1R" << ", 2, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 1, 1, 0) != 0.) std::cout << "Cquqd1R" << ", 2, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 1, 1, 1) != 0.) std::cout << "Cquqd1R" << ", 2, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 1, 1, 2) != 0.) std::cout << "Cquqd1R" << ", 2, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 1, 2, 0) != 0.) std::cout << "Cquqd1R" << ", 2, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 1, 2, 1) != 0.) std::cout << "Cquqd1R" << ", 2, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 1, 2, 2) != 0.) std::cout << "Cquqd1R" << ", 2, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 2, 0, 0) != 0.) std::cout << "Cquqd1R" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 2, 0, 1) != 0.) std::cout << "Cquqd1R" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 2, 0, 2) != 0.) std::cout << "Cquqd1R" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 2, 1, 0) != 0.) std::cout << "Cquqd1R" << ", 2, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 2, 1, 1) != 0.) std::cout << "Cquqd1R" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 2, 1, 2) != 0.) std::cout << "Cquqd1R" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 2, 2, 0) != 0.) std::cout << "Cquqd1R" << ", 2, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 2, 2, 1) != 0.) std::cout << "Cquqd1R" << ", 2, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 2, 2, 2) != 0.) std::cout << "Cquqd1R" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1R", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 0, 0, 0) != 0.) std::cout << "Cquqd1I" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 0, 0, 1) != 0.) std::cout << "Cquqd1I" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 0, 0, 2) != 0.) std::cout << "Cquqd1I" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 0, 1, 0) != 0.) std::cout << "Cquqd1I" << ", 0, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 0, 1, 1) != 0.) std::cout << "Cquqd1I" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 0, 1, 2) != 0.) std::cout << "Cquqd1I" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 0, 2, 0) != 0.) std::cout << "Cquqd1I" << ", 0, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 0, 2, 1) != 0.) std::cout << "Cquqd1I" << ", 0, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 0, 2, 2) != 0.) std::cout << "Cquqd1I" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 1, 0, 0) != 0.) std::cout << "Cquqd1I" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 1, 0, 1) != 0.) std::cout << "Cquqd1I" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 1, 0, 2) != 0.) std::cout << "Cquqd1I" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 1, 1, 0) != 0.) std::cout << "Cquqd1I" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 1, 1, 1) != 0.) std::cout << "Cquqd1I" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 1, 1, 2) != 0.) std::cout << "Cquqd1I" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 1, 2, 0) != 0.) std::cout << "Cquqd1I" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 1, 2, 1) != 0.) std::cout << "Cquqd1I" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 1, 2, 2) != 0.) std::cout << "Cquqd1I" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 2, 0, 0) != 0.) std::cout << "Cquqd1I" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 2, 0, 1) != 0.) std::cout << "Cquqd1I" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 2, 0, 2) != 0.) std::cout << "Cquqd1I" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 2, 1, 0) != 0.) std::cout << "Cquqd1I" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 2, 1, 1) != 0.) std::cout << "Cquqd1I" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 2, 1, 2) != 0.) std::cout << "Cquqd1I" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 2, 2, 0) != 0.) std::cout << "Cquqd1I" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 2, 2, 1) != 0.) std::cout << "Cquqd1I" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 2, 2, 2) != 0.) std::cout << "Cquqd1I" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 0, 0, 0) != 0.) std::cout << "Cquqd1I" << ", 1, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 0, 0, 1) != 0.) std::cout << "Cquqd1I" << ", 1, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 0, 0, 2) != 0.) std::cout << "Cquqd1I" << ", 1, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 0, 1, 0) != 0.) std::cout << "Cquqd1I" << ", 1, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 0, 1, 1) != 0.) std::cout << "Cquqd1I" << ", 1, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 0, 1, 2) != 0.) std::cout << "Cquqd1I" << ", 1, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 0, 2, 0) != 0.) std::cout << "Cquqd1I" << ", 1, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 0, 2, 1) != 0.) std::cout << "Cquqd1I" << ", 1, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 0, 2, 2) != 0.) std::cout << "Cquqd1I" << ", 1, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 1, 0, 0) != 0.) std::cout << "Cquqd1I" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 1, 0, 1) != 0.) std::cout << "Cquqd1I" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 1, 0, 2) != 0.) std::cout << "Cquqd1I" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 1, 1, 0) != 0.) std::cout << "Cquqd1I" << ", 1, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 1, 1, 1) != 0.) std::cout << "Cquqd1I" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 1, 1, 2) != 0.) std::cout << "Cquqd1I" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 1, 2, 0) != 0.) std::cout << "Cquqd1I" << ", 1, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 1, 2, 1) != 0.) std::cout << "Cquqd1I" << ", 1, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 1, 2, 2) != 0.) std::cout << "Cquqd1I" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 2, 0, 0) != 0.) std::cout << "Cquqd1I" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 2, 0, 1) != 0.) std::cout << "Cquqd1I" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 2, 0, 2) != 0.) std::cout << "Cquqd1I" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 2, 1, 0) != 0.) std::cout << "Cquqd1I" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 2, 1, 1) != 0.) std::cout << "Cquqd1I" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 2, 1, 2) != 0.) std::cout << "Cquqd1I" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 2, 2, 0) != 0.) std::cout << "Cquqd1I" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 2, 2, 1) != 0.) std::cout << "Cquqd1I" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 2, 2, 2) != 0.) std::cout << "Cquqd1I" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 0, 0, 0) != 0.) std::cout << "Cquqd1I" << ", 2, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 0, 0, 1) != 0.) std::cout << "Cquqd1I" << ", 2, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 0, 0, 2) != 0.) std::cout << "Cquqd1I" << ", 2, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 0, 1, 0) != 0.) std::cout << "Cquqd1I" << ", 2, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 0, 1, 1) != 0.) std::cout << "Cquqd1I" << ", 2, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 0, 1, 2) != 0.) std::cout << "Cquqd1I" << ", 2, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 0, 2, 0) != 0.) std::cout << "Cquqd1I" << ", 2, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 0, 2, 1) != 0.) std::cout << "Cquqd1I" << ", 2, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 0, 2, 2) != 0.) std::cout << "Cquqd1I" << ", 2, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 1, 0, 0) != 0.) std::cout << "Cquqd1I" << ", 2, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 1, 0, 1) != 0.) std::cout << "Cquqd1I" << ", 2, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 1, 0, 2) != 0.) std::cout << "Cquqd1I" << ", 2, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 1, 1, 0) != 0.) std::cout << "Cquqd1I" << ", 2, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 1, 1, 1) != 0.) std::cout << "Cquqd1I" << ", 2, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 1, 1, 2) != 0.) std::cout << "Cquqd1I" << ", 2, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 1, 2, 0) != 0.) std::cout << "Cquqd1I" << ", 2, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 1, 2, 1) != 0.) std::cout << "Cquqd1I" << ", 2, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 1, 2, 2) != 0.) std::cout << "Cquqd1I" << ", 2, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 2, 0, 0) != 0.) std::cout << "Cquqd1I" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 2, 0, 1) != 0.) std::cout << "Cquqd1I" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 2, 0, 2) != 0.) std::cout << "Cquqd1I" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 2, 1, 0) != 0.) std::cout << "Cquqd1I" << ", 2, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 2, 1, 1) != 0.) std::cout << "Cquqd1I" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 2, 1, 2) != 0.) std::cout << "Cquqd1I" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 2, 2, 0) != 0.) std::cout << "Cquqd1I" << ", 2, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 2, 2, 1) != 0.) std::cout << "Cquqd1I" << ", 2, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 2, 2, 2) != 0.) std::cout << "Cquqd1I" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd1I", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 0, 0, 0) != 0.) std::cout << "Cquqd8R" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 0, 0, 1) != 0.) std::cout << "Cquqd8R" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 0, 0, 2) != 0.) std::cout << "Cquqd8R" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 0, 1, 0) != 0.) std::cout << "Cquqd8R" << ", 0, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 0, 1, 1) != 0.) std::cout << "Cquqd8R" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 0, 1, 2) != 0.) std::cout << "Cquqd8R" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 0, 2, 0) != 0.) std::cout << "Cquqd8R" << ", 0, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 0, 2, 1) != 0.) std::cout << "Cquqd8R" << ", 0, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 0, 2, 2) != 0.) std::cout << "Cquqd8R" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 1, 0, 0) != 0.) std::cout << "Cquqd8R" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 1, 0, 1) != 0.) std::cout << "Cquqd8R" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 1, 0, 2) != 0.) std::cout << "Cquqd8R" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 1, 1, 0) != 0.) std::cout << "Cquqd8R" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 1, 1, 1) != 0.) std::cout << "Cquqd8R" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 1, 1, 2) != 0.) std::cout << "Cquqd8R" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 1, 2, 0) != 0.) std::cout << "Cquqd8R" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 1, 2, 1) != 0.) std::cout << "Cquqd8R" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 1, 2, 2) != 0.) std::cout << "Cquqd8R" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 2, 0, 0) != 0.) std::cout << "Cquqd8R" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 2, 0, 1) != 0.) std::cout << "Cquqd8R" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 2, 0, 2) != 0.) std::cout << "Cquqd8R" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 2, 1, 0) != 0.) std::cout << "Cquqd8R" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 2, 1, 1) != 0.) std::cout << "Cquqd8R" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 2, 1, 2) != 0.) std::cout << "Cquqd8R" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 2, 2, 0) != 0.) std::cout << "Cquqd8R" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 2, 2, 1) != 0.) std::cout << "Cquqd8R" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 2, 2, 2) != 0.) std::cout << "Cquqd8R" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 0, 0, 0) != 0.) std::cout << "Cquqd8R" << ", 1, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 0, 0, 1) != 0.) std::cout << "Cquqd8R" << ", 1, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 0, 0, 2) != 0.) std::cout << "Cquqd8R" << ", 1, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 0, 1, 0) != 0.) std::cout << "Cquqd8R" << ", 1, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 0, 1, 1) != 0.) std::cout << "Cquqd8R" << ", 1, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 0, 1, 2) != 0.) std::cout << "Cquqd8R" << ", 1, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 0, 2, 0) != 0.) std::cout << "Cquqd8R" << ", 1, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 0, 2, 1) != 0.) std::cout << "Cquqd8R" << ", 1, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 0, 2, 2) != 0.) std::cout << "Cquqd8R" << ", 1, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 1, 0, 0) != 0.) std::cout << "Cquqd8R" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 1, 0, 1) != 0.) std::cout << "Cquqd8R" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 1, 0, 2) != 0.) std::cout << "Cquqd8R" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 1, 1, 0) != 0.) std::cout << "Cquqd8R" << ", 1, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 1, 1, 1) != 0.) std::cout << "Cquqd8R" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 1, 1, 2) != 0.) std::cout << "Cquqd8R" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 1, 2, 0) != 0.) std::cout << "Cquqd8R" << ", 1, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 1, 2, 1) != 0.) std::cout << "Cquqd8R" << ", 1, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 1, 2, 2) != 0.) std::cout << "Cquqd8R" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 2, 0, 0) != 0.) std::cout << "Cquqd8R" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 2, 0, 1) != 0.) std::cout << "Cquqd8R" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 2, 0, 2) != 0.) std::cout << "Cquqd8R" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 2, 1, 0) != 0.) std::cout << "Cquqd8R" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 2, 1, 1) != 0.) std::cout << "Cquqd8R" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 2, 1, 2) != 0.) std::cout << "Cquqd8R" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 2, 2, 0) != 0.) std::cout << "Cquqd8R" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 2, 2, 1) != 0.) std::cout << "Cquqd8R" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 2, 2, 2) != 0.) std::cout << "Cquqd8R" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 0, 0, 0) != 0.) std::cout << "Cquqd8R" << ", 2, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 0, 0, 1) != 0.) std::cout << "Cquqd8R" << ", 2, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 0, 0, 2) != 0.) std::cout << "Cquqd8R" << ", 2, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 0, 1, 0) != 0.) std::cout << "Cquqd8R" << ", 2, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 0, 1, 1) != 0.) std::cout << "Cquqd8R" << ", 2, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 0, 1, 2) != 0.) std::cout << "Cquqd8R" << ", 2, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 0, 2, 0) != 0.) std::cout << "Cquqd8R" << ", 2, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 0, 2, 1) != 0.) std::cout << "Cquqd8R" << ", 2, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 0, 2, 2) != 0.) std::cout << "Cquqd8R" << ", 2, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 1, 0, 0) != 0.) std::cout << "Cquqd8R" << ", 2, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 1, 0, 1) != 0.) std::cout << "Cquqd8R" << ", 2, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 1, 0, 2) != 0.) std::cout << "Cquqd8R" << ", 2, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 1, 1, 0) != 0.) std::cout << "Cquqd8R" << ", 2, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 1, 1, 1) != 0.) std::cout << "Cquqd8R" << ", 2, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 1, 1, 2) != 0.) std::cout << "Cquqd8R" << ", 2, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 1, 2, 0) != 0.) std::cout << "Cquqd8R" << ", 2, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 1, 2, 1) != 0.) std::cout << "Cquqd8R" << ", 2, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 1, 2, 2) != 0.) std::cout << "Cquqd8R" << ", 2, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 2, 0, 0) != 0.) std::cout << "Cquqd8R" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 2, 0, 1) != 0.) std::cout << "Cquqd8R" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 2, 0, 2) != 0.) std::cout << "Cquqd8R" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 2, 1, 0) != 0.) std::cout << "Cquqd8R" << ", 2, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 2, 1, 1) != 0.) std::cout << "Cquqd8R" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 2, 1, 2) != 0.) std::cout << "Cquqd8R" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 2, 2, 0) != 0.) std::cout << "Cquqd8R" << ", 2, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 2, 2, 1) != 0.) std::cout << "Cquqd8R" << ", 2, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 2, 2, 2) != 0.) std::cout << "Cquqd8R" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8R", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 0, 0, 0) != 0.) std::cout << "Cquqd8I" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 0, 0, 1) != 0.) std::cout << "Cquqd8I" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 0, 0, 2) != 0.) std::cout << "Cquqd8I" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 0, 1, 0) != 0.) std::cout << "Cquqd8I" << ", 0, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 0, 1, 1) != 0.) std::cout << "Cquqd8I" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 0, 1, 2) != 0.) std::cout << "Cquqd8I" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 0, 2, 0) != 0.) std::cout << "Cquqd8I" << ", 0, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 0, 2, 1) != 0.) std::cout << "Cquqd8I" << ", 0, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 0, 2, 2) != 0.) std::cout << "Cquqd8I" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 1, 0, 0) != 0.) std::cout << "Cquqd8I" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 1, 0, 1) != 0.) std::cout << "Cquqd8I" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 1, 0, 2) != 0.) std::cout << "Cquqd8I" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 1, 1, 0) != 0.) std::cout << "Cquqd8I" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 1, 1, 1) != 0.) std::cout << "Cquqd8I" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 1, 1, 2) != 0.) std::cout << "Cquqd8I" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 1, 2, 0) != 0.) std::cout << "Cquqd8I" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 1, 2, 1) != 0.) std::cout << "Cquqd8I" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 1, 2, 2) != 0.) std::cout << "Cquqd8I" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 2, 0, 0) != 0.) std::cout << "Cquqd8I" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 2, 0, 1) != 0.) std::cout << "Cquqd8I" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 2, 0, 2) != 0.) std::cout << "Cquqd8I" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 2, 1, 0) != 0.) std::cout << "Cquqd8I" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 2, 1, 1) != 0.) std::cout << "Cquqd8I" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 2, 1, 2) != 0.) std::cout << "Cquqd8I" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 2, 2, 0) != 0.) std::cout << "Cquqd8I" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 2, 2, 1) != 0.) std::cout << "Cquqd8I" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 2, 2, 2) != 0.) std::cout << "Cquqd8I" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 0, 0, 0) != 0.) std::cout << "Cquqd8I" << ", 1, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 0, 0, 1) != 0.) std::cout << "Cquqd8I" << ", 1, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 0, 0, 2) != 0.) std::cout << "Cquqd8I" << ", 1, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 0, 1, 0) != 0.) std::cout << "Cquqd8I" << ", 1, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 0, 1, 1) != 0.) std::cout << "Cquqd8I" << ", 1, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 0, 1, 2) != 0.) std::cout << "Cquqd8I" << ", 1, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 0, 2, 0) != 0.) std::cout << "Cquqd8I" << ", 1, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 0, 2, 1) != 0.) std::cout << "Cquqd8I" << ", 1, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 0, 2, 2) != 0.) std::cout << "Cquqd8I" << ", 1, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 1, 0, 0) != 0.) std::cout << "Cquqd8I" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 1, 0, 1) != 0.) std::cout << "Cquqd8I" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 1, 0, 2) != 0.) std::cout << "Cquqd8I" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 1, 1, 0) != 0.) std::cout << "Cquqd8I" << ", 1, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 1, 1, 1) != 0.) std::cout << "Cquqd8I" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 1, 1, 2) != 0.) std::cout << "Cquqd8I" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 1, 2, 0) != 0.) std::cout << "Cquqd8I" << ", 1, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 1, 2, 1) != 0.) std::cout << "Cquqd8I" << ", 1, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 1, 2, 2) != 0.) std::cout << "Cquqd8I" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 2, 0, 0) != 0.) std::cout << "Cquqd8I" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 2, 0, 1) != 0.) std::cout << "Cquqd8I" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 2, 0, 2) != 0.) std::cout << "Cquqd8I" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 2, 1, 0) != 0.) std::cout << "Cquqd8I" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 2, 1, 1) != 0.) std::cout << "Cquqd8I" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 2, 1, 2) != 0.) std::cout << "Cquqd8I" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 2, 2, 0) != 0.) std::cout << "Cquqd8I" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 2, 2, 1) != 0.) std::cout << "Cquqd8I" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 2, 2, 2) != 0.) std::cout << "Cquqd8I" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 0, 0, 0) != 0.) std::cout << "Cquqd8I" << ", 2, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 0, 0, 1) != 0.) std::cout << "Cquqd8I" << ", 2, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 0, 0, 2) != 0.) std::cout << "Cquqd8I" << ", 2, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 0, 1, 0) != 0.) std::cout << "Cquqd8I" << ", 2, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 0, 1, 1) != 0.) std::cout << "Cquqd8I" << ", 2, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 0, 1, 2) != 0.) std::cout << "Cquqd8I" << ", 2, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 0, 2, 0) != 0.) std::cout << "Cquqd8I" << ", 2, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 0, 2, 1) != 0.) std::cout << "Cquqd8I" << ", 2, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 0, 2, 2) != 0.) std::cout << "Cquqd8I" << ", 2, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 1, 0, 0) != 0.) std::cout << "Cquqd8I" << ", 2, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 1, 0, 1) != 0.) std::cout << "Cquqd8I" << ", 2, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 1, 0, 2) != 0.) std::cout << "Cquqd8I" << ", 2, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 1, 1, 0) != 0.) std::cout << "Cquqd8I" << ", 2, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 1, 1, 1) != 0.) std::cout << "Cquqd8I" << ", 2, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 1, 1, 2) != 0.) std::cout << "Cquqd8I" << ", 2, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 1, 2, 0) != 0.) std::cout << "Cquqd8I" << ", 2, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 1, 2, 1) != 0.) std::cout << "Cquqd8I" << ", 2, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 1, 2, 2) != 0.) std::cout << "Cquqd8I" << ", 2, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 2, 0, 0) != 0.) std::cout << "Cquqd8I" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 2, 0, 1) != 0.) std::cout << "Cquqd8I" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 2, 0, 2) != 0.) std::cout << "Cquqd8I" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 2, 1, 0) != 0.) std::cout << "Cquqd8I" << ", 2, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 2, 1, 1) != 0.) std::cout << "Cquqd8I" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 2, 1, 2) != 0.) std::cout << "Cquqd8I" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 2, 2, 0) != 0.) std::cout << "Cquqd8I" << ", 2, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 2, 2, 1) != 0.) std::cout << "Cquqd8I" << ", 2, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 2, 2, 2) != 0.) std::cout << "Cquqd8I" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Cquqd8I", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 0, 0, 0) != 0.) std::cout << "Clequ1R" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 0, 0, 1) != 0.) std::cout << "Clequ1R" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 0, 0, 2) != 0.) std::cout << "Clequ1R" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 0, 1, 0) != 0.) std::cout << "Clequ1R" << ", 0, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 0, 1, 1) != 0.) std::cout << "Clequ1R" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 0, 1, 2) != 0.) std::cout << "Clequ1R" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 0, 2, 0) != 0.) std::cout << "Clequ1R" << ", 0, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 0, 2, 1) != 0.) std::cout << "Clequ1R" << ", 0, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 0, 2, 2) != 0.) std::cout << "Clequ1R" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 1, 0, 0) != 0.) std::cout << "Clequ1R" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 1, 0, 1) != 0.) std::cout << "Clequ1R" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 1, 0, 2) != 0.) std::cout << "Clequ1R" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 1, 1, 0) != 0.) std::cout << "Clequ1R" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 1, 1, 1) != 0.) std::cout << "Clequ1R" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 1, 1, 2) != 0.) std::cout << "Clequ1R" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 1, 2, 0) != 0.) std::cout << "Clequ1R" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 1, 2, 1) != 0.) std::cout << "Clequ1R" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 1, 2, 2) != 0.) std::cout << "Clequ1R" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 2, 0, 0) != 0.) std::cout << "Clequ1R" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 2, 0, 1) != 0.) std::cout << "Clequ1R" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 2, 0, 2) != 0.) std::cout << "Clequ1R" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 2, 1, 0) != 0.) std::cout << "Clequ1R" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 2, 1, 1) != 0.) std::cout << "Clequ1R" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 2, 1, 2) != 0.) std::cout << "Clequ1R" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 2, 2, 0) != 0.) std::cout << "Clequ1R" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 2, 2, 1) != 0.) std::cout << "Clequ1R" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 2, 2, 2) != 0.) std::cout << "Clequ1R" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 0, 0, 0) != 0.) std::cout << "Clequ1R" << ", 1, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 0, 0, 1) != 0.) std::cout << "Clequ1R" << ", 1, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 0, 0, 2) != 0.) std::cout << "Clequ1R" << ", 1, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 0, 1, 0) != 0.) std::cout << "Clequ1R" << ", 1, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 0, 1, 1) != 0.) std::cout << "Clequ1R" << ", 1, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 0, 1, 2) != 0.) std::cout << "Clequ1R" << ", 1, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 0, 2, 0) != 0.) std::cout << "Clequ1R" << ", 1, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 0, 2, 1) != 0.) std::cout << "Clequ1R" << ", 1, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 0, 2, 2) != 0.) std::cout << "Clequ1R" << ", 1, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 1, 0, 0) != 0.) std::cout << "Clequ1R" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 1, 0, 1) != 0.) std::cout << "Clequ1R" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 1, 0, 2) != 0.) std::cout << "Clequ1R" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 1, 1, 0) != 0.) std::cout << "Clequ1R" << ", 1, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 1, 1, 1) != 0.) std::cout << "Clequ1R" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 1, 1, 2) != 0.) std::cout << "Clequ1R" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 1, 2, 0) != 0.) std::cout << "Clequ1R" << ", 1, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 1, 2, 1) != 0.) std::cout << "Clequ1R" << ", 1, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 1, 2, 2) != 0.) std::cout << "Clequ1R" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 2, 0, 0) != 0.) std::cout << "Clequ1R" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 2, 0, 1) != 0.) std::cout << "Clequ1R" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 2, 0, 2) != 0.) std::cout << "Clequ1R" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 2, 1, 0) != 0.) std::cout << "Clequ1R" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 2, 1, 1) != 0.) std::cout << "Clequ1R" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 2, 1, 2) != 0.) std::cout << "Clequ1R" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 2, 2, 0) != 0.) std::cout << "Clequ1R" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 2, 2, 1) != 0.) std::cout << "Clequ1R" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 2, 2, 2) != 0.) std::cout << "Clequ1R" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 0, 0, 0) != 0.) std::cout << "Clequ1R" << ", 2, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 0, 0, 1) != 0.) std::cout << "Clequ1R" << ", 2, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 0, 0, 2) != 0.) std::cout << "Clequ1R" << ", 2, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 0, 1, 0) != 0.) std::cout << "Clequ1R" << ", 2, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 0, 1, 1) != 0.) std::cout << "Clequ1R" << ", 2, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 0, 1, 2) != 0.) std::cout << "Clequ1R" << ", 2, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 0, 2, 0) != 0.) std::cout << "Clequ1R" << ", 2, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 0, 2, 1) != 0.) std::cout << "Clequ1R" << ", 2, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 0, 2, 2) != 0.) std::cout << "Clequ1R" << ", 2, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 1, 0, 0) != 0.) std::cout << "Clequ1R" << ", 2, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 1, 0, 1) != 0.) std::cout << "Clequ1R" << ", 2, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 1, 0, 2) != 0.) std::cout << "Clequ1R" << ", 2, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 1, 1, 0) != 0.) std::cout << "Clequ1R" << ", 2, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 1, 1, 1) != 0.) std::cout << "Clequ1R" << ", 2, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 1, 1, 2) != 0.) std::cout << "Clequ1R" << ", 2, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 1, 2, 0) != 0.) std::cout << "Clequ1R" << ", 2, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 1, 2, 1) != 0.) std::cout << "Clequ1R" << ", 2, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 1, 2, 2) != 0.) std::cout << "Clequ1R" << ", 2, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 2, 0, 0) != 0.) std::cout << "Clequ1R" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 2, 0, 1) != 0.) std::cout << "Clequ1R" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 2, 0, 2) != 0.) std::cout << "Clequ1R" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 2, 1, 0) != 0.) std::cout << "Clequ1R" << ", 2, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 2, 1, 1) != 0.) std::cout << "Clequ1R" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 2, 1, 2) != 0.) std::cout << "Clequ1R" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 2, 2, 0) != 0.) std::cout << "Clequ1R" << ", 2, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 2, 2, 1) != 0.) std::cout << "Clequ1R" << ", 2, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 2, 2, 2) != 0.) std::cout << "Clequ1R" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1R", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 0, 0, 0) != 0.) std::cout << "Clequ1I" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 0, 0, 1) != 0.) std::cout << "Clequ1I" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 0, 0, 2) != 0.) std::cout << "Clequ1I" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 0, 1, 0) != 0.) std::cout << "Clequ1I" << ", 0, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 0, 1, 1) != 0.) std::cout << "Clequ1I" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 0, 1, 2) != 0.) std::cout << "Clequ1I" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 0, 2, 0) != 0.) std::cout << "Clequ1I" << ", 0, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 0, 2, 1) != 0.) std::cout << "Clequ1I" << ", 0, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 0, 2, 2) != 0.) std::cout << "Clequ1I" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 1, 0, 0) != 0.) std::cout << "Clequ1I" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 1, 0, 1) != 0.) std::cout << "Clequ1I" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 1, 0, 2) != 0.) std::cout << "Clequ1I" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 1, 1, 0) != 0.) std::cout << "Clequ1I" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 1, 1, 1) != 0.) std::cout << "Clequ1I" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 1, 1, 2) != 0.) std::cout << "Clequ1I" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 1, 2, 0) != 0.) std::cout << "Clequ1I" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 1, 2, 1) != 0.) std::cout << "Clequ1I" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 1, 2, 2) != 0.) std::cout << "Clequ1I" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 2, 0, 0) != 0.) std::cout << "Clequ1I" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 2, 0, 1) != 0.) std::cout << "Clequ1I" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 2, 0, 2) != 0.) std::cout << "Clequ1I" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 2, 1, 0) != 0.) std::cout << "Clequ1I" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 2, 1, 1) != 0.) std::cout << "Clequ1I" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 2, 1, 2) != 0.) std::cout << "Clequ1I" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 2, 2, 0) != 0.) std::cout << "Clequ1I" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 2, 2, 1) != 0.) std::cout << "Clequ1I" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 2, 2, 2) != 0.) std::cout << "Clequ1I" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 0, 0, 0) != 0.) std::cout << "Clequ1I" << ", 1, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 0, 0, 1) != 0.) std::cout << "Clequ1I" << ", 1, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 0, 0, 2) != 0.) std::cout << "Clequ1I" << ", 1, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 0, 1, 0) != 0.) std::cout << "Clequ1I" << ", 1, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 0, 1, 1) != 0.) std::cout << "Clequ1I" << ", 1, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 0, 1, 2) != 0.) std::cout << "Clequ1I" << ", 1, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 0, 2, 0) != 0.) std::cout << "Clequ1I" << ", 1, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 0, 2, 1) != 0.) std::cout << "Clequ1I" << ", 1, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 0, 2, 2) != 0.) std::cout << "Clequ1I" << ", 1, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 1, 0, 0) != 0.) std::cout << "Clequ1I" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 1, 0, 1) != 0.) std::cout << "Clequ1I" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 1, 0, 2) != 0.) std::cout << "Clequ1I" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 1, 1, 0) != 0.) std::cout << "Clequ1I" << ", 1, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 1, 1, 1) != 0.) std::cout << "Clequ1I" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 1, 1, 2) != 0.) std::cout << "Clequ1I" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 1, 2, 0) != 0.) std::cout << "Clequ1I" << ", 1, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 1, 2, 1) != 0.) std::cout << "Clequ1I" << ", 1, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 1, 2, 2) != 0.) std::cout << "Clequ1I" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 2, 0, 0) != 0.) std::cout << "Clequ1I" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 2, 0, 1) != 0.) std::cout << "Clequ1I" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 2, 0, 2) != 0.) std::cout << "Clequ1I" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 2, 1, 0) != 0.) std::cout << "Clequ1I" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 2, 1, 1) != 0.) std::cout << "Clequ1I" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 2, 1, 2) != 0.) std::cout << "Clequ1I" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 2, 2, 0) != 0.) std::cout << "Clequ1I" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 2, 2, 1) != 0.) std::cout << "Clequ1I" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 2, 2, 2) != 0.) std::cout << "Clequ1I" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 0, 0, 0) != 0.) std::cout << "Clequ1I" << ", 2, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 0, 0, 1) != 0.) std::cout << "Clequ1I" << ", 2, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 0, 0, 2) != 0.) std::cout << "Clequ1I" << ", 2, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 0, 1, 0) != 0.) std::cout << "Clequ1I" << ", 2, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 0, 1, 1) != 0.) std::cout << "Clequ1I" << ", 2, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 0, 1, 2) != 0.) std::cout << "Clequ1I" << ", 2, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 0, 2, 0) != 0.) std::cout << "Clequ1I" << ", 2, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 0, 2, 1) != 0.) std::cout << "Clequ1I" << ", 2, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 0, 2, 2) != 0.) std::cout << "Clequ1I" << ", 2, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 1, 0, 0) != 0.) std::cout << "Clequ1I" << ", 2, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 1, 0, 1) != 0.) std::cout << "Clequ1I" << ", 2, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 1, 0, 2) != 0.) std::cout << "Clequ1I" << ", 2, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 1, 1, 0) != 0.) std::cout << "Clequ1I" << ", 2, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 1, 1, 1) != 0.) std::cout << "Clequ1I" << ", 2, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 1, 1, 2) != 0.) std::cout << "Clequ1I" << ", 2, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 1, 2, 0) != 0.) std::cout << "Clequ1I" << ", 2, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 1, 2, 1) != 0.) std::cout << "Clequ1I" << ", 2, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 1, 2, 2) != 0.) std::cout << "Clequ1I" << ", 2, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 2, 0, 0) != 0.) std::cout << "Clequ1I" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 2, 0, 1) != 0.) std::cout << "Clequ1I" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 2, 0, 2) != 0.) std::cout << "Clequ1I" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 2, 1, 0) != 0.) std::cout << "Clequ1I" << ", 2, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 2, 1, 1) != 0.) std::cout << "Clequ1I" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 2, 1, 2) != 0.) std::cout << "Clequ1I" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 2, 2, 0) != 0.) std::cout << "Clequ1I" << ", 2, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 2, 2, 1) != 0.) std::cout << "Clequ1I" << ", 2, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 2, 2, 2) != 0.) std::cout << "Clequ1I" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ1I", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 0, 0, 0) != 0.) std::cout << "Clequ3R" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 0, 0, 1) != 0.) std::cout << "Clequ3R" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 0, 0, 2) != 0.) std::cout << "Clequ3R" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 0, 1, 0) != 0.) std::cout << "Clequ3R" << ", 0, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 0, 1, 1) != 0.) std::cout << "Clequ3R" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 0, 1, 2) != 0.) std::cout << "Clequ3R" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 0, 2, 0) != 0.) std::cout << "Clequ3R" << ", 0, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 0, 2, 1) != 0.) std::cout << "Clequ3R" << ", 0, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 0, 2, 2) != 0.) std::cout << "Clequ3R" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 1, 0, 0) != 0.) std::cout << "Clequ3R" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 1, 0, 1) != 0.) std::cout << "Clequ3R" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 1, 0, 2) != 0.) std::cout << "Clequ3R" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 1, 1, 0) != 0.) std::cout << "Clequ3R" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 1, 1, 1) != 0.) std::cout << "Clequ3R" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 1, 1, 2) != 0.) std::cout << "Clequ3R" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 1, 2, 0) != 0.) std::cout << "Clequ3R" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 1, 2, 1) != 0.) std::cout << "Clequ3R" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 1, 2, 2) != 0.) std::cout << "Clequ3R" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 2, 0, 0) != 0.) std::cout << "Clequ3R" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 2, 0, 1) != 0.) std::cout << "Clequ3R" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 2, 0, 2) != 0.) std::cout << "Clequ3R" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 2, 1, 0) != 0.) std::cout << "Clequ3R" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 2, 1, 1) != 0.) std::cout << "Clequ3R" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 2, 1, 2) != 0.) std::cout << "Clequ3R" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 2, 2, 0) != 0.) std::cout << "Clequ3R" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 2, 2, 1) != 0.) std::cout << "Clequ3R" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 2, 2, 2) != 0.) std::cout << "Clequ3R" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 0, 0, 0) != 0.) std::cout << "Clequ3R" << ", 1, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 0, 0, 1) != 0.) std::cout << "Clequ3R" << ", 1, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 0, 0, 2) != 0.) std::cout << "Clequ3R" << ", 1, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 0, 1, 0) != 0.) std::cout << "Clequ3R" << ", 1, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 0, 1, 1) != 0.) std::cout << "Clequ3R" << ", 1, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 0, 1, 2) != 0.) std::cout << "Clequ3R" << ", 1, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 0, 2, 0) != 0.) std::cout << "Clequ3R" << ", 1, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 0, 2, 1) != 0.) std::cout << "Clequ3R" << ", 1, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 0, 2, 2) != 0.) std::cout << "Clequ3R" << ", 1, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 1, 0, 0) != 0.) std::cout << "Clequ3R" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 1, 0, 1) != 0.) std::cout << "Clequ3R" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 1, 0, 2) != 0.) std::cout << "Clequ3R" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 1, 1, 0) != 0.) std::cout << "Clequ3R" << ", 1, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 1, 1, 1) != 0.) std::cout << "Clequ3R" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 1, 1, 2) != 0.) std::cout << "Clequ3R" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 1, 2, 0) != 0.) std::cout << "Clequ3R" << ", 1, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 1, 2, 1) != 0.) std::cout << "Clequ3R" << ", 1, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 1, 2, 2) != 0.) std::cout << "Clequ3R" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 2, 0, 0) != 0.) std::cout << "Clequ3R" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 2, 0, 1) != 0.) std::cout << "Clequ3R" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 2, 0, 2) != 0.) std::cout << "Clequ3R" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 2, 1, 0) != 0.) std::cout << "Clequ3R" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 2, 1, 1) != 0.) std::cout << "Clequ3R" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 2, 1, 2) != 0.) std::cout << "Clequ3R" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 2, 2, 0) != 0.) std::cout << "Clequ3R" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 2, 2, 1) != 0.) std::cout << "Clequ3R" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 2, 2, 2) != 0.) std::cout << "Clequ3R" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 0, 0, 0) != 0.) std::cout << "Clequ3R" << ", 2, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 0, 0, 1) != 0.) std::cout << "Clequ3R" << ", 2, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 0, 0, 2) != 0.) std::cout << "Clequ3R" << ", 2, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 0, 1, 0) != 0.) std::cout << "Clequ3R" << ", 2, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 0, 1, 1) != 0.) std::cout << "Clequ3R" << ", 2, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 0, 1, 2) != 0.) std::cout << "Clequ3R" << ", 2, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 0, 2, 0) != 0.) std::cout << "Clequ3R" << ", 2, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 0, 2, 1) != 0.) std::cout << "Clequ3R" << ", 2, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 0, 2, 2) != 0.) std::cout << "Clequ3R" << ", 2, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 1, 0, 0) != 0.) std::cout << "Clequ3R" << ", 2, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 1, 0, 1) != 0.) std::cout << "Clequ3R" << ", 2, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 1, 0, 2) != 0.) std::cout << "Clequ3R" << ", 2, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 1, 1, 0) != 0.) std::cout << "Clequ3R" << ", 2, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 1, 1, 1) != 0.) std::cout << "Clequ3R" << ", 2, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 1, 1, 2) != 0.) std::cout << "Clequ3R" << ", 2, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 1, 2, 0) != 0.) std::cout << "Clequ3R" << ", 2, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 1, 2, 1) != 0.) std::cout << "Clequ3R" << ", 2, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 1, 2, 2) != 0.) std::cout << "Clequ3R" << ", 2, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 2, 0, 0) != 0.) std::cout << "Clequ3R" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 2, 0, 1) != 0.) std::cout << "Clequ3R" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 2, 0, 2) != 0.) std::cout << "Clequ3R" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 2, 1, 0) != 0.) std::cout << "Clequ3R" << ", 2, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 2, 1, 1) != 0.) std::cout << "Clequ3R" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 2, 1, 2) != 0.) std::cout << "Clequ3R" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 2, 2, 0) != 0.) std::cout << "Clequ3R" << ", 2, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 2, 2, 1) != 0.) std::cout << "Clequ3R" << ", 2, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 2, 2, 2) != 0.) std::cout << "Clequ3R" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3R", 2, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 0, 0, 0) != 0.) std::cout << "Clequ3I" << ", 0, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 0, 0, 1) != 0.) std::cout << "Clequ3I" << ", 0, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 0, 0, 2) != 0.) std::cout << "Clequ3I" << ", 0, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 0, 1, 0) != 0.) std::cout << "Clequ3I" << ", 0, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 0, 1, 1) != 0.) std::cout << "Clequ3I" << ", 0, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 0, 1, 2) != 0.) std::cout << "Clequ3I" << ", 0, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 0, 2, 0) != 0.) std::cout << "Clequ3I" << ", 0, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 0, 2, 1) != 0.) std::cout << "Clequ3I" << ", 0, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 0, 2, 2) != 0.) std::cout << "Clequ3I" << ", 0, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 1, 0, 0) != 0.) std::cout << "Clequ3I" << ", 0, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 1, 0, 1) != 0.) std::cout << "Clequ3I" << ", 0, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 1, 0, 2) != 0.) std::cout << "Clequ3I" << ", 0, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 1, 1, 0) != 0.) std::cout << "Clequ3I" << ", 0, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 1, 1, 1) != 0.) std::cout << "Clequ3I" << ", 0, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 1, 1, 2) != 0.) std::cout << "Clequ3I" << ", 0, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 1, 2, 0) != 0.) std::cout << "Clequ3I" << ", 0, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 1, 2, 1) != 0.) std::cout << "Clequ3I" << ", 0, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 1, 2, 2) != 0.) std::cout << "Clequ3I" << ", 0, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 2, 0, 0) != 0.) std::cout << "Clequ3I" << ", 0, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 2, 0, 1) != 0.) std::cout << "Clequ3I" << ", 0, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 2, 0, 2) != 0.) std::cout << "Clequ3I" << ", 0, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 2, 1, 0) != 0.) std::cout << "Clequ3I" << ", 0, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 2, 1, 1) != 0.) std::cout << "Clequ3I" << ", 0, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 2, 1, 2) != 0.) std::cout << "Clequ3I" << ", 0, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 2, 2, 0) != 0.) std::cout << "Clequ3I" << ", 0, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 2, 2, 1) != 0.) std::cout << "Clequ3I" << ", 0, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 2, 2, 2) != 0.) std::cout << "Clequ3I" << ", 0, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 0, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 0, 0, 0) != 0.) std::cout << "Clequ3I" << ", 1, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 0, 0, 1) != 0.) std::cout << "Clequ3I" << ", 1, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 0, 0, 2) != 0.) std::cout << "Clequ3I" << ", 1, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 0, 1, 0) != 0.) std::cout << "Clequ3I" << ", 1, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 0, 1, 1) != 0.) std::cout << "Clequ3I" << ", 1, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 0, 1, 2) != 0.) std::cout << "Clequ3I" << ", 1, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 0, 2, 0) != 0.) std::cout << "Clequ3I" << ", 1, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 0, 2, 1) != 0.) std::cout << "Clequ3I" << ", 1, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 0, 2, 2) != 0.) std::cout << "Clequ3I" << ", 1, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 1, 0, 0) != 0.) std::cout << "Clequ3I" << ", 1, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 1, 0, 1) != 0.) std::cout << "Clequ3I" << ", 1, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 1, 0, 2) != 0.) std::cout << "Clequ3I" << ", 1, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 1, 1, 0) != 0.) std::cout << "Clequ3I" << ", 1, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 1, 1, 1) != 0.) std::cout << "Clequ3I" << ", 1, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 1, 1, 2) != 0.) std::cout << "Clequ3I" << ", 1, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 1, 2, 0) != 0.) std::cout << "Clequ3I" << ", 1, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 1, 2, 1) != 0.) std::cout << "Clequ3I" << ", 1, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 1, 2, 2) != 0.) std::cout << "Clequ3I" << ", 1, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 2, 0, 0) != 0.) std::cout << "Clequ3I" << ", 1, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 2, 0, 1) != 0.) std::cout << "Clequ3I" << ", 1, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 2, 0, 2) != 0.) std::cout << "Clequ3I" << ", 1, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 2, 1, 0) != 0.) std::cout << "Clequ3I" << ", 1, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 2, 1, 1) != 0.) std::cout << "Clequ3I" << ", 1, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 2, 1, 2) != 0.) std::cout << "Clequ3I" << ", 1, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 2, 2, 0) != 0.) std::cout << "Clequ3I" << ", 1, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 2, 2, 1) != 0.) std::cout << "Clequ3I" << ", 1, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 2, 2, 2) != 0.) std::cout << "Clequ3I" << ", 1, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 1, 2, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 0, 0, 0) != 0.) std::cout << "Clequ3I" << ", 2, 0, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 0, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 0, 0, 1) != 0.) std::cout << "Clequ3I" << ", 2, 0, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 0, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 0, 0, 2) != 0.) std::cout << "Clequ3I" << ", 2, 0, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 0, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 0, 1, 0) != 0.) std::cout << "Clequ3I" << ", 2, 0, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 0, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 0, 1, 1) != 0.) std::cout << "Clequ3I" << ", 2, 0, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 0, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 0, 1, 2) != 0.) std::cout << "Clequ3I" << ", 2, 0, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 0, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 0, 2, 0) != 0.) std::cout << "Clequ3I" << ", 2, 0, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 0, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 0, 2, 1) != 0.) std::cout << "Clequ3I" << ", 2, 0, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 0, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 0, 2, 2) != 0.) std::cout << "Clequ3I" << ", 2, 0, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 0, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 1, 0, 0) != 0.) std::cout << "Clequ3I" << ", 2, 1, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 1, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 1, 0, 1) != 0.) std::cout << "Clequ3I" << ", 2, 1, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 1, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 1, 0, 2) != 0.) std::cout << "Clequ3I" << ", 2, 1, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 1, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 1, 1, 0) != 0.) std::cout << "Clequ3I" << ", 2, 1, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 1, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 1, 1, 1) != 0.) std::cout << "Clequ3I" << ", 2, 1, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 1, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 1, 1, 2) != 0.) std::cout << "Clequ3I" << ", 2, 1, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 1, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 1, 2, 0) != 0.) std::cout << "Clequ3I" << ", 2, 1, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 1, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 1, 2, 1) != 0.) std::cout << "Clequ3I" << ", 2, 1, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 1, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 1, 2, 2) != 0.) std::cout << "Clequ3I" << ", 2, 1, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 1, 2, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 2, 0, 0) != 0.) std::cout << "Clequ3I" << ", 2, 2, 0, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 2, 0, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 2, 0, 1) != 0.) std::cout << "Clequ3I" << ", 2, 2, 0, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 2, 0, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 2, 0, 2) != 0.) std::cout << "Clequ3I" << ", 2, 2, 0, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 2, 0, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 2, 1, 0) != 0.) std::cout << "Clequ3I" << ", 2, 2, 1, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 2, 1, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 2, 1, 1) != 0.) std::cout << "Clequ3I" << ", 2, 2, 1, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 2, 1, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 2, 1, 2) != 0.) std::cout << "Clequ3I" << ", 2, 2, 1, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 2, 1, 2) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 2, 2, 0) != 0.) std::cout << "Clequ3I" << ", 2, 2, 2, 0" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 2, 2, 0) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 2, 2, 1) != 0.) std::cout << "Clequ3I" << ", 2, 2, 2, 1" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 2, 2, 1) << std::endl;
    if (SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 2, 2, 2) != 0.) std::cout << "Clequ3I" << ", 2, 2, 2, 2" << " = " << SMEFTEvolEW.GetCoefficient("Clequ3I", 2, 2, 2, 2) << std::endl;


}

/*
void NPSMEFTd6General::getWCFromEvolutor()
{

    CG = SMEFTEvolEW.GetCoefficient("CG")*LambdaNP2;  
    CW = SMEFTEvolEW.GetCoefficient("CW")*LambdaNP2; 
    CHG = SMEFTEvolEW.GetCoefficient("CHG")*LambdaNP2;  
    CHW = SMEFTEvolEW.GetCoefficient("CHW")*LambdaNP2;  
    CHB = SMEFTEvolEW.GetCoefficient("CHB")*LambdaNP2;  
    CHWB = SMEFTEvolEW.GetCoefficient("CHWB")*LambdaNP2;  
    CHD = SMEFTEvolEW.GetCoefficient("CHD")*LambdaNP2;  
    CHbox = SMEFTEvolEW.GetCoefficient("CHbox")*LambdaNP2;  
    CH = SMEFTEvolEW.GetCoefficient("CH")*LambdaNP2;  
    CGtilde = SMEFTEvolEW.GetCoefficient("CGtilde")*LambdaNP2;  
    CWtilde = SMEFTEvolEW.GetCoefficient("CWtilde")*LambdaNP2;  
    CHGtilde = SMEFTEvolEW.GetCoefficient("CHGtilde")*LambdaNP2;  
    CHWtilde = SMEFTEvolEW.GetCoefficient("CHWtilde")*LambdaNP2;  
    CHBtilde = SMEFTEvolEW.GetCoefficient("CHBtilde")*LambdaNP2;  
    CHWtildeB = SMEFTEvolEW.GetCoefficient("CHWtildeB")*LambdaNP2;  

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {

            CHl1R[i][j] = SMEFTEvolEW.GetCoefficient("CHl1R", i, j)*LambdaNP2;
            CHl1I[i][j] = SMEFTEvolEW.GetCoefficient("CHl1I", i, j)*LambdaNP2;
            CHl3R[i][j] = SMEFTEvolEW.GetCoefficient("CHl3R", i, j)*LambdaNP2;
            CHl3I[i][j] = SMEFTEvolEW.GetCoefficient("CHl3I", i, j)*LambdaNP2;
            CHeR[i][j] = SMEFTEvolEW.GetCoefficient("CHeR", i, j)*LambdaNP2;
            CHeI[i][j] = SMEFTEvolEW.GetCoefficient("CHeI", i, j)*LambdaNP2;
            CHq1R[i][j] = SMEFTEvolEW.GetCoefficient("CHq1R", i, j)*LambdaNP2;
            CHq1I[i][j] = SMEFTEvolEW.GetCoefficient("CHq1I", i, j)*LambdaNP2;
            CHq3R[i][j] = SMEFTEvolEW.GetCoefficient("CHq3R", i, j)*LambdaNP2;
            CHq3I[i][j] = SMEFTEvolEW.GetCoefficient("CHq3I", i, j)*LambdaNP2;
            CHuR[i][j] = SMEFTEvolEW.GetCoefficient("CHuR", i, j)*LambdaNP2;
            CHuI[i][j] = SMEFTEvolEW.GetCoefficient("CHuI", i, j)*LambdaNP2;
            CHdR[i][j] = SMEFTEvolEW.GetCoefficient("CHdR", i, j)*LambdaNP2;
            CHdI[i][j] = SMEFTEvolEW.GetCoefficient("CHdI", i, j)*LambdaNP2;
            CHudR[i][j] = SMEFTEvolEW.GetCoefficient("CHudR", i, j)*LambdaNP2;
            CHudI[i][j] = SMEFTEvolEW.GetCoefficient("CHudI", i, j)*LambdaNP2;
            CeHR[i][j] = SMEFTEvolEW.GetCoefficient("CeHR", i, j)*LambdaNP2;
            CeHI[i][j] = SMEFTEvolEW.GetCoefficient("CeHI", i, j)*LambdaNP2;
            CuHR[i][j] = SMEFTEvolEW.GetCoefficient("CuHR", i, j)*LambdaNP2;
            CuHI[i][j] = SMEFTEvolEW.GetCoefficient("CuHI", i, j)*LambdaNP2;
            CdHR[i][j] = SMEFTEvolEW.GetCoefficient("CdHR", i, j)*LambdaNP2;
            CdHI[i][j] = SMEFTEvolEW.GetCoefficient("CdHI", i, j)*LambdaNP2;
            CuGR[i][j] = SMEFTEvolEW.GetCoefficient("CuGR", i, j)*LambdaNP2;
            CuGI[i][j] = SMEFTEvolEW.GetCoefficient("CuGI", i, j)*LambdaNP2;
            CuWR[i][j] = SMEFTEvolEW.GetCoefficient("CuWR", i, j)*LambdaNP2;
            CuWI[i][j] = SMEFTEvolEW.GetCoefficient("CuWI", i, j)*LambdaNP2;
            CuBR[i][j] = SMEFTEvolEW.GetCoefficient("CuBR", i, j)*LambdaNP2;
            CuBI[i][j] = SMEFTEvolEW.GetCoefficient("CuBI", i, j)*LambdaNP2;
            CdGR[i][j] = SMEFTEvolEW.GetCoefficient("CdGR", i, j)*LambdaNP2;
            CdGI[i][j] = SMEFTEvolEW.GetCoefficient("CdGI", i, j)*LambdaNP2;
            CdWR[i][j] = SMEFTEvolEW.GetCoefficient("CdWR", i, j)*LambdaNP2;
            CdWI[i][j] = SMEFTEvolEW.GetCoefficient("CdWI", i, j)*LambdaNP2;
            CdBR[i][j] = SMEFTEvolEW.GetCoefficient("CdBR", i, j)*LambdaNP2;
            CdBI[i][j] = SMEFTEvolEW.GetCoefficient("CdBI", i, j)*LambdaNP2;
            CeWR[i][j] = SMEFTEvolEW.GetCoefficient("CeWR", i, j)*LambdaNP2;
            CeWI[i][j] = SMEFTEvolEW.GetCoefficient("CeWI", i, j)*LambdaNP2;
            CeBR[i][j] = SMEFTEvolEW.GetCoefficient("CeBR", i, j)*LambdaNP2;
            CeBI[i][j] = SMEFTEvolEW.GetCoefficient("CeBI", i, j)*LambdaNP2;
 
            for (int k = 0; k < 3; k++) {
                for (int l = 0; l < 3; l++) {
        
                    CllR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CllR", i, j, k, l)*LambdaNP2;
                    CllI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CllI", i, j, k, l)*LambdaNP2;
                    Clq1R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Clq1R", i, j, k, l)*LambdaNP2;
                    Clq1I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Clq1I", i, j, k, l)*LambdaNP2;
                    Clq3R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Clq3R", i, j, k, l)*LambdaNP2;
                    Clq3I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Clq3I", i, j, k, l)*LambdaNP2;
                    CeeR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CeeR", i, j, k, l)*LambdaNP2;
                    CeeI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CeeI", i, j, k, l)*LambdaNP2;
                    CeuR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CeuR", i, j, k, l)*LambdaNP2;
                    CeuI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CeuI", i, j, k, l)*LambdaNP2;
                    CedR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CedR", i, j, k, l)*LambdaNP2;
                    CedI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CedI", i, j, k, l)*LambdaNP2;
                    CleR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CleR", i, j, k, l)*LambdaNP2;
                    CleI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CleI", i, j, k, l)*LambdaNP2;
                    CluR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CluR", i, j, k, l)*LambdaNP2;
                    CluI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CluI", i, j, k, l)*LambdaNP2;
                    CldR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CldR", i, j, k, l)*LambdaNP2;
                    CldI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CldI", i, j, k, l)*LambdaNP2;
                    CqeR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CqeR", i, j, k, l)*LambdaNP2;
                    CqeI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CqeI", i, j, k, l)*LambdaNP2;
                    CledqR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CledqR", i, j, k, l)*LambdaNP2;
                    CledqI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CledqI", i, j, k, l)*LambdaNP2;
                    Cqq1R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqq1R", i, j, k, l)*LambdaNP2;
                    Cqq1I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqq1I", i, j, k, l)*LambdaNP2;
                    Cqq3R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqq3R", i, j, k, l)*LambdaNP2;
                    Cqq3I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqq3I", i, j, k, l)*LambdaNP2;
                    CuuR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CuuR", i, j, k, l)*LambdaNP2;
                    CuuI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CuuI", i, j, k, l)*LambdaNP2;
                    CddR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CddR", i, j, k, l)*LambdaNP2;
                    CddI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CddI", i, j, k, l)*LambdaNP2;
                    Cud1R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cud1R", i, j, k, l)*LambdaNP2;
                    Cud1I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cud1I", i, j, k, l)*LambdaNP2;
                    Cud8R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cud8R", i, j, k, l)*LambdaNP2;
                    Cud8I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cud8I", i, j, k, l)*LambdaNP2;
                    Cqu1R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqu1R", i, j, k, l)*LambdaNP2;
                    Cqu1I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqu1I", i, j, k, l)*LambdaNP2;
                    Cqu8R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqu8R", i, j, k, l)*LambdaNP2;
                    Cqu8I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqu8I", i, j, k, l)*LambdaNP2;
                    Cqd1R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqd1R", i, j, k, l)*LambdaNP2;
                    Cqd1I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqd1I", i, j, k, l)*LambdaNP2;
                    Cqd8R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqd8R", i, j, k, l)*LambdaNP2;
                    Cqd8I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqd8I", i, j, k, l)*LambdaNP2;
                    Cquqd1R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cquqd1R", i, j, k, l)*LambdaNP2;
                    Cquqd1I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cquqd1I", i, j, k, l)*LambdaNP2;
                    Cquqd8R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cquqd8R", i, j, k, l)*LambdaNP2;
                    Cquqd8I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cquqd8I", i, j, k, l)*LambdaNP2;
                    Clequ1R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Clequ1R", i, j, k, l)*LambdaNP2;
                    Clequ1I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Clequ1I", i, j, k, l)*LambdaNP2;
                    Clequ3R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Clequ3R", i, j, k, l)*LambdaNP2;
                    Clequ3I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Clequ3I", i, j, k, l)*LambdaNP2;
 
                }
            }
        }
    }
}
 */

void NPSMEFTd6General::GenerateSMInitialConditions()  {
    //    std::cout<<"\033[1;31m Mw_inp = \033[0m "<< Mw_inp << std::endl;

    LambdaNP2 = Lambda_NP * Lambda_NP;
    LambdaNPm2 = 1. / LambdaNP2;
    
    //  1) Post-update operations involving SM parameters only 

    v2 = v() * v();
    v2_over_LambdaNP2 = v2 / LambdaNP2;

    // SM parameters using tree-level relations, depending on the input scheme
    aleMz = trueSM.alphaMz();
    eeMz = cAsch * sqrt(4.0 * M_PI * aleMz)
            + cWsch * sqrt(4.0 * sqrt(2.0) * GF * Mw_inp * Mw_inp * (1.0 - Mw_inp * Mw_inp / Mz / Mz));
    eeMz2 = eeMz*eeMz;

    sW2_tree = cAsch * (0.5 * (1.0 - sqrt(1.0 - eeMz2 / (sqrt(2.0) * GF * Mz * Mz))))
            + cWsch * (1.0 - Mw_inp * Mw_inp / Mz / Mz);
    cW2_tree = 1.0 - sW2_tree;

    sW_tree = sqrt(sW2_tree);
    cW_tree = sqrt(cW2_tree);

    g1_tree = eeMz / cW_tree;
    g2_tree = eeMz / sW_tree;
    g3_tree = sqrt(4.0 * M_PI * AlsMz);

    Mw_tree = cAsch * (Mz * cW_tree)
            + cWsch * Mw_inp;

    lambdaH_tree = mHl * mHl / 2.0 / v2;

    gZvL = (leptons[NEUTRINO_1].getIsospin());
    gZlL = (leptons[ELECTRON].getIsospin()) - (leptons[ELECTRON].getCharge()) * sW2_tree;
    gZlR = -(leptons[ELECTRON].getCharge()) * sW2_tree;
    gZuL = (quarks[UP].getIsospin()) - (quarks[UP].getCharge()) * sW2_tree;
    gZuR = -(quarks[UP].getCharge()) * sW2_tree;
    gZdL = (quarks[DOWN].getIsospin()) - (quarks[DOWN].getCharge()) * sW2_tree;
    gZdR = -(quarks[DOWN].getCharge()) * sW2_tree;

    dZH = -(9.0 / 16.0)*(GF * mHl * mHl / sqrt(2.0) / M_PI / M_PI)*(2.0 * M_PI / 3.0 / sqrt(3.0) - 1.0);

    dZH1 = dZH / (1.0 - dZH);

    dZH2 = dZH * (1 + 3.0 * dZH) / (1.0 - dZH) / (1.0 - dZH);

    //2) Post-update operations involving dimension-6 operators

    ChangeToEvolutorsBasisPureSM();
    //ChangeToEvolutorsBasisSMEFTtoSM();
    Mu_LEW[0] = mu_LEW;
    Mu_LEW[1] = mc_LEW;
    Mu_LEW[2] = mt_LEW;

    Md_LEW[0] = md_LEW;
    Md_LEW[1] = ms_LEW;
    Md_LEW[2] = mb_LEW;

    Me_LEW[0] = me_LEW;
    Me_LEW[1] = mmu_LEW;
    Me_LEW[2] = mtau_LEW;
    
    
    // Renormalization Group Evolution (RGE)
    
    // Logs of the scales used in the evolutors, from top to bottom
    tmu2 = log(500.0/Lambda_NP); 
    tmu3 = log(365.0/Lambda_NP); 
    tmu4 = log(240.0/Lambda_NP);
    tmu5 = log(mHl/Lambda_NP);
    tmuw = log(muw/Lambda_NP);
    
    // SMEFTEvol* setup
    
    if (FlagRGEci) {

        // SM initial conditions for RGEsolver SMEFTEvolEW
        SMEFTEvolEW.GenerateSMInitialConditions(muw, Lambda_NP, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);

        }
    else {

        // SM initial conditions for RGEsolver SMEFTEvolEW        
        // Skip RGE by setting the two scales at Lambda_NP for the EFT and to muw for the SM pars
        SMEFTEvolEW.GenerateSMInitialConditions(muw, muw, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);
    }

    isSMInitialConditionComputed = true;
}

bool NPSMEFTd6General::PostUpdate() {
    
    if (!isSMInitialConditionComputed) GenerateSMInitialConditions();

    if (FlagRGEci) {

        // SMEFT initial conditions for RGEsolver SMEFTEvolEW
        setSMEFTEvolWC(SMEFTEvolEW);
        
        //printNonVanishingSMEFTCoeffEW();
        //std::cout << Lambda_NP << " " << muw << " " << SMEFTBasisFlag << std::endl;
        // Do the evolution of the SMEFT Coefficients at linear order first; THIS DOES NOT EVOLVE THE SM PARAMETERS, only computes the corrections to them due to the SMEFT coefficients
        SMEFTEvolEW.EvolveSMEFTOnly(Lambda_NP, muw);
        // Evolve the SM parameters with the SM RGEs
        SMEFTEvolEW.EvolveSMOnly("Numeric", Lambda_NP, muw);
        //Now everything has been evolved
        //printNonVanishingSMEFTCoeffEW();
        
        // Work with the extra instances of RGEsolver: would be better to have a deep copy of SMEFTEvolEW

        // SM initial conditions for RGEsolver        
        SMEFTEvolMH.GenerateSMInitialConditions(muw, Lambda_NP, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);
        
        SMEFTEvol240.GenerateSMInitialConditions(muw, Lambda_NP, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);
        
        SMEFTEvol365.GenerateSMInitialConditions(muw, Lambda_NP, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);
        
        SMEFTEvol550.GenerateSMInitialConditions(muw, Lambda_NP, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);
        
        SMEFTEvol1000.GenerateSMInitialConditions(muw, Lambda_NP, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);
        
        SMEFTEvol1500.GenerateSMInitialConditions(muw, Lambda_NP, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);
        
        SMEFTEvol3000.GenerateSMInitialConditions(muw, Lambda_NP, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);
        
        SMEFTEvol5000.GenerateSMInitialConditions(muw, Lambda_NP, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);
        
        SMEFTEvolUV.GenerateSMInitialConditions(muw, Lambda_NP, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);

        // SMEFT initial conditions for RGEsolver
        setSMEFTEvolWC(SMEFTEvolMH);
        setSMEFTEvolWC(SMEFTEvol240);
        setSMEFTEvolWC(SMEFTEvol365);
        setSMEFTEvolWC(SMEFTEvol550);
        setSMEFTEvolWC(SMEFTEvol1000);
        setSMEFTEvolWC(SMEFTEvol1500);
        setSMEFTEvolWC(SMEFTEvol3000);
        setSMEFTEvolWC(SMEFTEvol5000);
        setSMEFTEvolWC(SMEFTEvolUV); // Not evolved. Only for reference to retrieve C(Lambda)
        
        if (FlagmultiScaleRGE) {
        // Perform the evolution for the other RGE instances
            SMEFTEvolMH.EvolveSMEFTOnly(Lambda_NP, 125.1);
            SMEFTEvol240.EvolveSMEFTOnly(Lambda_NP, 240.);
            SMEFTEvol365.EvolveSMEFTOnly(Lambda_NP, 365.);
            SMEFTEvol550.EvolveSMEFTOnly(Lambda_NP, 550.);
            SMEFTEvol1000.EvolveSMEFTOnly(Lambda_NP, fmin(1000.,Lambda_NP) );
            SMEFTEvol1500.EvolveSMEFTOnly(Lambda_NP, fmin(1500.,Lambda_NP) );
            SMEFTEvol3000.EvolveSMEFTOnly(Lambda_NP, fmin(3000.,Lambda_NP) );
            SMEFTEvol5000.EvolveSMEFTOnly(Lambda_NP, fmin(5000.,Lambda_NP) );
        } else {
            SMEFTEvolMH.EvolveSMEFTOnly(Lambda_NP, Lambda_NP);
            SMEFTEvol240.EvolveSMEFTOnly(Lambda_NP, Lambda_NP);
            SMEFTEvol365.EvolveSMEFTOnly(Lambda_NP, Lambda_NP);
            SMEFTEvol550.EvolveSMEFTOnly(Lambda_NP, Lambda_NP);
            SMEFTEvol1000.EvolveSMEFTOnly(Lambda_NP, Lambda_NP);
            SMEFTEvol1500.EvolveSMEFTOnly(Lambda_NP, Lambda_NP);
            SMEFTEvol3000.EvolveSMEFTOnly(Lambda_NP, Lambda_NP);
            SMEFTEvol5000.EvolveSMEFTOnly(Lambda_NP, Lambda_NP);
        }
        
    } else {

        // SMEFT initial conditions for RGEsolver SMEFTEvolEW
        setSMEFTEvolWC(SMEFTEvolEW);
        
        SMEFTEvolEW.EvolveSMEFTOnly(Lambda_NP, Lambda_NP);
        SMEFTEvolEW.EvolveSMOnly("Numeric", muw, muw);
        
        // Work with the extra instances of RGEsolver: would be better to have a deep copy of SMEFTEvolEW

        // SM initial conditions for RGEsolver        
        SMEFTEvolMH.GenerateSMInitialConditions(muw, muw, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);
        
        SMEFTEvol240.GenerateSMInitialConditions(muw, muw, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);
        
        SMEFTEvol365.GenerateSMInitialConditions(muw, muw, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);
        
        SMEFTEvol550.GenerateSMInitialConditions(muw, muw, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);
        
        SMEFTEvol1000.GenerateSMInitialConditions(muw, muw, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);
        
        SMEFTEvol1500.GenerateSMInitialConditions(muw, muw, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);
        
        SMEFTEvol3000.GenerateSMInitialConditions(muw, muw, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);
        
        SMEFTEvol5000.GenerateSMInitialConditions(muw, muw, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);
        
        SMEFTEvolUV.GenerateSMInitialConditions(muw, muw, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW,
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);

        // SMEFT initial conditions for RGEsolver        
        setSMEFTEvolWC(SMEFTEvolMH);
        setSMEFTEvolWC(SMEFTEvol240);
        setSMEFTEvolWC(SMEFTEvol365);
        setSMEFTEvolWC(SMEFTEvol550);
        setSMEFTEvolWC(SMEFTEvol1000);
        setSMEFTEvolWC(SMEFTEvol1500);
        setSMEFTEvolWC(SMEFTEvol3000);
        setSMEFTEvolWC(SMEFTEvol5000);
        setSMEFTEvolWC(SMEFTEvolUV); // Not evolved. Only for reference to retrieve C(Lambda)
        
        // Skip RGE by setting the two scales at Lambda_NP for the EFT
        SMEFTEvolMH.EvolveSMEFTOnly(Lambda_NP, Lambda_NP);
        SMEFTEvol240.EvolveSMEFTOnly(Lambda_NP, Lambda_NP);
        SMEFTEvol365.EvolveSMEFTOnly(Lambda_NP, Lambda_NP);
        SMEFTEvol550.EvolveSMEFTOnly(Lambda_NP, Lambda_NP);
        SMEFTEvol1000.EvolveSMEFTOnly(Lambda_NP, Lambda_NP);
        SMEFTEvol1500.EvolveSMEFTOnly(Lambda_NP, Lambda_NP);
        SMEFTEvol3000.EvolveSMEFTOnly(Lambda_NP, Lambda_NP);
        SMEFTEvol5000.EvolveSMEFTOnly(Lambda_NP, Lambda_NP);
    }
    
    // Renormalization of gauge fields parameters
    delta_ZZ = (cW2_tree * getSMEFTCoeffEW("CHW") + sW2_tree * getSMEFTCoeffEW("CHB") + sW_tree * cW_tree * getSMEFTCoeffEW("CHWB")) * v2;
    delta_AA = (sW2_tree * getSMEFTCoeffEW("CHW") + cW2_tree * getSMEFTCoeffEW("CHB") - sW_tree * cW_tree * getSMEFTCoeffEW("CHWB")) * v2;
    delta_AZ = 2.0 * sW_tree * cW_tree * (getSMEFTCoeffEW("CHW") - getSMEFTCoeffEW("CHB")) * v2
            - (cW2_tree - sW2_tree) * getSMEFTCoeffEW("CHWB") * v2;

    // Similar definitions for the EWPO
    delta_Z = 2.0 * sW_tree * cW_tree * getSMEFTCoeffEW("CHWB") * v2;
    delta_A = -2.0 * sW_tree * cW_tree * getSMEFTCoeffEW("CHWB") * v2;
    delta_ZA = (cW2_tree - sW2_tree) * getSMEFTCoeffEW("CHWB") * v2;

    // Renormalization of Higgs field parameter
    delta_h = (-getSMEFTCoeffEW("CHD") / 4.0 + getSMEFTCoeffEW("CHbox")) * v2;

    //  Calculation of some quantities repeatedly used in the code

    //  NP corrections to Z and W mass Lagrangian parameters
    delta_MZ = (sW_tree * cW_tree * getSMEFTCoeffEW("CHWB") + 0.25 * getSMEFTCoeffEW("CHD") + (3.0 / 8.0) * getSMEFTCoeffEW("CH") / lambdaH_tree) * v2;
    delta_MW = (3.0 / 8.0) * (getSMEFTCoeffEW("CH") / lambdaH_tree) * v2;

    //  NP correction to Fermi constant, as extracted from muon decay
    delta_GF = DeltaGF();

    //  NP correction to the vev, as extracted from GF
    delta_v = 0.5 * delta_GF;

    //  NP corrections to electric constant parameter and weak mixing angle, depending on the input scheme
    delta_e = cAsch * (-0.5 * delta_A)
            + cWsch * ((cW2_tree / sW2_tree) * (delta_MW - delta_MZ) - 0.5 * delta_GF);
    
    delta_em = delta_e + 0.5 * delta_A; // Relative dimension 6 correction to the QED interaction vertex

    delta_sW2 = cAsch * (-cW2_tree * (delta_GF - 2.0 * (delta_MW - delta_MZ) - delta_A) / (sW2_tree - cW2_tree))
            + cWsch * (2.0 * cW2_tree * (delta_MW - delta_MZ) / sW2_tree);

    //  NP indirect corrections to EW fermion couplings
    delta_UgNC = (0.5 * delta_Z - 0.5 * delta_GF + delta_MW - delta_MZ);

    delta_QgNC = -(sW_tree * cW_tree * delta_ZA + sW2_tree * delta_sW2);

    delta_UgCC = (delta_e - 0.5 * delta_sW2);
    
    ////////////////////////////////////////////////////////////////////////////
    //AG:begin
    delta_ale = -2.0 * sW_tree * cW_tree * getSMEFTCoeffEW("CHWB") * v2;

    delta_Mz2 = (getSMEFTCoeffEW("CHD") / 2.0 + 2.0 * sW_tree * cW_tree * getSMEFTCoeffEW("CHWB")) * v2;

    delta_g1 = cAsch * (g1_tree * (cW2_tree * delta_ale - sW2_tree * (delta_Mz2 + delta_GF)) / 2.0 / (-1 + 2.0 * sW2_tree))
            + cWsch * (g1_tree * (-delta_Mz2 / 2.0 / sW2_tree - delta_GF / 2.0));

    delta_g2 = cAsch * (g2_tree * (sW2_tree * delta_ale - cW2_tree * (delta_Mz2 + delta_GF)) / 2.0 / (cW2_tree - sW2_tree))
            + cWsch * (g2_tree * (-delta_GF / 2.0));

    xWZ_tree = +g2_tree / pow((g1_tree * g1_tree + g2_tree * g2_tree), 0.5); // cbar of Manohar
    delta_xWZ = g1_tree * (g1_tree * delta_g2 - g2_tree * delta_g1 + g1_tree * g1_tree * getSMEFTCoeffEW("CHWB") * v2) / pow((g1_tree * g1_tree + g2_tree * g2_tree), 1.5);

    xBZ_tree = -g1_tree / pow((g1_tree * g1_tree + g2_tree * g2_tree), 0.5); // -sbar of Manohar
    delta_xBZ = g2_tree * (g1_tree * delta_g2 - g2_tree * delta_g1 - g2_tree * g2_tree * getSMEFTCoeffEW("CHWB") * v2) / pow((g1_tree * g1_tree + g2_tree * g2_tree), 1.5);
    //AG:end
    ////////////////////////////////////////////////////////////////////////////

    //Go to mass eigenstate basis first; this is done here since we need to reassign quark masses and the CKM matrix

    double vT = v();
    double delta_vT = getDelta_v();
    double vTosq2 = vT / sqrt(2.);

    // Let us first define the full mass matrices, including the effect of dimension six operators

    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++) {
            MUQ.assignre(i, j, vTosq2 * (getSMEFTCoeffEW("YuR", i, j) * (1. + delta_vT) + FlagCorrsInSMRunning * getSMEFTCoeffEW("dYuR", i, j) - getSMEFTCoeffEW("CuHR", i, j) * v2 / 2.));
            MUQ.assignim(i, j, vTosq2 * (getSMEFTCoeffEW("YuI", i, j) * (1. + delta_vT) + FlagCorrsInSMRunning * getSMEFTCoeffEW("dYuI", i, j) - getSMEFTCoeffEW("CuHI", i, j) * v2 / 2.));
            MDQ.assignre(i, j, vTosq2 * (getSMEFTCoeffEW("YdR", i, j) * (1. + delta_vT) + FlagCorrsInSMRunning * getSMEFTCoeffEW("dYdR", i, j) - getSMEFTCoeffEW("CdHR", i, j) * v2 / 2.));
            MDQ.assignim(i, j, vTosq2 * (getSMEFTCoeffEW("YdI", i, j) * (1. + delta_vT) + FlagCorrsInSMRunning * getSMEFTCoeffEW("dYdI", i, j) - getSMEFTCoeffEW("CdHI", i, j) * v2 / 2.));
        }

    gslpp::vector<double> mmu(3), mmd(3);
    
    //std::cout<<"    |"<<MUQ(0,0)<<","<<MUQ(0,1)<<","<<MUQ(0,2)<<"|"<<std::endl;
    //std::cout<<"MUQ=|"<<MUQ(1,0)<<","<<MUQ(1,1)<<","<<MUQ(1,2)<<"|"<<std::endl;
    //std::cout<<"    |"<<MUQ(2,0)<<","<<MUQ(2,1)<<","<<MUQ(2,2)<<"|"<<std::endl;
    //std::cout<<"  "<<std::endl;
    //std::cout<<"    |"<<MDQ(0,0)<<","<<MDQ(0,1)<<","<<MDQ(0,2)<<"|"<<std::endl;
    //std::cout<<"MDQ=|"<<MDQ(1,0)<<","<<MDQ(1,1)<<","<<MDQ(1,2)<<"|"<<std::endl;
    //std::cout<<"    |"<<MDQ(2,0)<<","<<MDQ(2,1)<<","<<MDQ(2,2)<<"|"<<std::endl;
    //std::cout<<"  "<<std::endl;

    MUQ.singularvalue(VuR, VuL, mmu);
    if(mmu(2) < 50.0) {
        std::cout << "Warning: top quark mass is too low, m(2) = " << mmu(2) << std::endl;
        return false;
    }

    MDQ.singularvalue(VdR, VdL, mmd);
    if(mmd(2) < 2.5) {
        std::cout << "Warning: bottom quark mass is too low, m(2) = " << mmd(2) << std::endl;
        return false;
    }

    //do heavy quarks first to get the thresholds right
    quarks[TOP].setMass(Mofmu2Mbar(mmu(2), getMuw(), QCD::TOP));
    trueSM.setQuarkMass(TOP,Mofmu2Mbar(mmu(2), getMuw(), QCD::TOP));
    setMtpole(Mbar2Mp(quarks[TOP].getMass(), QCD::TOP));
    trueSM.setMtpole(Mbar2Mp(quarks[TOP].getMass(), QCD::TOP));
    quarks[BOTTOM].setMass(Mofmu2Mbar(mmd(2), getMuw(), QCD::BOTTOM));
    trueSM.setQuarkMass(BOTTOM,Mofmu2Mbar(mmd(2), getMuw(), QCD::BOTTOM));
    quarks[CHARM].setMass(Mofmu2Mbar(mmu(1), getMuw(), QCD::CHARM));
    trueSM.setQuarkMass(CHARM,Mofmu2Mbar(mmu(1), getMuw(), QCD::CHARM));
    quarks[STRANGE].setMass(Mrun(quarks[STRANGE].getMass_scale(), getMuw(), mmd(1), QCD::STRANGE));
    trueSM.setQuarkMass(STRANGE,Mrun(quarks[STRANGE].getMass_scale(), getMuw(), mmd(1), QCD::STRANGE));
    quarks[DOWN].setMass(Mrun(quarks[DOWN].getMass_scale(), getMuw(), mmd(0), QCD::DOWN));
    trueSM.setQuarkMass(DOWN,Mrun(quarks[DOWN].getMass_scale(), getMuw(), mmd(0), QCD::DOWN));
    quarks[UP].setMass(Mrun(quarks[UP].getMass_scale(), getMuw(), mmu(0), QCD::UP));
    trueSM.setQuarkMass(UP,Mrun(quarks[UP].getMass_scale(), getMuw(), mmu(0), QCD::UP));

    VuLd = VuL.hconjugate();

    // Computing the CKM
    gslpp::matrix<complex> CKMUnphys = VuLd * VdL;

    // std::cout << "CKM unphys = " << CKMUnphys << std::endl;

    myCKM.computeCKM(CKMUnphys(0, 1).abs(), CKMUnphys(1, 2).abs(), CKMUnphys(0, 2).abs(),
            (-CKMUnphys(0, 0) * CKMUnphys(0, 2).conjugate() / (CKMUnphys(1, 0) * CKMUnphys(1, 2).conjugate())).arg());
    trueSM.setCKM(myCKM);

    // std::cout << "computed CKM = " << getCKM().getCKM() << std::endl;

    double a11 = remainder(CKMUnphys(0, 0).arg() - getCKM().getV_ud().arg(), 2. * M_PI);
    double a12 = remainder(CKMUnphys(0, 1).arg() - getCKM().getV_us().arg(), 2. * M_PI);
    double a13 = remainder(CKMUnphys(0, 2).arg() - getCKM().getV_ub().arg(), 2. * M_PI);

    //    double a23 = (gslpp::complex(CKMUnphys(1, 0) / CKM(1, 0))).arg() - a11 + a13;
    //    double a33 = (gslpp::complex(CKMUnphys(2, 0) / CKM(2, 0))).arg() - a11 + a13;
    double a23 = remainder(CKMUnphys(1, 0).arg() - getCKM().getV_cd().arg(), 2. * M_PI) - a11 + a13;
    double a33 = remainder(CKMUnphys(2, 0).arg() - getCKM().getV_td().arg(), 2. * M_PI) - a11 + a13;

    gslpp::matrix<gslpp::complex> phi1(3, 3, 0.);
    phi1.assign(0, 0, 1.);
    phi1.assign(1, 1, gslpp::complex(1., a23 - a13, true));
    phi1.assign(2, 2, gslpp::complex(1., a33 - a13, true));

    gslpp::matrix<gslpp::complex> phi2dag(3, 3, 0.);
    phi2dag.assign(0, 0, gslpp::complex(1., -a11, true));
    phi2dag.assign(1, 1, gslpp::complex(1., -a12, true));
    phi2dag.assign(2, 2, gslpp::complex(1., -a13, true));

    VuL = VuL * phi1;
    VuR = VuR * phi1;
    VdL = VdL * phi2dag;
    VdR = VdR * phi2dag;

    // Hermitian conjugates
    VuLd = VuL.hconjugate();
    VuRd = VuR.hconjugate();
    VdLd = VdL.hconjugate();
    VdRd = VdR.hconjugate();


    // do the NPbase PostUpdate without recomputing the top mass and the CKM matrix
    computemt=false;
    trueSM.setComputemt(false);
    requireCKM=false;
    trueSM.setRequireCKM(false);

    if (!NPbase::PostUpdate()) return (false);
    if (!trueSM.PostUpdate()) return (false);

    //  NP corrections to Total Higgs width
    dGammaHTotR1 = deltaGammaTotalRatio1();

    if (FlagQuadraticTerms) {
        dGammaHTotR2 = deltaGammaTotalRatio2();
    } else {
        dGammaHTotR2 = 0.0;
    }

    //  Total: to be used in BR functions to check positivity
    GammaHTotR = 1.0 + dGammaHTotR1 + dGammaHTotR2;

    // The total theory error in the H width: set to 0.0 for the moment
    eHwidth = deltaGammaTotalRatio1() - deltaGammaTotalRatio1noError();
    
    // C1 value for the total Higgs width
    C1Htotal = C1Htot();

    //The call to this method should be dropped once we have correctly implemented the matching
    //getWCFromEvolutor();


    UevL = 1.0; // Neglect PMNS effects in high-pT observables 
    VudL = 1.0; // Neglect CKM effects in high-pT observables 

    //    Yuke = sqrt(2.) * (leptons[ELECTRON].getMass()) / v();
    //    Yukmu = sqrt(2.) * (leptons[MU].getMass()) / v();
    //    Yuktau = sqrt(2.) * (leptons[TAU].getMass()) / v();
    //    Yuku = sqrt(2.) * (quarks[UP].getMass()) / v();
    //    Yukc = sqrt(2.) * (quarks[CHARM].getMass()) / v();
    //    Yukt = sqrt(2.) * mtpole / v();
    //    Yukd = sqrt(2.) * (quarks[DOWN].getMass()) / v();
    //    Yuks = sqrt(2.) * (quarks[STRANGE].getMass()) / v();
    //    Yukb = sqrt(2.) * (quarks[BOTTOM].getMass()) / v();


    //  Dimension-6 coefficients used in the STXS parameterization: to be discussed with AJL
    //    aiG = 16.0 * M_PI * M_PI * getSMEFTCoeffEW("CHG") * Mw_tree * Mw_tree / g3_tree / g3_tree / LambdaNP2;
    //    ai3G = getSMEFTCoeffEW("CG") * Mw_tree * Mw_tree / g3_tree / g3_tree / g3_tree / LambdaNP2;
    //    ai2G = 0.0; // Add
    //    aiT = 2.0 * getSMEFTCoeffEW("CHD") * v2;
    //    aiH = -2.0 * getSMEFTCoeffEW("CHbox") * v2;
    //    aiWW = 0.0; // Add
    //    aiB = 0.0; // Add
    //    aiHW = 0.0;
    //    aiHB = 0.0;
    //    aiA =getSMEFTCoeffEW("CHB") * Mw_tree * Mw_tree / g1_tree / g1_tree / LambdaNP2;
    //    aiHQ = getSMEFTCoeffEW("CHq1R",0,0) * v2; // Valid only for flavour universal NP
    //    aipHQ = getSMEFTCoeffEW("CHq3R",0,0) * v2; // Valid only for flavour universal NP
    //    aiHL = getSMEFTCoeffEW("CHl1R",0,0) * v2; // Valid only for flavour universal NP
    //    aipHL = getSMEFTCoeffEW("CHl3R",0,0) * v2; // Valid only for flavour universal NP. From HEL Lagrangian. Not in original note
    //    aiHu = getSMEFTCoeffEW("CHuR",0,0) * v2; // Valid only for flavour universal NP
    //    aiHd = getSMEFTCoeffEW("CHdR",0,0) * v2; // Valid only for flavour universal NP
    //    aiHe = getSMEFTCoeffEW("CHeR",0,0) * v2; // Valid only for flavour universal NP
    //    aiu = -getSMEFTCoeffEW("CuHR",2,2) * v2 / Yukt;
    //    aiuG = getSMEFTCoeffEW("CuGR",2,2) * Mw_tree * Mw_tree / g3_tree / LambdaNP2 / getSMEFTCoeffEW("YuR",2,2) / 4.0; // From HEL.fr Lagrangian. Not in original note. Valid only for flavour universal NP

    //  Dim 6 SMEFT-LEFT matching

    // update LEFT Wilson coefficients (time consuming, do only if FlagmatchLEFT=true
    if (FlagmatchLEFT) getMatching().updateLEFTGeneralParameters();
    
    
    //  3) Store some of the operators at the EW scale in the physical basis
    
    // Diagonal-elements of neutral-current (NC) combinations are always real
    
    // NC up-quark sector
    CHq1EWuu = getSMEFTCoeffEWMB("CHq1", 0, 0, VuLd, VuL).real();
    CHq1EWcc = getSMEFTCoeffEWMB("CHq1", 1, 1, VuLd, VuL).real();
    CHq1EWtt = getSMEFTCoeffEWMB("CHq1", 2, 2, VuLd, VuL).real();
    
    CHq3EWuu = getSMEFTCoeffEWMB("CHq3", 0, 0, VuLd, VuL).real();
    CHq3EWcc = getSMEFTCoeffEWMB("CHq3", 1, 1, VuLd, VuL).real();
    CHq3EWtt = getSMEFTCoeffEWMB("CHq3", 2, 2, VuLd, VuL).real();
    
    CHuEWuu = getSMEFTCoeffEWMB("CHu", 0, 0, VuRd, VuR).real();
    CHuEWcc = getSMEFTCoeffEWMB("CHu", 1, 1, VuRd, VuR).real();
    CHuEWtt = getSMEFTCoeffEWMB("CHu", 2, 2, VuRd, VuR).real();
    
    // NC down-quark sector
    CHq1EWdd = getSMEFTCoeffEWMB("CHq1", 0, 0, VdLd, VdL).real();
    CHq1EWss = getSMEFTCoeffEWMB("CHq1", 1, 1, VdLd, VdL).real();
    CHq1EWbb = getSMEFTCoeffEWMB("CHq1", 2, 2, VdLd, VdL).real();
    
    CHq3EWdd = getSMEFTCoeffEWMB("CHq3", 0, 0, VdLd, VdL).real();
    CHq3EWss = getSMEFTCoeffEWMB("CHq3", 1, 1, VdLd, VdL).real();
    CHq3EWbb = getSMEFTCoeffEWMB("CHq3", 2, 2, VdLd, VdL).real();
    
    CHdEWdd = getSMEFTCoeffEWMB("CHd", 0, 0, VdRd, VdR).real();
    CHdEWss = getSMEFTCoeffEWMB("CHd", 1, 1, VdRd, VdR).real();
    CHdEWbb = getSMEFTCoeffEWMB("CHd", 2, 2, VdRd, VdR).real();
    
    // Charged-Current up-down-quark sector (complex)   
    CHq3EWud = getSMEFTCoeffEWMB("CHq3", 0, 0, VuLd, VdL);
    CHq3EWcs = getSMEFTCoeffEWMB("CHq3", 1, 1, VuLd, VdL);
    CHq3EWtb = getSMEFTCoeffEWMB("CHq3", 2, 2, VuLd, VdL);
    
    
    return (true);
}

// void NPSMEFTd6General::computeYukawas() {
//     for (int i = 0; i < 3; i++)
//         for (int j = 0; j < 3; j++) {
//             Yu.assignre(i,j,getSMEFTCoeffEW("YuR", i, j) + getSMEFTCoeffEW("dYuR", i, j));
//             Yu.assignim(i,j,getSMEFTCoeffEW("YuI", i, j) + getSMEFTCoeffEW("dYuI", i, j));
//             Yd.assignre(i,j,getSMEFTCoeffEW("YdR", i, j) + getSMEFTCoeffEW("dYdR", i, j));
//             Yd.assignim(i,j,getSMEFTCoeffEW("YdI", i, j) + getSMEFTCoeffEW("dYdI", i, j));
//             Ye.assignre(i,j,getSMEFTCoeffEW("YeR", i, j) + getSMEFTCoeffEW("dYeR", i, j));
//             Ye.assignim(i,j,getSMEFTCoeffEW("YeI", i, j) + getSMEFTCoeffEW("dYeI", i, j));
//         }
// }

void NPSMEFTd6General::setParameter(const std::string name, const double& value) {

    if (name.compare("CG_LNP") == 0) {
        CG_LNP = value;
    } else if (name.compare("CW_LNP") == 0) {
        CW_LNP = value;
    } else if (name.compare("CHG_LNP") == 0) {
        CHG_LNP = value;
    } else if (name.compare("CHW_LNP") == 0) {
        CHW_LNP = value;
    } else if (name.compare("CHB_LNP") == 0) {
        CHB_LNP = value;
    } else if (name.compare("CHWB_LNP") == 0) {
        CHWB_LNP = value;
    } else if (name.compare("CHD_LNP") == 0) {
        CHD_LNP = value;
    } else if (name.compare("CHbox_LNP") == 0) {
        CHbox_LNP = value;
    } else if (name.compare("CH_LNP") == 0) {
        CH_LNP = value;
    } else if (name.compare("CGtilde_LNP") == 0) {
        CGtilde_LNP = value;
    } else if (name.compare("CWtilde_LNP") == 0) {
        CWtilde_LNP = value;
    } else if (name.compare("CHGtilde_LNP") == 0) {
        CHGtilde_LNP = value;
    } else if (name.compare("CHWtilde_LNP") == 0) {
        CHWtilde_LNP = value;
    } else if (name.compare("CHBtilde_LNP") == 0) {
        CHBtilde_LNP = value;
    } else if (name.compare("CHWtildeB_LNP") == 0) {
        CHWtildeB_LNP = value;
    } else if (name.compare("CHl1_11r_LNP") == 0) {
        CHl1_11r_LNP = value;
    } else if (name.compare("CHl1_12r_LNP") == 0) {
        CHl1_12r_LNP = value;
    } else if (name.compare("CHl1_13r_LNP") == 0) {
        CHl1_13r_LNP = value;
    } else if (name.compare("CHl1_22r_LNP") == 0) {
        CHl1_22r_LNP = value;
    } else if (name.compare("CHl1_23r_LNP") == 0) {
        CHl1_23r_LNP = value;
    } else if (name.compare("CHl1_33r_LNP") == 0) {
        CHl1_33r_LNP = value;
    } else if (name.compare("CHl1_12i_LNP") == 0) {
        CHl1_12i_LNP = value;
    } else if (name.compare("CHl1_13i_LNP") == 0) {
        CHl1_13i_LNP = value;
    } else if (name.compare("CHl1_23i_LNP") == 0) {
        CHl1_23i_LNP = value;
    } else if (name.compare("CHl3_11r_LNP") == 0) {
        CHl3_11r_LNP = value;
    } else if (name.compare("CHl3_12r_LNP") == 0) {
        CHl3_12r_LNP = value;
    } else if (name.compare("CHl3_13r_LNP") == 0) {
        CHl3_13r_LNP = value;
    } else if (name.compare("CHl3_22r_LNP") == 0) {
        CHl3_22r_LNP = value;
    } else if (name.compare("CHl3_23r_LNP") == 0) {
        CHl3_23r_LNP = value;
    } else if (name.compare("CHl3_33r_LNP") == 0) {
        CHl3_33r_LNP = value;
    } else if (name.compare("CHl3_12i_LNP") == 0) {
        CHl3_12i_LNP = value;
    } else if (name.compare("CHl3_13i_LNP") == 0) {
        CHl3_13i_LNP = value;
    } else if (name.compare("CHl3_23i_LNP") == 0) {
        CHl3_23i_LNP = value;
    } else if (name.compare("CHe_11r_LNP") == 0) {
        CHe_11r_LNP = value;
    } else if (name.compare("CHe_12r_LNP") == 0) {
        CHe_12r_LNP = value;
    } else if (name.compare("CHe_13r_LNP") == 0) {
        CHe_13r_LNP = value;
    } else if (name.compare("CHe_22r_LNP") == 0) {
        CHe_22r_LNP = value;
    } else if (name.compare("CHe_23r_LNP") == 0) {
        CHe_23r_LNP = value;
    } else if (name.compare("CHe_33r_LNP") == 0) {
        CHe_33r_LNP = value;
    } else if (name.compare("CHe_12i_LNP") == 0) {
        CHe_12i_LNP = value;
    } else if (name.compare("CHe_13i_LNP") == 0) {
        CHe_13i_LNP = value;
    } else if (name.compare("CHe_23i_LNP") == 0) {
        CHe_23i_LNP = value;
    } else if (name.compare("CHq1_11r_LNP") == 0) {
        CHq1_11r_LNP = value;
    } else if (name.compare("CHq1_12r_LNP") == 0) {
        CHq1_12r_LNP = value;
    } else if (name.compare("CHq1_13r_LNP") == 0) {
        CHq1_13r_LNP = value;
    } else if (name.compare("CHq1_22r_LNP") == 0) {
        CHq1_22r_LNP = value;
    } else if (name.compare("CHq1_23r_LNP") == 0) {
        CHq1_23r_LNP = value;
    } else if (name.compare("CHq1_33r_LNP") == 0) {
        CHq1_33r_LNP = value;
    } else if (name.compare("CHq1_12i_LNP") == 0) {
        CHq1_12i_LNP = value;
    } else if (name.compare("CHq1_13i_LNP") == 0) {
        CHq1_13i_LNP = value;
    } else if (name.compare("CHq1_23i_LNP") == 0) {
        CHq1_23i_LNP = value;
    } else if (name.compare("CHq3_11r_LNP") == 0) {
        CHq3_11r_LNP = value;
    } else if (name.compare("CHq3_12r_LNP") == 0) {
        CHq3_12r_LNP = value;
    } else if (name.compare("CHq3_13r_LNP") == 0) {
        CHq3_13r_LNP = value;
    } else if (name.compare("CHq3_22r_LNP") == 0) {
        CHq3_22r_LNP = value;
    } else if (name.compare("CHq3_23r_LNP") == 0) {
        CHq3_23r_LNP = value;
    } else if (name.compare("CHq3_33r_LNP") == 0) {
        CHq3_33r_LNP = value;
    } else if (name.compare("CHq3_12i_LNP") == 0) {
        CHq3_12i_LNP = value;
    } else if (name.compare("CHq3_13i_LNP") == 0) {
        CHq3_13i_LNP = value;
    } else if (name.compare("CHq3_23i_LNP") == 0) {
        CHq3_23i_LNP = value;
    } else if (name.compare("CHu_11r_LNP") == 0) {
        CHu_11r_LNP = value;
    } else if (name.compare("CHu_12r_LNP") == 0) {
        CHu_12r_LNP = value;
    } else if (name.compare("CHu_13r_LNP") == 0) {
        CHu_13r_LNP = value;
    } else if (name.compare("CHu_22r_LNP") == 0) {
        CHu_22r_LNP = value;
    } else if (name.compare("CHu_23r_LNP") == 0) {
        CHu_23r_LNP = value;
    } else if (name.compare("CHu_33r_LNP") == 0) {
        CHu_33r_LNP = value;
    } else if (name.compare("CHu_12i_LNP") == 0) {
        CHu_12i_LNP = value;
    } else if (name.compare("CHu_13i_LNP") == 0) {
        CHu_13i_LNP = value;
    } else if (name.compare("CHu_23i_LNP") == 0) {
        CHu_23i_LNP = value;
    } else if (name.compare("CHd_11r_LNP") == 0) {
        CHd_11r_LNP = value;
    } else if (name.compare("CHd_12r_LNP") == 0) {
        CHd_12r_LNP = value;
    } else if (name.compare("CHd_13r_LNP") == 0) {
        CHd_13r_LNP = value;
    } else if (name.compare("CHd_22r_LNP") == 0) {
        CHd_22r_LNP = value;
    } else if (name.compare("CHd_23r_LNP") == 0) {
        CHd_23r_LNP = value;
    } else if (name.compare("CHd_33r_LNP") == 0) {
        CHd_33r_LNP = value;
    } else if (name.compare("CHd_12i_LNP") == 0) {
        CHd_12i_LNP = value;
    } else if (name.compare("CHd_13i_LNP") == 0) {
        CHd_13i_LNP = value;
    } else if (name.compare("CHd_23i_LNP") == 0) {
        CHd_23i_LNP = value;
    } else if (name.compare("CHud_11r_LNP") == 0) {
        CHud_11r_LNP = value;
    } else if (name.compare("CHud_12r_LNP") == 0) {
        CHud_12r_LNP = value;
    } else if (name.compare("CHud_13r_LNP") == 0) {
        CHud_13r_LNP = value;
    } else if (name.compare("CHud_21r_LNP") == 0) {
        CHud_21r_LNP = value;
    } else if (name.compare("CHud_22r_LNP") == 0) {
        CHud_22r_LNP = value;
    } else if (name.compare("CHud_23r_LNP") == 0) {
        CHud_23r_LNP = value;
    } else if (name.compare("CHud_31r_LNP") == 0) {
        CHud_31r_LNP = value;
    } else if (name.compare("CHud_32r_LNP") == 0) {
        CHud_32r_LNP = value;
    } else if (name.compare("CHud_33r_LNP") == 0) {
        CHud_33r_LNP = value;
    } else if (name.compare("CHud_11i_LNP") == 0) {
        CHud_11i_LNP = value;
    } else if (name.compare("CHud_12i_LNP") == 0) {
        CHud_12i_LNP = value;
    } else if (name.compare("CHud_13i_LNP") == 0) {
        CHud_13i_LNP = value;
    } else if (name.compare("CHud_21i_LNP") == 0) {
        CHud_21i_LNP = value;
    } else if (name.compare("CHud_22i_LNP") == 0) {
        CHud_22i_LNP = value;
    } else if (name.compare("CHud_23i_LNP") == 0) {
        CHud_23i_LNP = value;
    } else if (name.compare("CHud_31i_LNP") == 0) {
        CHud_31i_LNP = value;
    } else if (name.compare("CHud_32i_LNP") == 0) {
        CHud_32i_LNP = value;
    } else if (name.compare("CHud_33i_LNP") == 0) {
        CHud_33i_LNP = value;
    } else if (name.compare("CeH_11r_LNP") == 0) {
        CeH_11r_LNP = value;
    } else if (name.compare("CeH_12r_LNP") == 0) {
        CeH_12r_LNP = value;
    } else if (name.compare("CeH_13r_LNP") == 0) {
        CeH_13r_LNP = value;
    } else if (name.compare("CeH_21r_LNP") == 0) {
        CeH_21r_LNP = value;
    } else if (name.compare("CeH_22r_LNP") == 0) {
        CeH_22r_LNP = value;
    } else if (name.compare("CeH_23r_LNP") == 0) {
        CeH_23r_LNP = value;
    } else if (name.compare("CeH_31r_LNP") == 0) {
        CeH_31r_LNP = value;
    } else if (name.compare("CeH_32r_LNP") == 0) {
        CeH_32r_LNP = value;
    } else if (name.compare("CeH_33r_LNP") == 0) {
        CeH_33r_LNP = value;
    } else if (name.compare("CeH_11i_LNP") == 0) {
        CeH_11i_LNP = value;
    } else if (name.compare("CeH_12i_LNP") == 0) {
        CeH_12i_LNP = value;
    } else if (name.compare("CeH_13i_LNP") == 0) {
        CeH_13i_LNP = value;
    } else if (name.compare("CeH_21i_LNP") == 0) {
        CeH_21i_LNP = value;
    } else if (name.compare("CeH_22i_LNP") == 0) {
        CeH_22i_LNP = value;
    } else if (name.compare("CeH_23i_LNP") == 0) {
        CeH_23i_LNP = value;
    } else if (name.compare("CeH_31i_LNP") == 0) {
        CeH_31i_LNP = value;
    } else if (name.compare("CeH_32i_LNP") == 0) {
        CeH_32i_LNP = value;
    } else if (name.compare("CeH_33i_LNP") == 0) {
        CeH_33i_LNP = value;
    } else if (name.compare("CuH_11r_LNP") == 0) {
        CuH_11r_LNP = value;
    } else if (name.compare("CuH_12r_LNP") == 0) {
        CuH_12r_LNP = value;
    } else if (name.compare("CuH_13r_LNP") == 0) {
        CuH_13r_LNP = value;
    } else if (name.compare("CuH_21r_LNP") == 0) {
        CuH_21r_LNP = value;
    } else if (name.compare("CuH_22r_LNP") == 0) {
        CuH_22r_LNP = value;
    } else if (name.compare("CuH_23r_LNP") == 0) {
        CuH_23r_LNP = value;
    } else if (name.compare("CuH_31r_LNP") == 0) {
        CuH_31r_LNP = value;
    } else if (name.compare("CuH_32r_LNP") == 0) {
        CuH_32r_LNP = value;
    } else if (name.compare("CuH_33r_LNP") == 0) {
        CuH_33r_LNP = value;
    } else if (name.compare("CuH_11i_LNP") == 0) {
        CuH_11i_LNP = value;
    } else if (name.compare("CuH_12i_LNP") == 0) {
        CuH_12i_LNP = value;
    } else if (name.compare("CuH_13i_LNP") == 0) {
        CuH_13i_LNP = value;
    } else if (name.compare("CuH_21i_LNP") == 0) {
        CuH_21i_LNP = value;
    } else if (name.compare("CuH_22i_LNP") == 0) {
        CuH_22i_LNP = value;
    } else if (name.compare("CuH_23i_LNP") == 0) {
        CuH_23i_LNP = value;
    } else if (name.compare("CuH_31i_LNP") == 0) {
        CuH_31i_LNP = value;
    } else if (name.compare("CuH_32i_LNP") == 0) {
        CuH_32i_LNP = value;
    } else if (name.compare("CuH_33i_LNP") == 0) {
        CuH_33i_LNP = value;
    } else if (name.compare("CdH_11r_LNP") == 0) {
        CdH_11r_LNP = value;
    } else if (name.compare("CdH_12r_LNP") == 0) {
        CdH_12r_LNP = value;
    } else if (name.compare("CdH_13r_LNP") == 0) {
        CdH_13r_LNP = value;
    } else if (name.compare("CdH_21r_LNP") == 0) {
        CdH_21r_LNP = value;
    } else if (name.compare("CdH_22r_LNP") == 0) {
        CdH_22r_LNP = value;
    } else if (name.compare("CdH_23r_LNP") == 0) {
        CdH_23r_LNP = value;
    } else if (name.compare("CdH_31r_LNP") == 0) {
        CdH_31r_LNP = value;
    } else if (name.compare("CdH_32r_LNP") == 0) {
        CdH_32r_LNP = value;
    } else if (name.compare("CdH_33r_LNP") == 0) {
        CdH_33r_LNP = value;
    } else if (name.compare("CdH_11i_LNP") == 0) {
        CdH_11i_LNP = value;
    } else if (name.compare("CdH_12i_LNP") == 0) {
        CdH_12i_LNP = value;
    } else if (name.compare("CdH_13i_LNP") == 0) {
        CdH_13i_LNP = value;
    } else if (name.compare("CdH_21i_LNP") == 0) {
        CdH_21i_LNP = value;
    } else if (name.compare("CdH_22i_LNP") == 0) {
        CdH_22i_LNP = value;
    } else if (name.compare("CdH_23i_LNP") == 0) {
        CdH_23i_LNP = value;
    } else if (name.compare("CdH_31i_LNP") == 0) {
        CdH_31i_LNP = value;
    } else if (name.compare("CdH_32i_LNP") == 0) {
        CdH_32i_LNP = value;
    } else if (name.compare("CdH_33i_LNP") == 0) {
        CdH_33i_LNP = value;
    } else if (name.compare("CuG_11r_LNP") == 0) {
        CuG_11r_LNP = value;
    } else if (name.compare("CuG_12r_LNP") == 0) {
        CuG_12r_LNP = value;
    } else if (name.compare("CuG_13r_LNP") == 0) {
        CuG_13r_LNP = value;
    } else if (name.compare("CuG_21r_LNP") == 0) {
        CuG_21r_LNP = value;
    } else if (name.compare("CuG_22r_LNP") == 0) {
        CuG_22r_LNP = value;
    } else if (name.compare("CuG_23r_LNP") == 0) {
        CuG_23r_LNP = value;
    } else if (name.compare("CuG_31r_LNP") == 0) {
        CuG_31r_LNP = value;
    } else if (name.compare("CuG_32r_LNP") == 0) {
        CuG_32r_LNP = value;
    } else if (name.compare("CuG_33r_LNP") == 0) {
        CuG_33r_LNP = value;
    } else if (name.compare("CuG_11i_LNP") == 0) {
        CuG_11i_LNP = value;
    } else if (name.compare("CuG_12i_LNP") == 0) {
        CuG_12i_LNP = value;
    } else if (name.compare("CuG_13i_LNP") == 0) {
        CuG_13i_LNP = value;
    } else if (name.compare("CuG_21i_LNP") == 0) {
        CuG_21i_LNP = value;
    } else if (name.compare("CuG_22i_LNP") == 0) {
        CuG_22i_LNP = value;
    } else if (name.compare("CuG_23i_LNP") == 0) {
        CuG_23i_LNP = value;
    } else if (name.compare("CuG_31i_LNP") == 0) {
        CuG_31i_LNP = value;
    } else if (name.compare("CuG_32i_LNP") == 0) {
        CuG_32i_LNP = value;
    } else if (name.compare("CuG_33i_LNP") == 0) {
        CuG_33i_LNP = value;
    } else if (name.compare("CuW_11r_LNP") == 0) {
        CuW_11r_LNP = value;
    } else if (name.compare("CuW_12r_LNP") == 0) {
        CuW_12r_LNP = value;
    } else if (name.compare("CuW_13r_LNP") == 0) {
        CuW_13r_LNP = value;
    } else if (name.compare("CuW_21r_LNP") == 0) {
        CuW_21r_LNP = value;
    } else if (name.compare("CuW_22r_LNP") == 0) {
        CuW_22r_LNP = value;
    } else if (name.compare("CuW_23r_LNP") == 0) {
        CuW_23r_LNP = value;
    } else if (name.compare("CuW_31r_LNP") == 0) {
        CuW_31r_LNP = value;
    } else if (name.compare("CuW_32r_LNP") == 0) {
        CuW_32r_LNP = value;
    } else if (name.compare("CuW_33r_LNP") == 0) {
        CuW_33r_LNP = value;
    } else if (name.compare("CuW_11i_LNP") == 0) {
        CuW_11i_LNP = value;
    } else if (name.compare("CuW_12i_LNP") == 0) {
        CuW_12i_LNP = value;
    } else if (name.compare("CuW_13i_LNP") == 0) {
        CuW_13i_LNP = value;
    } else if (name.compare("CuW_21i_LNP") == 0) {
        CuW_21i_LNP = value;
    } else if (name.compare("CuW_22i_LNP") == 0) {
        CuW_22i_LNP = value;
    } else if (name.compare("CuW_23i_LNP") == 0) {
        CuW_23i_LNP = value;
    } else if (name.compare("CuW_31i_LNP") == 0) {
        CuW_31i_LNP = value;
    } else if (name.compare("CuW_32i_LNP") == 0) {
        CuW_32i_LNP = value;
    } else if (name.compare("CuW_33i_LNP") == 0) {
        CuW_33i_LNP = value;
    } else if (name.compare("CuB_11r_LNP") == 0) {
        CuB_11r_LNP = value;
    } else if (name.compare("CuB_12r_LNP") == 0) {
        CuB_12r_LNP = value;
    } else if (name.compare("CuB_13r_LNP") == 0) {
        CuB_13r_LNP = value;
    } else if (name.compare("CuB_21r_LNP") == 0) {
        CuB_21r_LNP = value;
    } else if (name.compare("CuB_22r_LNP") == 0) {
        CuB_22r_LNP = value;
    } else if (name.compare("CuB_23r_LNP") == 0) {
        CuB_23r_LNP = value;
    } else if (name.compare("CuB_31r_LNP") == 0) {
        CuB_31r_LNP = value;
    } else if (name.compare("CuB_32r_LNP") == 0) {
        CuB_32r_LNP = value;
    } else if (name.compare("CuB_33r_LNP") == 0) {
        CuB_33r_LNP = value;
    } else if (name.compare("CuB_11i_LNP") == 0) {
        CuB_11i_LNP = value;
    } else if (name.compare("CuB_12i_LNP") == 0) {
        CuB_12i_LNP = value;
    } else if (name.compare("CuB_13i_LNP") == 0) {
        CuB_13i_LNP = value;
    } else if (name.compare("CuB_21i_LNP") == 0) {
        CuB_21i_LNP = value;
    } else if (name.compare("CuB_22i_LNP") == 0) {
        CuB_22i_LNP = value;
    } else if (name.compare("CuB_23i_LNP") == 0) {
        CuB_23i_LNP = value;
    } else if (name.compare("CuB_31i_LNP") == 0) {
        CuB_31i_LNP = value;
    } else if (name.compare("CuB_32i_LNP") == 0) {
        CuB_32i_LNP = value;
    } else if (name.compare("CuB_33i_LNP") == 0) {
        CuB_33i_LNP = value;
    } else if (name.compare("CdG_11r_LNP") == 0) {
        CdG_11r_LNP = value;
    } else if (name.compare("CdG_12r_LNP") == 0) {
        CdG_12r_LNP = value;
    } else if (name.compare("CdG_13r_LNP") == 0) {
        CdG_13r_LNP = value;
    } else if (name.compare("CdG_21r_LNP") == 0) {
        CdG_21r_LNP = value;
    } else if (name.compare("CdG_22r_LNP") == 0) {
        CdG_22r_LNP = value;
    } else if (name.compare("CdG_23r_LNP") == 0) {
        CdG_23r_LNP = value;
    } else if (name.compare("CdG_31r_LNP") == 0) {
        CdG_31r_LNP = value;
    } else if (name.compare("CdG_32r_LNP") == 0) {
        CdG_32r_LNP = value;
    } else if (name.compare("CdG_33r_LNP") == 0) {
        CdG_33r_LNP = value;
    } else if (name.compare("CdG_11i_LNP") == 0) {
        CdG_11i_LNP = value;
    } else if (name.compare("CdG_12i_LNP") == 0) {
        CdG_12i_LNP = value;
    } else if (name.compare("CdG_13i_LNP") == 0) {
        CdG_13i_LNP = value;
    } else if (name.compare("CdG_21i_LNP") == 0) {
        CdG_21i_LNP = value;
    } else if (name.compare("CdG_22i_LNP") == 0) {
        CdG_22i_LNP = value;
    } else if (name.compare("CdG_23i_LNP") == 0) {
        CdG_23i_LNP = value;
    } else if (name.compare("CdG_31i_LNP") == 0) {
        CdG_31i_LNP = value;
    } else if (name.compare("CdG_32i_LNP") == 0) {
        CdG_32i_LNP = value;
    } else if (name.compare("CdG_33i_LNP") == 0) {
        CdG_33i_LNP = value;
    } else if (name.compare("CdW_11r_LNP") == 0) {
        CdW_11r_LNP = value;
    } else if (name.compare("CdW_12r_LNP") == 0) {
        CdW_12r_LNP = value;
    } else if (name.compare("CdW_13r_LNP") == 0) {
        CdW_13r_LNP = value;
    } else if (name.compare("CdW_21r_LNP") == 0) {
        CdW_21r_LNP = value;
    } else if (name.compare("CdW_22r_LNP") == 0) {
        CdW_22r_LNP = value;
    } else if (name.compare("CdW_23r_LNP") == 0) {
        CdW_23r_LNP = value;
    } else if (name.compare("CdW_31r_LNP") == 0) {
        CdW_31r_LNP = value;
    } else if (name.compare("CdW_32r_LNP") == 0) {
        CdW_32r_LNP = value;
    } else if (name.compare("CdW_33r_LNP") == 0) {
        CdW_33r_LNP = value;
    } else if (name.compare("CdW_11i_LNP") == 0) {
        CdW_11i_LNP = value;
    } else if (name.compare("CdW_12i_LNP") == 0) {
        CdW_12i_LNP = value;
    } else if (name.compare("CdW_13i_LNP") == 0) {
        CdW_13i_LNP = value;
    } else if (name.compare("CdW_21i_LNP") == 0) {
        CdW_21i_LNP = value;
    } else if (name.compare("CdW_22i_LNP") == 0) {
        CdW_22i_LNP = value;
    } else if (name.compare("CdW_23i_LNP") == 0) {
        CdW_23i_LNP = value;
    } else if (name.compare("CdW_31i_LNP") == 0) {
        CdW_31i_LNP = value;
    } else if (name.compare("CdW_32i_LNP") == 0) {
        CdW_32i_LNP = value;
    } else if (name.compare("CdW_33i_LNP") == 0) {
        CdW_33i_LNP = value;
    } else if (name.compare("CdB_11r_LNP") == 0) {
        CdB_11r_LNP = value;
    } else if (name.compare("CdB_12r_LNP") == 0) {
        CdB_12r_LNP = value;
    } else if (name.compare("CdB_13r_LNP") == 0) {
        CdB_13r_LNP = value;
    } else if (name.compare("CdB_21r_LNP") == 0) {
        CdB_21r_LNP = value;
    } else if (name.compare("CdB_22r_LNP") == 0) {
        CdB_22r_LNP = value;
    } else if (name.compare("CdB_23r_LNP") == 0) {
        CdB_23r_LNP = value;
    } else if (name.compare("CdB_31r_LNP") == 0) {
        CdB_31r_LNP = value;
    } else if (name.compare("CdB_32r_LNP") == 0) {
        CdB_32r_LNP = value;
    } else if (name.compare("CdB_33r_LNP") == 0) {
        CdB_33r_LNP = value;
    } else if (name.compare("CdB_11i_LNP") == 0) {
        CdB_11i_LNP = value;
    } else if (name.compare("CdB_12i_LNP") == 0) {
        CdB_12i_LNP = value;
    } else if (name.compare("CdB_13i_LNP") == 0) {
        CdB_13i_LNP = value;
    } else if (name.compare("CdB_21i_LNP") == 0) {
        CdB_21i_LNP = value;
    } else if (name.compare("CdB_22i_LNP") == 0) {
        CdB_22i_LNP = value;
    } else if (name.compare("CdB_23i_LNP") == 0) {
        CdB_23i_LNP = value;
    } else if (name.compare("CdB_31i_LNP") == 0) {
        CdB_31i_LNP = value;
    } else if (name.compare("CdB_32i_LNP") == 0) {
        CdB_32i_LNP = value;
    } else if (name.compare("CdB_33i_LNP") == 0) {
        CdB_33i_LNP = value;
    } else if (name.compare("CeW_11r_LNP") == 0) {
        CeW_11r_LNP = value;
    } else if (name.compare("CeW_12r_LNP") == 0) {
        CeW_12r_LNP = value;
    } else if (name.compare("CeW_13r_LNP") == 0) {
        CeW_13r_LNP = value;
    } else if (name.compare("CeW_21r_LNP") == 0) {
        CeW_21r_LNP = value;
    } else if (name.compare("CeW_22r_LNP") == 0) {
        CeW_22r_LNP = value;
    } else if (name.compare("CeW_23r_LNP") == 0) {
        CeW_23r_LNP = value;
    } else if (name.compare("CeW_31r_LNP") == 0) {
        CeW_31r_LNP = value;
    } else if (name.compare("CeW_32r_LNP") == 0) {
        CeW_32r_LNP = value;
    } else if (name.compare("CeW_33r_LNP") == 0) {
        CeW_33r_LNP = value;
    } else if (name.compare("CeW_11i_LNP") == 0) {
        CeW_11i_LNP = value;
    } else if (name.compare("CeW_12i_LNP") == 0) {
        CeW_12i_LNP = value;
    } else if (name.compare("CeW_13i_LNP") == 0) {
        CeW_13i_LNP = value;
    } else if (name.compare("CeW_21i_LNP") == 0) {
        CeW_21i_LNP = value;
    } else if (name.compare("CeW_22i_LNP") == 0) {
        CeW_22i_LNP = value;
    } else if (name.compare("CeW_23i_LNP") == 0) {
        CeW_23i_LNP = value;
    } else if (name.compare("CeW_31i_LNP") == 0) {
        CeW_31i_LNP = value;
    } else if (name.compare("CeW_32i_LNP") == 0) {
        CeW_32i_LNP = value;
    } else if (name.compare("CeW_33i_LNP") == 0) {
        CeW_33i_LNP = value;
    } else if (name.compare("CeB_11r_LNP") == 0) {
        CeB_11r_LNP = value;
    } else if (name.compare("CeB_12r_LNP") == 0) {
        CeB_12r_LNP = value;
    } else if (name.compare("CeB_13r_LNP") == 0) {
        CeB_13r_LNP = value;
    } else if (name.compare("CeB_21r_LNP") == 0) {
        CeB_21r_LNP = value;
    } else if (name.compare("CeB_22r_LNP") == 0) {
        CeB_22r_LNP = value;
    } else if (name.compare("CeB_23r_LNP") == 0) {
        CeB_23r_LNP = value;
    } else if (name.compare("CeB_31r_LNP") == 0) {
        CeB_31r_LNP = value;
    } else if (name.compare("CeB_32r_LNP") == 0) {
        CeB_32r_LNP = value;
    } else if (name.compare("CeB_33r_LNP") == 0) {
        CeB_33r_LNP = value;
    } else if (name.compare("CeB_11i_LNP") == 0) {
        CeB_11i_LNP = value;
    } else if (name.compare("CeB_12i_LNP") == 0) {
        CeB_12i_LNP = value;
    } else if (name.compare("CeB_13i_LNP") == 0) {
        CeB_13i_LNP = value;
    } else if (name.compare("CeB_21i_LNP") == 0) {
        CeB_21i_LNP = value;
    } else if (name.compare("CeB_22i_LNP") == 0) {
        CeB_22i_LNP = value;
    } else if (name.compare("CeB_23i_LNP") == 0) {
        CeB_23i_LNP = value;
    } else if (name.compare("CeB_31i_LNP") == 0) {
        CeB_31i_LNP = value;
    } else if (name.compare("CeB_32i_LNP") == 0) {
        CeB_32i_LNP = value;
    } else if (name.compare("CeB_33i_LNP") == 0) {
        CeB_33i_LNP = value;
    } else if (name.compare("Cll_1111r_LNP") == 0) {
        Cll_1111r_LNP = value;
    } else if (name.compare("Cll_1112r_LNP") == 0) {
        Cll_1112r_LNP = value;
    } else if (name.compare("Cll_1113r_LNP") == 0) {
        Cll_1113r_LNP = value;
    } else if (name.compare("Cll_1122r_LNP") == 0) {
        Cll_1122r_LNP = value;
    } else if (name.compare("Cll_1123r_LNP") == 0) {
        Cll_1123r_LNP = value;
    } else if (name.compare("Cll_1133r_LNP") == 0) {
        Cll_1133r_LNP = value;
    } else if (name.compare("Cll_1212r_LNP") == 0) {
        Cll_1212r_LNP = value;
    } else if (name.compare("Cll_1213r_LNP") == 0) {
        Cll_1213r_LNP = value;
    } else if (name.compare("Cll_1221r_LNP") == 0) {
        Cll_1221r_LNP = value;
    } else if (name.compare("Cll_1222r_LNP") == 0) {
        Cll_1222r_LNP = value;
    } else if (name.compare("Cll_1223r_LNP") == 0) {
        Cll_1223r_LNP = value;
    } else if (name.compare("Cll_1231r_LNP") == 0) {
        Cll_1231r_LNP = value;
    } else if (name.compare("Cll_1232r_LNP") == 0) {
        Cll_1232r_LNP = value;
    } else if (name.compare("Cll_1233r_LNP") == 0) {
        Cll_1233r_LNP = value;
    } else if (name.compare("Cll_1313r_LNP") == 0) {
        Cll_1313r_LNP = value;
    } else if (name.compare("Cll_1322r_LNP") == 0) {
        Cll_1322r_LNP = value;
    } else if (name.compare("Cll_1323r_LNP") == 0) {
        Cll_1323r_LNP = value;
    } else if (name.compare("Cll_1331r_LNP") == 0) {
        Cll_1331r_LNP = value;
    } else if (name.compare("Cll_1332r_LNP") == 0) {
        Cll_1332r_LNP = value;
    } else if (name.compare("Cll_1333r_LNP") == 0) {
        Cll_1333r_LNP = value;
    } else if (name.compare("Cll_2222r_LNP") == 0) {
        Cll_2222r_LNP = value;
    } else if (name.compare("Cll_2223r_LNP") == 0) {
        Cll_2223r_LNP = value;
    } else if (name.compare("Cll_2233r_LNP") == 0) {
        Cll_2233r_LNP = value;
    } else if (name.compare("Cll_2323r_LNP") == 0) {
        Cll_2323r_LNP = value;
    } else if (name.compare("Cll_2332r_LNP") == 0) {
        Cll_2332r_LNP = value;
    } else if (name.compare("Cll_2333r_LNP") == 0) {
        Cll_2333r_LNP = value;
    } else if (name.compare("Cll_3333r_LNP") == 0) {
        Cll_3333r_LNP = value;
    } else if (name.compare("Cll_1112i_LNP") == 0) {
        Cll_1112i_LNP = value;
    } else if (name.compare("Cll_1113i_LNP") == 0) {
        Cll_1113i_LNP = value;
    } else if (name.compare("Cll_1123i_LNP") == 0) {
        Cll_1123i_LNP = value;
    } else if (name.compare("Cll_1212i_LNP") == 0) {
        Cll_1212i_LNP = value;
    } else if (name.compare("Cll_1213i_LNP") == 0) {
        Cll_1213i_LNP = value;
    } else if (name.compare("Cll_1222i_LNP") == 0) {
        Cll_1222i_LNP = value;
    } else if (name.compare("Cll_1223i_LNP") == 0) {
        Cll_1223i_LNP = value;
    } else if (name.compare("Cll_1231i_LNP") == 0) {
        Cll_1231i_LNP = value;
    } else if (name.compare("Cll_1232i_LNP") == 0) {
        Cll_1232i_LNP = value;
    } else if (name.compare("Cll_1233i_LNP") == 0) {
        Cll_1233i_LNP = value;
    } else if (name.compare("Cll_1313i_LNP") == 0) {
        Cll_1313i_LNP = value;
    } else if (name.compare("Cll_1322i_LNP") == 0) {
        Cll_1322i_LNP = value;
    } else if (name.compare("Cll_1323i_LNP") == 0) {
        Cll_1323i_LNP = value;
    } else if (name.compare("Cll_1332i_LNP") == 0) {
        Cll_1332i_LNP = value;
    } else if (name.compare("Cll_1333i_LNP") == 0) {
        Cll_1333i_LNP = value;
    } else if (name.compare("Cll_2223i_LNP") == 0) {
        Cll_2223i_LNP = value;
    } else if (name.compare("Cll_2323i_LNP") == 0) {
        Cll_2323i_LNP = value;
    } else if (name.compare("Cll_2333i_LNP") == 0) {
        Cll_2333i_LNP = value;
    } else if (name.compare("Clq1_1111r_LNP") == 0) {
        Clq1_1111r_LNP = value;
    } else if (name.compare("Clq1_1112r_LNP") == 0) {
        Clq1_1112r_LNP = value;
    } else if (name.compare("Clq1_1113r_LNP") == 0) {
        Clq1_1113r_LNP = value;
    } else if (name.compare("Clq1_1122r_LNP") == 0) {
        Clq1_1122r_LNP = value;
    } else if (name.compare("Clq1_1123r_LNP") == 0) {
        Clq1_1123r_LNP = value;
    } else if (name.compare("Clq1_1133r_LNP") == 0) {
        Clq1_1133r_LNP = value;
    } else if (name.compare("Clq1_1211r_LNP") == 0) {
        Clq1_1211r_LNP = value;
    } else if (name.compare("Clq1_1212r_LNP") == 0) {
        Clq1_1212r_LNP = value;
    } else if (name.compare("Clq1_1213r_LNP") == 0) {
        Clq1_1213r_LNP = value;
    } else if (name.compare("Clq1_1221r_LNP") == 0) {
        Clq1_1221r_LNP = value;
    } else if (name.compare("Clq1_1222r_LNP") == 0) {
        Clq1_1222r_LNP = value;
    } else if (name.compare("Clq1_1223r_LNP") == 0) {
        Clq1_1223r_LNP = value;
    } else if (name.compare("Clq1_1231r_LNP") == 0) {
        Clq1_1231r_LNP = value;
    } else if (name.compare("Clq1_1232r_LNP") == 0) {
        Clq1_1232r_LNP = value;
    } else if (name.compare("Clq1_1233r_LNP") == 0) {
        Clq1_1233r_LNP = value;
    } else if (name.compare("Clq1_1311r_LNP") == 0) {
        Clq1_1311r_LNP = value;
    } else if (name.compare("Clq1_1312r_LNP") == 0) {
        Clq1_1312r_LNP = value;
    } else if (name.compare("Clq1_1313r_LNP") == 0) {
        Clq1_1313r_LNP = value;
    } else if (name.compare("Clq1_1321r_LNP") == 0) {
        Clq1_1321r_LNP = value;
    } else if (name.compare("Clq1_1322r_LNP") == 0) {
        Clq1_1322r_LNP = value;
    } else if (name.compare("Clq1_1323r_LNP") == 0) {
        Clq1_1323r_LNP = value;
    } else if (name.compare("Clq1_1331r_LNP") == 0) {
        Clq1_1331r_LNP = value;
    } else if (name.compare("Clq1_1332r_LNP") == 0) {
        Clq1_1332r_LNP = value;
    } else if (name.compare("Clq1_1333r_LNP") == 0) {
        Clq1_1333r_LNP = value;
    } else if (name.compare("Clq1_2211r_LNP") == 0) {
        Clq1_2211r_LNP = value;
    } else if (name.compare("Clq1_2212r_LNP") == 0) {
        Clq1_2212r_LNP = value;
    } else if (name.compare("Clq1_2213r_LNP") == 0) {
        Clq1_2213r_LNP = value;
    } else if (name.compare("Clq1_2222r_LNP") == 0) {
        Clq1_2222r_LNP = value;
    } else if (name.compare("Clq1_2223r_LNP") == 0) {
        Clq1_2223r_LNP = value;
    } else if (name.compare("Clq1_2233r_LNP") == 0) {
        Clq1_2233r_LNP = value;
    } else if (name.compare("Clq1_2311r_LNP") == 0) {
        Clq1_2311r_LNP = value;
    } else if (name.compare("Clq1_2312r_LNP") == 0) {
        Clq1_2312r_LNP = value;
    } else if (name.compare("Clq1_2313r_LNP") == 0) {
        Clq1_2313r_LNP = value;
    } else if (name.compare("Clq1_2321r_LNP") == 0) {
        Clq1_2321r_LNP = value;
    } else if (name.compare("Clq1_2322r_LNP") == 0) {
        Clq1_2322r_LNP = value;
    } else if (name.compare("Clq1_2323r_LNP") == 0) {
        Clq1_2323r_LNP = value;
    } else if (name.compare("Clq1_2331r_LNP") == 0) {
        Clq1_2331r_LNP = value;
    } else if (name.compare("Clq1_2332r_LNP") == 0) {
        Clq1_2332r_LNP = value;
    } else if (name.compare("Clq1_2333r_LNP") == 0) {
        Clq1_2333r_LNP = value;
    } else if (name.compare("Clq1_3311r_LNP") == 0) {
        Clq1_3311r_LNP = value;
    } else if (name.compare("Clq1_3312r_LNP") == 0) {
        Clq1_3312r_LNP = value;
    } else if (name.compare("Clq1_3313r_LNP") == 0) {
        Clq1_3313r_LNP = value;
    } else if (name.compare("Clq1_3322r_LNP") == 0) {
        Clq1_3322r_LNP = value;
    } else if (name.compare("Clq1_3323r_LNP") == 0) {
        Clq1_3323r_LNP = value;
    } else if (name.compare("Clq1_3333r_LNP") == 0) {
        Clq1_3333r_LNP = value;
    } else if (name.compare("Clq1_1112i_LNP") == 0) {
        Clq1_1112i_LNP = value;
    } else if (name.compare("Clq1_1113i_LNP") == 0) {
        Clq1_1113i_LNP = value;
    } else if (name.compare("Clq1_1123i_LNP") == 0) {
        Clq1_1123i_LNP = value;
    } else if (name.compare("Clq1_1211i_LNP") == 0) {
        Clq1_1211i_LNP = value;
    } else if (name.compare("Clq1_1212i_LNP") == 0) {
        Clq1_1212i_LNP = value;
    } else if (name.compare("Clq1_1213i_LNP") == 0) {
        Clq1_1213i_LNP = value;
    } else if (name.compare("Clq1_1221i_LNP") == 0) {
        Clq1_1221i_LNP = value;
    } else if (name.compare("Clq1_1222i_LNP") == 0) {
        Clq1_1222i_LNP = value;
    } else if (name.compare("Clq1_1223i_LNP") == 0) {
        Clq1_1223i_LNP = value;
    } else if (name.compare("Clq1_1231i_LNP") == 0) {
        Clq1_1231i_LNP = value;
    } else if (name.compare("Clq1_1232i_LNP") == 0) {
        Clq1_1232i_LNP = value;
    } else if (name.compare("Clq1_1233i_LNP") == 0) {
        Clq1_1233i_LNP = value;
    } else if (name.compare("Clq1_1311i_LNP") == 0) {
        Clq1_1311i_LNP = value;
    } else if (name.compare("Clq1_1312i_LNP") == 0) {
        Clq1_1312i_LNP = value;
    } else if (name.compare("Clq1_1313i_LNP") == 0) {
        Clq1_1313i_LNP = value;
    } else if (name.compare("Clq1_1321i_LNP") == 0) {
        Clq1_1321i_LNP = value;
    } else if (name.compare("Clq1_1322i_LNP") == 0) {
        Clq1_1322i_LNP = value;
    } else if (name.compare("Clq1_1323i_LNP") == 0) {
        Clq1_1323i_LNP = value;
    } else if (name.compare("Clq1_1331i_LNP") == 0) {
        Clq1_1331i_LNP = value;
    } else if (name.compare("Clq1_1332i_LNP") == 0) {
        Clq1_1332i_LNP = value;
    } else if (name.compare("Clq1_1333i_LNP") == 0) {
        Clq1_1333i_LNP = value;
    } else if (name.compare("Clq1_2212i_LNP") == 0) {
        Clq1_2212i_LNP = value;
    } else if (name.compare("Clq1_2213i_LNP") == 0) {
        Clq1_2213i_LNP = value;
    } else if (name.compare("Clq1_2223i_LNP") == 0) {
        Clq1_2223i_LNP = value;
    } else if (name.compare("Clq1_2311i_LNP") == 0) {
        Clq1_2311i_LNP = value;
    } else if (name.compare("Clq1_2312i_LNP") == 0) {
        Clq1_2312i_LNP = value;
    } else if (name.compare("Clq1_2313i_LNP") == 0) {
        Clq1_2313i_LNP = value;
    } else if (name.compare("Clq1_2321i_LNP") == 0) {
        Clq1_2321i_LNP = value;
    } else if (name.compare("Clq1_2322i_LNP") == 0) {
        Clq1_2322i_LNP = value;
    } else if (name.compare("Clq1_2323i_LNP") == 0) {
        Clq1_2323i_LNP = value;
    } else if (name.compare("Clq1_2331i_LNP") == 0) {
        Clq1_2331i_LNP = value;
    } else if (name.compare("Clq1_2332i_LNP") == 0) {
        Clq1_2332i_LNP = value;
    } else if (name.compare("Clq1_2333i_LNP") == 0) {
        Clq1_2333i_LNP = value;
    } else if (name.compare("Clq1_3312i_LNP") == 0) {
        Clq1_3312i_LNP = value;
    } else if (name.compare("Clq1_3313i_LNP") == 0) {
        Clq1_3313i_LNP = value;
    } else if (name.compare("Clq1_3323i_LNP") == 0) {
        Clq1_3323i_LNP = value;
    } else if (name.compare("Clq3_1111r_LNP") == 0) {
        Clq3_1111r_LNP = value;
    } else if (name.compare("Clq3_1112r_LNP") == 0) {
        Clq3_1112r_LNP = value;
    } else if (name.compare("Clq3_1113r_LNP") == 0) {
        Clq3_1113r_LNP = value;
    } else if (name.compare("Clq3_1122r_LNP") == 0) {
        Clq3_1122r_LNP = value;
    } else if (name.compare("Clq3_1123r_LNP") == 0) {
        Clq3_1123r_LNP = value;
    } else if (name.compare("Clq3_1133r_LNP") == 0) {
        Clq3_1133r_LNP = value;
    } else if (name.compare("Clq3_1211r_LNP") == 0) {
        Clq3_1211r_LNP = value;
    } else if (name.compare("Clq3_1212r_LNP") == 0) {
        Clq3_1212r_LNP = value;
    } else if (name.compare("Clq3_1213r_LNP") == 0) {
        Clq3_1213r_LNP = value;
    } else if (name.compare("Clq3_1221r_LNP") == 0) {
        Clq3_1221r_LNP = value;
    } else if (name.compare("Clq3_1222r_LNP") == 0) {
        Clq3_1222r_LNP = value;
    } else if (name.compare("Clq3_1223r_LNP") == 0) {
        Clq3_1223r_LNP = value;
    } else if (name.compare("Clq3_1231r_LNP") == 0) {
        Clq3_1231r_LNP = value;
    } else if (name.compare("Clq3_1232r_LNP") == 0) {
        Clq3_1232r_LNP = value;
    } else if (name.compare("Clq3_1233r_LNP") == 0) {
        Clq3_1233r_LNP = value;
    } else if (name.compare("Clq3_1311r_LNP") == 0) {
        Clq3_1311r_LNP = value;
    } else if (name.compare("Clq3_1312r_LNP") == 0) {
        Clq3_1312r_LNP = value;
    } else if (name.compare("Clq3_1313r_LNP") == 0) {
        Clq3_1313r_LNP = value;
    } else if (name.compare("Clq3_1321r_LNP") == 0) {
        Clq3_1321r_LNP = value;
    } else if (name.compare("Clq3_1322r_LNP") == 0) {
        Clq3_1322r_LNP = value;
    } else if (name.compare("Clq3_1323r_LNP") == 0) {
        Clq3_1323r_LNP = value;
    } else if (name.compare("Clq3_1331r_LNP") == 0) {
        Clq3_1331r_LNP = value;
    } else if (name.compare("Clq3_1332r_LNP") == 0) {
        Clq3_1332r_LNP = value;
    } else if (name.compare("Clq3_1333r_LNP") == 0) {
        Clq3_1333r_LNP = value;
    } else if (name.compare("Clq3_2211r_LNP") == 0) {
        Clq3_2211r_LNP = value;
    } else if (name.compare("Clq3_2212r_LNP") == 0) {
        Clq3_2212r_LNP = value;
    } else if (name.compare("Clq3_2213r_LNP") == 0) {
        Clq3_2213r_LNP = value;
    } else if (name.compare("Clq3_2222r_LNP") == 0) {
        Clq3_2222r_LNP = value;
    } else if (name.compare("Clq3_2223r_LNP") == 0) {
        Clq3_2223r_LNP = value;
    } else if (name.compare("Clq3_2233r_LNP") == 0) {
        Clq3_2233r_LNP = value;
    } else if (name.compare("Clq3_2311r_LNP") == 0) {
        Clq3_2311r_LNP = value;
    } else if (name.compare("Clq3_2312r_LNP") == 0) {
        Clq3_2312r_LNP = value;
    } else if (name.compare("Clq3_2313r_LNP") == 0) {
        Clq3_2313r_LNP = value;
    } else if (name.compare("Clq3_2321r_LNP") == 0) {
        Clq3_2321r_LNP = value;
    } else if (name.compare("Clq3_2322r_LNP") == 0) {
        Clq3_2322r_LNP = value;
    } else if (name.compare("Clq3_2323r_LNP") == 0) {
        Clq3_2323r_LNP = value;
    } else if (name.compare("Clq3_2331r_LNP") == 0) {
        Clq3_2331r_LNP = value;
    } else if (name.compare("Clq3_2332r_LNP") == 0) {
        Clq3_2332r_LNP = value;
    } else if (name.compare("Clq3_2333r_LNP") == 0) {
        Clq3_2333r_LNP = value;
    } else if (name.compare("Clq3_3311r_LNP") == 0) {
        Clq3_3311r_LNP = value;
    } else if (name.compare("Clq3_3312r_LNP") == 0) {
        Clq3_3312r_LNP = value;
    } else if (name.compare("Clq3_3313r_LNP") == 0) {
        Clq3_3313r_LNP = value;
    } else if (name.compare("Clq3_3322r_LNP") == 0) {
        Clq3_3322r_LNP = value;
    } else if (name.compare("Clq3_3323r_LNP") == 0) {
        Clq3_3323r_LNP = value;
    } else if (name.compare("Clq3_3333r_LNP") == 0) {
        Clq3_3333r_LNP = value;
    } else if (name.compare("Clq3_1112i_LNP") == 0) {
        Clq3_1112i_LNP = value;
    } else if (name.compare("Clq3_1113i_LNP") == 0) {
        Clq3_1113i_LNP = value;
    } else if (name.compare("Clq3_1123i_LNP") == 0) {
        Clq3_1123i_LNP = value;
    } else if (name.compare("Clq3_1211i_LNP") == 0) {
        Clq3_1211i_LNP = value;
    } else if (name.compare("Clq3_1212i_LNP") == 0) {
        Clq3_1212i_LNP = value;
    } else if (name.compare("Clq3_1213i_LNP") == 0) {
        Clq3_1213i_LNP = value;
    } else if (name.compare("Clq3_1221i_LNP") == 0) {
        Clq3_1221i_LNP = value;
    } else if (name.compare("Clq3_1222i_LNP") == 0) {
        Clq3_1222i_LNP = value;
    } else if (name.compare("Clq3_1223i_LNP") == 0) {
        Clq3_1223i_LNP = value;
    } else if (name.compare("Clq3_1231i_LNP") == 0) {
        Clq3_1231i_LNP = value;
    } else if (name.compare("Clq3_1232i_LNP") == 0) {
        Clq3_1232i_LNP = value;
    } else if (name.compare("Clq3_1233i_LNP") == 0) {
        Clq3_1233i_LNP = value;
    } else if (name.compare("Clq3_1311i_LNP") == 0) {
        Clq3_1311i_LNP = value;
    } else if (name.compare("Clq3_1312i_LNP") == 0) {
        Clq3_1312i_LNP = value;
    } else if (name.compare("Clq3_1313i_LNP") == 0) {
        Clq3_1313i_LNP = value;
    } else if (name.compare("Clq3_1321i_LNP") == 0) {
        Clq3_1321i_LNP = value;
    } else if (name.compare("Clq3_1322i_LNP") == 0) {
        Clq3_1322i_LNP = value;
    } else if (name.compare("Clq3_1323i_LNP") == 0) {
        Clq3_1323i_LNP = value;
    } else if (name.compare("Clq3_1331i_LNP") == 0) {
        Clq3_1331i_LNP = value;
    } else if (name.compare("Clq3_1332i_LNP") == 0) {
        Clq3_1332i_LNP = value;
    } else if (name.compare("Clq3_1333i_LNP") == 0) {
        Clq3_1333i_LNP = value;
    } else if (name.compare("Clq3_2212i_LNP") == 0) {
        Clq3_2212i_LNP = value;
    } else if (name.compare("Clq3_2213i_LNP") == 0) {
        Clq3_2213i_LNP = value;
    } else if (name.compare("Clq3_2223i_LNP") == 0) {
        Clq3_2223i_LNP = value;
    } else if (name.compare("Clq3_2311i_LNP") == 0) {
        Clq3_2311i_LNP = value;
    } else if (name.compare("Clq3_2312i_LNP") == 0) {
        Clq3_2312i_LNP = value;
    } else if (name.compare("Clq3_2313i_LNP") == 0) {
        Clq3_2313i_LNP = value;
    } else if (name.compare("Clq3_2321i_LNP") == 0) {
        Clq3_2321i_LNP = value;
    } else if (name.compare("Clq3_2322i_LNP") == 0) {
        Clq3_2322i_LNP = value;
    } else if (name.compare("Clq3_2323i_LNP") == 0) {
        Clq3_2323i_LNP = value;
    } else if (name.compare("Clq3_2331i_LNP") == 0) {
        Clq3_2331i_LNP = value;
    } else if (name.compare("Clq3_2332i_LNP") == 0) {
        Clq3_2332i_LNP = value;
    } else if (name.compare("Clq3_2333i_LNP") == 0) {
        Clq3_2333i_LNP = value;
    } else if (name.compare("Clq3_3312i_LNP") == 0) {
        Clq3_3312i_LNP = value;
    } else if (name.compare("Clq3_3313i_LNP") == 0) {
        Clq3_3313i_LNP = value;
    } else if (name.compare("Clq3_3323i_LNP") == 0) {
        Clq3_3323i_LNP = value;
    } else if (name.compare("Cee_1111r_LNP") == 0) {
        Cee_1111r_LNP = value;
    } else if (name.compare("Cee_1112r_LNP") == 0) {
        Cee_1112r_LNP = value;
    } else if (name.compare("Cee_1113r_LNP") == 0) {
        Cee_1113r_LNP = value;
    } else if (name.compare("Cee_1122r_LNP") == 0) {
        Cee_1122r_LNP = value;
    } else if (name.compare("Cee_1123r_LNP") == 0) {
        Cee_1123r_LNP = value;
    } else if (name.compare("Cee_1133r_LNP") == 0) {
        Cee_1133r_LNP = value;
    } else if (name.compare("Cee_1212r_LNP") == 0) {
        Cee_1212r_LNP = value;
    } else if (name.compare("Cee_1213r_LNP") == 0) {
        Cee_1213r_LNP = value;
    } else if (name.compare("Cee_1222r_LNP") == 0) {
        Cee_1222r_LNP = value;
    } else if (name.compare("Cee_1223r_LNP") == 0) {
        Cee_1223r_LNP = value;
    } else if (name.compare("Cee_1232r_LNP") == 0) {
        Cee_1232r_LNP = value;
    } else if (name.compare("Cee_1233r_LNP") == 0) {
        Cee_1233r_LNP = value;
    } else if (name.compare("Cee_1313r_LNP") == 0) {
        Cee_1313r_LNP = value;
    } else if (name.compare("Cee_1323r_LNP") == 0) {
        Cee_1323r_LNP = value;
    } else if (name.compare("Cee_1333r_LNP") == 0) {
        Cee_1333r_LNP = value;
    } else if (name.compare("Cee_2222r_LNP") == 0) {
        Cee_2222r_LNP = value;
    } else if (name.compare("Cee_2223r_LNP") == 0) {
        Cee_2223r_LNP = value;
    } else if (name.compare("Cee_2233r_LNP") == 0) {
        Cee_2233r_LNP = value;
    } else if (name.compare("Cee_2323r_LNP") == 0) {
        Cee_2323r_LNP = value;
    } else if (name.compare("Cee_2333r_LNP") == 0) {
        Cee_2333r_LNP = value;
    } else if (name.compare("Cee_3333r_LNP") == 0) {
        Cee_3333r_LNP = value;
    } else if (name.compare("Cee_1112i_LNP") == 0) {
        Cee_1112i_LNP = value;
    } else if (name.compare("Cee_1113i_LNP") == 0) {
        Cee_1113i_LNP = value;
    } else if (name.compare("Cee_1123i_LNP") == 0) {
        Cee_1123i_LNP = value;
    } else if (name.compare("Cee_1212i_LNP") == 0) {
        Cee_1212i_LNP = value;
    } else if (name.compare("Cee_1213i_LNP") == 0) {
        Cee_1213i_LNP = value;
    } else if (name.compare("Cee_1222i_LNP") == 0) {
        Cee_1222i_LNP = value;
    } else if (name.compare("Cee_1223i_LNP") == 0) {
        Cee_1223i_LNP = value;
    } else if (name.compare("Cee_1232i_LNP") == 0) {
        Cee_1232i_LNP = value;
    } else if (name.compare("Cee_1233i_LNP") == 0) {
        Cee_1233i_LNP = value;
    } else if (name.compare("Cee_1313i_LNP") == 0) {
        Cee_1313i_LNP = value;
    } else if (name.compare("Cee_1323i_LNP") == 0) {
        Cee_1323i_LNP = value;
    } else if (name.compare("Cee_1333i_LNP") == 0) {
        Cee_1333i_LNP = value;
    } else if (name.compare("Cee_2223i_LNP") == 0) {
        Cee_2223i_LNP = value;
    } else if (name.compare("Cee_2323i_LNP") == 0) {
        Cee_2323i_LNP = value;
    } else if (name.compare("Cee_2333i_LNP") == 0) {
        Cee_2333i_LNP = value;
    } else if (name.compare("Ceu_1111r_LNP") == 0) {
        Ceu_1111r_LNP = value;
    } else if (name.compare("Ceu_1112r_LNP") == 0) {
        Ceu_1112r_LNP = value;
    } else if (name.compare("Ceu_1113r_LNP") == 0) {
        Ceu_1113r_LNP = value;
    } else if (name.compare("Ceu_1122r_LNP") == 0) {
        Ceu_1122r_LNP = value;
    } else if (name.compare("Ceu_1123r_LNP") == 0) {
        Ceu_1123r_LNP = value;
    } else if (name.compare("Ceu_1133r_LNP") == 0) {
        Ceu_1133r_LNP = value;
    } else if (name.compare("Ceu_1211r_LNP") == 0) {
        Ceu_1211r_LNP = value;
    } else if (name.compare("Ceu_1212r_LNP") == 0) {
        Ceu_1212r_LNP = value;
    } else if (name.compare("Ceu_1213r_LNP") == 0) {
        Ceu_1213r_LNP = value;
    } else if (name.compare("Ceu_1221r_LNP") == 0) {
        Ceu_1221r_LNP = value;
    } else if (name.compare("Ceu_1222r_LNP") == 0) {
        Ceu_1222r_LNP = value;
    } else if (name.compare("Ceu_1223r_LNP") == 0) {
        Ceu_1223r_LNP = value;
    } else if (name.compare("Ceu_1231r_LNP") == 0) {
        Ceu_1231r_LNP = value;
    } else if (name.compare("Ceu_1232r_LNP") == 0) {
        Ceu_1232r_LNP = value;
    } else if (name.compare("Ceu_1233r_LNP") == 0) {
        Ceu_1233r_LNP = value;
    } else if (name.compare("Ceu_1311r_LNP") == 0) {
        Ceu_1311r_LNP = value;
    } else if (name.compare("Ceu_1312r_LNP") == 0) {
        Ceu_1312r_LNP = value;
    } else if (name.compare("Ceu_1313r_LNP") == 0) {
        Ceu_1313r_LNP = value;
    } else if (name.compare("Ceu_1321r_LNP") == 0) {
        Ceu_1321r_LNP = value;
    } else if (name.compare("Ceu_1322r_LNP") == 0) {
        Ceu_1322r_LNP = value;
    } else if (name.compare("Ceu_1323r_LNP") == 0) {
        Ceu_1323r_LNP = value;
    } else if (name.compare("Ceu_1331r_LNP") == 0) {
        Ceu_1331r_LNP = value;
    } else if (name.compare("Ceu_1332r_LNP") == 0) {
        Ceu_1332r_LNP = value;
    } else if (name.compare("Ceu_1333r_LNP") == 0) {
        Ceu_1333r_LNP = value;
    } else if (name.compare("Ceu_2211r_LNP") == 0) {
        Ceu_2211r_LNP = value;
    } else if (name.compare("Ceu_2212r_LNP") == 0) {
        Ceu_2212r_LNP = value;
    } else if (name.compare("Ceu_2213r_LNP") == 0) {
        Ceu_2213r_LNP = value;
    } else if (name.compare("Ceu_2222r_LNP") == 0) {
        Ceu_2222r_LNP = value;
    } else if (name.compare("Ceu_2223r_LNP") == 0) {
        Ceu_2223r_LNP = value;
    } else if (name.compare("Ceu_2233r_LNP") == 0) {
        Ceu_2233r_LNP = value;
    } else if (name.compare("Ceu_2311r_LNP") == 0) {
        Ceu_2311r_LNP = value;
    } else if (name.compare("Ceu_2312r_LNP") == 0) {
        Ceu_2312r_LNP = value;
    } else if (name.compare("Ceu_2313r_LNP") == 0) {
        Ceu_2313r_LNP = value;
    } else if (name.compare("Ceu_2321r_LNP") == 0) {
        Ceu_2321r_LNP = value;
    } else if (name.compare("Ceu_2322r_LNP") == 0) {
        Ceu_2322r_LNP = value;
    } else if (name.compare("Ceu_2323r_LNP") == 0) {
        Ceu_2323r_LNP = value;
    } else if (name.compare("Ceu_2331r_LNP") == 0) {
        Ceu_2331r_LNP = value;
    } else if (name.compare("Ceu_2332r_LNP") == 0) {
        Ceu_2332r_LNP = value;
    } else if (name.compare("Ceu_2333r_LNP") == 0) {
        Ceu_2333r_LNP = value;
    } else if (name.compare("Ceu_3311r_LNP") == 0) {
        Ceu_3311r_LNP = value;
    } else if (name.compare("Ceu_3312r_LNP") == 0) {
        Ceu_3312r_LNP = value;
    } else if (name.compare("Ceu_3313r_LNP") == 0) {
        Ceu_3313r_LNP = value;
    } else if (name.compare("Ceu_3322r_LNP") == 0) {
        Ceu_3322r_LNP = value;
    } else if (name.compare("Ceu_3323r_LNP") == 0) {
        Ceu_3323r_LNP = value;
    } else if (name.compare("Ceu_3333r_LNP") == 0) {
        Ceu_3333r_LNP = value;
    } else if (name.compare("Ceu_1112i_LNP") == 0) {
        Ceu_1112i_LNP = value;
    } else if (name.compare("Ceu_1113i_LNP") == 0) {
        Ceu_1113i_LNP = value;
    } else if (name.compare("Ceu_1123i_LNP") == 0) {
        Ceu_1123i_LNP = value;
    } else if (name.compare("Ceu_1211i_LNP") == 0) {
        Ceu_1211i_LNP = value;
    } else if (name.compare("Ceu_1212i_LNP") == 0) {
        Ceu_1212i_LNP = value;
    } else if (name.compare("Ceu_1213i_LNP") == 0) {
        Ceu_1213i_LNP = value;
    } else if (name.compare("Ceu_1221i_LNP") == 0) {
        Ceu_1221i_LNP = value;
    } else if (name.compare("Ceu_1222i_LNP") == 0) {
        Ceu_1222i_LNP = value;
    } else if (name.compare("Ceu_1223i_LNP") == 0) {
        Ceu_1223i_LNP = value;
    } else if (name.compare("Ceu_1231i_LNP") == 0) {
        Ceu_1231i_LNP = value;
    } else if (name.compare("Ceu_1232i_LNP") == 0) {
        Ceu_1232i_LNP = value;
    } else if (name.compare("Ceu_1233i_LNP") == 0) {
        Ceu_1233i_LNP = value;
    } else if (name.compare("Ceu_1311i_LNP") == 0) {
        Ceu_1311i_LNP = value;
    } else if (name.compare("Ceu_1312i_LNP") == 0) {
        Ceu_1312i_LNP = value;
    } else if (name.compare("Ceu_1313i_LNP") == 0) {
        Ceu_1313i_LNP = value;
    } else if (name.compare("Ceu_1321i_LNP") == 0) {
        Ceu_1321i_LNP = value;
    } else if (name.compare("Ceu_1322i_LNP") == 0) {
        Ceu_1322i_LNP = value;
    } else if (name.compare("Ceu_1323i_LNP") == 0) {
        Ceu_1323i_LNP = value;
    } else if (name.compare("Ceu_1331i_LNP") == 0) {
        Ceu_1331i_LNP = value;
    } else if (name.compare("Ceu_1332i_LNP") == 0) {
        Ceu_1332i_LNP = value;
    } else if (name.compare("Ceu_1333i_LNP") == 0) {
        Ceu_1333i_LNP = value;
    } else if (name.compare("Ceu_2212i_LNP") == 0) {
        Ceu_2212i_LNP = value;
    } else if (name.compare("Ceu_2213i_LNP") == 0) {
        Ceu_2213i_LNP = value;
    } else if (name.compare("Ceu_2223i_LNP") == 0) {
        Ceu_2223i_LNP = value;
    } else if (name.compare("Ceu_2311i_LNP") == 0) {
        Ceu_2311i_LNP = value;
    } else if (name.compare("Ceu_2312i_LNP") == 0) {
        Ceu_2312i_LNP = value;
    } else if (name.compare("Ceu_2313i_LNP") == 0) {
        Ceu_2313i_LNP = value;
    } else if (name.compare("Ceu_2321i_LNP") == 0) {
        Ceu_2321i_LNP = value;
    } else if (name.compare("Ceu_2322i_LNP") == 0) {
        Ceu_2322i_LNP = value;
    } else if (name.compare("Ceu_2323i_LNP") == 0) {
        Ceu_2323i_LNP = value;
    } else if (name.compare("Ceu_2331i_LNP") == 0) {
        Ceu_2331i_LNP = value;
    } else if (name.compare("Ceu_2332i_LNP") == 0) {
        Ceu_2332i_LNP = value;
    } else if (name.compare("Ceu_2333i_LNP") == 0) {
        Ceu_2333i_LNP = value;
    } else if (name.compare("Ceu_3312i_LNP") == 0) {
        Ceu_3312i_LNP = value;
    } else if (name.compare("Ceu_3313i_LNP") == 0) {
        Ceu_3313i_LNP = value;
    } else if (name.compare("Ceu_3323i_LNP") == 0) {
        Ceu_3323i_LNP = value;
    } else if (name.compare("Ced_1111r_LNP") == 0) {
        Ced_1111r_LNP = value;
    } else if (name.compare("Ced_1112r_LNP") == 0) {
        Ced_1112r_LNP = value;
    } else if (name.compare("Ced_1113r_LNP") == 0) {
        Ced_1113r_LNP = value;
    } else if (name.compare("Ced_1122r_LNP") == 0) {
        Ced_1122r_LNP = value;
    } else if (name.compare("Ced_1123r_LNP") == 0) {
        Ced_1123r_LNP = value;
    } else if (name.compare("Ced_1133r_LNP") == 0) {
        Ced_1133r_LNP = value;
    } else if (name.compare("Ced_1211r_LNP") == 0) {
        Ced_1211r_LNP = value;
    } else if (name.compare("Ced_1212r_LNP") == 0) {
        Ced_1212r_LNP = value;
    } else if (name.compare("Ced_1213r_LNP") == 0) {
        Ced_1213r_LNP = value;
    } else if (name.compare("Ced_1221r_LNP") == 0) {
        Ced_1221r_LNP = value;
    } else if (name.compare("Ced_1222r_LNP") == 0) {
        Ced_1222r_LNP = value;
    } else if (name.compare("Ced_1223r_LNP") == 0) {
        Ced_1223r_LNP = value;
    } else if (name.compare("Ced_1231r_LNP") == 0) {
        Ced_1231r_LNP = value;
    } else if (name.compare("Ced_1232r_LNP") == 0) {
        Ced_1232r_LNP = value;
    } else if (name.compare("Ced_1233r_LNP") == 0) {
        Ced_1233r_LNP = value;
    } else if (name.compare("Ced_1311r_LNP") == 0) {
        Ced_1311r_LNP = value;
    } else if (name.compare("Ced_1312r_LNP") == 0) {
        Ced_1312r_LNP = value;
    } else if (name.compare("Ced_1313r_LNP") == 0) {
        Ced_1313r_LNP = value;
    } else if (name.compare("Ced_1321r_LNP") == 0) {
        Ced_1321r_LNP = value;
    } else if (name.compare("Ced_1322r_LNP") == 0) {
        Ced_1322r_LNP = value;
    } else if (name.compare("Ced_1323r_LNP") == 0) {
        Ced_1323r_LNP = value;
    } else if (name.compare("Ced_1331r_LNP") == 0) {
        Ced_1331r_LNP = value;
    } else if (name.compare("Ced_1332r_LNP") == 0) {
        Ced_1332r_LNP = value;
    } else if (name.compare("Ced_1333r_LNP") == 0) {
        Ced_1333r_LNP = value;
    } else if (name.compare("Ced_2211r_LNP") == 0) {
        Ced_2211r_LNP = value;
    } else if (name.compare("Ced_2212r_LNP") == 0) {
        Ced_2212r_LNP = value;
    } else if (name.compare("Ced_2213r_LNP") == 0) {
        Ced_2213r_LNP = value;
    } else if (name.compare("Ced_2222r_LNP") == 0) {
        Ced_2222r_LNP = value;
    } else if (name.compare("Ced_2223r_LNP") == 0) {
        Ced_2223r_LNP = value;
    } else if (name.compare("Ced_2233r_LNP") == 0) {
        Ced_2233r_LNP = value;
    } else if (name.compare("Ced_2311r_LNP") == 0) {
        Ced_2311r_LNP = value;
    } else if (name.compare("Ced_2312r_LNP") == 0) {
        Ced_2312r_LNP = value;
    } else if (name.compare("Ced_2313r_LNP") == 0) {
        Ced_2313r_LNP = value;
    } else if (name.compare("Ced_2321r_LNP") == 0) {
        Ced_2321r_LNP = value;
    } else if (name.compare("Ced_2322r_LNP") == 0) {
        Ced_2322r_LNP = value;
    } else if (name.compare("Ced_2323r_LNP") == 0) {
        Ced_2323r_LNP = value;
    } else if (name.compare("Ced_2331r_LNP") == 0) {
        Ced_2331r_LNP = value;
    } else if (name.compare("Ced_2332r_LNP") == 0) {
        Ced_2332r_LNP = value;
    } else if (name.compare("Ced_2333r_LNP") == 0) {
        Ced_2333r_LNP = value;
    } else if (name.compare("Ced_3311r_LNP") == 0) {
        Ced_3311r_LNP = value;
    } else if (name.compare("Ced_3312r_LNP") == 0) {
        Ced_3312r_LNP = value;
    } else if (name.compare("Ced_3313r_LNP") == 0) {
        Ced_3313r_LNP = value;
    } else if (name.compare("Ced_3322r_LNP") == 0) {
        Ced_3322r_LNP = value;
    } else if (name.compare("Ced_3323r_LNP") == 0) {
        Ced_3323r_LNP = value;
    } else if (name.compare("Ced_3333r_LNP") == 0) {
        Ced_3333r_LNP = value;
    } else if (name.compare("Ced_1112i_LNP") == 0) {
        Ced_1112i_LNP = value;
    } else if (name.compare("Ced_1113i_LNP") == 0) {
        Ced_1113i_LNP = value;
    } else if (name.compare("Ced_1123i_LNP") == 0) {
        Ced_1123i_LNP = value;
    } else if (name.compare("Ced_1211i_LNP") == 0) {
        Ced_1211i_LNP = value;
    } else if (name.compare("Ced_1212i_LNP") == 0) {
        Ced_1212i_LNP = value;
    } else if (name.compare("Ced_1213i_LNP") == 0) {
        Ced_1213i_LNP = value;
    } else if (name.compare("Ced_1221i_LNP") == 0) {
        Ced_1221i_LNP = value;
    } else if (name.compare("Ced_1222i_LNP") == 0) {
        Ced_1222i_LNP = value;
    } else if (name.compare("Ced_1223i_LNP") == 0) {
        Ced_1223i_LNP = value;
    } else if (name.compare("Ced_1231i_LNP") == 0) {
        Ced_1231i_LNP = value;
    } else if (name.compare("Ced_1232i_LNP") == 0) {
        Ced_1232i_LNP = value;
    } else if (name.compare("Ced_1233i_LNP") == 0) {
        Ced_1233i_LNP = value;
    } else if (name.compare("Ced_1311i_LNP") == 0) {
        Ced_1311i_LNP = value;
    } else if (name.compare("Ced_1312i_LNP") == 0) {
        Ced_1312i_LNP = value;
    } else if (name.compare("Ced_1313i_LNP") == 0) {
        Ced_1313i_LNP = value;
    } else if (name.compare("Ced_1321i_LNP") == 0) {
        Ced_1321i_LNP = value;
    } else if (name.compare("Ced_1322i_LNP") == 0) {
        Ced_1322i_LNP = value;
    } else if (name.compare("Ced_1323i_LNP") == 0) {
        Ced_1323i_LNP = value;
    } else if (name.compare("Ced_1331i_LNP") == 0) {
        Ced_1331i_LNP = value;
    } else if (name.compare("Ced_1332i_LNP") == 0) {
        Ced_1332i_LNP = value;
    } else if (name.compare("Ced_1333i_LNP") == 0) {
        Ced_1333i_LNP = value;
    } else if (name.compare("Ced_2212i_LNP") == 0) {
        Ced_2212i_LNP = value;
    } else if (name.compare("Ced_2213i_LNP") == 0) {
        Ced_2213i_LNP = value;
    } else if (name.compare("Ced_2223i_LNP") == 0) {
        Ced_2223i_LNP = value;
    } else if (name.compare("Ced_2311i_LNP") == 0) {
        Ced_2311i_LNP = value;
    } else if (name.compare("Ced_2312i_LNP") == 0) {
        Ced_2312i_LNP = value;
    } else if (name.compare("Ced_2313i_LNP") == 0) {
        Ced_2313i_LNP = value;
    } else if (name.compare("Ced_2321i_LNP") == 0) {
        Ced_2321i_LNP = value;
    } else if (name.compare("Ced_2322i_LNP") == 0) {
        Ced_2322i_LNP = value;
    } else if (name.compare("Ced_2323i_LNP") == 0) {
        Ced_2323i_LNP = value;
    } else if (name.compare("Ced_2331i_LNP") == 0) {
        Ced_2331i_LNP = value;
    } else if (name.compare("Ced_2332i_LNP") == 0) {
        Ced_2332i_LNP = value;
    } else if (name.compare("Ced_2333i_LNP") == 0) {
        Ced_2333i_LNP = value;
    } else if (name.compare("Ced_3312i_LNP") == 0) {
        Ced_3312i_LNP = value;
    } else if (name.compare("Ced_3313i_LNP") == 0) {
        Ced_3313i_LNP = value;
    } else if (name.compare("Ced_3323i_LNP") == 0) {
        Ced_3323i_LNP = value;
    } else if (name.compare("Cle_1111r_LNP") == 0) {
        Cle_1111r_LNP = value;
    } else if (name.compare("Cle_1112r_LNP") == 0) {
        Cle_1112r_LNP = value;
    } else if (name.compare("Cle_1113r_LNP") == 0) {
        Cle_1113r_LNP = value;
    } else if (name.compare("Cle_1122r_LNP") == 0) {
        Cle_1122r_LNP = value;
    } else if (name.compare("Cle_1123r_LNP") == 0) {
        Cle_1123r_LNP = value;
    } else if (name.compare("Cle_1133r_LNP") == 0) {
        Cle_1133r_LNP = value;
    } else if (name.compare("Cle_1211r_LNP") == 0) {
        Cle_1211r_LNP = value;
    } else if (name.compare("Cle_1212r_LNP") == 0) {
        Cle_1212r_LNP = value;
    } else if (name.compare("Cle_1213r_LNP") == 0) {
        Cle_1213r_LNP = value;
    } else if (name.compare("Cle_1221r_LNP") == 0) {
        Cle_1221r_LNP = value;
    } else if (name.compare("Cle_1222r_LNP") == 0) {
        Cle_1222r_LNP = value;
    } else if (name.compare("Cle_1223r_LNP") == 0) {
        Cle_1223r_LNP = value;
    } else if (name.compare("Cle_1231r_LNP") == 0) {
        Cle_1231r_LNP = value;
    } else if (name.compare("Cle_1232r_LNP") == 0) {
        Cle_1232r_LNP = value;
    } else if (name.compare("Cle_1233r_LNP") == 0) {
        Cle_1233r_LNP = value;
    } else if (name.compare("Cle_1311r_LNP") == 0) {
        Cle_1311r_LNP = value;
    } else if (name.compare("Cle_1312r_LNP") == 0) {
        Cle_1312r_LNP = value;
    } else if (name.compare("Cle_1313r_LNP") == 0) {
        Cle_1313r_LNP = value;
    } else if (name.compare("Cle_1321r_LNP") == 0) {
        Cle_1321r_LNP = value;
    } else if (name.compare("Cle_1322r_LNP") == 0) {
        Cle_1322r_LNP = value;
    } else if (name.compare("Cle_1323r_LNP") == 0) {
        Cle_1323r_LNP = value;
    } else if (name.compare("Cle_1331r_LNP") == 0) {
        Cle_1331r_LNP = value;
    } else if (name.compare("Cle_1332r_LNP") == 0) {
        Cle_1332r_LNP = value;
    } else if (name.compare("Cle_1333r_LNP") == 0) {
        Cle_1333r_LNP = value;
    } else if (name.compare("Cle_2211r_LNP") == 0) {
        Cle_2211r_LNP = value;
    } else if (name.compare("Cle_2212r_LNP") == 0) {
        Cle_2212r_LNP = value;
    } else if (name.compare("Cle_2213r_LNP") == 0) {
        Cle_2213r_LNP = value;
    } else if (name.compare("Cle_2222r_LNP") == 0) {
        Cle_2222r_LNP = value;
    } else if (name.compare("Cle_2223r_LNP") == 0) {
        Cle_2223r_LNP = value;
    } else if (name.compare("Cle_2233r_LNP") == 0) {
        Cle_2233r_LNP = value;
    } else if (name.compare("Cle_2311r_LNP") == 0) {
        Cle_2311r_LNP = value;
    } else if (name.compare("Cle_2312r_LNP") == 0) {
        Cle_2312r_LNP = value;
    } else if (name.compare("Cle_2313r_LNP") == 0) {
        Cle_2313r_LNP = value;
    } else if (name.compare("Cle_2321r_LNP") == 0) {
        Cle_2321r_LNP = value;
    } else if (name.compare("Cle_2322r_LNP") == 0) {
        Cle_2322r_LNP = value;
    } else if (name.compare("Cle_2323r_LNP") == 0) {
        Cle_2323r_LNP = value;
    } else if (name.compare("Cle_2331r_LNP") == 0) {
        Cle_2331r_LNP = value;
    } else if (name.compare("Cle_2332r_LNP") == 0) {
        Cle_2332r_LNP = value;
    } else if (name.compare("Cle_2333r_LNP") == 0) {
        Cle_2333r_LNP = value;
    } else if (name.compare("Cle_3311r_LNP") == 0) {
        Cle_3311r_LNP = value;
    } else if (name.compare("Cle_3312r_LNP") == 0) {
        Cle_3312r_LNP = value;
    } else if (name.compare("Cle_3313r_LNP") == 0) {
        Cle_3313r_LNP = value;
    } else if (name.compare("Cle_3322r_LNP") == 0) {
        Cle_3322r_LNP = value;
    } else if (name.compare("Cle_3323r_LNP") == 0) {
        Cle_3323r_LNP = value;
    } else if (name.compare("Cle_3333r_LNP") == 0) {
        Cle_3333r_LNP = value;
    } else if (name.compare("Cle_1112i_LNP") == 0) {
        Cle_1112i_LNP = value;
    } else if (name.compare("Cle_1113i_LNP") == 0) {
        Cle_1113i_LNP = value;
    } else if (name.compare("Cle_1123i_LNP") == 0) {
        Cle_1123i_LNP = value;
    } else if (name.compare("Cle_1211i_LNP") == 0) {
        Cle_1211i_LNP = value;
    } else if (name.compare("Cle_1212i_LNP") == 0) {
        Cle_1212i_LNP = value;
    } else if (name.compare("Cle_1213i_LNP") == 0) {
        Cle_1213i_LNP = value;
    } else if (name.compare("Cle_1221i_LNP") == 0) {
        Cle_1221i_LNP = value;
    } else if (name.compare("Cle_1222i_LNP") == 0) {
        Cle_1222i_LNP = value;
    } else if (name.compare("Cle_1223i_LNP") == 0) {
        Cle_1223i_LNP = value;
    } else if (name.compare("Cle_1231i_LNP") == 0) {
        Cle_1231i_LNP = value;
    } else if (name.compare("Cle_1232i_LNP") == 0) {
        Cle_1232i_LNP = value;
    } else if (name.compare("Cle_1233i_LNP") == 0) {
        Cle_1233i_LNP = value;
    } else if (name.compare("Cle_1311i_LNP") == 0) {
        Cle_1311i_LNP = value;
    } else if (name.compare("Cle_1312i_LNP") == 0) {
        Cle_1312i_LNP = value;
    } else if (name.compare("Cle_1313i_LNP") == 0) {
        Cle_1313i_LNP = value;
    } else if (name.compare("Cle_1321i_LNP") == 0) {
        Cle_1321i_LNP = value;
    } else if (name.compare("Cle_1322i_LNP") == 0) {
        Cle_1322i_LNP = value;
    } else if (name.compare("Cle_1323i_LNP") == 0) {
        Cle_1323i_LNP = value;
    } else if (name.compare("Cle_1331i_LNP") == 0) {
        Cle_1331i_LNP = value;
    } else if (name.compare("Cle_1332i_LNP") == 0) {
        Cle_1332i_LNP = value;
    } else if (name.compare("Cle_1333i_LNP") == 0) {
        Cle_1333i_LNP = value;
    } else if (name.compare("Cle_2212i_LNP") == 0) {
        Cle_2212i_LNP = value;
    } else if (name.compare("Cle_2213i_LNP") == 0) {
        Cle_2213i_LNP = value;
    } else if (name.compare("Cle_2223i_LNP") == 0) {
        Cle_2223i_LNP = value;
    } else if (name.compare("Cle_2311i_LNP") == 0) {
        Cle_2311i_LNP = value;
    } else if (name.compare("Cle_2312i_LNP") == 0) {
        Cle_2312i_LNP = value;
    } else if (name.compare("Cle_2313i_LNP") == 0) {
        Cle_2313i_LNP = value;
    } else if (name.compare("Cle_2321i_LNP") == 0) {
        Cle_2321i_LNP = value;
    } else if (name.compare("Cle_2322i_LNP") == 0) {
        Cle_2322i_LNP = value;
    } else if (name.compare("Cle_2323i_LNP") == 0) {
        Cle_2323i_LNP = value;
    } else if (name.compare("Cle_2331i_LNP") == 0) {
        Cle_2331i_LNP = value;
    } else if (name.compare("Cle_2332i_LNP") == 0) {
        Cle_2332i_LNP = value;
    } else if (name.compare("Cle_2333i_LNP") == 0) {
        Cle_2333i_LNP = value;
    } else if (name.compare("Cle_3312i_LNP") == 0) {
        Cle_3312i_LNP = value;
    } else if (name.compare("Cle_3313i_LNP") == 0) {
        Cle_3313i_LNP = value;
    } else if (name.compare("Cle_3323i_LNP") == 0) {
        Cle_3323i_LNP = value;
    } else if (name.compare("Clu_1111r_LNP") == 0) {
        Clu_1111r_LNP = value;
    } else if (name.compare("Clu_1112r_LNP") == 0) {
        Clu_1112r_LNP = value;
    } else if (name.compare("Clu_1113r_LNP") == 0) {
        Clu_1113r_LNP = value;
    } else if (name.compare("Clu_1122r_LNP") == 0) {
        Clu_1122r_LNP = value;
    } else if (name.compare("Clu_1123r_LNP") == 0) {
        Clu_1123r_LNP = value;
    } else if (name.compare("Clu_1133r_LNP") == 0) {
        Clu_1133r_LNP = value;
    } else if (name.compare("Clu_1211r_LNP") == 0) {
        Clu_1211r_LNP = value;
    } else if (name.compare("Clu_1212r_LNP") == 0) {
        Clu_1212r_LNP = value;
    } else if (name.compare("Clu_1213r_LNP") == 0) {
        Clu_1213r_LNP = value;
    } else if (name.compare("Clu_1221r_LNP") == 0) {
        Clu_1221r_LNP = value;
    } else if (name.compare("Clu_1222r_LNP") == 0) {
        Clu_1222r_LNP = value;
    } else if (name.compare("Clu_1223r_LNP") == 0) {
        Clu_1223r_LNP = value;
    } else if (name.compare("Clu_1231r_LNP") == 0) {
        Clu_1231r_LNP = value;
    } else if (name.compare("Clu_1232r_LNP") == 0) {
        Clu_1232r_LNP = value;
    } else if (name.compare("Clu_1233r_LNP") == 0) {
        Clu_1233r_LNP = value;
    } else if (name.compare("Clu_1311r_LNP") == 0) {
        Clu_1311r_LNP = value;
    } else if (name.compare("Clu_1312r_LNP") == 0) {
        Clu_1312r_LNP = value;
    } else if (name.compare("Clu_1313r_LNP") == 0) {
        Clu_1313r_LNP = value;
    } else if (name.compare("Clu_1321r_LNP") == 0) {
        Clu_1321r_LNP = value;
    } else if (name.compare("Clu_1322r_LNP") == 0) {
        Clu_1322r_LNP = value;
    } else if (name.compare("Clu_1323r_LNP") == 0) {
        Clu_1323r_LNP = value;
    } else if (name.compare("Clu_1331r_LNP") == 0) {
        Clu_1331r_LNP = value;
    } else if (name.compare("Clu_1332r_LNP") == 0) {
        Clu_1332r_LNP = value;
    } else if (name.compare("Clu_1333r_LNP") == 0) {
        Clu_1333r_LNP = value;
    } else if (name.compare("Clu_2211r_LNP") == 0) {
        Clu_2211r_LNP = value;
    } else if (name.compare("Clu_2212r_LNP") == 0) {
        Clu_2212r_LNP = value;
    } else if (name.compare("Clu_2213r_LNP") == 0) {
        Clu_2213r_LNP = value;
    } else if (name.compare("Clu_2222r_LNP") == 0) {
        Clu_2222r_LNP = value;
    } else if (name.compare("Clu_2223r_LNP") == 0) {
        Clu_2223r_LNP = value;
    } else if (name.compare("Clu_2233r_LNP") == 0) {
        Clu_2233r_LNP = value;
    } else if (name.compare("Clu_2311r_LNP") == 0) {
        Clu_2311r_LNP = value;
    } else if (name.compare("Clu_2312r_LNP") == 0) {
        Clu_2312r_LNP = value;
    } else if (name.compare("Clu_2313r_LNP") == 0) {
        Clu_2313r_LNP = value;
    } else if (name.compare("Clu_2321r_LNP") == 0) {
        Clu_2321r_LNP = value;
    } else if (name.compare("Clu_2322r_LNP") == 0) {
        Clu_2322r_LNP = value;
    } else if (name.compare("Clu_2323r_LNP") == 0) {
        Clu_2323r_LNP = value;
    } else if (name.compare("Clu_2331r_LNP") == 0) {
        Clu_2331r_LNP = value;
    } else if (name.compare("Clu_2332r_LNP") == 0) {
        Clu_2332r_LNP = value;
    } else if (name.compare("Clu_2333r_LNP") == 0) {
        Clu_2333r_LNP = value;
    } else if (name.compare("Clu_3311r_LNP") == 0) {
        Clu_3311r_LNP = value;
    } else if (name.compare("Clu_3312r_LNP") == 0) {
        Clu_3312r_LNP = value;
    } else if (name.compare("Clu_3313r_LNP") == 0) {
        Clu_3313r_LNP = value;
    } else if (name.compare("Clu_3322r_LNP") == 0) {
        Clu_3322r_LNP = value;
    } else if (name.compare("Clu_3323r_LNP") == 0) {
        Clu_3323r_LNP = value;
    } else if (name.compare("Clu_3333r_LNP") == 0) {
        Clu_3333r_LNP = value;
    } else if (name.compare("Clu_1112i_LNP") == 0) {
        Clu_1112i_LNP = value;
    } else if (name.compare("Clu_1113i_LNP") == 0) {
        Clu_1113i_LNP = value;
    } else if (name.compare("Clu_1123i_LNP") == 0) {
        Clu_1123i_LNP = value;
    } else if (name.compare("Clu_1211i_LNP") == 0) {
        Clu_1211i_LNP = value;
    } else if (name.compare("Clu_1212i_LNP") == 0) {
        Clu_1212i_LNP = value;
    } else if (name.compare("Clu_1213i_LNP") == 0) {
        Clu_1213i_LNP = value;
    } else if (name.compare("Clu_1221i_LNP") == 0) {
        Clu_1221i_LNP = value;
    } else if (name.compare("Clu_1222i_LNP") == 0) {
        Clu_1222i_LNP = value;
    } else if (name.compare("Clu_1223i_LNP") == 0) {
        Clu_1223i_LNP = value;
    } else if (name.compare("Clu_1231i_LNP") == 0) {
        Clu_1231i_LNP = value;
    } else if (name.compare("Clu_1232i_LNP") == 0) {
        Clu_1232i_LNP = value;
    } else if (name.compare("Clu_1233i_LNP") == 0) {
        Clu_1233i_LNP = value;
    } else if (name.compare("Clu_1311i_LNP") == 0) {
        Clu_1311i_LNP = value;
    } else if (name.compare("Clu_1312i_LNP") == 0) {
        Clu_1312i_LNP = value;
    } else if (name.compare("Clu_1313i_LNP") == 0) {
        Clu_1313i_LNP = value;
    } else if (name.compare("Clu_1321i_LNP") == 0) {
        Clu_1321i_LNP = value;
    } else if (name.compare("Clu_1322i_LNP") == 0) {
        Clu_1322i_LNP = value;
    } else if (name.compare("Clu_1323i_LNP") == 0) {
        Clu_1323i_LNP = value;
    } else if (name.compare("Clu_1331i_LNP") == 0) {
        Clu_1331i_LNP = value;
    } else if (name.compare("Clu_1332i_LNP") == 0) {
        Clu_1332i_LNP = value;
    } else if (name.compare("Clu_1333i_LNP") == 0) {
        Clu_1333i_LNP = value;
    } else if (name.compare("Clu_2212i_LNP") == 0) {
        Clu_2212i_LNP = value;
    } else if (name.compare("Clu_2213i_LNP") == 0) {
        Clu_2213i_LNP = value;
    } else if (name.compare("Clu_2223i_LNP") == 0) {
        Clu_2223i_LNP = value;
    } else if (name.compare("Clu_2311i_LNP") == 0) {
        Clu_2311i_LNP = value;
    } else if (name.compare("Clu_2312i_LNP") == 0) {
        Clu_2312i_LNP = value;
    } else if (name.compare("Clu_2313i_LNP") == 0) {
        Clu_2313i_LNP = value;
    } else if (name.compare("Clu_2321i_LNP") == 0) {
        Clu_2321i_LNP = value;
    } else if (name.compare("Clu_2322i_LNP") == 0) {
        Clu_2322i_LNP = value;
    } else if (name.compare("Clu_2323i_LNP") == 0) {
        Clu_2323i_LNP = value;
    } else if (name.compare("Clu_2331i_LNP") == 0) {
        Clu_2331i_LNP = value;
    } else if (name.compare("Clu_2332i_LNP") == 0) {
        Clu_2332i_LNP = value;
    } else if (name.compare("Clu_2333i_LNP") == 0) {
        Clu_2333i_LNP = value;
    } else if (name.compare("Clu_3312i_LNP") == 0) {
        Clu_3312i_LNP = value;
    } else if (name.compare("Clu_3313i_LNP") == 0) {
        Clu_3313i_LNP = value;
    } else if (name.compare("Clu_3323i_LNP") == 0) {
        Clu_3323i_LNP = value;
    } else if (name.compare("Cld_1111r_LNP") == 0) {
        Cld_1111r_LNP = value;
    } else if (name.compare("Cld_1112r_LNP") == 0) {
        Cld_1112r_LNP = value;
    } else if (name.compare("Cld_1113r_LNP") == 0) {
        Cld_1113r_LNP = value;
    } else if (name.compare("Cld_1122r_LNP") == 0) {
        Cld_1122r_LNP = value;
    } else if (name.compare("Cld_1123r_LNP") == 0) {
        Cld_1123r_LNP = value;
    } else if (name.compare("Cld_1133r_LNP") == 0) {
        Cld_1133r_LNP = value;
    } else if (name.compare("Cld_1211r_LNP") == 0) {
        Cld_1211r_LNP = value;
    } else if (name.compare("Cld_1212r_LNP") == 0) {
        Cld_1212r_LNP = value;
    } else if (name.compare("Cld_1213r_LNP") == 0) {
        Cld_1213r_LNP = value;
    } else if (name.compare("Cld_1221r_LNP") == 0) {
        Cld_1221r_LNP = value;
    } else if (name.compare("Cld_1222r_LNP") == 0) {
        Cld_1222r_LNP = value;
    } else if (name.compare("Cld_1223r_LNP") == 0) {
        Cld_1223r_LNP = value;
    } else if (name.compare("Cld_1231r_LNP") == 0) {
        Cld_1231r_LNP = value;
    } else if (name.compare("Cld_1232r_LNP") == 0) {
        Cld_1232r_LNP = value;
    } else if (name.compare("Cld_1233r_LNP") == 0) {
        Cld_1233r_LNP = value;
    } else if (name.compare("Cld_1311r_LNP") == 0) {
        Cld_1311r_LNP = value;
    } else if (name.compare("Cld_1312r_LNP") == 0) {
        Cld_1312r_LNP = value;
    } else if (name.compare("Cld_1313r_LNP") == 0) {
        Cld_1313r_LNP = value;
    } else if (name.compare("Cld_1321r_LNP") == 0) {
        Cld_1321r_LNP = value;
    } else if (name.compare("Cld_1322r_LNP") == 0) {
        Cld_1322r_LNP = value;
    } else if (name.compare("Cld_1323r_LNP") == 0) {
        Cld_1323r_LNP = value;
    } else if (name.compare("Cld_1331r_LNP") == 0) {
        Cld_1331r_LNP = value;
    } else if (name.compare("Cld_1332r_LNP") == 0) {
        Cld_1332r_LNP = value;
    } else if (name.compare("Cld_1333r_LNP") == 0) {
        Cld_1333r_LNP = value;
    } else if (name.compare("Cld_2211r_LNP") == 0) {
        Cld_2211r_LNP = value;
    } else if (name.compare("Cld_2212r_LNP") == 0) {
        Cld_2212r_LNP = value;
    } else if (name.compare("Cld_2213r_LNP") == 0) {
        Cld_2213r_LNP = value;
    } else if (name.compare("Cld_2222r_LNP") == 0) {
        Cld_2222r_LNP = value;
    } else if (name.compare("Cld_2223r_LNP") == 0) {
        Cld_2223r_LNP = value;
    } else if (name.compare("Cld_2233r_LNP") == 0) {
        Cld_2233r_LNP = value;
    } else if (name.compare("Cld_2311r_LNP") == 0) {
        Cld_2311r_LNP = value;
    } else if (name.compare("Cld_2312r_LNP") == 0) {
        Cld_2312r_LNP = value;
    } else if (name.compare("Cld_2313r_LNP") == 0) {
        Cld_2313r_LNP = value;
    } else if (name.compare("Cld_2321r_LNP") == 0) {
        Cld_2321r_LNP = value;
    } else if (name.compare("Cld_2322r_LNP") == 0) {
        Cld_2322r_LNP = value;
    } else if (name.compare("Cld_2323r_LNP") == 0) {
        Cld_2323r_LNP = value;
    } else if (name.compare("Cld_2331r_LNP") == 0) {
        Cld_2331r_LNP = value;
    } else if (name.compare("Cld_2332r_LNP") == 0) {
        Cld_2332r_LNP = value;
    } else if (name.compare("Cld_2333r_LNP") == 0) {
        Cld_2333r_LNP = value;
    } else if (name.compare("Cld_3311r_LNP") == 0) {
        Cld_3311r_LNP = value;
    } else if (name.compare("Cld_3312r_LNP") == 0) {
        Cld_3312r_LNP = value;
    } else if (name.compare("Cld_3313r_LNP") == 0) {
        Cld_3313r_LNP = value;
    } else if (name.compare("Cld_3322r_LNP") == 0) {
        Cld_3322r_LNP = value;
    } else if (name.compare("Cld_3323r_LNP") == 0) {
        Cld_3323r_LNP = value;
    } else if (name.compare("Cld_3333r_LNP") == 0) {
        Cld_3333r_LNP = value;
    } else if (name.compare("Cld_1112i_LNP") == 0) {
        Cld_1112i_LNP = value;
    } else if (name.compare("Cld_1113i_LNP") == 0) {
        Cld_1113i_LNP = value;
    } else if (name.compare("Cld_1123i_LNP") == 0) {
        Cld_1123i_LNP = value;
    } else if (name.compare("Cld_1211i_LNP") == 0) {
        Cld_1211i_LNP = value;
    } else if (name.compare("Cld_1212i_LNP") == 0) {
        Cld_1212i_LNP = value;
    } else if (name.compare("Cld_1213i_LNP") == 0) {
        Cld_1213i_LNP = value;
    } else if (name.compare("Cld_1221i_LNP") == 0) {
        Cld_1221i_LNP = value;
    } else if (name.compare("Cld_1222i_LNP") == 0) {
        Cld_1222i_LNP = value;
    } else if (name.compare("Cld_1223i_LNP") == 0) {
        Cld_1223i_LNP = value;
    } else if (name.compare("Cld_1231i_LNP") == 0) {
        Cld_1231i_LNP = value;
    } else if (name.compare("Cld_1232i_LNP") == 0) {
        Cld_1232i_LNP = value;
    } else if (name.compare("Cld_1233i_LNP") == 0) {
        Cld_1233i_LNP = value;
    } else if (name.compare("Cld_1311i_LNP") == 0) {
        Cld_1311i_LNP = value;
    } else if (name.compare("Cld_1312i_LNP") == 0) {
        Cld_1312i_LNP = value;
    } else if (name.compare("Cld_1313i_LNP") == 0) {
        Cld_1313i_LNP = value;
    } else if (name.compare("Cld_1321i_LNP") == 0) {
        Cld_1321i_LNP = value;
    } else if (name.compare("Cld_1322i_LNP") == 0) {
        Cld_1322i_LNP = value;
    } else if (name.compare("Cld_1323i_LNP") == 0) {
        Cld_1323i_LNP = value;
    } else if (name.compare("Cld_1331i_LNP") == 0) {
        Cld_1331i_LNP = value;
    } else if (name.compare("Cld_1332i_LNP") == 0) {
        Cld_1332i_LNP = value;
    } else if (name.compare("Cld_1333i_LNP") == 0) {
        Cld_1333i_LNP = value;
    } else if (name.compare("Cld_2212i_LNP") == 0) {
        Cld_2212i_LNP = value;
    } else if (name.compare("Cld_2213i_LNP") == 0) {
        Cld_2213i_LNP = value;
    } else if (name.compare("Cld_2223i_LNP") == 0) {
        Cld_2223i_LNP = value;
    } else if (name.compare("Cld_2311i_LNP") == 0) {
        Cld_2311i_LNP = value;
    } else if (name.compare("Cld_2312i_LNP") == 0) {
        Cld_2312i_LNP = value;
    } else if (name.compare("Cld_2313i_LNP") == 0) {
        Cld_2313i_LNP = value;
    } else if (name.compare("Cld_2321i_LNP") == 0) {
        Cld_2321i_LNP = value;
    } else if (name.compare("Cld_2322i_LNP") == 0) {
        Cld_2322i_LNP = value;
    } else if (name.compare("Cld_2323i_LNP") == 0) {
        Cld_2323i_LNP = value;
    } else if (name.compare("Cld_2331i_LNP") == 0) {
        Cld_2331i_LNP = value;
    } else if (name.compare("Cld_2332i_LNP") == 0) {
        Cld_2332i_LNP = value;
    } else if (name.compare("Cld_2333i_LNP") == 0) {
        Cld_2333i_LNP = value;
    } else if (name.compare("Cld_3312i_LNP") == 0) {
        Cld_3312i_LNP = value;
    } else if (name.compare("Cld_3313i_LNP") == 0) {
        Cld_3313i_LNP = value;
    } else if (name.compare("Cld_3323i_LNP") == 0) {
        Cld_3323i_LNP = value;
    } else if (name.compare("Cqe_1111r_LNP") == 0) {
        Cqe_1111r_LNP = value;
    } else if (name.compare("Cqe_1112r_LNP") == 0) {
        Cqe_1112r_LNP = value;
    } else if (name.compare("Cqe_1113r_LNP") == 0) {
        Cqe_1113r_LNP = value;
    } else if (name.compare("Cqe_1122r_LNP") == 0) {
        Cqe_1122r_LNP = value;
    } else if (name.compare("Cqe_1123r_LNP") == 0) {
        Cqe_1123r_LNP = value;
    } else if (name.compare("Cqe_1133r_LNP") == 0) {
        Cqe_1133r_LNP = value;
    } else if (name.compare("Cqe_1211r_LNP") == 0) {
        Cqe_1211r_LNP = value;
    } else if (name.compare("Cqe_1212r_LNP") == 0) {
        Cqe_1212r_LNP = value;
    } else if (name.compare("Cqe_1213r_LNP") == 0) {
        Cqe_1213r_LNP = value;
    } else if (name.compare("Cqe_1221r_LNP") == 0) {
        Cqe_1221r_LNP = value;
    } else if (name.compare("Cqe_1222r_LNP") == 0) {
        Cqe_1222r_LNP = value;
    } else if (name.compare("Cqe_1223r_LNP") == 0) {
        Cqe_1223r_LNP = value;
    } else if (name.compare("Cqe_1231r_LNP") == 0) {
        Cqe_1231r_LNP = value;
    } else if (name.compare("Cqe_1232r_LNP") == 0) {
        Cqe_1232r_LNP = value;
    } else if (name.compare("Cqe_1233r_LNP") == 0) {
        Cqe_1233r_LNP = value;
    } else if (name.compare("Cqe_1311r_LNP") == 0) {
        Cqe_1311r_LNP = value;
    } else if (name.compare("Cqe_1312r_LNP") == 0) {
        Cqe_1312r_LNP = value;
    } else if (name.compare("Cqe_1313r_LNP") == 0) {
        Cqe_1313r_LNP = value;
    } else if (name.compare("Cqe_1321r_LNP") == 0) {
        Cqe_1321r_LNP = value;
    } else if (name.compare("Cqe_1322r_LNP") == 0) {
        Cqe_1322r_LNP = value;
    } else if (name.compare("Cqe_1323r_LNP") == 0) {
        Cqe_1323r_LNP = value;
    } else if (name.compare("Cqe_1331r_LNP") == 0) {
        Cqe_1331r_LNP = value;
    } else if (name.compare("Cqe_1332r_LNP") == 0) {
        Cqe_1332r_LNP = value;
    } else if (name.compare("Cqe_1333r_LNP") == 0) {
        Cqe_1333r_LNP = value;
    } else if (name.compare("Cqe_2211r_LNP") == 0) {
        Cqe_2211r_LNP = value;
    } else if (name.compare("Cqe_2212r_LNP") == 0) {
        Cqe_2212r_LNP = value;
    } else if (name.compare("Cqe_2213r_LNP") == 0) {
        Cqe_2213r_LNP = value;
    } else if (name.compare("Cqe_2222r_LNP") == 0) {
        Cqe_2222r_LNP = value;
    } else if (name.compare("Cqe_2223r_LNP") == 0) {
        Cqe_2223r_LNP = value;
    } else if (name.compare("Cqe_2233r_LNP") == 0) {
        Cqe_2233r_LNP = value;
    } else if (name.compare("Cqe_2311r_LNP") == 0) {
        Cqe_2311r_LNP = value;
    } else if (name.compare("Cqe_2312r_LNP") == 0) {
        Cqe_2312r_LNP = value;
    } else if (name.compare("Cqe_2313r_LNP") == 0) {
        Cqe_2313r_LNP = value;
    } else if (name.compare("Cqe_2321r_LNP") == 0) {
        Cqe_2321r_LNP = value;
    } else if (name.compare("Cqe_2322r_LNP") == 0) {
        Cqe_2322r_LNP = value;
    } else if (name.compare("Cqe_2323r_LNP") == 0) {
        Cqe_2323r_LNP = value;
    } else if (name.compare("Cqe_2331r_LNP") == 0) {
        Cqe_2331r_LNP = value;
    } else if (name.compare("Cqe_2332r_LNP") == 0) {
        Cqe_2332r_LNP = value;
    } else if (name.compare("Cqe_2333r_LNP") == 0) {
        Cqe_2333r_LNP = value;
    } else if (name.compare("Cqe_3311r_LNP") == 0) {
        Cqe_3311r_LNP = value;
    } else if (name.compare("Cqe_3312r_LNP") == 0) {
        Cqe_3312r_LNP = value;
    } else if (name.compare("Cqe_3313r_LNP") == 0) {
        Cqe_3313r_LNP = value;
    } else if (name.compare("Cqe_3322r_LNP") == 0) {
        Cqe_3322r_LNP = value;
    } else if (name.compare("Cqe_3323r_LNP") == 0) {
        Cqe_3323r_LNP = value;
    } else if (name.compare("Cqe_3333r_LNP") == 0) {
        Cqe_3333r_LNP = value;
    } else if (name.compare("Cqe_1112i_LNP") == 0) {
        Cqe_1112i_LNP = value;
    } else if (name.compare("Cqe_1113i_LNP") == 0) {
        Cqe_1113i_LNP = value;
    } else if (name.compare("Cqe_1123i_LNP") == 0) {
        Cqe_1123i_LNP = value;
    } else if (name.compare("Cqe_1211i_LNP") == 0) {
        Cqe_1211i_LNP = value;
    } else if (name.compare("Cqe_1212i_LNP") == 0) {
        Cqe_1212i_LNP = value;
    } else if (name.compare("Cqe_1213i_LNP") == 0) {
        Cqe_1213i_LNP = value;
    } else if (name.compare("Cqe_1221i_LNP") == 0) {
        Cqe_1221i_LNP = value;
    } else if (name.compare("Cqe_1222i_LNP") == 0) {
        Cqe_1222i_LNP = value;
    } else if (name.compare("Cqe_1223i_LNP") == 0) {
        Cqe_1223i_LNP = value;
    } else if (name.compare("Cqe_1231i_LNP") == 0) {
        Cqe_1231i_LNP = value;
    } else if (name.compare("Cqe_1232i_LNP") == 0) {
        Cqe_1232i_LNP = value;
    } else if (name.compare("Cqe_1233i_LNP") == 0) {
        Cqe_1233i_LNP = value;
    } else if (name.compare("Cqe_1311i_LNP") == 0) {
        Cqe_1311i_LNP = value;
    } else if (name.compare("Cqe_1312i_LNP") == 0) {
        Cqe_1312i_LNP = value;
    } else if (name.compare("Cqe_1313i_LNP") == 0) {
        Cqe_1313i_LNP = value;
    } else if (name.compare("Cqe_1321i_LNP") == 0) {
        Cqe_1321i_LNP = value;
    } else if (name.compare("Cqe_1322i_LNP") == 0) {
        Cqe_1322i_LNP = value;
    } else if (name.compare("Cqe_1323i_LNP") == 0) {
        Cqe_1323i_LNP = value;
    } else if (name.compare("Cqe_1331i_LNP") == 0) {
        Cqe_1331i_LNP = value;
    } else if (name.compare("Cqe_1332i_LNP") == 0) {
        Cqe_1332i_LNP = value;
    } else if (name.compare("Cqe_1333i_LNP") == 0) {
        Cqe_1333i_LNP = value;
    } else if (name.compare("Cqe_2212i_LNP") == 0) {
        Cqe_2212i_LNP = value;
    } else if (name.compare("Cqe_2213i_LNP") == 0) {
        Cqe_2213i_LNP = value;
    } else if (name.compare("Cqe_2223i_LNP") == 0) {
        Cqe_2223i_LNP = value;
    } else if (name.compare("Cqe_2311i_LNP") == 0) {
        Cqe_2311i_LNP = value;
    } else if (name.compare("Cqe_2312i_LNP") == 0) {
        Cqe_2312i_LNP = value;
    } else if (name.compare("Cqe_2313i_LNP") == 0) {
        Cqe_2313i_LNP = value;
    } else if (name.compare("Cqe_2321i_LNP") == 0) {
        Cqe_2321i_LNP = value;
    } else if (name.compare("Cqe_2322i_LNP") == 0) {
        Cqe_2322i_LNP = value;
    } else if (name.compare("Cqe_2323i_LNP") == 0) {
        Cqe_2323i_LNP = value;
    } else if (name.compare("Cqe_2331i_LNP") == 0) {
        Cqe_2331i_LNP = value;
    } else if (name.compare("Cqe_2332i_LNP") == 0) {
        Cqe_2332i_LNP = value;
    } else if (name.compare("Cqe_2333i_LNP") == 0) {
        Cqe_2333i_LNP = value;
    } else if (name.compare("Cqe_3312i_LNP") == 0) {
        Cqe_3312i_LNP = value;
    } else if (name.compare("Cqe_3313i_LNP") == 0) {
        Cqe_3313i_LNP = value;
    } else if (name.compare("Cqe_3323i_LNP") == 0) {
        Cqe_3323i_LNP = value;
    } else if (name.compare("Cledq_1111r_LNP") == 0) {
        Cledq_1111r_LNP = value;
    } else if (name.compare("Cledq_1112r_LNP") == 0) {
        Cledq_1112r_LNP = value;
    } else if (name.compare("Cledq_1113r_LNP") == 0) {
        Cledq_1113r_LNP = value;
    } else if (name.compare("Cledq_1121r_LNP") == 0) {
        Cledq_1121r_LNP = value;
    } else if (name.compare("Cledq_1122r_LNP") == 0) {
        Cledq_1122r_LNP = value;
    } else if (name.compare("Cledq_1123r_LNP") == 0) {
        Cledq_1123r_LNP = value;
    } else if (name.compare("Cledq_1131r_LNP") == 0) {
        Cledq_1131r_LNP = value;
    } else if (name.compare("Cledq_1132r_LNP") == 0) {
        Cledq_1132r_LNP = value;
    } else if (name.compare("Cledq_1133r_LNP") == 0) {
        Cledq_1133r_LNP = value;
    } else if (name.compare("Cledq_1211r_LNP") == 0) {
        Cledq_1211r_LNP = value;
    } else if (name.compare("Cledq_1212r_LNP") == 0) {
        Cledq_1212r_LNP = value;
    } else if (name.compare("Cledq_1213r_LNP") == 0) {
        Cledq_1213r_LNP = value;
    } else if (name.compare("Cledq_1221r_LNP") == 0) {
        Cledq_1221r_LNP = value;
    } else if (name.compare("Cledq_1222r_LNP") == 0) {
        Cledq_1222r_LNP = value;
    } else if (name.compare("Cledq_1223r_LNP") == 0) {
        Cledq_1223r_LNP = value;
    } else if (name.compare("Cledq_1231r_LNP") == 0) {
        Cledq_1231r_LNP = value;
    } else if (name.compare("Cledq_1232r_LNP") == 0) {
        Cledq_1232r_LNP = value;
    } else if (name.compare("Cledq_1233r_LNP") == 0) {
        Cledq_1233r_LNP = value;
    } else if (name.compare("Cledq_1311r_LNP") == 0) {
        Cledq_1311r_LNP = value;
    } else if (name.compare("Cledq_1312r_LNP") == 0) {
        Cledq_1312r_LNP = value;
    } else if (name.compare("Cledq_1313r_LNP") == 0) {
        Cledq_1313r_LNP = value;
    } else if (name.compare("Cledq_1321r_LNP") == 0) {
        Cledq_1321r_LNP = value;
    } else if (name.compare("Cledq_1322r_LNP") == 0) {
        Cledq_1322r_LNP = value;
    } else if (name.compare("Cledq_1323r_LNP") == 0) {
        Cledq_1323r_LNP = value;
    } else if (name.compare("Cledq_1331r_LNP") == 0) {
        Cledq_1331r_LNP = value;
    } else if (name.compare("Cledq_1332r_LNP") == 0) {
        Cledq_1332r_LNP = value;
    } else if (name.compare("Cledq_1333r_LNP") == 0) {
        Cledq_1333r_LNP = value;
    } else if (name.compare("Cledq_2111r_LNP") == 0) {
        Cledq_2111r_LNP = value;
    } else if (name.compare("Cledq_2112r_LNP") == 0) {
        Cledq_2112r_LNP = value;
    } else if (name.compare("Cledq_2113r_LNP") == 0) {
        Cledq_2113r_LNP = value;
    } else if (name.compare("Cledq_2121r_LNP") == 0) {
        Cledq_2121r_LNP = value;
    } else if (name.compare("Cledq_2122r_LNP") == 0) {
        Cledq_2122r_LNP = value;
    } else if (name.compare("Cledq_2123r_LNP") == 0) {
        Cledq_2123r_LNP = value;
    } else if (name.compare("Cledq_2131r_LNP") == 0) {
        Cledq_2131r_LNP = value;
    } else if (name.compare("Cledq_2132r_LNP") == 0) {
        Cledq_2132r_LNP = value;
    } else if (name.compare("Cledq_2133r_LNP") == 0) {
        Cledq_2133r_LNP = value;
    } else if (name.compare("Cledq_2211r_LNP") == 0) {
        Cledq_2211r_LNP = value;
    } else if (name.compare("Cledq_2212r_LNP") == 0) {
        Cledq_2212r_LNP = value;
    } else if (name.compare("Cledq_2213r_LNP") == 0) {
        Cledq_2213r_LNP = value;
    } else if (name.compare("Cledq_2221r_LNP") == 0) {
        Cledq_2221r_LNP = value;
    } else if (name.compare("Cledq_2222r_LNP") == 0) {
        Cledq_2222r_LNP = value;
    } else if (name.compare("Cledq_2223r_LNP") == 0) {
        Cledq_2223r_LNP = value;
    } else if (name.compare("Cledq_2231r_LNP") == 0) {
        Cledq_2231r_LNP = value;
    } else if (name.compare("Cledq_2232r_LNP") == 0) {
        Cledq_2232r_LNP = value;
    } else if (name.compare("Cledq_2233r_LNP") == 0) {
        Cledq_2233r_LNP = value;
    } else if (name.compare("Cledq_2311r_LNP") == 0) {
        Cledq_2311r_LNP = value;
    } else if (name.compare("Cledq_2312r_LNP") == 0) {
        Cledq_2312r_LNP = value;
    } else if (name.compare("Cledq_2313r_LNP") == 0) {
        Cledq_2313r_LNP = value;
    } else if (name.compare("Cledq_2321r_LNP") == 0) {
        Cledq_2321r_LNP = value;
    } else if (name.compare("Cledq_2322r_LNP") == 0) {
        Cledq_2322r_LNP = value;
    } else if (name.compare("Cledq_2323r_LNP") == 0) {
        Cledq_2323r_LNP = value;
    } else if (name.compare("Cledq_2331r_LNP") == 0) {
        Cledq_2331r_LNP = value;
    } else if (name.compare("Cledq_2332r_LNP") == 0) {
        Cledq_2332r_LNP = value;
    } else if (name.compare("Cledq_2333r_LNP") == 0) {
        Cledq_2333r_LNP = value;
    } else if (name.compare("Cledq_3111r_LNP") == 0) {
        Cledq_3111r_LNP = value;
    } else if (name.compare("Cledq_3112r_LNP") == 0) {
        Cledq_3112r_LNP = value;
    } else if (name.compare("Cledq_3113r_LNP") == 0) {
        Cledq_3113r_LNP = value;
    } else if (name.compare("Cledq_3121r_LNP") == 0) {
        Cledq_3121r_LNP = value;
    } else if (name.compare("Cledq_3122r_LNP") == 0) {
        Cledq_3122r_LNP = value;
    } else if (name.compare("Cledq_3123r_LNP") == 0) {
        Cledq_3123r_LNP = value;
    } else if (name.compare("Cledq_3131r_LNP") == 0) {
        Cledq_3131r_LNP = value;
    } else if (name.compare("Cledq_3132r_LNP") == 0) {
        Cledq_3132r_LNP = value;
    } else if (name.compare("Cledq_3133r_LNP") == 0) {
        Cledq_3133r_LNP = value;
    } else if (name.compare("Cledq_3211r_LNP") == 0) {
        Cledq_3211r_LNP = value;
    } else if (name.compare("Cledq_3212r_LNP") == 0) {
        Cledq_3212r_LNP = value;
    } else if (name.compare("Cledq_3213r_LNP") == 0) {
        Cledq_3213r_LNP = value;
    } else if (name.compare("Cledq_3221r_LNP") == 0) {
        Cledq_3221r_LNP = value;
    } else if (name.compare("Cledq_3222r_LNP") == 0) {
        Cledq_3222r_LNP = value;
    } else if (name.compare("Cledq_3223r_LNP") == 0) {
        Cledq_3223r_LNP = value;
    } else if (name.compare("Cledq_3231r_LNP") == 0) {
        Cledq_3231r_LNP = value;
    } else if (name.compare("Cledq_3232r_LNP") == 0) {
        Cledq_3232r_LNP = value;
    } else if (name.compare("Cledq_3233r_LNP") == 0) {
        Cledq_3233r_LNP = value;
    } else if (name.compare("Cledq_3311r_LNP") == 0) {
        Cledq_3311r_LNP = value;
    } else if (name.compare("Cledq_3312r_LNP") == 0) {
        Cledq_3312r_LNP = value;
    } else if (name.compare("Cledq_3313r_LNP") == 0) {
        Cledq_3313r_LNP = value;
    } else if (name.compare("Cledq_3321r_LNP") == 0) {
        Cledq_3321r_LNP = value;
    } else if (name.compare("Cledq_3322r_LNP") == 0) {
        Cledq_3322r_LNP = value;
    } else if (name.compare("Cledq_3323r_LNP") == 0) {
        Cledq_3323r_LNP = value;
    } else if (name.compare("Cledq_3331r_LNP") == 0) {
        Cledq_3331r_LNP = value;
    } else if (name.compare("Cledq_3332r_LNP") == 0) {
        Cledq_3332r_LNP = value;
    } else if (name.compare("Cledq_3333r_LNP") == 0) {
        Cledq_3333r_LNP = value;
    } else if (name.compare("Cledq_1111i_LNP") == 0) {
        Cledq_1111i_LNP = value;
    } else if (name.compare("Cledq_1112i_LNP") == 0) {
        Cledq_1112i_LNP = value;
    } else if (name.compare("Cledq_1113i_LNP") == 0) {
        Cledq_1113i_LNP = value;
    } else if (name.compare("Cledq_1121i_LNP") == 0) {
        Cledq_1121i_LNP = value;
    } else if (name.compare("Cledq_1122i_LNP") == 0) {
        Cledq_1122i_LNP = value;
    } else if (name.compare("Cledq_1123i_LNP") == 0) {
        Cledq_1123i_LNP = value;
    } else if (name.compare("Cledq_1131i_LNP") == 0) {
        Cledq_1131i_LNP = value;
    } else if (name.compare("Cledq_1132i_LNP") == 0) {
        Cledq_1132i_LNP = value;
    } else if (name.compare("Cledq_1133i_LNP") == 0) {
        Cledq_1133i_LNP = value;
    } else if (name.compare("Cledq_1211i_LNP") == 0) {
        Cledq_1211i_LNP = value;
    } else if (name.compare("Cledq_1212i_LNP") == 0) {
        Cledq_1212i_LNP = value;
    } else if (name.compare("Cledq_1213i_LNP") == 0) {
        Cledq_1213i_LNP = value;
    } else if (name.compare("Cledq_1221i_LNP") == 0) {
        Cledq_1221i_LNP = value;
    } else if (name.compare("Cledq_1222i_LNP") == 0) {
        Cledq_1222i_LNP = value;
    } else if (name.compare("Cledq_1223i_LNP") == 0) {
        Cledq_1223i_LNP = value;
    } else if (name.compare("Cledq_1231i_LNP") == 0) {
        Cledq_1231i_LNP = value;
    } else if (name.compare("Cledq_1232i_LNP") == 0) {
        Cledq_1232i_LNP = value;
    } else if (name.compare("Cledq_1233i_LNP") == 0) {
        Cledq_1233i_LNP = value;
    } else if (name.compare("Cledq_1311i_LNP") == 0) {
        Cledq_1311i_LNP = value;
    } else if (name.compare("Cledq_1312i_LNP") == 0) {
        Cledq_1312i_LNP = value;
    } else if (name.compare("Cledq_1313i_LNP") == 0) {
        Cledq_1313i_LNP = value;
    } else if (name.compare("Cledq_1321i_LNP") == 0) {
        Cledq_1321i_LNP = value;
    } else if (name.compare("Cledq_1322i_LNP") == 0) {
        Cledq_1322i_LNP = value;
    } else if (name.compare("Cledq_1323i_LNP") == 0) {
        Cledq_1323i_LNP = value;
    } else if (name.compare("Cledq_1331i_LNP") == 0) {
        Cledq_1331i_LNP = value;
    } else if (name.compare("Cledq_1332i_LNP") == 0) {
        Cledq_1332i_LNP = value;
    } else if (name.compare("Cledq_1333i_LNP") == 0) {
        Cledq_1333i_LNP = value;
    } else if (name.compare("Cledq_2111i_LNP") == 0) {
        Cledq_2111i_LNP = value;
    } else if (name.compare("Cledq_2112i_LNP") == 0) {
        Cledq_2112i_LNP = value;
    } else if (name.compare("Cledq_2113i_LNP") == 0) {
        Cledq_2113i_LNP = value;
    } else if (name.compare("Cledq_2121i_LNP") == 0) {
        Cledq_2121i_LNP = value;
    } else if (name.compare("Cledq_2122i_LNP") == 0) {
        Cledq_2122i_LNP = value;
    } else if (name.compare("Cledq_2123i_LNP") == 0) {
        Cledq_2123i_LNP = value;
    } else if (name.compare("Cledq_2131i_LNP") == 0) {
        Cledq_2131i_LNP = value;
    } else if (name.compare("Cledq_2132i_LNP") == 0) {
        Cledq_2132i_LNP = value;
    } else if (name.compare("Cledq_2133i_LNP") == 0) {
        Cledq_2133i_LNP = value;
    } else if (name.compare("Cledq_2211i_LNP") == 0) {
        Cledq_2211i_LNP = value;
    } else if (name.compare("Cledq_2212i_LNP") == 0) {
        Cledq_2212i_LNP = value;
    } else if (name.compare("Cledq_2213i_LNP") == 0) {
        Cledq_2213i_LNP = value;
    } else if (name.compare("Cledq_2221i_LNP") == 0) {
        Cledq_2221i_LNP = value;
    } else if (name.compare("Cledq_2222i_LNP") == 0) {
        Cledq_2222i_LNP = value;
    } else if (name.compare("Cledq_2223i_LNP") == 0) {
        Cledq_2223i_LNP = value;
    } else if (name.compare("Cledq_2231i_LNP") == 0) {
        Cledq_2231i_LNP = value;
    } else if (name.compare("Cledq_2232i_LNP") == 0) {
        Cledq_2232i_LNP = value;
    } else if (name.compare("Cledq_2233i_LNP") == 0) {
        Cledq_2233i_LNP = value;
    } else if (name.compare("Cledq_2311i_LNP") == 0) {
        Cledq_2311i_LNP = value;
    } else if (name.compare("Cledq_2312i_LNP") == 0) {
        Cledq_2312i_LNP = value;
    } else if (name.compare("Cledq_2313i_LNP") == 0) {
        Cledq_2313i_LNP = value;
    } else if (name.compare("Cledq_2321i_LNP") == 0) {
        Cledq_2321i_LNP = value;
    } else if (name.compare("Cledq_2322i_LNP") == 0) {
        Cledq_2322i_LNP = value;
    } else if (name.compare("Cledq_2323i_LNP") == 0) {
        Cledq_2323i_LNP = value;
    } else if (name.compare("Cledq_2331i_LNP") == 0) {
        Cledq_2331i_LNP = value;
    } else if (name.compare("Cledq_2332i_LNP") == 0) {
        Cledq_2332i_LNP = value;
    } else if (name.compare("Cledq_2333i_LNP") == 0) {
        Cledq_2333i_LNP = value;
    } else if (name.compare("Cledq_3111i_LNP") == 0) {
        Cledq_3111i_LNP = value;
    } else if (name.compare("Cledq_3112i_LNP") == 0) {
        Cledq_3112i_LNP = value;
    } else if (name.compare("Cledq_3113i_LNP") == 0) {
        Cledq_3113i_LNP = value;
    } else if (name.compare("Cledq_3121i_LNP") == 0) {
        Cledq_3121i_LNP = value;
    } else if (name.compare("Cledq_3122i_LNP") == 0) {
        Cledq_3122i_LNP = value;
    } else if (name.compare("Cledq_3123i_LNP") == 0) {
        Cledq_3123i_LNP = value;
    } else if (name.compare("Cledq_3131i_LNP") == 0) {
        Cledq_3131i_LNP = value;
    } else if (name.compare("Cledq_3132i_LNP") == 0) {
        Cledq_3132i_LNP = value;
    } else if (name.compare("Cledq_3133i_LNP") == 0) {
        Cledq_3133i_LNP = value;
    } else if (name.compare("Cledq_3211i_LNP") == 0) {
        Cledq_3211i_LNP = value;
    } else if (name.compare("Cledq_3212i_LNP") == 0) {
        Cledq_3212i_LNP = value;
    } else if (name.compare("Cledq_3213i_LNP") == 0) {
        Cledq_3213i_LNP = value;
    } else if (name.compare("Cledq_3221i_LNP") == 0) {
        Cledq_3221i_LNP = value;
    } else if (name.compare("Cledq_3222i_LNP") == 0) {
        Cledq_3222i_LNP = value;
    } else if (name.compare("Cledq_3223i_LNP") == 0) {
        Cledq_3223i_LNP = value;
    } else if (name.compare("Cledq_3231i_LNP") == 0) {
        Cledq_3231i_LNP = value;
    } else if (name.compare("Cledq_3232i_LNP") == 0) {
        Cledq_3232i_LNP = value;
    } else if (name.compare("Cledq_3233i_LNP") == 0) {
        Cledq_3233i_LNP = value;
    } else if (name.compare("Cledq_3311i_LNP") == 0) {
        Cledq_3311i_LNP = value;
    } else if (name.compare("Cledq_3312i_LNP") == 0) {
        Cledq_3312i_LNP = value;
    } else if (name.compare("Cledq_3313i_LNP") == 0) {
        Cledq_3313i_LNP = value;
    } else if (name.compare("Cledq_3321i_LNP") == 0) {
        Cledq_3321i_LNP = value;
    } else if (name.compare("Cledq_3322i_LNP") == 0) {
        Cledq_3322i_LNP = value;
    } else if (name.compare("Cledq_3323i_LNP") == 0) {
        Cledq_3323i_LNP = value;
    } else if (name.compare("Cledq_3331i_LNP") == 0) {
        Cledq_3331i_LNP = value;
    } else if (name.compare("Cledq_3332i_LNP") == 0) {
        Cledq_3332i_LNP = value;
    } else if (name.compare("Cledq_3333i_LNP") == 0) {
        Cledq_3333i_LNP = value;
    } else if (name.compare("Cqq1_1111r_LNP") == 0) {
        Cqq1_1111r_LNP = value;
    } else if (name.compare("Cqq1_1112r_LNP") == 0) {
        Cqq1_1112r_LNP = value;
    } else if (name.compare("Cqq1_1113r_LNP") == 0) {
        Cqq1_1113r_LNP = value;
    } else if (name.compare("Cqq1_1122r_LNP") == 0) {
        Cqq1_1122r_LNP = value;
    } else if (name.compare("Cqq1_1123r_LNP") == 0) {
        Cqq1_1123r_LNP = value;
    } else if (name.compare("Cqq1_1133r_LNP") == 0) {
        Cqq1_1133r_LNP = value;
    } else if (name.compare("Cqq1_1212r_LNP") == 0) {
        Cqq1_1212r_LNP = value;
    } else if (name.compare("Cqq1_1213r_LNP") == 0) {
        Cqq1_1213r_LNP = value;
    } else if (name.compare("Cqq1_1221r_LNP") == 0) {
        Cqq1_1221r_LNP = value;
    } else if (name.compare("Cqq1_1222r_LNP") == 0) {
        Cqq1_1222r_LNP = value;
    } else if (name.compare("Cqq1_1223r_LNP") == 0) {
        Cqq1_1223r_LNP = value;
    } else if (name.compare("Cqq1_1231r_LNP") == 0) {
        Cqq1_1231r_LNP = value;
    } else if (name.compare("Cqq1_1232r_LNP") == 0) {
        Cqq1_1232r_LNP = value;
    } else if (name.compare("Cqq1_1233r_LNP") == 0) {
        Cqq1_1233r_LNP = value;
    } else if (name.compare("Cqq1_1313r_LNP") == 0) {
        Cqq1_1313r_LNP = value;
    } else if (name.compare("Cqq1_1322r_LNP") == 0) {
        Cqq1_1322r_LNP = value;
    } else if (name.compare("Cqq1_1323r_LNP") == 0) {
        Cqq1_1323r_LNP = value;
    } else if (name.compare("Cqq1_1331r_LNP") == 0) {
        Cqq1_1331r_LNP = value;
    } else if (name.compare("Cqq1_1332r_LNP") == 0) {
        Cqq1_1332r_LNP = value;
    } else if (name.compare("Cqq1_1333r_LNP") == 0) {
        Cqq1_1333r_LNP = value;
    } else if (name.compare("Cqq1_2222r_LNP") == 0) {
        Cqq1_2222r_LNP = value;
    } else if (name.compare("Cqq1_2223r_LNP") == 0) {
        Cqq1_2223r_LNP = value;
    } else if (name.compare("Cqq1_2233r_LNP") == 0) {
        Cqq1_2233r_LNP = value;
    } else if (name.compare("Cqq1_2323r_LNP") == 0) {
        Cqq1_2323r_LNP = value;
    } else if (name.compare("Cqq1_2332r_LNP") == 0) {
        Cqq1_2332r_LNP = value;
    } else if (name.compare("Cqq1_2333r_LNP") == 0) {
        Cqq1_2333r_LNP = value;
    } else if (name.compare("Cqq1_3333r_LNP") == 0) {
        Cqq1_3333r_LNP = value;
    } else if (name.compare("Cqq1_1112i_LNP") == 0) {
        Cqq1_1112i_LNP = value;
    } else if (name.compare("Cqq1_1113i_LNP") == 0) {
        Cqq1_1113i_LNP = value;
    } else if (name.compare("Cqq1_1123i_LNP") == 0) {
        Cqq1_1123i_LNP = value;
    } else if (name.compare("Cqq1_1212i_LNP") == 0) {
        Cqq1_1212i_LNP = value;
    } else if (name.compare("Cqq1_1213i_LNP") == 0) {
        Cqq1_1213i_LNP = value;
    } else if (name.compare("Cqq1_1222i_LNP") == 0) {
        Cqq1_1222i_LNP = value;
    } else if (name.compare("Cqq1_1223i_LNP") == 0) {
        Cqq1_1223i_LNP = value;
    } else if (name.compare("Cqq1_1231i_LNP") == 0) {
        Cqq1_1231i_LNP = value;
    } else if (name.compare("Cqq1_1232i_LNP") == 0) {
        Cqq1_1232i_LNP = value;
    } else if (name.compare("Cqq1_1233i_LNP") == 0) {
        Cqq1_1233i_LNP = value;
    } else if (name.compare("Cqq1_1313i_LNP") == 0) {
        Cqq1_1313i_LNP = value;
    } else if (name.compare("Cqq1_1322i_LNP") == 0) {
        Cqq1_1322i_LNP = value;
    } else if (name.compare("Cqq1_1323i_LNP") == 0) {
        Cqq1_1323i_LNP = value;
    } else if (name.compare("Cqq1_1332i_LNP") == 0) {
        Cqq1_1332i_LNP = value;
    } else if (name.compare("Cqq1_1333i_LNP") == 0) {
        Cqq1_1333i_LNP = value;
    } else if (name.compare("Cqq1_2223i_LNP") == 0) {
        Cqq1_2223i_LNP = value;
    } else if (name.compare("Cqq1_2323i_LNP") == 0) {
        Cqq1_2323i_LNP = value;
    } else if (name.compare("Cqq1_2333i_LNP") == 0) {
        Cqq1_2333i_LNP = value;
    } else if (name.compare("Cqq3_1111r_LNP") == 0) {
        Cqq3_1111r_LNP = value;
    } else if (name.compare("Cqq3_1112r_LNP") == 0) {
        Cqq3_1112r_LNP = value;
    } else if (name.compare("Cqq3_1113r_LNP") == 0) {
        Cqq3_1113r_LNP = value;
    } else if (name.compare("Cqq3_1122r_LNP") == 0) {
        Cqq3_1122r_LNP = value;
    } else if (name.compare("Cqq3_1123r_LNP") == 0) {
        Cqq3_1123r_LNP = value;
    } else if (name.compare("Cqq3_1133r_LNP") == 0) {
        Cqq3_1133r_LNP = value;
    } else if (name.compare("Cqq3_1212r_LNP") == 0) {
        Cqq3_1212r_LNP = value;
    } else if (name.compare("Cqq3_1213r_LNP") == 0) {
        Cqq3_1213r_LNP = value;
    } else if (name.compare("Cqq3_1221r_LNP") == 0) {
        Cqq3_1221r_LNP = value;
    } else if (name.compare("Cqq3_1222r_LNP") == 0) {
        Cqq3_1222r_LNP = value;
    } else if (name.compare("Cqq3_1223r_LNP") == 0) {
        Cqq3_1223r_LNP = value;
    } else if (name.compare("Cqq3_1231r_LNP") == 0) {
        Cqq3_1231r_LNP = value;
    } else if (name.compare("Cqq3_1232r_LNP") == 0) {
        Cqq3_1232r_LNP = value;
    } else if (name.compare("Cqq3_1233r_LNP") == 0) {
        Cqq3_1233r_LNP = value;
    } else if (name.compare("Cqq3_1313r_LNP") == 0) {
        Cqq3_1313r_LNP = value;
    } else if (name.compare("Cqq3_1322r_LNP") == 0) {
        Cqq3_1322r_LNP = value;
    } else if (name.compare("Cqq3_1323r_LNP") == 0) {
        Cqq3_1323r_LNP = value;
    } else if (name.compare("Cqq3_1331r_LNP") == 0) {
        Cqq3_1331r_LNP = value;
    } else if (name.compare("Cqq3_1332r_LNP") == 0) {
        Cqq3_1332r_LNP = value;
    } else if (name.compare("Cqq3_1333r_LNP") == 0) {
        Cqq3_1333r_LNP = value;
    } else if (name.compare("Cqq3_2222r_LNP") == 0) {
        Cqq3_2222r_LNP = value;
    } else if (name.compare("Cqq3_2223r_LNP") == 0) {
        Cqq3_2223r_LNP = value;
    } else if (name.compare("Cqq3_2233r_LNP") == 0) {
        Cqq3_2233r_LNP = value;
    } else if (name.compare("Cqq3_2323r_LNP") == 0) {
        Cqq3_2323r_LNP = value;
    } else if (name.compare("Cqq3_2332r_LNP") == 0) {
        Cqq3_2332r_LNP = value;
    } else if (name.compare("Cqq3_2333r_LNP") == 0) {
        Cqq3_2333r_LNP = value;
    } else if (name.compare("Cqq3_3333r_LNP") == 0) {
        Cqq3_3333r_LNP = value;
    } else if (name.compare("Cqq3_1112i_LNP") == 0) {
        Cqq3_1112i_LNP = value;
    } else if (name.compare("Cqq3_1113i_LNP") == 0) {
        Cqq3_1113i_LNP = value;
    } else if (name.compare("Cqq3_1123i_LNP") == 0) {
        Cqq3_1123i_LNP = value;
    } else if (name.compare("Cqq3_1212i_LNP") == 0) {
        Cqq3_1212i_LNP = value;
    } else if (name.compare("Cqq3_1213i_LNP") == 0) {
        Cqq3_1213i_LNP = value;
    } else if (name.compare("Cqq3_1222i_LNP") == 0) {
        Cqq3_1222i_LNP = value;
    } else if (name.compare("Cqq3_1223i_LNP") == 0) {
        Cqq3_1223i_LNP = value;
    } else if (name.compare("Cqq3_1231i_LNP") == 0) {
        Cqq3_1231i_LNP = value;
    } else if (name.compare("Cqq3_1232i_LNP") == 0) {
        Cqq3_1232i_LNP = value;
    } else if (name.compare("Cqq3_1233i_LNP") == 0) {
        Cqq3_1233i_LNP = value;
    } else if (name.compare("Cqq3_1313i_LNP") == 0) {
        Cqq3_1313i_LNP = value;
    } else if (name.compare("Cqq3_1322i_LNP") == 0) {
        Cqq3_1322i_LNP = value;
    } else if (name.compare("Cqq3_1323i_LNP") == 0) {
        Cqq3_1323i_LNP = value;
    } else if (name.compare("Cqq3_1332i_LNP") == 0) {
        Cqq3_1332i_LNP = value;
    } else if (name.compare("Cqq3_1333i_LNP") == 0) {
        Cqq3_1333i_LNP = value;
    } else if (name.compare("Cqq3_2223i_LNP") == 0) {
        Cqq3_2223i_LNP = value;
    } else if (name.compare("Cqq3_2323i_LNP") == 0) {
        Cqq3_2323i_LNP = value;
    } else if (name.compare("Cqq3_2333i_LNP") == 0) {
        Cqq3_2333i_LNP = value;
    } else if (name.compare("Cuu_1111r_LNP") == 0) {
        Cuu_1111r_LNP = value;
    } else if (name.compare("Cuu_1112r_LNP") == 0) {
        Cuu_1112r_LNP = value;
    } else if (name.compare("Cuu_1113r_LNP") == 0) {
        Cuu_1113r_LNP = value;
    } else if (name.compare("Cuu_1122r_LNP") == 0) {
        Cuu_1122r_LNP = value;
    } else if (name.compare("Cuu_1123r_LNP") == 0) {
        Cuu_1123r_LNP = value;
    } else if (name.compare("Cuu_1133r_LNP") == 0) {
        Cuu_1133r_LNP = value;
    } else if (name.compare("Cuu_1212r_LNP") == 0) {
        Cuu_1212r_LNP = value;
    } else if (name.compare("Cuu_1213r_LNP") == 0) {
        Cuu_1213r_LNP = value;
    } else if (name.compare("Cuu_1221r_LNP") == 0) {
        Cuu_1221r_LNP = value;
    } else if (name.compare("Cuu_1222r_LNP") == 0) {
        Cuu_1222r_LNP = value;
    } else if (name.compare("Cuu_1223r_LNP") == 0) {
        Cuu_1223r_LNP = value;
    } else if (name.compare("Cuu_1231r_LNP") == 0) {
        Cuu_1231r_LNP = value;
    } else if (name.compare("Cuu_1232r_LNP") == 0) {
        Cuu_1232r_LNP = value;
    } else if (name.compare("Cuu_1233r_LNP") == 0) {
        Cuu_1233r_LNP = value;
    } else if (name.compare("Cuu_1313r_LNP") == 0) {
        Cuu_1313r_LNP = value;
    } else if (name.compare("Cuu_1322r_LNP") == 0) {
        Cuu_1322r_LNP = value;
    } else if (name.compare("Cuu_1323r_LNP") == 0) {
        Cuu_1323r_LNP = value;
    } else if (name.compare("Cuu_1331r_LNP") == 0) {
        Cuu_1331r_LNP = value;
    } else if (name.compare("Cuu_1332r_LNP") == 0) {
        Cuu_1332r_LNP = value;
    } else if (name.compare("Cuu_1333r_LNP") == 0) {
        Cuu_1333r_LNP = value;
    } else if (name.compare("Cuu_2222r_LNP") == 0) {
        Cuu_2222r_LNP = value;
    } else if (name.compare("Cuu_2223r_LNP") == 0) {
        Cuu_2223r_LNP = value;
    } else if (name.compare("Cuu_2233r_LNP") == 0) {
        Cuu_2233r_LNP = value;
    } else if (name.compare("Cuu_2323r_LNP") == 0) {
        Cuu_2323r_LNP = value;
    } else if (name.compare("Cuu_2332r_LNP") == 0) {
        Cuu_2332r_LNP = value;
    } else if (name.compare("Cuu_2333r_LNP") == 0) {
        Cuu_2333r_LNP = value;
    } else if (name.compare("Cuu_3333r_LNP") == 0) {
        Cuu_3333r_LNP = value;
    } else if (name.compare("Cuu_1112i_LNP") == 0) {
        Cuu_1112i_LNP = value;
    } else if (name.compare("Cuu_1113i_LNP") == 0) {
        Cuu_1113i_LNP = value;
    } else if (name.compare("Cuu_1123i_LNP") == 0) {
        Cuu_1123i_LNP = value;
    } else if (name.compare("Cuu_1212i_LNP") == 0) {
        Cuu_1212i_LNP = value;
    } else if (name.compare("Cuu_1213i_LNP") == 0) {
        Cuu_1213i_LNP = value;
    } else if (name.compare("Cuu_1222i_LNP") == 0) {
        Cuu_1222i_LNP = value;
    } else if (name.compare("Cuu_1223i_LNP") == 0) {
        Cuu_1223i_LNP = value;
    } else if (name.compare("Cuu_1231i_LNP") == 0) {
        Cuu_1231i_LNP = value;
    } else if (name.compare("Cuu_1232i_LNP") == 0) {
        Cuu_1232i_LNP = value;
    } else if (name.compare("Cuu_1233i_LNP") == 0) {
        Cuu_1233i_LNP = value;
    } else if (name.compare("Cuu_1313i_LNP") == 0) {
        Cuu_1313i_LNP = value;
    } else if (name.compare("Cuu_1322i_LNP") == 0) {
        Cuu_1322i_LNP = value;
    } else if (name.compare("Cuu_1323i_LNP") == 0) {
        Cuu_1323i_LNP = value;
    } else if (name.compare("Cuu_1332i_LNP") == 0) {
        Cuu_1332i_LNP = value;
    } else if (name.compare("Cuu_1333i_LNP") == 0) {
        Cuu_1333i_LNP = value;
    } else if (name.compare("Cuu_2223i_LNP") == 0) {
        Cuu_2223i_LNP = value;
    } else if (name.compare("Cuu_2323i_LNP") == 0) {
        Cuu_2323i_LNP = value;
    } else if (name.compare("Cuu_2333i_LNP") == 0) {
        Cuu_2333i_LNP = value;
    } else if (name.compare("Cdd_1111r_LNP") == 0) {
        Cdd_1111r_LNP = value;
    } else if (name.compare("Cdd_1112r_LNP") == 0) {
        Cdd_1112r_LNP = value;
    } else if (name.compare("Cdd_1113r_LNP") == 0) {
        Cdd_1113r_LNP = value;
    } else if (name.compare("Cdd_1122r_LNP") == 0) {
        Cdd_1122r_LNP = value;
    } else if (name.compare("Cdd_1123r_LNP") == 0) {
        Cdd_1123r_LNP = value;
    } else if (name.compare("Cdd_1133r_LNP") == 0) {
        Cdd_1133r_LNP = value;
    } else if (name.compare("Cdd_1212r_LNP") == 0) {
        Cdd_1212r_LNP = value;
    } else if (name.compare("Cdd_1213r_LNP") == 0) {
        Cdd_1213r_LNP = value;
    } else if (name.compare("Cdd_1221r_LNP") == 0) {
        Cdd_1221r_LNP = value;
    } else if (name.compare("Cdd_1222r_LNP") == 0) {
        Cdd_1222r_LNP = value;
    } else if (name.compare("Cdd_1223r_LNP") == 0) {
        Cdd_1223r_LNP = value;
    } else if (name.compare("Cdd_1231r_LNP") == 0) {
        Cdd_1231r_LNP = value;
    } else if (name.compare("Cdd_1232r_LNP") == 0) {
        Cdd_1232r_LNP = value;
    } else if (name.compare("Cdd_1233r_LNP") == 0) {
        Cdd_1233r_LNP = value;
    } else if (name.compare("Cdd_1313r_LNP") == 0) {
        Cdd_1313r_LNP = value;
    } else if (name.compare("Cdd_1322r_LNP") == 0) {
        Cdd_1322r_LNP = value;
    } else if (name.compare("Cdd_1323r_LNP") == 0) {
        Cdd_1323r_LNP = value;
    } else if (name.compare("Cdd_1331r_LNP") == 0) {
        Cdd_1331r_LNP = value;
    } else if (name.compare("Cdd_1332r_LNP") == 0) {
        Cdd_1332r_LNP = value;
    } else if (name.compare("Cdd_1333r_LNP") == 0) {
        Cdd_1333r_LNP = value;
    } else if (name.compare("Cdd_2222r_LNP") == 0) {
        Cdd_2222r_LNP = value;
    } else if (name.compare("Cdd_2223r_LNP") == 0) {
        Cdd_2223r_LNP = value;
    } else if (name.compare("Cdd_2233r_LNP") == 0) {
        Cdd_2233r_LNP = value;
    } else if (name.compare("Cdd_2323r_LNP") == 0) {
        Cdd_2323r_LNP = value;
    } else if (name.compare("Cdd_2332r_LNP") == 0) {
        Cdd_2332r_LNP = value;
    } else if (name.compare("Cdd_2333r_LNP") == 0) {
        Cdd_2333r_LNP = value;
    } else if (name.compare("Cdd_3333r_LNP") == 0) {
        Cdd_3333r_LNP = value;
    } else if (name.compare("Cdd_1112i_LNP") == 0) {
        Cdd_1112i_LNP = value;
    } else if (name.compare("Cdd_1113i_LNP") == 0) {
        Cdd_1113i_LNP = value;
    } else if (name.compare("Cdd_1123i_LNP") == 0) {
        Cdd_1123i_LNP = value;
    } else if (name.compare("Cdd_1212i_LNP") == 0) {
        Cdd_1212i_LNP = value;
    } else if (name.compare("Cdd_1213i_LNP") == 0) {
        Cdd_1213i_LNP = value;
    } else if (name.compare("Cdd_1222i_LNP") == 0) {
        Cdd_1222i_LNP = value;
    } else if (name.compare("Cdd_1223i_LNP") == 0) {
        Cdd_1223i_LNP = value;
    } else if (name.compare("Cdd_1231i_LNP") == 0) {
        Cdd_1231i_LNP = value;
    } else if (name.compare("Cdd_1232i_LNP") == 0) {
        Cdd_1232i_LNP = value;
    } else if (name.compare("Cdd_1233i_LNP") == 0) {
        Cdd_1233i_LNP = value;
    } else if (name.compare("Cdd_1313i_LNP") == 0) {
        Cdd_1313i_LNP = value;
    } else if (name.compare("Cdd_1322i_LNP") == 0) {
        Cdd_1322i_LNP = value;
    } else if (name.compare("Cdd_1323i_LNP") == 0) {
        Cdd_1323i_LNP = value;
    } else if (name.compare("Cdd_1332i_LNP") == 0) {
        Cdd_1332i_LNP = value;
    } else if (name.compare("Cdd_1333i_LNP") == 0) {
        Cdd_1333i_LNP = value;
    } else if (name.compare("Cdd_2223i_LNP") == 0) {
        Cdd_2223i_LNP = value;
    } else if (name.compare("Cdd_2323i_LNP") == 0) {
        Cdd_2323i_LNP = value;
    } else if (name.compare("Cdd_2333i_LNP") == 0) {
        Cdd_2333i_LNP = value;
    } else if (name.compare("Cud1_1111r_LNP") == 0) {
        Cud1_1111r_LNP = value;
    } else if (name.compare("Cud1_1112r_LNP") == 0) {
        Cud1_1112r_LNP = value;
    } else if (name.compare("Cud1_1113r_LNP") == 0) {
        Cud1_1113r_LNP = value;
    } else if (name.compare("Cud1_1122r_LNP") == 0) {
        Cud1_1122r_LNP = value;
    } else if (name.compare("Cud1_1123r_LNP") == 0) {
        Cud1_1123r_LNP = value;
    } else if (name.compare("Cud1_1133r_LNP") == 0) {
        Cud1_1133r_LNP = value;
    } else if (name.compare("Cud1_1211r_LNP") == 0) {
        Cud1_1211r_LNP = value;
    } else if (name.compare("Cud1_1212r_LNP") == 0) {
        Cud1_1212r_LNP = value;
    } else if (name.compare("Cud1_1213r_LNP") == 0) {
        Cud1_1213r_LNP = value;
    } else if (name.compare("Cud1_1221r_LNP") == 0) {
        Cud1_1221r_LNP = value;
    } else if (name.compare("Cud1_1222r_LNP") == 0) {
        Cud1_1222r_LNP = value;
    } else if (name.compare("Cud1_1223r_LNP") == 0) {
        Cud1_1223r_LNP = value;
    } else if (name.compare("Cud1_1231r_LNP") == 0) {
        Cud1_1231r_LNP = value;
    } else if (name.compare("Cud1_1232r_LNP") == 0) {
        Cud1_1232r_LNP = value;
    } else if (name.compare("Cud1_1233r_LNP") == 0) {
        Cud1_1233r_LNP = value;
    } else if (name.compare("Cud1_1311r_LNP") == 0) {
        Cud1_1311r_LNP = value;
    } else if (name.compare("Cud1_1312r_LNP") == 0) {
        Cud1_1312r_LNP = value;
    } else if (name.compare("Cud1_1313r_LNP") == 0) {
        Cud1_1313r_LNP = value;
    } else if (name.compare("Cud1_1321r_LNP") == 0) {
        Cud1_1321r_LNP = value;
    } else if (name.compare("Cud1_1322r_LNP") == 0) {
        Cud1_1322r_LNP = value;
    } else if (name.compare("Cud1_1323r_LNP") == 0) {
        Cud1_1323r_LNP = value;
    } else if (name.compare("Cud1_1331r_LNP") == 0) {
        Cud1_1331r_LNP = value;
    } else if (name.compare("Cud1_1332r_LNP") == 0) {
        Cud1_1332r_LNP = value;
    } else if (name.compare("Cud1_1333r_LNP") == 0) {
        Cud1_1333r_LNP = value;
    } else if (name.compare("Cud1_2211r_LNP") == 0) {
        Cud1_2211r_LNP = value;
    } else if (name.compare("Cud1_2212r_LNP") == 0) {
        Cud1_2212r_LNP = value;
    } else if (name.compare("Cud1_2213r_LNP") == 0) {
        Cud1_2213r_LNP = value;
    } else if (name.compare("Cud1_2222r_LNP") == 0) {
        Cud1_2222r_LNP = value;
    } else if (name.compare("Cud1_2223r_LNP") == 0) {
        Cud1_2223r_LNP = value;
    } else if (name.compare("Cud1_2233r_LNP") == 0) {
        Cud1_2233r_LNP = value;
    } else if (name.compare("Cud1_2311r_LNP") == 0) {
        Cud1_2311r_LNP = value;
    } else if (name.compare("Cud1_2312r_LNP") == 0) {
        Cud1_2312r_LNP = value;
    } else if (name.compare("Cud1_2313r_LNP") == 0) {
        Cud1_2313r_LNP = value;
    } else if (name.compare("Cud1_2321r_LNP") == 0) {
        Cud1_2321r_LNP = value;
    } else if (name.compare("Cud1_2322r_LNP") == 0) {
        Cud1_2322r_LNP = value;
    } else if (name.compare("Cud1_2323r_LNP") == 0) {
        Cud1_2323r_LNP = value;
    } else if (name.compare("Cud1_2331r_LNP") == 0) {
        Cud1_2331r_LNP = value;
    } else if (name.compare("Cud1_2332r_LNP") == 0) {
        Cud1_2332r_LNP = value;
    } else if (name.compare("Cud1_2333r_LNP") == 0) {
        Cud1_2333r_LNP = value;
    } else if (name.compare("Cud1_3311r_LNP") == 0) {
        Cud1_3311r_LNP = value;
    } else if (name.compare("Cud1_3312r_LNP") == 0) {
        Cud1_3312r_LNP = value;
    } else if (name.compare("Cud1_3313r_LNP") == 0) {
        Cud1_3313r_LNP = value;
    } else if (name.compare("Cud1_3322r_LNP") == 0) {
        Cud1_3322r_LNP = value;
    } else if (name.compare("Cud1_3323r_LNP") == 0) {
        Cud1_3323r_LNP = value;
    } else if (name.compare("Cud1_3333r_LNP") == 0) {
        Cud1_3333r_LNP = value;
    } else if (name.compare("Cud1_1112i_LNP") == 0) {
        Cud1_1112i_LNP = value;
    } else if (name.compare("Cud1_1113i_LNP") == 0) {
        Cud1_1113i_LNP = value;
    } else if (name.compare("Cud1_1123i_LNP") == 0) {
        Cud1_1123i_LNP = value;
    } else if (name.compare("Cud1_1211i_LNP") == 0) {
        Cud1_1211i_LNP = value;
    } else if (name.compare("Cud1_1212i_LNP") == 0) {
        Cud1_1212i_LNP = value;
    } else if (name.compare("Cud1_1213i_LNP") == 0) {
        Cud1_1213i_LNP = value;
    } else if (name.compare("Cud1_1221i_LNP") == 0) {
        Cud1_1221i_LNP = value;
    } else if (name.compare("Cud1_1222i_LNP") == 0) {
        Cud1_1222i_LNP = value;
    } else if (name.compare("Cud1_1223i_LNP") == 0) {
        Cud1_1223i_LNP = value;
    } else if (name.compare("Cud1_1231i_LNP") == 0) {
        Cud1_1231i_LNP = value;
    } else if (name.compare("Cud1_1232i_LNP") == 0) {
        Cud1_1232i_LNP = value;
    } else if (name.compare("Cud1_1233i_LNP") == 0) {
        Cud1_1233i_LNP = value;
    } else if (name.compare("Cud1_1311i_LNP") == 0) {
        Cud1_1311i_LNP = value;
    } else if (name.compare("Cud1_1312i_LNP") == 0) {
        Cud1_1312i_LNP = value;
    } else if (name.compare("Cud1_1313i_LNP") == 0) {
        Cud1_1313i_LNP = value;
    } else if (name.compare("Cud1_1321i_LNP") == 0) {
        Cud1_1321i_LNP = value;
    } else if (name.compare("Cud1_1322i_LNP") == 0) {
        Cud1_1322i_LNP = value;
    } else if (name.compare("Cud1_1323i_LNP") == 0) {
        Cud1_1323i_LNP = value;
    } else if (name.compare("Cud1_1331i_LNP") == 0) {
        Cud1_1331i_LNP = value;
    } else if (name.compare("Cud1_1332i_LNP") == 0) {
        Cud1_1332i_LNP = value;
    } else if (name.compare("Cud1_1333i_LNP") == 0) {
        Cud1_1333i_LNP = value;
    } else if (name.compare("Cud1_2212i_LNP") == 0) {
        Cud1_2212i_LNP = value;
    } else if (name.compare("Cud1_2213i_LNP") == 0) {
        Cud1_2213i_LNP = value;
    } else if (name.compare("Cud1_2223i_LNP") == 0) {
        Cud1_2223i_LNP = value;
    } else if (name.compare("Cud1_2311i_LNP") == 0) {
        Cud1_2311i_LNP = value;
    } else if (name.compare("Cud1_2312i_LNP") == 0) {
        Cud1_2312i_LNP = value;
    } else if (name.compare("Cud1_2313i_LNP") == 0) {
        Cud1_2313i_LNP = value;
    } else if (name.compare("Cud1_2321i_LNP") == 0) {
        Cud1_2321i_LNP = value;
    } else if (name.compare("Cud1_2322i_LNP") == 0) {
        Cud1_2322i_LNP = value;
    } else if (name.compare("Cud1_2323i_LNP") == 0) {
        Cud1_2323i_LNP = value;
    } else if (name.compare("Cud1_2331i_LNP") == 0) {
        Cud1_2331i_LNP = value;
    } else if (name.compare("Cud1_2332i_LNP") == 0) {
        Cud1_2332i_LNP = value;
    } else if (name.compare("Cud1_2333i_LNP") == 0) {
        Cud1_2333i_LNP = value;
    } else if (name.compare("Cud1_3312i_LNP") == 0) {
        Cud1_3312i_LNP = value;
    } else if (name.compare("Cud1_3313i_LNP") == 0) {
        Cud1_3313i_LNP = value;
    } else if (name.compare("Cud1_3323i_LNP") == 0) {
        Cud1_3323i_LNP = value;
    } else if (name.compare("Cud8_1111r_LNP") == 0) {
        Cud8_1111r_LNP = value;
    } else if (name.compare("Cud8_1112r_LNP") == 0) {
        Cud8_1112r_LNP = value;
    } else if (name.compare("Cud8_1113r_LNP") == 0) {
        Cud8_1113r_LNP = value;
    } else if (name.compare("Cud8_1122r_LNP") == 0) {
        Cud8_1122r_LNP = value;
    } else if (name.compare("Cud8_1123r_LNP") == 0) {
        Cud8_1123r_LNP = value;
    } else if (name.compare("Cud8_1133r_LNP") == 0) {
        Cud8_1133r_LNP = value;
    } else if (name.compare("Cud8_1211r_LNP") == 0) {
        Cud8_1211r_LNP = value;
    } else if (name.compare("Cud8_1212r_LNP") == 0) {
        Cud8_1212r_LNP = value;
    } else if (name.compare("Cud8_1213r_LNP") == 0) {
        Cud8_1213r_LNP = value;
    } else if (name.compare("Cud8_1221r_LNP") == 0) {
        Cud8_1221r_LNP = value;
    } else if (name.compare("Cud8_1222r_LNP") == 0) {
        Cud8_1222r_LNP = value;
    } else if (name.compare("Cud8_1223r_LNP") == 0) {
        Cud8_1223r_LNP = value;
    } else if (name.compare("Cud8_1231r_LNP") == 0) {
        Cud8_1231r_LNP = value;
    } else if (name.compare("Cud8_1232r_LNP") == 0) {
        Cud8_1232r_LNP = value;
    } else if (name.compare("Cud8_1233r_LNP") == 0) {
        Cud8_1233r_LNP = value;
    } else if (name.compare("Cud8_1311r_LNP") == 0) {
        Cud8_1311r_LNP = value;
    } else if (name.compare("Cud8_1312r_LNP") == 0) {
        Cud8_1312r_LNP = value;
    } else if (name.compare("Cud8_1313r_LNP") == 0) {
        Cud8_1313r_LNP = value;
    } else if (name.compare("Cud8_1321r_LNP") == 0) {
        Cud8_1321r_LNP = value;
    } else if (name.compare("Cud8_1322r_LNP") == 0) {
        Cud8_1322r_LNP = value;
    } else if (name.compare("Cud8_1323r_LNP") == 0) {
        Cud8_1323r_LNP = value;
    } else if (name.compare("Cud8_1331r_LNP") == 0) {
        Cud8_1331r_LNP = value;
    } else if (name.compare("Cud8_1332r_LNP") == 0) {
        Cud8_1332r_LNP = value;
    } else if (name.compare("Cud8_1333r_LNP") == 0) {
        Cud8_1333r_LNP = value;
    } else if (name.compare("Cud8_2211r_LNP") == 0) {
        Cud8_2211r_LNP = value;
    } else if (name.compare("Cud8_2212r_LNP") == 0) {
        Cud8_2212r_LNP = value;
    } else if (name.compare("Cud8_2213r_LNP") == 0) {
        Cud8_2213r_LNP = value;
    } else if (name.compare("Cud8_2222r_LNP") == 0) {
        Cud8_2222r_LNP = value;
    } else if (name.compare("Cud8_2223r_LNP") == 0) {
        Cud8_2223r_LNP = value;
    } else if (name.compare("Cud8_2233r_LNP") == 0) {
        Cud8_2233r_LNP = value;
    } else if (name.compare("Cud8_2311r_LNP") == 0) {
        Cud8_2311r_LNP = value;
    } else if (name.compare("Cud8_2312r_LNP") == 0) {
        Cud8_2312r_LNP = value;
    } else if (name.compare("Cud8_2313r_LNP") == 0) {
        Cud8_2313r_LNP = value;
    } else if (name.compare("Cud8_2321r_LNP") == 0) {
        Cud8_2321r_LNP = value;
    } else if (name.compare("Cud8_2322r_LNP") == 0) {
        Cud8_2322r_LNP = value;
    } else if (name.compare("Cud8_2323r_LNP") == 0) {
        Cud8_2323r_LNP = value;
    } else if (name.compare("Cud8_2331r_LNP") == 0) {
        Cud8_2331r_LNP = value;
    } else if (name.compare("Cud8_2332r_LNP") == 0) {
        Cud8_2332r_LNP = value;
    } else if (name.compare("Cud8_2333r_LNP") == 0) {
        Cud8_2333r_LNP = value;
    } else if (name.compare("Cud8_3311r_LNP") == 0) {
        Cud8_3311r_LNP = value;
    } else if (name.compare("Cud8_3312r_LNP") == 0) {
        Cud8_3312r_LNP = value;
    } else if (name.compare("Cud8_3313r_LNP") == 0) {
        Cud8_3313r_LNP = value;
    } else if (name.compare("Cud8_3322r_LNP") == 0) {
        Cud8_3322r_LNP = value;
    } else if (name.compare("Cud8_3323r_LNP") == 0) {
        Cud8_3323r_LNP = value;
    } else if (name.compare("Cud8_3333r_LNP") == 0) {
        Cud8_3333r_LNP = value;
    } else if (name.compare("Cud8_1112i_LNP") == 0) {
        Cud8_1112i_LNP = value;
    } else if (name.compare("Cud8_1113i_LNP") == 0) {
        Cud8_1113i_LNP = value;
    } else if (name.compare("Cud8_1123i_LNP") == 0) {
        Cud8_1123i_LNP = value;
    } else if (name.compare("Cud8_1211i_LNP") == 0) {
        Cud8_1211i_LNP = value;
    } else if (name.compare("Cud8_1212i_LNP") == 0) {
        Cud8_1212i_LNP = value;
    } else if (name.compare("Cud8_1213i_LNP") == 0) {
        Cud8_1213i_LNP = value;
    } else if (name.compare("Cud8_1221i_LNP") == 0) {
        Cud8_1221i_LNP = value;
    } else if (name.compare("Cud8_1222i_LNP") == 0) {
        Cud8_1222i_LNP = value;
    } else if (name.compare("Cud8_1223i_LNP") == 0) {
        Cud8_1223i_LNP = value;
    } else if (name.compare("Cud8_1231i_LNP") == 0) {
        Cud8_1231i_LNP = value;
    } else if (name.compare("Cud8_1232i_LNP") == 0) {
        Cud8_1232i_LNP = value;
    } else if (name.compare("Cud8_1233i_LNP") == 0) {
        Cud8_1233i_LNP = value;
    } else if (name.compare("Cud8_1311i_LNP") == 0) {
        Cud8_1311i_LNP = value;
    } else if (name.compare("Cud8_1312i_LNP") == 0) {
        Cud8_1312i_LNP = value;
    } else if (name.compare("Cud8_1313i_LNP") == 0) {
        Cud8_1313i_LNP = value;
    } else if (name.compare("Cud8_1321i_LNP") == 0) {
        Cud8_1321i_LNP = value;
    } else if (name.compare("Cud8_1322i_LNP") == 0) {
        Cud8_1322i_LNP = value;
    } else if (name.compare("Cud8_1323i_LNP") == 0) {
        Cud8_1323i_LNP = value;
    } else if (name.compare("Cud8_1331i_LNP") == 0) {
        Cud8_1331i_LNP = value;
    } else if (name.compare("Cud8_1332i_LNP") == 0) {
        Cud8_1332i_LNP = value;
    } else if (name.compare("Cud8_1333i_LNP") == 0) {
        Cud8_1333i_LNP = value;
    } else if (name.compare("Cud8_2212i_LNP") == 0) {
        Cud8_2212i_LNP = value;
    } else if (name.compare("Cud8_2213i_LNP") == 0) {
        Cud8_2213i_LNP = value;
    } else if (name.compare("Cud8_2223i_LNP") == 0) {
        Cud8_2223i_LNP = value;
    } else if (name.compare("Cud8_2311i_LNP") == 0) {
        Cud8_2311i_LNP = value;
    } else if (name.compare("Cud8_2312i_LNP") == 0) {
        Cud8_2312i_LNP = value;
    } else if (name.compare("Cud8_2313i_LNP") == 0) {
        Cud8_2313i_LNP = value;
    } else if (name.compare("Cud8_2321i_LNP") == 0) {
        Cud8_2321i_LNP = value;
    } else if (name.compare("Cud8_2322i_LNP") == 0) {
        Cud8_2322i_LNP = value;
    } else if (name.compare("Cud8_2323i_LNP") == 0) {
        Cud8_2323i_LNP = value;
    } else if (name.compare("Cud8_2331i_LNP") == 0) {
        Cud8_2331i_LNP = value;
    } else if (name.compare("Cud8_2332i_LNP") == 0) {
        Cud8_2332i_LNP = value;
    } else if (name.compare("Cud8_2333i_LNP") == 0) {
        Cud8_2333i_LNP = value;
    } else if (name.compare("Cud8_3312i_LNP") == 0) {
        Cud8_3312i_LNP = value;
    } else if (name.compare("Cud8_3313i_LNP") == 0) {
        Cud8_3313i_LNP = value;
    } else if (name.compare("Cud8_3323i_LNP") == 0) {
        Cud8_3323i_LNP = value;
    } else if (name.compare("Cqu1_1111r_LNP") == 0) {
        Cqu1_1111r_LNP = value;
    } else if (name.compare("Cqu1_1112r_LNP") == 0) {
        Cqu1_1112r_LNP = value;
    } else if (name.compare("Cqu1_1113r_LNP") == 0) {
        Cqu1_1113r_LNP = value;
    } else if (name.compare("Cqu1_1122r_LNP") == 0) {
        Cqu1_1122r_LNP = value;
    } else if (name.compare("Cqu1_1123r_LNP") == 0) {
        Cqu1_1123r_LNP = value;
    } else if (name.compare("Cqu1_1133r_LNP") == 0) {
        Cqu1_1133r_LNP = value;
    } else if (name.compare("Cqu1_1211r_LNP") == 0) {
        Cqu1_1211r_LNP = value;
    } else if (name.compare("Cqu1_1212r_LNP") == 0) {
        Cqu1_1212r_LNP = value;
    } else if (name.compare("Cqu1_1213r_LNP") == 0) {
        Cqu1_1213r_LNP = value;
    } else if (name.compare("Cqu1_1221r_LNP") == 0) {
        Cqu1_1221r_LNP = value;
    } else if (name.compare("Cqu1_1222r_LNP") == 0) {
        Cqu1_1222r_LNP = value;
    } else if (name.compare("Cqu1_1223r_LNP") == 0) {
        Cqu1_1223r_LNP = value;
    } else if (name.compare("Cqu1_1231r_LNP") == 0) {
        Cqu1_1231r_LNP = value;
    } else if (name.compare("Cqu1_1232r_LNP") == 0) {
        Cqu1_1232r_LNP = value;
    } else if (name.compare("Cqu1_1233r_LNP") == 0) {
        Cqu1_1233r_LNP = value;
    } else if (name.compare("Cqu1_1311r_LNP") == 0) {
        Cqu1_1311r_LNP = value;
    } else if (name.compare("Cqu1_1312r_LNP") == 0) {
        Cqu1_1312r_LNP = value;
    } else if (name.compare("Cqu1_1313r_LNP") == 0) {
        Cqu1_1313r_LNP = value;
    } else if (name.compare("Cqu1_1321r_LNP") == 0) {
        Cqu1_1321r_LNP = value;
    } else if (name.compare("Cqu1_1322r_LNP") == 0) {
        Cqu1_1322r_LNP = value;
    } else if (name.compare("Cqu1_1323r_LNP") == 0) {
        Cqu1_1323r_LNP = value;
    } else if (name.compare("Cqu1_1331r_LNP") == 0) {
        Cqu1_1331r_LNP = value;
    } else if (name.compare("Cqu1_1332r_LNP") == 0) {
        Cqu1_1332r_LNP = value;
    } else if (name.compare("Cqu1_1333r_LNP") == 0) {
        Cqu1_1333r_LNP = value;
    } else if (name.compare("Cqu1_2211r_LNP") == 0) {
        Cqu1_2211r_LNP = value;
    } else if (name.compare("Cqu1_2212r_LNP") == 0) {
        Cqu1_2212r_LNP = value;
    } else if (name.compare("Cqu1_2213r_LNP") == 0) {
        Cqu1_2213r_LNP = value;
    } else if (name.compare("Cqu1_2222r_LNP") == 0) {
        Cqu1_2222r_LNP = value;
    } else if (name.compare("Cqu1_2223r_LNP") == 0) {
        Cqu1_2223r_LNP = value;
    } else if (name.compare("Cqu1_2233r_LNP") == 0) {
        Cqu1_2233r_LNP = value;
    } else if (name.compare("Cqu1_2311r_LNP") == 0) {
        Cqu1_2311r_LNP = value;
    } else if (name.compare("Cqu1_2312r_LNP") == 0) {
        Cqu1_2312r_LNP = value;
    } else if (name.compare("Cqu1_2313r_LNP") == 0) {
        Cqu1_2313r_LNP = value;
    } else if (name.compare("Cqu1_2321r_LNP") == 0) {
        Cqu1_2321r_LNP = value;
    } else if (name.compare("Cqu1_2322r_LNP") == 0) {
        Cqu1_2322r_LNP = value;
    } else if (name.compare("Cqu1_2323r_LNP") == 0) {
        Cqu1_2323r_LNP = value;
    } else if (name.compare("Cqu1_2331r_LNP") == 0) {
        Cqu1_2331r_LNP = value;
    } else if (name.compare("Cqu1_2332r_LNP") == 0) {
        Cqu1_2332r_LNP = value;
    } else if (name.compare("Cqu1_2333r_LNP") == 0) {
        Cqu1_2333r_LNP = value;
    } else if (name.compare("Cqu1_3311r_LNP") == 0) {
        Cqu1_3311r_LNP = value;
    } else if (name.compare("Cqu1_3312r_LNP") == 0) {
        Cqu1_3312r_LNP = value;
    } else if (name.compare("Cqu1_3313r_LNP") == 0) {
        Cqu1_3313r_LNP = value;
    } else if (name.compare("Cqu1_3322r_LNP") == 0) {
        Cqu1_3322r_LNP = value;
    } else if (name.compare("Cqu1_3323r_LNP") == 0) {
        Cqu1_3323r_LNP = value;
    } else if (name.compare("Cqu1_3333r_LNP") == 0) {
        Cqu1_3333r_LNP = value;
    } else if (name.compare("Cqu1_1112i_LNP") == 0) {
        Cqu1_1112i_LNP = value;
    } else if (name.compare("Cqu1_1113i_LNP") == 0) {
        Cqu1_1113i_LNP = value;
    } else if (name.compare("Cqu1_1123i_LNP") == 0) {
        Cqu1_1123i_LNP = value;
    } else if (name.compare("Cqu1_1211i_LNP") == 0) {
        Cqu1_1211i_LNP = value;
    } else if (name.compare("Cqu1_1212i_LNP") == 0) {
        Cqu1_1212i_LNP = value;
    } else if (name.compare("Cqu1_1213i_LNP") == 0) {
        Cqu1_1213i_LNP = value;
    } else if (name.compare("Cqu1_1221i_LNP") == 0) {
        Cqu1_1221i_LNP = value;
    } else if (name.compare("Cqu1_1222i_LNP") == 0) {
        Cqu1_1222i_LNP = value;
    } else if (name.compare("Cqu1_1223i_LNP") == 0) {
        Cqu1_1223i_LNP = value;
    } else if (name.compare("Cqu1_1231i_LNP") == 0) {
        Cqu1_1231i_LNP = value;
    } else if (name.compare("Cqu1_1232i_LNP") == 0) {
        Cqu1_1232i_LNP = value;
    } else if (name.compare("Cqu1_1233i_LNP") == 0) {
        Cqu1_1233i_LNP = value;
    } else if (name.compare("Cqu1_1311i_LNP") == 0) {
        Cqu1_1311i_LNP = value;
    } else if (name.compare("Cqu1_1312i_LNP") == 0) {
        Cqu1_1312i_LNP = value;
    } else if (name.compare("Cqu1_1313i_LNP") == 0) {
        Cqu1_1313i_LNP = value;
    } else if (name.compare("Cqu1_1321i_LNP") == 0) {
        Cqu1_1321i_LNP = value;
    } else if (name.compare("Cqu1_1322i_LNP") == 0) {
        Cqu1_1322i_LNP = value;
    } else if (name.compare("Cqu1_1323i_LNP") == 0) {
        Cqu1_1323i_LNP = value;
    } else if (name.compare("Cqu1_1331i_LNP") == 0) {
        Cqu1_1331i_LNP = value;
    } else if (name.compare("Cqu1_1332i_LNP") == 0) {
        Cqu1_1332i_LNP = value;
    } else if (name.compare("Cqu1_1333i_LNP") == 0) {
        Cqu1_1333i_LNP = value;
    } else if (name.compare("Cqu1_2212i_LNP") == 0) {
        Cqu1_2212i_LNP = value;
    } else if (name.compare("Cqu1_2213i_LNP") == 0) {
        Cqu1_2213i_LNP = value;
    } else if (name.compare("Cqu1_2223i_LNP") == 0) {
        Cqu1_2223i_LNP = value;
    } else if (name.compare("Cqu1_2311i_LNP") == 0) {
        Cqu1_2311i_LNP = value;
    } else if (name.compare("Cqu1_2312i_LNP") == 0) {
        Cqu1_2312i_LNP = value;
    } else if (name.compare("Cqu1_2313i_LNP") == 0) {
        Cqu1_2313i_LNP = value;
    } else if (name.compare("Cqu1_2321i_LNP") == 0) {
        Cqu1_2321i_LNP = value;
    } else if (name.compare("Cqu1_2322i_LNP") == 0) {
        Cqu1_2322i_LNP = value;
    } else if (name.compare("Cqu1_2323i_LNP") == 0) {
        Cqu1_2323i_LNP = value;
    } else if (name.compare("Cqu1_2331i_LNP") == 0) {
        Cqu1_2331i_LNP = value;
    } else if (name.compare("Cqu1_2332i_LNP") == 0) {
        Cqu1_2332i_LNP = value;
    } else if (name.compare("Cqu1_2333i_LNP") == 0) {
        Cqu1_2333i_LNP = value;
    } else if (name.compare("Cqu1_3312i_LNP") == 0) {
        Cqu1_3312i_LNP = value;
    } else if (name.compare("Cqu1_3313i_LNP") == 0) {
        Cqu1_3313i_LNP = value;
    } else if (name.compare("Cqu1_3323i_LNP") == 0) {
        Cqu1_3323i_LNP = value;
    } else if (name.compare("Cqu8_1111r_LNP") == 0) {
        Cqu8_1111r_LNP = value;
    } else if (name.compare("Cqu8_1112r_LNP") == 0) {
        Cqu8_1112r_LNP = value;
    } else if (name.compare("Cqu8_1113r_LNP") == 0) {
        Cqu8_1113r_LNP = value;
    } else if (name.compare("Cqu8_1122r_LNP") == 0) {
        Cqu8_1122r_LNP = value;
    } else if (name.compare("Cqu8_1123r_LNP") == 0) {
        Cqu8_1123r_LNP = value;
    } else if (name.compare("Cqu8_1133r_LNP") == 0) {
        Cqu8_1133r_LNP = value;
    } else if (name.compare("Cqu8_1211r_LNP") == 0) {
        Cqu8_1211r_LNP = value;
    } else if (name.compare("Cqu8_1212r_LNP") == 0) {
        Cqu8_1212r_LNP = value;
    } else if (name.compare("Cqu8_1213r_LNP") == 0) {
        Cqu8_1213r_LNP = value;
    } else if (name.compare("Cqu8_1221r_LNP") == 0) {
        Cqu8_1221r_LNP = value;
    } else if (name.compare("Cqu8_1222r_LNP") == 0) {
        Cqu8_1222r_LNP = value;
    } else if (name.compare("Cqu8_1223r_LNP") == 0) {
        Cqu8_1223r_LNP = value;
    } else if (name.compare("Cqu8_1231r_LNP") == 0) {
        Cqu8_1231r_LNP = value;
    } else if (name.compare("Cqu8_1232r_LNP") == 0) {
        Cqu8_1232r_LNP = value;
    } else if (name.compare("Cqu8_1233r_LNP") == 0) {
        Cqu8_1233r_LNP = value;
    } else if (name.compare("Cqu8_1311r_LNP") == 0) {
        Cqu8_1311r_LNP = value;
    } else if (name.compare("Cqu8_1312r_LNP") == 0) {
        Cqu8_1312r_LNP = value;
    } else if (name.compare("Cqu8_1313r_LNP") == 0) {
        Cqu8_1313r_LNP = value;
    } else if (name.compare("Cqu8_1321r_LNP") == 0) {
        Cqu8_1321r_LNP = value;
    } else if (name.compare("Cqu8_1322r_LNP") == 0) {
        Cqu8_1322r_LNP = value;
    } else if (name.compare("Cqu8_1323r_LNP") == 0) {
        Cqu8_1323r_LNP = value;
    } else if (name.compare("Cqu8_1331r_LNP") == 0) {
        Cqu8_1331r_LNP = value;
    } else if (name.compare("Cqu8_1332r_LNP") == 0) {
        Cqu8_1332r_LNP = value;
    } else if (name.compare("Cqu8_1333r_LNP") == 0) {
        Cqu8_1333r_LNP = value;
    } else if (name.compare("Cqu8_2211r_LNP") == 0) {
        Cqu8_2211r_LNP = value;
    } else if (name.compare("Cqu8_2212r_LNP") == 0) {
        Cqu8_2212r_LNP = value;
    } else if (name.compare("Cqu8_2213r_LNP") == 0) {
        Cqu8_2213r_LNP = value;
    } else if (name.compare("Cqu8_2222r_LNP") == 0) {
        Cqu8_2222r_LNP = value;
    } else if (name.compare("Cqu8_2223r_LNP") == 0) {
        Cqu8_2223r_LNP = value;
    } else if (name.compare("Cqu8_2233r_LNP") == 0) {
        Cqu8_2233r_LNP = value;
    } else if (name.compare("Cqu8_2311r_LNP") == 0) {
        Cqu8_2311r_LNP = value;
    } else if (name.compare("Cqu8_2312r_LNP") == 0) {
        Cqu8_2312r_LNP = value;
    } else if (name.compare("Cqu8_2313r_LNP") == 0) {
        Cqu8_2313r_LNP = value;
    } else if (name.compare("Cqu8_2321r_LNP") == 0) {
        Cqu8_2321r_LNP = value;
    } else if (name.compare("Cqu8_2322r_LNP") == 0) {
        Cqu8_2322r_LNP = value;
    } else if (name.compare("Cqu8_2323r_LNP") == 0) {
        Cqu8_2323r_LNP = value;
    } else if (name.compare("Cqu8_2331r_LNP") == 0) {
        Cqu8_2331r_LNP = value;
    } else if (name.compare("Cqu8_2332r_LNP") == 0) {
        Cqu8_2332r_LNP = value;
    } else if (name.compare("Cqu8_2333r_LNP") == 0) {
        Cqu8_2333r_LNP = value;
    } else if (name.compare("Cqu8_3311r_LNP") == 0) {
        Cqu8_3311r_LNP = value;
    } else if (name.compare("Cqu8_3312r_LNP") == 0) {
        Cqu8_3312r_LNP = value;
    } else if (name.compare("Cqu8_3313r_LNP") == 0) {
        Cqu8_3313r_LNP = value;
    } else if (name.compare("Cqu8_3322r_LNP") == 0) {
        Cqu8_3322r_LNP = value;
    } else if (name.compare("Cqu8_3323r_LNP") == 0) {
        Cqu8_3323r_LNP = value;
    } else if (name.compare("Cqu8_3333r_LNP") == 0) {
        Cqu8_3333r_LNP = value;
    } else if (name.compare("Cqu8_1112i_LNP") == 0) {
        Cqu8_1112i_LNP = value;
    } else if (name.compare("Cqu8_1113i_LNP") == 0) {
        Cqu8_1113i_LNP = value;
    } else if (name.compare("Cqu8_1123i_LNP") == 0) {
        Cqu8_1123i_LNP = value;
    } else if (name.compare("Cqu8_1211i_LNP") == 0) {
        Cqu8_1211i_LNP = value;
    } else if (name.compare("Cqu8_1212i_LNP") == 0) {
        Cqu8_1212i_LNP = value;
    } else if (name.compare("Cqu8_1213i_LNP") == 0) {
        Cqu8_1213i_LNP = value;
    } else if (name.compare("Cqu8_1221i_LNP") == 0) {
        Cqu8_1221i_LNP = value;
    } else if (name.compare("Cqu8_1222i_LNP") == 0) {
        Cqu8_1222i_LNP = value;
    } else if (name.compare("Cqu8_1223i_LNP") == 0) {
        Cqu8_1223i_LNP = value;
    } else if (name.compare("Cqu8_1231i_LNP") == 0) {
        Cqu8_1231i_LNP = value;
    } else if (name.compare("Cqu8_1232i_LNP") == 0) {
        Cqu8_1232i_LNP = value;
    } else if (name.compare("Cqu8_1233i_LNP") == 0) {
        Cqu8_1233i_LNP = value;
    } else if (name.compare("Cqu8_1311i_LNP") == 0) {
        Cqu8_1311i_LNP = value;
    } else if (name.compare("Cqu8_1312i_LNP") == 0) {
        Cqu8_1312i_LNP = value;
    } else if (name.compare("Cqu8_1313i_LNP") == 0) {
        Cqu8_1313i_LNP = value;
    } else if (name.compare("Cqu8_1321i_LNP") == 0) {
        Cqu8_1321i_LNP = value;
    } else if (name.compare("Cqu8_1322i_LNP") == 0) {
        Cqu8_1322i_LNP = value;
    } else if (name.compare("Cqu8_1323i_LNP") == 0) {
        Cqu8_1323i_LNP = value;
    } else if (name.compare("Cqu8_1331i_LNP") == 0) {
        Cqu8_1331i_LNP = value;
    } else if (name.compare("Cqu8_1332i_LNP") == 0) {
        Cqu8_1332i_LNP = value;
    } else if (name.compare("Cqu8_1333i_LNP") == 0) {
        Cqu8_1333i_LNP = value;
    } else if (name.compare("Cqu8_2212i_LNP") == 0) {
        Cqu8_2212i_LNP = value;
    } else if (name.compare("Cqu8_2213i_LNP") == 0) {
        Cqu8_2213i_LNP = value;
    } else if (name.compare("Cqu8_2223i_LNP") == 0) {
        Cqu8_2223i_LNP = value;
    } else if (name.compare("Cqu8_2311i_LNP") == 0) {
        Cqu8_2311i_LNP = value;
    } else if (name.compare("Cqu8_2312i_LNP") == 0) {
        Cqu8_2312i_LNP = value;
    } else if (name.compare("Cqu8_2313i_LNP") == 0) {
        Cqu8_2313i_LNP = value;
    } else if (name.compare("Cqu8_2321i_LNP") == 0) {
        Cqu8_2321i_LNP = value;
    } else if (name.compare("Cqu8_2322i_LNP") == 0) {
        Cqu8_2322i_LNP = value;
    } else if (name.compare("Cqu8_2323i_LNP") == 0) {
        Cqu8_2323i_LNP = value;
    } else if (name.compare("Cqu8_2331i_LNP") == 0) {
        Cqu8_2331i_LNP = value;
    } else if (name.compare("Cqu8_2332i_LNP") == 0) {
        Cqu8_2332i_LNP = value;
    } else if (name.compare("Cqu8_2333i_LNP") == 0) {
        Cqu8_2333i_LNP = value;
    } else if (name.compare("Cqu8_3312i_LNP") == 0) {
        Cqu8_3312i_LNP = value;
    } else if (name.compare("Cqu8_3313i_LNP") == 0) {
        Cqu8_3313i_LNP = value;
    } else if (name.compare("Cqu8_3323i_LNP") == 0) {
        Cqu8_3323i_LNP = value;
    } else if (name.compare("Cqd1_1111r_LNP") == 0) {
        Cqd1_1111r_LNP = value;
    } else if (name.compare("Cqd1_1112r_LNP") == 0) {
        Cqd1_1112r_LNP = value;
    } else if (name.compare("Cqd1_1113r_LNP") == 0) {
        Cqd1_1113r_LNP = value;
    } else if (name.compare("Cqd1_1122r_LNP") == 0) {
        Cqd1_1122r_LNP = value;
    } else if (name.compare("Cqd1_1123r_LNP") == 0) {
        Cqd1_1123r_LNP = value;
    } else if (name.compare("Cqd1_1133r_LNP") == 0) {
        Cqd1_1133r_LNP = value;
    } else if (name.compare("Cqd1_1211r_LNP") == 0) {
        Cqd1_1211r_LNP = value;
    } else if (name.compare("Cqd1_1212r_LNP") == 0) {
        Cqd1_1212r_LNP = value;
    } else if (name.compare("Cqd1_1213r_LNP") == 0) {
        Cqd1_1213r_LNP = value;
    } else if (name.compare("Cqd1_1221r_LNP") == 0) {
        Cqd1_1221r_LNP = value;
    } else if (name.compare("Cqd1_1222r_LNP") == 0) {
        Cqd1_1222r_LNP = value;
    } else if (name.compare("Cqd1_1223r_LNP") == 0) {
        Cqd1_1223r_LNP = value;
    } else if (name.compare("Cqd1_1231r_LNP") == 0) {
        Cqd1_1231r_LNP = value;
    } else if (name.compare("Cqd1_1232r_LNP") == 0) {
        Cqd1_1232r_LNP = value;
    } else if (name.compare("Cqd1_1233r_LNP") == 0) {
        Cqd1_1233r_LNP = value;
    } else if (name.compare("Cqd1_1311r_LNP") == 0) {
        Cqd1_1311r_LNP = value;
    } else if (name.compare("Cqd1_1312r_LNP") == 0) {
        Cqd1_1312r_LNP = value;
    } else if (name.compare("Cqd1_1313r_LNP") == 0) {
        Cqd1_1313r_LNP = value;
    } else if (name.compare("Cqd1_1321r_LNP") == 0) {
        Cqd1_1321r_LNP = value;
    } else if (name.compare("Cqd1_1322r_LNP") == 0) {
        Cqd1_1322r_LNP = value;
    } else if (name.compare("Cqd1_1323r_LNP") == 0) {
        Cqd1_1323r_LNP = value;
    } else if (name.compare("Cqd1_1331r_LNP") == 0) {
        Cqd1_1331r_LNP = value;
    } else if (name.compare("Cqd1_1332r_LNP") == 0) {
        Cqd1_1332r_LNP = value;
    } else if (name.compare("Cqd1_1333r_LNP") == 0) {
        Cqd1_1333r_LNP = value;
    } else if (name.compare("Cqd1_2211r_LNP") == 0) {
        Cqd1_2211r_LNP = value;
    } else if (name.compare("Cqd1_2212r_LNP") == 0) {
        Cqd1_2212r_LNP = value;
    } else if (name.compare("Cqd1_2213r_LNP") == 0) {
        Cqd1_2213r_LNP = value;
    } else if (name.compare("Cqd1_2222r_LNP") == 0) {
        Cqd1_2222r_LNP = value;
    } else if (name.compare("Cqd1_2223r_LNP") == 0) {
        Cqd1_2223r_LNP = value;
    } else if (name.compare("Cqd1_2233r_LNP") == 0) {
        Cqd1_2233r_LNP = value;
    } else if (name.compare("Cqd1_2311r_LNP") == 0) {
        Cqd1_2311r_LNP = value;
    } else if (name.compare("Cqd1_2312r_LNP") == 0) {
        Cqd1_2312r_LNP = value;
    } else if (name.compare("Cqd1_2313r_LNP") == 0) {
        Cqd1_2313r_LNP = value;
    } else if (name.compare("Cqd1_2321r_LNP") == 0) {
        Cqd1_2321r_LNP = value;
    } else if (name.compare("Cqd1_2322r_LNP") == 0) {
        Cqd1_2322r_LNP = value;
    } else if (name.compare("Cqd1_2323r_LNP") == 0) {
        Cqd1_2323r_LNP = value;
    } else if (name.compare("Cqd1_2331r_LNP") == 0) {
        Cqd1_2331r_LNP = value;
    } else if (name.compare("Cqd1_2332r_LNP") == 0) {
        Cqd1_2332r_LNP = value;
    } else if (name.compare("Cqd1_2333r_LNP") == 0) {
        Cqd1_2333r_LNP = value;
    } else if (name.compare("Cqd1_3311r_LNP") == 0) {
        Cqd1_3311r_LNP = value;
    } else if (name.compare("Cqd1_3312r_LNP") == 0) {
        Cqd1_3312r_LNP = value;
    } else if (name.compare("Cqd1_3313r_LNP") == 0) {
        Cqd1_3313r_LNP = value;
    } else if (name.compare("Cqd1_3322r_LNP") == 0) {
        Cqd1_3322r_LNP = value;
    } else if (name.compare("Cqd1_3323r_LNP") == 0) {
        Cqd1_3323r_LNP = value;
    } else if (name.compare("Cqd1_3333r_LNP") == 0) {
        Cqd1_3333r_LNP = value;
    } else if (name.compare("Cqd1_1112i_LNP") == 0) {
        Cqd1_1112i_LNP = value;
    } else if (name.compare("Cqd1_1113i_LNP") == 0) {
        Cqd1_1113i_LNP = value;
    } else if (name.compare("Cqd1_1123i_LNP") == 0) {
        Cqd1_1123i_LNP = value;
    } else if (name.compare("Cqd1_1211i_LNP") == 0) {
        Cqd1_1211i_LNP = value;
    } else if (name.compare("Cqd1_1212i_LNP") == 0) {
        Cqd1_1212i_LNP = value;
    } else if (name.compare("Cqd1_1213i_LNP") == 0) {
        Cqd1_1213i_LNP = value;
    } else if (name.compare("Cqd1_1221i_LNP") == 0) {
        Cqd1_1221i_LNP = value;
    } else if (name.compare("Cqd1_1222i_LNP") == 0) {
        Cqd1_1222i_LNP = value;
    } else if (name.compare("Cqd1_1223i_LNP") == 0) {
        Cqd1_1223i_LNP = value;
    } else if (name.compare("Cqd1_1231i_LNP") == 0) {
        Cqd1_1231i_LNP = value;
    } else if (name.compare("Cqd1_1232i_LNP") == 0) {
        Cqd1_1232i_LNP = value;
    } else if (name.compare("Cqd1_1233i_LNP") == 0) {
        Cqd1_1233i_LNP = value;
    } else if (name.compare("Cqd1_1311i_LNP") == 0) {
        Cqd1_1311i_LNP = value;
    } else if (name.compare("Cqd1_1312i_LNP") == 0) {
        Cqd1_1312i_LNP = value;
    } else if (name.compare("Cqd1_1313i_LNP") == 0) {
        Cqd1_1313i_LNP = value;
    } else if (name.compare("Cqd1_1321i_LNP") == 0) {
        Cqd1_1321i_LNP = value;
    } else if (name.compare("Cqd1_1322i_LNP") == 0) {
        Cqd1_1322i_LNP = value;
    } else if (name.compare("Cqd1_1323i_LNP") == 0) {
        Cqd1_1323i_LNP = value;
    } else if (name.compare("Cqd1_1331i_LNP") == 0) {
        Cqd1_1331i_LNP = value;
    } else if (name.compare("Cqd1_1332i_LNP") == 0) {
        Cqd1_1332i_LNP = value;
    } else if (name.compare("Cqd1_1333i_LNP") == 0) {
        Cqd1_1333i_LNP = value;
    } else if (name.compare("Cqd1_2212i_LNP") == 0) {
        Cqd1_2212i_LNP = value;
    } else if (name.compare("Cqd1_2213i_LNP") == 0) {
        Cqd1_2213i_LNP = value;
    } else if (name.compare("Cqd1_2223i_LNP") == 0) {
        Cqd1_2223i_LNP = value;
    } else if (name.compare("Cqd1_2311i_LNP") == 0) {
        Cqd1_2311i_LNP = value;
    } else if (name.compare("Cqd1_2312i_LNP") == 0) {
        Cqd1_2312i_LNP = value;
    } else if (name.compare("Cqd1_2313i_LNP") == 0) {
        Cqd1_2313i_LNP = value;
    } else if (name.compare("Cqd1_2321i_LNP") == 0) {
        Cqd1_2321i_LNP = value;
    } else if (name.compare("Cqd1_2322i_LNP") == 0) {
        Cqd1_2322i_LNP = value;
    } else if (name.compare("Cqd1_2323i_LNP") == 0) {
        Cqd1_2323i_LNP = value;
    } else if (name.compare("Cqd1_2331i_LNP") == 0) {
        Cqd1_2331i_LNP = value;
    } else if (name.compare("Cqd1_2332i_LNP") == 0) {
        Cqd1_2332i_LNP = value;
    } else if (name.compare("Cqd1_2333i_LNP") == 0) {
        Cqd1_2333i_LNP = value;
    } else if (name.compare("Cqd1_3312i_LNP") == 0) {
        Cqd1_3312i_LNP = value;
    } else if (name.compare("Cqd1_3313i_LNP") == 0) {
        Cqd1_3313i_LNP = value;
    } else if (name.compare("Cqd1_3323i_LNP") == 0) {
        Cqd1_3323i_LNP = value;
    } else if (name.compare("Cqd8_1111r_LNP") == 0) {
        Cqd8_1111r_LNP = value;
    } else if (name.compare("Cqd8_1112r_LNP") == 0) {
        Cqd8_1112r_LNP = value;
    } else if (name.compare("Cqd8_1113r_LNP") == 0) {
        Cqd8_1113r_LNP = value;
    } else if (name.compare("Cqd8_1122r_LNP") == 0) {
        Cqd8_1122r_LNP = value;
    } else if (name.compare("Cqd8_1123r_LNP") == 0) {
        Cqd8_1123r_LNP = value;
    } else if (name.compare("Cqd8_1133r_LNP") == 0) {
        Cqd8_1133r_LNP = value;
    } else if (name.compare("Cqd8_1211r_LNP") == 0) {
        Cqd8_1211r_LNP = value;
    } else if (name.compare("Cqd8_1212r_LNP") == 0) {
        Cqd8_1212r_LNP = value;
    } else if (name.compare("Cqd8_1213r_LNP") == 0) {
        Cqd8_1213r_LNP = value;
    } else if (name.compare("Cqd8_1221r_LNP") == 0) {
        Cqd8_1221r_LNP = value;
    } else if (name.compare("Cqd8_1222r_LNP") == 0) {
        Cqd8_1222r_LNP = value;
    } else if (name.compare("Cqd8_1223r_LNP") == 0) {
        Cqd8_1223r_LNP = value;
    } else if (name.compare("Cqd8_1231r_LNP") == 0) {
        Cqd8_1231r_LNP = value;
    } else if (name.compare("Cqd8_1232r_LNP") == 0) {
        Cqd8_1232r_LNP = value;
    } else if (name.compare("Cqd8_1233r_LNP") == 0) {
        Cqd8_1233r_LNP = value;
    } else if (name.compare("Cqd8_1311r_LNP") == 0) {
        Cqd8_1311r_LNP = value;
    } else if (name.compare("Cqd8_1312r_LNP") == 0) {
        Cqd8_1312r_LNP = value;
    } else if (name.compare("Cqd8_1313r_LNP") == 0) {
        Cqd8_1313r_LNP = value;
    } else if (name.compare("Cqd8_1321r_LNP") == 0) {
        Cqd8_1321r_LNP = value;
    } else if (name.compare("Cqd8_1322r_LNP") == 0) {
        Cqd8_1322r_LNP = value;
    } else if (name.compare("Cqd8_1323r_LNP") == 0) {
        Cqd8_1323r_LNP = value;
    } else if (name.compare("Cqd8_1331r_LNP") == 0) {
        Cqd8_1331r_LNP = value;
    } else if (name.compare("Cqd8_1332r_LNP") == 0) {
        Cqd8_1332r_LNP = value;
    } else if (name.compare("Cqd8_1333r_LNP") == 0) {
        Cqd8_1333r_LNP = value;
    } else if (name.compare("Cqd8_2211r_LNP") == 0) {
        Cqd8_2211r_LNP = value;
    } else if (name.compare("Cqd8_2212r_LNP") == 0) {
        Cqd8_2212r_LNP = value;
    } else if (name.compare("Cqd8_2213r_LNP") == 0) {
        Cqd8_2213r_LNP = value;
    } else if (name.compare("Cqd8_2222r_LNP") == 0) {
        Cqd8_2222r_LNP = value;
    } else if (name.compare("Cqd8_2223r_LNP") == 0) {
        Cqd8_2223r_LNP = value;
    } else if (name.compare("Cqd8_2233r_LNP") == 0) {
        Cqd8_2233r_LNP = value;
    } else if (name.compare("Cqd8_2311r_LNP") == 0) {
        Cqd8_2311r_LNP = value;
    } else if (name.compare("Cqd8_2312r_LNP") == 0) {
        Cqd8_2312r_LNP = value;
    } else if (name.compare("Cqd8_2313r_LNP") == 0) {
        Cqd8_2313r_LNP = value;
    } else if (name.compare("Cqd8_2321r_LNP") == 0) {
        Cqd8_2321r_LNP = value;
    } else if (name.compare("Cqd8_2322r_LNP") == 0) {
        Cqd8_2322r_LNP = value;
    } else if (name.compare("Cqd8_2323r_LNP") == 0) {
        Cqd8_2323r_LNP = value;
    } else if (name.compare("Cqd8_2331r_LNP") == 0) {
        Cqd8_2331r_LNP = value;
    } else if (name.compare("Cqd8_2332r_LNP") == 0) {
        Cqd8_2332r_LNP = value;
    } else if (name.compare("Cqd8_2333r_LNP") == 0) {
        Cqd8_2333r_LNP = value;
    } else if (name.compare("Cqd8_3311r_LNP") == 0) {
        Cqd8_3311r_LNP = value;
    } else if (name.compare("Cqd8_3312r_LNP") == 0) {
        Cqd8_3312r_LNP = value;
    } else if (name.compare("Cqd8_3313r_LNP") == 0) {
        Cqd8_3313r_LNP = value;
    } else if (name.compare("Cqd8_3322r_LNP") == 0) {
        Cqd8_3322r_LNP = value;
    } else if (name.compare("Cqd8_3323r_LNP") == 0) {
        Cqd8_3323r_LNP = value;
    } else if (name.compare("Cqd8_3333r_LNP") == 0) {
        Cqd8_3333r_LNP = value;
    } else if (name.compare("Cqd8_1112i_LNP") == 0) {
        Cqd8_1112i_LNP = value;
    } else if (name.compare("Cqd8_1113i_LNP") == 0) {
        Cqd8_1113i_LNP = value;
    } else if (name.compare("Cqd8_1123i_LNP") == 0) {
        Cqd8_1123i_LNP = value;
    } else if (name.compare("Cqd8_1211i_LNP") == 0) {
        Cqd8_1211i_LNP = value;
    } else if (name.compare("Cqd8_1212i_LNP") == 0) {
        Cqd8_1212i_LNP = value;
    } else if (name.compare("Cqd8_1213i_LNP") == 0) {
        Cqd8_1213i_LNP = value;
    } else if (name.compare("Cqd8_1221i_LNP") == 0) {
        Cqd8_1221i_LNP = value;
    } else if (name.compare("Cqd8_1222i_LNP") == 0) {
        Cqd8_1222i_LNP = value;
    } else if (name.compare("Cqd8_1223i_LNP") == 0) {
        Cqd8_1223i_LNP = value;
    } else if (name.compare("Cqd8_1231i_LNP") == 0) {
        Cqd8_1231i_LNP = value;
    } else if (name.compare("Cqd8_1232i_LNP") == 0) {
        Cqd8_1232i_LNP = value;
    } else if (name.compare("Cqd8_1233i_LNP") == 0) {
        Cqd8_1233i_LNP = value;
    } else if (name.compare("Cqd8_1311i_LNP") == 0) {
        Cqd8_1311i_LNP = value;
    } else if (name.compare("Cqd8_1312i_LNP") == 0) {
        Cqd8_1312i_LNP = value;
    } else if (name.compare("Cqd8_1313i_LNP") == 0) {
        Cqd8_1313i_LNP = value;
    } else if (name.compare("Cqd8_1321i_LNP") == 0) {
        Cqd8_1321i_LNP = value;
    } else if (name.compare("Cqd8_1322i_LNP") == 0) {
        Cqd8_1322i_LNP = value;
    } else if (name.compare("Cqd8_1323i_LNP") == 0) {
        Cqd8_1323i_LNP = value;
    } else if (name.compare("Cqd8_1331i_LNP") == 0) {
        Cqd8_1331i_LNP = value;
    } else if (name.compare("Cqd8_1332i_LNP") == 0) {
        Cqd8_1332i_LNP = value;
    } else if (name.compare("Cqd8_1333i_LNP") == 0) {
        Cqd8_1333i_LNP = value;
    } else if (name.compare("Cqd8_2212i_LNP") == 0) {
        Cqd8_2212i_LNP = value;
    } else if (name.compare("Cqd8_2213i_LNP") == 0) {
        Cqd8_2213i_LNP = value;
    } else if (name.compare("Cqd8_2223i_LNP") == 0) {
        Cqd8_2223i_LNP = value;
    } else if (name.compare("Cqd8_2311i_LNP") == 0) {
        Cqd8_2311i_LNP = value;
    } else if (name.compare("Cqd8_2312i_LNP") == 0) {
        Cqd8_2312i_LNP = value;
    } else if (name.compare("Cqd8_2313i_LNP") == 0) {
        Cqd8_2313i_LNP = value;
    } else if (name.compare("Cqd8_2321i_LNP") == 0) {
        Cqd8_2321i_LNP = value;
    } else if (name.compare("Cqd8_2322i_LNP") == 0) {
        Cqd8_2322i_LNP = value;
    } else if (name.compare("Cqd8_2323i_LNP") == 0) {
        Cqd8_2323i_LNP = value;
    } else if (name.compare("Cqd8_2331i_LNP") == 0) {
        Cqd8_2331i_LNP = value;
    } else if (name.compare("Cqd8_2332i_LNP") == 0) {
        Cqd8_2332i_LNP = value;
    } else if (name.compare("Cqd8_2333i_LNP") == 0) {
        Cqd8_2333i_LNP = value;
    } else if (name.compare("Cqd8_3312i_LNP") == 0) {
        Cqd8_3312i_LNP = value;
    } else if (name.compare("Cqd8_3313i_LNP") == 0) {
        Cqd8_3313i_LNP = value;
    } else if (name.compare("Cqd8_3323i_LNP") == 0) {
        Cqd8_3323i_LNP = value;
    } else if (name.compare("Cquqd1_1111r_LNP") == 0) {
        Cquqd1_1111r_LNP = value;
    } else if (name.compare("Cquqd1_1112r_LNP") == 0) {
        Cquqd1_1112r_LNP = value;
    } else if (name.compare("Cquqd1_1113r_LNP") == 0) {
        Cquqd1_1113r_LNP = value;
    } else if (name.compare("Cquqd1_1121r_LNP") == 0) {
        Cquqd1_1121r_LNP = value;
    } else if (name.compare("Cquqd1_1122r_LNP") == 0) {
        Cquqd1_1122r_LNP = value;
    } else if (name.compare("Cquqd1_1123r_LNP") == 0) {
        Cquqd1_1123r_LNP = value;
    } else if (name.compare("Cquqd1_1131r_LNP") == 0) {
        Cquqd1_1131r_LNP = value;
    } else if (name.compare("Cquqd1_1132r_LNP") == 0) {
        Cquqd1_1132r_LNP = value;
    } else if (name.compare("Cquqd1_1133r_LNP") == 0) {
        Cquqd1_1133r_LNP = value;
    } else if (name.compare("Cquqd1_1211r_LNP") == 0) {
        Cquqd1_1211r_LNP = value;
    } else if (name.compare("Cquqd1_1212r_LNP") == 0) {
        Cquqd1_1212r_LNP = value;
    } else if (name.compare("Cquqd1_1213r_LNP") == 0) {
        Cquqd1_1213r_LNP = value;
    } else if (name.compare("Cquqd1_1221r_LNP") == 0) {
        Cquqd1_1221r_LNP = value;
    } else if (name.compare("Cquqd1_1222r_LNP") == 0) {
        Cquqd1_1222r_LNP = value;
    } else if (name.compare("Cquqd1_1223r_LNP") == 0) {
        Cquqd1_1223r_LNP = value;
    } else if (name.compare("Cquqd1_1231r_LNP") == 0) {
        Cquqd1_1231r_LNP = value;
    } else if (name.compare("Cquqd1_1232r_LNP") == 0) {
        Cquqd1_1232r_LNP = value;
    } else if (name.compare("Cquqd1_1233r_LNP") == 0) {
        Cquqd1_1233r_LNP = value;
    } else if (name.compare("Cquqd1_1311r_LNP") == 0) {
        Cquqd1_1311r_LNP = value;
    } else if (name.compare("Cquqd1_1312r_LNP") == 0) {
        Cquqd1_1312r_LNP = value;
    } else if (name.compare("Cquqd1_1313r_LNP") == 0) {
        Cquqd1_1313r_LNP = value;
    } else if (name.compare("Cquqd1_1321r_LNP") == 0) {
        Cquqd1_1321r_LNP = value;
    } else if (name.compare("Cquqd1_1322r_LNP") == 0) {
        Cquqd1_1322r_LNP = value;
    } else if (name.compare("Cquqd1_1323r_LNP") == 0) {
        Cquqd1_1323r_LNP = value;
    } else if (name.compare("Cquqd1_1331r_LNP") == 0) {
        Cquqd1_1331r_LNP = value;
    } else if (name.compare("Cquqd1_1332r_LNP") == 0) {
        Cquqd1_1332r_LNP = value;
    } else if (name.compare("Cquqd1_1333r_LNP") == 0) {
        Cquqd1_1333r_LNP = value;
    } else if (name.compare("Cquqd1_2111r_LNP") == 0) {
        Cquqd1_2111r_LNP = value;
    } else if (name.compare("Cquqd1_2112r_LNP") == 0) {
        Cquqd1_2112r_LNP = value;
    } else if (name.compare("Cquqd1_2113r_LNP") == 0) {
        Cquqd1_2113r_LNP = value;
    } else if (name.compare("Cquqd1_2121r_LNP") == 0) {
        Cquqd1_2121r_LNP = value;
    } else if (name.compare("Cquqd1_2122r_LNP") == 0) {
        Cquqd1_2122r_LNP = value;
    } else if (name.compare("Cquqd1_2123r_LNP") == 0) {
        Cquqd1_2123r_LNP = value;
    } else if (name.compare("Cquqd1_2131r_LNP") == 0) {
        Cquqd1_2131r_LNP = value;
    } else if (name.compare("Cquqd1_2132r_LNP") == 0) {
        Cquqd1_2132r_LNP = value;
    } else if (name.compare("Cquqd1_2133r_LNP") == 0) {
        Cquqd1_2133r_LNP = value;
    } else if (name.compare("Cquqd1_2211r_LNP") == 0) {
        Cquqd1_2211r_LNP = value;
    } else if (name.compare("Cquqd1_2212r_LNP") == 0) {
        Cquqd1_2212r_LNP = value;
    } else if (name.compare("Cquqd1_2213r_LNP") == 0) {
        Cquqd1_2213r_LNP = value;
    } else if (name.compare("Cquqd1_2221r_LNP") == 0) {
        Cquqd1_2221r_LNP = value;
    } else if (name.compare("Cquqd1_2222r_LNP") == 0) {
        Cquqd1_2222r_LNP = value;
    } else if (name.compare("Cquqd1_2223r_LNP") == 0) {
        Cquqd1_2223r_LNP = value;
    } else if (name.compare("Cquqd1_2231r_LNP") == 0) {
        Cquqd1_2231r_LNP = value;
    } else if (name.compare("Cquqd1_2232r_LNP") == 0) {
        Cquqd1_2232r_LNP = value;
    } else if (name.compare("Cquqd1_2233r_LNP") == 0) {
        Cquqd1_2233r_LNP = value;
    } else if (name.compare("Cquqd1_2311r_LNP") == 0) {
        Cquqd1_2311r_LNP = value;
    } else if (name.compare("Cquqd1_2312r_LNP") == 0) {
        Cquqd1_2312r_LNP = value;
    } else if (name.compare("Cquqd1_2313r_LNP") == 0) {
        Cquqd1_2313r_LNP = value;
    } else if (name.compare("Cquqd1_2321r_LNP") == 0) {
        Cquqd1_2321r_LNP = value;
    } else if (name.compare("Cquqd1_2322r_LNP") == 0) {
        Cquqd1_2322r_LNP = value;
    } else if (name.compare("Cquqd1_2323r_LNP") == 0) {
        Cquqd1_2323r_LNP = value;
    } else if (name.compare("Cquqd1_2331r_LNP") == 0) {
        Cquqd1_2331r_LNP = value;
    } else if (name.compare("Cquqd1_2332r_LNP") == 0) {
        Cquqd1_2332r_LNP = value;
    } else if (name.compare("Cquqd1_2333r_LNP") == 0) {
        Cquqd1_2333r_LNP = value;
    } else if (name.compare("Cquqd1_3111r_LNP") == 0) {
        Cquqd1_3111r_LNP = value;
    } else if (name.compare("Cquqd1_3112r_LNP") == 0) {
        Cquqd1_3112r_LNP = value;
    } else if (name.compare("Cquqd1_3113r_LNP") == 0) {
        Cquqd1_3113r_LNP = value;
    } else if (name.compare("Cquqd1_3121r_LNP") == 0) {
        Cquqd1_3121r_LNP = value;
    } else if (name.compare("Cquqd1_3122r_LNP") == 0) {
        Cquqd1_3122r_LNP = value;
    } else if (name.compare("Cquqd1_3123r_LNP") == 0) {
        Cquqd1_3123r_LNP = value;
    } else if (name.compare("Cquqd1_3131r_LNP") == 0) {
        Cquqd1_3131r_LNP = value;
    } else if (name.compare("Cquqd1_3132r_LNP") == 0) {
        Cquqd1_3132r_LNP = value;
    } else if (name.compare("Cquqd1_3133r_LNP") == 0) {
        Cquqd1_3133r_LNP = value;
    } else if (name.compare("Cquqd1_3211r_LNP") == 0) {
        Cquqd1_3211r_LNP = value;
    } else if (name.compare("Cquqd1_3212r_LNP") == 0) {
        Cquqd1_3212r_LNP = value;
    } else if (name.compare("Cquqd1_3213r_LNP") == 0) {
        Cquqd1_3213r_LNP = value;
    } else if (name.compare("Cquqd1_3221r_LNP") == 0) {
        Cquqd1_3221r_LNP = value;
    } else if (name.compare("Cquqd1_3222r_LNP") == 0) {
        Cquqd1_3222r_LNP = value;
    } else if (name.compare("Cquqd1_3223r_LNP") == 0) {
        Cquqd1_3223r_LNP = value;
    } else if (name.compare("Cquqd1_3231r_LNP") == 0) {
        Cquqd1_3231r_LNP = value;
    } else if (name.compare("Cquqd1_3232r_LNP") == 0) {
        Cquqd1_3232r_LNP = value;
    } else if (name.compare("Cquqd1_3233r_LNP") == 0) {
        Cquqd1_3233r_LNP = value;
    } else if (name.compare("Cquqd1_3311r_LNP") == 0) {
        Cquqd1_3311r_LNP = value;
    } else if (name.compare("Cquqd1_3312r_LNP") == 0) {
        Cquqd1_3312r_LNP = value;
    } else if (name.compare("Cquqd1_3313r_LNP") == 0) {
        Cquqd1_3313r_LNP = value;
    } else if (name.compare("Cquqd1_3321r_LNP") == 0) {
        Cquqd1_3321r_LNP = value;
    } else if (name.compare("Cquqd1_3322r_LNP") == 0) {
        Cquqd1_3322r_LNP = value;
    } else if (name.compare("Cquqd1_3323r_LNP") == 0) {
        Cquqd1_3323r_LNP = value;
    } else if (name.compare("Cquqd1_3331r_LNP") == 0) {
        Cquqd1_3331r_LNP = value;
    } else if (name.compare("Cquqd1_3332r_LNP") == 0) {
        Cquqd1_3332r_LNP = value;
    } else if (name.compare("Cquqd1_3333r_LNP") == 0) {
        Cquqd1_3333r_LNP = value;
    } else if (name.compare("Cquqd1_1111i_LNP") == 0) {
        Cquqd1_1111i_LNP = value;
    } else if (name.compare("Cquqd1_1112i_LNP") == 0) {
        Cquqd1_1112i_LNP = value;
    } else if (name.compare("Cquqd1_1113i_LNP") == 0) {
        Cquqd1_1113i_LNP = value;
    } else if (name.compare("Cquqd1_1121i_LNP") == 0) {
        Cquqd1_1121i_LNP = value;
    } else if (name.compare("Cquqd1_1122i_LNP") == 0) {
        Cquqd1_1122i_LNP = value;
    } else if (name.compare("Cquqd1_1123i_LNP") == 0) {
        Cquqd1_1123i_LNP = value;
    } else if (name.compare("Cquqd1_1131i_LNP") == 0) {
        Cquqd1_1131i_LNP = value;
    } else if (name.compare("Cquqd1_1132i_LNP") == 0) {
        Cquqd1_1132i_LNP = value;
    } else if (name.compare("Cquqd1_1133i_LNP") == 0) {
        Cquqd1_1133i_LNP = value;
    } else if (name.compare("Cquqd1_1211i_LNP") == 0) {
        Cquqd1_1211i_LNP = value;
    } else if (name.compare("Cquqd1_1212i_LNP") == 0) {
        Cquqd1_1212i_LNP = value;
    } else if (name.compare("Cquqd1_1213i_LNP") == 0) {
        Cquqd1_1213i_LNP = value;
    } else if (name.compare("Cquqd1_1221i_LNP") == 0) {
        Cquqd1_1221i_LNP = value;
    } else if (name.compare("Cquqd1_1222i_LNP") == 0) {
        Cquqd1_1222i_LNP = value;
    } else if (name.compare("Cquqd1_1223i_LNP") == 0) {
        Cquqd1_1223i_LNP = value;
    } else if (name.compare("Cquqd1_1231i_LNP") == 0) {
        Cquqd1_1231i_LNP = value;
    } else if (name.compare("Cquqd1_1232i_LNP") == 0) {
        Cquqd1_1232i_LNP = value;
    } else if (name.compare("Cquqd1_1233i_LNP") == 0) {
        Cquqd1_1233i_LNP = value;
    } else if (name.compare("Cquqd1_1311i_LNP") == 0) {
        Cquqd1_1311i_LNP = value;
    } else if (name.compare("Cquqd1_1312i_LNP") == 0) {
        Cquqd1_1312i_LNP = value;
    } else if (name.compare("Cquqd1_1313i_LNP") == 0) {
        Cquqd1_1313i_LNP = value;
    } else if (name.compare("Cquqd1_1321i_LNP") == 0) {
        Cquqd1_1321i_LNP = value;
    } else if (name.compare("Cquqd1_1322i_LNP") == 0) {
        Cquqd1_1322i_LNP = value;
    } else if (name.compare("Cquqd1_1323i_LNP") == 0) {
        Cquqd1_1323i_LNP = value;
    } else if (name.compare("Cquqd1_1331i_LNP") == 0) {
        Cquqd1_1331i_LNP = value;
    } else if (name.compare("Cquqd1_1332i_LNP") == 0) {
        Cquqd1_1332i_LNP = value;
    } else if (name.compare("Cquqd1_1333i_LNP") == 0) {
        Cquqd1_1333i_LNP = value;
    } else if (name.compare("Cquqd1_2111i_LNP") == 0) {
        Cquqd1_2111i_LNP = value;
    } else if (name.compare("Cquqd1_2112i_LNP") == 0) {
        Cquqd1_2112i_LNP = value;
    } else if (name.compare("Cquqd1_2113i_LNP") == 0) {
        Cquqd1_2113i_LNP = value;
    } else if (name.compare("Cquqd1_2121i_LNP") == 0) {
        Cquqd1_2121i_LNP = value;
    } else if (name.compare("Cquqd1_2122i_LNP") == 0) {
        Cquqd1_2122i_LNP = value;
    } else if (name.compare("Cquqd1_2123i_LNP") == 0) {
        Cquqd1_2123i_LNP = value;
    } else if (name.compare("Cquqd1_2131i_LNP") == 0) {
        Cquqd1_2131i_LNP = value;
    } else if (name.compare("Cquqd1_2132i_LNP") == 0) {
        Cquqd1_2132i_LNP = value;
    } else if (name.compare("Cquqd1_2133i_LNP") == 0) {
        Cquqd1_2133i_LNP = value;
    } else if (name.compare("Cquqd1_2211i_LNP") == 0) {
        Cquqd1_2211i_LNP = value;
    } else if (name.compare("Cquqd1_2212i_LNP") == 0) {
        Cquqd1_2212i_LNP = value;
    } else if (name.compare("Cquqd1_2213i_LNP") == 0) {
        Cquqd1_2213i_LNP = value;
    } else if (name.compare("Cquqd1_2221i_LNP") == 0) {
        Cquqd1_2221i_LNP = value;
    } else if (name.compare("Cquqd1_2222i_LNP") == 0) {
        Cquqd1_2222i_LNP = value;
    } else if (name.compare("Cquqd1_2223i_LNP") == 0) {
        Cquqd1_2223i_LNP = value;
    } else if (name.compare("Cquqd1_2231i_LNP") == 0) {
        Cquqd1_2231i_LNP = value;
    } else if (name.compare("Cquqd1_2232i_LNP") == 0) {
        Cquqd1_2232i_LNP = value;
    } else if (name.compare("Cquqd1_2233i_LNP") == 0) {
        Cquqd1_2233i_LNP = value;
    } else if (name.compare("Cquqd1_2311i_LNP") == 0) {
        Cquqd1_2311i_LNP = value;
    } else if (name.compare("Cquqd1_2312i_LNP") == 0) {
        Cquqd1_2312i_LNP = value;
    } else if (name.compare("Cquqd1_2313i_LNP") == 0) {
        Cquqd1_2313i_LNP = value;
    } else if (name.compare("Cquqd1_2321i_LNP") == 0) {
        Cquqd1_2321i_LNP = value;
    } else if (name.compare("Cquqd1_2322i_LNP") == 0) {
        Cquqd1_2322i_LNP = value;
    } else if (name.compare("Cquqd1_2323i_LNP") == 0) {
        Cquqd1_2323i_LNP = value;
    } else if (name.compare("Cquqd1_2331i_LNP") == 0) {
        Cquqd1_2331i_LNP = value;
    } else if (name.compare("Cquqd1_2332i_LNP") == 0) {
        Cquqd1_2332i_LNP = value;
    } else if (name.compare("Cquqd1_2333i_LNP") == 0) {
        Cquqd1_2333i_LNP = value;
    } else if (name.compare("Cquqd1_3111i_LNP") == 0) {
        Cquqd1_3111i_LNP = value;
    } else if (name.compare("Cquqd1_3112i_LNP") == 0) {
        Cquqd1_3112i_LNP = value;
    } else if (name.compare("Cquqd1_3113i_LNP") == 0) {
        Cquqd1_3113i_LNP = value;
    } else if (name.compare("Cquqd1_3121i_LNP") == 0) {
        Cquqd1_3121i_LNP = value;
    } else if (name.compare("Cquqd1_3122i_LNP") == 0) {
        Cquqd1_3122i_LNP = value;
    } else if (name.compare("Cquqd1_3123i_LNP") == 0) {
        Cquqd1_3123i_LNP = value;
    } else if (name.compare("Cquqd1_3131i_LNP") == 0) {
        Cquqd1_3131i_LNP = value;
    } else if (name.compare("Cquqd1_3132i_LNP") == 0) {
        Cquqd1_3132i_LNP = value;
    } else if (name.compare("Cquqd1_3133i_LNP") == 0) {
        Cquqd1_3133i_LNP = value;
    } else if (name.compare("Cquqd1_3211i_LNP") == 0) {
        Cquqd1_3211i_LNP = value;
    } else if (name.compare("Cquqd1_3212i_LNP") == 0) {
        Cquqd1_3212i_LNP = value;
    } else if (name.compare("Cquqd1_3213i_LNP") == 0) {
        Cquqd1_3213i_LNP = value;
    } else if (name.compare("Cquqd1_3221i_LNP") == 0) {
        Cquqd1_3221i_LNP = value;
    } else if (name.compare("Cquqd1_3222i_LNP") == 0) {
        Cquqd1_3222i_LNP = value;
    } else if (name.compare("Cquqd1_3223i_LNP") == 0) {
        Cquqd1_3223i_LNP = value;
    } else if (name.compare("Cquqd1_3231i_LNP") == 0) {
        Cquqd1_3231i_LNP = value;
    } else if (name.compare("Cquqd1_3232i_LNP") == 0) {
        Cquqd1_3232i_LNP = value;
    } else if (name.compare("Cquqd1_3233i_LNP") == 0) {
        Cquqd1_3233i_LNP = value;
    } else if (name.compare("Cquqd1_3311i_LNP") == 0) {
        Cquqd1_3311i_LNP = value;
    } else if (name.compare("Cquqd1_3312i_LNP") == 0) {
        Cquqd1_3312i_LNP = value;
    } else if (name.compare("Cquqd1_3313i_LNP") == 0) {
        Cquqd1_3313i_LNP = value;
    } else if (name.compare("Cquqd1_3321i_LNP") == 0) {
        Cquqd1_3321i_LNP = value;
    } else if (name.compare("Cquqd1_3322i_LNP") == 0) {
        Cquqd1_3322i_LNP = value;
    } else if (name.compare("Cquqd1_3323i_LNP") == 0) {
        Cquqd1_3323i_LNP = value;
    } else if (name.compare("Cquqd1_3331i_LNP") == 0) {
        Cquqd1_3331i_LNP = value;
    } else if (name.compare("Cquqd1_3332i_LNP") == 0) {
        Cquqd1_3332i_LNP = value;
    } else if (name.compare("Cquqd1_3333i_LNP") == 0) {
        Cquqd1_3333i_LNP = value;
    } else if (name.compare("Cquqd8_1111r_LNP") == 0) {
        Cquqd8_1111r_LNP = value;
    } else if (name.compare("Cquqd8_1112r_LNP") == 0) {
        Cquqd8_1112r_LNP = value;
    } else if (name.compare("Cquqd8_1113r_LNP") == 0) {
        Cquqd8_1113r_LNP = value;
    } else if (name.compare("Cquqd8_1121r_LNP") == 0) {
        Cquqd8_1121r_LNP = value;
    } else if (name.compare("Cquqd8_1122r_LNP") == 0) {
        Cquqd8_1122r_LNP = value;
    } else if (name.compare("Cquqd8_1123r_LNP") == 0) {
        Cquqd8_1123r_LNP = value;
    } else if (name.compare("Cquqd8_1131r_LNP") == 0) {
        Cquqd8_1131r_LNP = value;
    } else if (name.compare("Cquqd8_1132r_LNP") == 0) {
        Cquqd8_1132r_LNP = value;
    } else if (name.compare("Cquqd8_1133r_LNP") == 0) {
        Cquqd8_1133r_LNP = value;
    } else if (name.compare("Cquqd8_1211r_LNP") == 0) {
        Cquqd8_1211r_LNP = value;
    } else if (name.compare("Cquqd8_1212r_LNP") == 0) {
        Cquqd8_1212r_LNP = value;
    } else if (name.compare("Cquqd8_1213r_LNP") == 0) {
        Cquqd8_1213r_LNP = value;
    } else if (name.compare("Cquqd8_1221r_LNP") == 0) {
        Cquqd8_1221r_LNP = value;
    } else if (name.compare("Cquqd8_1222r_LNP") == 0) {
        Cquqd8_1222r_LNP = value;
    } else if (name.compare("Cquqd8_1223r_LNP") == 0) {
        Cquqd8_1223r_LNP = value;
    } else if (name.compare("Cquqd8_1231r_LNP") == 0) {
        Cquqd8_1231r_LNP = value;
    } else if (name.compare("Cquqd8_1232r_LNP") == 0) {
        Cquqd8_1232r_LNP = value;
    } else if (name.compare("Cquqd8_1233r_LNP") == 0) {
        Cquqd8_1233r_LNP = value;
    } else if (name.compare("Cquqd8_1311r_LNP") == 0) {
        Cquqd8_1311r_LNP = value;
    } else if (name.compare("Cquqd8_1312r_LNP") == 0) {
        Cquqd8_1312r_LNP = value;
    } else if (name.compare("Cquqd8_1313r_LNP") == 0) {
        Cquqd8_1313r_LNP = value;
    } else if (name.compare("Cquqd8_1321r_LNP") == 0) {
        Cquqd8_1321r_LNP = value;
    } else if (name.compare("Cquqd8_1322r_LNP") == 0) {
        Cquqd8_1322r_LNP = value;
    } else if (name.compare("Cquqd8_1323r_LNP") == 0) {
        Cquqd8_1323r_LNP = value;
    } else if (name.compare("Cquqd8_1331r_LNP") == 0) {
        Cquqd8_1331r_LNP = value;
    } else if (name.compare("Cquqd8_1332r_LNP") == 0) {
        Cquqd8_1332r_LNP = value;
    } else if (name.compare("Cquqd8_1333r_LNP") == 0) {
        Cquqd8_1333r_LNP = value;
    } else if (name.compare("Cquqd8_2111r_LNP") == 0) {
        Cquqd8_2111r_LNP = value;
    } else if (name.compare("Cquqd8_2112r_LNP") == 0) {
        Cquqd8_2112r_LNP = value;
    } else if (name.compare("Cquqd8_2113r_LNP") == 0) {
        Cquqd8_2113r_LNP = value;
    } else if (name.compare("Cquqd8_2121r_LNP") == 0) {
        Cquqd8_2121r_LNP = value;
    } else if (name.compare("Cquqd8_2122r_LNP") == 0) {
        Cquqd8_2122r_LNP = value;
    } else if (name.compare("Cquqd8_2123r_LNP") == 0) {
        Cquqd8_2123r_LNP = value;
    } else if (name.compare("Cquqd8_2131r_LNP") == 0) {
        Cquqd8_2131r_LNP = value;
    } else if (name.compare("Cquqd8_2132r_LNP") == 0) {
        Cquqd8_2132r_LNP = value;
    } else if (name.compare("Cquqd8_2133r_LNP") == 0) {
        Cquqd8_2133r_LNP = value;
    } else if (name.compare("Cquqd8_2211r_LNP") == 0) {
        Cquqd8_2211r_LNP = value;
    } else if (name.compare("Cquqd8_2212r_LNP") == 0) {
        Cquqd8_2212r_LNP = value;
    } else if (name.compare("Cquqd8_2213r_LNP") == 0) {
        Cquqd8_2213r_LNP = value;
    } else if (name.compare("Cquqd8_2221r_LNP") == 0) {
        Cquqd8_2221r_LNP = value;
    } else if (name.compare("Cquqd8_2222r_LNP") == 0) {
        Cquqd8_2222r_LNP = value;
    } else if (name.compare("Cquqd8_2223r_LNP") == 0) {
        Cquqd8_2223r_LNP = value;
    } else if (name.compare("Cquqd8_2231r_LNP") == 0) {
        Cquqd8_2231r_LNP = value;
    } else if (name.compare("Cquqd8_2232r_LNP") == 0) {
        Cquqd8_2232r_LNP = value;
    } else if (name.compare("Cquqd8_2233r_LNP") == 0) {
        Cquqd8_2233r_LNP = value;
    } else if (name.compare("Cquqd8_2311r_LNP") == 0) {
        Cquqd8_2311r_LNP = value;
    } else if (name.compare("Cquqd8_2312r_LNP") == 0) {
        Cquqd8_2312r_LNP = value;
    } else if (name.compare("Cquqd8_2313r_LNP") == 0) {
        Cquqd8_2313r_LNP = value;
    } else if (name.compare("Cquqd8_2321r_LNP") == 0) {
        Cquqd8_2321r_LNP = value;
    } else if (name.compare("Cquqd8_2322r_LNP") == 0) {
        Cquqd8_2322r_LNP = value;
    } else if (name.compare("Cquqd8_2323r_LNP") == 0) {
        Cquqd8_2323r_LNP = value;
    } else if (name.compare("Cquqd8_2331r_LNP") == 0) {
        Cquqd8_2331r_LNP = value;
    } else if (name.compare("Cquqd8_2332r_LNP") == 0) {
        Cquqd8_2332r_LNP = value;
    } else if (name.compare("Cquqd8_2333r_LNP") == 0) {
        Cquqd8_2333r_LNP = value;
    } else if (name.compare("Cquqd8_3111r_LNP") == 0) {
        Cquqd8_3111r_LNP = value;
    } else if (name.compare("Cquqd8_3112r_LNP") == 0) {
        Cquqd8_3112r_LNP = value;
    } else if (name.compare("Cquqd8_3113r_LNP") == 0) {
        Cquqd8_3113r_LNP = value;
    } else if (name.compare("Cquqd8_3121r_LNP") == 0) {
        Cquqd8_3121r_LNP = value;
    } else if (name.compare("Cquqd8_3122r_LNP") == 0) {
        Cquqd8_3122r_LNP = value;
    } else if (name.compare("Cquqd8_3123r_LNP") == 0) {
        Cquqd8_3123r_LNP = value;
    } else if (name.compare("Cquqd8_3131r_LNP") == 0) {
        Cquqd8_3131r_LNP = value;
    } else if (name.compare("Cquqd8_3132r_LNP") == 0) {
        Cquqd8_3132r_LNP = value;
    } else if (name.compare("Cquqd8_3133r_LNP") == 0) {
        Cquqd8_3133r_LNP = value;
    } else if (name.compare("Cquqd8_3211r_LNP") == 0) {
        Cquqd8_3211r_LNP = value;
    } else if (name.compare("Cquqd8_3212r_LNP") == 0) {
        Cquqd8_3212r_LNP = value;
    } else if (name.compare("Cquqd8_3213r_LNP") == 0) {
        Cquqd8_3213r_LNP = value;
    } else if (name.compare("Cquqd8_3221r_LNP") == 0) {
        Cquqd8_3221r_LNP = value;
    } else if (name.compare("Cquqd8_3222r_LNP") == 0) {
        Cquqd8_3222r_LNP = value;
    } else if (name.compare("Cquqd8_3223r_LNP") == 0) {
        Cquqd8_3223r_LNP = value;
    } else if (name.compare("Cquqd8_3231r_LNP") == 0) {
        Cquqd8_3231r_LNP = value;
    } else if (name.compare("Cquqd8_3232r_LNP") == 0) {
        Cquqd8_3232r_LNP = value;
    } else if (name.compare("Cquqd8_3233r_LNP") == 0) {
        Cquqd8_3233r_LNP = value;
    } else if (name.compare("Cquqd8_3311r_LNP") == 0) {
        Cquqd8_3311r_LNP = value;
    } else if (name.compare("Cquqd8_3312r_LNP") == 0) {
        Cquqd8_3312r_LNP = value;
    } else if (name.compare("Cquqd8_3313r_LNP") == 0) {
        Cquqd8_3313r_LNP = value;
    } else if (name.compare("Cquqd8_3321r_LNP") == 0) {
        Cquqd8_3321r_LNP = value;
    } else if (name.compare("Cquqd8_3322r_LNP") == 0) {
        Cquqd8_3322r_LNP = value;
    } else if (name.compare("Cquqd8_3323r_LNP") == 0) {
        Cquqd8_3323r_LNP = value;
    } else if (name.compare("Cquqd8_3331r_LNP") == 0) {
        Cquqd8_3331r_LNP = value;
    } else if (name.compare("Cquqd8_3332r_LNP") == 0) {
        Cquqd8_3332r_LNP = value;
    } else if (name.compare("Cquqd8_3333r_LNP") == 0) {
        Cquqd8_3333r_LNP = value;
    } else if (name.compare("Cquqd8_1111i_LNP") == 0) {
        Cquqd8_1111i_LNP = value;
    } else if (name.compare("Cquqd8_1112i_LNP") == 0) {
        Cquqd8_1112i_LNP = value;
    } else if (name.compare("Cquqd8_1113i_LNP") == 0) {
        Cquqd8_1113i_LNP = value;
    } else if (name.compare("Cquqd8_1121i_LNP") == 0) {
        Cquqd8_1121i_LNP = value;
    } else if (name.compare("Cquqd8_1122i_LNP") == 0) {
        Cquqd8_1122i_LNP = value;
    } else if (name.compare("Cquqd8_1123i_LNP") == 0) {
        Cquqd8_1123i_LNP = value;
    } else if (name.compare("Cquqd8_1131i_LNP") == 0) {
        Cquqd8_1131i_LNP = value;
    } else if (name.compare("Cquqd8_1132i_LNP") == 0) {
        Cquqd8_1132i_LNP = value;
    } else if (name.compare("Cquqd8_1133i_LNP") == 0) {
        Cquqd8_1133i_LNP = value;
    } else if (name.compare("Cquqd8_1211i_LNP") == 0) {
        Cquqd8_1211i_LNP = value;
    } else if (name.compare("Cquqd8_1212i_LNP") == 0) {
        Cquqd8_1212i_LNP = value;
    } else if (name.compare("Cquqd8_1213i_LNP") == 0) {
        Cquqd8_1213i_LNP = value;
    } else if (name.compare("Cquqd8_1221i_LNP") == 0) {
        Cquqd8_1221i_LNP = value;
    } else if (name.compare("Cquqd8_1222i_LNP") == 0) {
        Cquqd8_1222i_LNP = value;
    } else if (name.compare("Cquqd8_1223i_LNP") == 0) {
        Cquqd8_1223i_LNP = value;
    } else if (name.compare("Cquqd8_1231i_LNP") == 0) {
        Cquqd8_1231i_LNP = value;
    } else if (name.compare("Cquqd8_1232i_LNP") == 0) {
        Cquqd8_1232i_LNP = value;
    } else if (name.compare("Cquqd8_1233i_LNP") == 0) {
        Cquqd8_1233i_LNP = value;
    } else if (name.compare("Cquqd8_1311i_LNP") == 0) {
        Cquqd8_1311i_LNP = value;
    } else if (name.compare("Cquqd8_1312i_LNP") == 0) {
        Cquqd8_1312i_LNP = value;
    } else if (name.compare("Cquqd8_1313i_LNP") == 0) {
        Cquqd8_1313i_LNP = value;
    } else if (name.compare("Cquqd8_1321i_LNP") == 0) {
        Cquqd8_1321i_LNP = value;
    } else if (name.compare("Cquqd8_1322i_LNP") == 0) {
        Cquqd8_1322i_LNP = value;
    } else if (name.compare("Cquqd8_1323i_LNP") == 0) {
        Cquqd8_1323i_LNP = value;
    } else if (name.compare("Cquqd8_1331i_LNP") == 0) {
        Cquqd8_1331i_LNP = value;
    } else if (name.compare("Cquqd8_1332i_LNP") == 0) {
        Cquqd8_1332i_LNP = value;
    } else if (name.compare("Cquqd8_1333i_LNP") == 0) {
        Cquqd8_1333i_LNP = value;
    } else if (name.compare("Cquqd8_2111i_LNP") == 0) {
        Cquqd8_2111i_LNP = value;
    } else if (name.compare("Cquqd8_2112i_LNP") == 0) {
        Cquqd8_2112i_LNP = value;
    } else if (name.compare("Cquqd8_2113i_LNP") == 0) {
        Cquqd8_2113i_LNP = value;
    } else if (name.compare("Cquqd8_2121i_LNP") == 0) {
        Cquqd8_2121i_LNP = value;
    } else if (name.compare("Cquqd8_2122i_LNP") == 0) {
        Cquqd8_2122i_LNP = value;
    } else if (name.compare("Cquqd8_2123i_LNP") == 0) {
        Cquqd8_2123i_LNP = value;
    } else if (name.compare("Cquqd8_2131i_LNP") == 0) {
        Cquqd8_2131i_LNP = value;
    } else if (name.compare("Cquqd8_2132i_LNP") == 0) {
        Cquqd8_2132i_LNP = value;
    } else if (name.compare("Cquqd8_2133i_LNP") == 0) {
        Cquqd8_2133i_LNP = value;
    } else if (name.compare("Cquqd8_2211i_LNP") == 0) {
        Cquqd8_2211i_LNP = value;
    } else if (name.compare("Cquqd8_2212i_LNP") == 0) {
        Cquqd8_2212i_LNP = value;
    } else if (name.compare("Cquqd8_2213i_LNP") == 0) {
        Cquqd8_2213i_LNP = value;
    } else if (name.compare("Cquqd8_2221i_LNP") == 0) {
        Cquqd8_2221i_LNP = value;
    } else if (name.compare("Cquqd8_2222i_LNP") == 0) {
        Cquqd8_2222i_LNP = value;
    } else if (name.compare("Cquqd8_2223i_LNP") == 0) {
        Cquqd8_2223i_LNP = value;
    } else if (name.compare("Cquqd8_2231i_LNP") == 0) {
        Cquqd8_2231i_LNP = value;
    } else if (name.compare("Cquqd8_2232i_LNP") == 0) {
        Cquqd8_2232i_LNP = value;
    } else if (name.compare("Cquqd8_2233i_LNP") == 0) {
        Cquqd8_2233i_LNP = value;
    } else if (name.compare("Cquqd8_2311i_LNP") == 0) {
        Cquqd8_2311i_LNP = value;
    } else if (name.compare("Cquqd8_2312i_LNP") == 0) {
        Cquqd8_2312i_LNP = value;
    } else if (name.compare("Cquqd8_2313i_LNP") == 0) {
        Cquqd8_2313i_LNP = value;
    } else if (name.compare("Cquqd8_2321i_LNP") == 0) {
        Cquqd8_2321i_LNP = value;
    } else if (name.compare("Cquqd8_2322i_LNP") == 0) {
        Cquqd8_2322i_LNP = value;
    } else if (name.compare("Cquqd8_2323i_LNP") == 0) {
        Cquqd8_2323i_LNP = value;
    } else if (name.compare("Cquqd8_2331i_LNP") == 0) {
        Cquqd8_2331i_LNP = value;
    } else if (name.compare("Cquqd8_2332i_LNP") == 0) {
        Cquqd8_2332i_LNP = value;
    } else if (name.compare("Cquqd8_2333i_LNP") == 0) {
        Cquqd8_2333i_LNP = value;
    } else if (name.compare("Cquqd8_3111i_LNP") == 0) {
        Cquqd8_3111i_LNP = value;
    } else if (name.compare("Cquqd8_3112i_LNP") == 0) {
        Cquqd8_3112i_LNP = value;
    } else if (name.compare("Cquqd8_3113i_LNP") == 0) {
        Cquqd8_3113i_LNP = value;
    } else if (name.compare("Cquqd8_3121i_LNP") == 0) {
        Cquqd8_3121i_LNP = value;
    } else if (name.compare("Cquqd8_3122i_LNP") == 0) {
        Cquqd8_3122i_LNP = value;
    } else if (name.compare("Cquqd8_3123i_LNP") == 0) {
        Cquqd8_3123i_LNP = value;
    } else if (name.compare("Cquqd8_3131i_LNP") == 0) {
        Cquqd8_3131i_LNP = value;
    } else if (name.compare("Cquqd8_3132i_LNP") == 0) {
        Cquqd8_3132i_LNP = value;
    } else if (name.compare("Cquqd8_3133i_LNP") == 0) {
        Cquqd8_3133i_LNP = value;
    } else if (name.compare("Cquqd8_3211i_LNP") == 0) {
        Cquqd8_3211i_LNP = value;
    } else if (name.compare("Cquqd8_3212i_LNP") == 0) {
        Cquqd8_3212i_LNP = value;
    } else if (name.compare("Cquqd8_3213i_LNP") == 0) {
        Cquqd8_3213i_LNP = value;
    } else if (name.compare("Cquqd8_3221i_LNP") == 0) {
        Cquqd8_3221i_LNP = value;
    } else if (name.compare("Cquqd8_3222i_LNP") == 0) {
        Cquqd8_3222i_LNP = value;
    } else if (name.compare("Cquqd8_3223i_LNP") == 0) {
        Cquqd8_3223i_LNP = value;
    } else if (name.compare("Cquqd8_3231i_LNP") == 0) {
        Cquqd8_3231i_LNP = value;
    } else if (name.compare("Cquqd8_3232i_LNP") == 0) {
        Cquqd8_3232i_LNP = value;
    } else if (name.compare("Cquqd8_3233i_LNP") == 0) {
        Cquqd8_3233i_LNP = value;
    } else if (name.compare("Cquqd8_3311i_LNP") == 0) {
        Cquqd8_3311i_LNP = value;
    } else if (name.compare("Cquqd8_3312i_LNP") == 0) {
        Cquqd8_3312i_LNP = value;
    } else if (name.compare("Cquqd8_3313i_LNP") == 0) {
        Cquqd8_3313i_LNP = value;
    } else if (name.compare("Cquqd8_3321i_LNP") == 0) {
        Cquqd8_3321i_LNP = value;
    } else if (name.compare("Cquqd8_3322i_LNP") == 0) {
        Cquqd8_3322i_LNP = value;
    } else if (name.compare("Cquqd8_3323i_LNP") == 0) {
        Cquqd8_3323i_LNP = value;
    } else if (name.compare("Cquqd8_3331i_LNP") == 0) {
        Cquqd8_3331i_LNP = value;
    } else if (name.compare("Cquqd8_3332i_LNP") == 0) {
        Cquqd8_3332i_LNP = value;
    } else if (name.compare("Cquqd8_3333i_LNP") == 0) {
        Cquqd8_3333i_LNP = value;
    } else if (name.compare("Clequ1_1111r_LNP") == 0) {
        Clequ1_1111r_LNP = value;
    } else if (name.compare("Clequ1_1112r_LNP") == 0) {
        Clequ1_1112r_LNP = value;
    } else if (name.compare("Clequ1_1113r_LNP") == 0) {
        Clequ1_1113r_LNP = value;
    } else if (name.compare("Clequ1_1121r_LNP") == 0) {
        Clequ1_1121r_LNP = value;
    } else if (name.compare("Clequ1_1122r_LNP") == 0) {
        Clequ1_1122r_LNP = value;
    } else if (name.compare("Clequ1_1123r_LNP") == 0) {
        Clequ1_1123r_LNP = value;
    } else if (name.compare("Clequ1_1131r_LNP") == 0) {
        Clequ1_1131r_LNP = value;
    } else if (name.compare("Clequ1_1132r_LNP") == 0) {
        Clequ1_1132r_LNP = value;
    } else if (name.compare("Clequ1_1133r_LNP") == 0) {
        Clequ1_1133r_LNP = value;
    } else if (name.compare("Clequ1_1211r_LNP") == 0) {
        Clequ1_1211r_LNP = value;
    } else if (name.compare("Clequ1_1212r_LNP") == 0) {
        Clequ1_1212r_LNP = value;
    } else if (name.compare("Clequ1_1213r_LNP") == 0) {
        Clequ1_1213r_LNP = value;
    } else if (name.compare("Clequ1_1221r_LNP") == 0) {
        Clequ1_1221r_LNP = value;
    } else if (name.compare("Clequ1_1222r_LNP") == 0) {
        Clequ1_1222r_LNP = value;
    } else if (name.compare("Clequ1_1223r_LNP") == 0) {
        Clequ1_1223r_LNP = value;
    } else if (name.compare("Clequ1_1231r_LNP") == 0) {
        Clequ1_1231r_LNP = value;
    } else if (name.compare("Clequ1_1232r_LNP") == 0) {
        Clequ1_1232r_LNP = value;
    } else if (name.compare("Clequ1_1233r_LNP") == 0) {
        Clequ1_1233r_LNP = value;
    } else if (name.compare("Clequ1_1311r_LNP") == 0) {
        Clequ1_1311r_LNP = value;
    } else if (name.compare("Clequ1_1312r_LNP") == 0) {
        Clequ1_1312r_LNP = value;
    } else if (name.compare("Clequ1_1313r_LNP") == 0) {
        Clequ1_1313r_LNP = value;
    } else if (name.compare("Clequ1_1321r_LNP") == 0) {
        Clequ1_1321r_LNP = value;
    } else if (name.compare("Clequ1_1322r_LNP") == 0) {
        Clequ1_1322r_LNP = value;
    } else if (name.compare("Clequ1_1323r_LNP") == 0) {
        Clequ1_1323r_LNP = value;
    } else if (name.compare("Clequ1_1331r_LNP") == 0) {
        Clequ1_1331r_LNP = value;
    } else if (name.compare("Clequ1_1332r_LNP") == 0) {
        Clequ1_1332r_LNP = value;
    } else if (name.compare("Clequ1_1333r_LNP") == 0) {
        Clequ1_1333r_LNP = value;
    } else if (name.compare("Clequ1_2111r_LNP") == 0) {
        Clequ1_2111r_LNP = value;
    } else if (name.compare("Clequ1_2112r_LNP") == 0) {
        Clequ1_2112r_LNP = value;
    } else if (name.compare("Clequ1_2113r_LNP") == 0) {
        Clequ1_2113r_LNP = value;
    } else if (name.compare("Clequ1_2121r_LNP") == 0) {
        Clequ1_2121r_LNP = value;
    } else if (name.compare("Clequ1_2122r_LNP") == 0) {
        Clequ1_2122r_LNP = value;
    } else if (name.compare("Clequ1_2123r_LNP") == 0) {
        Clequ1_2123r_LNP = value;
    } else if (name.compare("Clequ1_2131r_LNP") == 0) {
        Clequ1_2131r_LNP = value;
    } else if (name.compare("Clequ1_2132r_LNP") == 0) {
        Clequ1_2132r_LNP = value;
    } else if (name.compare("Clequ1_2133r_LNP") == 0) {
        Clequ1_2133r_LNP = value;
    } else if (name.compare("Clequ1_2211r_LNP") == 0) {
        Clequ1_2211r_LNP = value;
    } else if (name.compare("Clequ1_2212r_LNP") == 0) {
        Clequ1_2212r_LNP = value;
    } else if (name.compare("Clequ1_2213r_LNP") == 0) {
        Clequ1_2213r_LNP = value;
    } else if (name.compare("Clequ1_2221r_LNP") == 0) {
        Clequ1_2221r_LNP = value;
    } else if (name.compare("Clequ1_2222r_LNP") == 0) {
        Clequ1_2222r_LNP = value;
    } else if (name.compare("Clequ1_2223r_LNP") == 0) {
        Clequ1_2223r_LNP = value;
    } else if (name.compare("Clequ1_2231r_LNP") == 0) {
        Clequ1_2231r_LNP = value;
    } else if (name.compare("Clequ1_2232r_LNP") == 0) {
        Clequ1_2232r_LNP = value;
    } else if (name.compare("Clequ1_2233r_LNP") == 0) {
        Clequ1_2233r_LNP = value;
    } else if (name.compare("Clequ1_2311r_LNP") == 0) {
        Clequ1_2311r_LNP = value;
    } else if (name.compare("Clequ1_2312r_LNP") == 0) {
        Clequ1_2312r_LNP = value;
    } else if (name.compare("Clequ1_2313r_LNP") == 0) {
        Clequ1_2313r_LNP = value;
    } else if (name.compare("Clequ1_2321r_LNP") == 0) {
        Clequ1_2321r_LNP = value;
    } else if (name.compare("Clequ1_2322r_LNP") == 0) {
        Clequ1_2322r_LNP = value;
    } else if (name.compare("Clequ1_2323r_LNP") == 0) {
        Clequ1_2323r_LNP = value;
    } else if (name.compare("Clequ1_2331r_LNP") == 0) {
        Clequ1_2331r_LNP = value;
    } else if (name.compare("Clequ1_2332r_LNP") == 0) {
        Clequ1_2332r_LNP = value;
    } else if (name.compare("Clequ1_2333r_LNP") == 0) {
        Clequ1_2333r_LNP = value;
    } else if (name.compare("Clequ1_3111r_LNP") == 0) {
        Clequ1_3111r_LNP = value;
    } else if (name.compare("Clequ1_3112r_LNP") == 0) {
        Clequ1_3112r_LNP = value;
    } else if (name.compare("Clequ1_3113r_LNP") == 0) {
        Clequ1_3113r_LNP = value;
    } else if (name.compare("Clequ1_3121r_LNP") == 0) {
        Clequ1_3121r_LNP = value;
    } else if (name.compare("Clequ1_3122r_LNP") == 0) {
        Clequ1_3122r_LNP = value;
    } else if (name.compare("Clequ1_3123r_LNP") == 0) {
        Clequ1_3123r_LNP = value;
    } else if (name.compare("Clequ1_3131r_LNP") == 0) {
        Clequ1_3131r_LNP = value;
    } else if (name.compare("Clequ1_3132r_LNP") == 0) {
        Clequ1_3132r_LNP = value;
    } else if (name.compare("Clequ1_3133r_LNP") == 0) {
        Clequ1_3133r_LNP = value;
    } else if (name.compare("Clequ1_3211r_LNP") == 0) {
        Clequ1_3211r_LNP = value;
    } else if (name.compare("Clequ1_3212r_LNP") == 0) {
        Clequ1_3212r_LNP = value;
    } else if (name.compare("Clequ1_3213r_LNP") == 0) {
        Clequ1_3213r_LNP = value;
    } else if (name.compare("Clequ1_3221r_LNP") == 0) {
        Clequ1_3221r_LNP = value;
    } else if (name.compare("Clequ1_3222r_LNP") == 0) {
        Clequ1_3222r_LNP = value;
    } else if (name.compare("Clequ1_3223r_LNP") == 0) {
        Clequ1_3223r_LNP = value;
    } else if (name.compare("Clequ1_3231r_LNP") == 0) {
        Clequ1_3231r_LNP = value;
    } else if (name.compare("Clequ1_3232r_LNP") == 0) {
        Clequ1_3232r_LNP = value;
    } else if (name.compare("Clequ1_3233r_LNP") == 0) {
        Clequ1_3233r_LNP = value;
    } else if (name.compare("Clequ1_3311r_LNP") == 0) {
        Clequ1_3311r_LNP = value;
    } else if (name.compare("Clequ1_3312r_LNP") == 0) {
        Clequ1_3312r_LNP = value;
    } else if (name.compare("Clequ1_3313r_LNP") == 0) {
        Clequ1_3313r_LNP = value;
    } else if (name.compare("Clequ1_3321r_LNP") == 0) {
        Clequ1_3321r_LNP = value;
    } else if (name.compare("Clequ1_3322r_LNP") == 0) {
        Clequ1_3322r_LNP = value;
    } else if (name.compare("Clequ1_3323r_LNP") == 0) {
        Clequ1_3323r_LNP = value;
    } else if (name.compare("Clequ1_3331r_LNP") == 0) {
        Clequ1_3331r_LNP = value;
    } else if (name.compare("Clequ1_3332r_LNP") == 0) {
        Clequ1_3332r_LNP = value;
    } else if (name.compare("Clequ1_3333r_LNP") == 0) {
        Clequ1_3333r_LNP = value;
    } else if (name.compare("Clequ1_1111i_LNP") == 0) {
        Clequ1_1111i_LNP = value;
    } else if (name.compare("Clequ1_1112i_LNP") == 0) {
        Clequ1_1112i_LNP = value;
    } else if (name.compare("Clequ1_1113i_LNP") == 0) {
        Clequ1_1113i_LNP = value;
    } else if (name.compare("Clequ1_1121i_LNP") == 0) {
        Clequ1_1121i_LNP = value;
    } else if (name.compare("Clequ1_1122i_LNP") == 0) {
        Clequ1_1122i_LNP = value;
    } else if (name.compare("Clequ1_1123i_LNP") == 0) {
        Clequ1_1123i_LNP = value;
    } else if (name.compare("Clequ1_1131i_LNP") == 0) {
        Clequ1_1131i_LNP = value;
    } else if (name.compare("Clequ1_1132i_LNP") == 0) {
        Clequ1_1132i_LNP = value;
    } else if (name.compare("Clequ1_1133i_LNP") == 0) {
        Clequ1_1133i_LNP = value;
    } else if (name.compare("Clequ1_1211i_LNP") == 0) {
        Clequ1_1211i_LNP = value;
    } else if (name.compare("Clequ1_1212i_LNP") == 0) {
        Clequ1_1212i_LNP = value;
    } else if (name.compare("Clequ1_1213i_LNP") == 0) {
        Clequ1_1213i_LNP = value;
    } else if (name.compare("Clequ1_1221i_LNP") == 0) {
        Clequ1_1221i_LNP = value;
    } else if (name.compare("Clequ1_1222i_LNP") == 0) {
        Clequ1_1222i_LNP = value;
    } else if (name.compare("Clequ1_1223i_LNP") == 0) {
        Clequ1_1223i_LNP = value;
    } else if (name.compare("Clequ1_1231i_LNP") == 0) {
        Clequ1_1231i_LNP = value;
    } else if (name.compare("Clequ1_1232i_LNP") == 0) {
        Clequ1_1232i_LNP = value;
    } else if (name.compare("Clequ1_1233i_LNP") == 0) {
        Clequ1_1233i_LNP = value;
    } else if (name.compare("Clequ1_1311i_LNP") == 0) {
        Clequ1_1311i_LNP = value;
    } else if (name.compare("Clequ1_1312i_LNP") == 0) {
        Clequ1_1312i_LNP = value;
    } else if (name.compare("Clequ1_1313i_LNP") == 0) {
        Clequ1_1313i_LNP = value;
    } else if (name.compare("Clequ1_1321i_LNP") == 0) {
        Clequ1_1321i_LNP = value;
    } else if (name.compare("Clequ1_1322i_LNP") == 0) {
        Clequ1_1322i_LNP = value;
    } else if (name.compare("Clequ1_1323i_LNP") == 0) {
        Clequ1_1323i_LNP = value;
    } else if (name.compare("Clequ1_1331i_LNP") == 0) {
        Clequ1_1331i_LNP = value;
    } else if (name.compare("Clequ1_1332i_LNP") == 0) {
        Clequ1_1332i_LNP = value;
    } else if (name.compare("Clequ1_1333i_LNP") == 0) {
        Clequ1_1333i_LNP = value;
    } else if (name.compare("Clequ1_2111i_LNP") == 0) {
        Clequ1_2111i_LNP = value;
    } else if (name.compare("Clequ1_2112i_LNP") == 0) {
        Clequ1_2112i_LNP = value;
    } else if (name.compare("Clequ1_2113i_LNP") == 0) {
        Clequ1_2113i_LNP = value;
    } else if (name.compare("Clequ1_2121i_LNP") == 0) {
        Clequ1_2121i_LNP = value;
    } else if (name.compare("Clequ1_2122i_LNP") == 0) {
        Clequ1_2122i_LNP = value;
    } else if (name.compare("Clequ1_2123i_LNP") == 0) {
        Clequ1_2123i_LNP = value;
    } else if (name.compare("Clequ1_2131i_LNP") == 0) {
        Clequ1_2131i_LNP = value;
    } else if (name.compare("Clequ1_2132i_LNP") == 0) {
        Clequ1_2132i_LNP = value;
    } else if (name.compare("Clequ1_2133i_LNP") == 0) {
        Clequ1_2133i_LNP = value;
    } else if (name.compare("Clequ1_2211i_LNP") == 0) {
        Clequ1_2211i_LNP = value;
    } else if (name.compare("Clequ1_2212i_LNP") == 0) {
        Clequ1_2212i_LNP = value;
    } else if (name.compare("Clequ1_2213i_LNP") == 0) {
        Clequ1_2213i_LNP = value;
    } else if (name.compare("Clequ1_2221i_LNP") == 0) {
        Clequ1_2221i_LNP = value;
    } else if (name.compare("Clequ1_2222i_LNP") == 0) {
        Clequ1_2222i_LNP = value;
    } else if (name.compare("Clequ1_2223i_LNP") == 0) {
        Clequ1_2223i_LNP = value;
    } else if (name.compare("Clequ1_2231i_LNP") == 0) {
        Clequ1_2231i_LNP = value;
    } else if (name.compare("Clequ1_2232i_LNP") == 0) {
        Clequ1_2232i_LNP = value;
    } else if (name.compare("Clequ1_2233i_LNP") == 0) {
        Clequ1_2233i_LNP = value;
    } else if (name.compare("Clequ1_2311i_LNP") == 0) {
        Clequ1_2311i_LNP = value;
    } else if (name.compare("Clequ1_2312i_LNP") == 0) {
        Clequ1_2312i_LNP = value;
    } else if (name.compare("Clequ1_2313i_LNP") == 0) {
        Clequ1_2313i_LNP = value;
    } else if (name.compare("Clequ1_2321i_LNP") == 0) {
        Clequ1_2321i_LNP = value;
    } else if (name.compare("Clequ1_2322i_LNP") == 0) {
        Clequ1_2322i_LNP = value;
    } else if (name.compare("Clequ1_2323i_LNP") == 0) {
        Clequ1_2323i_LNP = value;
    } else if (name.compare("Clequ1_2331i_LNP") == 0) {
        Clequ1_2331i_LNP = value;
    } else if (name.compare("Clequ1_2332i_LNP") == 0) {
        Clequ1_2332i_LNP = value;
    } else if (name.compare("Clequ1_2333i_LNP") == 0) {
        Clequ1_2333i_LNP = value;
    } else if (name.compare("Clequ1_3111i_LNP") == 0) {
        Clequ1_3111i_LNP = value;
    } else if (name.compare("Clequ1_3112i_LNP") == 0) {
        Clequ1_3112i_LNP = value;
    } else if (name.compare("Clequ1_3113i_LNP") == 0) {
        Clequ1_3113i_LNP = value;
    } else if (name.compare("Clequ1_3121i_LNP") == 0) {
        Clequ1_3121i_LNP = value;
    } else if (name.compare("Clequ1_3122i_LNP") == 0) {
        Clequ1_3122i_LNP = value;
    } else if (name.compare("Clequ1_3123i_LNP") == 0) {
        Clequ1_3123i_LNP = value;
    } else if (name.compare("Clequ1_3131i_LNP") == 0) {
        Clequ1_3131i_LNP = value;
    } else if (name.compare("Clequ1_3132i_LNP") == 0) {
        Clequ1_3132i_LNP = value;
    } else if (name.compare("Clequ1_3133i_LNP") == 0) {
        Clequ1_3133i_LNP = value;
    } else if (name.compare("Clequ1_3211i_LNP") == 0) {
        Clequ1_3211i_LNP = value;
    } else if (name.compare("Clequ1_3212i_LNP") == 0) {
        Clequ1_3212i_LNP = value;
    } else if (name.compare("Clequ1_3213i_LNP") == 0) {
        Clequ1_3213i_LNP = value;
    } else if (name.compare("Clequ1_3221i_LNP") == 0) {
        Clequ1_3221i_LNP = value;
    } else if (name.compare("Clequ1_3222i_LNP") == 0) {
        Clequ1_3222i_LNP = value;
    } else if (name.compare("Clequ1_3223i_LNP") == 0) {
        Clequ1_3223i_LNP = value;
    } else if (name.compare("Clequ1_3231i_LNP") == 0) {
        Clequ1_3231i_LNP = value;
    } else if (name.compare("Clequ1_3232i_LNP") == 0) {
        Clequ1_3232i_LNP = value;
    } else if (name.compare("Clequ1_3233i_LNP") == 0) {
        Clequ1_3233i_LNP = value;
    } else if (name.compare("Clequ1_3311i_LNP") == 0) {
        Clequ1_3311i_LNP = value;
    } else if (name.compare("Clequ1_3312i_LNP") == 0) {
        Clequ1_3312i_LNP = value;
    } else if (name.compare("Clequ1_3313i_LNP") == 0) {
        Clequ1_3313i_LNP = value;
    } else if (name.compare("Clequ1_3321i_LNP") == 0) {
        Clequ1_3321i_LNP = value;
    } else if (name.compare("Clequ1_3322i_LNP") == 0) {
        Clequ1_3322i_LNP = value;
    } else if (name.compare("Clequ1_3323i_LNP") == 0) {
        Clequ1_3323i_LNP = value;
    } else if (name.compare("Clequ1_3331i_LNP") == 0) {
        Clequ1_3331i_LNP = value;
    } else if (name.compare("Clequ1_3332i_LNP") == 0) {
        Clequ1_3332i_LNP = value;
    } else if (name.compare("Clequ1_3333i_LNP") == 0) {
        Clequ1_3333i_LNP = value;
    } else if (name.compare("Clequ3_1111r_LNP") == 0) {
        Clequ3_1111r_LNP = value;
    } else if (name.compare("Clequ3_1112r_LNP") == 0) {
        Clequ3_1112r_LNP = value;
    } else if (name.compare("Clequ3_1113r_LNP") == 0) {
        Clequ3_1113r_LNP = value;
    } else if (name.compare("Clequ3_1121r_LNP") == 0) {
        Clequ3_1121r_LNP = value;
    } else if (name.compare("Clequ3_1122r_LNP") == 0) {
        Clequ3_1122r_LNP = value;
    } else if (name.compare("Clequ3_1123r_LNP") == 0) {
        Clequ3_1123r_LNP = value;
    } else if (name.compare("Clequ3_1131r_LNP") == 0) {
        Clequ3_1131r_LNP = value;
    } else if (name.compare("Clequ3_1132r_LNP") == 0) {
        Clequ3_1132r_LNP = value;
    } else if (name.compare("Clequ3_1133r_LNP") == 0) {
        Clequ3_1133r_LNP = value;
    } else if (name.compare("Clequ3_1211r_LNP") == 0) {
        Clequ3_1211r_LNP = value;
    } else if (name.compare("Clequ3_1212r_LNP") == 0) {
        Clequ3_1212r_LNP = value;
    } else if (name.compare("Clequ3_1213r_LNP") == 0) {
        Clequ3_1213r_LNP = value;
    } else if (name.compare("Clequ3_1221r_LNP") == 0) {
        Clequ3_1221r_LNP = value;
    } else if (name.compare("Clequ3_1222r_LNP") == 0) {
        Clequ3_1222r_LNP = value;
    } else if (name.compare("Clequ3_1223r_LNP") == 0) {
        Clequ3_1223r_LNP = value;
    } else if (name.compare("Clequ3_1231r_LNP") == 0) {
        Clequ3_1231r_LNP = value;
    } else if (name.compare("Clequ3_1232r_LNP") == 0) {
        Clequ3_1232r_LNP = value;
    } else if (name.compare("Clequ3_1233r_LNP") == 0) {
        Clequ3_1233r_LNP = value;
    } else if (name.compare("Clequ3_1311r_LNP") == 0) {
        Clequ3_1311r_LNP = value;
    } else if (name.compare("Clequ3_1312r_LNP") == 0) {
        Clequ3_1312r_LNP = value;
    } else if (name.compare("Clequ3_1313r_LNP") == 0) {
        Clequ3_1313r_LNP = value;
    } else if (name.compare("Clequ3_1321r_LNP") == 0) {
        Clequ3_1321r_LNP = value;
    } else if (name.compare("Clequ3_1322r_LNP") == 0) {
        Clequ3_1322r_LNP = value;
    } else if (name.compare("Clequ3_1323r_LNP") == 0) {
        Clequ3_1323r_LNP = value;
    } else if (name.compare("Clequ3_1331r_LNP") == 0) {
        Clequ3_1331r_LNP = value;
    } else if (name.compare("Clequ3_1332r_LNP") == 0) {
        Clequ3_1332r_LNP = value;
    } else if (name.compare("Clequ3_1333r_LNP") == 0) {
        Clequ3_1333r_LNP = value;
    } else if (name.compare("Clequ3_2111r_LNP") == 0) {
        Clequ3_2111r_LNP = value;
    } else if (name.compare("Clequ3_2112r_LNP") == 0) {
        Clequ3_2112r_LNP = value;
    } else if (name.compare("Clequ3_2113r_LNP") == 0) {
        Clequ3_2113r_LNP = value;
    } else if (name.compare("Clequ3_2121r_LNP") == 0) {
        Clequ3_2121r_LNP = value;
    } else if (name.compare("Clequ3_2122r_LNP") == 0) {
        Clequ3_2122r_LNP = value;
    } else if (name.compare("Clequ3_2123r_LNP") == 0) {
        Clequ3_2123r_LNP = value;
    } else if (name.compare("Clequ3_2131r_LNP") == 0) {
        Clequ3_2131r_LNP = value;
    } else if (name.compare("Clequ3_2132r_LNP") == 0) {
        Clequ3_2132r_LNP = value;
    } else if (name.compare("Clequ3_2133r_LNP") == 0) {
        Clequ3_2133r_LNP = value;
    } else if (name.compare("Clequ3_2211r_LNP") == 0) {
        Clequ3_2211r_LNP = value;
    } else if (name.compare("Clequ3_2212r_LNP") == 0) {
        Clequ3_2212r_LNP = value;
    } else if (name.compare("Clequ3_2213r_LNP") == 0) {
        Clequ3_2213r_LNP = value;
    } else if (name.compare("Clequ3_2221r_LNP") == 0) {
        Clequ3_2221r_LNP = value;
    } else if (name.compare("Clequ3_2222r_LNP") == 0) {
        Clequ3_2222r_LNP = value;
    } else if (name.compare("Clequ3_2223r_LNP") == 0) {
        Clequ3_2223r_LNP = value;
    } else if (name.compare("Clequ3_2231r_LNP") == 0) {
        Clequ3_2231r_LNP = value;
    } else if (name.compare("Clequ3_2232r_LNP") == 0) {
        Clequ3_2232r_LNP = value;
    } else if (name.compare("Clequ3_2233r_LNP") == 0) {
        Clequ3_2233r_LNP = value;
    } else if (name.compare("Clequ3_2311r_LNP") == 0) {
        Clequ3_2311r_LNP = value;
    } else if (name.compare("Clequ3_2312r_LNP") == 0) {
        Clequ3_2312r_LNP = value;
    } else if (name.compare("Clequ3_2313r_LNP") == 0) {
        Clequ3_2313r_LNP = value;
    } else if (name.compare("Clequ3_2321r_LNP") == 0) {
        Clequ3_2321r_LNP = value;
    } else if (name.compare("Clequ3_2322r_LNP") == 0) {
        Clequ3_2322r_LNP = value;
    } else if (name.compare("Clequ3_2323r_LNP") == 0) {
        Clequ3_2323r_LNP = value;
    } else if (name.compare("Clequ3_2331r_LNP") == 0) {
        Clequ3_2331r_LNP = value;
    } else if (name.compare("Clequ3_2332r_LNP") == 0) {
        Clequ3_2332r_LNP = value;
    } else if (name.compare("Clequ3_2333r_LNP") == 0) {
        Clequ3_2333r_LNP = value;
    } else if (name.compare("Clequ3_3111r_LNP") == 0) {
        Clequ3_3111r_LNP = value;
    } else if (name.compare("Clequ3_3112r_LNP") == 0) {
        Clequ3_3112r_LNP = value;
    } else if (name.compare("Clequ3_3113r_LNP") == 0) {
        Clequ3_3113r_LNP = value;
    } else if (name.compare("Clequ3_3121r_LNP") == 0) {
        Clequ3_3121r_LNP = value;
    } else if (name.compare("Clequ3_3122r_LNP") == 0) {
        Clequ3_3122r_LNP = value;
    } else if (name.compare("Clequ3_3123r_LNP") == 0) {
        Clequ3_3123r_LNP = value;
    } else if (name.compare("Clequ3_3131r_LNP") == 0) {
        Clequ3_3131r_LNP = value;
    } else if (name.compare("Clequ3_3132r_LNP") == 0) {
        Clequ3_3132r_LNP = value;
    } else if (name.compare("Clequ3_3133r_LNP") == 0) {
        Clequ3_3133r_LNP = value;
    } else if (name.compare("Clequ3_3211r_LNP") == 0) {
        Clequ3_3211r_LNP = value;
    } else if (name.compare("Clequ3_3212r_LNP") == 0) {
        Clequ3_3212r_LNP = value;
    } else if (name.compare("Clequ3_3213r_LNP") == 0) {
        Clequ3_3213r_LNP = value;
    } else if (name.compare("Clequ3_3221r_LNP") == 0) {
        Clequ3_3221r_LNP = value;
    } else if (name.compare("Clequ3_3222r_LNP") == 0) {
        Clequ3_3222r_LNP = value;
    } else if (name.compare("Clequ3_3223r_LNP") == 0) {
        Clequ3_3223r_LNP = value;
    } else if (name.compare("Clequ3_3231r_LNP") == 0) {
        Clequ3_3231r_LNP = value;
    } else if (name.compare("Clequ3_3232r_LNP") == 0) {
        Clequ3_3232r_LNP = value;
    } else if (name.compare("Clequ3_3233r_LNP") == 0) {
        Clequ3_3233r_LNP = value;
    } else if (name.compare("Clequ3_3311r_LNP") == 0) {
        Clequ3_3311r_LNP = value;
    } else if (name.compare("Clequ3_3312r_LNP") == 0) {
        Clequ3_3312r_LNP = value;
    } else if (name.compare("Clequ3_3313r_LNP") == 0) {
        Clequ3_3313r_LNP = value;
    } else if (name.compare("Clequ3_3321r_LNP") == 0) {
        Clequ3_3321r_LNP = value;
    } else if (name.compare("Clequ3_3322r_LNP") == 0) {
        Clequ3_3322r_LNP = value;
    } else if (name.compare("Clequ3_3323r_LNP") == 0) {
        Clequ3_3323r_LNP = value;
    } else if (name.compare("Clequ3_3331r_LNP") == 0) {
        Clequ3_3331r_LNP = value;
    } else if (name.compare("Clequ3_3332r_LNP") == 0) {
        Clequ3_3332r_LNP = value;
    } else if (name.compare("Clequ3_3333r_LNP") == 0) {
        Clequ3_3333r_LNP = value;
    } else if (name.compare("Clequ3_1111i_LNP") == 0) {
        Clequ3_1111i_LNP = value;
    } else if (name.compare("Clequ3_1112i_LNP") == 0) {
        Clequ3_1112i_LNP = value;
    } else if (name.compare("Clequ3_1113i_LNP") == 0) {
        Clequ3_1113i_LNP = value;
    } else if (name.compare("Clequ3_1121i_LNP") == 0) {
        Clequ3_1121i_LNP = value;
    } else if (name.compare("Clequ3_1122i_LNP") == 0) {
        Clequ3_1122i_LNP = value;
    } else if (name.compare("Clequ3_1123i_LNP") == 0) {
        Clequ3_1123i_LNP = value;
    } else if (name.compare("Clequ3_1131i_LNP") == 0) {
        Clequ3_1131i_LNP = value;
    } else if (name.compare("Clequ3_1132i_LNP") == 0) {
        Clequ3_1132i_LNP = value;
    } else if (name.compare("Clequ3_1133i_LNP") == 0) {
        Clequ3_1133i_LNP = value;
    } else if (name.compare("Clequ3_1211i_LNP") == 0) {
        Clequ3_1211i_LNP = value;
    } else if (name.compare("Clequ3_1212i_LNP") == 0) {
        Clequ3_1212i_LNP = value;
    } else if (name.compare("Clequ3_1213i_LNP") == 0) {
        Clequ3_1213i_LNP = value;
    } else if (name.compare("Clequ3_1221i_LNP") == 0) {
        Clequ3_1221i_LNP = value;
    } else if (name.compare("Clequ3_1222i_LNP") == 0) {
        Clequ3_1222i_LNP = value;
    } else if (name.compare("Clequ3_1223i_LNP") == 0) {
        Clequ3_1223i_LNP = value;
    } else if (name.compare("Clequ3_1231i_LNP") == 0) {
        Clequ3_1231i_LNP = value;
    } else if (name.compare("Clequ3_1232i_LNP") == 0) {
        Clequ3_1232i_LNP = value;
    } else if (name.compare("Clequ3_1233i_LNP") == 0) {
        Clequ3_1233i_LNP = value;
    } else if (name.compare("Clequ3_1311i_LNP") == 0) {
        Clequ3_1311i_LNP = value;
    } else if (name.compare("Clequ3_1312i_LNP") == 0) {
        Clequ3_1312i_LNP = value;
    } else if (name.compare("Clequ3_1313i_LNP") == 0) {
        Clequ3_1313i_LNP = value;
    } else if (name.compare("Clequ3_1321i_LNP") == 0) {
        Clequ3_1321i_LNP = value;
    } else if (name.compare("Clequ3_1322i_LNP") == 0) {
        Clequ3_1322i_LNP = value;
    } else if (name.compare("Clequ3_1323i_LNP") == 0) {
        Clequ3_1323i_LNP = value;
    } else if (name.compare("Clequ3_1331i_LNP") == 0) {
        Clequ3_1331i_LNP = value;
    } else if (name.compare("Clequ3_1332i_LNP") == 0) {
        Clequ3_1332i_LNP = value;
    } else if (name.compare("Clequ3_1333i_LNP") == 0) {
        Clequ3_1333i_LNP = value;
    } else if (name.compare("Clequ3_2111i_LNP") == 0) {
        Clequ3_2111i_LNP = value;
    } else if (name.compare("Clequ3_2112i_LNP") == 0) {
        Clequ3_2112i_LNP = value;
    } else if (name.compare("Clequ3_2113i_LNP") == 0) {
        Clequ3_2113i_LNP = value;
    } else if (name.compare("Clequ3_2121i_LNP") == 0) {
        Clequ3_2121i_LNP = value;
    } else if (name.compare("Clequ3_2122i_LNP") == 0) {
        Clequ3_2122i_LNP = value;
    } else if (name.compare("Clequ3_2123i_LNP") == 0) {
        Clequ3_2123i_LNP = value;
    } else if (name.compare("Clequ3_2131i_LNP") == 0) {
        Clequ3_2131i_LNP = value;
    } else if (name.compare("Clequ3_2132i_LNP") == 0) {
        Clequ3_2132i_LNP = value;
    } else if (name.compare("Clequ3_2133i_LNP") == 0) {
        Clequ3_2133i_LNP = value;
    } else if (name.compare("Clequ3_2211i_LNP") == 0) {
        Clequ3_2211i_LNP = value;
    } else if (name.compare("Clequ3_2212i_LNP") == 0) {
        Clequ3_2212i_LNP = value;
    } else if (name.compare("Clequ3_2213i_LNP") == 0) {
        Clequ3_2213i_LNP = value;
    } else if (name.compare("Clequ3_2221i_LNP") == 0) {
        Clequ3_2221i_LNP = value;
    } else if (name.compare("Clequ3_2222i_LNP") == 0) {
        Clequ3_2222i_LNP = value;
    } else if (name.compare("Clequ3_2223i_LNP") == 0) {
        Clequ3_2223i_LNP = value;
    } else if (name.compare("Clequ3_2231i_LNP") == 0) {
        Clequ3_2231i_LNP = value;
    } else if (name.compare("Clequ3_2232i_LNP") == 0) {
        Clequ3_2232i_LNP = value;
    } else if (name.compare("Clequ3_2233i_LNP") == 0) {
        Clequ3_2233i_LNP = value;
    } else if (name.compare("Clequ3_2311i_LNP") == 0) {
        Clequ3_2311i_LNP = value;
    } else if (name.compare("Clequ3_2312i_LNP") == 0) {
        Clequ3_2312i_LNP = value;
    } else if (name.compare("Clequ3_2313i_LNP") == 0) {
        Clequ3_2313i_LNP = value;
    } else if (name.compare("Clequ3_2321i_LNP") == 0) {
        Clequ3_2321i_LNP = value;
    } else if (name.compare("Clequ3_2322i_LNP") == 0) {
        Clequ3_2322i_LNP = value;
    } else if (name.compare("Clequ3_2323i_LNP") == 0) {
        Clequ3_2323i_LNP = value;
    } else if (name.compare("Clequ3_2331i_LNP") == 0) {
        Clequ3_2331i_LNP = value;
    } else if (name.compare("Clequ3_2332i_LNP") == 0) {
        Clequ3_2332i_LNP = value;
    } else if (name.compare("Clequ3_2333i_LNP") == 0) {
        Clequ3_2333i_LNP = value;
    } else if (name.compare("Clequ3_3111i_LNP") == 0) {
        Clequ3_3111i_LNP = value;
    } else if (name.compare("Clequ3_3112i_LNP") == 0) {
        Clequ3_3112i_LNP = value;
    } else if (name.compare("Clequ3_3113i_LNP") == 0) {
        Clequ3_3113i_LNP = value;
    } else if (name.compare("Clequ3_3121i_LNP") == 0) {
        Clequ3_3121i_LNP = value;
    } else if (name.compare("Clequ3_3122i_LNP") == 0) {
        Clequ3_3122i_LNP = value;
    } else if (name.compare("Clequ3_3123i_LNP") == 0) {
        Clequ3_3123i_LNP = value;
    } else if (name.compare("Clequ3_3131i_LNP") == 0) {
        Clequ3_3131i_LNP = value;
    } else if (name.compare("Clequ3_3132i_LNP") == 0) {
        Clequ3_3132i_LNP = value;
    } else if (name.compare("Clequ3_3133i_LNP") == 0) {
        Clequ3_3133i_LNP = value;
    } else if (name.compare("Clequ3_3211i_LNP") == 0) {
        Clequ3_3211i_LNP = value;
    } else if (name.compare("Clequ3_3212i_LNP") == 0) {
        Clequ3_3212i_LNP = value;
    } else if (name.compare("Clequ3_3213i_LNP") == 0) {
        Clequ3_3213i_LNP = value;
    } else if (name.compare("Clequ3_3221i_LNP") == 0) {
        Clequ3_3221i_LNP = value;
    } else if (name.compare("Clequ3_3222i_LNP") == 0) {
        Clequ3_3222i_LNP = value;
    } else if (name.compare("Clequ3_3223i_LNP") == 0) {
        Clequ3_3223i_LNP = value;
    } else if (name.compare("Clequ3_3231i_LNP") == 0) {
        Clequ3_3231i_LNP = value;
    } else if (name.compare("Clequ3_3232i_LNP") == 0) {
        Clequ3_3232i_LNP = value;
    } else if (name.compare("Clequ3_3233i_LNP") == 0) {
        Clequ3_3233i_LNP = value;
    } else if (name.compare("Clequ3_3311i_LNP") == 0) {
        Clequ3_3311i_LNP = value;
    } else if (name.compare("Clequ3_3312i_LNP") == 0) {
        Clequ3_3312i_LNP = value;
    } else if (name.compare("Clequ3_3313i_LNP") == 0) {
        Clequ3_3313i_LNP = value;
    } else if (name.compare("Clequ3_3321i_LNP") == 0) {
        Clequ3_3321i_LNP = value;
    } else if (name.compare("Clequ3_3322i_LNP") == 0) {
        Clequ3_3322i_LNP = value;
    } else if (name.compare("Clequ3_3323i_LNP") == 0) {
        Clequ3_3323i_LNP = value;
    } else if (name.compare("Clequ3_3331i_LNP") == 0) {
        Clequ3_3331i_LNP = value;
    } else if (name.compare("Clequ3_3332i_LNP") == 0) {
        Clequ3_3332i_LNP = value;
    } else if (name.compare("Clequ3_3333i_LNP") == 0) {
        Clequ3_3333i_LNP = value;

    } else if (name.compare("Lambda_NP") == 0)
        Lambda_NP = value;
    else if (name.compare("BrHinv") == 0) {
        //  Always positive
        BrHinv = fabs(value);
    } else if (name.compare("BrHexo") == 0) {
        //  Always positive
        BrHexo = fabs(value);
    } else if (name.compare("eggFint") == 0) {
        eggFint = value;
    } else if (name.compare("eggFpar") == 0) {
        eggFpar = value;
    } else if (name.compare("ettHint") == 0) {
        ettHint = value;
    } else if (name.compare("ettHpar") == 0) {
        ettHpar = value;
    } else if (name.compare("eVBFint") == 0) {
        eVBFint = value;
    } else if (name.compare("eVBFpar") == 0) {
        eVBFpar = value;
    } else if (name.compare("eWHint") == 0) {
        eWHint = value;
    } else if (name.compare("eWHpar") == 0) {
        eWHpar = value;
    } else if (name.compare("eZHint") == 0) {
        eZHint = value;
    } else if (name.compare("eZHpar") == 0) {
        eZHpar = value;
    } else if (name.compare("eeeWBFint") == 0) {
        eeeWBFint = value;
    } else if (name.compare("eeeWBFpar") == 0) {
        eeeWBFpar = value;
    } else if (name.compare("eeeZHint") == 0) {
        eeeZHint = value;
    } else if (name.compare("eeeZHpar") == 0) {
        eeeZHpar = value;
    } else if (name.compare("eeettHint") == 0) {
        eeettHint = value;
    } else if (name.compare("eeettHpar") == 0) {
        eeettHpar = value;
    } else if (name.compare("eepWBFint") == 0) {
        eepWBFint = value;
    } else if (name.compare("eepWBFpar") == 0) {
        eepWBFpar = value;
    } else if (name.compare("eepZBFint") == 0) {
        eepZBFint = value;
    } else if (name.compare("eepZBFpar") == 0) {
        eepZBFpar = value;
    } else if (name.compare("eHggint") == 0) {
        eHggint = value;
    } else if (name.compare("eHggpar") == 0) {
        eHggpar = value;
    } else if (name.compare("eHWWint") == 0) {
        eHWWint = value;
    } else if (name.compare("eHWWpar") == 0) {
        eHWWpar = value;
    } else if (name.compare("eHZZint") == 0) {
        eHZZint = value;
    } else if (name.compare("eHZZpar") == 0) {
        eHZZpar = value;
    } else if (name.compare("eHZgaint") == 0) {
        eHZgaint = value;
    } else if (name.compare("eHZgapar") == 0) {
        eHZgapar = value;
    } else if (name.compare("eHgagaint") == 0) {
        eHgagaint = value;
    } else if (name.compare("eHgagapar") == 0) {
        eHgagapar = value;
    } else if (name.compare("eHmumuint") == 0) {
        eHmumuint = value;
    } else if (name.compare("eHmumupar") == 0) {
        eHmumupar = value;
    } else if (name.compare("eHtautauint") == 0) {
        eHtautauint = value;
    } else if (name.compare("eHtautaupar") == 0) {
        eHtautaupar = value;
    } else if (name.compare("eHccint") == 0) {
        eHccint = value;
    } else if (name.compare("eHccpar") == 0) {
        eHccpar = value;
    } else if (name.compare("eHbbint") == 0) {
        eHbbint = value;
    } else if (name.compare("eHbbpar") == 0) {
        eHbbpar = value;
    } else if (name.compare("eeeWWint") == 0) {
        eeeWWint = value;
    } else if (name.compare("edeeWWdcint") == 0) {
        edeeWWdcint = value;
    } else if (name.compare("eggFHgaga") == 0) {
        eggFHgaga = value;
    } else if (name.compare("eggFHZga") == 0) {
        eggFHZga = value;
    } else if (name.compare("eggFHZZ") == 0) {
        eggFHZZ = value;
    } else if (name.compare("eggFHWW") == 0) {
        eggFHWW = value;
    } else if (name.compare("eggFHtautau") == 0) {
        eggFHtautau = value;
    } else if (name.compare("eggFHbb") == 0) {
        eggFHbb = value;
    } else if (name.compare("eggFHmumu") == 0) {
        eggFHmumu = value;
    } else if (name.compare("eVBFHgaga") == 0) {
        eVBFHgaga = value;
    } else if (name.compare("eVBFHZga") == 0) {
        eVBFHZga = value;
    } else if (name.compare("eVBFHZZ") == 0) {
        eVBFHZZ = value;
    } else if (name.compare("eVBFHWW") == 0) {
        eVBFHWW = value;
    } else if (name.compare("eVBFHtautau") == 0) {
        eVBFHtautau = value;
    } else if (name.compare("eVBFHbb") == 0) {
        eVBFHbb = value;
    } else if (name.compare("eVBFHmumu") == 0) {
        eVBFHmumu = value;
    } else if (name.compare("eWHgaga") == 0) {
        eWHgaga = value;
    } else if (name.compare("eWHZga") == 0) {
        eWHZga = value;
    } else if (name.compare("eWHZZ") == 0) {
        eWHZZ = value;
    } else if (name.compare("eWHWW") == 0) {
        eWHWW = value;
    } else if (name.compare("eWHtautau") == 0) {
        eWHtautau = value;
    } else if (name.compare("eWHbb") == 0) {
        eWHbb = value;
    } else if (name.compare("eWHmumu") == 0) {
        eWHmumu = value;
    } else if (name.compare("eZHgaga") == 0) {
        eZHgaga = value;
    } else if (name.compare("eZHZga") == 0) {
        eZHZga = value;
    } else if (name.compare("eZHZZ") == 0) {
        eZHZZ = value;
    } else if (name.compare("eZHWW") == 0) {
        eZHWW = value;
    } else if (name.compare("eZHtautau") == 0) {
        eZHtautau = value;
    } else if (name.compare("eZHbb") == 0) {
        eZHbb = value;
    } else if (name.compare("eZHmumu") == 0) {
        eZHmumu = value;
    } else if (name.compare("ettHgaga") == 0) {
        ettHgaga = value;
    } else if (name.compare("ettHZga") == 0) {
        ettHZga = value;
    } else if (name.compare("ettHZZ") == 0) {
        ettHZZ = value;
    } else if (name.compare("ettHWW") == 0) {
        ettHWW = value;
    } else if (name.compare("ettHtautau") == 0) {
        ettHtautau = value;
    } else if (name.compare("ettHbb") == 0) {
        ettHbb = value;
    } else if (name.compare("ettHmumu") == 0) {
        ettHmumu = value;
    } else if (name.compare("eVBFHinv") == 0) {
        eVBFHinv = value;
    } else if (name.compare("eVHinv") == 0) {
        eVHinv = value;
    } else
        NPbase::setParameter(name, value);
}

//I think that for this model, with so many parameters, it's better to include only those we're really interested in
//Since all the parameters are initialized to zero we can just skip the CheckParameters for this model

/*bool NPSMEFTd6General::CheckParameters(const std::map<std::string, double>& DPars)
{
    for (int i = 0; i < NNPSMEFTd6GeneralVars; i++) {
        if (DPars.find(NPSMEFTd6GeneralVars[i]) == DPars.end()) {
            std::cout << "ERROR: Missing mandatory NPSMEFTd6General parameter "
                    << NPSMEFTd6GeneralVars << std::endl;
            raiseMissingModelParameterCount();
            addMissingModelParameter(NPSMEFTd6GeneralVars[i]);
        }
    }
    return (NPbase::CheckParameters(DPars));
}
 */

bool NPSMEFTd6General::setFlag(const std::string name, const bool value) {
    bool res = false;
    if (name.compare("MWinput") == 0) {
        FlagMWinput = value;
        //We need to fix FlagMWinput also in the StandardModel
        res = NPbase::setFlag(name, value);
        res = trueSM.setFlag(name, value);
        //    res = true;    
    } else if (name.compare("QuadraticTerms") == 0) {
        FlagQuadraticTerms = value;
        if (value) setModelLinearized(false);
        if (value) setModelNPquadratic(true); //AG:added
        res = true;
    } else if (name.compare("HiggsSM") == 0) {
        FlagHiggsSM = value;
        res = true;
    } else if (name.compare("LoopHd6") == 0) {
        FlagLoopHd6 = value;
        res = true;
    } else if (name.compare("LoopH3d6Quad") == 0) {
        FlagLoopH3d6Quad = value;
        res = true; 
    } else if (name.compare("RGEci") == 0) {
        FlagRGEci = value;
        res = true;
    } else if (name.compare("CorrsInSMRunning") == 0) {
        FlagCorrsInSMRunning = value;
        res = true;
    } else if (name.compare("multiScaleRGE") == 0) {
        FlagmultiScaleRGE = value;
        res = true;
    } else if (name.compare("finiteNLO") == 0) {
        FlagfiniteNLO = value;
        res = true;
    } else if (name.compare("matchLEFT") == 0) {
        FlagmatchLEFT = value;
        res = true;
    } else if (name.compare("NewTerms") == 0) {
        FlagNewTerms = value;
        res = true;
    } else
        res = NPbase::setFlag(name, value);
    
    if (FlagMWinput) {
        //  MW scheme
        cAsch = 0.;
        cWsch = 1.;
    } else {
        //  ALpha scheme
        cAsch = 1.;
        cWsch = 0.;
    }
    
    if (!FlagLoopHd6) {
        cLHd6 = 0.0;
    } else {
        cLHd6 = 1.0;
    }
    
    if (!FlagHiggsSM) {
        cHSM = 0.0;
    } else {
        cHSM = 1.0;
    }
    
    if (FlagLoopH3d6Quad || FlagQuadraticTerms) {
        cLH3d62 = 1.0;
    } else {
        cLH3d62 = 0.0;
    }
    
    if (!FlagfiniteNLO) {
        cNLOd6 = 0.0;
    } else {
        cNLOd6 = 1.0;
    }

    return (res);
}

bool NPSMEFTd6General::setFlagStr(const std::string name, const std::string value)
{
    if (name.compare("SMEFTBasisFlag") == 0) {
        SMEFTBasisFlag = value;
        
        if (SMEFTBasisFlag == "UP") {
            flavBas = 1;
        } else if (SMEFTBasisFlag == "DOWN") {
            flavBas = 2;
        } else
            throw std::runtime_error("Bad argument in SMEFTBasisFlag. (Only UP or DOWN are currently allowed)");
        
        return true;
    } else
        return NPbase::setFlagStr(name, value);
    return false;
}

////////////////////////////////////////////////////////////////////////

// Coefficients of fermionic operators in the mass basis
    
// Coefficients are assumed to be complex, "name" is the name without R or I at the end. That is added here 
inline gslpp::complex NPSMEFTd6General::getSMEFTCoeffEWMB(const std::string name, int i, int j, gslpp::matrix<gslpp::complex> Vi, gslpp::matrix<gslpp::complex>  Vj) const
{
        std::string nameR, nameI;
        gslpp::complex Cij;
        
        // Add the R and I to the name of the operator, to call the real and imaginary parts of the operator from RGEsolver
        nameR = name;
        nameI = name;
        
        nameR.push_back('R');
        nameI.push_back('I');

        Cij = 0.;
        
        for (int k = 0; k < 3; k++)
            for (int l = 0; l < 3; l++) 
            {
                Cij +=  Vi(i,k) * ( getSMEFTCoeffEW(nameR, k, l) + gslpp::complex::i() * getSMEFTCoeffEW(nameI, k, l) ) * Vj(l,j);
            }
        
        return Cij;
}
    
inline gslpp::complex NPSMEFTd6General::getSMEFTCoeffEWMB(const std::string name, int i, int j, int k, int l, gslpp::matrix<gslpp::complex> Vi, gslpp::matrix<gslpp::complex>  Vj, gslpp::matrix<gslpp::complex> Vk, gslpp::matrix<gslpp::complex>  Vl) const
{
        std::string nameR, nameI;
        gslpp::complex Cijkl;
        
        // Add the R and I to the name of the operator, to call the real and imaginary parts of the operator from RGEsolver
        nameR = name;
        nameI = name;
        
        nameR.push_back('R');
        nameI.push_back('I');

        Cijkl = 0.;
        
        for (int m1 = 0; m1 < 3; m1++)
            for (int n1 = 0; n1 < 3; n1++) 
                for (int m2 = 0; m2 < 3; m2++) 
                    for (int n2 = 0; n2 < 3; n2++)
                    {
                        Cijkl +=  Vi(i,m1) * Vk(k,m2) * ( getSMEFTCoeffEW(nameR, m1, n1, m2, n2) + gslpp::complex::i() * getSMEFTCoeffEW(nameI, m1, n1, m2, n2) ) * Vj(n1,j) * Vl(n2,l);
                    }
        
        return Cijkl;   
}

////////////////////////////////////////////////////////////////////////

// Functions to select the SMEFT WC at different energy scales 

double NPSMEFTd6General::getSMEFTCoeff(const std::string name, const double mu) const {
    //return SMEFTEvolEW.GetCoefficient(name);
        
    if ( (!FlagmultiScaleRGE) || (mu <= 120.0) ) {
        // This is always returned if FlagmultiScaleRGE=false        
        return SMEFTEvolEW.GetCoefficient(name);
        
    } else if ( mu <= 220.0 ) {
        
        return SMEFTEvolMH.GetCoefficient(name);
        
    } else if ( mu <= 320.0 ) {
        
        return SMEFTEvol240.GetCoefficient(name);
        
    } else if ( mu <= 490.0 ) {
        
        return SMEFTEvol365.GetCoefficient(name);
        
    } else if ( mu <= 980.0 ) {
        
        return SMEFTEvol550.GetCoefficient(name);
        
    } else if ( mu <= 1400.0 ) {
        
        return SMEFTEvol1000.GetCoefficient(name);
        
    } else if ( mu <= 2800.0 ) {
        
        return SMEFTEvol1500.GetCoefficient(name);
        
    } else if ( mu <= 4500.0 ) {
        
        return SMEFTEvol3000.GetCoefficient(name);
        
    } else if ( mu <= 9000.0 ) {
        
        return SMEFTEvol5000.GetCoefficient(name);

    } else {
        //std::cout << "Warning: RGE scale not defined for operator = " << name << std::endl;
        //std::cout << "Returning value at Lambda(NP) = " << muw << std::endl;

        return SMEFTEvolUV.GetCoefficient(name);

    }
    
    //double Cimu[5] = {SMEFTEvolEW.GetCoefficient(name), SMEFTEvolMH.GetCoefficient(name), SMEFTEvol240.GetCoefficient(name), SMEFTEvol365.GetCoefficient(name), SMEFTEvol550.GetCoefficient(name)};
    //int imu;
    //double WCmu;    
    
    //if (abs(log(mu/muw)) <= 0.2 ) {
    //    imu = 0;
    //    return Cimu[imu];
    //} else if ( abs(log(mu/125.1)) <= 0.35 ) {
    //    imu = 1;
    //    return Cimu[imu];
    //} else if ( abs(log(mu/240.)) <= 0.35 ) {
    //    imu = 2;
    //    return Cimu[imu];
    //} else if ( abs(log(mu/365.)) <= 0.2 ) {
    //    imu = 3;
    //    return Cimu[imu];
    //} else if ( abs(log(mu/500.)) <= 0.2 ) {
    //    imu = 4;
    //    return Cimu[imu];
    //} else {
    //    std::cout << "Warning: RGE scale not defined for operator = " << name << std::endl;
    //    std::cout << "Returning value at muW = " << muw << std::endl;
    //    imu = 0;
    //    return Cimu[imu];
    //}
    
    // The values of the Wilson coefficients, evaluated at the different scales, from top (Lambda) to bottom (MW)
    //double Cimu[6] = {SMEFTEvolUV.GetCoefficient(name), SMEFTEvol550.GetCoefficient(name), SMEFTEvol365.GetCoefficient(name), SMEFTEvol240.GetCoefficient(name), SMEFTEvolMH.GetCoefficient(name), SMEFTEvolEW.GetCoefficient(name)};
    //double t1, t2, t3, t4, t5;
    //double x1, x2, x3, x4, x5;
    
    //t1 = log(mu/Lambda_NP);
    //t2 = t1*t1;
    //t3 = t2*t1;
    //t4 = t3*t1;
    //t5 = t4*t1;
    
    //x1 = xlog1(Cimu[0], Cimu[1], Cimu[2], Cimu[3], Cimu[4], Cimu[5]);
    //x2 = xlog2(Cimu[0], Cimu[1], Cimu[2], Cimu[3], Cimu[4], Cimu[5]);
    //x3 = xlog3(Cimu[0], Cimu[1], Cimu[2], Cimu[3], Cimu[4], Cimu[5]);
    //x4 = xlog4(Cimu[0], Cimu[1], Cimu[2], Cimu[3], Cimu[4], Cimu[5]);
    //x5 = xlog5(Cimu[0], Cimu[1], Cimu[2], Cimu[3], Cimu[4], Cimu[5]);

    //return (Cimu[0] + x1 * t1 + x2 * t2 + x3 * t3 + x4 * t4 + x5 * t5); 
}
    
double NPSMEFTd6General::getSMEFTCoeff(const std::string name, int i, int j, const double mu) const {
    //return SMEFTEvolEW.GetCoefficient(name, i, j);
    
    if ( (!FlagmultiScaleRGE) || (mu <= 120.0) ) {
        // This is always returned if FlagmultiScaleRGE=false        
        return SMEFTEvolEW.GetCoefficient(name, i, j);
        
    } else if ( mu <= 220.0 ) {
        
        return SMEFTEvolMH.GetCoefficient(name, i, j);
        
    } else if ( mu <= 320.0 ) {
        
        return SMEFTEvol240.GetCoefficient(name, i, j);
        
    } else if ( mu <= 490.0 ) {
        
        return SMEFTEvol365.GetCoefficient(name, i, j);
        
    } else if ( mu <= 980.0 ) {
        
        return SMEFTEvol550.GetCoefficient(name, i, j);
        
    } else if ( mu <= 1400.0 ) {
        
        return SMEFTEvol1000.GetCoefficient(name, i, j);
        
    } else if ( mu <= 2800.0 ) {
        
        return SMEFTEvol1500.GetCoefficient(name, i, j);
        
    } else if ( mu <= 4500.0 ) {
        
        return SMEFTEvol3000.GetCoefficient(name, i, j);
        
    } else if ( mu <= 9000.0 ) {
        
        return SMEFTEvol5000.GetCoefficient(name, i, j);

    } else {
        //std::cout << "Warning: RGE scale not defined for operator = " << name << std::endl;
        //std::cout << "Returning value at Lambda(NP) = " << muw << std::endl;

        return SMEFTEvolUV.GetCoefficient(name, i, j);

    }
    
    //double Cimu[5] = {SMEFTEvolEW.GetCoefficient(name, i, j), SMEFTEvolMH.GetCoefficient(name, i, j), SMEFTEvol240.GetCoefficient(name, i, j), SMEFTEvol365.GetCoefficient(name, i, j), SMEFTEvol550.GetCoefficient(name, i, j)};
    //int imu;
    ////double WCmu;
    
    //if (abs(log(mu/muw)) <= 0.2 ) {
    //    imu = 0;
    //    return Cimu[imu];
    //} else if ( abs(log(mu/125.1)) <= 0.35 ) {
    //    imu = 1;
    //    return Cimu[imu];
    //} else if ( abs(log(mu/240.)) <= 0.35 ) {
    //    imu = 2;
    //    return Cimu[imu];
    //} else if ( abs(log(mu/365.)) <= 0.2 ) {
    //    imu = 3;
    //    return Cimu[imu];
    //} else if ( abs(log(mu/500.)) <= 0.2 ) {
    //    imu = 4;
    //    return Cimu[imu];
    //} else {
    //    std::cout << "Warning: RGE scale not defined for operator = " << name << std::endl;
    //    std::cout << "Returning value at muW = " << muw << std::endl;
    //    imu = 0;
    //    return Cimu[imu];
    //}
    
    // The values of the Wilson coefficients, evaluated at the different scales, from top (Lambda) to bottom (MW)
    //double Cimu[6] = {SMEFTEvolUV.GetCoefficient(name, i, j), SMEFTEvol550.GetCoefficient(name, i, j), SMEFTEvol365.GetCoefficient(name, i, j), SMEFTEvol240.GetCoefficient(name, i, j), SMEFTEvolMH.GetCoefficient(name, i, j), SMEFTEvolEW.GetCoefficient(name, i, j)};
    //double t1, t2, t3, t4, t5;
    //double x1, x2, x3, x4, x5;
    
    //t1 = log(mu/Lambda_NP);
    //t2 = t1*t1;
    //t3 = t2*t1;
    //t4 = t3*t1;
    //t5 = t4*t1;
    
    //x1 = xlog1(Cimu[0], Cimu[1], Cimu[2], Cimu[3], Cimu[4], Cimu[5]);
    //x2 = xlog2(Cimu[0], Cimu[1], Cimu[2], Cimu[3], Cimu[4], Cimu[5]);
    //x3 = xlog3(Cimu[0], Cimu[1], Cimu[2], Cimu[3], Cimu[4], Cimu[5]);
    //x4 = xlog4(Cimu[0], Cimu[1], Cimu[2], Cimu[3], Cimu[4], Cimu[5]);
    //x5 = xlog5(Cimu[0], Cimu[1], Cimu[2], Cimu[3], Cimu[4], Cimu[5]);

    //return (Cimu[0] + x1 * t1 + x2 * t2 + x3 * t3 + x4 * t4 + x5 * t5);     
}
    
double NPSMEFTd6General::getSMEFTCoeff(const std::string name, int i, int j, int k, int l, const double mu) const {
    //return SMEFTEvolEW.GetCoefficient(name, i, j, k, l);
    
    if ( (!FlagmultiScaleRGE) || (mu <= 120.0) ) {
        // This is always returned if FlagmultiScaleRGE=false        
        return SMEFTEvolEW.GetCoefficient(name, i, j, k, l);
        
    } else if ( mu <= 220.0 ) {
        
        return SMEFTEvolMH.GetCoefficient(name, i, j, k, l);
        
    } else if ( mu <= 320.0 ) {
        
        return SMEFTEvol240.GetCoefficient(name, i, j, k, l);
        
    } else if ( mu <= 490.0 ) {
        
        return SMEFTEvol365.GetCoefficient(name, i, j, k, l);
        
    } else if ( mu <= 980.0 ) {
        
        return SMEFTEvol550.GetCoefficient(name, i, j, k, l);
        
    } else if ( mu <= 1400.0 ) {
        
        return SMEFTEvol1000.GetCoefficient(name, i, j, k, l);
        
    } else if ( mu <= 2800.0 ) {
        
        return SMEFTEvol1500.GetCoefficient(name, i, j, k, l);
        
    } else if ( mu <= 4500.0 ) {
        
        return SMEFTEvol3000.GetCoefficient(name, i, j, k, l);
        
    } else if ( mu <= 9000.0 ) {
        
        return SMEFTEvol5000.GetCoefficient(name, i, j, k, l);
        
    } else {
        //std::cout << "Warning: RGE scale not defined for operator = " << name << std::endl;
        //std::cout << "Returning value at Lambda(NP) = " << muw << std::endl;

        return SMEFTEvolUV.GetCoefficient(name, i, j, k, l);

    }
    
    //double Cimu[5] = {SMEFTEvolEW.GetCoefficient(name, i, j, k, l), SMEFTEvolMH.GetCoefficient(name, i, j, k, l), SMEFTEvol240.GetCoefficient(name, i, j, k, l), SMEFTEvol365.GetCoefficient(name, i, j, k, l), SMEFTEvol550.GetCoefficient(name, i, j, k, l)};    
    //int imu;
    ////double WCmu;
    
    //if (abs(log(mu/muw)) <= 0.2 ) {
    //    imu = 0;
    //    return Cimu[imu];
    //} else if ( abs(log(mu/125.1)) <= 0.35 ) {
    //    imu = 1;
    //    return Cimu[imu];
    //} else if ( abs(log(mu/240.)) <= 0.35 ) {
    //    imu = 2;
    //    return Cimu[imu];
    //} else if ( abs(log(mu/365.)) <= 0.2 ) {
    //    imu = 3;
    //    return Cimu[imu];
    //} else if ( abs(log(mu/500.)) <= 0.2 ) {
    //    imu = 4;
    //    return Cimu[imu];
    //} else {
    //    std::cout << "Warning: RGE scale not defined for operator = " << name << std::endl;
    //    std::cout << "Returning value at muW = " << muw << std::endl;
    //    imu = 0;
    //    return Cimu[imu];
    //}
    
    // The values of the Wilson coefficients, evaluated at the different scales, from top (Lambda) to bottom (MW)
    //double Cimu[6] = { SMEFTEvolUV.GetCoefficient(name, i, j, k, l), SMEFTEvol550.GetCoefficient(name, i, j, k, l), SMEFTEvol365.GetCoefficient(name, i, j, k, l), SMEFTEvol240.GetCoefficient(name, i, j, k, l), SMEFTEvolMH.GetCoefficient(name, i, j, k, l), SMEFTEvolEW.GetCoefficient(name, i, j, k, l)};    
    //double t1, t2, t3, t4, t5;
    //double x1, x2, x3, x4, x5;
    
    //t1 = log(mu/Lambda_NP);
    //t2 = t1*t1;
    //t3 = t2*t1;
    //t4 = t3*t1;
    //t5 = t4*t1;
    
    //x1 = xlog1(Cimu[0], Cimu[1], Cimu[2], Cimu[3], Cimu[4], Cimu[5]);
    //x2 = xlog2(Cimu[0], Cimu[1], Cimu[2], Cimu[3], Cimu[4], Cimu[5]);
    //x3 = xlog3(Cimu[0], Cimu[1], Cimu[2], Cimu[3], Cimu[4], Cimu[5]);
    //x4 = xlog4(Cimu[0], Cimu[1], Cimu[2], Cimu[3], Cimu[4], Cimu[5]);
    //x5 = xlog5(Cimu[0], Cimu[1], Cimu[2], Cimu[3], Cimu[4], Cimu[5]);

    //return (Cimu[0] + x1 * t1 + x2 * t2 + x3 * t3 + x4 * t4 + x5 * t5);     
}


// Functions used by the above to compute the approximation by a polynomial up to log^5 to the RG evolution
// Coeff of term proportional to log(mu/Lambda)
double NPSMEFTd6General::xlog1(const double C1Lambda, const double C2, const double C3,  const double C4, const double C5, const double C6muw) const{
    
    double t2, t3, t4, t5, tW;
    double t22, t23, t24, t25;
    double t32, t33, t34, t35;
    double t42, t43, t44, t45;
    double t52, t53, t54, t55;
    double tW2, tW3, tW4, tW5;
    double xlog, den;
    
    // The logs associated to each evolutor, ordered from top to bottom;
    t2 = tmu2;
    t3 = tmu3;
    t4 = tmu4;
    t5 = tmu5; 
    tW = tmuw; 
  
    t22 = t2 * t2; t23 = t22 * t2; t24 = t23 * t2; t25 = t24 * t2;
    t32 = t3 * t3; t33 = t32 * t3; t34 = t33 * t3; t35 = t34 * t3;
    t42 = t4 * t4; t43 = t42 * t4; t44 = t43 * t4; t45 = t44 * t4;
    t52 = t5 * t5; t53 = t52 * t5; t54 = t53 * t5; t55 = t54 * t5;
    tW2 = tW * tW; tW3 = tW2 * tW; tW4 = tW3 * tW; tW5 = tW4 * tW;
    
    // The denominator and numerator of the expression
    den = t2*(t2 - t3)*t3*(t2 - t4)*(t3 - t4)*t4*(t2 - t5)*(t3 - t5)*(t4 - t5)*t5*(t2 - tW)*(t3 - tW)*(t4 - tW)*tW*(-t5 + tW);
    
    xlog = C6muw*(-(t25*t34*t43*t52) + t24*t35*t43*t52 + t25*t33*t44*t52 - t23*t35*t44*t52 - t24*t33*t45*t52 + t23*t34*t45*t52 + t25*t34*t42*t53 - t24*t35*t42*t53 
            - t25*t32*t44*t53 + t22*t35*t44*t53 + t24*t32*t45*t53 - t22*t34*t45*t53 - t25*t33*t42*t54 + t23*t35*t42*t54 + t25*t32*t43*t54 - t22*t35*t43*t54 - t23*t32*t45*t54 
            + t22*t33*t45*t54 + t24*t33*t42*t55 - t23*t34*t42*t55 - t24*t32*t43*t55 + t22*t34*t43*t55 + t23*t32*t44*t55 - t22*t33*t44*t55) 
            + C5*(t25*t34*t43*tW2 - t24*t35*t43*tW2 - t25*t33*t44*tW2 + t23*t35*t44*tW2 + t24*t33*t45*tW2 - t23*t34*t45*tW2 - t25*t34*t42*tW3 + t24*t35*t42*tW3 
            + t25*t32*t44*tW3 - t22*t35*t44*tW3 - t24*t32*t45*tW3 + t22*t34*t45*tW3 + t25*t33*t42*tW4 - t23*t35*t42*tW4 - t25*t32*t43*tW4 + t22*t35*t43*tW4 + t23*t32*t45*tW4 
            - t22*t33*t45*tW4 - t24*t33*t42*tW5 + t23*t34*t42*tW5 + t24*t32*t43*tW5 - t22*t34*t43*tW5 - t23*t32*t44*tW5 + t22*t33*t44*tW5) 
            + C4*(-(t25*t34*t53*tW2) + t24*t35*t53*tW2 + t25*t33*t54*tW2 - t23*t35*t54*tW2 - t24*t33*t55*tW2 + t23*t34*t55*tW2 + t25*t34*t52*tW3 - t24*t35*t52*tW3 
            - t25*t32*t54*tW3 + t22*t35*t54*tW3 + t24*t32*t55*tW3 - t22*t34*t55*tW3 - t25*t33*t52*tW4 + t23*t35*t52*tW4 + t25*t32*t53*tW4 - t22*t35*t53*tW4 - t23*t32*t55*tW4 
            + t22*t33*t55*tW4 + t24*t33*t52*tW5 - t23*t34*t52*tW5 - t24*t32*t53*tW5 + t22*t34*t53*tW5 + t23*t32*t54*tW5 - t22*t33*t54*tW5) 
            + C3*(t25*t44*t53*tW2 - t24*t45*t53*tW2 - t25*t43*t54*tW2 + t23*t45*t54*tW2 + t24*t43*t55*tW2 - t23*t44*t55*tW2 - t25*t44*t52*tW3 + t24*t45*t52*tW3 
            + t25*t42*t54*tW3 - t22*t45*t54*tW3 - t24*t42*t55*tW3 + t22*t44*t55*tW3 + t25*t43*t52*tW4 - t23*t45*t52*tW4 - t25*t42*t53*tW4 + t22*t45*t53*tW4 + t23*t42*t55*tW4 
            - t22*t43*t55*tW4 - t24*t43*t52*tW5 + t23*t44*t52*tW5 + t24*t42*t53*tW5 - t22*t44*t53*tW5 - t23*t42*t54*tW5 + t22*t43*t54*tW5) 
            + C2*(-(t35*t44*t53*tW2) + t34*t45*t53*tW2 + t35*t43*t54*tW2 - t33*t45*t54*tW2 - t34*t43*t55*tW2 + t33*t44*t55*tW2 + t35*t44*t52*tW3 - t34*t45*t52*tW3 
            - t35*t42*t54*tW3 + t32*t45*t54*tW3 + t34*t42*t55*tW3 - t32*t44*t55*tW3 - t35*t43*t52*tW4 + t33*t45*t52*tW4 + t35*t42*t53*tW4 - t32*t45*t53*tW4 - t33*t42*t55*tW4 
            + t32*t43*t55*tW4 + t34*t43*t52*tW5 - t33*t44*t52*tW5 - t34*t42*t53*tW5 + t32*t44*t53*tW5 + t33*t42*t54*tW5 - t32*t43*t54*tW5) 
            + C1Lambda*(t25*t34*t43*t52 - t24*t35*t43*t52 - t25*t33*t44*t52 + t23*t35*t44*t52 + t24*t33*t45*t52 - t23*t34*t45*t52 - t25*t34*t42*t53 + t24*t35*t42*t53 + t25*t32*t44*t53 
            - t22*t35*t44*t53 - t24*t32*t45*t53 + t22*t34*t45*t53 + t25*t33*t42*t54 - t23*t35*t42*t54 - t25*t32*t43*t54 + t22*t35*t43*t54 + t23*t32*t45*t54 - t22*t33*t45*t54 
            - t24*t33*t42*t55 + t23*t34*t42*t55 + t24*t32*t43*t55 - t22*t34*t43*t55 - t23*t32*t44*t55 + t22*t33*t44*t55 - t25*t34*t43*tW2 + t24*t35*t43*tW2 + t25*t33*t44*tW2 
            - t23*t35*t44*tW2 - t24*t33*t45*tW2 + t23*t34*t45*tW2 + t25*t34*t53*tW2 - t24*t35*t53*tW2 - t25*t44*t53*tW2 + t35*t44*t53*tW2 + t24*t45*t53*tW2 - t34*t45*t53*tW2 
            - t25*t33*t54*tW2 + t23*t35*t54*tW2 + t25*t43*t54*tW2 - t35*t43*t54*tW2 - t23*t45*t54*tW2 + t33*t45*t54*tW2 + t24*t33*t55*tW2 - t23*t34*t55*tW2 - t24*t43*t55*tW2 
            + t34*t43*t55*tW2 + t23*t44*t55*tW2 - t33*t44*t55*tW2 + t25*t34*t42*tW3 - t24*t35*t42*tW3 - t25*t32*t44*tW3 + t22*t35*t44*tW3 + t24*t32*t45*tW3 - t22*t34*t45*tW3 
            - t25*t34*t52*tW3 + t24*t35*t52*tW3 + t25*t44*t52*tW3 - t35*t44*t52*tW3 - t24*t45*t52*tW3 + t34*t45*t52*tW3 + t25*t32*t54*tW3 - t22*t35*t54*tW3 - t25*t42*t54*tW3 
            + t35*t42*t54*tW3 + t22*t45*t54*tW3 - t32*t45*t54*tW3 - t24*t32*t55*tW3 + t22*t34*t55*tW3 + t24*t42*t55*tW3 - t34*t42*t55*tW3 - t22*t44*t55*tW3 + t32*t44*t55*tW3 
            - t25*t33*t42*tW4 + t23*t35*t42*tW4 + t25*t32*t43*tW4 - t22*t35*t43*tW4 - t23*t32*t45*tW4 + t22*t33*t45*tW4 + t25*t33*t52*tW4 - t23*t35*t52*tW4 - t25*t43*t52*tW4 
            + t35*t43*t52*tW4 + t23*t45*t52*tW4 - t33*t45*t52*tW4 - t25*t32*t53*tW4 + t22*t35*t53*tW4 + t25*t42*t53*tW4 - t35*t42*t53*tW4 - t22*t45*t53*tW4 + t32*t45*t53*tW4 
            + t23*t32*t55*tW4 - t22*t33*t55*tW4 - t23*t42*t55*tW4 + t33*t42*t55*tW4 + t22*t43*t55*tW4 - t32*t43*t55*tW4 + t24*t33*t42*tW5 - t23*t34*t42*tW5 - t24*t32*t43*tW5 
            + t22*t34*t43*tW5 + t23*t32*t44*tW5 - t22*t33*t44*tW5 - t24*t33*t52*tW5 + t23*t34*t52*tW5 + t24*t43*t52*tW5 - t34*t43*t52*tW5 - t23*t44*t52*tW5 + t33*t44*t52*tW5 
            + t24*t32*t53*tW5 - t22*t34*t53*tW5 - t24*t42*t53*tW5 + t34*t42*t53*tW5 + t22*t44*t53*tW5 - t32*t44*t53*tW5 - t23*t32*t54*tW5 + t22*t33*t54*tW5 + t23*t42*t54*tW5 
            - t33*t42*t54*tW5 - t22*t43*t54*tW5 + t32*t43*t54*tW5);

    return xlog/den;
}
    // Coeff of term proportional to log^2(mu/Lambda)
double NPSMEFTd6General::xlog2(const double C1Lambda, const double C2, const double C3,  const double C4, const double C5, const double C6muw) const{
    
    double t2, t3, t4, t5, tW;
    double t22, t23, t24, t25;
    double t32, t33, t34, t35;
    double t42, t43, t44, t45;
    double t52, t53, t54, t55;
    double tW2, tW3, tW4, tW5;
    double xlog, den;
    
    // The logs associated to each evolutor, ordered from top to bottom;
    t2 = tmu2;
    t3 = tmu3;
    t4 = tmu4;
    t5 = tmu5; 
    tW = tmuw; 
  
    t22 = t2 * t2; t23 = t22 * t2; t24 = t23 * t2; t25 = t24 * t2;
    t32 = t3 * t3; t33 = t32 * t3; t34 = t33 * t3; t35 = t34 * t3;
    t42 = t4 * t4; t43 = t42 * t4; t44 = t43 * t4; t45 = t44 * t4;
    t52 = t5 * t5; t53 = t52 * t5; t54 = t53 * t5; t55 = t54 * t5;
    tW2 = tW * tW; tW3 = tW2 * tW; tW4 = tW3 * tW; tW5 = tW4 * tW;
    
    // The denominator and numerator of the expression
    den = t2*(t2 - t3)*t3*(t2 - t4)*(t3 - t4)*t4*(t2 - t5)*(t3 - t5)*(t4 - t5)*t5*tW*(-t2 + tW)*(-t3 + tW)*(-t4 + tW)*(-t5 + tW);
    
    xlog = C6muw*(-(t25*t34*t43*t5) + t24*t35*t43*t5 + t25*t33*t44*t5 - t23*t35*t44*t5 - t24*t33*t45*t5 + t23*t34*t45*t5 + t25*t34*t4*t53 - t24*t35*t4*t53 - t25*t3*t44*t53 
            + t2*t35*t44*t53 + t24*t3*t45*t53 - t2*t34*t45*t53 - t25*t33*t4*t54 + t23*t35*t4*t54 + t25*t3*t43*t54 - t2*t35*t43*t54 - t23*t3*t45*t54 + t2*t33*t45*t54 
            + t24*t33*t4*t55 - t23*t34*t4*t55 - t24*t3*t43*t55 + t2*t34*t43*t55 + t23*t3*t44*t55 - t2*t33*t44*t55) 
            + C5*(t25*t34*t43*tW - t24*t35*t43*tW - t25*t33*t44*tW + t23*t35*t44*tW + t24*t33*t45*tW - t23*t34*t45*tW - t25*t34*t4*tW3 + t24*t35*t4*tW3 + t25*t3*t44*tW3 
            - t2*t35*t44*tW3 - t24*t3*t45*tW3 + t2*t34*t45*tW3 + t25*t33*t4*tW4 - t23*t35*t4*tW4 - t25*t3*t43*tW4 + t2*t35*t43*tW4 + t23*t3*t45*tW4 - t2*t33*t45*tW4 
            - t24*t33*t4*tW5 + t23*t34*t4*tW5 + t24*t3*t43*tW5 - t2*t34*t43*tW5 - t23*t3*t44*tW5 + t2*t33*t44*tW5) 
            + C4*(-(t25*t34*t53*tW) + t24*t35*t53*tW + t25*t33*t54*tW - t23*t35*t54*tW - t24*t33*t55*tW + t23*t34*t55*tW + t25*t34*t5*tW3 - t24*t35*t5*tW3 - t25*t3*t54*tW3 
            + t2*t35*t54*tW3 + t24*t3*t55*tW3 - t2*t34*t55*tW3 - t25*t33*t5*tW4 + t23*t35*t5*tW4 + t25*t3*t53*tW4 - t2*t35*t53*tW4 - t23*t3*t55*tW4 + t2*t33*t55*tW4 
            + t24*t33*t5*tW5 - t23*t34*t5*tW5 - t24*t3*t53*tW5 + t2*t34*t53*tW5 + t23*t3*t54*tW5 - t2*t33*t54*tW5) 
            + C3*(t25*t44*t53*tW - t24*t45*t53*tW - t25*t43*t54*tW + t23*t45*t54*tW + t24*t43*t55*tW - t23*t44*t55*tW - t25*t44*t5*tW3 + t24*t45*t5*tW3 + t25*t4*t54*tW3 
            - t2*t45*t54*tW3 - t24*t4*t55*tW3 + t2*t44*t55*tW3 + t25*t43*t5*tW4 - t23*t45*t5*tW4 - t25*t4*t53*tW4 + t2*t45*t53*tW4 + t23*t4*t55*tW4 - t2*t43*t55*tW4 
            - t24*t43*t5*tW5 + t23*t44*t5*tW5 + t24*t4*t53*tW5 - t2*t44*t53*tW5 - t23*t4*t54*tW5 + t2*t43*t54*tW5) 
            + C2*(-(t35*t44*t53*tW) + t34*t45*t53*tW + t35*t43*t54*tW - t33*t45*t54*tW - t34*t43*t55*tW + t33*t44*t55*tW + t35*t44*t5*tW3 - t34*t45*t5*tW3 - t35*t4*t54*tW3 
            + t3*t45*t54*tW3 + t34*t4*t55*tW3 - t3*t44*t55*tW3 - t35*t43*t5*tW4 + t33*t45*t5*tW4 + t35*t4*t53*tW4 - t3*t45*t53*tW4 - t33*t4*t55*tW4 + t3*t43*t55*tW4 
            + t34*t43*t5*tW5 - t33*t44*t5*tW5 - t34*t4*t53*tW5 + t3*t44*t53*tW5 + t33*t4*t54*tW5 - t3*t43*t54*tW5) 
            + C1Lambda*(t25*t34*t43*t5 - t24*t35*t43*t5 - t25*t33*t44*t5 + t23*t35*t44*t5 + t24*t33*t45*t5 - t23*t34*t45*t5 - t25*t34*t4*t53 + t24*t35*t4*t53 + t25*t3*t44*t53 
            - t2*t35*t44*t53 - t24*t3*t45*t53 + t2*t34*t45*t53 + t25*t33*t4*t54 - t23*t35*t4*t54 - t25*t3*t43*t54 + t2*t35*t43*t54 + t23*t3*t45*t54 - t2*t33*t45*t54 
            - t24*t33*t4*t55 + t23*t34*t4*t55 + t24*t3*t43*t55 - t2*t34*t43*t55 - t23*t3*t44*t55 + t2*t33*t44*t55 - t25*t34*t43*tW + t24*t35*t43*tW + t25*t33*t44*tW 
            - t23*t35*t44*tW - t24*t33*t45*tW + t23*t34*t45*tW + t25*t34*t53*tW - t24*t35*t53*tW - t25*t44*t53*tW + t35*t44*t53*tW + t24*t45*t53*tW - t34*t45*t53*tW 
            - t25*t33*t54*tW + t23*t35*t54*tW + t25*t43*t54*tW - t35*t43*t54*tW - t23*t45*t54*tW + t33*t45*t54*tW + t24*t33*t55*tW - t23*t34*t55*tW - t24*t43*t55*tW 
            + t34*t43*t55*tW + t23*t44*t55*tW - t33*t44*t55*tW + t25*t34*t4*tW3 - t24*t35*t4*tW3 - t25*t3*t44*tW3 + t2*t35*t44*tW3 + t24*t3*t45*tW3 - t2*t34*t45*tW3 
            - t25*t34*t5*tW3 + t24*t35*t5*tW3 + t25*t44*t5*tW3 - t35*t44*t5*tW3 - t24*t45*t5*tW3 + t34*t45*t5*tW3 + t25*t3*t54*tW3 - t2*t35*t54*tW3 - t25*t4*t54*tW3 
            + t35*t4*t54*tW3 + t2*t45*t54*tW3 - t3*t45*t54*tW3 - t24*t3*t55*tW3 + t2*t34*t55*tW3 + t24*t4*t55*tW3 - t34*t4*t55*tW3 - t2*t44*t55*tW3 + t3*t44*t55*tW3 
            - t25*t33*t4*tW4 + t23*t35*t4*tW4 + t25*t3*t43*tW4 - t2*t35*t43*tW4 - t23*t3*t45*tW4 + t2*t33*t45*tW4 + t25*t33*t5*tW4 - t23*t35*t5*tW4 - t25*t43*t5*tW4 
            + t35*t43*t5*tW4 + t23*t45*t5*tW4 - t33*t45*t5*tW4 - t25*t3*t53*tW4 + t2*t35*t53*tW4 + t25*t4*t53*tW4 - t35*t4*t53*tW4 - t2*t45*t53*tW4 + t3*t45*t53*tW4 
            + t23*t3*t55*tW4 - t2*t33*t55*tW4 - t23*t4*t55*tW4 + t33*t4*t55*tW4 + t2*t43*t55*tW4 - t3*t43*t55*tW4 + t24*t33*t4*tW5 - t23*t34*t4*tW5 - t24*t3*t43*tW5 
            + t2*t34*t43*tW5 + t23*t3*t44*tW5 - t2*t33*t44*tW5 - t24*t33*t5*tW5 + t23*t34*t5*tW5 + t24*t43*t5*tW5 - t34*t43*t5*tW5 - t23*t44*t5*tW5 + t33*t44*t5*tW5 
            + t24*t3*t53*tW5 - t2*t34*t53*tW5 - t24*t4*t53*tW5 + t34*t4*t53*tW5 + t2*t44*t53*tW5 - t3*t44*t53*tW5 - t23*t3*t54*tW5 + t2*t33*t54*tW5 + t23*t4*t54*tW5 
            - t33*t4*t54*tW5 - t2*t43*t54*tW5 + t3*t43*t54*tW5);    

    return xlog/den;
}
    // Coeff of term proportional to log^3(mu/Lambda)
double NPSMEFTd6General::xlog3(const double C1Lambda, const double C2, const double C3,  const double C4, const double C5, const double C6muw) const{
    
    double t2, t3, t4, t5, tW;
    double t22, t23, t24, t25;
    double t32, t33, t34, t35;
    double t42, t43, t44, t45;
    double t52, t53, t54, t55;
    double tW2, tW3, tW4, tW5;
    double xlog, den;
    
    // The logs associated to each evolutor, ordered from top to bottom;
    t2 = tmu2;
    t3 = tmu3;
    t4 = tmu4;
    t5 = tmu5; 
    tW = tmuw;  
  
    t22 = t2 * t2; t23 = t22 * t2; t24 = t23 * t2; t25 = t24 * t2;
    t32 = t3 * t3; t33 = t32 * t3; t34 = t33 * t3; t35 = t34 * t3;
    t42 = t4 * t4; t43 = t42 * t4; t44 = t43 * t4; t45 = t44 * t4;
    t52 = t5 * t5; t53 = t52 * t5; t54 = t53 * t5; t55 = t54 * t5;
    tW2 = tW * tW; tW3 = tW2 * tW; tW4 = tW3 * tW; tW5 = tW4 * tW;
    
    // The denominator and numerator of the expression
    den = t2*(t2 - t3)*t3*(t2 - t4)*(t3 - t4)*t4*(t2 - t5)*(t3 - t5)*(t4 - t5)*t5*tW*(-t2 + tW)*(-t3 + tW)*(-t4 + tW)*(-t5 + tW);
    
    xlog = C6muw*(t25*t34*t42*t5 - t24*t35*t42*t5 - t25*t32*t44*t5 + t22*t35*t44*t5 + t24*t32*t45*t5 - t22*t34*t45*t5 - t25*t34*t4*t52 + t24*t35*t4*t52 + t25*t3*t44*t52 
            - t2*t35*t44*t52 - t24*t3*t45*t52 + t2*t34*t45*t52 + t25*t32*t4*t54 - t22*t35*t4*t54 - t25*t3*t42*t54 + t2*t35*t42*t54 + t22*t3*t45*t54 - t2*t32*t45*t54 
            - t24*t32*t4*t55 + t22*t34*t4*t55 + t24*t3*t42*t55 - t2*t34*t42*t55 - t22*t3*t44*t55 + t2*t32*t44*t55) 
            + C5*(-(t25*t34*t42*tW) + t24*t35*t42*tW + t25*t32*t44*tW - t22*t35*t44*tW - t24*t32*t45*tW + t22*t34*t45*tW + t25*t34*t4*tW2 - t24*t35*t4*tW2 - t25*t3*t44*tW2 
            + t2*t35*t44*tW2 + t24*t3*t45*tW2 - t2*t34*t45*tW2 - t25*t32*t4*tW4 + t22*t35*t4*tW4 + t25*t3*t42*tW4 - t2*t35*t42*tW4 - t22*t3*t45*tW4 + t2*t32*t45*tW4 
            + t24*t32*t4*tW5 - t22*t34*t4*tW5 - t24*t3*t42*tW5 + t2*t34*t42*tW5 + t22*t3*t44*tW5 - t2*t32*t44*tW5) 
            + C4*(t25*t34*t52*tW - t24*t35*t52*tW - t25*t32*t54*tW + t22*t35*t54*tW + t24*t32*t55*tW - t22*t34*t55*tW - t25*t34*t5*tW2 + t24*t35*t5*tW2 + t25*t3*t54*tW2 
            - t2*t35*t54*tW2 - t24*t3*t55*tW2 + t2*t34*t55*tW2 + t25*t32*t5*tW4 - t22*t35*t5*tW4 - t25*t3*t52*tW4 + t2*t35*t52*tW4 + t22*t3*t55*tW4 - t2*t32*t55*tW4 
            - t24*t32*t5*tW5 + t22*t34*t5*tW5 + t24*t3*t52*tW5 - t2*t34*t52*tW5 - t22*t3*t54*tW5 + t2*t32*t54*tW5) 
            + C3*(-(t25*t44*t52*tW) + t24*t45*t52*tW + t25*t42*t54*tW - t22*t45*t54*tW - t24*t42*t55*tW + t22*t44*t55*tW + t25*t44*t5*tW2 - t24*t45*t5*tW2 - t25*t4*t54*tW2 
            + t2*t45*t54*tW2 + t24*t4*t55*tW2 - t2*t44*t55*tW2 - t25*t42*t5*tW4 + t22*t45*t5*tW4 + t25*t4*t52*tW4 - t2*t45*t52*tW4 - t22*t4*t55*tW4 + t2*t42*t55*tW4 
            + t24*t42*t5*tW5 - t22*t44*t5*tW5 - t24*t4*t52*tW5 + t2*t44*t52*tW5 + t22*t4*t54*tW5 - t2*t42*t54*tW5) 
            + C1Lambda*(-(t25*t34*t42*t5) + t24*t35*t42*t5 + t25*t32*t44*t5 - t22*t35*t44*t5 - t24*t32*t45*t5 + t22*t34*t45*t5 + t25*t34*t4*t52 - t24*t35*t4*t52 - t25*t3*t44*t52 
            + t2*t35*t44*t52 + t24*t3*t45*t52 - t2*t34*t45*t52 - t25*t32*t4*t54 + t22*t35*t4*t54 + t25*t3*t42*t54 - t2*t35*t42*t54 - t22*t3*t45*t54 + t2*t32*t45*t54 
            + t24*t32*t4*t55 - t22*t34*t4*t55 - t24*t3*t42*t55 + t2*t34*t42*t55 + t22*t3*t44*t55 - t2*t32*t44*t55 + t25*t34*t42*tW - t24*t35*t42*tW - t25*t32*t44*tW 
            + t22*t35*t44*tW + t24*t32*t45*tW - t22*t34*t45*tW - t25*t34*t52*tW + t24*t35*t52*tW + t25*t44*t52*tW - t35*t44*t52*tW - t24*t45*t52*tW + t34*t45*t52*tW 
            + t25*t32*t54*tW - t22*t35*t54*tW - t25*t42*t54*tW + t35*t42*t54*tW + t22*t45*t54*tW - t32*t45*t54*tW - t24*t32*t55*tW + t22*t34*t55*tW + t24*t42*t55*tW 
            - t34*t42*t55*tW - t22*t44*t55*tW + t32*t44*t55*tW - t25*t34*t4*tW2 + t24*t35*t4*tW2 + t25*t3*t44*tW2 - t2*t35*t44*tW2 - t24*t3*t45*tW2 + t2*t34*t45*tW2 
            + t25*t34*t5*tW2 - t24*t35*t5*tW2 - t25*t44*t5*tW2 + t35*t44*t5*tW2 + t24*t45*t5*tW2 - t34*t45*t5*tW2 - t25*t3*t54*tW2 + t2*t35*t54*tW2 + t25*t4*t54*tW2 
            - t35*t4*t54*tW2 - t2*t45*t54*tW2 + t3*t45*t54*tW2 + t24*t3*t55*tW2 - t2*t34*t55*tW2 - t24*t4*t55*tW2 + t34*t4*t55*tW2 + t2*t44*t55*tW2 - t3*t44*t55*tW2 
            + t25*t32*t4*tW4 - t22*t35*t4*tW4 - t25*t3*t42*tW4 + t2*t35*t42*tW4 + t22*t3*t45*tW4 - t2*t32*t45*tW4 - t25*t32*t5*tW4 + t22*t35*t5*tW4 + t25*t42*t5*tW4 
            - t35*t42*t5*tW4 - t22*t45*t5*tW4 + t32*t45*t5*tW4 + t25*t3*t52*tW4 - t2*t35*t52*tW4 - t25*t4*t52*tW4 + t35*t4*t52*tW4 + t2*t45*t52*tW4 - t3*t45*t52*tW4 
            - t22*t3*t55*tW4 + t2*t32*t55*tW4 + t22*t4*t55*tW4 - t32*t4*t55*tW4 - t2*t42*t55*tW4 + t3*t42*t55*tW4 - t24*t32*t4*tW5 + t22*t34*t4*tW5 + t24*t3*t42*tW5 
            - t2*t34*t42*tW5 - t22*t3*t44*tW5 + t2*t32*t44*tW5 + t24*t32*t5*tW5 - t22*t34*t5*tW5 - t24*t42*t5*tW5 + t34*t42*t5*tW5 + t22*t44*t5*tW5 - t32*t44*t5*tW5 
            - t24*t3*t52*tW5 + t2*t34*t52*tW5 + t24*t4*t52*tW5 - t34*t4*t52*tW5 - t2*t44*t52*tW5 + t3*t44*t52*tW5 + t22*t3*t54*tW5 - t2*t32*t54*tW5 - t22*t4*t54*tW5 
            + t32*t4*t54*tW5 + t2*t42*t54*tW5 - t3*t42*t54*tW5) 
            + C2*(t35*t44*t52*tW - t34*t45*t52*tW - t35*t42*t54*tW + t32*t45*t54*tW + t34*t42*t55*tW - t32*t44*t55*tW - t35*t44*t5*tW2 + t34*t45*t5*tW2 + t35*t4*t54*tW2 
            - t3*t45*t54*tW2 - t34*t4*t55*tW2 + t3*t44*t55*tW2 + t35*t42*t5*tW4 - t32*t45*t5*tW4 - t35*t4*t52*tW4 + t3*t45*t52*tW4 + t32*t4*t55*tW4 - t3*t42*t55*tW4 
            - t34*t42*t5*tW5 + t32*t44*t5*tW5 + t34*t4*t52*tW5 - t3*t44*t52*tW5 - t32*t4*t54*tW5 + t3*t42*t54*tW5);    

    return xlog/den;
}
    // Coeff of term proportional to log^4(mu/Lambda)
double NPSMEFTd6General::xlog4(const double C1Lambda, const double C2, const double C3,  const double C4, const double C5, const double C6muw) const{
    
    double t2, t3, t4, t5, tW;
    double t22, t23, t24, t25;
    double t32, t33, t34, t35;
    double t42, t43, t44, t45;
    double t52, t53, t54, t55;
    double tW2, tW3, tW4, tW5;
    double xlog, den;
    
    // The logs associated to each evolutor, ordered from top to bottom;
    t2 = tmu2;
    t3 = tmu3;
    t4 = tmu4;
    t5 = tmu5; 
    tW = tmuw; 
  
    t22 = t2 * t2; t23 = t22 * t2; t24 = t23 * t2; t25 = t24 * t2;
    t32 = t3 * t3; t33 = t32 * t3; t34 = t33 * t3; t35 = t34 * t3;
    t42 = t4 * t4; t43 = t42 * t4; t44 = t43 * t4; t45 = t44 * t4;
    t52 = t5 * t5; t53 = t52 * t5; t54 = t53 * t5; t55 = t54 * t5;
    tW2 = tW * tW; tW3 = tW2 * tW; tW4 = tW3 * tW; tW5 = tW4 * tW;
    
    // The denominator and numerator of the expression
    den = t2*(t2 - t3)*t3*(t2 - t4)*(t3 - t4)*t4*(t2 - t5)*(t3 - t5)*(t4 - t5)*t5*tW*(-t2 + tW)*(-t3 + tW)*(-t4 + tW)*(-t5 + tW);
    
    xlog = C6muw*(-(t25*t33*t42*t5) + t23*t35*t42*t5 + t25*t32*t43*t5 - t22*t35*t43*t5 - t23*t32*t45*t5 + t22*t33*t45*t5 + t25*t33*t4*t52 - t23*t35*t4*t52 - t25*t3*t43*t52 
            + t2*t35*t43*t52 + t23*t3*t45*t52 - t2*t33*t45*t52 - t25*t32*t4*t53 + t22*t35*t4*t53 + t25*t3*t42*t53 - t2*t35*t42*t53 - t22*t3*t45*t53 + t2*t32*t45*t53 
            + t23*t32*t4*t55 - t22*t33*t4*t55 - t23*t3*t42*t55 + t2*t33*t42*t55 + t22*t3*t43*t55 - t2*t32*t43*t55) 
            + C5*(t25*t33*t42*tW - t23*t35*t42*tW - t25*t32*t43*tW + t22*t35*t43*tW + t23*t32*t45*tW - t22*t33*t45*tW - t25*t33*t4*tW2 + t23*t35*t4*tW2 + t25*t3*t43*tW2 
            - t2*t35*t43*tW2 - t23*t3*t45*tW2 + t2*t33*t45*tW2 + t25*t32*t4*tW3 - t22*t35*t4*tW3 - t25*t3*t42*tW3 + t2*t35*t42*tW3 + t22*t3*t45*tW3 - t2*t32*t45*tW3 
            - t23*t32*t4*tW5 + t22*t33*t4*tW5 + t23*t3*t42*tW5 - t2*t33*t42*tW5 - t22*t3*t43*tW5 + t2*t32*t43*tW5) 
            + C4*(-(t25*t33*t52*tW) + t23*t35*t52*tW + t25*t32*t53*tW - t22*t35*t53*tW - t23*t32*t55*tW + t22*t33*t55*tW + t25*t33*t5*tW2 - t23*t35*t5*tW2 - t25*t3*t53*tW2 
            + t2*t35*t53*tW2 + t23*t3*t55*tW2 - t2*t33*t55*tW2 - t25*t32*t5*tW3 + t22*t35*t5*tW3 + t25*t3*t52*tW3 - t2*t35*t52*tW3 - t22*t3*t55*tW3 + t2*t32*t55*tW3 
            + t23*t32*t5*tW5 - t22*t33*t5*tW5 - t23*t3*t52*tW5 + t2*t33*t52*tW5 + t22*t3*t53*tW5 - t2*t32*t53*tW5) 
            + C3*(t25*t43*t52*tW - t23*t45*t52*tW - t25*t42*t53*tW + t22*t45*t53*tW + t23*t42*t55*tW - t22*t43*t55*tW - t25*t43*t5*tW2 + t23*t45*t5*tW2 + t25*t4*t53*tW2 
            - t2*t45*t53*tW2 - t23*t4*t55*tW2 + t2*t43*t55*tW2 + t25*t42*t5*tW3 - t22*t45*t5*tW3 - t25*t4*t52*tW3 + t2*t45*t52*tW3 + t22*t4*t55*tW3 - t2*t42*t55*tW3 
            - t23*t42*t5*tW5 + t22*t43*t5*tW5 + t23*t4*t52*tW5 - t2*t43*t52*tW5 - t22*t4*t53*tW5 + t2*t42*t53*tW5) 
            + C2*(-(t35*t43*t52*tW) + t33*t45*t52*tW + t35*t42*t53*tW - t32*t45*t53*tW - t33*t42*t55*tW + t32*t43*t55*tW + t35*t43*t5*tW2 - t33*t45*t5*tW2 - t35*t4*t53*tW2 
            + t3*t45*t53*tW2 + t33*t4*t55*tW2 - t3*t43*t55*tW2 - t35*t42*t5*tW3 + t32*t45*t5*tW3 + t35*t4*t52*tW3 - t3*t45*t52*tW3 - t32*t4*t55*tW3 + t3*t42*t55*tW3 
            + t33*t42*t5*tW5 - t32*t43*t5*tW5 - t33*t4*t52*tW5 + t3*t43*t52*tW5 + t32*t4*t53*tW5 - t3*t42*t53*tW5) 
            + C1Lambda*(t25*t33*t42*t5 - t23*t35*t42*t5 - t25*t32*t43*t5 + t22*t35*t43*t5 + t23*t32*t45*t5 - t22*t33*t45*t5 - t25*t33*t4*t52 + t23*t35*t4*t52 + t25*t3*t43*t52 
            - t2*t35*t43*t52 - t23*t3*t45*t52 + t2*t33*t45*t52 + t25*t32*t4*t53 - t22*t35*t4*t53 - t25*t3*t42*t53 + t2*t35*t42*t53 + t22*t3*t45*t53 - t2*t32*t45*t53 
            - t23*t32*t4*t55 + t22*t33*t4*t55 + t23*t3*t42*t55 - t2*t33*t42*t55 - t22*t3*t43*t55 + t2*t32*t43*t55 - t25*t33*t42*tW + t23*t35*t42*tW + t25*t32*t43*tW 
            - t22*t35*t43*tW - t23*t32*t45*tW + t22*t33*t45*tW + t25*t33*t52*tW - t23*t35*t52*tW - t25*t43*t52*tW + t35*t43*t52*tW + t23*t45*t52*tW - t33*t45*t52*tW 
            - t25*t32*t53*tW + t22*t35*t53*tW + t25*t42*t53*tW - t35*t42*t53*tW - t22*t45*t53*tW + t32*t45*t53*tW + t23*t32*t55*tW - t22*t33*t55*tW - t23*t42*t55*tW 
            + t33*t42*t55*tW + t22*t43*t55*tW - t32*t43*t55*tW + t25*t33*t4*tW2 - t23*t35*t4*tW2 - t25*t3*t43*tW2 + t2*t35*t43*tW2 + t23*t3*t45*tW2 - t2*t33*t45*tW2 
            - t25*t33*t5*tW2 + t23*t35*t5*tW2 + t25*t43*t5*tW2 - t35*t43*t5*tW2 - t23*t45*t5*tW2 + t33*t45*t5*tW2 + t25*t3*t53*tW2 - t2*t35*t53*tW2 - t25*t4*t53*tW2 
            + t35*t4*t53*tW2 + t2*t45*t53*tW2 - t3*t45*t53*tW2 - t23*t3*t55*tW2 + t2*t33*t55*tW2 + t23*t4*t55*tW2 - t33*t4*t55*tW2 - t2*t43*t55*tW2 + t3*t43*t55*tW2 
            - t25*t32*t4*tW3 + t22*t35*t4*tW3 + t25*t3*t42*tW3 - t2*t35*t42*tW3 - t22*t3*t45*tW3 + t2*t32*t45*tW3 + t25*t32*t5*tW3 - t22*t35*t5*tW3 - t25*t42*t5*tW3 
            + t35*t42*t5*tW3 + t22*t45*t5*tW3 - t32*t45*t5*tW3 - t25*t3*t52*tW3 + t2*t35*t52*tW3 + t25*t4*t52*tW3 - t35*t4*t52*tW3 - t2*t45*t52*tW3 + t3*t45*t52*tW3 
            + t22*t3*t55*tW3 - t2*t32*t55*tW3 - t22*t4*t55*tW3 + t32*t4*t55*tW3 + t2*t42*t55*tW3 - t3*t42*t55*tW3 + t23*t32*t4*tW5 - t22*t33*t4*tW5 - t23*t3*t42*tW5 
            + t2*t33*t42*tW5 + t22*t3*t43*tW5 - t2*t32*t43*tW5 - t23*t32*t5*tW5 + t22*t33*t5*tW5 + t23*t42*t5*tW5 - t33*t42*t5*tW5 - t22*t43*t5*tW5 + t32*t43*t5*tW5 
            + t23*t3*t52*tW5 - t2*t33*t52*tW5 - t23*t4*t52*tW5 + t33*t4*t52*tW5 + t2*t43*t52*tW5 - t3*t43*t52*tW5 - t22*t3*t53*tW5 + t2*t32*t53*tW5 + t22*t4*t53*tW5 
            - t32*t4*t53*tW5 - t2*t42*t53*tW5 + t3*t42*t53*tW5);    

    return xlog/den;
}
    // Coeff of term proportional to log^5(mu/Lambda)
double NPSMEFTd6General::xlog5(const double C1Lambda, const double C2, const double C3,  const double C4, const double C5, const double C6muw) const{
    
    double t2, t3, t4, t5, tW;
    double t22, t23, t24;//, t25;
    double t32, t33, t34;//, t35;
    double t42, t43, t44;//, t45;
    double t52, t53, t54;//, t55;
    double tW2, tW3, tW4;//, tW5;
    double xlog, den;
    
    // The logs associated to each evolutor, ordered from top to bottom;
    t2 = tmu2;
    t3 = tmu3;
    t4 = tmu4;
    t5 = tmu5; 
    tW = tmuw; 
  
    t22 = t2 * t2; t23 = t22 * t2; t24 = t23 * t2;// t25 = t24 * t2;
    t32 = t3 * t3; t33 = t32 * t3; t34 = t33 * t3;// t35 = t34 * t3;
    t42 = t4 * t4; t43 = t42 * t4; t44 = t43 * t4;// t45 = t44 * t4;
    t52 = t5 * t5; t53 = t52 * t5; t54 = t53 * t5;// t55 = t54 * t5;
    tW2 = tW * tW; tW3 = tW2 * tW; tW4 = tW3 * tW;// tW5 = tW4 * tW;
    
    // The denominator and numerator of the expression
    den = t2*(t2 - t3)*t3*(t2 - t4)*(t3 - t4)*t4*(t2 - t5)*(t3 - t5)*(t4 - t5)*t5*tW*(-t2 + tW)*(-t3 + tW)*(-t4 + tW)*(-t5 + tW);
    
    xlog = C6muw*(t24*t33*t42*t5 - t23*t34*t42*t5 - t24*t32*t43*t5 + t22*t34*t43*t5 + t23*t32*t44*t5 - t22*t33*t44*t5 - t24*t33*t4*t52 + t23*t34*t4*t52 + t24*t3*t43*t52 
            - t2*t34*t43*t52 - t23*t3*t44*t52 + t2*t33*t44*t52 + t24*t32*t4*t53 - t22*t34*t4*t53 - t24*t3*t42*t53 + t2*t34*t42*t53 + t22*t3*t44*t53 - t2*t32*t44*t53 
            - t23*t32*t4*t54 + t22*t33*t4*t54 + t23*t3*t42*t54 - t2*t33*t42*t54 - t22*t3*t43*t54 + t2*t32*t43*t54) 
            + C5*(-(t24*t33*t42*tW) + t23*t34*t42*tW + t24*t32*t43*tW - t22*t34*t43*tW - t23*t32*t44*tW + t22*t33*t44*tW + t24*t33*t4*tW2 - t23*t34*t4*tW2 - t24*t3*t43*tW2 
            + t2*t34*t43*tW2 + t23*t3*t44*tW2 - t2*t33*t44*tW2 - t24*t32*t4*tW3 + t22*t34*t4*tW3 + t24*t3*t42*tW3 - t2*t34*t42*tW3 - t22*t3*t44*tW3 + t2*t32*t44*tW3 
            + t23*t32*t4*tW4 - t22*t33*t4*tW4 - t23*t3*t42*tW4 + t2*t33*t42*tW4 + t22*t3*t43*tW4 - t2*t32*t43*tW4) 
            + C4*(t24*t33*t52*tW - t23*t34*t52*tW - t24*t32*t53*tW + t22*t34*t53*tW + t23*t32*t54*tW - t22*t33*t54*tW - t24*t33*t5*tW2 + t23*t34*t5*tW2 + t24*t3*t53*tW2 
            - t2*t34*t53*tW2 - t23*t3*t54*tW2 + t2*t33*t54*tW2 + t24*t32*t5*tW3 - t22*t34*t5*tW3 - t24*t3*t52*tW3 + t2*t34*t52*tW3 + t22*t3*t54*tW3 - t2*t32*t54*tW3 
            - t23*t32*t5*tW4 + t22*t33*t5*tW4 + t23*t3*t52*tW4 - t2*t33*t52*tW4 - t22*t3*t53*tW4 + t2*t32*t53*tW4) 
            + C3*(-(t24*t43*t52*tW) + t23*t44*t52*tW + t24*t42*t53*tW - t22*t44*t53*tW - t23*t42*t54*tW + t22*t43*t54*tW + t24*t43*t5*tW2 - t23*t44*t5*tW2 - t24*t4*t53*tW2 
            + t2*t44*t53*tW2 + t23*t4*t54*tW2 - t2*t43*t54*tW2 - t24*t42*t5*tW3 + t22*t44*t5*tW3 + t24*t4*t52*tW3 - t2*t44*t52*tW3 - t22*t4*t54*tW3 + t2*t42*t54*tW3 
            + t23*t42*t5*tW4 - t22*t43*t5*tW4 - t23*t4*t52*tW4 + t2*t43*t52*tW4 + t22*t4*t53*tW4 - t2*t42*t53*tW4) 
            + C1Lambda*(-(t24*t33*t42*t5) + t23*t34*t42*t5 + t24*t32*t43*t5 - t22*t34*t43*t5 - t23*t32*t44*t5 + t22*t33*t44*t5 + t24*t33*t4*t52 - t23*t34*t4*t52 - t24*t3*t43*t52 
            + t2*t34*t43*t52 + t23*t3*t44*t52 - t2*t33*t44*t52 - t24*t32*t4*t53 + t22*t34*t4*t53 + t24*t3*t42*t53 - t2*t34*t42*t53 - t22*t3*t44*t53 + t2*t32*t44*t53 
            + t23*t32*t4*t54 - t22*t33*t4*t54 - t23*t3*t42*t54 + t2*t33*t42*t54 + t22*t3*t43*t54 - t2*t32*t43*t54 + t24*t33*t42*tW - t23*t34*t42*tW - t24*t32*t43*tW 
            + t22*t34*t43*tW + t23*t32*t44*tW - t22*t33*t44*tW - t24*t33*t52*tW + t23*t34*t52*tW + t24*t43*t52*tW - t34*t43*t52*tW - t23*t44*t52*tW + t33*t44*t52*tW 
            + t24*t32*t53*tW - t22*t34*t53*tW - t24*t42*t53*tW + t34*t42*t53*tW + t22*t44*t53*tW - t32*t44*t53*tW - t23*t32*t54*tW + t22*t33*t54*tW + t23*t42*t54*tW 
            - t33*t42*t54*tW - t22*t43*t54*tW + t32*t43*t54*tW - t24*t33*t4*tW2 + t23*t34*t4*tW2 + t24*t3*t43*tW2 - t2*t34*t43*tW2 - t23*t3*t44*tW2 + t2*t33*t44*tW2 
            + t24*t33*t5*tW2 - t23*t34*t5*tW2 - t24*t43*t5*tW2 + t34*t43*t5*tW2 + t23*t44*t5*tW2 - t33*t44*t5*tW2 - t24*t3*t53*tW2 + t2*t34*t53*tW2 + t24*t4*t53*tW2 
            - t34*t4*t53*tW2 - t2*t44*t53*tW2 + t3*t44*t53*tW2 + t23*t3*t54*tW2 - t2*t33*t54*tW2 - t23*t4*t54*tW2 + t33*t4*t54*tW2 + t2*t43*t54*tW2 - t3*t43*t54*tW2 
            + t24*t32*t4*tW3 - t22*t34*t4*tW3 - t24*t3*t42*tW3 + t2*t34*t42*tW3 + t22*t3*t44*tW3 - t2*t32*t44*tW3 - t24*t32*t5*tW3 + t22*t34*t5*tW3 + t24*t42*t5*tW3 
            - t34*t42*t5*tW3 - t22*t44*t5*tW3 + t32*t44*t5*tW3 + t24*t3*t52*tW3 - t2*t34*t52*tW3 - t24*t4*t52*tW3 + t34*t4*t52*tW3 + t2*t44*t52*tW3 - t3*t44*t52*tW3 
            - t22*t3*t54*tW3 + t2*t32*t54*tW3 + t22*t4*t54*tW3 - t32*t4*t54*tW3 - t2*t42*t54*tW3 + t3*t42*t54*tW3 - t23*t32*t4*tW4 + t22*t33*t4*tW4 + t23*t3*t42*tW4 
            - t2*t33*t42*tW4 - t22*t3*t43*tW4 + t2*t32*t43*tW4 + t23*t32*t5*tW4 - t22*t33*t5*tW4 - t23*t42*t5*tW4 + t33*t42*t5*tW4 + t22*t43*t5*tW4 - t32*t43*t5*tW4 
            - t23*t3*t52*tW4 + t2*t33*t52*tW4 + t23*t4*t52*tW4 - t33*t4*t52*tW4 - t2*t43*t52*tW4 + t3*t43*t52*tW4 + t22*t3*t53*tW4 - t2*t32*t53*tW4 - t22*t4*t53*tW4 
            + t32*t4*t53*tW4 + t2*t42*t53*tW4 - t3*t42*t53*tW4) + C2*(t34*t43*t52*tW - t33*t44*t52*tW - t34*t42*t53*tW + t32*t44*t53*tW + t33*t42*t54*tW - t32*t43*t54*tW 
            - t34*t43*t5*tW2 + t33*t44*t5*tW2 + t34*t4*t53*tW2 - t3*t44*t53*tW2 - t33*t4*t54*tW2 + t3*t43*t54*tW2 + t34*t42*t5*tW3 - t32*t44*t5*tW3 - t34*t4*t52*tW3 
            + t3*t44*t52*tW3 + t32*t4*t54*tW3 - t3*t42*t54*tW3 - t33*t42*t5*tW4 + t32*t43*t5*tW4 + t33*t4*t52*tW4 - t3*t43*t52*tW4 - t32*t4*t53*tW4 + t3*t42*t53*tW4);    

    return xlog/den;
}

////////////////////////////////////////////////////////////////////////

// Coefficients of fermionic operators in the mass basis
    
// Coefficients are assumed to be complex, "name" is the name without R or I at the end. That is added here 
inline gslpp::complex NPSMEFTd6General::getSMEFTCoeffMB(const std::string name, int i, int j, gslpp::matrix<gslpp::complex> Vi, gslpp::matrix<gslpp::complex>  Vj, const double mu) const
{
        std::string nameR, nameI;
        gslpp::complex Cij;
        
        // Add the R and I to the name of the operator, to call the real and imaginary parts of the operator from RGEsolver
        nameR = name;
        nameI = name;
        
        nameR.push_back('R');
        nameI.push_back('I');

        Cij = 0.;
        
        for (int k = 0; k < 3; k++)
            for (int l = 0; l < 3; l++) 
            {
                Cij +=  Vi(i,k) * ( getSMEFTCoeff(nameR, k, l, mu) + gslpp::complex::i() * getSMEFTCoeff(nameI, k, l, mu) ) * Vj(l,j);
            }
        
        return Cij;
}
    
inline gslpp::complex NPSMEFTd6General::getSMEFTCoeffMB(const std::string name, int i, int j, int k, int l, gslpp::matrix<gslpp::complex> Vi, gslpp::matrix<gslpp::complex>  Vj, gslpp::matrix<gslpp::complex> Vk, gslpp::matrix<gslpp::complex>  Vl, const double mu) const
{
        std::string nameR, nameI;
        gslpp::complex Cijkl;
        
        // Add the R and I to the name of the operator, to call the real and imaginary parts of the operator from RGEsolver
        nameR = name;
        nameI = name;
        
        nameR.push_back('R');
        nameI.push_back('I');

        Cijkl = 0.;
        
        for (int m1 = 0; m1 < 3; m1++)
            for (int n1 = 0; n1 < 3; n1++) 
                for (int m2 = 0; m2 < 3; m2++) 
                    for (int n2 = 0; n2 < 3; n2++)
                    {
                        Cijkl +=  Vi(i,m1) * Vk(k,m2) * ( getSMEFTCoeff(nameR, m1, n1, m2, n2, mu) + gslpp::complex::i() * getSMEFTCoeff(nameI, m1, n1, m2, n2, mu) ) * Vj(n1,j) * Vl(n2,l);
                    }
        
        return Cijkl;   
}

////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//Before these functions were taking the values of the operators after
//the approximate running. Now we set them to the values of the operators
//after the complete running. Now we have included all the complex parts
//so there are some functions that should be promoted to complex now.
//Finally, some of the entries are zero since it was so before, this
//needs to be updated

double NPSMEFTd6General::CHF1_diag(const Particle F) const {
    //We include only the real part for the moment
    //if (F.is("NEUTRINO_1") || F.is("ELECTRON"))
    //    return getSMEFTCoeffEW("CHl1R", 0, 0);
    //else if (F.is("NEUTRINO_2") || F.is("MU"))
    //    return getSMEFTCoeffEW("CHl1R", 1, 1);
    //else if (F.is("NEUTRINO_3") || F.is("TAU"))
    //    return getSMEFTCoeffEW("CHl1R", 2, 2);
    //else if (F.is("UP") || F.is("DOWN"))
    //    return getSMEFTCoeffEW("CHq1R", 0, 0);
    //else if (F.is("CHARM") || F.is("STRANGE"))
    //    return getSMEFTCoeffEW("CHq1R", 1, 1);
    //else if (F.is("TOP") || F.is("BOTTOM"))
    //    return getSMEFTCoeffEW("CHq1R", 2, 2);
    //else
    //    throw std::runtime_error("NPSMEFTd6General::CHF1_diag(): wrong argument");
    switch(F.getIndex()){
        case 0:
            return getSMEFTCoeffEW("CHl1R", 0, 0);
        case 1:
            return getSMEFTCoeffEW("CHl1R", 0, 0);
        case 2:
            return getSMEFTCoeffEW("CHl1R", 1, 1);
        case 3:
            return getSMEFTCoeffEW("CHl1R", 1, 1);
        case 4:
            return getSMEFTCoeffEW("CHl1R", 2, 2);
        case 5:
            return getSMEFTCoeffEW("CHl1R", 2, 2);
        case 6:
            return CHq1EWuu;
        case 7:
            return CHq1EWdd;
        case 8:
            return CHq1EWcc;
        case 9:
            return CHq1EWss;
        case 10:
            return CHq1EWtt;
        case 11:
            return CHq1EWbb;
        default:
            throw std::runtime_error("NPSMEFTd6General::CHF1_diag(): wrong argument");
    }
}

double NPSMEFTd6General::CHF3_diag(const Particle F) const {
    //if (F.is("NEUTRINO_1") || F.is("ELECTRON"))
    //    return getSMEFTCoeffEW("CHl3R", 0, 0);
    //else if (F.is("NEUTRINO_2") || F.is("MU"))
    //    return getSMEFTCoeffEW("CHl3R", 1, 1);
    //else if (F.is("NEUTRINO_3") || F.is("TAU"))
    //    return getSMEFTCoeffEW("CHl3R", 2, 2);
    //else if (F.is("UP") || F.is("DOWN"))
    //    return getSMEFTCoeffEW("CHq3R", 0, 0);
    //else if (F.is("CHARM") || F.is("STRANGE"))
    //    return getSMEFTCoeffEW("CHq3R", 1, 1);
    //else if (F.is("TOP") || F.is("BOTTOM"))
    //    return getSMEFTCoeffEW("CHq3R", 2, 2);
    //else
    //    throw std::runtime_error("NPSMEFTd6General::CHF3_diag(): wrong argument");
    switch(F.getIndex()){
        case 0:
            return getSMEFTCoeffEW("CHl3R", 0, 0);
        case 1:
            return getSMEFTCoeffEW("CHl3R", 0, 0);
        case 2:
            return getSMEFTCoeffEW("CHl3R", 1, 1);
        case 3:
            return getSMEFTCoeffEW("CHl3R", 1, 1);
        case 4:
            return getSMEFTCoeffEW("CHl3R", 2, 2);
        case 5:
            return getSMEFTCoeffEW("CHl3R", 2, 2);
        case 6:
            return CHq3EWuu;
        case 7:
            return CHq3EWdd;
        case 8:
            return CHq3EWcc;
        case 9:
            return CHq3EWss;
        case 10:
            return CHq3EWtt;
        case 11:
            return CHq3EWbb;
        default:
            throw std::runtime_error("NPSMEFTd6General::CHF3_diag(): wrong argument");
    }
}

gslpp::complex NPSMEFTd6General::CHF3CC_diag(const Particle F) const {
    int index = F.getIndex();
    if (index < 0 || index > 11 || index % 2 != 0)
        throw std::runtime_error("NPSMEFTd6General::CHF3CC_diag(): wrong argument");
    switch (index) {
        case 6:
            return CHq3EWud; // Up
        case 8:
            return CHq3EWcs; // Charm
        case 10:
            return CHq3EWtb; // Top
        default:
            return gslpp::complex(CHF3_diag(F), 0.0, false); // Leptons
    }
}

double NPSMEFTd6General::CHf_diag(const Particle f) const {
    //if (f.is("NEUTRINO_1") || f.is("NEUTRINO_2") || f.is("NEUTRINO_3"))
    //    return 0.0;
    //else if (f.is("ELECTRON"))
    //    return getSMEFTCoeffEW("CHeR", 0, 0);
    //else if (f.is("MU"))
    //    return getSMEFTCoeffEW("CHeR", 1, 1);
    //else if (f.is("TAU"))
    //    return getSMEFTCoeffEW("CHeR", 2, 2);
    //else if (f.is("UP"))
    //    return getSMEFTCoeffEW("CHuR", 0, 0);
    //else if (f.is("CHARM"))
    //    return getSMEFTCoeffEW("CHuR", 1, 1);
    //else if (f.is("TOP"))
    //    return getSMEFTCoeffEW("CHuR", 2, 2);
    //else if (f.is("DOWN"))
    //    return getSMEFTCoeffEW("CHdR", 0, 0);
    //else if (f.is("STRANGE"))
    //    return getSMEFTCoeffEW("CHdR", 1, 1);
    //else if (f.is("BOTTOM"))
    //    return getSMEFTCoeffEW("CHdR", 2, 2);
    //else
    //    throw std::runtime_error("NPSMEFTd6General::CHf_diag(): wrong argument");
    switch(f.getIndex()){
        case 0:
            return 0.;
        case 1:
            return getSMEFTCoeffEW("CHeR", 0, 0);
        case 2:
            return 0.;
        case 3:
            return getSMEFTCoeffEW("CHeR", 1, 1);
        case 4:
            return 0.;
        case 5:
            return getSMEFTCoeffEW("CHeR", 2, 2);
        case 6:
            return CHuEWuu;
        case 7:
            return CHdEWdd;
        case 8:
            return CHuEWcc;
        case 9:
            return CHdEWss;
        case 10:
            return CHuEWtt;
        case 11:
            return CHdEWbb;
        default:
            throw std::runtime_error("NPSMEFTd6General::CHf_diag(): wrong argument");
    }
}

gslpp::complex NPSMEFTd6General::CHud_diag(const Particle u) const {
    int index = u.getIndex();
    if (index < 6 || index % 2 != 0)
        throw std::runtime_error("NPSMEFTd6General::CHud_diag(): wrong argument");
    switch (index) {
        case 6:
            return gslpp::complex(getSMEFTCoeffEW("CHudR", 0, 0), getSMEFTCoeffEW("CHudI", 0, 0), false); // 1st generation
        case 8:
            return gslpp::complex(getSMEFTCoeffEW("CHudR", 1, 1), getSMEFTCoeffEW("CHudI", 1, 1), false); // 2nd generation
        case 10:
            return gslpp::complex(getSMEFTCoeffEW("CHudR", 2, 2), getSMEFTCoeffEW("CHudI", 2, 2), false); // 3rd generation
        default:
            throw std::runtime_error("NPSMEFTd6General::CHud_diag(): wrong argument");
    }
}

gslpp::complex NPSMEFTd6General::CfH_diag(const Particle f) const {
    switch(f.getIndex()){
        case 0:
            return 0.;
        case 1:
            return gslpp::complex(getSMEFTCoeffEW("CeHR", 0, 0), getSMEFTCoeffEW("CeHI", 0, 0), false); // electron
        case 2:
            return 0.;
        case 3:
            return gslpp::complex(getSMEFTCoeffEW("CeHR", 1, 1), getSMEFTCoeffEW("CeHI", 1, 1), false); // muon
        case 4:
            return 0.;
        case 5:
            return gslpp::complex(getSMEFTCoeffEW("CeHR", 2, 2), getSMEFTCoeffEW("CeHI", 2, 2), false); // tau
        case 6:
            return gslpp::complex(getSMEFTCoeffEW("CuHR", 0, 0), getSMEFTCoeffEW("CuHI", 0, 0), false); // up
        case 7:
            return gslpp::complex(getSMEFTCoeffEW("CdHR", 0, 0), getSMEFTCoeffEW("CdHI", 0, 0), false); // down
        case 8:
            return gslpp::complex(getSMEFTCoeffEW("CuHR", 1, 1), getSMEFTCoeffEW("CuHI", 1, 1), false); // charm
        case 9:
            return gslpp::complex(getSMEFTCoeffEW("CdHR", 1, 1), getSMEFTCoeffEW("CdHI", 1, 1), false); // strange
        case 10:
            return gslpp::complex(getSMEFTCoeffEW("CuHR", 2, 2), getSMEFTCoeffEW("CuHI", 2, 2), false); // top
        case 11:
            return gslpp::complex(getSMEFTCoeffEW("CdHR", 2, 2), getSMEFTCoeffEW("CdHI", 2, 2), false); // bottom
        default:
            throw std::runtime_error("NPSMEFTd6General::CfH_diag(): wrong argument");
    }
}

gslpp::complex NPSMEFTd6General::CfG_diag(const Particle f) const {
    int index = f.getIndex();
    if (index < 0 || index > 11)
        throw std::runtime_error("NPSMEFTd6General::CfG_diag(): wrong argument");
    switch (index) {
        case 6:
            return gslpp::complex(getSMEFTCoeffEW("CuGR", 0, 0), getSMEFTCoeffEW("CuGI", 0, 0), false); // up
        case 8:
            return gslpp::complex(getSMEFTCoeffEW("CuGR", 1, 1), getSMEFTCoeffEW("CuGI", 1, 1), false); // charm
        case 10:
            return gslpp::complex(getSMEFTCoeffEW("CuGR", 2, 2), getSMEFTCoeffEW("CuGI", 2, 2), false); // top
        default:
            return 0.;
    }
}

gslpp::complex NPSMEFTd6General::CfW_diag(const Particle f) const {
    int index = f.getIndex();
    if (index < 0 || index > 11)
        throw std::runtime_error("NPSMEFTd6General::CfW_diag(): wrong argument");
    switch (index) {
        case 6:
            return gslpp::complex(getSMEFTCoeffEW("CuWR", 0, 0), getSMEFTCoeffEW("CuWI", 0, 0), false); // up
        case 8:
            return gslpp::complex(getSMEFTCoeffEW("CuWR", 1, 1), getSMEFTCoeffEW("CuWI", 1, 1), false); // charm
        case 10:
            return gslpp::complex(getSMEFTCoeffEW("CuWR", 2, 2), getSMEFTCoeffEW("CuWI", 2, 2), false); // top
        default:
            return 0.;
    }
}

gslpp::complex NPSMEFTd6General::CfB_diag(const Particle f) const {
    int index = f.getIndex();
    if (index < 0 || index > 11)
        throw std::runtime_error("NPSMEFTd6General::CfB_diag(): wrong argument");
    switch (index) {
        case 6:
            return gslpp::complex(getSMEFTCoeffEW("CuBR", 0, 0), getSMEFTCoeffEW("CuBI", 0, 0), false); // up
        case 8:
            return gslpp::complex(getSMEFTCoeffEW("CuBR", 1, 1), getSMEFTCoeffEW("CuBI", 1, 1), false); // charm
        case 10:
            return gslpp::complex(getSMEFTCoeffEW("CuBR", 2, 2), getSMEFTCoeffEW("CuBI", 2, 2), false); // top
        default:
            return 0.;
    }
}

////////////////////////////////////////////////////////////////////////
//  Scale-dependent versions of some of the above
////////////////////////////////////////////////////////////////////////

gslpp::complex NPSMEFTd6General::CfH_diag_mu(const Particle f, const double mu) const {
    int index = f.getIndex();
    if (index < 0 || index > 11)
        throw std::runtime_error("NPSMEFTd6General::CfH_diag_mu(): wrong argument");
    switch (index) {
        case 1:
            return gslpp::complex(getSMEFTCoeff("CeHR", 0, 0, mu), getSMEFTCoeff("CeHI", 0, 0, mu), false); // electron
        case 3:
            return gslpp::complex(getSMEFTCoeff("CeHR", 1, 1, mu), getSMEFTCoeff("CeHI", 1, 1, mu), false); // muon
        case 5:
            return gslpp::complex(getSMEFTCoeff("CeHR", 2, 2, mu), getSMEFTCoeff("CeHI", 2, 2, mu), false); // tau 
        case 6:
            return gslpp::complex(getSMEFTCoeff("CuHR", 0, 0, mu), getSMEFTCoeff("CuHI", 0, 0, mu), false); // up
        case 7:
            return gslpp::complex(getSMEFTCoeff("CdHR", 0, 0, mu), getSMEFTCoeff("CdHI", 0, 0, mu), false); // down
        case 8:
            return gslpp::complex(getSMEFTCoeff("CuHR", 1, 1, mu), getSMEFTCoeff("CuHI", 1, 1, mu), false); // charm
        case 9:
            return gslpp::complex(getSMEFTCoeff("CdHR", 1, 1, mu), getSMEFTCoeff("CdHI", 1, 1, mu), false); // strange
        case 10:
            return gslpp::complex(getSMEFTCoeff("CuHR", 2, 2, mu), getSMEFTCoeff("CuHI", 2, 2, mu), false); // top
        case 11:
            return gslpp::complex(getSMEFTCoeff("CdHR", 2, 2, mu), getSMEFTCoeff("CdHI", 2, 2, mu), false); // bottom
        default:
            return 0.;
    }
}

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
/////////////////////////// Until here /////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////


////// Let's define a very simple observable just to test the speed of the code////


/*
double NPSMEFTd6General::test_direct() const
{
    return (getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)
 *getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)
 *getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)
 *getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)
 *getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)
            /getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)
            /getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)
            /getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)
            /getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)
            /getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0));
}
 */





/*
double NPSMEFTd6General::test_direct() const
{
    return getSMEFTCoeffEW("CHl3R",0,0);
}
 */

/*
double NPSMEFTd6General::test_evolutor() const
{
    return (getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)
 *getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)
 *getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)
 *getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)
 *getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)*getSMEFTCoeffEW("CHl3R",0,0)
            /getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)
            /getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)
            /getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)
            /getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)
            /getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0)/getSMEFTCoeffEW("CHl3R",0,0));
}
 */


////////////////////////////////////////////////////////////////////////

    // Functions to facilitate the change of scheme (at tree level)

const double NPSMEFTd6General::DeltaOalphtoW(const double dOSMdalpha, const double mu) const {
    
    double alphatoW;
    double d_GF_mu;
    double deltaOLO;
    
    // delta_GF, including RG scale dependence
    d_GF_mu = (getSMEFTCoeff("CHl3R", 0, 0, mu) + getSMEFTCoeff("CHl3R", 1, 1, mu) - 0.5 * (getSMEFTCoeff("CllR", 0, 1, 1, 0, mu) + getSMEFTCoeff("CllR", 1, 0, 0, 1, mu))) * v2;
    
    // Combinations of parameters to control the change of SM EW input scheme
    // Combination multiplying d OSM/d alpha
    alphatoW = ( GF/sqrt(2.0)/Mz/Mz/M_PI ) * ( pow(Mw_inp,4) * ( getSMEFTCoeff("CHD", mu) * v2 - 2.0 * d_GF_mu ) 
            + 2.0 * pow(Mz*Mw_inp,2) * (d_GF_mu + 2.0 * sW_tree * cW_tree * getSMEFTCoeff("CHWB", mu) * v2 ) );
    
    deltaOLO = dOSMdalpha * alphatoW;
            
    return deltaOLO;
}
    
const double NPSMEFTd6General::DeltaOWtoalph(const double dOSMdMW, const double mu) const {
    
    double Wtoalpha;
    double d_GF_mu;
    double deltaOLO;
    
    // delta_GF, including RG scale dependence
    d_GF_mu = (getSMEFTCoeff("CHl3R", 0, 0, mu) + getSMEFTCoeff("CHl3R", 1, 1, mu) - 0.5 * (getSMEFTCoeff("CllR", 0, 1, 1, 0, mu) + getSMEFTCoeff("CllR", 1, 0, 0, 1, mu))) * v2;

    // Combinations of parameters to control the change of SM EW input scheme    
    // Combination multiplying d OSM/d MW    
    Wtoalpha = ( sqrt(M_PI * aleMz / sW2_tree)/( 8.0 * GF * sqrt( sqrt(2.0) * GF ) * Mz*Mz * sW2_tree*sW2_tree * (sW2_tree - cW2_tree) ) )
            * ( sqrt(2.0) * M_PI * sW2_tree * aleMz * getSMEFTCoeff("CHD", mu) * v2
            + ( 4.0 * GF * Mz*Mz * sW2_tree - 2.0 * sqrt(2.0) * aleMz * M_PI * (1.0 + sW2_tree) ) * d_GF_mu 
            + ( 8.0 * GF * Mz*Mz * sW2_tree - 4.0 * sqrt(2.0) * aleMz * M_PI ) * sW_tree * cW_tree * getSMEFTCoeff("CHWB", mu) * v2 );
    
    deltaOLO = dOSMdMW * Wtoalpha;
            
    return deltaOLO;
}

////////////////////////////////////////////////////////////////////////

//  Functions used to compute the 1-loop dependence of single Higgs observables 
// on the Higgs self-coupling

const double NPSMEFTd6General::deltaH3L1(double C1) const
{
    double lin;
    
    lin = ( -C1 - 2.0 * dZH - C1 * dZH );
    
    lin = lin / (1.0 + C1)/(-1.0 + dZH);
    
    return lin;
}


const double NPSMEFTd6General::deltaH3L2(double C1) const
{
    double quad;
    
    quad = dZH * ( 1.0 + 3.0 * dZH + C1 * (3.0 + dZH) );
    
    quad = quad / (1.0 + C1)/(-1.0 + dZH)/(-1.0 + dZH);
    
    return quad;
}

const double NPSMEFTd6General::delta2sH3(const double C1) const
{
    double delta2;
    
    delta2 = deltaH3L2(C1);
    
    // Add the quadratic dependence. Only active depending on the flags
    delta2 = cLHd6 * cLH3d62 * delta2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    return delta2;
}

const double NPSMEFTd6General::delta2sBRH3(const double C1prod, const double C1Hxx) const
{
    double delta2;
    
    delta2 = deltaH3L2(C1prod) + deltaH3L2(C1Hxx) - deltaH3L2(C1Htotal);
    
    // Extra contributions from the product and branching ratio. Only active depending on the flags
    delta2 += cLHd6 * cLH3d62 * (C1Htotal - C1Hxx) * (C1Htotal - C1prod) / (1.0 + C1Htotal) / (1.0 + C1Htotal) / (1.0 + C1Hxx) / (1.0 + C1prod);
    
    // Add the quadratic dependence
    delta2 = delta2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    return delta2;
}
     
////////////////////////////////////////////////////////////////////////
    
const double NPSMEFTd6General::DeltaGF() const {
    return ((getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1) - 0.5 * (getSMEFTCoeffEW("CllR", 0, 1, 1, 0) + getSMEFTCoeffEW("CllR", 1, 0, 0, 1))) * v2);
}

////////////////////////////////////////////////////////////////////////
// Functions to compute quantities involved in indirect corrections, depending on RG scale

const double NPSMEFTd6General::del_A_mu(const double mu) const {
    double d_A_mu;
    
    // Same expressions as in PostUpdate, with scale dependence (on NP only)
    d_A_mu = -2.0 * sW_tree * cW_tree * getSMEFTCoeff("CHWB", mu) * v2;

    return d_A_mu;    
}
    
const double NPSMEFTd6General::del_Z_mu(const double mu) const {
    double d_Z_mu;
    
    // Same expressions as in PostUpdate, with scale dependence (on NP only)
    d_Z_mu = 2.0 * sW_tree * cW_tree * getSMEFTCoeff("CHWB", mu) * v2; 
    
    return d_Z_mu;
}
    
const double NPSMEFTd6General::del_ZA_mu(const double mu) const {
    double d_ZA_mu;
    
    // Same expressions as in PostUpdate, with scale dependence (on NP only)
    d_ZA_mu = (cW2_tree - sW2_tree) * getSMEFTCoeff("CHWB", mu) * v2;
    
    return d_ZA_mu;
}
    
    
const double NPSMEFTd6General::del_e_mu(const double mu) const {
    double d_MW_mu, d_MZ_mu, d_GF_mu, d_e_mu;
    
    // Same expressions as in PostUpdate, with scale dependence (on NP only)
    d_MW_mu = (3.0 / 8.0) * (getSMEFTCoeff("CH", mu) / lambdaH_tree) * v2;
    d_MZ_mu = (sW_tree * cW_tree * getSMEFTCoeff("CHWB", mu) + 0.25 * getSMEFTCoeff("CHD", mu) + (3.0 / 8.0) * getSMEFTCoeff("CH", mu) / lambdaH_tree) * v2;
    d_GF_mu = ((getSMEFTCoeff("CHl3R", 0, 0, mu) + getSMEFTCoeff("CHl3R", 1, 1, mu) - 0.5 * (getSMEFTCoeff("CllR", 0, 1, 1, 0, mu) + getSMEFTCoeff("CllR", 1, 0, 0, 1, mu))) * v2);
    
    d_e_mu = cAsch * (-0.5 * del_A_mu(mu))
            + cWsch * ((cW2_tree / sW2_tree) * (d_MW_mu - d_MZ_mu) - 0.5 * d_GF_mu);

    return d_e_mu;
}
    
const double NPSMEFTd6General::del_sW2_mu(const double mu) const {
    double d_GF_mu, d_MW_mu, d_MZ_mu, d_sW2_mu;
    
    // Same expressions as in PostUpdate, with scale dependence (on NP only)
    d_GF_mu = ((getSMEFTCoeff("CHl3R", 0, 0, mu) + getSMEFTCoeff("CHl3R", 1, 1, mu) - 0.5 * (getSMEFTCoeff("CllR", 0, 1, 1, 0, mu) + getSMEFTCoeff("CllR", 1, 0, 0, 1, mu))) * v2);
    d_MW_mu = (3.0 / 8.0) * (getSMEFTCoeff("CH", mu) / lambdaH_tree) * v2;
    d_MZ_mu = (sW_tree * cW_tree * getSMEFTCoeff("CHWB", mu) + 0.25 * getSMEFTCoeff("CHD", mu) + (3.0 / 8.0) * getSMEFTCoeff("CH", mu) / lambdaH_tree) * v2;
    
    d_sW2_mu = cAsch * (-cW2_tree * (d_GF_mu - 2.0 * (d_MW_mu - d_MZ_mu) - del_A_mu(mu)) / (sW2_tree - cW2_tree))
            + cWsch * (2.0 * cW2_tree * (d_MW_mu - d_MZ_mu) / sW2_tree);
    
    return d_sW2_mu;    
}


const double NPSMEFTd6General::delU_gNC(const double mu) const {
    
    double dg;

    double d_GF_mu, d_MW_mu, d_MZ_mu;
    
    // Same expressions as in PostUpdate, with scale dependence (on NP only)   
    d_GF_mu = ((getSMEFTCoeff("CHl3R", 0, 0, mu) + getSMEFTCoeff("CHl3R", 1, 1, mu) - 0.5 * (getSMEFTCoeff("CllR", 0, 1, 1, 0, mu) + getSMEFTCoeff("CllR", 1, 0, 0, 1, mu))) * v2);
    d_MW_mu = (3.0 / 8.0) * (getSMEFTCoeff("CH", mu) / lambdaH_tree) * v2;
    d_MZ_mu = (sW_tree * cW_tree * getSMEFTCoeff("CHWB", mu) + 0.25 * getSMEFTCoeff("CHD", mu) + (3.0 / 8.0) * getSMEFTCoeff("CH", mu) / lambdaH_tree) * v2;
    
    
    dg = (0.5 * del_Z_mu(mu) - 0.5 * d_GF_mu + d_MW_mu - d_MZ_mu);
    
    return dg;
}
    

const double NPSMEFTd6General::delQ_gNC(const double mu) const {
    
    double dg;
    
    // Same expressions as in PostUpdate, with scale dependence (on NP only)
    dg = -(sW_tree * cW_tree * del_ZA_mu(mu) + sW2_tree * del_sW2_mu(mu));
    
    return dg;
}
    

const double NPSMEFTd6General::delU_gCC(const double mu) const {
    
    double dg;
    
    // Same expressions as in PostUpdate, with scale dependence (on NP only)    
    dg = (del_e_mu(mu) - 0.5 * del_sW2_mu(mu));
    
    return dg;
}

///////////////////////////// Oblique parameters //////////////////////////// 

const double NPSMEFTd6General::obliqueS() const {
    return (4.0 * sW_tree * cW_tree * getSMEFTCoeffEW("CHWB") / aleMz * v2);
}

const double NPSMEFTd6General::obliqueT() const {
    return (-getSMEFTCoeffEW("CHD") / 2.0 / aleMz * v2);
}

const double NPSMEFTd6General::obliqueU() const {
    return 0.0;
}

const double NPSMEFTd6General::obliqueW() const {
    return 0.;
}

const double NPSMEFTd6General::obliqueY() const {
    return 0.;
}

/////////////////////////////// Deviations in the experimental values of the SM input parameters /////////////////////////////////////////

const double NPSMEFTd6General::deltaMz() const {
    //  Ref. value used in MG simulations
    return ( (Mz - 91.1879) / 91.1879);
}

const double NPSMEFTd6General::deltaMz2() const {
    return ( 0.0);
}

const double NPSMEFTd6General::deltaMh() const {
    //  Ref. value used in MG simulations
    return ( (mHl - 125.1) / 125.1);
}

const double NPSMEFTd6General::deltaMh2() const {
    return ( 0.0);
}

const double NPSMEFTd6General::deltamt() const {
    //  Ref. value used in MG simulations
    return ( (mtpole - 173.0) / 173.0);
}

const double NPSMEFTd6General::deltamt2() const {
    return ( 0.0);
}

const double NPSMEFTd6General::deltamb() const {
    //  Ref. value used in MG simulations
    return ( ((quarks[BOTTOM].getMass()) - 4.18) / 4.18);
}

const double NPSMEFTd6General::deltamb2() const {
    return ( 0.0);
}

const double NPSMEFTd6General::deltamc() const {
    //  Ref. value used in MG simulations
    return ( ((quarks[CHARM].getMass()) - 1.275) / 1.275);
}

const double NPSMEFTd6General::deltamc2() const {
    return ( 0.0);
}

const double NPSMEFTd6General::deltamtau() const {
    //  Ref. value used in MG simulations
    return ( ((leptons[TAU].getMass()) - 1.77682) / 1.77682);
}

const double NPSMEFTd6General::deltamtau2() const {
    return ( 0.0);
}

const double NPSMEFTd6General::deltaGmu() const {
    //  Ref. value used in MG simulations
    return ( (GF - 1.16637 / 100000.0) / (1.16637 / 100000.0));
}

const double NPSMEFTd6General::deltaGmu2() const {
    return ( 0.0);
}

const double NPSMEFTd6General::deltaaMZ() const {
    //  Ref. value used in MG simulations
    return ( (aleMz - 0.007754633699856456) / 0.007754633699856456);
}

const double NPSMEFTd6General::deltaaMZ2() const {
    return ( 0.0);
}

const double NPSMEFTd6General::deltaa0() const {
    //  Ref. value used in MG simulations
    return ( (aleMz - 0.0072973525664) / 0.0072973525664);
}

const double NPSMEFTd6General::deltaa02() const {
    return ( 0.0);
}

const double NPSMEFTd6General::deltaaSMZ() const {
    //  Ref. value used in MG simulations
    return ( (AlsMz - 0.1180) / 0.1180);
}

const double NPSMEFTd6General::deltaaSMZ2() const {
    return ( 0.0);
}

const double NPSMEFTd6General::deltaMw() const {
    //  Ref. value used in MG simulations
    //  (Value chosen to produce the same tree level SM pars as in the Alpha scheme with the input pars above)
    return ( (Mw_inp - 79.96717329554225) / 79.96717329554225);
}

const double NPSMEFTd6General::deltaMw2() const {
    return ( 0.0);
}


////////////////////////////////////////////////////////////////////////

const double NPSMEFTd6General::alphaMz() const {
    
    double deltaNLO;
    
    // Finite NLO corrections in W mass scheme
    deltaNLO = cWsch * (-0.000072 * getSMEFTCoeffEW("CW")  -0.000016 * getSMEFTCoeffEW("CHbox")  -0.000478 * getSMEFTCoeffEW("CHD")  -0.000014 * getSMEFTCoeffEW("CHB")   
            -0.000017 * getSMEFTCoeffEW("CHW")  -0.00081 * getSMEFTCoeffEW("CHWB")  -0.000144 * getSMEFTCoeffEW("CuWR",2, 2) -0.000438 * getSMEFTCoeffEW("CuBR",2, 2)  
            -0.00003 * getSMEFTCoeffEW("CHl1R",0, 0) -0.00003 * getSMEFTCoeffEW("CHl1R",1, 1) -0.000023 * getSMEFTCoeffEW("CHl1R",2, 2) -0.000672 * getSMEFTCoeffEW("CHl3R",0, 0)  
            -0.000672 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000014 * getSMEFTCoeffEW("CHl3R",2, 2) -0.000023 * getSMEFTCoeffEW("CHeR",0, 0) -0.000023 * getSMEFTCoeffEW("CHeR",1, 1)  
            -0.000023 * getSMEFTCoeffEW("CHeR",2, 2) +0.000023 * getSMEFTCoeffEW("CHq1R",0, 0) +0.000023 * getSMEFTCoeffEW("CHq1R",1, 1) -0.001004 * getSMEFTCoeffEW("CHq1R",2, 2)  
            +0.000043 * getSMEFTCoeffEW("CHq3R",0, 0) +0.000043 * getSMEFTCoeffEW("CHq3R",1, 1) +0.000584 * getSMEFTCoeffEW("CHq3R",2, 2) +0.000045 * getSMEFTCoeffEW("CHuR",0, 0)  
            +0.000045 * getSMEFTCoeffEW("CHuR",1, 1) +0.001179 * getSMEFTCoeffEW("CHuR",2, 2) -0.000023 * getSMEFTCoeffEW("CHdR",0, 0) -0.000023 * getSMEFTCoeffEW("CHdR",1, 1)  
            -0.000023 * getSMEFTCoeffEW("CHdR",2, 2) -0.000128 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) +0.000495 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) +0.00011 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2)  
            +0.00011 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) ) * v2; 
    
    return (aleMz * (1.0 + 2.0 * delta_e + delta_A) + cNLOd6 * deltaNLO );
}

const double NPSMEFTd6General::Mw() const {
    //    return (trueSM.Mw() - Mw_tree / 4.0 / (cW2_tree - sW2_tree)
    //            *(4.0 * sW_tree * cW_tree * getSMEFTCoeffEW("CHWB") * v2_over_LambdaNP2
    //            + cW2_tree * getSMEFTCoeffEW("CHD") * v2_over_LambdaNP2
    //            + 2.0 * sW2_tree * delta_GF));

    return (trueSM.Mw() + Mw_tree * deltaMwd6());
}

const double NPSMEFTd6General::deltaMwd6() const {
    //    return (- 1.0 / 4.0 / (cW2_tree - sW2_tree)
    //            *(4.0 * sW_tree * cW_tree * getSMEFTCoeffEW("CHWB") * v2_over_LambdaNP2
    //            + cW2_tree * getSMEFTCoeffEW("CHD") * v2_over_LambdaNP2
    //            + 2.0 * sW2_tree * delta_GF));
    
    double deltaNLO;

    // Finite NLO corrections in alpha scheme (set to zero for the moment)
    deltaNLO = 0.; 

    return (delta_e - 0.5 * delta_sW2 + delta_v + cNLOd6 * deltaNLO);
}

const double NPSMEFTd6General::deltaMwd62() const {
    double dMW = 0.0;

    return (dMW * dMW);
}

const double NPSMEFTd6General::deltaGamma_Wff(const Particle fi, const Particle fj) const {
    double G0 = GF * pow(Mz*cW_tree, 3.0) / 6.0 / sqrt(2.0) / M_PI;
    double deltaGamma_Wij;
    double GammaW_tree;
    double CHF3ij;
    
    double deltaNLO;
    
    if (fj.getIndex() - fi.getIndex() == 1)
        //CHF3ij = CHF3_diag(fi);
        CHF3ij = CHF3CC_diag(fi).real();
    else
        CHF3ij = 0.;
    
    //if (fi.is("QUARK")) {
    if ( fi.getIndex() > 5 ) {
        GammaW_tree = Nc * G0;
    } else {
        GammaW_tree = G0;
    }

    //    deltaGamma_Wij = - 3.0 * GammaW_tree / 4.0 / (cW2_tree - sW2_tree)
    //            *(4.0 * sW_tree * cW_tree * getSMEFTCoeffEW("CHWB") * v2_over_LambdaNP2
    //            + cW2_tree * getSMEFTCoeffEW("CHD") * v2_over_LambdaNP2
    //            + 2.0 * (1.0 + cW2_tree) / 3.0 * delta_GF);

    //    deltaGamma_Wij = deltaGamma_Wij + 2.0 * GammaW_tree * CHF3ij * v2_over_LambdaNP2;

    deltaGamma_Wij = deltaMwd6() + 2.0 * delta_UgCC;

    deltaGamma_Wij = GammaW_tree * (deltaGamma_Wij + 2.0 * CHF3ij * v2);

    // Finite NLO corrections    
    // NLO only for leptonic decays for lepton universality tests. 
    // This function is only used for the calculation of BR, RWc and universality tests. W width includes total NLO corrections separately.
    switch(fj.getIndex()){
    //if (fj.is("ELECTRON")) {
        case 1:
            deltaNLO = (-0.000127 * getSMEFTCoeffEW("CW")  -0.000016 * getSMEFTCoeffEW("CHbox")  +0.00211 * getSMEFTCoeffEW("CHD")  -0.000128 * getSMEFTCoeffEW("CHW")   
            +0.004837 * getSMEFTCoeffEW("CHWB")  +0.000453 * getSMEFTCoeffEW("CuWR",2, 2) -0.000403 * getSMEFTCoeffEW("CHl1R",0, 0) -0.000232 * getSMEFTCoeffEW("CHl1R",1, 1)  
            +0.003165 * getSMEFTCoeffEW("CHl3R",0, 0) -0.003623 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000408 * getSMEFTCoeffEW("CHl3R",2, 2) +0.001225 * getSMEFTCoeffEW("CHq3R",0, 0)  
            +0.001225 * getSMEFTCoeffEW("CHq3R",1, 1) -0.000113 * getSMEFTCoeffEW("CHq3R",2, 2) -0.000376 * getSMEFTCoeffEW("CllR",0, 0, 0, 0) -0.003834 * getSMEFTCoeffEW("CllR",0, 0, 1, 1)  
            -0.002052 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.000376 * getSMEFTCoeffEW("CllR",0, 2, 2, 0) -0.002352 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0) -0.002352 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1)  
            -0.002255 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) +0.003307 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) ) * v2;  
        break;
    //} else if (fj.is("MUON")) {
        case 3:
            deltaNLO = (-0.000127 * getSMEFTCoeffEW("CW")  -0.000016 * getSMEFTCoeffEW("CHbox")  +0.00211 * getSMEFTCoeffEW("CHD")  -0.000128 * getSMEFTCoeffEW("CHW")   
            +0.004837 * getSMEFTCoeffEW("CHWB")  +0.000453 * getSMEFTCoeffEW("CuWR",2, 2) -0.000232 * getSMEFTCoeffEW("CHl1R",0, 0) -0.000403 * getSMEFTCoeffEW("CHl1R",1, 1)  
            -0.003623 * getSMEFTCoeffEW("CHl3R",0, 0) +0.003165 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000408 * getSMEFTCoeffEW("CHl3R",2, 2) +0.001225 * getSMEFTCoeffEW("CHq3R",0, 0)  
            +0.001225 * getSMEFTCoeffEW("CHq3R",1, 1) -0.000113 * getSMEFTCoeffEW("CHq3R",2, 2) -0.003834 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) -0.002052 * getSMEFTCoeffEW("CllR",0, 1, 1, 0)  
            -0.000376 * getSMEFTCoeffEW("CllR",1, 1, 1, 1) -0.000376 * getSMEFTCoeffEW("CllR",1, 2, 2, 1) +0.003307 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) -0.002352 * getSMEFTCoeffEW("Clq3R",1, 1, 0, 0)  
            -0.002352 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1) -0.002255 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) ) * v2;  
        break;
    //} else if (fj.is("TAU")) {
        case 5:
            deltaNLO = (-0.000127 * getSMEFTCoeffEW("CW")  -0.000016 * getSMEFTCoeffEW("CHbox")  +0.00211 * getSMEFTCoeffEW("CHD")  -0.000128 * getSMEFTCoeffEW("CHW")   
            +0.004837 * getSMEFTCoeffEW("CHWB")  +0.000453 * getSMEFTCoeffEW("CuWR",2, 2) -0.000232 * getSMEFTCoeffEW("CHl1R",0, 0) -0.000232 * getSMEFTCoeffEW("CHl1R",1, 1)  
            -0.000171 * getSMEFTCoeffEW("CHl1R",2, 2) -0.003623 * getSMEFTCoeffEW("CHl3R",0, 0) -0.003623 * getSMEFTCoeffEW("CHl3R",1, 1) +0.007196 * getSMEFTCoeffEW("CHl3R",2, 2)  
            +0.001225 * getSMEFTCoeffEW("CHq3R",0, 0) +0.001225 * getSMEFTCoeffEW("CHq3R",1, 1) -0.000113 * getSMEFTCoeffEW("CHq3R",2, 2) -0.003834 * getSMEFTCoeffEW("CllR",0, 0, 1, 1)  
            -0.001677 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.000376 * getSMEFTCoeffEW("CllR",0, 2, 2, 0) -0.000376 * getSMEFTCoeffEW("CllR",1, 2, 2, 1) -0.000376 * getSMEFTCoeffEW("CllR",2, 2, 2, 2)  
            +0.003307 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) +0.003307 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) -0.002352 * getSMEFTCoeffEW("Clq3R",2, 2, 0, 0) -0.002352 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1)  
            -0.005561 * getSMEFTCoeffEW("Clq3R",2, 2, 2, 2) ) * v2; 
        break;
    //} else if (fi.is("UP")) {
        case 6:
            deltaNLO = (-0.000382 * getSMEFTCoeffEW("CW")  -0.000047 * getSMEFTCoeffEW("CHbox")  +0.00701 * getSMEFTCoeffEW("CHD")  -0.000384 * getSMEFTCoeffEW("CHW")   
            +0.015722 * getSMEFTCoeffEW("CHWB")  +0.001359 * getSMEFTCoeffEW("CuWR",2, 2) -0.000697 * getSMEFTCoeffEW("CHl1R",0, 0) -0.000697 * getSMEFTCoeffEW("CHl1R",1, 1)  
            -0.035975 * getSMEFTCoeffEW("CHl3R",0, 0) -0.035975 * getSMEFTCoeffEW("CHl3R",1, 1) +0.001225 * getSMEFTCoeffEW("CHl3R",2, 2) +0.000171 * getSMEFTCoeffEW("CHq1R",0, 0)  
            +0.0749 * getSMEFTCoeffEW("CHq3R",0, 0) +0.003675 * getSMEFTCoeffEW("CHq3R",1, 1) -0.000338 * getSMEFTCoeffEW("CHq3R",2, 2) -0.011501 * getSMEFTCoeffEW("CllR",0, 0, 1, 1)  
            +0.020076 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.001127 * getSMEFTCoeffEW("Cqq1R",0, 0, 0, 0) -0.001127 * getSMEFTCoeffEW("Cqq1R",0, 1, 1, 0) -0.012833 * getSMEFTCoeffEW("Cqq1R",0, 2, 2, 0)  
            -0.012983 * getSMEFTCoeffEW("Cqq3R",0, 0, 0, 0) -0.014109 * getSMEFTCoeffEW("Cqq3R",0, 0, 1, 1) -0.033367 * getSMEFTCoeffEW("Cqq3R",0, 0, 2, 2) +0.001127 * getSMEFTCoeffEW("Cqq3R",0, 1, 1, 0)  
            +0.012833 * getSMEFTCoeffEW("Cqq3R",0, 2, 2, 0) -0.002352 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0) +0.00992 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) -0.002352 * getSMEFTCoeffEW("Clq3R",1, 1, 0, 0)  
            +0.00992 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) -0.002352 * getSMEFTCoeffEW("Clq3R",2, 2, 0, 0) ) * v2; 
        break;
    //} else if (fi.is("CHARM")) {
        case 8:
            deltaNLO = (-0.000382 * getSMEFTCoeffEW("CW")  -0.000047 * getSMEFTCoeffEW("CHbox")  +0.00701 * getSMEFTCoeffEW("CHD")  -0.000384 * getSMEFTCoeffEW("CHW")   
            +0.015722 * getSMEFTCoeffEW("CHWB")  +0.001359 * getSMEFTCoeffEW("CuWR",2, 2) -0.000697 * getSMEFTCoeffEW("CHl1R",0, 0) -0.000697 * getSMEFTCoeffEW("CHl1R",1, 1)  
            -0.035975 * getSMEFTCoeffEW("CHl3R",0, 0) -0.035975 * getSMEFTCoeffEW("CHl3R",1, 1) +0.001225 * getSMEFTCoeffEW("CHl3R",2, 2) +0.000171 * getSMEFTCoeffEW("CHq1R",1, 1)  
            +0.003675 * getSMEFTCoeffEW("CHq3R",0, 0) +0.0749 * getSMEFTCoeffEW("CHq3R",1, 1) -0.000338 * getSMEFTCoeffEW("CHq3R",2, 2) -0.011501 * getSMEFTCoeffEW("CllR",0, 0, 1, 1)  
            +0.020076 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.001127 * getSMEFTCoeffEW("Cqq1R",0, 1, 1, 0) -0.001127 * getSMEFTCoeffEW("Cqq1R",1, 1, 1, 1) -0.012833 * getSMEFTCoeffEW("Cqq1R",1, 2, 2, 1)  
            -0.014109 * getSMEFTCoeffEW("Cqq3R",0, 0, 1, 1) +0.001127 * getSMEFTCoeffEW("Cqq3R",0, 1, 1, 0) -0.012983 * getSMEFTCoeffEW("Cqq3R",1, 1, 1, 1) -0.033367 * getSMEFTCoeffEW("Cqq3R",1, 1, 2, 2)  
            +0.012833 * getSMEFTCoeffEW("Cqq3R",1, 2, 2, 1) -0.002352 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) +0.00992 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) -0.002352 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1)  
            +0.00992 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) -0.002352 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1) ) * v2; 
        break;   
    //} else {
        default:
            deltaNLO = 0.;
    }
    
    return deltaGamma_Wij + cNLOd6 * deltaNLO;
}

const double NPSMEFTd6General::GammaW(const Particle fi, const Particle fj) const {
    return ( trueSM.GammaW(fi, fj) + deltaGamma_Wff(fi, fj));
}

const double NPSMEFTd6General::deltaGamma_W() const {
    double G0 = GF * pow(Mz*cW_tree, 3.0) / 6.0 / sqrt(2.0) / M_PI;
    double GammaW_tree = (3.0 + 2.0 * Nc) * G0;

    //    return (- 3.0 * GammaW_tree / 4.0 / (cW2_tree - sW2_tree)
    //            *(4.0 * sW_tree * cW_tree * getSMEFTCoeffEW("CHWB") * v2_over_LambdaNP2
    //            + cW2_tree * getSMEFTCoeffEW("CHD") * v2_over_LambdaNP2
    //            + 2.0 * (1.0 + cW2_tree) / 3.0 * delta_GF)
    //            + 2.0 * G0 * (getSMEFTCoeffEW("CHl3R",0,0) + getSMEFTCoeffEW("CHl3R",1,1) + getSMEFTCoeffEW("CHl3R",2,2) + Nc*(getSMEFTCoeffEW("CHq3R",0,0) + getSMEFTCoeffEW("CHq3R",1,1))) * v2_over_LambdaNP2);          

    double deltaNLO;

    // Finite NLO corrections    
    deltaNLO = (-0.001145 * getSMEFTCoeffEW("CW")  -0.000142 * getSMEFTCoeffEW("CHbox")  +0.020351 * getSMEFTCoeffEW("CHD")  -0.001153 * getSMEFTCoeffEW("CHW")   
            +0.045955 * getSMEFTCoeffEW("CHWB")  +0.004077 * getSMEFTCoeffEW("CuWR",2, 2) -0.002262 * getSMEFTCoeffEW("CHl1R",0, 0) -0.002262 * getSMEFTCoeffEW("CHl1R",1, 1)  
            -0.000171 * getSMEFTCoeffEW("CHl1R",2, 2) -0.076031 * getSMEFTCoeffEW("CHl3R",0, 0) -0.076031 * getSMEFTCoeffEW("CHl3R",1, 1) +0.010463 * getSMEFTCoeffEW("CHl3R",2, 2)  
            +0.000171 * getSMEFTCoeffEW("CHq1R",0, 0) +0.000171 * getSMEFTCoeffEW("CHq1R",1, 1) +0.082251 * getSMEFTCoeffEW("CHq3R",0, 0) +0.082251 * getSMEFTCoeffEW("CHq3R",1, 1)  
            -0.001014 * getSMEFTCoeffEW("CHq3R",2, 2) -0.000376 * getSMEFTCoeffEW("CllR",0, 0, 0, 0) -0.034503 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) +0.03437 * getSMEFTCoeffEW("CllR",0, 1, 1, 0)  
            -0.000751 * getSMEFTCoeffEW("CllR",0, 2, 2, 0) -0.000376 * getSMEFTCoeffEW("CllR",1, 1, 1, 1) -0.000751 * getSMEFTCoeffEW("CllR",1, 2, 2, 1) -0.000376 * getSMEFTCoeffEW("CllR",2, 2, 2, 2)  
            -0.001127 * getSMEFTCoeffEW("Cqq1R",0, 0, 0, 0) -0.002253 * getSMEFTCoeffEW("Cqq1R",0, 1, 1, 0) -0.012833 * getSMEFTCoeffEW("Cqq1R",0, 2, 2, 0) -0.001127 * getSMEFTCoeffEW("Cqq1R",1, 1, 1, 1)  
            -0.012833 * getSMEFTCoeffEW("Cqq1R",1, 2, 2, 1) -0.012983 * getSMEFTCoeffEW("Cqq3R",0, 0, 0, 0) -0.028219 * getSMEFTCoeffEW("Cqq3R",0, 0, 1, 1) -0.033367 * getSMEFTCoeffEW("Cqq3R",0, 0, 2, 2)  
            +0.002253 * getSMEFTCoeffEW("Cqq3R",0, 1, 1, 0) +0.012833 * getSMEFTCoeffEW("Cqq3R",0, 2, 2, 0) -0.012983 * getSMEFTCoeffEW("Cqq3R",1, 1, 1, 1) -0.033367 * getSMEFTCoeffEW("Cqq3R",1, 1, 2, 2)  
            +0.012833 * getSMEFTCoeffEW("Cqq3R",1, 2, 2, 1) -0.004703 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0) -0.004703 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) +0.024198 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2)  
            -0.004703 * getSMEFTCoeffEW("Clq3R",1, 1, 0, 0) -0.004703 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1) +0.024198 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) -0.004703 * getSMEFTCoeffEW("Clq3R",2, 2, 0, 0)  
            -0.004703 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1) -0.005561 * getSMEFTCoeffEW("Clq3R",2, 2, 2, 2) ) * v2; 
    
    return ( GammaW_tree * (deltaMwd6() + 2.0 * delta_UgCC)
            + 2.0 * G0 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1) + getSMEFTCoeffEW("CHl3R", 2, 2) + Nc * (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1))) * v2
            + cNLOd6 * deltaNLO );
}

const double NPSMEFTd6General::GammaW() const {
    return ( trueSM.GammaW() + deltaGamma_W());
}

const double NPSMEFTd6General::deltaGwd6() const {
    return ( deltaGamma_W() / trueSM.GammaW());
}

const double NPSMEFTd6General::deltaGwd62() const {
    double dWW = 0.0;

    return (dWW * dWW);
}

const double NPSMEFTd6General::deltaGamma_Zf(const Particle f) const
{
    double deltaGamma_Zf = 0.;
    bool nonZeroNP = false;

    double delGVf = deltaGV_f(f);
    double delGAf = deltaGA_f(f);
    
    double gVf = trueSM.gV_f(f).real();
    double gAf = trueSM.gA_f(f).real(); 
    
    double Nf;
    
    double deltaNLO;
    
    //if (f.is("LEPTON")) {
    //    Nf = 1.0;
    //} else {
    //    Nf = 3.0;
    //}
    
    if ( f.getIndex() < 6 ) {
        Nf = 1.0;
    } else {
        Nf = 3.0;
    }
    
    double alpha = trueSM.alphaMz();
    double sW2_SM = trueSM.sW2();
    double cW2_SM = trueSM.cW2();
    
    if (delGVf != 0.0 || delGAf != 0.0)
            nonZeroNP = true;
 
    if (nonZeroNP) {
        double delGammaZf = 0.0;
        delGammaZf = 2.0 * Nf * (gVf * delGVf + gAf * delGAf);
        
        deltaGamma_Zf = alpha * Mz / 12.0 / sW2_SM / cW2_SM * delGammaZf;
    }

    // Finite NLO corrections    
    // NLO only for leptonic decays for lepton universality tests . 
    // This function is only used for the calculation of corrections to BR and test of universality. Z width includes total NLO corrections separately.
    switch(f.getIndex()){
    //if (f.is("NEUTRINO_1")) {
        case 0:
            deltaNLO = (-0.000125 * getSMEFTCoeffEW("CW")  -0.000183 * getSMEFTCoeffEW("CHbox")  -0.005003 * getSMEFTCoeffEW("CHD")  -0.000033 * getSMEFTCoeffEW("CHB")   
            -0.000115 * getSMEFTCoeffEW("CHW")  +0.000882 * getSMEFTCoeffEW("CHWB")  +0.000081 * getSMEFTCoeffEW("CuWR",2, 2) -0.000044 * getSMEFTCoeffEW("CuBR",2, 2)  
            -0.012448 * getSMEFTCoeffEW("CHl1R",0, 0) -0.000256 * getSMEFTCoeffEW("CHl1R",1, 1) -0.000086 * getSMEFTCoeffEW("CHl1R",2, 2) +0.002853 * getSMEFTCoeffEW("CHl3R",0, 0)  
            -0.007785 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000298 * getSMEFTCoeffEW("CHl3R",2, 2) -0.000086 * getSMEFTCoeffEW("CHeR",0, 0) -0.000086 * getSMEFTCoeffEW("CHeR",1, 1)  
            -0.000086 * getSMEFTCoeffEW("CHeR",2, 2) +0.000086 * getSMEFTCoeffEW("CHq1R",0, 0) +0.000086 * getSMEFTCoeffEW("CHq1R",1, 1) -0.00743 * getSMEFTCoeffEW("CHq1R",2, 2)  
            +0.000895 * getSMEFTCoeffEW("CHq3R",0, 0) +0.000895 * getSMEFTCoeffEW("CHq3R",1, 1) +0.003579 * getSMEFTCoeffEW("CHq3R",2, 2) +0.000172 * getSMEFTCoeffEW("CHuR",0, 0)  
            +0.000172 * getSMEFTCoeffEW("CHuR",1, 1) +0.007935 * getSMEFTCoeffEW("CHuR",2, 2) -0.000086 * getSMEFTCoeffEW("CHdR",0, 0) -0.000086 * getSMEFTCoeffEW("CHdR",1, 1)  
            -0.000086 * getSMEFTCoeffEW("CHdR",2, 2) -0.000542 * getSMEFTCoeffEW("CllR",0, 0, 0, 0) -0.003087 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) -0.000286 * getSMEFTCoeffEW("CllR",0, 0, 2, 2)  
            +0.003656 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.000256 * getSMEFTCoeffEW("CllR",0, 2, 2, 0) +0.000143 * getSMEFTCoeffEW("Clq1R",0, 0, 0, 0) +0.000143 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1)  
            -0.006328 * getSMEFTCoeffEW("Clq1R",0, 0, 2, 2) -0.001492 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0) -0.001492 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) -0.005547 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2)  
            +0.002416 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) -0.000143 * getSMEFTCoeffEW("CleR",0, 0, 0, 0) -0.000143 * getSMEFTCoeffEW("CleR",0, 0, 1, 1) -0.000143 * getSMEFTCoeffEW("CleR",0, 0, 2, 2)  
            +0.000286 * getSMEFTCoeffEW("CluR",0, 0, 0, 0) +0.000286 * getSMEFTCoeffEW("CluR",0, 0, 1, 1) +0.00743 * getSMEFTCoeffEW("CluR",0, 0, 2, 2) -0.000143 * getSMEFTCoeffEW("CldR",0, 0, 0, 0)  
            -0.000143 * getSMEFTCoeffEW("CldR",0, 0, 1, 1) -0.000143 * getSMEFTCoeffEW("CldR",0, 0, 2, 2) ) * v2;              
        break;            
    //if (f.is("ELECTRON")) {
        case 1:
            deltaNLO = (+0.000102 * getSMEFTCoeffEW("CW")  -0.000051 * getSMEFTCoeffEW("CHbox")  -0.010075 * getSMEFTCoeffEW("CHD")  -0.000003 * getSMEFTCoeffEW("CHB")   
            -0.000034 * getSMEFTCoeffEW("CHW")  -0.008133 * getSMEFTCoeffEW("CHWB")  -0.000273 * getSMEFTCoeffEW("CuWR",2, 2) +0.000422 * getSMEFTCoeffEW("CuBR",2, 2)  
            +0.000112 * getSMEFTCoeffEW("CHl1R",0, 0) -0.000106 * getSMEFTCoeffEW("CHl1R",1, 1) -0.00002 * getSMEFTCoeffEW("CHl1R",2, 2) -0.003345 * getSMEFTCoeffEW("CHl3R",0, 0)  
            -0.002441 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000152 * getSMEFTCoeffEW("CHl3R",2, 2) -0.011199 * getSMEFTCoeffEW("CHeR",0, 0) -0.00002 * getSMEFTCoeffEW("CHeR",1, 1)  
            -0.00002 * getSMEFTCoeffEW("CHeR",2, 2) +0.00002 * getSMEFTCoeffEW("CHq1R",0, 0) +0.00002 * getSMEFTCoeffEW("CHq1R",1, 1) -0.001728 * getSMEFTCoeffEW("CHq1R",2, 2)  
            +0.000456 * getSMEFTCoeffEW("CHq3R",0, 0) +0.000456 * getSMEFTCoeffEW("CHq3R",1, 1) +0.000535 * getSMEFTCoeffEW("CHq3R",2, 2) +0.00004 * getSMEFTCoeffEW("CHuR",0, 0)  
            +0.00004 * getSMEFTCoeffEW("CHuR",1, 1) +0.001527 * getSMEFTCoeffEW("CHuR",2, 2) -0.00002 * getSMEFTCoeffEW("CHdR",0, 0) -0.00002 * getSMEFTCoeffEW("CHdR",1, 1)  
            -0.00002 * getSMEFTCoeffEW("CHdR",2, 2) +0.00008 * getSMEFTCoeffEW("CllR",0, 0, 0, 0) -0.001258 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) +0.000158 * getSMEFTCoeffEW("CllR",0, 0, 2, 2)  
            +0.000406 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.000078 * getSMEFTCoeffEW("CllR",0, 2, 2, 0) -0.000079 * getSMEFTCoeffEW("Clq1R",0, 0, 0, 0) -0.000079 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1)  
            +0.0035 * getSMEFTCoeffEW("Clq1R",0, 0, 2, 2) -0.000825 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0) -0.000825 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) -0.003183 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2)  
            +0.001222 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) -0.000179 * getSMEFTCoeffEW("CeeR",0, 0, 0, 0) -0.000179 * getSMEFTCoeffEW("CeeR",0, 0, 1, 1) -0.000179 * getSMEFTCoeffEW("CeeR",0, 0, 2, 2)  
            +0.000128 * getSMEFTCoeffEW("CeuR",0, 0, 0, 0) +0.000128 * getSMEFTCoeffEW("CeuR",0, 0, 1, 1) +0.003321 * getSMEFTCoeffEW("CeuR",0, 0, 2, 2) -0.000064 * getSMEFTCoeffEW("CedR",0, 0, 0, 0)  
            -0.000064 * getSMEFTCoeffEW("CedR",0, 0, 1, 1) -0.000064 * getSMEFTCoeffEW("CedR",0, 0, 2, 2) +0.000015 * getSMEFTCoeffEW("CleR",0, 0, 0, 0) +0.000079 * getSMEFTCoeffEW("CleR",0, 0, 1, 1)  
            +0.000079 * getSMEFTCoeffEW("CleR",0, 0, 2, 2) -0.000064 * getSMEFTCoeffEW("CleR",1, 1, 0, 0) -0.000064 * getSMEFTCoeffEW("CleR",2, 2, 0, 0) -0.000158 * getSMEFTCoeffEW("CluR",0, 0, 0, 0)  
            -0.000158 * getSMEFTCoeffEW("CluR",0, 0, 1, 1) -0.004109 * getSMEFTCoeffEW("CluR",0, 0, 2, 2) +0.000079 * getSMEFTCoeffEW("CldR",0, 0, 0, 0) +0.000079 * getSMEFTCoeffEW("CldR",0, 0, 1, 1)  
            +0.000079 * getSMEFTCoeffEW("CldR",0, 0, 2, 2) +0.000064 * getSMEFTCoeffEW("CqeR",0, 0, 0, 0) +0.000064 * getSMEFTCoeffEW("CqeR",1, 1, 0, 0) -0.002828 * getSMEFTCoeffEW("CqeR",2, 2, 0, 0) ) * v2; 
        break;
    //if (f.is("NEUTRINO_2")) {
        case 2:
            deltaNLO = (-0.000125 * getSMEFTCoeffEW("CW")  -0.000183 * getSMEFTCoeffEW("CHbox")  -0.005003 * getSMEFTCoeffEW("CHD")  -0.000033 * getSMEFTCoeffEW("CHB")   
            -0.000115 * getSMEFTCoeffEW("CHW")  +0.000882 * getSMEFTCoeffEW("CHWB")  +0.000081 * getSMEFTCoeffEW("CuWR",2, 2) -0.000044 * getSMEFTCoeffEW("CuBR",2, 2)  
            -0.000256 * getSMEFTCoeffEW("CHl1R",0, 0) -0.012448 * getSMEFTCoeffEW("CHl1R",1, 1) -0.000086 * getSMEFTCoeffEW("CHl1R",2, 2) -0.007785 * getSMEFTCoeffEW("CHl3R",0, 0)  
            +0.002853 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000298 * getSMEFTCoeffEW("CHl3R",2, 2) -0.000086 * getSMEFTCoeffEW("CHeR",0, 0) -0.000086 * getSMEFTCoeffEW("CHeR",1, 1)  
            -0.000086 * getSMEFTCoeffEW("CHeR",2, 2) +0.000086 * getSMEFTCoeffEW("CHq1R",0, 0) +0.000086 * getSMEFTCoeffEW("CHq1R",1, 1) -0.00743 * getSMEFTCoeffEW("CHq1R",2, 2)  
            +0.000895 * getSMEFTCoeffEW("CHq3R",0, 0) +0.000895 * getSMEFTCoeffEW("CHq3R",1, 1) +0.003579 * getSMEFTCoeffEW("CHq3R",2, 2) +0.000172 * getSMEFTCoeffEW("CHuR",0, 0)  
            +0.000172 * getSMEFTCoeffEW("CHuR",1, 1) +0.007935 * getSMEFTCoeffEW("CHuR",2, 2) -0.000086 * getSMEFTCoeffEW("CHdR",0, 0) -0.000086 * getSMEFTCoeffEW("CHdR",1, 1)  
            -0.000086 * getSMEFTCoeffEW("CHdR",2, 2) -0.003087 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) +0.003656 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.000542 * getSMEFTCoeffEW("CllR",1, 1, 1, 1)  
            -0.000286 * getSMEFTCoeffEW("CllR",1, 1, 2, 2) -0.000256 * getSMEFTCoeffEW("CllR",1, 2, 2, 1) +0.000143 * getSMEFTCoeffEW("Clq1R",1, 1, 0, 0) +0.000143 * getSMEFTCoeffEW("Clq1R",1, 1, 1, 1)  
            -0.006328 * getSMEFTCoeffEW("Clq1R",1, 1, 2, 2) +0.002416 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) -0.001492 * getSMEFTCoeffEW("Clq3R",1, 1, 0, 0) -0.001492 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1)  
            -0.005547 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) -0.000143 * getSMEFTCoeffEW("CleR",1, 1, 0, 0) -0.000143 * getSMEFTCoeffEW("CleR",1, 1, 1, 1) -0.000143 * getSMEFTCoeffEW("CleR",1, 1, 2, 2)  
            +0.000286 * getSMEFTCoeffEW("CluR",1, 1, 0, 0) +0.000286 * getSMEFTCoeffEW("CluR",1, 1, 1, 1) +0.00743 * getSMEFTCoeffEW("CluR",1, 1, 2, 2) -0.000143 * getSMEFTCoeffEW("CldR",1, 1, 0, 0)  
            -0.000143 * getSMEFTCoeffEW("CldR",1, 1, 1, 1) -0.000143 * getSMEFTCoeffEW("CldR",1, 1, 2, 2) ) * v2; 
        break;        
    //} else if (f.is("MUON")) {
        case 3:
            deltaNLO = (+0.000102 * getSMEFTCoeffEW("CW")  -0.000051 * getSMEFTCoeffEW("CHbox")  -0.010075 * getSMEFTCoeffEW("CHD")  -0.000003 * getSMEFTCoeffEW("CHB")   
            -0.000034 * getSMEFTCoeffEW("CHW")  -0.008133 * getSMEFTCoeffEW("CHWB")  -0.000273 * getSMEFTCoeffEW("CuWR",2, 2) +0.000422 * getSMEFTCoeffEW("CuBR",2, 2)  
            -0.000106 * getSMEFTCoeffEW("CHl1R",0, 0) +0.000112 * getSMEFTCoeffEW("CHl1R",1, 1) -0.00002 * getSMEFTCoeffEW("CHl1R",2, 2) -0.002441 * getSMEFTCoeffEW("CHl3R",0, 0)  
            -0.003345 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000152 * getSMEFTCoeffEW("CHl3R",2, 2) -0.00002 * getSMEFTCoeffEW("CHeR",0, 0) -0.011199 * getSMEFTCoeffEW("CHeR",1, 1)  
            -0.00002 * getSMEFTCoeffEW("CHeR",2, 2) +0.00002 * getSMEFTCoeffEW("CHq1R",0, 0) +0.00002 * getSMEFTCoeffEW("CHq1R",1, 1) -0.001728 * getSMEFTCoeffEW("CHq1R",2, 2)  
            +0.000456 * getSMEFTCoeffEW("CHq3R",0, 0) +0.000456 * getSMEFTCoeffEW("CHq3R",1, 1) +0.000535 * getSMEFTCoeffEW("CHq3R",2, 2) +0.00004 * getSMEFTCoeffEW("CHuR",0, 0)  
            +0.00004 * getSMEFTCoeffEW("CHuR",1, 1) +0.001527 * getSMEFTCoeffEW("CHuR",2, 2) -0.00002 * getSMEFTCoeffEW("CHdR",0, 0) -0.00002 * getSMEFTCoeffEW("CHdR",1, 1)  
            -0.00002 * getSMEFTCoeffEW("CHdR",2, 2) -0.001258 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) +0.000406 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) +0.00008 * getSMEFTCoeffEW("CllR",1, 1, 1, 1)  
            +0.000158 * getSMEFTCoeffEW("CllR",1, 1, 2, 2) -0.000078 * getSMEFTCoeffEW("CllR",1, 2, 2, 1) -0.000079 * getSMEFTCoeffEW("Clq1R",1, 1, 0, 0) -0.000079 * getSMEFTCoeffEW("Clq1R",1, 1, 1, 1)  
            +0.0035 * getSMEFTCoeffEW("Clq1R",1, 1, 2, 2) +0.001222 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) -0.000825 * getSMEFTCoeffEW("Clq3R",1, 1, 0, 0) -0.000825 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1)  
            -0.003183 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) -0.000179 * getSMEFTCoeffEW("CeeR",0, 0, 1, 1) -0.000179 * getSMEFTCoeffEW("CeeR",1, 1, 1, 1) -0.000179 * getSMEFTCoeffEW("CeeR",1, 1, 2, 2)  
            +0.000128 * getSMEFTCoeffEW("CeuR",1, 1, 0, 0) +0.000128 * getSMEFTCoeffEW("CeuR",1, 1, 1, 1) +0.003321 * getSMEFTCoeffEW("CeuR",1, 1, 2, 2) -0.000064 * getSMEFTCoeffEW("CedR",1, 1, 0, 0)  
            -0.000064 * getSMEFTCoeffEW("CedR",1, 1, 1, 1) -0.000064 * getSMEFTCoeffEW("CedR",1, 1, 2, 2) -0.000064 * getSMEFTCoeffEW("CleR",0, 0, 1, 1) +0.000079 * getSMEFTCoeffEW("CleR",1, 1, 0, 0)  
            +0.000015 * getSMEFTCoeffEW("CleR",1, 1, 1, 1) +0.000079 * getSMEFTCoeffEW("CleR",1, 1, 2, 2) -0.000064 * getSMEFTCoeffEW("CleR",2, 2, 1, 1) -0.000158 * getSMEFTCoeffEW("CluR",1, 1, 0, 0)  
            -0.000158 * getSMEFTCoeffEW("CluR",1, 1, 1, 1) -0.004109 * getSMEFTCoeffEW("CluR",1, 1, 2, 2) +0.000079 * getSMEFTCoeffEW("CldR",1, 1, 0, 0) +0.000079 * getSMEFTCoeffEW("CldR",1, 1, 1, 1)  
            +0.000079 * getSMEFTCoeffEW("CldR",1, 1, 2, 2) +0.000064 * getSMEFTCoeffEW("CqeR",0, 0, 1, 1) +0.000064 * getSMEFTCoeffEW("CqeR",1, 1, 1, 1) -0.002828 * getSMEFTCoeffEW("CqeR",2, 2, 1, 1) ) * v2;  
        break;
    //if (f.is("NEUTRINO_3")) {
        case 4:
            deltaNLO = (-0.000125 * getSMEFTCoeffEW("CW")  -0.000183 * getSMEFTCoeffEW("CHbox")  -0.005003 * getSMEFTCoeffEW("CHD")  -0.000033 * getSMEFTCoeffEW("CHB")   
            -0.000115 * getSMEFTCoeffEW("CHW")  +0.000882 * getSMEFTCoeffEW("CHWB")  +0.000081 * getSMEFTCoeffEW("CuWR",2, 2) -0.000044 * getSMEFTCoeffEW("CuBR",2, 2)  
            -0.000256 * getSMEFTCoeffEW("CHl1R",0, 0) -0.000256 * getSMEFTCoeffEW("CHl1R",1, 1) -0.012278 * getSMEFTCoeffEW("CHl1R",2, 2) -0.007785 * getSMEFTCoeffEW("CHl3R",0, 0)  
            -0.007785 * getSMEFTCoeffEW("CHl3R",1, 1) +0.010936 * getSMEFTCoeffEW("CHl3R",2, 2) -0.000086 * getSMEFTCoeffEW("CHeR",0, 0) -0.000086 * getSMEFTCoeffEW("CHeR",1, 1)  
            -0.000086 * getSMEFTCoeffEW("CHeR",2, 2) +0.000086 * getSMEFTCoeffEW("CHq1R",0, 0) +0.000086 * getSMEFTCoeffEW("CHq1R",1, 1) -0.00743 * getSMEFTCoeffEW("CHq1R",2, 2)  
            +0.000895 * getSMEFTCoeffEW("CHq3R",0, 0) +0.000895 * getSMEFTCoeffEW("CHq3R",1, 1) +0.003579 * getSMEFTCoeffEW("CHq3R",2, 2) +0.000172 * getSMEFTCoeffEW("CHuR",0, 0)  
            +0.000172 * getSMEFTCoeffEW("CHuR",1, 1) +0.007935 * getSMEFTCoeffEW("CHuR",2, 2) -0.000086 * getSMEFTCoeffEW("CHdR",0, 0) -0.000086 * getSMEFTCoeffEW("CHdR",1, 1)  
            -0.000086 * getSMEFTCoeffEW("CHdR",2, 2) -0.002801 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) -0.000286 * getSMEFTCoeffEW("CllR",0, 0, 2, 2) +0.003913 * getSMEFTCoeffEW("CllR",0, 1, 1, 0)  
            -0.000256 * getSMEFTCoeffEW("CllR",0, 2, 2, 0) -0.000286 * getSMEFTCoeffEW("CllR",1, 1, 2, 2) -0.000256 * getSMEFTCoeffEW("CllR",1, 2, 2, 1) -0.000542 * getSMEFTCoeffEW("CllR",2, 2, 2, 2)  
            +0.000143 * getSMEFTCoeffEW("Clq1R",2, 2, 0, 0) +0.000143 * getSMEFTCoeffEW("Clq1R",2, 2, 1, 1) -0.006328 * getSMEFTCoeffEW("Clq1R",2, 2, 2, 2) +0.002416 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2)  
            +0.002416 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) -0.001492 * getSMEFTCoeffEW("Clq3R",2, 2, 0, 0) -0.001492 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1) -0.007963 * getSMEFTCoeffEW("Clq3R",2, 2, 2, 2)  
            -0.000143 * getSMEFTCoeffEW("CleR",2, 2, 0, 0) -0.000143 * getSMEFTCoeffEW("CleR",2, 2, 1, 1) -0.000143 * getSMEFTCoeffEW("CleR",2, 2, 2, 2) +0.000286 * getSMEFTCoeffEW("CluR",2, 2, 0, 0)  
            +0.000286 * getSMEFTCoeffEW("CluR",2, 2, 1, 1) +0.00743 * getSMEFTCoeffEW("CluR",2, 2, 2, 2) -0.000143 * getSMEFTCoeffEW("CldR",2, 2, 0, 0) -0.000143 * getSMEFTCoeffEW("CldR",2, 2, 1, 1)  
            -0.000143 * getSMEFTCoeffEW("CldR",2, 2, 2, 2) ) * v2; 
        break;
    //} else if (f.is("TAU")) {
        case 5:
            deltaNLO = (+0.000102 * getSMEFTCoeffEW("CW")  -0.000051 * getSMEFTCoeffEW("CHbox")  -0.010075 * getSMEFTCoeffEW("CHD")  -0.000003 * getSMEFTCoeffEW("CHB")   
            -0.000034 * getSMEFTCoeffEW("CHW")  -0.008133 * getSMEFTCoeffEW("CHWB")  -0.000273 * getSMEFTCoeffEW("CuWR",2, 2) +0.000422 * getSMEFTCoeffEW("CuBR",2, 2)  
            -0.000106 * getSMEFTCoeffEW("CHl1R",0, 0) -0.000106 * getSMEFTCoeffEW("CHl1R",1, 1) +0.000198 * getSMEFTCoeffEW("CHl1R",2, 2) -0.002441 * getSMEFTCoeffEW("CHl3R",0, 0)  
            -0.002441 * getSMEFTCoeffEW("CHl3R",1, 1) -0.000751 * getSMEFTCoeffEW("CHl3R",2, 2) -0.00002 * getSMEFTCoeffEW("CHeR",0, 0) -0.00002 * getSMEFTCoeffEW("CHeR",1, 1)  
            -0.011199 * getSMEFTCoeffEW("CHeR",2, 2) +0.00002 * getSMEFTCoeffEW("CHq1R",0, 0) +0.00002 * getSMEFTCoeffEW("CHq1R",1, 1) -0.001728 * getSMEFTCoeffEW("CHq1R",2, 2)  
            +0.000456 * getSMEFTCoeffEW("CHq3R",0, 0) +0.000456 * getSMEFTCoeffEW("CHq3R",1, 1) +0.000535 * getSMEFTCoeffEW("CHq3R",2, 2) +0.00004 * getSMEFTCoeffEW("CHuR",0, 0)  
            +0.00004 * getSMEFTCoeffEW("CHuR",1, 1) +0.001527 * getSMEFTCoeffEW("CHuR",2, 2) -0.00002 * getSMEFTCoeffEW("CHdR",0, 0) -0.00002 * getSMEFTCoeffEW("CHdR",1, 1)  
            -0.00002 * getSMEFTCoeffEW("CHdR",2, 2) -0.001416 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) +0.000158 * getSMEFTCoeffEW("CllR",0, 0, 2, 2) +0.000484 * getSMEFTCoeffEW("CllR",0, 1, 1, 0)  
            -0.000078 * getSMEFTCoeffEW("CllR",0, 2, 2, 0) +0.000158 * getSMEFTCoeffEW("CllR",1, 1, 2, 2) -0.000078 * getSMEFTCoeffEW("CllR",1, 2, 2, 1) +0.00008 * getSMEFTCoeffEW("CllR",2, 2, 2, 2)  
            -0.000079 * getSMEFTCoeffEW("Clq1R",2, 2, 0, 0) -0.000079 * getSMEFTCoeffEW("Clq1R",2, 2, 1, 1) +0.0035 * getSMEFTCoeffEW("Clq1R",2, 2, 2, 2) +0.001222 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2)  
            +0.001222 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) -0.000825 * getSMEFTCoeffEW("Clq3R",2, 2, 0, 0) -0.000825 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1) -0.004404 * getSMEFTCoeffEW("Clq3R",2, 2, 2, 2)  
            -0.000179 * getSMEFTCoeffEW("CeeR",0, 0, 2, 2) -0.000179 * getSMEFTCoeffEW("CeeR",1, 1, 2, 2) -0.000179 * getSMEFTCoeffEW("CeeR",2, 2, 2, 2) +0.000128 * getSMEFTCoeffEW("CeuR",2, 2, 0, 0)  
            +0.000128 * getSMEFTCoeffEW("CeuR",2, 2, 1, 1) +0.003321 * getSMEFTCoeffEW("CeuR",2, 2, 2, 2) -0.000064 * getSMEFTCoeffEW("CedR",2, 2, 0, 0) -0.000064 * getSMEFTCoeffEW("CedR",2, 2, 1, 1)  
            -0.000064 * getSMEFTCoeffEW("CedR",2, 2, 2, 2) -0.000064 * getSMEFTCoeffEW("CleR",0, 0, 2, 2) -0.000064 * getSMEFTCoeffEW("CleR",1, 1, 2, 2) +0.000079 * getSMEFTCoeffEW("CleR",2, 2, 0, 0)  
            +0.000079 * getSMEFTCoeffEW("CleR",2, 2, 1, 1) +0.000015 * getSMEFTCoeffEW("CleR",2, 2, 2, 2) -0.000158 * getSMEFTCoeffEW("CluR",2, 2, 0, 0) -0.000158 * getSMEFTCoeffEW("CluR",2, 2, 1, 1)  
            -0.004109 * getSMEFTCoeffEW("CluR",2, 2, 2, 2) +0.000079 * getSMEFTCoeffEW("CldR",2, 2, 0, 0) +0.000079 * getSMEFTCoeffEW("CldR",2, 2, 1, 1) +0.000079 * getSMEFTCoeffEW("CldR",2, 2, 2, 2)  
            +0.000064 * getSMEFTCoeffEW("CqeR",0, 0, 2, 2) +0.000064 * getSMEFTCoeffEW("CqeR",1, 1, 2, 2) -0.002828 * getSMEFTCoeffEW("CqeR",2, 2, 2, 2) ) * v2; 
        break;
    //if (f.is("UP")) {
        case 6:    
            deltaNLO = (+0.001041 * getSMEFTCoeffEW("CW")  -0.000005 * getSMEFTCoeffEW("CHbox")  -0.002874 * getSMEFTCoeffEW("CHD")  +0.00005 * getSMEFTCoeffEW("CHB")   
            -0.000015 * getSMEFTCoeffEW("CHW")  +0.012204 * getSMEFTCoeffEW("CHWB")  -0.002252 * getSMEFTCoeffEW("CuWR",2, 2) +0.003307 * getSMEFTCoeffEW("CuBR",2, 2)  
            -0.000266 * getSMEFTCoeffEW("CHl1R",0, 0) -0.000266 * getSMEFTCoeffEW("CHl1R",1, 1) +0.00003 * getSMEFTCoeffEW("CHl1R",2, 2) -0.013774 * getSMEFTCoeffEW("CHl3R",0, 0)  
            -0.013774 * getSMEFTCoeffEW("CHl3R",1, 1) +0.00053 * getSMEFTCoeffEW("CHl3R",2, 2) +0.00003 * getSMEFTCoeffEW("CHeR",0, 0) +0.00003 * getSMEFTCoeffEW("CHeR",1, 1)  
            +0.00003 * getSMEFTCoeffEW("CHeR",2, 2) -0.038605 * getSMEFTCoeffEW("CHq1R",0, 0) -0.00003 * getSMEFTCoeffEW("CHq1R",1, 1) +0.002478 * getSMEFTCoeffEW("CHq1R",2, 2)  
            +0.03623 * getSMEFTCoeffEW("CHq3R",0, 0) +0.001591 * getSMEFTCoeffEW("CHq3R",1, 1) -0.003461 * getSMEFTCoeffEW("CHq3R",2, 2) +0.033092 * getSMEFTCoeffEW("CHuR",0, 0)  
            -0.00006 * getSMEFTCoeffEW("CHuR",1, 1) -0.00507 * getSMEFTCoeffEW("CHuR",2, 2) +0.00003 * getSMEFTCoeffEW("CHdR",0, 0) +0.00003 * getSMEFTCoeffEW("CHdR",1, 1)  
            +0.00003 * getSMEFTCoeffEW("CHdR",2, 2) -0.004888 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) +0.007027 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) +0.000224 * getSMEFTCoeffEW("Cqq1R",0, 0, 0, 0)  
            +0.000603 * getSMEFTCoeffEW("Cqq1R",0, 0, 1, 1) -0.026657 * getSMEFTCoeffEW("Cqq1R",0, 0, 2, 2) -0.000379 * getSMEFTCoeffEW("Cqq1R",0, 1, 1, 0) -0.018182 * getSMEFTCoeffEW("Cqq1R",0, 2, 2, 0)  
            -0.005745 * getSMEFTCoeffEW("Cqq3R",0, 0, 0, 0) -0.006284 * getSMEFTCoeffEW("Cqq3R",0, 0, 1, 1) -0.033544 * getSMEFTCoeffEW("Cqq3R",0, 0, 2, 2) +0.00054 * getSMEFTCoeffEW("Cqq3R",0, 1, 1, 0)  
            -0.017264 * getSMEFTCoeffEW("Cqq3R",0, 2, 2, 0) -0.000301 * getSMEFTCoeffEW("Clq1R",0, 0, 0, 0) -0.000301 * getSMEFTCoeffEW("Clq1R",1, 1, 0, 0) -0.000301 * getSMEFTCoeffEW("Clq1R",2, 2, 0, 0)  
            -0.001047 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0) +0.004216 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) -0.001047 * getSMEFTCoeffEW("Clq3R",1, 1, 0, 0) +0.004216 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2)  
            -0.001047 * getSMEFTCoeffEW("Clq3R",2, 2, 0, 0) -0.00058 * getSMEFTCoeffEW("CuuR",0, 0, 0, 0) -0.000512 * getSMEFTCoeffEW("CuuR",0, 0, 1, 1) -0.013282 * getSMEFTCoeffEW("CuuR",0, 0, 2, 2)  
            -0.000068 * getSMEFTCoeffEW("CuuR",0, 1, 1, 0) -0.008025 * getSMEFTCoeffEW("CuuR",0, 2, 2, 0) +0.000128 * getSMEFTCoeffEW("CeuR",0, 0, 0, 0) +0.000128 * getSMEFTCoeffEW("CeuR",1, 1, 0, 0)  
            +0.000128 * getSMEFTCoeffEW("CeuR",2, 2, 0, 0) +0.000128 * getSMEFTCoeffEW("Cud1R",0, 0, 0, 0) +0.000128 * getSMEFTCoeffEW("Cud1R",0, 0, 1, 1) +0.000128 * getSMEFTCoeffEW("Cud1R",0, 0, 2, 2)  
            +0.000128 * getSMEFTCoeffEW("CluR",0, 0, 0, 0) +0.000128 * getSMEFTCoeffEW("CluR",1, 1, 0, 0) +0.000128 * getSMEFTCoeffEW("CluR",2, 2, 0, 0) -0.000301 * getSMEFTCoeffEW("CqeR",0, 0, 0, 0)  
            -0.000301 * getSMEFTCoeffEW("CqeR",0, 0, 1, 1) -0.000301 * getSMEFTCoeffEW("CqeR",0, 0, 2, 2) +0.000475 * getSMEFTCoeffEW("Cqu1R",0, 0, 0, 0) +0.000603 * getSMEFTCoeffEW("Cqu1R",0, 0, 1, 1)  
            +0.015649 * getSMEFTCoeffEW("Cqu1R",0, 0, 2, 2) -0.000128 * getSMEFTCoeffEW("Cqu1R",1, 1, 0, 0) +0.005656 * getSMEFTCoeffEW("Cqu1R",2, 2, 0, 0) -0.000301 * getSMEFTCoeffEW("Cqd1R",0, 0, 0, 0)  
            -0.000301 * getSMEFTCoeffEW("Cqd1R",0, 0, 1, 1) -0.000301 * getSMEFTCoeffEW("Cqd1R",0, 0, 2, 2) ) * v2;  
        break;             
    //if (f.is("DOWN")) {
        case 7:
            deltaNLO = (+0.000814 * getSMEFTCoeffEW("CW")  -0.000137 * getSMEFTCoeffEW("CHbox")  -0.000388 * getSMEFTCoeffEW("CHD")  +0.00002 * getSMEFTCoeffEW("CHB")   
            -0.000096 * getSMEFTCoeffEW("CHW")  +0.020102 * getSMEFTCoeffEW("CHWB")  -0.001898 * getSMEFTCoeffEW("CuWR",2, 2) +0.002841 * getSMEFTCoeffEW("CuBR",2, 2)  
            -0.000416 * getSMEFTCoeffEW("CHl1R",0, 0) -0.000416 * getSMEFTCoeffEW("CHl1R",1, 1) -0.000036 * getSMEFTCoeffEW("CHl1R",2, 2) -0.022179 * getSMEFTCoeffEW("CHl3R",0, 0)  
            -0.022179 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000677 * getSMEFTCoeffEW("CHl3R",2, 2) -0.000036 * getSMEFTCoeffEW("CHeR",0, 0) -0.000036 * getSMEFTCoeffEW("CHeR",1, 1)  
            -0.000036 * getSMEFTCoeffEW("CHeR",2, 2) +0.056109 * getSMEFTCoeffEW("CHq1R",0, 0) +0.000036 * getSMEFTCoeffEW("CHq1R",1, 1) -0.003224 * getSMEFTCoeffEW("CHq1R",2, 2)  
            +0.053732 * getSMEFTCoeffEW("CHq3R",0, 0) +0.00203 * getSMEFTCoeffEW("CHq3R",1, 1) -0.000416 * getSMEFTCoeffEW("CHq3R",2, 2) +0.000072 * getSMEFTCoeffEW("CHuR",0, 0)  
            +0.000072 * getSMEFTCoeffEW("CHuR",1, 1) +0.001337 * getSMEFTCoeffEW("CHuR",2, 2) -0.016486 * getSMEFTCoeffEW("CHdR",0, 0) -0.000036 * getSMEFTCoeffEW("CHdR",1, 1)  
            -0.000036 * getSMEFTCoeffEW("CHdR",2, 2) -0.006273 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) +0.013516 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.001287 * getSMEFTCoeffEW("Cqq1R",0, 0, 0, 0)  
            -0.000731 * getSMEFTCoeffEW("Cqq1R",0, 0, 1, 1) +0.032313 * getSMEFTCoeffEW("Cqq1R",0, 0, 2, 2) -0.000557 * getSMEFTCoeffEW("Cqq1R",0, 1, 1, 0) -0.000557 * getSMEFTCoeffEW("Cqq1R",0, 2, 2, 0)  
            -0.007256 * getSMEFTCoeffEW("Cqq3R",0, 0, 0, 0) -0.007618 * getSMEFTCoeffEW("Cqq3R",0, 0, 1, 1) -0.040661 * getSMEFTCoeffEW("Cqq3R",0, 0, 2, 2) +0.000362 * getSMEFTCoeffEW("Cqq3R",0, 1, 1, 0)  
            +0.043525 * getSMEFTCoeffEW("Cqq3R",0, 2, 2, 0) +0.000365 * getSMEFTCoeffEW("Clq1R",0, 0, 0, 0) +0.000365 * getSMEFTCoeffEW("Clq1R",1, 1, 0, 0) +0.000365 * getSMEFTCoeffEW("Clq1R",2, 2, 0, 0)  
            -0.00127 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0) +0.00541 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) -0.00127 * getSMEFTCoeffEW("Clq3R",1, 1, 0, 0) +0.00541 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2)  
            -0.00127 * getSMEFTCoeffEW("Clq3R",2, 2, 0, 0) -0.000145 * getSMEFTCoeffEW("CddR",0, 0, 0, 0) -0.000128 * getSMEFTCoeffEW("CddR",0, 0, 1, 1) -0.000128 * getSMEFTCoeffEW("CddR",0, 0, 2, 2)  
            -0.000017 * getSMEFTCoeffEW("CddR",0, 1, 1, 0) -0.000017 * getSMEFTCoeffEW("CddR",0, 2, 2, 0) -0.000064 * getSMEFTCoeffEW("CedR",0, 0, 0, 0) -0.000064 * getSMEFTCoeffEW("CedR",1, 1, 0, 0)  
            -0.000064 * getSMEFTCoeffEW("CedR",2, 2, 0, 0) +0.000128 * getSMEFTCoeffEW("Cud1R",0, 0, 0, 0) +0.000128 * getSMEFTCoeffEW("Cud1R",1, 1, 0, 0) +0.003321 * getSMEFTCoeffEW("Cud1R",2, 2, 0, 0)  
            -0.000064 * getSMEFTCoeffEW("CldR",0, 0, 0, 0) -0.000064 * getSMEFTCoeffEW("CldR",1, 1, 0, 0) -0.000064 * getSMEFTCoeffEW("CldR",2, 2, 0, 0) +0.000365 * getSMEFTCoeffEW("CqeR",0, 0, 0, 0)  
            +0.000365 * getSMEFTCoeffEW("CqeR",0, 0, 1, 1) +0.000365 * getSMEFTCoeffEW("CqeR",0, 0, 2, 2) -0.000731 * getSMEFTCoeffEW("Cqu1R",0, 0, 0, 0) -0.000731 * getSMEFTCoeffEW("Cqu1R",0, 0, 1, 1)  
            -0.01897 * getSMEFTCoeffEW("Cqu1R",0, 0, 2, 2) +0.000429 * getSMEFTCoeffEW("Cqd1R",0, 0, 0, 0) +0.000365 * getSMEFTCoeffEW("Cqd1R",0, 0, 1, 1) +0.000365 * getSMEFTCoeffEW("Cqd1R",0, 0, 2, 2)  
            +0.000064 * getSMEFTCoeffEW("Cqd1R",1, 1, 0, 0) -0.002828 * getSMEFTCoeffEW("Cqd1R",2, 2, 0, 0) ) * v2; 
        break;          
    //} else if (f.is("CHARM")) {
        case 8:
            deltaNLO = (+0.001041 * getSMEFTCoeffEW("CW")  -0.000005 * getSMEFTCoeffEW("CHbox")  -0.002874 * getSMEFTCoeffEW("CHD")  +0.00005 * getSMEFTCoeffEW("CHB")   
            -0.000015 * getSMEFTCoeffEW("CHW")  +0.012204 * getSMEFTCoeffEW("CHWB")  -0.002252 * getSMEFTCoeffEW("CuWR",2, 2) +0.003307 * getSMEFTCoeffEW("CuBR",2, 2)  
            -0.000266 * getSMEFTCoeffEW("CHl1R",0, 0) -0.000266 * getSMEFTCoeffEW("CHl1R",1, 1) +0.00003 * getSMEFTCoeffEW("CHl1R",2, 2) -0.013774 * getSMEFTCoeffEW("CHl3R",0, 0)  
            -0.013774 * getSMEFTCoeffEW("CHl3R",1, 1) +0.00053 * getSMEFTCoeffEW("CHl3R",2, 2) +0.00003 * getSMEFTCoeffEW("CHeR",0, 0) +0.00003 * getSMEFTCoeffEW("CHeR",1, 1)  
            +0.00003 * getSMEFTCoeffEW("CHeR",2, 2) -0.00003 * getSMEFTCoeffEW("CHq1R",0, 0) -0.038605 * getSMEFTCoeffEW("CHq1R",1, 1) +0.002478 * getSMEFTCoeffEW("CHq1R",2, 2)  
            +0.001591 * getSMEFTCoeffEW("CHq3R",0, 0) +0.03623 * getSMEFTCoeffEW("CHq3R",1, 1) -0.003461 * getSMEFTCoeffEW("CHq3R",2, 2) -0.00006 * getSMEFTCoeffEW("CHuR",0, 0)  
            +0.033092 * getSMEFTCoeffEW("CHuR",1, 1) -0.00507 * getSMEFTCoeffEW("CHuR",2, 2) +0.00003 * getSMEFTCoeffEW("CHdR",0, 0) +0.00003 * getSMEFTCoeffEW("CHdR",1, 1)  
            +0.00003 * getSMEFTCoeffEW("CHdR",2, 2) -0.004888 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) +0.007027 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) +0.000603 * getSMEFTCoeffEW("Cqq1R",0, 0, 1, 1)  
            -0.000379 * getSMEFTCoeffEW("Cqq1R",0, 1, 1, 0) +0.000224 * getSMEFTCoeffEW("Cqq1R",1, 1, 1, 1) -0.026657 * getSMEFTCoeffEW("Cqq1R",1, 1, 2, 2) -0.018182 * getSMEFTCoeffEW("Cqq1R",1, 2, 2, 1)  
            -0.006284 * getSMEFTCoeffEW("Cqq3R",0, 0, 1, 1) +0.00054 * getSMEFTCoeffEW("Cqq3R",0, 1, 1, 0) -0.005745 * getSMEFTCoeffEW("Cqq3R",1, 1, 1, 1) -0.033544 * getSMEFTCoeffEW("Cqq3R",1, 1, 2, 2)  
            -0.017264 * getSMEFTCoeffEW("Cqq3R",1, 2, 2, 1) -0.000301 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1) -0.000301 * getSMEFTCoeffEW("Clq1R",1, 1, 1, 1) -0.000301 * getSMEFTCoeffEW("Clq1R",2, 2, 1, 1)  
            -0.001047 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) +0.004216 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) -0.001047 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1) +0.004216 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2)  
            -0.001047 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1) -0.000512 * getSMEFTCoeffEW("CuuR",0, 0, 1, 1) -0.000068 * getSMEFTCoeffEW("CuuR",0, 1, 1, 0) -0.00058 * getSMEFTCoeffEW("CuuR",1, 1, 1, 1)  
            -0.013282 * getSMEFTCoeffEW("CuuR",1, 1, 2, 2) -0.008025 * getSMEFTCoeffEW("CuuR",1, 2, 2, 1) +0.000128 * getSMEFTCoeffEW("CeuR",0, 0, 1, 1) +0.000128 * getSMEFTCoeffEW("CeuR",1, 1, 1, 1)  
            +0.000128 * getSMEFTCoeffEW("CeuR",2, 2, 1, 1) +0.000128 * getSMEFTCoeffEW("Cud1R",1, 1, 0, 0) +0.000128 * getSMEFTCoeffEW("Cud1R",1, 1, 1, 1) +0.000128 * getSMEFTCoeffEW("Cud1R",1, 1, 2, 2)  
            +0.000128 * getSMEFTCoeffEW("CluR",0, 0, 1, 1) +0.000128 * getSMEFTCoeffEW("CluR",1, 1, 1, 1) +0.000128 * getSMEFTCoeffEW("CluR",2, 2, 1, 1) -0.000301 * getSMEFTCoeffEW("CqeR",1, 1, 0, 0)  
            -0.000301 * getSMEFTCoeffEW("CqeR",1, 1, 1, 1) -0.000301 * getSMEFTCoeffEW("CqeR",1, 1, 2, 2) -0.000128 * getSMEFTCoeffEW("Cqu1R",0, 0, 1, 1) +0.000603 * getSMEFTCoeffEW("Cqu1R",1, 1, 0, 0)  
            +0.000475 * getSMEFTCoeffEW("Cqu1R",1, 1, 1, 1) +0.015649 * getSMEFTCoeffEW("Cqu1R",1, 1, 2, 2) +0.005656 * getSMEFTCoeffEW("Cqu1R",2, 2, 1, 1) -0.000301 * getSMEFTCoeffEW("Cqd1R",1, 1, 0, 0)  
            -0.000301 * getSMEFTCoeffEW("Cqd1R",1, 1, 1, 1) -0.000301 * getSMEFTCoeffEW("Cqd1R",1, 1, 2, 2) ) * v2;             
        break;          
    //if (f.is("STRANGE")) {
        case 9:
            deltaNLO = (+0.000814 * getSMEFTCoeffEW("CW")  -0.000137 * getSMEFTCoeffEW("CHbox")  -0.000388 * getSMEFTCoeffEW("CHD")  +0.00002 * getSMEFTCoeffEW("CHB")   
            -0.000096 * getSMEFTCoeffEW("CHW")  +0.020102 * getSMEFTCoeffEW("CHWB")  -0.001898 * getSMEFTCoeffEW("CuWR",2, 2) +0.002841 * getSMEFTCoeffEW("CuBR",2, 2)  
            -0.000416 * getSMEFTCoeffEW("CHl1R",0, 0) -0.000416 * getSMEFTCoeffEW("CHl1R",1, 1) -0.000036 * getSMEFTCoeffEW("CHl1R",2, 2) -0.022179 * getSMEFTCoeffEW("CHl3R",0, 0)  
            -0.022179 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000677 * getSMEFTCoeffEW("CHl3R",2, 2) -0.000036 * getSMEFTCoeffEW("CHeR",0, 0) -0.000036 * getSMEFTCoeffEW("CHeR",1, 1)  
            -0.000036 * getSMEFTCoeffEW("CHeR",2, 2) +0.000036 * getSMEFTCoeffEW("CHq1R",0, 0) +0.056109 * getSMEFTCoeffEW("CHq1R",1, 1) -0.003224 * getSMEFTCoeffEW("CHq1R",2, 2)  
            +0.00203 * getSMEFTCoeffEW("CHq3R",0, 0) +0.053732 * getSMEFTCoeffEW("CHq3R",1, 1) -0.000416 * getSMEFTCoeffEW("CHq3R",2, 2) +0.000072 * getSMEFTCoeffEW("CHuR",0, 0)  
            +0.000072 * getSMEFTCoeffEW("CHuR",1, 1) +0.001337 * getSMEFTCoeffEW("CHuR",2, 2) -0.000036 * getSMEFTCoeffEW("CHdR",0, 0) -0.016486 * getSMEFTCoeffEW("CHdR",1, 1)  
            -0.000036 * getSMEFTCoeffEW("CHdR",2, 2) -0.006273 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) +0.013516 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.000731 * getSMEFTCoeffEW("Cqq1R",0, 0, 1, 1)  
            -0.000557 * getSMEFTCoeffEW("Cqq1R",0, 1, 1, 0) -0.001287 * getSMEFTCoeffEW("Cqq1R",1, 1, 1, 1) +0.032313 * getSMEFTCoeffEW("Cqq1R",1, 1, 2, 2) -0.000557 * getSMEFTCoeffEW("Cqq1R",1, 2, 2, 1)  
            -0.007618 * getSMEFTCoeffEW("Cqq3R",0, 0, 1, 1) +0.000362 * getSMEFTCoeffEW("Cqq3R",0, 1, 1, 0) -0.007256 * getSMEFTCoeffEW("Cqq3R",1, 1, 1, 1) -0.040661 * getSMEFTCoeffEW("Cqq3R",1, 1, 2, 2)  
            +0.043525 * getSMEFTCoeffEW("Cqq3R",1, 2, 2, 1) +0.000365 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1) +0.000365 * getSMEFTCoeffEW("Clq1R",1, 1, 1, 1) +0.000365 * getSMEFTCoeffEW("Clq1R",2, 2, 1, 1)  
            -0.00127 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) +0.00541 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) -0.00127 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1) +0.00541 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2)  
            -0.00127 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1) -0.000128 * getSMEFTCoeffEW("CddR",0, 0, 1, 1) -0.000017 * getSMEFTCoeffEW("CddR",0, 1, 1, 0) -0.000145 * getSMEFTCoeffEW("CddR",1, 1, 1, 1)  
            -0.000128 * getSMEFTCoeffEW("CddR",1, 1, 2, 2) -0.000017 * getSMEFTCoeffEW("CddR",1, 2, 2, 1) -0.000064 * getSMEFTCoeffEW("CedR",0, 0, 1, 1) -0.000064 * getSMEFTCoeffEW("CedR",1, 1, 1, 1)  
            -0.000064 * getSMEFTCoeffEW("CedR",2, 2, 1, 1) +0.000128 * getSMEFTCoeffEW("Cud1R",0, 0, 1, 1) +0.000128 * getSMEFTCoeffEW("Cud1R",1, 1, 1, 1) +0.003321 * getSMEFTCoeffEW("Cud1R",2, 2, 1, 1)  
            -0.000064 * getSMEFTCoeffEW("CldR",0, 0, 1, 1) -0.000064 * getSMEFTCoeffEW("CldR",1, 1, 1, 1) -0.000064 * getSMEFTCoeffEW("CldR",2, 2, 1, 1) +0.000365 * getSMEFTCoeffEW("CqeR",1, 1, 0, 0)  
            +0.000365 * getSMEFTCoeffEW("CqeR",1, 1, 1, 1) +0.000365 * getSMEFTCoeffEW("CqeR",1, 1, 2, 2) -0.000731 * getSMEFTCoeffEW("Cqu1R",1, 1, 0, 0) -0.000731 * getSMEFTCoeffEW("Cqu1R",1, 1, 1, 1)  
            -0.01897 * getSMEFTCoeffEW("Cqu1R",1, 1, 2, 2) +0.000064 * getSMEFTCoeffEW("Cqd1R",0, 0, 1, 1) +0.000365 * getSMEFTCoeffEW("Cqd1R",1, 1, 0, 0) +0.000429 * getSMEFTCoeffEW("Cqd1R",1, 1, 1, 1)  
            +0.000365 * getSMEFTCoeffEW("Cqd1R",1, 1, 2, 2) -0.002828 * getSMEFTCoeffEW("Cqd1R",2, 2, 1, 1) ) * v2; 
        break;        
    //} else if (f.is("BOTTOM")) {
        case 11:
            deltaNLO = (-0.001389 * getSMEFTCoeffEW("CW")  -0.000137 * getSMEFTCoeffEW("CHbox")  -0.000463 * getSMEFTCoeffEW("CHD")  +0.00002 * getSMEFTCoeffEW("CHB")   
            -0.000096 * getSMEFTCoeffEW("CHW")  +0.017458 * getSMEFTCoeffEW("CHWB")  -0.014607 * getSMEFTCoeffEW("CuWR",2, 2) +0.001149 * getSMEFTCoeffEW("CuBR",2, 2)  
            -0.000416 * getSMEFTCoeffEW("CHl1R",0, 0) -0.000416 * getSMEFTCoeffEW("CHl1R",1, 1) -0.000036 * getSMEFTCoeffEW("CHl1R",2, 2) -0.010179 * getSMEFTCoeffEW("CHl3R",0, 0)  
            -0.010179 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000677 * getSMEFTCoeffEW("CHl3R",2, 2) -0.000036 * getSMEFTCoeffEW("CHeR",0, 0) -0.000036 * getSMEFTCoeffEW("CHeR",1, 1)  
            -0.000036 * getSMEFTCoeffEW("CHeR",2, 2) +0.000036 * getSMEFTCoeffEW("CHq1R",0, 0) +0.000036 * getSMEFTCoeffEW("CHq1R",1, 1) +0.048246 * getSMEFTCoeffEW("CHq1R",2, 2)  
            +0.00203 * getSMEFTCoeffEW("CHq3R",0, 0) +0.00203 * getSMEFTCoeffEW("CHq3R",1, 1) +0.020209 * getSMEFTCoeffEW("CHq3R",2, 2) +0.000072 * getSMEFTCoeffEW("CHuR",0, 0)  
            +0.000072 * getSMEFTCoeffEW("CHuR",1, 1) -0.0019 * getSMEFTCoeffEW("CHuR",2, 2) -0.000036 * getSMEFTCoeffEW("CHdR",0, 0) -0.000036 * getSMEFTCoeffEW("CHdR",1, 1)  
            -0.016486 * getSMEFTCoeffEW("CHdR",2, 2) -0.006273 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) +0.001516 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.000731 * getSMEFTCoeffEW("Cqq1R",0, 0, 2, 2)  
            -0.000557 * getSMEFTCoeffEW("Cqq1R",0, 2, 2, 0) -0.000731 * getSMEFTCoeffEW("Cqq1R",1, 1, 2, 2) -0.000557 * getSMEFTCoeffEW("Cqq1R",1, 2, 2, 1) +0.031756 * getSMEFTCoeffEW("Cqq1R",2, 2, 2, 2)  
            -0.007618 * getSMEFTCoeffEW("Cqq3R",0, 0, 2, 2) +0.000362 * getSMEFTCoeffEW("Cqq3R",0, 2, 2, 0) -0.007618 * getSMEFTCoeffEW("Cqq3R",1, 1, 2, 2) +0.000362 * getSMEFTCoeffEW("Cqq3R",1, 2, 2, 1)  
            +0.002863 * getSMEFTCoeffEW("Cqq3R",2, 2, 2, 2) +0.000365 * getSMEFTCoeffEW("Clq1R",0, 0, 2, 2) +0.000365 * getSMEFTCoeffEW("Clq1R",1, 1, 2, 2) +0.000365 * getSMEFTCoeffEW("Clq1R",2, 2, 2, 2)  
            +0.004141 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) +0.004141 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) -0.00127 * getSMEFTCoeffEW("Clq3R",2, 2, 2, 2) -0.000128 * getSMEFTCoeffEW("CddR",0, 0, 2, 2)  
            -0.000017 * getSMEFTCoeffEW("CddR",0, 2, 2, 0) -0.000128 * getSMEFTCoeffEW("CddR",1, 1, 2, 2) -0.000017 * getSMEFTCoeffEW("CddR",1, 2, 2, 1) -0.000145 * getSMEFTCoeffEW("CddR",2, 2, 2, 2)  
            -0.000064 * getSMEFTCoeffEW("CedR",0, 0, 2, 2) -0.000064 * getSMEFTCoeffEW("CedR",1, 1, 2, 2) -0.000064 * getSMEFTCoeffEW("CedR",2, 2, 2, 2) +0.000128 * getSMEFTCoeffEW("Cud1R",0, 0, 2, 2)  
            +0.000128 * getSMEFTCoeffEW("Cud1R",1, 1, 2, 2) +0.003321 * getSMEFTCoeffEW("Cud1R",2, 2, 2, 2) -0.000064 * getSMEFTCoeffEW("CldR",0, 0, 2, 2) -0.000064 * getSMEFTCoeffEW("CldR",1, 1, 2, 2)  
            -0.000064 * getSMEFTCoeffEW("CldR",2, 2, 2, 2) +0.000365 * getSMEFTCoeffEW("CqeR",2, 2, 0, 0) +0.000365 * getSMEFTCoeffEW("CqeR",2, 2, 1, 1) +0.000365 * getSMEFTCoeffEW("CqeR",2, 2, 2, 2)  
            -0.000731 * getSMEFTCoeffEW("Cqu1R",2, 2, 0, 0) -0.000731 * getSMEFTCoeffEW("Cqu1R",2, 2, 1, 1) -0.01897 * getSMEFTCoeffEW("Cqu1R",2, 2, 2, 2) +0.000064 * getSMEFTCoeffEW("Cqd1R",0, 0, 2, 2)  
            +0.000064 * getSMEFTCoeffEW("Cqd1R",1, 1, 2, 2) +0.000365 * getSMEFTCoeffEW("Cqd1R",2, 2, 0, 0) +0.000365 * getSMEFTCoeffEW("Cqd1R",2, 2, 1, 1) -0.002463 * getSMEFTCoeffEW("Cqd1R",2, 2, 2, 2) ) * v2; 
        break;
        default:
            deltaNLO = 0.;
    }

    return deltaGamma_Zf + cNLOd6 * deltaNLO;
}

const double NPSMEFTd6General::Gamma_Zf(const Particle f) const
{
    return (trueSM.GammaZ(f) + deltaGamma_Zf(f));
}


const double NPSMEFTd6General::deltaGamma_Z() const
{
    double deltaGamma_Z = 0.;
    bool nonZeroNP = false;
    
    double deltaNLO;
    
    double delGVl[6], delGAl[6], delGVq[6], delGAq[6];
    for (int p = 0; p < 6; ++p) {
        delGVl[p] = deltaGV_f(leptons[p]);
        delGAl[p] = deltaGA_f(leptons[p]);
        delGVq[p] = deltaGV_f(quarks[p]);
        delGAq[p] = deltaGA_f(quarks[p]);
        if (delGVl[p] != 0.0 || delGAl[p] != 0.0
                || delGVq[p] != 0.0 || delGAq[p] != 0.0)
            nonZeroNP = true;
    }

    if (nonZeroNP) {
        double gVf, gAf;
        double deltaGl[6], deltaGq[6];
        double delGammaZ = 0.0;
        for (int p = 0; p < 6; ++p) {
            gVf = trueSM.gV_f(leptons[p]).real();
            gAf = trueSM.gA_f(leptons[p]).real();
            deltaGl[p] = 2.0 * (gVf * delGVl[p] + gAf * delGAl[p]);

            gVf = trueSM.gV_f(quarks[p]).real();
            gAf = trueSM.gA_f(quarks[p]).real();
            deltaGq[p] = 2.0 * (gVf * delGVq[p] + gAf * delGAq[p]);

            delGammaZ += deltaGl[p] + 3.0 * deltaGq[p];
        }

        double alpha = trueSM.alphaMz();       
        double sW2_SM = trueSM.sW2();
        double cW2_SM = trueSM.cW2();
        deltaGamma_Z = alpha * Mz / 12.0 / sW2_SM / cW2_SM
                * delGammaZ;
    }

    // Finite NLO corrections    
    deltaNLO = (+0.002254 * getSMEFTCoeffEW("CW")  -0.001125 * getSMEFTCoeffEW("CHbox")  -0.05222 * getSMEFTCoeffEW("CHD")  +0.000053 * getSMEFTCoeffEW("CHB")   
            -0.000766 * getSMEFTCoeffEW("CHW")  +0.060315 * getSMEFTCoeffEW("CHWB")  -0.023483 * getSMEFTCoeffEW("CuWR",2, 2) +0.014583 * getSMEFTCoeffEW("CuBR",2, 2)  
            -0.014841 * getSMEFTCoeffEW("CHl1R",0, 0) -0.014841 * getSMEFTCoeffEW("CHl1R",1, 1) -0.012341 * getSMEFTCoeffEW("CHl1R",2, 2) -0.10303 * getSMEFTCoeffEW("CHl3R",0, 0)  
            -0.10303 * getSMEFTCoeffEW("CHl3R",1, 1) +0.014177 * getSMEFTCoeffEW("CHl3R",2, 2) -0.011546 * getSMEFTCoeffEW("CHeR",0, 0) -0.011546 * getSMEFTCoeffEW("CHeR",1, 1)  
            -0.011546 * getSMEFTCoeffEW("CHeR",2, 2) +0.017864 * getSMEFTCoeffEW("CHq1R",0, 0) +0.017864 * getSMEFTCoeffEW("CHq1R",1, 1) +0.019278 * getSMEFTCoeffEW("CHq1R",2, 2)  
            +0.099668 * getSMEFTCoeffEW("CHq3R",0, 0) +0.099668 * getSMEFTCoeffEW("CHq3R",1, 1) +0.024797 * getSMEFTCoeffEW("CHq3R",2, 2) +0.033884 * getSMEFTCoeffEW("CHuR",0, 0)  
            +0.033884 * getSMEFTCoeffEW("CHuR",1, 1) +0.01902 * getSMEFTCoeffEW("CHuR",2, 2) -0.016816 * getSMEFTCoeffEW("CHdR",0, 0) -0.016816 * getSMEFTCoeffEW("CHdR",1, 1)  
            -0.016816 * getSMEFTCoeffEW("CHdR",2, 2) -0.000462 * getSMEFTCoeffEW("CllR",0, 0, 0, 0) -0.041502 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) -0.000256 * getSMEFTCoeffEW("CllR",0, 0, 2, 2)  
            +0.055124 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.000669 * getSMEFTCoeffEW("CllR",0, 2, 2, 0) -0.000462 * getSMEFTCoeffEW("CllR",1, 1, 1, 1) -0.000256 * getSMEFTCoeffEW("CllR",1, 1, 2, 2)  
            -0.000669 * getSMEFTCoeffEW("CllR",1, 2, 2, 1) -0.000462 * getSMEFTCoeffEW("CllR",2, 2, 2, 2) -0.001063 * getSMEFTCoeffEW("Cqq1R",0, 0, 0, 0) -0.000256 * getSMEFTCoeffEW("Cqq1R",0, 0, 1, 1)  
            +0.004926 * getSMEFTCoeffEW("Cqq1R",0, 0, 2, 2) -0.001871 * getSMEFTCoeffEW("Cqq1R",0, 1, 1, 0) -0.019296 * getSMEFTCoeffEW("Cqq1R",0, 2, 2, 0) -0.001063 * getSMEFTCoeffEW("Cqq1R",1, 1, 1, 1)  
            +0.004926 * getSMEFTCoeffEW("Cqq1R",1, 1, 2, 2) -0.019296 * getSMEFTCoeffEW("Cqq1R",1, 2, 2, 1) +0.031756 * getSMEFTCoeffEW("Cqq1R",2, 2, 2, 2) -0.013001 * getSMEFTCoeffEW("Cqq3R",0, 0, 0, 0)  
            -0.027804 * getSMEFTCoeffEW("Cqq3R",0, 0, 1, 1) -0.081823 * getSMEFTCoeffEW("Cqq3R",0, 0, 2, 2) +0.001802 * getSMEFTCoeffEW("Cqq3R",0, 1, 1, 0) +0.026622 * getSMEFTCoeffEW("Cqq3R",0, 2, 2, 0)  
            -0.013001 * getSMEFTCoeffEW("Cqq3R",1, 1, 1, 1) -0.081823 * getSMEFTCoeffEW("Cqq3R",1, 1, 2, 2) +0.026622 * getSMEFTCoeffEW("Cqq3R",1, 2, 2, 1) +0.002863 * getSMEFTCoeffEW("Cqq3R",2, 2, 2, 2)  
            +0.000128 * getSMEFTCoeffEW("Clq1R",0, 0, 0, 0) +0.000128 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1) -0.002463 * getSMEFTCoeffEW("Clq1R",0, 0, 2, 2) +0.000128 * getSMEFTCoeffEW("Clq1R",1, 1, 0, 0)  
            +0.000128 * getSMEFTCoeffEW("Clq1R",1, 1, 1, 1) -0.002463 * getSMEFTCoeffEW("Clq1R",1, 1, 2, 2) +0.000128 * getSMEFTCoeffEW("Clq1R",2, 2, 0, 0) +0.000128 * getSMEFTCoeffEW("Clq1R",2, 2, 1, 1)  
            -0.002463 * getSMEFTCoeffEW("Clq1R",2, 2, 2, 2) -0.004634 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0) -0.004634 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) +0.021939 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2)  
            -0.004634 * getSMEFTCoeffEW("Clq3R",1, 1, 0, 0) -0.004634 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1) +0.021939 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) -0.004634 * getSMEFTCoeffEW("Clq3R",2, 2, 0, 0)  
            -0.004634 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1) -0.013637 * getSMEFTCoeffEW("Clq3R",2, 2, 2, 2) -0.000179 * getSMEFTCoeffEW("CeeR",0, 0, 0, 0) -0.000358 * getSMEFTCoeffEW("CeeR",0, 0, 1, 1)  
            -0.000358 * getSMEFTCoeffEW("CeeR",0, 0, 2, 2) -0.000179 * getSMEFTCoeffEW("CeeR",1, 1, 1, 1) -0.000358 * getSMEFTCoeffEW("CeeR",1, 1, 2, 2) -0.000179 * getSMEFTCoeffEW("CeeR",2, 2, 2, 2)  
            -0.00058 * getSMEFTCoeffEW("CuuR",0, 0, 0, 0) -0.001023 * getSMEFTCoeffEW("CuuR",0, 0, 1, 1) -0.013282 * getSMEFTCoeffEW("CuuR",0, 0, 2, 2) -0.000136 * getSMEFTCoeffEW("CuuR",0, 1, 1, 0)  
            -0.008025 * getSMEFTCoeffEW("CuuR",0, 2, 2, 0) -0.00058 * getSMEFTCoeffEW("CuuR",1, 1, 1, 1) -0.013282 * getSMEFTCoeffEW("CuuR",1, 1, 2, 2) -0.008025 * getSMEFTCoeffEW("CuuR",1, 2, 2, 1)  
            -0.000145 * getSMEFTCoeffEW("CddR",0, 0, 0, 0) -0.000256 * getSMEFTCoeffEW("CddR",0, 0, 1, 1) -0.000256 * getSMEFTCoeffEW("CddR",0, 0, 2, 2) -0.000034 * getSMEFTCoeffEW("CddR",0, 1, 1, 0)  
            -0.000034 * getSMEFTCoeffEW("CddR",0, 2, 2, 0) -0.000145 * getSMEFTCoeffEW("CddR",1, 1, 1, 1) -0.000256 * getSMEFTCoeffEW("CddR",1, 1, 2, 2) -0.000034 * getSMEFTCoeffEW("CddR",1, 2, 2, 1)  
            -0.000145 * getSMEFTCoeffEW("CddR",2, 2, 2, 2) +0.000256 * getSMEFTCoeffEW("CeuR",0, 0, 0, 0) +0.000256 * getSMEFTCoeffEW("CeuR",0, 0, 1, 1) +0.003321 * getSMEFTCoeffEW("CeuR",0, 0, 2, 2)  
            +0.000256 * getSMEFTCoeffEW("CeuR",1, 1, 0, 0) +0.000256 * getSMEFTCoeffEW("CeuR",1, 1, 1, 1) +0.003321 * getSMEFTCoeffEW("CeuR",1, 1, 2, 2) +0.000256 * getSMEFTCoeffEW("CeuR",2, 2, 0, 0)  
            +0.000256 * getSMEFTCoeffEW("CeuR",2, 2, 1, 1) +0.003321 * getSMEFTCoeffEW("CeuR",2, 2, 2, 2) -0.000128 * getSMEFTCoeffEW("CedR",0, 0, 0, 0) -0.000128 * getSMEFTCoeffEW("CedR",0, 0, 1, 1)  
            -0.000128 * getSMEFTCoeffEW("CedR",0, 0, 2, 2) -0.000128 * getSMEFTCoeffEW("CedR",1, 1, 0, 0) -0.000128 * getSMEFTCoeffEW("CedR",1, 1, 1, 1) -0.000128 * getSMEFTCoeffEW("CedR",1, 1, 2, 2)  
            -0.000128 * getSMEFTCoeffEW("CedR",2, 2, 0, 0) -0.000128 * getSMEFTCoeffEW("CedR",2, 2, 1, 1) -0.000128 * getSMEFTCoeffEW("CedR",2, 2, 2, 2) +0.000256 * getSMEFTCoeffEW("Cud1R",0, 0, 0, 0)  
            +0.000256 * getSMEFTCoeffEW("Cud1R",0, 0, 1, 1) +0.000256 * getSMEFTCoeffEW("Cud1R",0, 0, 2, 2) +0.000256 * getSMEFTCoeffEW("Cud1R",1, 1, 0, 0) +0.000256 * getSMEFTCoeffEW("Cud1R",1, 1, 1, 1)  
            +0.000256 * getSMEFTCoeffEW("Cud1R",1, 1, 2, 2) +0.003321 * getSMEFTCoeffEW("Cud1R",2, 2, 0, 0) +0.003321 * getSMEFTCoeffEW("Cud1R",2, 2, 1, 1) +0.003321 * getSMEFTCoeffEW("Cud1R",2, 2, 2, 2)  
            -0.000128 * getSMEFTCoeffEW("CleR",0, 0, 0, 0) -0.000128 * getSMEFTCoeffEW("CleR",0, 0, 1, 1) -0.000128 * getSMEFTCoeffEW("CleR",0, 0, 2, 2) -0.000128 * getSMEFTCoeffEW("CleR",1, 1, 0, 0)  
            -0.000128 * getSMEFTCoeffEW("CleR",1, 1, 1, 1) -0.000128 * getSMEFTCoeffEW("CleR",1, 1, 2, 2) -0.000128 * getSMEFTCoeffEW("CleR",2, 2, 0, 0) -0.000128 * getSMEFTCoeffEW("CleR",2, 2, 1, 1)  
            -0.000128 * getSMEFTCoeffEW("CleR",2, 2, 2, 2) +0.000256 * getSMEFTCoeffEW("CluR",0, 0, 0, 0) +0.000256 * getSMEFTCoeffEW("CluR",0, 0, 1, 1) +0.003321 * getSMEFTCoeffEW("CluR",0, 0, 2, 2)  
            +0.000256 * getSMEFTCoeffEW("CluR",1, 1, 0, 0) +0.000256 * getSMEFTCoeffEW("CluR",1, 1, 1, 1) +0.003321 * getSMEFTCoeffEW("CluR",1, 1, 2, 2) +0.000256 * getSMEFTCoeffEW("CluR",2, 2, 0, 0)  
            +0.000256 * getSMEFTCoeffEW("CluR",2, 2, 1, 1) +0.003321 * getSMEFTCoeffEW("CluR",2, 2, 2, 2) -0.000128 * getSMEFTCoeffEW("CldR",0, 0, 0, 0) -0.000128 * getSMEFTCoeffEW("CldR",0, 0, 1, 1)  
            -0.000128 * getSMEFTCoeffEW("CldR",0, 0, 2, 2) -0.000128 * getSMEFTCoeffEW("CldR",1, 1, 0, 0) -0.000128 * getSMEFTCoeffEW("CldR",1, 1, 1, 1) -0.000128 * getSMEFTCoeffEW("CldR",1, 1, 2, 2)  
            -0.000128 * getSMEFTCoeffEW("CldR",2, 2, 0, 0) -0.000128 * getSMEFTCoeffEW("CldR",2, 2, 1, 1) -0.000128 * getSMEFTCoeffEW("CldR",2, 2, 2, 2) +0.000128 * getSMEFTCoeffEW("CqeR",0, 0, 0, 0)  
            +0.000128 * getSMEFTCoeffEW("CqeR",0, 0, 1, 1) +0.000128 * getSMEFTCoeffEW("CqeR",0, 0, 2, 2) +0.000128 * getSMEFTCoeffEW("CqeR",1, 1, 0, 0) +0.000128 * getSMEFTCoeffEW("CqeR",1, 1, 1, 1)  
            +0.000128 * getSMEFTCoeffEW("CqeR",1, 1, 2, 2) -0.002463 * getSMEFTCoeffEW("CqeR",2, 2, 0, 0) -0.002463 * getSMEFTCoeffEW("CqeR",2, 2, 1, 1) -0.002463 * getSMEFTCoeffEW("CqeR",2, 2, 2, 2)  
            -0.000256 * getSMEFTCoeffEW("Cqu1R",0, 0, 0, 0) -0.000256 * getSMEFTCoeffEW("Cqu1R",0, 0, 1, 1) -0.003321 * getSMEFTCoeffEW("Cqu1R",0, 0, 2, 2) -0.000256 * getSMEFTCoeffEW("Cqu1R",1, 1, 0, 0)  
            -0.000256 * getSMEFTCoeffEW("Cqu1R",1, 1, 1, 1) -0.003321 * getSMEFTCoeffEW("Cqu1R",1, 1, 2, 2) +0.004926 * getSMEFTCoeffEW("Cqu1R",2, 2, 0, 0) +0.004926 * getSMEFTCoeffEW("Cqu1R",2, 2, 1, 1)  
            -0.01897 * getSMEFTCoeffEW("Cqu1R",2, 2, 2, 2) +0.000128 * getSMEFTCoeffEW("Cqd1R",0, 0, 0, 0) +0.000128 * getSMEFTCoeffEW("Cqd1R",0, 0, 1, 1) +0.000128 * getSMEFTCoeffEW("Cqd1R",0, 0, 2, 2)  
            +0.000128 * getSMEFTCoeffEW("Cqd1R",1, 1, 0, 0) +0.000128 * getSMEFTCoeffEW("Cqd1R",1, 1, 1, 1) +0.000128 * getSMEFTCoeffEW("Cqd1R",1, 1, 2, 2) -0.002463 * getSMEFTCoeffEW("Cqd1R",2, 2, 0, 0)  
            -0.002463 * getSMEFTCoeffEW("Cqd1R",2, 2, 1, 1) -0.002463 * getSMEFTCoeffEW("Cqd1R",2, 2, 2, 2) ) * v2; 

    return deltaGamma_Z + cNLOd6 * deltaNLO;
}

const double NPSMEFTd6General::Gamma_Z() const
{
    return (trueSM.Gamma_Z() + deltaGamma_Z());
}

const double NPSMEFTd6General::deltaGzd6() const {
    return ( deltaGamma_Z() / trueSM.Gamma_Z());
}

const double NPSMEFTd6General::deltaGzd62() const {
    double dWZ = 0.0;

    return (dWZ * dWZ);
}

const double NPSMEFTd6General::BrW(const Particle fi, const Particle fj) const {
    double GammW0 = trueSM.GammaW();
    double dGammW = deltaGamma_W();
    
    double GammWij0 = trueSM.GammaW(fi, fj);
    double dGammWij = deltaGamma_Wff(fi, fj);

    return GammWij0 / GammW0 + dGammWij / GammW0 - GammWij0 * dGammW / GammW0 / GammW0;
}

const double NPSMEFTd6General::RWlilj(const Particle li, const Particle lj) const {
    double GammWli0, GammWlj0;
    double dGammWli, dGammWlj;

    if (li.is("ELECTRON")) {
        GammWli0 = trueSM.GammaW(leptons[NEUTRINO_1], li);
        dGammWli = deltaGamma_Wff(leptons[NEUTRINO_1], li);
    } else if (li.is("MU")) {
        GammWli0 = trueSM.GammaW(leptons[NEUTRINO_2], li);
        dGammWli = deltaGamma_Wff(leptons[NEUTRINO_2], li);
    } else if (li.is("TAU")) {
        GammWli0 = trueSM.GammaW(leptons[NEUTRINO_3], li);
        dGammWli = deltaGamma_Wff(leptons[NEUTRINO_3], li);
    } else {
        throw std::runtime_error("Error in NPSMEFTd6General::RWlilj. li must be a charged lepton");
    }

    if (lj.is("ELECTRON")) {
        GammWlj0 = trueSM.GammaW(leptons[NEUTRINO_1], lj);
        dGammWlj = deltaGamma_Wff(leptons[NEUTRINO_1], lj);
    } else if (lj.is("MU")) {
        GammWlj0 = trueSM.GammaW(leptons[NEUTRINO_2], lj);
        dGammWlj = deltaGamma_Wff(leptons[NEUTRINO_2], lj);
    } else if (lj.is("TAU")) {
        GammWlj0 = trueSM.GammaW(leptons[NEUTRINO_3], lj);
        dGammWlj = deltaGamma_Wff(leptons[NEUTRINO_3], lj);
    } else {
        throw std::runtime_error("Error in NPSMEFTd6General::RWlilj. lj must be a charged lepton");
    }

    return GammWli0 / GammWlj0 + dGammWli / GammWlj0 - GammWli0 * dGammWlj / GammWlj0 / GammWlj0;
}

const double NPSMEFTd6General::RWc() const {
    double GammWcX0, GammWhad0;
    double dGammWcX, dGammWhad;

    //  For the SM contributions to the of W widths, proceed as in the SM implementation, 
    //  using W->cX = W->cs and W->had = W->ud + W->cs. (See comments in StandardModel.cpp>RWc.)

    //  Add all the  W-> cX decays
    //  In SM GammaW fermion masses are ignored and CKM=1 but uses that SM CKM is unitary => I only need W->cs
    GammWcX0 = trueSM.GammaW(quarks[CHARM], quarks[STRANGE]);

    //  SMEFT NP effects, however, can break CKM unitarity and I need to add all fermion decays explicitly
    dGammWcX = deltaGamma_Wff(quarks[CHARM], quarks[STRANGE])
            + deltaGamma_Wff(quarks[CHARM], quarks[DOWN])
            + deltaGamma_Wff(quarks[CHARM], quarks[BOTTOM]);

    //  For the same reasons, I only need to add the W-> ud decays into the SM hadronic W width
    GammWhad0 = GammWcX0
            + trueSM.GammaW(quarks[UP], quarks[DOWN]);

    //  and, similarly, for the NP corrections to hadronic width I need all fermion decays explicitly
    dGammWhad = dGammWcX
            + deltaGamma_Wff(quarks[UP], quarks[STRANGE])
            + deltaGamma_Wff(quarks[UP], quarks[DOWN])
            + deltaGamma_Wff(quarks[UP], quarks[BOTTOM]);

    return GammWcX0 / GammWhad0 + dGammWcX / GammWhad0 - GammWcX0 * dGammWhad / GammWhad0 / GammWhad0;
}

const double NPSMEFTd6General::RZlilj(const Particle li, const Particle lj) const {
    double GammZli0, GammZlj0;
    double dGammZli, dGammZlj;

    if (li.is("ELECTRON") || li.is("MU") || li.is("TAU")) {
        GammZli0 = trueSM.GammaZ(li);
        dGammZli = deltaGamma_Zf(li);
    } else {
        throw std::runtime_error("Error in NPSMEFTd6General::RZlilj. li must be a charged lepton");
    }

    if (lj.is("ELECTRON") || lj.is("MU") || lj.is("TAU")) {
        GammZlj0 = trueSM.GammaZ(lj);
        dGammZlj = deltaGamma_Zf(lj);
    } else {
        throw std::runtime_error("Error in NPSMEFTd6General::RZlilj. lj must be a charged lepton");
    }

    return GammZli0 / GammZlj0 + dGammZli / GammZlj0 - GammZli0 * dGammZlj / GammZlj0 / GammZlj0;
}


const double NPSMEFTd6General::deltaSigmaHadron() const
{
    double sigma_had = 0.;
    bool nonZeroNP = false;
    
    double deltaNLO;
    
    double delGVl[6], delGAl[6], delGVq[6], delGAq[6];
    for (int p = 0; p < 6; ++p) {
        delGVl[p] = deltaGV_f(leptons[p]);
        delGAl[p] = deltaGA_f(leptons[p]);
        delGVq[p] = deltaGV_f(quarks[p]);
        delGAq[p] = deltaGA_f(quarks[p]);
        if (delGVl[p] != 0.0 || delGAl[p] != 0.0
                || delGVq[p] != 0.0 || delGAq[p] != 0.0)
            nonZeroNP = true;
    }

    if (nonZeroNP) {
        double gVf, gAf;
        double Gl[6], deltaGl[6], Gq[6], deltaGq[6];
        double Gq_sum = 0.0, delGq_sum = 0.0;
        double Gf_sum = 0.0, delGf_sum = 0.0;
        for (int p = 0; p < 6; ++p) {
            gVf = trueSM.gV_f(leptons[p]).real();
            gAf = trueSM.gA_f(leptons[p]).real();
            Gl[p] = gVf * gVf + gAf*gAf;
            deltaGl[p] = 2.0 * (gVf * delGVl[p] + gAf * delGAl[p]);

            gVf = trueSM.gV_f(quarks[p]).real();
            gAf = trueSM.gA_f(quarks[p]).real();
            Gq[p] = gVf * gVf + gAf*gAf;
            deltaGq[p] = 2.0 * (gVf * delGVq[p] + gAf * delGAq[p]);

            Gq_sum += 3.0 * Gq[p];
            Gf_sum += Gl[p] + 3.0 * Gq[p];
            delGq_sum += 3.0 * deltaGq[p];
            delGf_sum += deltaGl[p] + 3.0 * deltaGq[p];
        }

        sigma_had = 12.0 * M_PI / Mz / Mz
                * Gl[ELECTRON] * Gq_sum / Gf_sum / Gf_sum
                * (deltaGl[ELECTRON] / Gl[ELECTRON]
                + delGq_sum / Gq_sum - 2.0 * delGf_sum / Gf_sum);
    }

    // Finite NLO corrections [in nb] => Need to be translated to GeV^-2    
    deltaNLO = (+0.031306 * getSMEFTCoeffEW("CW")  +0.002537 * getSMEFTCoeffEW("CHbox")  -3.66342 * getSMEFTCoeffEW("CHD")  +0.000873 * getSMEFTCoeffEW("CHB")   
            +0.001497 * getSMEFTCoeffEW("CHW")  -4.03907 * getSMEFTCoeffEW("CHWB")  +0.10258 * getSMEFTCoeffEW("CuWR",2, 2) +0.043554 * getSMEFTCoeffEW("CuBR",2, 2)  
            -1.03648 * getSMEFTCoeffEW("CHl1R",0, 0) +0.226921 * getSMEFTCoeffEW("CHl1R",1, 1) +0.226921 * getSMEFTCoeffEW("CHl1R",2, 2) -1.50874 * getSMEFTCoeffEW("CHl3R",0, 0)  
            +0.316297 * getSMEFTCoeffEW("CHl3R",1, 1) +0.313483 * getSMEFTCoeffEW("CHl3R",2, 2) -4.29271 * getSMEFTCoeffEW("CHeR",0, 0) +0.199561 * getSMEFTCoeffEW("CHeR",1, 1)  
            +0.199561 * getSMEFTCoeffEW("CHeR",2, 2) -0.14288 * getSMEFTCoeffEW("CHq1R",0, 0) -0.14288 * getSMEFTCoeffEW("CHq1R",1, 1) -0.218148 * getSMEFTCoeffEW("CHq1R",2, 2)  
            -0.552673 * getSMEFTCoeffEW("CHq3R",0, 0) -0.552673 * getSMEFTCoeffEW("CHq3R",1, 1) -0.125393 * getSMEFTCoeffEW("CHq3R",2, 2) -0.268081 * getSMEFTCoeffEW("CHuR",0, 0)  
            -0.268081 * getSMEFTCoeffEW("CHuR",1, 1) -0.121694 * getSMEFTCoeffEW("CHuR",2, 2) +0.132828 * getSMEFTCoeffEW("CHdR",0, 0) +0.132828 * getSMEFTCoeffEW("CHdR",1, 1)  
            +0.132828 * getSMEFTCoeffEW("CHdR",2, 2) +0.05596 * getSMEFTCoeffEW("CllR",0, 0, 0, 0) +0.088109 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) +0.088109 * getSMEFTCoeffEW("CllR",0, 0, 2, 2)  
            -0.019051 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.016238 * getSMEFTCoeffEW("CllR",0, 2, 2, 0) +0.015911 * getSMEFTCoeffEW("CllR",1, 1, 1, 1) +0.008802 * getSMEFTCoeffEW("CllR",1, 1, 2, 2)  
            +0.02302 * getSMEFTCoeffEW("CllR",1, 2, 2, 1) +0.015911 * getSMEFTCoeffEW("CllR",2, 2, 2, 2) +0.010198 * getSMEFTCoeffEW("Cqq1R",0, 0, 0, 0) +0.002454 * getSMEFTCoeffEW("Cqq1R",0, 0, 1, 1)  
            -0.047245 * getSMEFTCoeffEW("Cqq1R",0, 0, 2, 2) +0.017942 * getSMEFTCoeffEW("Cqq1R",0, 1, 1, 0) +0.185075 * getSMEFTCoeffEW("Cqq1R",0, 2, 2, 0) +0.010198 * getSMEFTCoeffEW("Cqq1R",1, 1, 1, 1)  
            -0.047245 * getSMEFTCoeffEW("Cqq1R",1, 1, 2, 2) +0.185075 * getSMEFTCoeffEW("Cqq1R",1, 2, 2, 1) -0.304596 * getSMEFTCoeffEW("Cqq1R",2, 2, 2, 2) +0.124698 * getSMEFTCoeffEW("Cqq3R",0, 0, 0, 0)  
            +0.266683 * getSMEFTCoeffEW("Cqq3R",0, 0, 1, 1) +0.784812 * getSMEFTCoeffEW("Cqq3R",0, 0, 2, 2) -0.017288 * getSMEFTCoeffEW("Cqq3R",0, 1, 1, 0) -0.25535 * getSMEFTCoeffEW("Cqq3R",0, 2, 2, 0)  
            +0.124698 * getSMEFTCoeffEW("Cqq3R",1, 1, 1, 1) +0.784812 * getSMEFTCoeffEW("Cqq3R",1, 1, 2, 2) -0.25535 * getSMEFTCoeffEW("Cqq3R",1, 2, 2, 1) -0.027464 * getSMEFTCoeffEW("Cqq3R",2, 2, 2, 2)  
            -0.042467 * getSMEFTCoeffEW("Clq1R",0, 0, 0, 0) -0.042467 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1) +1.84739 * getSMEFTCoeffEW("Clq1R",0, 0, 2, 2) -0.002814 * getSMEFTCoeffEW("Clq1R",1, 1, 0, 0)  
            -0.002814 * getSMEFTCoeffEW("Clq1R",1, 1, 1, 1) +0.093811 * getSMEFTCoeffEW("Clq1R",1, 1, 2, 2) -0.002814 * getSMEFTCoeffEW("Clq1R",2, 2, 0, 0) -0.002814 * getSMEFTCoeffEW("Clq1R",2, 2, 1, 1)  
            +0.093811 * getSMEFTCoeffEW("Clq1R",2, 2, 2, 2) -0.311452 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0) -0.311452 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) -1.7689 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2)  
            +0.101948 * getSMEFTCoeffEW("Clq3R",1, 1, 0, 0) +0.101948 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1) +0.437729 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) +0.101948 * getSMEFTCoeffEW("Clq3R",2, 2, 0, 0)  
            +0.101948 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1) +0.437729 * getSMEFTCoeffEW("Clq3R",2, 2, 2, 2) -0.083555 * getSMEFTCoeffEW("CeeR",0, 0, 0, 0) -0.077394 * getSMEFTCoeffEW("CeeR",0, 0, 1, 1)  
            -0.077394 * getSMEFTCoeffEW("CeeR",0, 0, 2, 2) +0.006162 * getSMEFTCoeffEW("CeeR",1, 1, 1, 1) +0.012323 * getSMEFTCoeffEW("CeeR",1, 1, 2, 2) +0.006162 * getSMEFTCoeffEW("CeeR",2, 2, 2, 2)  
            +0.005562 * getSMEFTCoeffEW("CuuR",0, 0, 0, 0) +0.009815 * getSMEFTCoeffEW("CuuR",0, 0, 1, 1) +0.1274 * getSMEFTCoeffEW("CuuR",0, 0, 2, 2) +0.001309 * getSMEFTCoeffEW("CuuR",0, 1, 1, 0)  
            +0.076969 * getSMEFTCoeffEW("CuuR",0, 2, 2, 0) +0.005562 * getSMEFTCoeffEW("CuuR",1, 1, 1, 1) +0.1274 * getSMEFTCoeffEW("CuuR",1, 1, 2, 2) +0.076969 * getSMEFTCoeffEW("CuuR",1, 2, 2, 1)  
            +0.00139 * getSMEFTCoeffEW("CddR",0, 0, 0, 0) +0.002454 * getSMEFTCoeffEW("CddR",0, 0, 1, 1) +0.002454 * getSMEFTCoeffEW("CddR",0, 0, 2, 2) +0.00139 * getSMEFTCoeffEW("CddR",1, 1, 1, 1)  
            +0.002454 * getSMEFTCoeffEW("CddR",1, 1, 2, 2) +0.00139 * getSMEFTCoeffEW("CddR",2, 2, 2, 2) +0.058456 * getSMEFTCoeffEW("CeuR",0, 0, 0, 0) +0.058456 * getSMEFTCoeffEW("CeuR",0, 0, 1, 1)  
            +1.54943 * getSMEFTCoeffEW("CeuR",0, 0, 2, 2) -0.005628 * getSMEFTCoeffEW("CeuR",1, 1, 0, 0) -0.005628 * getSMEFTCoeffEW("CeuR",1, 1, 1, 1) -0.114259 * getSMEFTCoeffEW("CeuR",1, 1, 2, 2)  
            -0.005628 * getSMEFTCoeffEW("CeuR",2, 2, 0, 0) -0.005628 * getSMEFTCoeffEW("CeuR",2, 2, 1, 1) -0.114259 * getSMEFTCoeffEW("CeuR",2, 2, 2, 2) -0.029228 * getSMEFTCoeffEW("CedR",0, 0, 0, 0)  
            -0.029228 * getSMEFTCoeffEW("CedR",0, 0, 1, 1) -0.029228 * getSMEFTCoeffEW("CedR",0, 0, 2, 2) +0.002814 * getSMEFTCoeffEW("CedR",1, 1, 0, 0) +0.002814 * getSMEFTCoeffEW("CedR",1, 1, 1, 1)  
            +0.002814 * getSMEFTCoeffEW("CedR",1, 1, 2, 2) +0.002814 * getSMEFTCoeffEW("CedR",2, 2, 0, 0) +0.002814 * getSMEFTCoeffEW("CedR",2, 2, 1, 1) +0.002814 * getSMEFTCoeffEW("CedR",2, 2, 2, 2)  
            -0.002454 * getSMEFTCoeffEW("Cud1R",0, 0, 0, 0) -0.002454 * getSMEFTCoeffEW("Cud1R",0, 0, 1, 1) -0.002454 * getSMEFTCoeffEW("Cud1R",0, 0, 2, 2) -0.002454 * getSMEFTCoeffEW("Cud1R",1, 1, 0, 0)  
            -0.002454 * getSMEFTCoeffEW("Cud1R",1, 1, 1, 1) -0.002454 * getSMEFTCoeffEW("Cud1R",1, 1, 2, 2) -0.03185 * getSMEFTCoeffEW("Cud1R",2, 2, 0, 0) -0.03185 * getSMEFTCoeffEW("Cud1R",2, 2, 1, 1)  
            -0.03185 * getSMEFTCoeffEW("Cud1R",2, 2, 2, 2) +0.012013 * getSMEFTCoeffEW("CleR",0, 0, 0, 0) +0.044055 * getSMEFTCoeffEW("CleR",0, 0, 1, 1) +0.044055 * getSMEFTCoeffEW("CleR",0, 0, 2, 2)  
            -0.027641 * getSMEFTCoeffEW("CleR",1, 1, 0, 0) +0.004401 * getSMEFTCoeffEW("CleR",1, 1, 1, 1) +0.004401 * getSMEFTCoeffEW("CleR",1, 1, 2, 2) -0.027641 * getSMEFTCoeffEW("CleR",2, 2, 0, 0)  
            +0.004401 * getSMEFTCoeffEW("CleR",2, 2, 1, 1) +0.004401 * getSMEFTCoeffEW("CleR",2, 2, 2, 2) -0.084935 * getSMEFTCoeffEW("CluR",0, 0, 0, 0) -0.084935 * getSMEFTCoeffEW("CluR",0, 0, 1, 1)  
            -2.17316 * getSMEFTCoeffEW("CluR",0, 0, 2, 2) -0.005628 * getSMEFTCoeffEW("CluR",1, 1, 0, 0) -0.005628 * getSMEFTCoeffEW("CluR",1, 1, 1, 1) -0.114259 * getSMEFTCoeffEW("CluR",1, 1, 2, 2)  
            -0.005628 * getSMEFTCoeffEW("CluR",2, 2, 0, 0) -0.005628 * getSMEFTCoeffEW("CluR",2, 2, 1, 1) -0.114259 * getSMEFTCoeffEW("CluR",2, 2, 2, 2) +0.042467 * getSMEFTCoeffEW("CldR",0, 0, 0, 0)  
            +0.042467 * getSMEFTCoeffEW("CldR",0, 0, 1, 1) +0.042467 * getSMEFTCoeffEW("CldR",0, 0, 2, 2) +0.002814 * getSMEFTCoeffEW("CldR",1, 1, 0, 0) +0.002814 * getSMEFTCoeffEW("CldR",1, 1, 1, 1)  
            +0.002814 * getSMEFTCoeffEW("CldR",1, 1, 2, 2) +0.002814 * getSMEFTCoeffEW("CldR",2, 2, 0, 0) +0.002814 * getSMEFTCoeffEW("CldR",2, 2, 1, 1) +0.002814 * getSMEFTCoeffEW("CldR",2, 2, 2, 2)  
            +0.029228 * getSMEFTCoeffEW("CqeR",0, 0, 0, 0) -0.002814 * getSMEFTCoeffEW("CqeR",0, 0, 1, 1) -0.002814 * getSMEFTCoeffEW("CqeR",0, 0, 2, 2) +0.029228 * getSMEFTCoeffEW("CqeR",1, 1, 0, 0)  
            -0.002814 * getSMEFTCoeffEW("CqeR",1, 1, 1, 1) -0.002814 * getSMEFTCoeffEW("CqeR",1, 1, 2, 2) -1.32316 * getSMEFTCoeffEW("CqeR",2, 2, 0, 0) +0.093811 * getSMEFTCoeffEW("CqeR",2, 2, 1, 1)  
            +0.093811 * getSMEFTCoeffEW("CqeR",2, 2, 2, 2) +0.002454 * getSMEFTCoeffEW("Cqu1R",0, 0, 0, 0) +0.002454 * getSMEFTCoeffEW("Cqu1R",0, 0, 1, 1) +0.03185 * getSMEFTCoeffEW("Cqu1R",0, 0, 2, 2)  
            +0.002454 * getSMEFTCoeffEW("Cqu1R",1, 1, 0, 0) +0.002454 * getSMEFTCoeffEW("Cqu1R",1, 1, 1, 1) +0.03185 * getSMEFTCoeffEW("Cqu1R",1, 1, 2, 2) -0.047245 * getSMEFTCoeffEW("Cqu1R",2, 2, 0, 0)  
            -0.047245 * getSMEFTCoeffEW("Cqu1R",2, 2, 1, 1) +0.181949 * getSMEFTCoeffEW("Cqu1R",2, 2, 2, 2) -0.001227 * getSMEFTCoeffEW("Cqd1R",0, 0, 0, 0) -0.001227 * getSMEFTCoeffEW("Cqd1R",0, 0, 1, 1)  
            -0.001227 * getSMEFTCoeffEW("Cqd1R",0, 0, 2, 2) -0.001227 * getSMEFTCoeffEW("Cqd1R",1, 1, 0, 0) -0.001227 * getSMEFTCoeffEW("Cqd1R",1, 1, 1, 1) -0.001227 * getSMEFTCoeffEW("Cqd1R",1, 1, 2, 2)  
            +0.023623 * getSMEFTCoeffEW("Cqd1R",2, 2, 0, 0) +0.023623 * getSMEFTCoeffEW("Cqd1R",2, 2, 1, 1) +0.023623 * getSMEFTCoeffEW("Cqd1R",2, 2, 2, 2) ) * v2; 
    
    // Translated to GeV^-2 
    deltaNLO = deltaNLO / trueSM.GeVminus2_to_nb;
    
    return sigma_had + cNLOd6 * deltaNLO;
}


const double NPSMEFTd6General::sigma0_had() const
{    
    return (trueSM.sigma0_had() + deltaSigmaHadron());
}


const double NPSMEFTd6General::deltaA_f(const Particle f) const
{
    double dAf = 0.;
    double delGVf = deltaGV_f(f);
    double delGAf = deltaGA_f(f);
    
    double deltaNLO;  
    
    if (delGVf != 0.0 || delGAf != 0.0) {
        double gVf = trueSM.gV_f(f).real();
        double gAf = trueSM.gA_f(f).real();
        double Gf = gVf * gVf + gAf*gAf;
        double delGVfOverGAf = (gAf * delGVf - gVf * delGAf) / gAf / gAf;

        dAf = -2.0 * (gVf * gVf - gAf * gAf) * gAf * gAf / Gf / Gf*delGVfOverGAf;
    }

    // Finite NLO corrections: Not available for u and d    
    switch(f.getIndex()){
    //if (f.is("ELECTRON")) {
        case 1:
            deltaNLO = (+0.018161 * getSMEFTCoeffEW("CW")  +0.00453 * getSMEFTCoeffEW("CHbox")  +0.237511 * getSMEFTCoeffEW("CHD")  +0.001559 * getSMEFTCoeffEW("CHB")   
            +0.002674 * getSMEFTCoeffEW("CHW")  +0.283607 * getSMEFTCoeffEW("CHWB")  -0.034521 * getSMEFTCoeffEW("CuWR",2, 2) +0.048793 * getSMEFTCoeffEW("CuBR",2, 2)  
            +0.163367 * getSMEFTCoeffEW("CHl1R",0, 0) +0.002591 * getSMEFTCoeffEW("CHl1R",1, 1) +0.002591 * getSMEFTCoeffEW("CHl1R",2, 2) +0.223109 * getSMEFTCoeffEW("CHl3R",0, 0)  
            +0.072891 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000142 * getSMEFTCoeffEW("CHl3R",2, 2) +0.034734 * getSMEFTCoeffEW("CHeR",0, 0) +0.002591 * getSMEFTCoeffEW("CHeR",1, 1)  
            +0.002591 * getSMEFTCoeffEW("CHeR",2, 2) -0.002591 * getSMEFTCoeffEW("CHq1R",0, 0) -0.002591 * getSMEFTCoeffEW("CHq1R",1, 1) +0.222737 * getSMEFTCoeffEW("CHq1R",2, 2)  
            +0.000425 * getSMEFTCoeffEW("CHq3R",0, 0) +0.000425 * getSMEFTCoeffEW("CHq3R",1, 1) -0.139992 * getSMEFTCoeffEW("CHq3R",2, 2) -0.005181 * getSMEFTCoeffEW("CHuR",0, 0)  
            -0.005181 * getSMEFTCoeffEW("CHuR",1, 1) -0.272811 * getSMEFTCoeffEW("CHuR",2, 2) +0.002591 * getSMEFTCoeffEW("CHdR",0, 0) +0.002591 * getSMEFTCoeffEW("CHdR",1, 1)  
            +0.002591 * getSMEFTCoeffEW("CHdR",2, 2) +0.000753 * getSMEFTCoeffEW("CllR",0, 0, 0, 0) +0.001491 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) +0.001491 * getSMEFTCoeffEW("CllR",0, 0, 2, 2)  
            -0.073487 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.000738 * getSMEFTCoeffEW("CllR",0, 2, 2, 0) -0.000745 * getSMEFTCoeffEW("Clq1R",0, 0, 0, 0) -0.000745 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1)  
            +0.032966 * getSMEFTCoeffEW("Clq1R",0, 0, 2, 2) -0.007772 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0) -0.007772 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) -0.041483 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2)  
            +0.002583 * getSMEFTCoeffEW("CeeR",0, 0, 0, 0) +0.002583 * getSMEFTCoeffEW("CeeR",0, 0, 1, 1) +0.002583 * getSMEFTCoeffEW("CeeR",0, 0, 2, 2) -0.001845 * getSMEFTCoeffEW("CeuR",0, 0, 0, 0)  
            -0.001845 * getSMEFTCoeffEW("CeuR",0, 0, 1, 1) -0.047901 * getSMEFTCoeffEW("CeuR",0, 0, 2, 2) +0.000923 * getSMEFTCoeffEW("CedR",0, 0, 0, 0) +0.000923 * getSMEFTCoeffEW("CedR",0, 0, 1, 1)  
            +0.000923 * getSMEFTCoeffEW("CedR",0, 0, 2, 2) +0.001668 * getSMEFTCoeffEW("CleR",0, 0, 0, 0) +0.000745 * getSMEFTCoeffEW("CleR",0, 0, 1, 1) +0.000745 * getSMEFTCoeffEW("CleR",0, 0, 2, 2)  
            +0.000923 * getSMEFTCoeffEW("CleR",1, 1, 0, 0) +0.000923 * getSMEFTCoeffEW("CleR",2, 2, 0, 0) -0.001491 * getSMEFTCoeffEW("CluR",0, 0, 0, 0) -0.001491 * getSMEFTCoeffEW("CluR",0, 0, 1, 1)  
            -0.038706 * getSMEFTCoeffEW("CluR",0, 0, 2, 2) +0.000745 * getSMEFTCoeffEW("CldR",0, 0, 0, 0) +0.000745 * getSMEFTCoeffEW("CldR",0, 0, 1, 1) +0.000745 * getSMEFTCoeffEW("CldR",0, 0, 2, 2)  
            -0.000923 * getSMEFTCoeffEW("CqeR",0, 0, 0, 0) -0.000923 * getSMEFTCoeffEW("CqeR",1, 1, 0, 0) +0.040798 * getSMEFTCoeffEW("CqeR",2, 2, 0, 0) ) * v2; 
        break;
    //} else if (f.is("MUON")) {
        case 3:
            deltaNLO = (+0.018161 * getSMEFTCoeffEW("CW")  +0.00453 * getSMEFTCoeffEW("CHbox")  +0.237511 * getSMEFTCoeffEW("CHD")  +0.001559 * getSMEFTCoeffEW("CHB")   
            +0.002674 * getSMEFTCoeffEW("CHW")  +0.283607 * getSMEFTCoeffEW("CHWB")  -0.034521 * getSMEFTCoeffEW("CuWR",2, 2) +0.048793 * getSMEFTCoeffEW("CuBR",2, 2)  
            +0.002591 * getSMEFTCoeffEW("CHl1R",0, 0) +0.163367 * getSMEFTCoeffEW("CHl1R",1, 1) +0.002591 * getSMEFTCoeffEW("CHl1R",2, 2) +0.072891 * getSMEFTCoeffEW("CHl3R",0, 0)  
            +0.223109 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000142 * getSMEFTCoeffEW("CHl3R",2, 2) +0.002591 * getSMEFTCoeffEW("CHeR",0, 0) +0.034734 * getSMEFTCoeffEW("CHeR",1, 1)  
            +0.002591 * getSMEFTCoeffEW("CHeR",2, 2) -0.002591 * getSMEFTCoeffEW("CHq1R",0, 0) -0.002591 * getSMEFTCoeffEW("CHq1R",1, 1) +0.222737 * getSMEFTCoeffEW("CHq1R",2, 2)  
            +0.000425 * getSMEFTCoeffEW("CHq3R",0, 0) +0.000425 * getSMEFTCoeffEW("CHq3R",1, 1) -0.139992 * getSMEFTCoeffEW("CHq3R",2, 2) -0.005181 * getSMEFTCoeffEW("CHuR",0, 0)  
            -0.005181 * getSMEFTCoeffEW("CHuR",1, 1) -0.272811 * getSMEFTCoeffEW("CHuR",2, 2) +0.002591 * getSMEFTCoeffEW("CHdR",0, 0) +0.002591 * getSMEFTCoeffEW("CHdR",1, 1)  
            +0.002591 * getSMEFTCoeffEW("CHdR",2, 2) +0.001491 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) -0.073487 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) +0.000753 * getSMEFTCoeffEW("CllR",1, 1, 1, 1)  
            +0.001491 * getSMEFTCoeffEW("CllR",1, 1, 2, 2) -0.000738 * getSMEFTCoeffEW("CllR",1, 2, 2, 1) -0.000745 * getSMEFTCoeffEW("Clq1R",1, 1, 0, 0) -0.000745 * getSMEFTCoeffEW("Clq1R",1, 1, 1, 1)  
            +0.032966 * getSMEFTCoeffEW("Clq1R",1, 1, 2, 2) -0.007772 * getSMEFTCoeffEW("Clq3R",1, 1, 0, 0) -0.007772 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1) -0.041483 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2)  
            +0.002583 * getSMEFTCoeffEW("CeeR",0, 0, 1, 1) +0.002583 * getSMEFTCoeffEW("CeeR",1, 1, 1, 1) +0.002583 * getSMEFTCoeffEW("CeeR",1, 1, 2, 2) -0.001845 * getSMEFTCoeffEW("CeuR",1, 1, 0, 0)  
            -0.001845 * getSMEFTCoeffEW("CeuR",1, 1, 1, 1) -0.047901 * getSMEFTCoeffEW("CeuR",1, 1, 2, 2) +0.000923 * getSMEFTCoeffEW("CedR",1, 1, 0, 0) +0.000923 * getSMEFTCoeffEW("CedR",1, 1, 1, 1)  
            +0.000923 * getSMEFTCoeffEW("CedR",1, 1, 2, 2) +0.000923 * getSMEFTCoeffEW("CleR",0, 0, 1, 1) +0.000745 * getSMEFTCoeffEW("CleR",1, 1, 0, 0) +0.001668 * getSMEFTCoeffEW("CleR",1, 1, 1, 1)  
            +0.000745 * getSMEFTCoeffEW("CleR",1, 1, 2, 2) +0.000923 * getSMEFTCoeffEW("CleR",2, 2, 1, 1) -0.001491 * getSMEFTCoeffEW("CluR",1, 1, 0, 0) -0.001491 * getSMEFTCoeffEW("CluR",1, 1, 1, 1)  
            -0.038706 * getSMEFTCoeffEW("CluR",1, 1, 2, 2) +0.000745 * getSMEFTCoeffEW("CldR",1, 1, 0, 0) +0.000745 * getSMEFTCoeffEW("CldR",1, 1, 1, 1) +0.000745 * getSMEFTCoeffEW("CldR",1, 1, 2, 2)  
            -0.000923 * getSMEFTCoeffEW("CqeR",0, 0, 1, 1) -0.000923 * getSMEFTCoeffEW("CqeR",1, 1, 1, 1) +0.040798 * getSMEFTCoeffEW("CqeR",2, 2, 1, 1) ) * v2; 
        break;
    //} else if (f.is("TAU")) {
        case 5:
            deltaNLO = (+0.018161 * getSMEFTCoeffEW("CW")  +0.00453 * getSMEFTCoeffEW("CHbox")  +0.237511 * getSMEFTCoeffEW("CHD")  +0.001559 * getSMEFTCoeffEW("CHB")   
            +0.002674 * getSMEFTCoeffEW("CHW")  +0.283607 * getSMEFTCoeffEW("CHWB")  -0.034521 * getSMEFTCoeffEW("CuWR",2, 2) +0.048793 * getSMEFTCoeffEW("CuBR",2, 2)  
            +0.002591 * getSMEFTCoeffEW("CHl1R",0, 0) +0.002591 * getSMEFTCoeffEW("CHl1R",1, 1) +0.163367 * getSMEFTCoeffEW("CHl1R",2, 2) +0.072891 * getSMEFTCoeffEW("CHl3R",0, 0)  
            +0.072891 * getSMEFTCoeffEW("CHl3R",1, 1) +0.15036 * getSMEFTCoeffEW("CHl3R",2, 2) +0.002591 * getSMEFTCoeffEW("CHeR",0, 0) +0.002591 * getSMEFTCoeffEW("CHeR",1, 1)  
            +0.034734 * getSMEFTCoeffEW("CHeR",2, 2) -0.002591 * getSMEFTCoeffEW("CHq1R",0, 0) -0.002591 * getSMEFTCoeffEW("CHq1R",1, 1) +0.222737 * getSMEFTCoeffEW("CHq1R",2, 2)  
            +0.000425 * getSMEFTCoeffEW("CHq3R",0, 0) +0.000425 * getSMEFTCoeffEW("CHq3R",1, 1) -0.139992 * getSMEFTCoeffEW("CHq3R",2, 2) -0.005181 * getSMEFTCoeffEW("CHuR",0, 0)  
            -0.005181 * getSMEFTCoeffEW("CHuR",1, 1) -0.272811 * getSMEFTCoeffEW("CHuR",2, 2) +0.002591 * getSMEFTCoeffEW("CHdR",0, 0) +0.002591 * getSMEFTCoeffEW("CHdR",1, 1)  
            +0.002591 * getSMEFTCoeffEW("CHdR",2, 2) +0.001491 * getSMEFTCoeffEW("CllR",0, 0, 2, 2) -0.072749 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.000738 * getSMEFTCoeffEW("CllR",0, 2, 2, 0)  
            +0.001491 * getSMEFTCoeffEW("CllR",1, 1, 2, 2) -0.000738 * getSMEFTCoeffEW("CllR",1, 2, 2, 1) +0.000753 * getSMEFTCoeffEW("CllR",2, 2, 2, 2) -0.000745 * getSMEFTCoeffEW("Clq1R",2, 2, 0, 0)  
            -0.000745 * getSMEFTCoeffEW("Clq1R",2, 2, 1, 1) +0.032966 * getSMEFTCoeffEW("Clq1R",2, 2, 2, 2) -0.007772 * getSMEFTCoeffEW("Clq3R",2, 2, 0, 0) -0.007772 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1)  
            -0.041483 * getSMEFTCoeffEW("Clq3R",2, 2, 2, 2) +0.002583 * getSMEFTCoeffEW("CeeR",0, 0, 2, 2) +0.002583 * getSMEFTCoeffEW("CeeR",1, 1, 2, 2) +0.002583 * getSMEFTCoeffEW("CeeR",2, 2, 2, 2)  
            -0.001845 * getSMEFTCoeffEW("CeuR",2, 2, 0, 0) -0.001845 * getSMEFTCoeffEW("CeuR",2, 2, 1, 1) -0.047901 * getSMEFTCoeffEW("CeuR",2, 2, 2, 2) +0.000923 * getSMEFTCoeffEW("CedR",2, 2, 0, 0)  
            +0.000923 * getSMEFTCoeffEW("CedR",2, 2, 1, 1) +0.000923 * getSMEFTCoeffEW("CedR",2, 2, 2, 2) +0.000923 * getSMEFTCoeffEW("CleR",0, 0, 2, 2) +0.000923 * getSMEFTCoeffEW("CleR",1, 1, 2, 2)  
            +0.000745 * getSMEFTCoeffEW("CleR",2, 2, 0, 0) +0.000745 * getSMEFTCoeffEW("CleR",2, 2, 1, 1) +0.001668 * getSMEFTCoeffEW("CleR",2, 2, 2, 2) -0.001491 * getSMEFTCoeffEW("CluR",2, 2, 0, 0)  
            -0.001491 * getSMEFTCoeffEW("CluR",2, 2, 1, 1) -0.038706 * getSMEFTCoeffEW("CluR",2, 2, 2, 2) +0.000745 * getSMEFTCoeffEW("CldR",2, 2, 0, 0) +0.000745 * getSMEFTCoeffEW("CldR",2, 2, 1, 1)  
            +0.000745 * getSMEFTCoeffEW("CldR",2, 2, 2, 2) -0.000923 * getSMEFTCoeffEW("CqeR",0, 0, 2, 2) -0.000923 * getSMEFTCoeffEW("CqeR",1, 1, 2, 2) +0.040798 * getSMEFTCoeffEW("CqeR",2, 2, 2, 2) ) * v2; 
        break;
    //} else if (f.is("STRANGE")) {
        case 9:
            deltaNLO = (+0.001425 * getSMEFTCoeffEW("CW")  +0.000355 * getSMEFTCoeffEW("CHbox")  +0.026008 * getSMEFTCoeffEW("CHD")  +0.000122 * getSMEFTCoeffEW("CHB")   
            +0.00021 * getSMEFTCoeffEW("CHW")  +0.030199 * getSMEFTCoeffEW("CHWB")  -0.002708 * getSMEFTCoeffEW("CuWR",2, 2) +0.003828 * getSMEFTCoeffEW("CuBR",2, 2)  
            +0.000203 * getSMEFTCoeffEW("CHl1R",0, 0) +0.000203 * getSMEFTCoeffEW("CHl1R",1, 1) +0.000203 * getSMEFTCoeffEW("CHl1R",2, 2) +0.005585 * getSMEFTCoeffEW("CHl3R",0, 0)  
            +0.005585 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000203 * getSMEFTCoeffEW("CHeR",0, 0) +0.000203 * getSMEFTCoeffEW("CHeR",1, 1) +0.000203 * getSMEFTCoeffEW("CHeR",2, 2)  
            -0.000203 * getSMEFTCoeffEW("CHq1R",0, 0) +0.016811 * getSMEFTCoeffEW("CHq1R",1, 1) +0.017474 * getSMEFTCoeffEW("CHq1R",2, 2) +0.000033 * getSMEFTCoeffEW("CHq3R",0, 0)  
            +0.016348 * getSMEFTCoeffEW("CHq3R",1, 1) -0.010982 * getSMEFTCoeffEW("CHq3R",2, 2) -0.000406 * getSMEFTCoeffEW("CHuR",0, 0) -0.000406 * getSMEFTCoeffEW("CHuR",1, 1)  
            -0.021402 * getSMEFTCoeffEW("CHuR",2, 2) +0.000203 * getSMEFTCoeffEW("CHdR",0, 0) +0.057219 * getSMEFTCoeffEW("CHdR",1, 1) +0.000203 * getSMEFTCoeffEW("CHdR",2, 2)  
            -0.005574 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.000117 * getSMEFTCoeffEW("Cqq1R",0, 0, 1, 1) -0.000089 * getSMEFTCoeffEW("Cqq1R",0, 1, 1, 0) -0.000206 * getSMEFTCoeffEW("Cqq1R",1, 1, 1, 1)  
            +0.005172 * getSMEFTCoeffEW("Cqq1R",1, 1, 2, 2) -0.000089 * getSMEFTCoeffEW("Cqq1R",1, 2, 2, 1) -0.001219 * getSMEFTCoeffEW("Cqq3R",0, 0, 1, 1) +0.000058 * getSMEFTCoeffEW("Cqq3R",0, 1, 1, 0)  
            -0.001161 * getSMEFTCoeffEW("Cqq3R",1, 1, 1, 1) -0.006509 * getSMEFTCoeffEW("Cqq3R",1, 1, 2, 2) +0.006967 * getSMEFTCoeffEW("Cqq3R",1, 2, 2, 1) +0.000058 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1)  
            +0.000058 * getSMEFTCoeffEW("Clq1R",1, 1, 1, 1) +0.000058 * getSMEFTCoeffEW("Clq1R",2, 2, 1, 1) -0.000203 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) -0.000203 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1)  
            -0.000203 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1) +0.000668 * getSMEFTCoeffEW("CddR",0, 0, 1, 1) +0.000089 * getSMEFTCoeffEW("CddR",0, 1, 1, 0) +0.000757 * getSMEFTCoeffEW("CddR",1, 1, 1, 1)  
            +0.000668 * getSMEFTCoeffEW("CddR",1, 1, 2, 2) +0.000089 * getSMEFTCoeffEW("CddR",1, 2, 2, 1) +0.000334 * getSMEFTCoeffEW("CedR",0, 0, 1, 1) +0.000334 * getSMEFTCoeffEW("CedR",1, 1, 1, 1)  
            +0.000334 * getSMEFTCoeffEW("CedR",2, 2, 1, 1) -0.000668 * getSMEFTCoeffEW("Cud1R",0, 0, 1, 1) -0.000668 * getSMEFTCoeffEW("Cud1R",1, 1, 1, 1) -0.017347 * getSMEFTCoeffEW("Cud1R",2, 2, 1, 1)  
            +0.000334 * getSMEFTCoeffEW("CldR",0, 0, 1, 1) +0.000334 * getSMEFTCoeffEW("CldR",1, 1, 1, 1) +0.000334 * getSMEFTCoeffEW("CldR",2, 2, 1, 1) +0.000058 * getSMEFTCoeffEW("CqeR",1, 1, 0, 0)  
            +0.000058 * getSMEFTCoeffEW("CqeR",1, 1, 1, 1) +0.000058 * getSMEFTCoeffEW("CqeR",1, 1, 2, 2) -0.000117 * getSMEFTCoeffEW("Cqu1R",1, 1, 0, 0) -0.000117 * getSMEFTCoeffEW("Cqu1R",1, 1, 1, 1)  
            -0.003037 * getSMEFTCoeffEW("Cqu1R",1, 1, 2, 2) -0.000334 * getSMEFTCoeffEW("Cqd1R",0, 0, 1, 1) +0.000058 * getSMEFTCoeffEW("Cqd1R",1, 1, 0, 0) -0.000276 * getSMEFTCoeffEW("Cqd1R",1, 1, 1, 1)  
            +0.000058 * getSMEFTCoeffEW("Cqd1R",1, 1, 2, 2) +0.014774 * getSMEFTCoeffEW("Cqd1R",2, 2, 1, 1) ) * v2; 
        break;
    //} else if (f.is("CHARM")) {
        case 8:
            deltaNLO = (+0.007742 * getSMEFTCoeffEW("CW")  +0.001931 * getSMEFTCoeffEW("CHbox")  +0.144562 * getSMEFTCoeffEW("CHD")  +0.000665 * getSMEFTCoeffEW("CHB")   
            +0.00114 * getSMEFTCoeffEW("CHW")  +0.167453 * getSMEFTCoeffEW("CHWB")  -0.014717 * getSMEFTCoeffEW("CuWR",2, 2) +0.020802 * getSMEFTCoeffEW("CuBR",2, 2)  
            +0.001104 * getSMEFTCoeffEW("CHl1R",0, 0) +0.001104 * getSMEFTCoeffEW("CHl1R",1, 1) +0.001104 * getSMEFTCoeffEW("CHl1R",2, 2) +0.030745 * getSMEFTCoeffEW("CHl3R",0, 0)  
            +0.030745 * getSMEFTCoeffEW("CHl3R",1, 1) +0.00006 * getSMEFTCoeffEW("CHl3R",2, 2) +0.001104 * getSMEFTCoeffEW("CHeR",0, 0) +0.001104 * getSMEFTCoeffEW("CHeR",1, 1)  
            +0.001104 * getSMEFTCoeffEW("CHeR",2, 2) -0.001104 * getSMEFTCoeffEW("CHq1R",0, 0) -0.094927 * getSMEFTCoeffEW("CHq1R",1, 1) +0.094959 * getSMEFTCoeffEW("CHq1R",2, 2)  
            +0.000181 * getSMEFTCoeffEW("CHq3R",0, 0) +0.089851 * getSMEFTCoeffEW("CHq3R",1, 1) -0.059683 * getSMEFTCoeffEW("CHq3R",2, 2) -0.002209 * getSMEFTCoeffEW("CHuR",0, 0)  
            -0.115557 * getSMEFTCoeffEW("CHuR",1, 1) -0.116308 * getSMEFTCoeffEW("CHuR",2, 2) +0.001104 * getSMEFTCoeffEW("CHdR",0, 0) +0.001104 * getSMEFTCoeffEW("CHdR",1, 1)  
            +0.001104 * getSMEFTCoeffEW("CHdR",2, 2) -0.030685 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) +0.000636 * getSMEFTCoeffEW("Cqq1R",0, 0, 1, 1) -0.000399 * getSMEFTCoeffEW("Cqq1R",0, 1, 1, 0)  
            +0.000236 * getSMEFTCoeffEW("Cqq1R",1, 1, 1, 1) -0.028109 * getSMEFTCoeffEW("Cqq1R",1, 1, 2, 2) -0.019173 * getSMEFTCoeffEW("Cqq1R",1, 2, 2, 1) -0.006627 * getSMEFTCoeffEW("Cqq3R",0, 0, 1, 1)  
            +0.000569 * getSMEFTCoeffEW("Cqq3R",0, 1, 1, 0) -0.006058 * getSMEFTCoeffEW("Cqq3R",1, 1, 1, 1) -0.035371 * getSMEFTCoeffEW("Cqq3R",1, 1, 2, 2) -0.018205 * getSMEFTCoeffEW("Cqq3R",1, 2, 2, 1)  
            -0.000318 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1) -0.000318 * getSMEFTCoeffEW("Clq1R",1, 1, 1, 1) -0.000318 * getSMEFTCoeffEW("Clq1R",2, 2, 1, 1) -0.001104 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1)  
            -0.001104 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1) -0.001104 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1) +0.002995 * getSMEFTCoeffEW("CuuR",0, 0, 1, 1) +0.000399 * getSMEFTCoeffEW("CuuR",0, 1, 1, 0)  
            +0.003395 * getSMEFTCoeffEW("CuuR",1, 1, 1, 1) +0.077766 * getSMEFTCoeffEW("CuuR",1, 1, 2, 2) +0.046983 * getSMEFTCoeffEW("CuuR",1, 2, 2, 1) -0.000749 * getSMEFTCoeffEW("CeuR",0, 0, 1, 1)  
            -0.000749 * getSMEFTCoeffEW("CeuR",1, 1, 1, 1) -0.000749 * getSMEFTCoeffEW("CeuR",2, 2, 1, 1) -0.000749 * getSMEFTCoeffEW("Cud1R",1, 1, 0, 0) -0.000749 * getSMEFTCoeffEW("Cud1R",1, 1, 1, 1)  
            -0.000749 * getSMEFTCoeffEW("Cud1R",1, 1, 2, 2) -0.000749 * getSMEFTCoeffEW("CluR",0, 0, 1, 1) -0.000749 * getSMEFTCoeffEW("CluR",1, 1, 1, 1) -0.000749 * getSMEFTCoeffEW("CluR",2, 2, 1, 1)  
            -0.000318 * getSMEFTCoeffEW("CqeR",1, 1, 0, 0) -0.000318 * getSMEFTCoeffEW("CqeR",1, 1, 1, 1) -0.000318 * getSMEFTCoeffEW("CqeR",1, 1, 2, 2) +0.000749 * getSMEFTCoeffEW("Cqu1R",0, 0, 1, 1)  
            +0.000636 * getSMEFTCoeffEW("Cqu1R",1, 1, 0, 0) +0.001384 * getSMEFTCoeffEW("Cqu1R",1, 1, 1, 1) +0.016502 * getSMEFTCoeffEW("Cqu1R",1, 1, 2, 2) -0.033117 * getSMEFTCoeffEW("Cqu1R",2, 2, 1, 1)  
            -0.000318 * getSMEFTCoeffEW("Cqd1R",1, 1, 0, 0) -0.000318 * getSMEFTCoeffEW("Cqd1R",1, 1, 1, 1) -0.000318 * getSMEFTCoeffEW("Cqd1R",1, 1, 2, 2) ) * v2; 
        break;
    //} else if (f.is("BOTTOM")) {
        case 11:
            deltaNLO = (+0.001072 * getSMEFTCoeffEW("CW")  +0.000355 * getSMEFTCoeffEW("CHbox")  +0.029789 * getSMEFTCoeffEW("CHD")  +0.000122 * getSMEFTCoeffEW("CHB")   
            +0.00021 * getSMEFTCoeffEW("CHW")  +0.03436 * getSMEFTCoeffEW("CHWB")  -0.004743 * getSMEFTCoeffEW("CuWR",2, 2) +0.003557 * getSMEFTCoeffEW("CuBR",2, 2)  
            +0.000203 * getSMEFTCoeffEW("CHl1R",0, 0) +0.000203 * getSMEFTCoeffEW("CHl1R",1, 1) +0.000203 * getSMEFTCoeffEW("CHl1R",2, 2) +0.006546 * getSMEFTCoeffEW("CHl3R",0, 0)  
            +0.006546 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000203 * getSMEFTCoeffEW("CHeR",0, 0) +0.000203 * getSMEFTCoeffEW("CHeR",1, 1) +0.000203 * getSMEFTCoeffEW("CHeR",2, 2)  
            -0.000203 * getSMEFTCoeffEW("CHq1R",0, 0) -0.000203 * getSMEFTCoeffEW("CHq1R",1, 1) +0.038131 * getSMEFTCoeffEW("CHq1R",2, 2) +0.000033 * getSMEFTCoeffEW("CHq3R",0, 0)  
            +0.000033 * getSMEFTCoeffEW("CHq3R",1, 1) +0.004738 * getSMEFTCoeffEW("CHq3R",2, 2) -0.000406 * getSMEFTCoeffEW("CHuR",0, 0) -0.000406 * getSMEFTCoeffEW("CHuR",1, 1)  
            -0.02192 * getSMEFTCoeffEW("CHuR",2, 2) +0.000203 * getSMEFTCoeffEW("CHdR",0, 0) +0.000203 * getSMEFTCoeffEW("CHdR",1, 1) +0.069347 * getSMEFTCoeffEW("CHdR",2, 2)  
            -0.006535 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.000117 * getSMEFTCoeffEW("Cqq1R",0, 0, 2, 2) -0.000089 * getSMEFTCoeffEW("Cqq1R",0, 2, 2, 0) -0.000117 * getSMEFTCoeffEW("Cqq1R",1, 1, 2, 2)  
            -0.000089 * getSMEFTCoeffEW("Cqq1R",1, 2, 2, 1) +0.005083 * getSMEFTCoeffEW("Cqq1R",2, 2, 2, 2) -0.001219 * getSMEFTCoeffEW("Cqq3R",0, 0, 2, 2) +0.000058 * getSMEFTCoeffEW("Cqq3R",0, 2, 2, 0)  
            -0.001219 * getSMEFTCoeffEW("Cqq3R",1, 1, 2, 2) +0.000058 * getSMEFTCoeffEW("Cqq3R",1, 2, 2, 1) +0.000458 * getSMEFTCoeffEW("Cqq3R",2, 2, 2, 2) +0.000058 * getSMEFTCoeffEW("Clq1R",0, 0, 2, 2)  
            +0.000058 * getSMEFTCoeffEW("Clq1R",1, 1, 2, 2) +0.000058 * getSMEFTCoeffEW("Clq1R",2, 2, 2, 2) -0.000203 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) -0.000203 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2)  
            -0.000203 * getSMEFTCoeffEW("Clq3R",2, 2, 2, 2) +0.000668 * getSMEFTCoeffEW("CddR",0, 0, 2, 2) +0.000089 * getSMEFTCoeffEW("CddR",0, 2, 2, 0) +0.000668 * getSMEFTCoeffEW("CddR",1, 1, 2, 2)  
            +0.000089 * getSMEFTCoeffEW("CddR",1, 2, 2, 1) +0.000757 * getSMEFTCoeffEW("CddR",2, 2, 2, 2) +0.000334 * getSMEFTCoeffEW("CedR",0, 0, 2, 2) +0.000334 * getSMEFTCoeffEW("CedR",1, 1, 2, 2)  
            +0.000334 * getSMEFTCoeffEW("CedR",2, 2, 2, 2) -0.000668 * getSMEFTCoeffEW("Cud1R",0, 0, 2, 2) -0.000668 * getSMEFTCoeffEW("Cud1R",1, 1, 2, 2) -0.017347 * getSMEFTCoeffEW("Cud1R",2, 2, 2, 2)  
            +0.000334 * getSMEFTCoeffEW("CldR",0, 0, 2, 2) +0.000334 * getSMEFTCoeffEW("CldR",1, 1, 2, 2) +0.000334 * getSMEFTCoeffEW("CldR",2, 2, 2, 2) +0.000058 * getSMEFTCoeffEW("CqeR",2, 2, 0, 0)  
            +0.000058 * getSMEFTCoeffEW("CqeR",2, 2, 1, 1) +0.000058 * getSMEFTCoeffEW("CqeR",2, 2, 2, 2) -0.000117 * getSMEFTCoeffEW("Cqu1R",2, 2, 0, 0) -0.000117 * getSMEFTCoeffEW("Cqu1R",2, 2, 1, 1)  
            -0.003037 * getSMEFTCoeffEW("Cqu1R",2, 2, 2, 2) -0.000334 * getSMEFTCoeffEW("Cqd1R",0, 0, 2, 2) -0.000334 * getSMEFTCoeffEW("Cqd1R",1, 1, 2, 2) +0.000058 * getSMEFTCoeffEW("Cqd1R",2, 2, 0, 0)  
            +0.000058 * getSMEFTCoeffEW("Cqd1R",2, 2, 1, 1) +0.014833 * getSMEFTCoeffEW("Cqd1R",2, 2, 2, 2) ) * v2; 
        break;
    //} else {
        default:
            deltaNLO = 0.;
    }

    return dAf + cNLOd6 * deltaNLO;
}

const double NPSMEFTd6General::A_f(const Particle f) const
{    
    return (trueSM.A_f(f) + deltaA_f(f));
}


const double NPSMEFTd6General::deltaAFB(const Particle f) const
{
    double dAFB = 0.;
    //double delGVf = deltaGV_f(f);
    //double delGAf = deltaGA_f(f);
    
    //double deltaNLO;
    
    // The electron part is needed for any final state
    //double gVe = trueSM.gV_f(f).real();
    //double gAe = trueSM.gA_f(f).real();
    //double Ge = gVe * gVe + gAe * gAe;
        
    double AeSM = trueSM.A_f(leptons[ELECTRON]); //2.0 * gAe * gVe / Ge;
    double delAe = deltaA_f(leptons[ELECTRON]);
    
    //if (f.is("ELECTRON")) {
    if ( f.getIndex() == 1 ) {
        
        dAFB = (3.0/2.0) * AeSM * delAe;
        
        //if (delGVf != 0.0 || delGAf != 0.0) {
        //    double gVe = trueSM.gV_f(f).real();
        //    double gAe = trueSM.gA_f(f).real();
        //    double Ge = gVe * gVe + gAe*gAe;
        //    double delGVeOverGAe = (gAe * delGVf - gVe * delGAf) / gAe / gAe;
        //    dAFB = -6.0 * gVe * gAe * (gVe * gVe - gAe * gAe) * gAe * gAe / Ge / Ge / Ge*delGVeOverGAe;
        //}
    } else {

        //double gVf = trueSM.gV_f(f).real();
        //double gAf = trueSM.gA_f(f).real();
        //double Gf = gVf * gVf + gAf * gAf;
        
        double AfSM = trueSM.A_f(f); //2.0 * gAf * gVf / Gf;
        double delAf = deltaA_f(f);      
        
        dAFB = (3.0/4.0) * ( AfSM * delAe + AeSM * delAf );
                
        //double delGVe = deltaGV_f(leptons[ELECTRON]);
        //double delGAe = deltaGA_f(leptons[ELECTRON]);
        //if (delGVe != 0.0 || delGAe != 0.0 || delGVf != 0.0 || delGAf != 0.0) {
        //    double gVe = trueSM.gV_f(leptons[ELECTRON]).real();
        //    double gAe = trueSM.gA_f(leptons[ELECTRON]).real();
        //    double Ge = gVe * gVe + gAe*gAe;
        //    double delGVeOverGAe = (gAe * delGVe - gVe * delGAe) / gAe / gAe;
            //
        //    double gVf = trueSM.gV_f(f).real();
        //    double gAf = trueSM.gA_f(f).real();
        //    double Gf = gVf * gVf + gAf*gAf;
        //    double delGVfOverGAf = (gAf * delGVf - gVf * delGAf) / gAf / gAf;

        //    dAFB = -(3.0 * gVf * gAf * (gVe * gVe - gAe * gAe) * gAe * gAe / Gf / Ge / Ge * delGVeOverGAe
        //            + 3.0 * gVe * gAe * (gVf * gVf - gAf * gAf) * gAf * gAf / Ge / Gf / Gf * delGVfOverGAf);
        //}
    }

    // Finite NLO corrections: not available for u and d   
    //switch(f.getIndex()){
    //if (f.is("ELECTRON")) {
    //    case 1:
    //        deltaNLO = (+0.00572 * getSMEFTCoeffEW("CW")  +0.001427 * getSMEFTCoeffEW("CHbox")  -0.252903 * getSMEFTCoeffEW("CHD")  +0.000491 * getSMEFTCoeffEW("CHB")   
    //        +0.000842 * getSMEFTCoeffEW("CHW")  -0.262264 * getSMEFTCoeffEW("CHWB")  -0.010873 * getSMEFTCoeffEW("CuWR",2, 2) +0.015368 * getSMEFTCoeffEW("CuBR",2, 2)  
    //        -0.13715 * getSMEFTCoeffEW("CHl1R",0, 0) +0.000816 * getSMEFTCoeffEW("CHl1R",1, 1) +0.000816 * getSMEFTCoeffEW("CHl1R",2, 2) -0.118334 * getSMEFTCoeffEW("CHl3R",0, 0)  
    //        +0.022957 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000045 * getSMEFTCoeffEW("CHl3R",2, 2) -0.222466 * getSMEFTCoeffEW("CHeR",0, 0) +0.000816 * getSMEFTCoeffEW("CHeR",1, 1)  
    //        +0.000816 * getSMEFTCoeffEW("CHeR",2, 2) -0.000816 * getSMEFTCoeffEW("CHq1R",0, 0) -0.000816 * getSMEFTCoeffEW("CHq1R",1, 1) +0.070151 * getSMEFTCoeffEW("CHq1R",2, 2)  
    //        +0.000134 * getSMEFTCoeffEW("CHq3R",0, 0) +0.000134 * getSMEFTCoeffEW("CHq3R",1, 1) -0.044091 * getSMEFTCoeffEW("CHq3R",2, 2) -0.001632 * getSMEFTCoeffEW("CHuR",0, 0)  
    //        -0.001632 * getSMEFTCoeffEW("CHuR",1, 1) -0.085923 * getSMEFTCoeffEW("CHuR",2, 2) +0.000816 * getSMEFTCoeffEW("CHdR",0, 0) +0.000816 * getSMEFTCoeffEW("CHdR",1, 1)  
    //        +0.000816 * getSMEFTCoeffEW("CHdR",2, 2) +0.000237 * getSMEFTCoeffEW("CllR",0, 0, 0, 0) +0.00047 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) +0.00047 * getSMEFTCoeffEW("CllR",0, 0, 2, 2)  
    //        -0.023145 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.000232 * getSMEFTCoeffEW("CllR",0, 2, 2, 0) -0.000235 * getSMEFTCoeffEW("Clq1R",0, 0, 0, 0) -0.000235 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1)  
    //        +0.010383 * getSMEFTCoeffEW("Clq1R",0, 0, 2, 2) -0.002448 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0) -0.002448 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) -0.013065 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2)  
    //        +0.000814 * getSMEFTCoeffEW("CeeR",0, 0, 0, 0) +0.000814 * getSMEFTCoeffEW("CeeR",0, 0, 1, 1) +0.000814 * getSMEFTCoeffEW("CeeR",0, 0, 2, 2) -0.000581 * getSMEFTCoeffEW("CeuR",0, 0, 0, 0)  
    //        -0.000581 * getSMEFTCoeffEW("CeuR",0, 0, 1, 1) -0.015087 * getSMEFTCoeffEW("CeuR",0, 0, 2, 2) +0.000291 * getSMEFTCoeffEW("CedR",0, 0, 0, 0) +0.000291 * getSMEFTCoeffEW("CedR",0, 0, 1, 1)  
    //        +0.000291 * getSMEFTCoeffEW("CedR",0, 0, 2, 2) +0.000525 * getSMEFTCoeffEW("CleR",0, 0, 0, 0) +0.000235 * getSMEFTCoeffEW("CleR",0, 0, 1, 1) +0.000235 * getSMEFTCoeffEW("CleR",0, 0, 2, 2)  
    //        +0.000291 * getSMEFTCoeffEW("CleR",1, 1, 0, 0) +0.000291 * getSMEFTCoeffEW("CleR",2, 2, 0, 0) -0.00047 * getSMEFTCoeffEW("CluR",0, 0, 0, 0) -0.00047 * getSMEFTCoeffEW("CluR",0, 0, 1, 1)  
    //        -0.012191 * getSMEFTCoeffEW("CluR",0, 0, 2, 2) +0.000235 * getSMEFTCoeffEW("CldR",0, 0, 0, 0) +0.000235 * getSMEFTCoeffEW("CldR",0, 0, 1, 1) +0.000235 * getSMEFTCoeffEW("CldR",0, 0, 2, 2)  
    //        -0.000291 * getSMEFTCoeffEW("CqeR",0, 0, 0, 0) -0.000291 * getSMEFTCoeffEW("CqeR",1, 1, 0, 0) +0.012849 * getSMEFTCoeffEW("CqeR",2, 2, 0, 0) ) * v2; 
    //    break;
    //} else if (f.is("MUON")) {
    //    case 3:
    //        deltaNLO = (+0.00572 * getSMEFTCoeffEW("CW")  +0.001427 * getSMEFTCoeffEW("CHbox")  -0.252903 * getSMEFTCoeffEW("CHD")  +0.000491 * getSMEFTCoeffEW("CHB")   
    //        +0.000842 * getSMEFTCoeffEW("CHW")  -0.262264 * getSMEFTCoeffEW("CHWB")  -0.010873 * getSMEFTCoeffEW("CuWR",2, 2) +0.015368 * getSMEFTCoeffEW("CuBR",2, 2)  
    //        -0.068167 * getSMEFTCoeffEW("CHl1R",0, 0) -0.068167 * getSMEFTCoeffEW("CHl1R",1, 1) +0.000816 * getSMEFTCoeffEW("CHl1R",2, 2) -0.047688 * getSMEFTCoeffEW("CHl3R",0, 0)  
    //        -0.047688 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000045 * getSMEFTCoeffEW("CHl3R",2, 2) -0.110825 * getSMEFTCoeffEW("CHeR",0, 0) -0.110825 * getSMEFTCoeffEW("CHeR",1, 1)  
    //        +0.000816 * getSMEFTCoeffEW("CHeR",2, 2) -0.000816 * getSMEFTCoeffEW("CHq1R",0, 0) -0.000816 * getSMEFTCoeffEW("CHq1R",1, 1) +0.070151 * getSMEFTCoeffEW("CHq1R",2, 2)  
    //        +0.000134 * getSMEFTCoeffEW("CHq3R",0, 0) +0.000134 * getSMEFTCoeffEW("CHq3R",1, 1) -0.044091 * getSMEFTCoeffEW("CHq3R",2, 2) -0.001632 * getSMEFTCoeffEW("CHuR",0, 0)  
    //        -0.001632 * getSMEFTCoeffEW("CHuR",1, 1) -0.085923 * getSMEFTCoeffEW("CHuR",2, 2) +0.000816 * getSMEFTCoeffEW("CHdR",0, 0) +0.000816 * getSMEFTCoeffEW("CHdR",1, 1)  
    //        +0.000816 * getSMEFTCoeffEW("CHdR",2, 2) +0.000119 * getSMEFTCoeffEW("CllR",0, 0, 0, 0) +0.00047 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) +0.000235 * getSMEFTCoeffEW("CllR",0, 0, 2, 2)  
    //        -0.023145 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.000116 * getSMEFTCoeffEW("CllR",0, 2, 2, 0) +0.000119 * getSMEFTCoeffEW("CllR",1, 1, 1, 1) +0.000235 * getSMEFTCoeffEW("CllR",1, 1, 2, 2)  
    //        -0.000116 * getSMEFTCoeffEW("CllR",1, 2, 2, 1) -0.000117 * getSMEFTCoeffEW("Clq1R",0, 0, 0, 0) -0.000117 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1) +0.005191 * getSMEFTCoeffEW("Clq1R",0, 0, 2, 2)  
    //        -0.000117 * getSMEFTCoeffEW("Clq1R",1, 1, 0, 0) -0.000117 * getSMEFTCoeffEW("Clq1R",1, 1, 1, 1) +0.005191 * getSMEFTCoeffEW("Clq1R",1, 1, 2, 2) -0.001224 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0)  
    //        -0.001224 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) -0.006533 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) -0.001224 * getSMEFTCoeffEW("Clq3R",1, 1, 0, 0) -0.001224 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1)  
    //        -0.006533 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) +0.000407 * getSMEFTCoeffEW("CeeR",0, 0, 0, 0) +0.000814 * getSMEFTCoeffEW("CeeR",0, 0, 1, 1) +0.000407 * getSMEFTCoeffEW("CeeR",0, 0, 2, 2)  
    //        +0.000407 * getSMEFTCoeffEW("CeeR",1, 1, 1, 1) +0.000407 * getSMEFTCoeffEW("CeeR",1, 1, 2, 2) -0.000291 * getSMEFTCoeffEW("CeuR",0, 0, 0, 0) -0.000291 * getSMEFTCoeffEW("CeuR",0, 0, 1, 1)  
    //        -0.007543 * getSMEFTCoeffEW("CeuR",0, 0, 2, 2) -0.000291 * getSMEFTCoeffEW("CeuR",1, 1, 0, 0) -0.000291 * getSMEFTCoeffEW("CeuR",1, 1, 1, 1) -0.007543 * getSMEFTCoeffEW("CeuR",1, 1, 2, 2)  
    //        +0.000145 * getSMEFTCoeffEW("CedR",0, 0, 0, 0) +0.000145 * getSMEFTCoeffEW("CedR",0, 0, 1, 1) +0.000145 * getSMEFTCoeffEW("CedR",0, 0, 2, 2) +0.000145 * getSMEFTCoeffEW("CedR",1, 1, 0, 0)  
    //        +0.000145 * getSMEFTCoeffEW("CedR",1, 1, 1, 1) +0.000145 * getSMEFTCoeffEW("CedR",1, 1, 2, 2) +0.000263 * getSMEFTCoeffEW("CleR",0, 0, 0, 0) +0.000263 * getSMEFTCoeffEW("CleR",0, 0, 1, 1)  
    //        +0.000117 * getSMEFTCoeffEW("CleR",0, 0, 2, 2) +0.000263 * getSMEFTCoeffEW("CleR",1, 1, 0, 0) +0.000263 * getSMEFTCoeffEW("CleR",1, 1, 1, 1) +0.000117 * getSMEFTCoeffEW("CleR",1, 1, 2, 2)  
    //        +0.000145 * getSMEFTCoeffEW("CleR",2, 2, 0, 0) +0.000145 * getSMEFTCoeffEW("CleR",2, 2, 1, 1) -0.000235 * getSMEFTCoeffEW("CluR",0, 0, 0, 0) -0.000235 * getSMEFTCoeffEW("CluR",0, 0, 1, 1)  
    //        -0.006095 * getSMEFTCoeffEW("CluR",0, 0, 2, 2) -0.000235 * getSMEFTCoeffEW("CluR",1, 1, 0, 0) -0.000235 * getSMEFTCoeffEW("CluR",1, 1, 1, 1) -0.006095 * getSMEFTCoeffEW("CluR",1, 1, 2, 2)  
    //        +0.000117 * getSMEFTCoeffEW("CldR",0, 0, 0, 0) +0.000117 * getSMEFTCoeffEW("CldR",0, 0, 1, 1) +0.000117 * getSMEFTCoeffEW("CldR",0, 0, 2, 2) +0.000117 * getSMEFTCoeffEW("CldR",1, 1, 0, 0)  
    //        +0.000117 * getSMEFTCoeffEW("CldR",1, 1, 1, 1) +0.000117 * getSMEFTCoeffEW("CldR",1, 1, 2, 2) -0.000145 * getSMEFTCoeffEW("CqeR",0, 0, 0, 0) -0.000145 * getSMEFTCoeffEW("CqeR",0, 0, 1, 1)  
    //        -0.000145 * getSMEFTCoeffEW("CqeR",1, 1, 0, 0) -0.000145 * getSMEFTCoeffEW("CqeR",1, 1, 1, 1) +0.006425 * getSMEFTCoeffEW("CqeR",2, 2, 0, 0) +0.006425 * getSMEFTCoeffEW("CqeR",2, 2, 1, 1) ) * v2; 
    //    break;
    ////} else if (f.is("TAU")) {
    //    case 5:
    //        deltaNLO = (+0.00572 * getSMEFTCoeffEW("CW")  +0.001427 * getSMEFTCoeffEW("CHbox")  -0.252903 * getSMEFTCoeffEW("CHD")  +0.000491 * getSMEFTCoeffEW("CHB")   
    //        +0.000842 * getSMEFTCoeffEW("CHW")  -0.262264 * getSMEFTCoeffEW("CHWB")  -0.010873 * getSMEFTCoeffEW("CuWR",2, 2) +0.015368 * getSMEFTCoeffEW("CuBR",2, 2)  
    //        -0.068167 * getSMEFTCoeffEW("CHl1R",0, 0) +0.000816 * getSMEFTCoeffEW("CHl1R",1, 1) -0.068167 * getSMEFTCoeffEW("CHl1R",2, 2) -0.047688 * getSMEFTCoeffEW("CHl3R",0, 0)  
    //        +0.022957 * getSMEFTCoeffEW("CHl3R",1, 1) -0.070601 * getSMEFTCoeffEW("CHl3R",2, 2) -0.110825 * getSMEFTCoeffEW("CHeR",0, 0) +0.000816 * getSMEFTCoeffEW("CHeR",1, 1)  
    //        -0.110825 * getSMEFTCoeffEW("CHeR",2, 2) -0.000816 * getSMEFTCoeffEW("CHq1R",0, 0) -0.000816 * getSMEFTCoeffEW("CHq1R",1, 1) +0.070151 * getSMEFTCoeffEW("CHq1R",2, 2)  
    //        +0.000134 * getSMEFTCoeffEW("CHq3R",0, 0) +0.000134 * getSMEFTCoeffEW("CHq3R",1, 1) -0.044091 * getSMEFTCoeffEW("CHq3R",2, 2) -0.001632 * getSMEFTCoeffEW("CHuR",0, 0)  
    //        -0.001632 * getSMEFTCoeffEW("CHuR",1, 1) -0.085923 * getSMEFTCoeffEW("CHuR",2, 2) +0.000816 * getSMEFTCoeffEW("CHdR",0, 0) +0.000816 * getSMEFTCoeffEW("CHdR",1, 1)  
    //        +0.000816 * getSMEFTCoeffEW("CHdR",2, 2) +0.000119 * getSMEFTCoeffEW("CllR",0, 0, 0, 0) +0.000235 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) +0.00047 * getSMEFTCoeffEW("CllR",0, 0, 2, 2)  
    //        -0.023029 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.000232 * getSMEFTCoeffEW("CllR",0, 2, 2, 0) +0.000235 * getSMEFTCoeffEW("CllR",1, 1, 2, 2) -0.000116 * getSMEFTCoeffEW("CllR",1, 2, 2, 1)  
    //        +0.000119 * getSMEFTCoeffEW("CllR",2, 2, 2, 2) -0.000117 * getSMEFTCoeffEW("Clq1R",0, 0, 0, 0) -0.000117 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1) +0.005191 * getSMEFTCoeffEW("Clq1R",0, 0, 2, 2)  
    //        -0.000117 * getSMEFTCoeffEW("Clq1R",2, 2, 0, 0) -0.000117 * getSMEFTCoeffEW("Clq1R",2, 2, 1, 1) +0.005191 * getSMEFTCoeffEW("Clq1R",2, 2, 2, 2) -0.001224 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0)  
    //        -0.001224 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) -0.006533 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) -0.001224 * getSMEFTCoeffEW("Clq3R",2, 2, 0, 0) -0.001224 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1)  
    //        -0.006533 * getSMEFTCoeffEW("Clq3R",2, 2, 2, 2) +0.000407 * getSMEFTCoeffEW("CeeR",0, 0, 0, 0) +0.000407 * getSMEFTCoeffEW("CeeR",0, 0, 1, 1) +0.000814 * getSMEFTCoeffEW("CeeR",0, 0, 2, 2)  
    //        +0.000407 * getSMEFTCoeffEW("CeeR",1, 1, 2, 2) +0.000407 * getSMEFTCoeffEW("CeeR",2, 2, 2, 2) -0.000291 * getSMEFTCoeffEW("CeuR",0, 0, 0, 0) -0.000291 * getSMEFTCoeffEW("CeuR",0, 0, 1, 1)  
    //        -0.007543 * getSMEFTCoeffEW("CeuR",0, 0, 2, 2) -0.000291 * getSMEFTCoeffEW("CeuR",2, 2, 0, 0) -0.000291 * getSMEFTCoeffEW("CeuR",2, 2, 1, 1) -0.007543 * getSMEFTCoeffEW("CeuR",2, 2, 2, 2)  
    //        +0.000145 * getSMEFTCoeffEW("CedR",0, 0, 0, 0) +0.000145 * getSMEFTCoeffEW("CedR",0, 0, 1, 1) +0.000145 * getSMEFTCoeffEW("CedR",0, 0, 2, 2) +0.000145 * getSMEFTCoeffEW("CedR",2, 2, 0, 0)  
    //        +0.000145 * getSMEFTCoeffEW("CedR",2, 2, 1, 1) +0.000145 * getSMEFTCoeffEW("CedR",2, 2, 2, 2) +0.000263 * getSMEFTCoeffEW("CleR",0, 0, 0, 0) +0.000117 * getSMEFTCoeffEW("CleR",0, 0, 1, 1)  
    //        +0.000263 * getSMEFTCoeffEW("CleR",0, 0, 2, 2) +0.000145 * getSMEFTCoeffEW("CleR",1, 1, 0, 0) +0.000145 * getSMEFTCoeffEW("CleR",1, 1, 2, 2) +0.000263 * getSMEFTCoeffEW("CleR",2, 2, 0, 0)  
    //        +0.000117 * getSMEFTCoeffEW("CleR",2, 2, 1, 1) +0.000263 * getSMEFTCoeffEW("CleR",2, 2, 2, 2) -0.000235 * getSMEFTCoeffEW("CluR",0, 0, 0, 0) -0.000235 * getSMEFTCoeffEW("CluR",0, 0, 1, 1)  
    //        -0.006095 * getSMEFTCoeffEW("CluR",0, 0, 2, 2) -0.000235 * getSMEFTCoeffEW("CluR",2, 2, 0, 0) -0.000235 * getSMEFTCoeffEW("CluR",2, 2, 1, 1) -0.006095 * getSMEFTCoeffEW("CluR",2, 2, 2, 2)  
    //        +0.000117 * getSMEFTCoeffEW("CldR",0, 0, 0, 0) +0.000117 * getSMEFTCoeffEW("CldR",0, 0, 1, 1) +0.000117 * getSMEFTCoeffEW("CldR",0, 0, 2, 2) +0.000117 * getSMEFTCoeffEW("CldR",2, 2, 0, 0)  
    //        +0.000117 * getSMEFTCoeffEW("CldR",2, 2, 1, 1) +0.000117 * getSMEFTCoeffEW("CldR",2, 2, 2, 2) -0.000145 * getSMEFTCoeffEW("CqeR",0, 0, 0, 0) -0.000145 * getSMEFTCoeffEW("CqeR",0, 0, 2, 2)  
    //        -0.000145 * getSMEFTCoeffEW("CqeR",1, 1, 0, 0) -0.000145 * getSMEFTCoeffEW("CqeR",1, 1, 2, 2) +0.006425 * getSMEFTCoeffEW("CqeR",2, 2, 0, 0) +0.006425 * getSMEFTCoeffEW("CqeR",2, 2, 2, 2) ) * v2; 
    //    break;
    //} else if (f.is("STRANGE")) {
    //    case 9:
    //        deltaNLO = (+0.013035 * getSMEFTCoeffEW("CW")  +0.003252 * getSMEFTCoeffEW("CHbox")  +0.146227 * getSMEFTCoeffEW("CHD")  +0.001119 * getSMEFTCoeffEW("CHB")   
    //        +0.00192 * getSMEFTCoeffEW("CHW")  +0.177551 * getSMEFTCoeffEW("CHWB")  -0.024778 * getSMEFTCoeffEW("CuWR",2, 2) +0.035022 * getSMEFTCoeffEW("CuBR",2, 2)  
    //        +0.108046 * getSMEFTCoeffEW("CHl1R",0, 0) +0.001859 * getSMEFTCoeffEW("CHl1R",1, 1) +0.001859 * getSMEFTCoeffEW("CHl1R",2, 2) +0.151035 * getSMEFTCoeffEW("CHl3R",0, 0)  
    //        +0.052297 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000102 * getSMEFTCoeffEW("CHl3R",2, 2) +0.015591 * getSMEFTCoeffEW("CHeR",0, 0) +0.001859 * getSMEFTCoeffEW("CHeR",1, 1)  
    //        +0.001859 * getSMEFTCoeffEW("CHeR",2, 2) -0.001859 * getSMEFTCoeffEW("CHq1R",0, 0) -0.006578 * getSMEFTCoeffEW("CHq1R",1, 1) +0.159871 * getSMEFTCoeffEW("CHq1R",2, 2)  
    //        +0.000305 * getSMEFTCoeffEW("CHq3R",0, 0) -0.004524 * getSMEFTCoeffEW("CHq3R",1, 1) -0.10048 * getSMEFTCoeffEW("CHq3R",2, 2) -0.003719 * getSMEFTCoeffEW("CHuR",0, 0)  
    //        -0.003719 * getSMEFTCoeffEW("CHuR",1, 1) -0.195812 * getSMEFTCoeffEW("CHuR",2, 2) +0.001859 * getSMEFTCoeffEW("CHdR",0, 0) -0.031424 * getSMEFTCoeffEW("CHdR",1, 1)  
    //        +0.001859 * getSMEFTCoeffEW("CHdR",2, 2) +0.000531 * getSMEFTCoeffEW("CllR",0, 0, 0, 0) +0.001052 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) +0.001052 * getSMEFTCoeffEW("CllR",0, 0, 2, 2)  
    //        -0.052716 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.000521 * getSMEFTCoeffEW("CllR",0, 2, 2, 0) -0.000018 * getSMEFTCoeffEW("Cqq1R",0, 0, 1, 1) -0.000014 * getSMEFTCoeffEW("Cqq1R",0, 1, 1, 0)  
    //        -0.000032 * getSMEFTCoeffEW("Cqq1R",1, 1, 1, 1) +0.000815 * getSMEFTCoeffEW("Cqq1R",1, 1, 2, 2) -0.000014 * getSMEFTCoeffEW("Cqq1R",1, 2, 2, 1) -0.000192 * getSMEFTCoeffEW("Cqq3R",0, 0, 1, 1)  
    //        +0.000009 * getSMEFTCoeffEW("Cqq3R",0, 1, 1, 0) -0.000183 * getSMEFTCoeffEW("Cqq3R",1, 1, 1, 1) -0.001025 * getSMEFTCoeffEW("Cqq3R",1, 1, 2, 2) +0.001097 * getSMEFTCoeffEW("Cqq3R",1, 2, 2, 1)  
    //        -0.000526 * getSMEFTCoeffEW("Clq1R",0, 0, 0, 0) -0.000517 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1) +0.023254 * getSMEFTCoeffEW("Clq1R",0, 0, 2, 2) +0.000009 * getSMEFTCoeffEW("Clq1R",1, 1, 1, 1)  
    //        +0.000009 * getSMEFTCoeffEW("Clq1R",2, 2, 1, 1) -0.005482 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0) -0.005514 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) -0.029262 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2)  
    //        -0.000032 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1) -0.000032 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1) +0.001822 * getSMEFTCoeffEW("CeeR",0, 0, 0, 0) +0.001822 * getSMEFTCoeffEW("CeeR",0, 0, 1, 1)  
    //        +0.001822 * getSMEFTCoeffEW("CeeR",0, 0, 2, 2) +0.000105 * getSMEFTCoeffEW("CddR",0, 0, 1, 1) +0.000014 * getSMEFTCoeffEW("CddR",0, 1, 1, 0) +0.000119 * getSMEFTCoeffEW("CddR",1, 1, 1, 1)  
    //        +0.000105 * getSMEFTCoeffEW("CddR",1, 1, 2, 2) +0.000014 * getSMEFTCoeffEW("CddR",1, 2, 2, 1) -0.001302 * getSMEFTCoeffEW("CeuR",0, 0, 0, 0) -0.001302 * getSMEFTCoeffEW("CeuR",0, 0, 1, 1)  
    //        -0.033789 * getSMEFTCoeffEW("CeuR",0, 0, 2, 2) +0.000651 * getSMEFTCoeffEW("CedR",0, 0, 0, 0) +0.000703 * getSMEFTCoeffEW("CedR",0, 0, 1, 1) +0.000651 * getSMEFTCoeffEW("CedR",0, 0, 2, 2)  
    //        +0.000053 * getSMEFTCoeffEW("CedR",1, 1, 1, 1) +0.000053 * getSMEFTCoeffEW("CedR",2, 2, 1, 1) -0.000105 * getSMEFTCoeffEW("Cud1R",0, 0, 1, 1) -0.000105 * getSMEFTCoeffEW("Cud1R",1, 1, 1, 1)  
    //        -0.002732 * getSMEFTCoeffEW("Cud1R",2, 2, 1, 1) +0.001177 * getSMEFTCoeffEW("CleR",0, 0, 0, 0) +0.000526 * getSMEFTCoeffEW("CleR",0, 0, 1, 1) +0.000526 * getSMEFTCoeffEW("CleR",0, 0, 2, 2)  
    //        +0.000651 * getSMEFTCoeffEW("CleR",1, 1, 0, 0) +0.000651 * getSMEFTCoeffEW("CleR",2, 2, 0, 0) -0.001052 * getSMEFTCoeffEW("CluR",0, 0, 0, 0) -0.001052 * getSMEFTCoeffEW("CluR",0, 0, 1, 1)  
    //        -0.027303 * getSMEFTCoeffEW("CluR",0, 0, 2, 2) +0.000526 * getSMEFTCoeffEW("CldR",0, 0, 0, 0) +0.000578 * getSMEFTCoeffEW("CldR",0, 0, 1, 1) +0.000526 * getSMEFTCoeffEW("CldR",0, 0, 2, 2)  
    //        +0.000053 * getSMEFTCoeffEW("CldR",1, 1, 1, 1) +0.000053 * getSMEFTCoeffEW("CldR",2, 2, 1, 1) -0.000651 * getSMEFTCoeffEW("CqeR",0, 0, 0, 0) -0.000642 * getSMEFTCoeffEW("CqeR",1, 1, 0, 0)  
    //        +0.000009 * getSMEFTCoeffEW("CqeR",1, 1, 1, 1) +0.000009 * getSMEFTCoeffEW("CqeR",1, 1, 2, 2) +0.028779 * getSMEFTCoeffEW("CqeR",2, 2, 0, 0) -0.000018 * getSMEFTCoeffEW("Cqu1R",1, 1, 0, 0)  
    //        -0.000018 * getSMEFTCoeffEW("Cqu1R",1, 1, 1, 1) -0.000478 * getSMEFTCoeffEW("Cqu1R",1, 1, 2, 2) -0.000053 * getSMEFTCoeffEW("Cqd1R",0, 0, 1, 1) +0.000009 * getSMEFTCoeffEW("Cqd1R",1, 1, 0, 0)  
    //        -0.000043 * getSMEFTCoeffEW("Cqd1R",1, 1, 1, 1) +0.000009 * getSMEFTCoeffEW("Cqd1R",1, 1, 2, 2) +0.002327 * getSMEFTCoeffEW("Cqd1R",2, 2, 1, 1) ) * v2; 
    //    break;
    ////} else if (f.is("CHARM")) {
    //    case 8:
    //        deltaNLO = (+0.010682 * getSMEFTCoeffEW("CW")  +0.002665 * getSMEFTCoeffEW("CHbox")  +0.007558 * getSMEFTCoeffEW("CHD")  +0.000917 * getSMEFTCoeffEW("CHB")   
    //        +0.001573 * getSMEFTCoeffEW("CHW")  +0.025056 * getSMEFTCoeffEW("CHWB")  -0.020306 * getSMEFTCoeffEW("CuWR",2, 2) +0.028701 * getSMEFTCoeffEW("CuBR",2, 2)  
    //        +0.045525 * getSMEFTCoeffEW("CHl1R",0, 0) +0.001524 * getSMEFTCoeffEW("CHl1R",1, 1) +0.001524 * getSMEFTCoeffEW("CHl1R",2, 2) +0.081322 * getSMEFTCoeffEW("CHl3R",0, 0)  
    //        +0.042823 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000083 * getSMEFTCoeffEW("CHl3R",2, 2) -0.030951 * getSMEFTCoeffEW("CHeR",0, 0) +0.001524 * getSMEFTCoeffEW("CHeR",1, 1)  
    //        +0.001524 * getSMEFTCoeffEW("CHeR",2, 2) -0.001524 * getSMEFTCoeffEW("CHq1R",0, 0) +0.023905 * getSMEFTCoeffEW("CHq1R",1, 1) +0.131016 * getSMEFTCoeffEW("CHq1R",2, 2)  
    //        +0.00025 * getSMEFTCoeffEW("CHq3R",0, 0) -0.025833 * getSMEFTCoeffEW("CHq3R",1, 1) -0.082345 * getSMEFTCoeffEW("CHq3R",2, 2) -0.003048 * getSMEFTCoeffEW("CHuR",0, 0)  
    //        +0.073836 * getSMEFTCoeffEW("CHuR",1, 1) -0.16047 * getSMEFTCoeffEW("CHuR",2, 2) +0.001524 * getSMEFTCoeffEW("CHdR",0, 0) +0.001524 * getSMEFTCoeffEW("CHdR",1, 1)  
    //        +0.001524 * getSMEFTCoeffEW("CHdR",2, 2) +0.000392 * getSMEFTCoeffEW("CllR",0, 0, 0, 0) +0.000777 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) +0.000777 * getSMEFTCoeffEW("CllR",0, 0, 2, 2)  
    //        -0.043124 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.000385 * getSMEFTCoeffEW("CllR",0, 2, 2, 0) +0.0001 * getSMEFTCoeffEW("Cqq1R",0, 0, 1, 1) -0.000063 * getSMEFTCoeffEW("Cqq1R",0, 1, 1, 0)  
    //        +0.000037 * getSMEFTCoeffEW("Cqq1R",1, 1, 1, 1) -0.004426 * getSMEFTCoeffEW("Cqq1R",1, 1, 2, 2) -0.003019 * getSMEFTCoeffEW("Cqq1R",1, 2, 2, 1) -0.001044 * getSMEFTCoeffEW("Cqq3R",0, 0, 1, 1)  
    //        +0.00009 * getSMEFTCoeffEW("Cqq3R",0, 1, 1, 0) -0.000954 * getSMEFTCoeffEW("Cqq3R",1, 1, 1, 1) -0.00557 * getSMEFTCoeffEW("Cqq3R",1, 1, 2, 2) -0.002867 * getSMEFTCoeffEW("Cqq3R",1, 2, 2, 1)  
    //        -0.000388 * getSMEFTCoeffEW("Clq1R",0, 0, 0, 0) -0.000438 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1) +0.017178 * getSMEFTCoeffEW("Clq1R",0, 0, 2, 2) -0.00005 * getSMEFTCoeffEW("Clq1R",1, 1, 1, 1)  
    //        -0.00005 * getSMEFTCoeffEW("Clq1R",2, 2, 1, 1) -0.00405 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0) -0.004224 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) -0.021616 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2)  
    //        -0.000174 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1) -0.000174 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1) +0.001346 * getSMEFTCoeffEW("CeeR",0, 0, 0, 0) +0.001346 * getSMEFTCoeffEW("CeeR",0, 0, 1, 1)  
    //        +0.001346 * getSMEFTCoeffEW("CeeR",0, 0, 2, 2) +0.000472 * getSMEFTCoeffEW("CuuR",0, 0, 1, 1) +0.000063 * getSMEFTCoeffEW("CuuR",0, 1, 1, 0) +0.000535 * getSMEFTCoeffEW("CuuR",1, 1, 1, 1)  
    //        +0.012246 * getSMEFTCoeffEW("CuuR",1, 1, 2, 2) +0.007399 * getSMEFTCoeffEW("CuuR",1, 2, 2, 1) -0.000961 * getSMEFTCoeffEW("CeuR",0, 0, 0, 0) -0.001079 * getSMEFTCoeffEW("CeuR",0, 0, 1, 1)  
    //        -0.02496 * getSMEFTCoeffEW("CeuR",0, 0, 2, 2) -0.000118 * getSMEFTCoeffEW("CeuR",1, 1, 1, 1) -0.000118 * getSMEFTCoeffEW("CeuR",2, 2, 1, 1) +0.000481 * getSMEFTCoeffEW("CedR",0, 0, 0, 0)  
    //        +0.000481 * getSMEFTCoeffEW("CedR",0, 0, 1, 1) +0.000481 * getSMEFTCoeffEW("CedR",0, 0, 2, 2) -0.000118 * getSMEFTCoeffEW("Cud1R",1, 1, 0, 0) -0.000118 * getSMEFTCoeffEW("Cud1R",1, 1, 1, 1)  
    //        -0.000118 * getSMEFTCoeffEW("Cud1R",1, 1, 2, 2) +0.000869 * getSMEFTCoeffEW("CleR",0, 0, 0, 0) +0.000388 * getSMEFTCoeffEW("CleR",0, 0, 1, 1) +0.000388 * getSMEFTCoeffEW("CleR",0, 0, 2, 2)  
    //        +0.000481 * getSMEFTCoeffEW("CleR",1, 1, 0, 0) +0.000481 * getSMEFTCoeffEW("CleR",2, 2, 0, 0) -0.000777 * getSMEFTCoeffEW("CluR",0, 0, 0, 0) -0.000895 * getSMEFTCoeffEW("CluR",0, 0, 1, 1)  
    //        -0.020169 * getSMEFTCoeffEW("CluR",0, 0, 2, 2) -0.000118 * getSMEFTCoeffEW("CluR",1, 1, 1, 1) -0.000118 * getSMEFTCoeffEW("CluR",2, 2, 1, 1) +0.000388 * getSMEFTCoeffEW("CldR",0, 0, 0, 0)  
    //        +0.000388 * getSMEFTCoeffEW("CldR",0, 0, 1, 1) +0.000388 * getSMEFTCoeffEW("CldR",0, 0, 2, 2) -0.000481 * getSMEFTCoeffEW("CqeR",0, 0, 0, 0) -0.000531 * getSMEFTCoeffEW("CqeR",1, 1, 0, 0)  
    //        -0.00005 * getSMEFTCoeffEW("CqeR",1, 1, 1, 1) -0.00005 * getSMEFTCoeffEW("CqeR",1, 1, 2, 2) +0.021258 * getSMEFTCoeffEW("CqeR",2, 2, 0, 0) +0.000118 * getSMEFTCoeffEW("Cqu1R",0, 0, 1, 1)  
    //        +0.0001 * getSMEFTCoeffEW("Cqu1R",1, 1, 0, 0) +0.000218 * getSMEFTCoeffEW("Cqu1R",1, 1, 1, 1) +0.002599 * getSMEFTCoeffEW("Cqu1R",1, 1, 2, 2) -0.005215 * getSMEFTCoeffEW("Cqu1R",2, 2, 1, 1)  
    //        -0.00005 * getSMEFTCoeffEW("Cqd1R",1, 1, 0, 0) -0.00005 * getSMEFTCoeffEW("Cqd1R",1, 1, 1, 1) -0.00005 * getSMEFTCoeffEW("Cqd1R",1, 1, 2, 2) ) * v2; 
    //    break;
    //} else if (f.is("BOTTOM")) {
    //    case 11:
    //        deltaNLO = (+0.012979 * getSMEFTCoeffEW("CW")  +0.003252 * getSMEFTCoeffEW("CHbox")  +0.144659 * getSMEFTCoeffEW("CHD")  +0.001119 * getSMEFTCoeffEW("CHB")   
    //        +0.00192 * getSMEFTCoeffEW("CHW")  +0.175886 * getSMEFTCoeffEW("CHWB")  -0.025098 * getSMEFTCoeffEW("CuWR",2, 2) +0.034979 * getSMEFTCoeffEW("CuBR",2, 2)  
    //        +0.106801 * getSMEFTCoeffEW("CHl1R",0, 0) +0.001859 * getSMEFTCoeffEW("CHl1R",1, 1) +0.001859 * getSMEFTCoeffEW("CHl1R",2, 2) +0.149942 * getSMEFTCoeffEW("CHl3R",0, 0)  
    //        +0.052448 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000102 * getSMEFTCoeffEW("CHl3R",2, 2) +0.014051 * getSMEFTCoeffEW("CHeR",0, 0) +0.001859 * getSMEFTCoeffEW("CHeR",1, 1)  
    //        +0.001859 * getSMEFTCoeffEW("CHeR",2, 2) -0.001859 * getSMEFTCoeffEW("CHq1R",0, 0) -0.001859 * getSMEFTCoeffEW("CHq1R",1, 1) +0.155726 * getSMEFTCoeffEW("CHq1R",2, 2)  
    //        +0.000305 * getSMEFTCoeffEW("CHq3R",0, 0) +0.000305 * getSMEFTCoeffEW("CHq3R",1, 1) -0.105403 * getSMEFTCoeffEW("CHq3R",2, 2) -0.003719 * getSMEFTCoeffEW("CHuR",0, 0)  
    //        -0.003719 * getSMEFTCoeffEW("CHuR",1, 1) -0.195894 * getSMEFTCoeffEW("CHuR",2, 2) +0.001859 * getSMEFTCoeffEW("CHdR",0, 0) +0.001859 * getSMEFTCoeffEW("CHdR",1, 1)  
    //        -0.029514 * getSMEFTCoeffEW("CHdR",2, 2) +0.000531 * getSMEFTCoeffEW("CllR",0, 0, 0, 0) +0.001052 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) +0.001052 * getSMEFTCoeffEW("CllR",0, 0, 2, 2)  
    //        -0.052867 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.000521 * getSMEFTCoeffEW("CllR",0, 2, 2, 0) -0.000018 * getSMEFTCoeffEW("Cqq1R",0, 0, 2, 2) -0.000014 * getSMEFTCoeffEW("Cqq1R",0, 2, 2, 0)  
    //        -0.000018 * getSMEFTCoeffEW("Cqq1R",1, 1, 2, 2) -0.000014 * getSMEFTCoeffEW("Cqq1R",1, 2, 2, 1) +0.000801 * getSMEFTCoeffEW("Cqq1R",2, 2, 2, 2) -0.000192 * getSMEFTCoeffEW("Cqq3R",0, 0, 2, 2)  
    //        +0.000009 * getSMEFTCoeffEW("Cqq3R",0, 2, 2, 0) -0.000192 * getSMEFTCoeffEW("Cqq3R",1, 1, 2, 2) +0.000009 * getSMEFTCoeffEW("Cqq3R",1, 2, 2, 1) +0.000072 * getSMEFTCoeffEW("Cqq3R",2, 2, 2, 2)  
    //        -0.000526 * getSMEFTCoeffEW("Clq1R",0, 0, 0, 0) -0.000526 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1) +0.023264 * getSMEFTCoeffEW("Clq1R",0, 0, 2, 2) +0.000009 * getSMEFTCoeffEW("Clq1R",1, 1, 2, 2)  
    //        +0.000009 * getSMEFTCoeffEW("Clq1R",2, 2, 2, 2) -0.005482 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0) -0.005482 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) -0.029294 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2)  
    //        -0.000032 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) -0.000032 * getSMEFTCoeffEW("Clq3R",2, 2, 2, 2) +0.001822 * getSMEFTCoeffEW("CeeR",0, 0, 0, 0) +0.001822 * getSMEFTCoeffEW("CeeR",0, 0, 1, 1)  
    //        +0.001822 * getSMEFTCoeffEW("CeeR",0, 0, 2, 2) +0.000105 * getSMEFTCoeffEW("CddR",0, 0, 2, 2) +0.000014 * getSMEFTCoeffEW("CddR",0, 2, 2, 0) +0.000105 * getSMEFTCoeffEW("CddR",1, 1, 2, 2)  
    //        +0.000014 * getSMEFTCoeffEW("CddR",1, 2, 2, 1) +0.000119 * getSMEFTCoeffEW("CddR",2, 2, 2, 2) -0.001302 * getSMEFTCoeffEW("CeuR",0, 0, 0, 0) -0.001302 * getSMEFTCoeffEW("CeuR",0, 0, 1, 1)  
    //        -0.033789 * getSMEFTCoeffEW("CeuR",0, 0, 2, 2) +0.000651 * getSMEFTCoeffEW("CedR",0, 0, 0, 0) +0.000651 * getSMEFTCoeffEW("CedR",0, 0, 1, 1) +0.000703 * getSMEFTCoeffEW("CedR",0, 0, 2, 2)  
    //        +0.000053 * getSMEFTCoeffEW("CedR",1, 1, 2, 2) +0.000053 * getSMEFTCoeffEW("CedR",2, 2, 2, 2) -0.000105 * getSMEFTCoeffEW("Cud1R",0, 0, 2, 2) -0.000105 * getSMEFTCoeffEW("Cud1R",1, 1, 2, 2)  
    //        -0.002732 * getSMEFTCoeffEW("Cud1R",2, 2, 2, 2) +0.001177 * getSMEFTCoeffEW("CleR",0, 0, 0, 0) +0.000526 * getSMEFTCoeffEW("CleR",0, 0, 1, 1) +0.000526 * getSMEFTCoeffEW("CleR",0, 0, 2, 2)  
    //        +0.000651 * getSMEFTCoeffEW("CleR",1, 1, 0, 0) +0.000651 * getSMEFTCoeffEW("CleR",2, 2, 0, 0) -0.001052 * getSMEFTCoeffEW("CluR",0, 0, 0, 0) -0.001052 * getSMEFTCoeffEW("CluR",0, 0, 1, 1)  
    //        -0.027303 * getSMEFTCoeffEW("CluR",0, 0, 2, 2) +0.000526 * getSMEFTCoeffEW("CldR",0, 0, 0, 0) +0.000526 * getSMEFTCoeffEW("CldR",0, 0, 1, 1) +0.000578 * getSMEFTCoeffEW("CldR",0, 0, 2, 2)  
    //        +0.000053 * getSMEFTCoeffEW("CldR",1, 1, 2, 2) +0.000053 * getSMEFTCoeffEW("CldR",2, 2, 2, 2) -0.000651 * getSMEFTCoeffEW("CqeR",0, 0, 0, 0) -0.000651 * getSMEFTCoeffEW("CqeR",1, 1, 0, 0)  
    //        +0.028788 * getSMEFTCoeffEW("CqeR",2, 2, 0, 0) +0.000009 * getSMEFTCoeffEW("CqeR",2, 2, 1, 1) +0.000009 * getSMEFTCoeffEW("CqeR",2, 2, 2, 2) -0.000018 * getSMEFTCoeffEW("Cqu1R",2, 2, 0, 0)  
    //        -0.000018 * getSMEFTCoeffEW("Cqu1R",2, 2, 1, 1) -0.000478 * getSMEFTCoeffEW("Cqu1R",2, 2, 2, 2) -0.000053 * getSMEFTCoeffEW("Cqd1R",0, 0, 2, 2) -0.000053 * getSMEFTCoeffEW("Cqd1R",1, 1, 2, 2)  
    //        +0.000009 * getSMEFTCoeffEW("Cqd1R",2, 2, 0, 0) +0.000009 * getSMEFTCoeffEW("Cqd1R",2, 2, 1, 1) +0.002336 * getSMEFTCoeffEW("Cqd1R",2, 2, 2, 2) ) * v2; 
    //    break;
    ////} else {
    //    default:
    //        deltaNLO = 0.;
    //}

    return dAFB; // + cNLOd6 * deltaNLO;
}

const double NPSMEFTd6General::AFB(const Particle f) const
{
    return (trueSM.AFB(f) + deltaAFB(f));
}


const double NPSMEFTd6General::deltaR0_f(const Particle f) const
{
    double dR0_f = 0., delGVl = 0., delGAl = 0., deltaGl = 0., Gl = 0.;
    bool nonZeroNP = false;
    
    int findex = f.getIndex();
    
    double deltaNLO;
    
    //if (f.is("LEPTON")) {
    if ( findex < 6 ) {
        delGVl = deltaGV_f(f);
        delGAl = deltaGA_f(f);
        if (delGVl != 0.0 || delGAl != 0.0) nonZeroNP = true;
    }

    double delGVq[6], delGAq[6];
    for (int q = 0; q < 6; ++q) {
        delGVq[q] = deltaGV_f(quarks[q]);
        delGAq[q] = deltaGA_f(quarks[q]);
        if (delGVq[q] != 0.0 || delGAq[q] != 0.0) nonZeroNP = true;
    }

    if (nonZeroNP) {
        double CF = 1.;
        //if (f.is("LEPTON")) {
        if ( findex < 6 ) {
            double gVl = trueSM.gV_f(f).real();
            double gAl = trueSM.gA_f(f).real();
            Gl = gVl * gVl + gAl*gAl;
            deltaGl = 2.0 * (gVl * delGVl + gAl * delGAl);
            CF = 3.;
        }
        double Gq[6], deltaGq[6];
        double gVq, gAq;
        double Gq_sum = 0.0, delGq_sum = 0.0;
        for (int q = 0; q < 6; ++q) {
            gVq = trueSM.gV_f(quarks[q]).real();
            gAq = trueSM.gA_f(quarks[q]).real();
            Gq[q] = gVq * gVq + gAq*gAq;
            deltaGq[q] = 2.0 * (gVq * delGVq[q] + gAq * delGAq[q]);

            Gq_sum += CF * Gq[q];
            delGq_sum += CF * deltaGq[q];
        }
        //if (f.is("LEPTON"))
        if ( findex < 6 )        
            if ( (findex == 0) || (findex == 2) || (findex == 4)  ) {
            //if ( f.is("NEUTRINO_1") || f.is("NEUTRINO_2") || f.is("NEUTRINO_3")  ) {
                dR0_f = deltaGl / Gq_sum - Gl * delGq_sum / Gq_sum / Gq_sum;                
            } else {
                dR0_f = delGq_sum / Gl - Gq_sum * deltaGl / Gl / Gl;
            }
        else
            dR0_f = deltaGq[f.getIndex() - 6] / Gq_sum
                - Gq[f.getIndex() - 6] * delGq_sum / Gq_sum / Gq_sum;
    }

    // Finite NLO corrections: not available for u, d and s   
    switch(findex){
    //if (f.is("ELECTRON")) {
        case 1:
            deltaNLO = (+0.003062 * getSMEFTCoeffEW("CW")  +0.007318 * getSMEFTCoeffEW("CHbox")  +2.44086 * getSMEFTCoeffEW("CHD")  +0.002518 * getSMEFTCoeffEW("CHB")   
            +0.00432 * getSMEFTCoeffEW("CHW")  +2.73273 * getSMEFTCoeffEW("CHWB")  -0.20729 * getSMEFTCoeffEW("CuWR",2, 2) +0.058637 * getSMEFTCoeffEW("CuBR",2, 2)  
            -1.30043 * getSMEFTCoeffEW("CHl1R",0, 0) +0.004185 * getSMEFTCoeffEW("CHl1R",1, 1) +0.004185 * getSMEFTCoeffEW("CHl1R",2, 2) -0.848528 * getSMEFTCoeffEW("CHl3R",0, 0)  
            +0.18628 * getSMEFTCoeffEW("CHl3R",1, 1) +3.70685 * getSMEFTCoeffEW("CHeR",0, 0) +0.004185 * getSMEFTCoeffEW("CHeR",1, 1) +0.004185 * getSMEFTCoeffEW("CHeR",2, 2)  
            +0.203989 * getSMEFTCoeffEW("CHq1R",0, 0) +0.203989 * getSMEFTCoeffEW("CHq1R",1, 1) +0.970933 * getSMEFTCoeffEW("CHq1R",2, 2) +1.02553 * getSMEFTCoeffEW("CHq3R",0, 0)  
            +1.02553 * getSMEFTCoeffEW("CHq3R",1, 1) +0.017291 * getSMEFTCoeffEW("CHq3R",2, 2) +0.386004 * getSMEFTCoeffEW("CHuR",0, 0) +0.386004 * getSMEFTCoeffEW("CHuR",1, 1)  
            -0.479269 * getSMEFTCoeffEW("CHuR",2, 2) -0.191495 * getSMEFTCoeffEW("CHdR",0, 0) -0.191495 * getSMEFTCoeffEW("CHdR",1, 1) -0.191495 * getSMEFTCoeffEW("CHdR",2, 2)  
            -0.019239 * getSMEFTCoeffEW("CllR",0, 0, 0, 0) -0.038099 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) -0.038099 * getSMEFTCoeffEW("CllR",0, 0, 2, 2) -0.167192 * getSMEFTCoeffEW("CllR",0, 1, 1, 0)  
            +0.01886 * getSMEFTCoeffEW("CllR",0, 2, 2, 0) -0.012676 * getSMEFTCoeffEW("Cqq1R",0, 0, 0, 0) -0.00305 * getSMEFTCoeffEW("Cqq1R",0, 0, 1, 1) +0.058724 * getSMEFTCoeffEW("Cqq1R",0, 0, 2, 2)  
            -0.022302 * getSMEFTCoeffEW("Cqq1R",0, 1, 1, 0) -0.230042 * getSMEFTCoeffEW("Cqq1R",0, 2, 2, 0) -0.012676 * getSMEFTCoeffEW("Cqq1R",1, 1, 1, 1) +0.058724 * getSMEFTCoeffEW("Cqq1R",1, 1, 2, 2)  
            -0.230042 * getSMEFTCoeffEW("Cqq1R",1, 2, 2, 1) +0.378602 * getSMEFTCoeffEW("Cqq1R",2, 2, 2, 2) -0.154995 * getSMEFTCoeffEW("Cqq3R",0, 0, 0, 0) -0.331478 * getSMEFTCoeffEW("Cqq3R",0, 0, 1, 1)  
            -0.975495 * getSMEFTCoeffEW("Cqq3R",0, 0, 2, 2) +0.021489 * getSMEFTCoeffEW("Cqq3R",0, 1, 1, 0) +0.317392 * getSMEFTCoeffEW("Cqq3R",0, 2, 2, 0) -0.154995 * getSMEFTCoeffEW("Cqq3R",1, 1, 1, 1)  
            -0.975495 * getSMEFTCoeffEW("Cqq3R",1, 1, 2, 2) +0.317392 * getSMEFTCoeffEW("Cqq3R",1, 2, 2, 1) +0.034136 * getSMEFTCoeffEW("Cqq3R",2, 2, 2, 2) +0.019812 * getSMEFTCoeffEW("Clq1R",0, 0, 0, 0)  
            +0.019812 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1) -0.838052 * getSMEFTCoeffEW("Clq1R",0, 0, 2, 2) +0.000762 * getSMEFTCoeffEW("Clq1R",1, 1, 0, 0) +0.000762 * getSMEFTCoeffEW("Clq1R",1, 1, 1, 1)  
            +0.004356 * getSMEFTCoeffEW("Clq1R",1, 1, 2, 2) +0.000762 * getSMEFTCoeffEW("Clq1R",2, 2, 0, 0) +0.000762 * getSMEFTCoeffEW("Clq1R",2, 2, 1, 1) +0.004356 * getSMEFTCoeffEW("Clq1R",2, 2, 2, 2)  
            +0.170972 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0) +0.170972 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) +1.04492 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) -0.027623 * getSMEFTCoeffEW("Clq3R",1, 1, 0, 0)  
            -0.027623 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1) -0.015136 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) -0.027623 * getSMEFTCoeffEW("Clq3R",2, 2, 0, 0) -0.027623 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1)  
            -0.015136 * getSMEFTCoeffEW("Clq3R",2, 2, 2, 2) +0.043099 * getSMEFTCoeffEW("CeeR",0, 0, 0, 0) +0.043099 * getSMEFTCoeffEW("CeeR",0, 0, 1, 1) +0.043099 * getSMEFTCoeffEW("CeeR",0, 0, 2, 2)  
            -0.006913 * getSMEFTCoeffEW("CuuR",0, 0, 0, 0) -0.012199 * getSMEFTCoeffEW("CuuR",0, 0, 1, 1) -0.158354 * getSMEFTCoeffEW("CuuR",0, 0, 2, 2) -0.001627 * getSMEFTCoeffEW("CuuR",0, 1, 1, 0)  
            -0.09567 * getSMEFTCoeffEW("CuuR",0, 2, 2, 0) -0.006913 * getSMEFTCoeffEW("CuuR",1, 1, 1, 1) -0.158354 * getSMEFTCoeffEW("CuuR",1, 1, 2, 2) -0.09567 * getSMEFTCoeffEW("CuuR",1, 2, 2, 1)  
            -0.001728 * getSMEFTCoeffEW("CddR",0, 0, 0, 0) -0.00305 * getSMEFTCoeffEW("CddR",0, 0, 1, 1) -0.00305 * getSMEFTCoeffEW("CddR",0, 0, 2, 2) -0.000407 * getSMEFTCoeffEW("CddR",0, 1, 1, 0)  
            -0.000407 * getSMEFTCoeffEW("CddR",0, 2, 2, 0) -0.001728 * getSMEFTCoeffEW("CddR",1, 1, 1, 1) -0.00305 * getSMEFTCoeffEW("CddR",1, 1, 2, 2) -0.000407 * getSMEFTCoeffEW("CddR",1, 2, 2, 1)  
            -0.001728 * getSMEFTCoeffEW("CddR",2, 2, 2, 2) -0.02926 * getSMEFTCoeffEW("CeuR",0, 0, 0, 0) -0.02926 * getSMEFTCoeffEW("CeuR",0, 0, 1, 1) -0.799223 * getSMEFTCoeffEW("CeuR",0, 0, 2, 2)  
            +0.001525 * getSMEFTCoeffEW("CeuR",1, 1, 0, 0) +0.001525 * getSMEFTCoeffEW("CeuR",1, 1, 1, 1) +0.001525 * getSMEFTCoeffEW("CeuR",2, 2, 0, 0) +0.001525 * getSMEFTCoeffEW("CeuR",2, 2, 1, 1)  
            +0.01463 * getSMEFTCoeffEW("CedR",0, 0, 0, 0) +0.01463 * getSMEFTCoeffEW("CedR",0, 0, 1, 1) +0.01463 * getSMEFTCoeffEW("CedR",0, 0, 2, 2) -0.000762 * getSMEFTCoeffEW("CedR",1, 1, 0, 0)  
            -0.000762 * getSMEFTCoeffEW("CedR",1, 1, 1, 1) -0.000762 * getSMEFTCoeffEW("CedR",1, 1, 2, 2) -0.000762 * getSMEFTCoeffEW("CedR",2, 2, 0, 0) -0.000762 * getSMEFTCoeffEW("CedR",2, 2, 1, 1)  
            -0.000762 * getSMEFTCoeffEW("CedR",2, 2, 2, 2) +0.00305 * getSMEFTCoeffEW("Cud1R",0, 0, 0, 0) +0.00305 * getSMEFTCoeffEW("Cud1R",0, 0, 1, 1) +0.00305 * getSMEFTCoeffEW("Cud1R",0, 0, 2, 2)  
            +0.00305 * getSMEFTCoeffEW("Cud1R",1, 1, 0, 0) +0.00305 * getSMEFTCoeffEW("Cud1R",1, 1, 1, 1) +0.00305 * getSMEFTCoeffEW("Cud1R",1, 1, 2, 2) +0.039589 * getSMEFTCoeffEW("Cud1R",2, 2, 0, 0)  
            +0.039589 * getSMEFTCoeffEW("Cud1R",2, 2, 1, 1) +0.039589 * getSMEFTCoeffEW("Cud1R",2, 2, 2, 2) -0.003657 * getSMEFTCoeffEW("CleR",0, 0, 0, 0) -0.019049 * getSMEFTCoeffEW("CleR",0, 0, 1, 1)  
            -0.019049 * getSMEFTCoeffEW("CleR",0, 0, 2, 2) +0.015393 * getSMEFTCoeffEW("CleR",1, 1, 0, 0) +0.015393 * getSMEFTCoeffEW("CleR",2, 2, 0, 0) +0.039623 * getSMEFTCoeffEW("CluR",0, 0, 0, 0)  
            +0.039623 * getSMEFTCoeffEW("CluR",0, 0, 1, 1) +0.989083 * getSMEFTCoeffEW("CluR",0, 0, 2, 2) +0.001525 * getSMEFTCoeffEW("CluR",1, 1, 0, 0) +0.001525 * getSMEFTCoeffEW("CluR",1, 1, 1, 1)  
            +0.001525 * getSMEFTCoeffEW("CluR",2, 2, 0, 0) +0.001525 * getSMEFTCoeffEW("CluR",2, 2, 1, 1) -0.019812 * getSMEFTCoeffEW("CldR",0, 0, 0, 0) -0.019812 * getSMEFTCoeffEW("CldR",0, 0, 1, 1)  
            -0.019812 * getSMEFTCoeffEW("CldR",0, 0, 2, 2) -0.000762 * getSMEFTCoeffEW("CldR",1, 1, 0, 0) -0.000762 * getSMEFTCoeffEW("CldR",1, 1, 1, 1) -0.000762 * getSMEFTCoeffEW("CldR",1, 1, 2, 2)  
            -0.000762 * getSMEFTCoeffEW("CldR",2, 2, 0, 0) -0.000762 * getSMEFTCoeffEW("CldR",2, 2, 1, 1) -0.000762 * getSMEFTCoeffEW("CldR",2, 2, 2, 2) -0.01463 * getSMEFTCoeffEW("CqeR",0, 0, 0, 0)  
            +0.000762 * getSMEFTCoeffEW("CqeR",0, 0, 1, 1) +0.000762 * getSMEFTCoeffEW("CqeR",0, 0, 2, 2) -0.01463 * getSMEFTCoeffEW("CqeR",1, 1, 0, 0) +0.000762 * getSMEFTCoeffEW("CqeR",1, 1, 1, 1)  
            +0.000762 * getSMEFTCoeffEW("CqeR",1, 1, 2, 2) +0.685059 * getSMEFTCoeffEW("CqeR",2, 2, 0, 0) +0.004356 * getSMEFTCoeffEW("CqeR",2, 2, 1, 1) +0.004356 * getSMEFTCoeffEW("CqeR",2, 2, 2, 2)  
            -0.00305 * getSMEFTCoeffEW("Cqu1R",0, 0, 0, 0) -0.00305 * getSMEFTCoeffEW("Cqu1R",0, 0, 1, 1) -0.039589 * getSMEFTCoeffEW("Cqu1R",0, 0, 2, 2) -0.00305 * getSMEFTCoeffEW("Cqu1R",1, 1, 0, 0)  
            -0.00305 * getSMEFTCoeffEW("Cqu1R",1, 1, 1, 1) -0.039589 * getSMEFTCoeffEW("Cqu1R",1, 1, 2, 2) +0.058724 * getSMEFTCoeffEW("Cqu1R",2, 2, 0, 0) +0.058724 * getSMEFTCoeffEW("Cqu1R",2, 2, 1, 1)  
            -0.226156 * getSMEFTCoeffEW("Cqu1R",2, 2, 2, 2) +0.001525 * getSMEFTCoeffEW("Cqd1R",0, 0, 0, 0) +0.001525 * getSMEFTCoeffEW("Cqd1R",0, 0, 1, 1) +0.001525 * getSMEFTCoeffEW("Cqd1R",0, 0, 2, 2)  
            +0.001525 * getSMEFTCoeffEW("Cqd1R",1, 1, 0, 0) +0.001525 * getSMEFTCoeffEW("Cqd1R",1, 1, 1, 1) +0.001525 * getSMEFTCoeffEW("Cqd1R",1, 1, 2, 2) -0.029362 * getSMEFTCoeffEW("Cqd1R",2, 2, 0, 0)  
            -0.029362 * getSMEFTCoeffEW("Cqd1R",2, 2, 1, 1) -0.029362 * getSMEFTCoeffEW("Cqd1R",2, 2, 2, 2) ) * v2; 
        break;
    //} else if (f.is("MUON")) {
        case 3:
            deltaNLO = (+0.003062 * getSMEFTCoeffEW("CW")  +0.007318 * getSMEFTCoeffEW("CHbox")  +2.44086 * getSMEFTCoeffEW("CHD")  +0.002518 * getSMEFTCoeffEW("CHB")   
            +0.00432 * getSMEFTCoeffEW("CHW")  +2.73273 * getSMEFTCoeffEW("CHWB")  -0.20729 * getSMEFTCoeffEW("CuWR",2, 2) +0.058637 * getSMEFTCoeffEW("CuBR",2, 2)  
            +0.004185 * getSMEFTCoeffEW("CHl1R",0, 0) -1.30043 * getSMEFTCoeffEW("CHl1R",1, 1) +0.004185 * getSMEFTCoeffEW("CHl1R",2, 2) +0.18628 * getSMEFTCoeffEW("CHl3R",0, 0)  
            -0.848528 * getSMEFTCoeffEW("CHl3R",1, 1) +0.004185 * getSMEFTCoeffEW("CHeR",0, 0) +3.70685 * getSMEFTCoeffEW("CHeR",1, 1) +0.004185 * getSMEFTCoeffEW("CHeR",2, 2)  
            +0.203989 * getSMEFTCoeffEW("CHq1R",0, 0) +0.203989 * getSMEFTCoeffEW("CHq1R",1, 1) +0.970933 * getSMEFTCoeffEW("CHq1R",2, 2) +1.02553 * getSMEFTCoeffEW("CHq3R",0, 0)  
            +1.02553 * getSMEFTCoeffEW("CHq3R",1, 1) +0.017291 * getSMEFTCoeffEW("CHq3R",2, 2) +0.386004 * getSMEFTCoeffEW("CHuR",0, 0) +0.386004 * getSMEFTCoeffEW("CHuR",1, 1)  
            -0.479269 * getSMEFTCoeffEW("CHuR",2, 2) -0.191495 * getSMEFTCoeffEW("CHdR",0, 0) -0.191495 * getSMEFTCoeffEW("CHdR",1, 1) -0.191495 * getSMEFTCoeffEW("CHdR",2, 2)  
            -0.038099 * getSMEFTCoeffEW("CllR",0, 0, 1, 1) -0.167192 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) -0.019239 * getSMEFTCoeffEW("CllR",1, 1, 1, 1) -0.038099 * getSMEFTCoeffEW("CllR",1, 1, 2, 2)  
            +0.01886 * getSMEFTCoeffEW("CllR",1, 2, 2, 1) -0.012676 * getSMEFTCoeffEW("Cqq1R",0, 0, 0, 0) -0.00305 * getSMEFTCoeffEW("Cqq1R",0, 0, 1, 1) +0.058724 * getSMEFTCoeffEW("Cqq1R",0, 0, 2, 2)  
            -0.022302 * getSMEFTCoeffEW("Cqq1R",0, 1, 1, 0) -0.230042 * getSMEFTCoeffEW("Cqq1R",0, 2, 2, 0) -0.012676 * getSMEFTCoeffEW("Cqq1R",1, 1, 1, 1) +0.058724 * getSMEFTCoeffEW("Cqq1R",1, 1, 2, 2)  
            -0.230042 * getSMEFTCoeffEW("Cqq1R",1, 2, 2, 1) +0.378602 * getSMEFTCoeffEW("Cqq1R",2, 2, 2, 2) -0.154995 * getSMEFTCoeffEW("Cqq3R",0, 0, 0, 0) -0.331478 * getSMEFTCoeffEW("Cqq3R",0, 0, 1, 1)  
            -0.975495 * getSMEFTCoeffEW("Cqq3R",0, 0, 2, 2) +0.021489 * getSMEFTCoeffEW("Cqq3R",0, 1, 1, 0) +0.317392 * getSMEFTCoeffEW("Cqq3R",0, 2, 2, 0) -0.154995 * getSMEFTCoeffEW("Cqq3R",1, 1, 1, 1)  
            -0.975495 * getSMEFTCoeffEW("Cqq3R",1, 1, 2, 2) +0.317392 * getSMEFTCoeffEW("Cqq3R",1, 2, 2, 1) +0.034136 * getSMEFTCoeffEW("Cqq3R",2, 2, 2, 2) +0.000762 * getSMEFTCoeffEW("Clq1R",0, 0, 0, 0)  
            +0.000762 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1) +0.004356 * getSMEFTCoeffEW("Clq1R",0, 0, 2, 2) +0.019812 * getSMEFTCoeffEW("Clq1R",1, 1, 0, 0) +0.019812 * getSMEFTCoeffEW("Clq1R",1, 1, 1, 1)  
            -0.838052 * getSMEFTCoeffEW("Clq1R",1, 1, 2, 2) +0.000762 * getSMEFTCoeffEW("Clq1R",2, 2, 0, 0) +0.000762 * getSMEFTCoeffEW("Clq1R",2, 2, 1, 1) +0.004356 * getSMEFTCoeffEW("Clq1R",2, 2, 2, 2)  
            -0.027623 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0) -0.027623 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) -0.015136 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) +0.170972 * getSMEFTCoeffEW("Clq3R",1, 1, 0, 0)  
            +0.170972 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1) +1.04492 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) -0.027623 * getSMEFTCoeffEW("Clq3R",2, 2, 0, 0) -0.027623 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1)  
            -0.015136 * getSMEFTCoeffEW("Clq3R",2, 2, 2, 2) +0.043099 * getSMEFTCoeffEW("CeeR",0, 0, 1, 1) +0.043099 * getSMEFTCoeffEW("CeeR",1, 1, 1, 1) +0.043099 * getSMEFTCoeffEW("CeeR",1, 1, 2, 2)  
            -0.006913 * getSMEFTCoeffEW("CuuR",0, 0, 0, 0) -0.012199 * getSMEFTCoeffEW("CuuR",0, 0, 1, 1) -0.158354 * getSMEFTCoeffEW("CuuR",0, 0, 2, 2) -0.001627 * getSMEFTCoeffEW("CuuR",0, 1, 1, 0)  
            -0.09567 * getSMEFTCoeffEW("CuuR",0, 2, 2, 0) -0.006913 * getSMEFTCoeffEW("CuuR",1, 1, 1, 1) -0.158354 * getSMEFTCoeffEW("CuuR",1, 1, 2, 2) -0.09567 * getSMEFTCoeffEW("CuuR",1, 2, 2, 1)  
            -0.001728 * getSMEFTCoeffEW("CddR",0, 0, 0, 0) -0.00305 * getSMEFTCoeffEW("CddR",0, 0, 1, 1) -0.00305 * getSMEFTCoeffEW("CddR",0, 0, 2, 2) -0.000407 * getSMEFTCoeffEW("CddR",0, 1, 1, 0)  
            -0.000407 * getSMEFTCoeffEW("CddR",0, 2, 2, 0) -0.001728 * getSMEFTCoeffEW("CddR",1, 1, 1, 1) -0.00305 * getSMEFTCoeffEW("CddR",1, 1, 2, 2) -0.000407 * getSMEFTCoeffEW("CddR",1, 2, 2, 1)  
            -0.001728 * getSMEFTCoeffEW("CddR",2, 2, 2, 2) +0.001525 * getSMEFTCoeffEW("CeuR",0, 0, 0, 0) +0.001525 * getSMEFTCoeffEW("CeuR",0, 0, 1, 1) -0.02926 * getSMEFTCoeffEW("CeuR",1, 1, 0, 0)  
            -0.02926 * getSMEFTCoeffEW("CeuR",1, 1, 1, 1) -0.799223 * getSMEFTCoeffEW("CeuR",1, 1, 2, 2) +0.001525 * getSMEFTCoeffEW("CeuR",2, 2, 0, 0) +0.001525 * getSMEFTCoeffEW("CeuR",2, 2, 1, 1)  
            -0.000762 * getSMEFTCoeffEW("CedR",0, 0, 0, 0) -0.000762 * getSMEFTCoeffEW("CedR",0, 0, 1, 1) -0.000762 * getSMEFTCoeffEW("CedR",0, 0, 2, 2) +0.01463 * getSMEFTCoeffEW("CedR",1, 1, 0, 0)  
            +0.01463 * getSMEFTCoeffEW("CedR",1, 1, 1, 1) +0.01463 * getSMEFTCoeffEW("CedR",1, 1, 2, 2) -0.000762 * getSMEFTCoeffEW("CedR",2, 2, 0, 0) -0.000762 * getSMEFTCoeffEW("CedR",2, 2, 1, 1)  
            -0.000762 * getSMEFTCoeffEW("CedR",2, 2, 2, 2) +0.00305 * getSMEFTCoeffEW("Cud1R",0, 0, 0, 0) +0.00305 * getSMEFTCoeffEW("Cud1R",0, 0, 1, 1) +0.00305 * getSMEFTCoeffEW("Cud1R",0, 0, 2, 2)  
            +0.00305 * getSMEFTCoeffEW("Cud1R",1, 1, 0, 0) +0.00305 * getSMEFTCoeffEW("Cud1R",1, 1, 1, 1) +0.00305 * getSMEFTCoeffEW("Cud1R",1, 1, 2, 2) +0.039589 * getSMEFTCoeffEW("Cud1R",2, 2, 0, 0)  
            +0.039589 * getSMEFTCoeffEW("Cud1R",2, 2, 1, 1) +0.039589 * getSMEFTCoeffEW("Cud1R",2, 2, 2, 2) +0.015393 * getSMEFTCoeffEW("CleR",0, 0, 1, 1) -0.019049 * getSMEFTCoeffEW("CleR",1, 1, 0, 0)  
            -0.003657 * getSMEFTCoeffEW("CleR",1, 1, 1, 1) -0.019049 * getSMEFTCoeffEW("CleR",1, 1, 2, 2) +0.015393 * getSMEFTCoeffEW("CleR",2, 2, 1, 1) +0.001525 * getSMEFTCoeffEW("CluR",0, 0, 0, 0)  
            +0.001525 * getSMEFTCoeffEW("CluR",0, 0, 1, 1) +0.039623 * getSMEFTCoeffEW("CluR",1, 1, 0, 0) +0.039623 * getSMEFTCoeffEW("CluR",1, 1, 1, 1) +0.989083 * getSMEFTCoeffEW("CluR",1, 1, 2, 2)  
            +0.001525 * getSMEFTCoeffEW("CluR",2, 2, 0, 0) +0.001525 * getSMEFTCoeffEW("CluR",2, 2, 1, 1) -0.000762 * getSMEFTCoeffEW("CldR",0, 0, 0, 0) -0.000762 * getSMEFTCoeffEW("CldR",0, 0, 1, 1)  
            -0.000762 * getSMEFTCoeffEW("CldR",0, 0, 2, 2) -0.019812 * getSMEFTCoeffEW("CldR",1, 1, 0, 0) -0.019812 * getSMEFTCoeffEW("CldR",1, 1, 1, 1) -0.019812 * getSMEFTCoeffEW("CldR",1, 1, 2, 2)  
            -0.000762 * getSMEFTCoeffEW("CldR",2, 2, 0, 0) -0.000762 * getSMEFTCoeffEW("CldR",2, 2, 1, 1) -0.000762 * getSMEFTCoeffEW("CldR",2, 2, 2, 2) +0.000762 * getSMEFTCoeffEW("CqeR",0, 0, 0, 0)  
            -0.01463 * getSMEFTCoeffEW("CqeR",0, 0, 1, 1) +0.000762 * getSMEFTCoeffEW("CqeR",0, 0, 2, 2) +0.000762 * getSMEFTCoeffEW("CqeR",1, 1, 0, 0) -0.01463 * getSMEFTCoeffEW("CqeR",1, 1, 1, 1)  
            +0.000762 * getSMEFTCoeffEW("CqeR",1, 1, 2, 2) +0.004356 * getSMEFTCoeffEW("CqeR",2, 2, 0, 0) +0.685059 * getSMEFTCoeffEW("CqeR",2, 2, 1, 1) +0.004356 * getSMEFTCoeffEW("CqeR",2, 2, 2, 2)  
            -0.00305 * getSMEFTCoeffEW("Cqu1R",0, 0, 0, 0) -0.00305 * getSMEFTCoeffEW("Cqu1R",0, 0, 1, 1) -0.039589 * getSMEFTCoeffEW("Cqu1R",0, 0, 2, 2) -0.00305 * getSMEFTCoeffEW("Cqu1R",1, 1, 0, 0)  
            -0.00305 * getSMEFTCoeffEW("Cqu1R",1, 1, 1, 1) -0.039589 * getSMEFTCoeffEW("Cqu1R",1, 1, 2, 2) +0.058724 * getSMEFTCoeffEW("Cqu1R",2, 2, 0, 0) +0.058724 * getSMEFTCoeffEW("Cqu1R",2, 2, 1, 1)  
            -0.226156 * getSMEFTCoeffEW("Cqu1R",2, 2, 2, 2) +0.001525 * getSMEFTCoeffEW("Cqd1R",0, 0, 0, 0) +0.001525 * getSMEFTCoeffEW("Cqd1R",0, 0, 1, 1) +0.001525 * getSMEFTCoeffEW("Cqd1R",0, 0, 2, 2)  
            +0.001525 * getSMEFTCoeffEW("Cqd1R",1, 1, 0, 0) +0.001525 * getSMEFTCoeffEW("Cqd1R",1, 1, 1, 1) +0.001525 * getSMEFTCoeffEW("Cqd1R",1, 1, 2, 2) -0.029362 * getSMEFTCoeffEW("Cqd1R",2, 2, 0, 0)  
            -0.029362 * getSMEFTCoeffEW("Cqd1R",2, 2, 1, 1) -0.029362 * getSMEFTCoeffEW("Cqd1R",2, 2, 2, 2) ) * v2; 
        break;
    //} else if (f.is("TAU")) {
        case 5:
            deltaNLO = (+0.003062 * getSMEFTCoeffEW("CW")  +0.007318 * getSMEFTCoeffEW("CHbox")  +2.44086 * getSMEFTCoeffEW("CHD")  +0.002518 * getSMEFTCoeffEW("CHB")   
            +0.00432 * getSMEFTCoeffEW("CHW")  +2.73273 * getSMEFTCoeffEW("CHWB")  -0.20729 * getSMEFTCoeffEW("CuWR",2, 2) +0.058637 * getSMEFTCoeffEW("CuBR",2, 2)  
            +0.004185 * getSMEFTCoeffEW("CHl1R",0, 0) +0.004185 * getSMEFTCoeffEW("CHl1R",1, 1) -1.30043 * getSMEFTCoeffEW("CHl1R",2, 2) +0.18628 * getSMEFTCoeffEW("CHl3R",0, 0)  
            +0.18628 * getSMEFTCoeffEW("CHl3R",1, 1) -1.03458 * getSMEFTCoeffEW("CHl3R",2, 2) +0.004185 * getSMEFTCoeffEW("CHeR",0, 0) +0.004185 * getSMEFTCoeffEW("CHeR",1, 1)  
            +3.70685 * getSMEFTCoeffEW("CHeR",2, 2) +0.203989 * getSMEFTCoeffEW("CHq1R",0, 0) +0.203989 * getSMEFTCoeffEW("CHq1R",1, 1) +0.970933 * getSMEFTCoeffEW("CHq1R",2, 2)  
            +1.02553 * getSMEFTCoeffEW("CHq3R",0, 0) +1.02553 * getSMEFTCoeffEW("CHq3R",1, 1) +0.017291 * getSMEFTCoeffEW("CHq3R",2, 2) +0.386004 * getSMEFTCoeffEW("CHuR",0, 0)  
            +0.386004 * getSMEFTCoeffEW("CHuR",1, 1) -0.479269 * getSMEFTCoeffEW("CHuR",2, 2) -0.191495 * getSMEFTCoeffEW("CHdR",0, 0) -0.191495 * getSMEFTCoeffEW("CHdR",1, 1)  
            -0.191495 * getSMEFTCoeffEW("CHdR",2, 2) -0.038099 * getSMEFTCoeffEW("CllR",0, 0, 2, 2) -0.186051 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) +0.01886 * getSMEFTCoeffEW("CllR",0, 2, 2, 0)  
            -0.038099 * getSMEFTCoeffEW("CllR",1, 1, 2, 2) +0.01886 * getSMEFTCoeffEW("CllR",1, 2, 2, 1) -0.019239 * getSMEFTCoeffEW("CllR",2, 2, 2, 2) -0.012676 * getSMEFTCoeffEW("Cqq1R",0, 0, 0, 0)  
            -0.00305 * getSMEFTCoeffEW("Cqq1R",0, 0, 1, 1) +0.058724 * getSMEFTCoeffEW("Cqq1R",0, 0, 2, 2) -0.022302 * getSMEFTCoeffEW("Cqq1R",0, 1, 1, 0) -0.230042 * getSMEFTCoeffEW("Cqq1R",0, 2, 2, 0)  
            -0.012676 * getSMEFTCoeffEW("Cqq1R",1, 1, 1, 1) +0.058724 * getSMEFTCoeffEW("Cqq1R",1, 1, 2, 2) -0.230042 * getSMEFTCoeffEW("Cqq1R",1, 2, 2, 1) +0.378602 * getSMEFTCoeffEW("Cqq1R",2, 2, 2, 2)  
            -0.154995 * getSMEFTCoeffEW("Cqq3R",0, 0, 0, 0) -0.331478 * getSMEFTCoeffEW("Cqq3R",0, 0, 1, 1) -0.975495 * getSMEFTCoeffEW("Cqq3R",0, 0, 2, 2) +0.021489 * getSMEFTCoeffEW("Cqq3R",0, 1, 1, 0)  
            +0.317392 * getSMEFTCoeffEW("Cqq3R",0, 2, 2, 0) -0.154995 * getSMEFTCoeffEW("Cqq3R",1, 1, 1, 1) -0.975495 * getSMEFTCoeffEW("Cqq3R",1, 1, 2, 2) +0.317392 * getSMEFTCoeffEW("Cqq3R",1, 2, 2, 1)  
            +0.034136 * getSMEFTCoeffEW("Cqq3R",2, 2, 2, 2) +0.000762 * getSMEFTCoeffEW("Clq1R",0, 0, 0, 0) +0.000762 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1) +0.004356 * getSMEFTCoeffEW("Clq1R",0, 0, 2, 2)  
            +0.000762 * getSMEFTCoeffEW("Clq1R",1, 1, 0, 0) +0.000762 * getSMEFTCoeffEW("Clq1R",1, 1, 1, 1) +0.004356 * getSMEFTCoeffEW("Clq1R",1, 1, 2, 2) +0.019812 * getSMEFTCoeffEW("Clq1R",2, 2, 0, 0)  
            +0.019812 * getSMEFTCoeffEW("Clq1R",2, 2, 1, 1) -0.838052 * getSMEFTCoeffEW("Clq1R",2, 2, 2, 2) -0.027623 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0) -0.027623 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1)  
            -0.015136 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) -0.027623 * getSMEFTCoeffEW("Clq3R",1, 1, 0, 0) -0.027623 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1) -0.015136 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2)  
            +0.170972 * getSMEFTCoeffEW("Clq3R",2, 2, 0, 0) +0.170972 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1) +1.04492 * getSMEFTCoeffEW("Clq3R",2, 2, 2, 2) +0.043099 * getSMEFTCoeffEW("CeeR",0, 0, 2, 2)  
            +0.043099 * getSMEFTCoeffEW("CeeR",1, 1, 2, 2) +0.043099 * getSMEFTCoeffEW("CeeR",2, 2, 2, 2) -0.006913 * getSMEFTCoeffEW("CuuR",0, 0, 0, 0) -0.012199 * getSMEFTCoeffEW("CuuR",0, 0, 1, 1)  
            -0.158354 * getSMEFTCoeffEW("CuuR",0, 0, 2, 2) -0.001627 * getSMEFTCoeffEW("CuuR",0, 1, 1, 0) -0.09567 * getSMEFTCoeffEW("CuuR",0, 2, 2, 0) -0.006913 * getSMEFTCoeffEW("CuuR",1, 1, 1, 1)  
            -0.158354 * getSMEFTCoeffEW("CuuR",1, 1, 2, 2) -0.09567 * getSMEFTCoeffEW("CuuR",1, 2, 2, 1) -0.001728 * getSMEFTCoeffEW("CddR",0, 0, 0, 0) -0.00305 * getSMEFTCoeffEW("CddR",0, 0, 1, 1)  
            -0.00305 * getSMEFTCoeffEW("CddR",0, 0, 2, 2) -0.000407 * getSMEFTCoeffEW("CddR",0, 1, 1, 0) -0.000407 * getSMEFTCoeffEW("CddR",0, 2, 2, 0) -0.001728 * getSMEFTCoeffEW("CddR",1, 1, 1, 1)  
            -0.00305 * getSMEFTCoeffEW("CddR",1, 1, 2, 2) -0.000407 * getSMEFTCoeffEW("CddR",1, 2, 2, 1) -0.001728 * getSMEFTCoeffEW("CddR",2, 2, 2, 2) +0.001525 * getSMEFTCoeffEW("CeuR",0, 0, 0, 0)  
            +0.001525 * getSMEFTCoeffEW("CeuR",0, 0, 1, 1) +0.001525 * getSMEFTCoeffEW("CeuR",1, 1, 0, 0) +0.001525 * getSMEFTCoeffEW("CeuR",1, 1, 1, 1) -0.02926 * getSMEFTCoeffEW("CeuR",2, 2, 0, 0)  
            -0.02926 * getSMEFTCoeffEW("CeuR",2, 2, 1, 1) -0.799223 * getSMEFTCoeffEW("CeuR",2, 2, 2, 2) -0.000762 * getSMEFTCoeffEW("CedR",0, 0, 0, 0) -0.000762 * getSMEFTCoeffEW("CedR",0, 0, 1, 1)  
            -0.000762 * getSMEFTCoeffEW("CedR",0, 0, 2, 2) -0.000762 * getSMEFTCoeffEW("CedR",1, 1, 0, 0) -0.000762 * getSMEFTCoeffEW("CedR",1, 1, 1, 1) -0.000762 * getSMEFTCoeffEW("CedR",1, 1, 2, 2)  
            +0.01463 * getSMEFTCoeffEW("CedR",2, 2, 0, 0) +0.01463 * getSMEFTCoeffEW("CedR",2, 2, 1, 1) +0.01463 * getSMEFTCoeffEW("CedR",2, 2, 2, 2) +0.00305 * getSMEFTCoeffEW("Cud1R",0, 0, 0, 0)  
            +0.00305 * getSMEFTCoeffEW("Cud1R",0, 0, 1, 1) +0.00305 * getSMEFTCoeffEW("Cud1R",0, 0, 2, 2) +0.00305 * getSMEFTCoeffEW("Cud1R",1, 1, 0, 0) +0.00305 * getSMEFTCoeffEW("Cud1R",1, 1, 1, 1)  
            +0.00305 * getSMEFTCoeffEW("Cud1R",1, 1, 2, 2) +0.039589 * getSMEFTCoeffEW("Cud1R",2, 2, 0, 0) +0.039589 * getSMEFTCoeffEW("Cud1R",2, 2, 1, 1) +0.039589 * getSMEFTCoeffEW("Cud1R",2, 2, 2, 2)  
            +0.015393 * getSMEFTCoeffEW("CleR",0, 0, 2, 2) +0.015393 * getSMEFTCoeffEW("CleR",1, 1, 2, 2) -0.019049 * getSMEFTCoeffEW("CleR",2, 2, 0, 0) -0.019049 * getSMEFTCoeffEW("CleR",2, 2, 1, 1)  
            -0.003657 * getSMEFTCoeffEW("CleR",2, 2, 2, 2) +0.001525 * getSMEFTCoeffEW("CluR",0, 0, 0, 0) +0.001525 * getSMEFTCoeffEW("CluR",0, 0, 1, 1) +0.001525 * getSMEFTCoeffEW("CluR",1, 1, 0, 0)  
            +0.001525 * getSMEFTCoeffEW("CluR",1, 1, 1, 1) +0.039623 * getSMEFTCoeffEW("CluR",2, 2, 0, 0) +0.039623 * getSMEFTCoeffEW("CluR",2, 2, 1, 1) +0.989083 * getSMEFTCoeffEW("CluR",2, 2, 2, 2)  
            -0.000762 * getSMEFTCoeffEW("CldR",0, 0, 0, 0) -0.000762 * getSMEFTCoeffEW("CldR",0, 0, 1, 1) -0.000762 * getSMEFTCoeffEW("CldR",0, 0, 2, 2) -0.000762 * getSMEFTCoeffEW("CldR",1, 1, 0, 0)  
            -0.000762 * getSMEFTCoeffEW("CldR",1, 1, 1, 1) -0.000762 * getSMEFTCoeffEW("CldR",1, 1, 2, 2) -0.019812 * getSMEFTCoeffEW("CldR",2, 2, 0, 0) -0.019812 * getSMEFTCoeffEW("CldR",2, 2, 1, 1)  
            -0.019812 * getSMEFTCoeffEW("CldR",2, 2, 2, 2) +0.000762 * getSMEFTCoeffEW("CqeR",0, 0, 0, 0) +0.000762 * getSMEFTCoeffEW("CqeR",0, 0, 1, 1) -0.01463 * getSMEFTCoeffEW("CqeR",0, 0, 2, 2)  
            +0.000762 * getSMEFTCoeffEW("CqeR",1, 1, 0, 0) +0.000762 * getSMEFTCoeffEW("CqeR",1, 1, 1, 1) -0.01463 * getSMEFTCoeffEW("CqeR",1, 1, 2, 2) +0.004356 * getSMEFTCoeffEW("CqeR",2, 2, 0, 0)  
            +0.004356 * getSMEFTCoeffEW("CqeR",2, 2, 1, 1) +0.685059 * getSMEFTCoeffEW("CqeR",2, 2, 2, 2) -0.00305 * getSMEFTCoeffEW("Cqu1R",0, 0, 0, 0) -0.00305 * getSMEFTCoeffEW("Cqu1R",0, 0, 1, 1)  
            -0.039589 * getSMEFTCoeffEW("Cqu1R",0, 0, 2, 2) -0.00305 * getSMEFTCoeffEW("Cqu1R",1, 1, 0, 0) -0.00305 * getSMEFTCoeffEW("Cqu1R",1, 1, 1, 1) -0.039589 * getSMEFTCoeffEW("Cqu1R",1, 1, 2, 2)  
            +0.058724 * getSMEFTCoeffEW("Cqu1R",2, 2, 0, 0) +0.058724 * getSMEFTCoeffEW("Cqu1R",2, 2, 1, 1) -0.226156 * getSMEFTCoeffEW("Cqu1R",2, 2, 2, 2) +0.001525 * getSMEFTCoeffEW("Cqd1R",0, 0, 0, 0)  
            +0.001525 * getSMEFTCoeffEW("Cqd1R",0, 0, 1, 1) +0.001525 * getSMEFTCoeffEW("Cqd1R",0, 0, 2, 2) +0.001525 * getSMEFTCoeffEW("Cqd1R",1, 1, 0, 0) +0.001525 * getSMEFTCoeffEW("Cqd1R",1, 1, 1, 1)  
            +0.001525 * getSMEFTCoeffEW("Cqd1R",1, 1, 2, 2) -0.029362 * getSMEFTCoeffEW("Cqd1R",2, 2, 0, 0) -0.029362 * getSMEFTCoeffEW("Cqd1R",2, 2, 1, 1) -0.029362 * getSMEFTCoeffEW("Cqd1R",2, 2, 2, 2) ) * v2; 
        break;
    //} else if (f.is("CHARM")) {
        case 8:
            deltaNLO = (+0.000381 * getSMEFTCoeffEW("CW")  +0.000039 * getSMEFTCoeffEW("CHbox")  -0.001741 * getSMEFTCoeffEW("CHD")  +0.000014 * getSMEFTCoeffEW("CHB")   
            +0.000023 * getSMEFTCoeffEW("CHW")  -0.001841 * getSMEFTCoeffEW("CHWB")  +0.000982 * getSMEFTCoeffEW("CuWR",2, 2) +0.000596 * getSMEFTCoeffEW("CuBR",2, 2)  
            +0.000023 * getSMEFTCoeffEW("CHl1R",0, 0) +0.000023 * getSMEFTCoeffEW("CHl1R",1, 1) +0.000023 * getSMEFTCoeffEW("CHl1R",2, 2) +0.000077 * getSMEFTCoeffEW("CHl3R",0, 0)  
            +0.000077 * getSMEFTCoeffEW("CHl3R",1, 1) +0.000023 * getSMEFTCoeffEW("CHeR",0, 0) +0.000023 * getSMEFTCoeffEW("CHeR",1, 1) +0.000023 * getSMEFTCoeffEW("CHeR",2, 2)  
            -0.001351 * getSMEFTCoeffEW("CHq1R",0, 0) -0.012228 * getSMEFTCoeffEW("CHq1R",1, 1) -0.000752 * getSMEFTCoeffEW("CHq1R",2, 2) -0.004142 * getSMEFTCoeffEW("CHq3R",0, 0)  
            +0.00441 * getSMEFTCoeffEW("CHq3R",1, 1) -0.000797 * getSMEFTCoeffEW("CHq3R",2, 2) -0.002515 * getSMEFTCoeffEW("CHuR",0, 0) +0.012011 * getSMEFTCoeffEW("CHuR",1, 1)  
            -0.002049 * getSMEFTCoeffEW("CHuR",2, 2) +0.001245 * getSMEFTCoeffEW("CHdR",0, 0) +0.001245 * getSMEFTCoeffEW("CHdR",1, 1) +0.001245 * getSMEFTCoeffEW("CHdR",2, 2)  
            -0.000075 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) +0.000107 * getSMEFTCoeffEW("Cqq1R",0, 0, 0, 0) +0.000382 * getSMEFTCoeffEW("Cqq1R",0, 0, 1, 1) -0.000497 * getSMEFTCoeffEW("Cqq1R",0, 0, 2, 2)  
            -0.000035 * getSMEFTCoeffEW("Cqq1R",0, 1, 1, 0) +0.001948 * getSMEFTCoeffEW("Cqq1R",0, 2, 2, 0) +0.00024 * getSMEFTCoeffEW("Cqq1R",1, 1, 1, 1) -0.016239 * getSMEFTCoeffEW("Cqq1R",1, 1, 2, 2)  
            -0.00879 * getSMEFTCoeffEW("Cqq1R",1, 2, 2, 1) -0.003206 * getSMEFTCoeffEW("Cqq1R",2, 2, 2, 2) +0.001312 * getSMEFTCoeffEW("Cqq3R",0, 0, 0, 0) -0.000904 * getSMEFTCoeffEW("Cqq3R",0, 0, 1, 1)  
            +0.00826 * getSMEFTCoeffEW("Cqq3R",0, 0, 2, 2) +0.000137 * getSMEFTCoeffEW("Cqq3R",0, 1, 1, 0) -0.002687 * getSMEFTCoeffEW("Cqq3R",0, 2, 2, 0) -0.00208 * getSMEFTCoeffEW("Cqq3R",1, 1, 1, 1)  
            -0.011549 * getSMEFTCoeffEW("Cqq3R",1, 1, 2, 2) -0.012883 * getSMEFTCoeffEW("Cqq3R",1, 2, 2, 1) -0.000289 * getSMEFTCoeffEW("Cqq3R",2, 2, 2, 2) -0.000006 * getSMEFTCoeffEW("Clq1R",0, 0, 0, 0)  
            -0.000184 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1) -0.000037 * getSMEFTCoeffEW("Clq1R",0, 0, 2, 2) -0.000006 * getSMEFTCoeffEW("Clq1R",1, 1, 0, 0) -0.000184 * getSMEFTCoeffEW("Clq1R",1, 1, 1, 1)  
            -0.000037 * getSMEFTCoeffEW("Clq1R",1, 1, 2, 2) -0.000006 * getSMEFTCoeffEW("Clq1R",2, 2, 0, 0) -0.000184 * getSMEFTCoeffEW("Clq1R",2, 2, 1, 1) -0.000037 * getSMEFTCoeffEW("Clq1R",2, 2, 2, 2)  
            +0.000234 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0) -0.000385 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) +0.000128 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) +0.000234 * getSMEFTCoeffEW("Clq3R",1, 1, 0, 0)  
            -0.000385 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1) +0.000128 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) +0.000234 * getSMEFTCoeffEW("Clq3R",2, 2, 0, 0) -0.000385 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1)  
            +0.000128 * getSMEFTCoeffEW("Clq3R",2, 2, 2, 2) +0.000059 * getSMEFTCoeffEW("CuuR",0, 0, 0, 0) -0.000199 * getSMEFTCoeffEW("CuuR",0, 0, 1, 1) +0.001341 * getSMEFTCoeffEW("CuuR",0, 0, 2, 2)  
            -0.000027 * getSMEFTCoeffEW("CuuR",0, 1, 1, 0) +0.00081 * getSMEFTCoeffEW("CuuR",0, 2, 2, 0) -0.000284 * getSMEFTCoeffEW("CuuR",1, 1, 1, 1) -0.006503 * getSMEFTCoeffEW("CuuR",1, 1, 2, 2)  
            -0.003929 * getSMEFTCoeffEW("CuuR",1, 2, 2, 1) +0.000015 * getSMEFTCoeffEW("CddR",0, 0, 0, 0) +0.000026 * getSMEFTCoeffEW("CddR",0, 0, 1, 1) +0.000026 * getSMEFTCoeffEW("CddR",0, 0, 2, 2)  
            +0.000003 * getSMEFTCoeffEW("CddR",0, 1, 1, 0) +0.000003 * getSMEFTCoeffEW("CddR",0, 2, 2, 0) +0.000015 * getSMEFTCoeffEW("CddR",1, 1, 1, 1) +0.000026 * getSMEFTCoeffEW("CddR",1, 1, 2, 2)  
            +0.000003 * getSMEFTCoeffEW("CddR",1, 2, 2, 1) +0.000015 * getSMEFTCoeffEW("CddR",2, 2, 2, 2) -0.000013 * getSMEFTCoeffEW("CeuR",0, 0, 0, 0) +0.000063 * getSMEFTCoeffEW("CeuR",0, 0, 1, 1)  
            -0.000013 * getSMEFTCoeffEW("CeuR",1, 1, 0, 0) +0.000063 * getSMEFTCoeffEW("CeuR",1, 1, 1, 1) -0.000013 * getSMEFTCoeffEW("CeuR",2, 2, 0, 0) +0.000063 * getSMEFTCoeffEW("CeuR",2, 2, 1, 1)  
            +0.000006 * getSMEFTCoeffEW("CedR",0, 0, 0, 0) +0.000006 * getSMEFTCoeffEW("CedR",0, 0, 1, 1) +0.000006 * getSMEFTCoeffEW("CedR",0, 0, 2, 2) +0.000006 * getSMEFTCoeffEW("CedR",1, 1, 0, 0)  
            +0.000006 * getSMEFTCoeffEW("CedR",1, 1, 1, 1) +0.000006 * getSMEFTCoeffEW("CedR",1, 1, 2, 2) +0.000006 * getSMEFTCoeffEW("CedR",2, 2, 0, 0) +0.000006 * getSMEFTCoeffEW("CedR",2, 2, 1, 1)  
            +0.000006 * getSMEFTCoeffEW("CedR",2, 2, 2, 2) -0.000026 * getSMEFTCoeffEW("Cud1R",0, 0, 0, 0) -0.000026 * getSMEFTCoeffEW("Cud1R",0, 0, 1, 1) -0.000026 * getSMEFTCoeffEW("Cud1R",0, 0, 2, 2)  
            +0.00005 * getSMEFTCoeffEW("Cud1R",1, 1, 0, 0) +0.00005 * getSMEFTCoeffEW("Cud1R",1, 1, 1, 1) +0.00005 * getSMEFTCoeffEW("Cud1R",1, 1, 2, 2) -0.000335 * getSMEFTCoeffEW("Cud1R",2, 2, 0, 0)  
            -0.000335 * getSMEFTCoeffEW("Cud1R",2, 2, 1, 1) -0.000335 * getSMEFTCoeffEW("Cud1R",2, 2, 2, 2) -0.000013 * getSMEFTCoeffEW("CluR",0, 0, 0, 0) +0.000063 * getSMEFTCoeffEW("CluR",0, 0, 1, 1)  
            -0.000013 * getSMEFTCoeffEW("CluR",1, 1, 0, 0) +0.000063 * getSMEFTCoeffEW("CluR",1, 1, 1, 1) -0.000013 * getSMEFTCoeffEW("CluR",2, 2, 0, 0) +0.000063 * getSMEFTCoeffEW("CluR",2, 2, 1, 1)  
            +0.000006 * getSMEFTCoeffEW("CldR",0, 0, 0, 0) +0.000006 * getSMEFTCoeffEW("CldR",0, 0, 1, 1) +0.000006 * getSMEFTCoeffEW("CldR",0, 0, 2, 2) +0.000006 * getSMEFTCoeffEW("CldR",1, 1, 0, 0)  
            +0.000006 * getSMEFTCoeffEW("CldR",1, 1, 1, 1) +0.000006 * getSMEFTCoeffEW("CldR",1, 1, 2, 2) +0.000006 * getSMEFTCoeffEW("CldR",2, 2, 0, 0) +0.000006 * getSMEFTCoeffEW("CldR",2, 2, 1, 1)  
            +0.000006 * getSMEFTCoeffEW("CldR",2, 2, 2, 2) -0.000006 * getSMEFTCoeffEW("CqeR",0, 0, 0, 0) -0.000006 * getSMEFTCoeffEW("CqeR",0, 0, 1, 1) -0.000006 * getSMEFTCoeffEW("CqeR",0, 0, 2, 2)  
            -0.000184 * getSMEFTCoeffEW("CqeR",1, 1, 0, 0) -0.000184 * getSMEFTCoeffEW("CqeR",1, 1, 1, 1) -0.000184 * getSMEFTCoeffEW("CqeR",1, 1, 2, 2) -0.000037 * getSMEFTCoeffEW("CqeR",2, 2, 0, 0)  
            -0.000037 * getSMEFTCoeffEW("CqeR",2, 2, 1, 1) -0.000037 * getSMEFTCoeffEW("CqeR",2, 2, 2, 2) +0.000026 * getSMEFTCoeffEW("Cqu1R",0, 0, 0, 0) -0.00005 * getSMEFTCoeffEW("Cqu1R",0, 0, 1, 1)  
            +0.000335 * getSMEFTCoeffEW("Cqu1R",0, 0, 2, 2) +0.000382 * getSMEFTCoeffEW("Cqu1R",1, 1, 0, 0) +0.000306 * getSMEFTCoeffEW("Cqu1R",1, 1, 1, 1) +0.009577 * getSMEFTCoeffEW("Cqu1R",1, 1, 2, 2)  
            -0.000497 * getSMEFTCoeffEW("Cqu1R",2, 2, 0, 0) +0.002843 * getSMEFTCoeffEW("Cqu1R",2, 2, 1, 1) +0.001915 * getSMEFTCoeffEW("Cqu1R",2, 2, 2, 2) -0.000013 * getSMEFTCoeffEW("Cqd1R",0, 0, 0, 0)  
            -0.000013 * getSMEFTCoeffEW("Cqd1R",0, 0, 1, 1) -0.000013 * getSMEFTCoeffEW("Cqd1R",0, 0, 2, 2) -0.000191 * getSMEFTCoeffEW("Cqd1R",1, 1, 0, 0) -0.000191 * getSMEFTCoeffEW("Cqd1R",1, 1, 1, 1)  
            -0.000191 * getSMEFTCoeffEW("Cqd1R",1, 1, 2, 2) +0.000249 * getSMEFTCoeffEW("Cqd1R",2, 2, 0, 0) +0.000249 * getSMEFTCoeffEW("Cqd1R",2, 2, 1, 1) +0.000249 * getSMEFTCoeffEW("Cqd1R",2, 2, 2, 2) ) * v2; 
        break;
    //} else if (f.is("BOTTOM")) {
        case 11:
            deltaNLO = (-0.001121 * getSMEFTCoeffEW("CW")  -0.000026 * getSMEFTCoeffEW("CHbox")  +0.001288 * getSMEFTCoeffEW("CHD")  -0.000009 * getSMEFTCoeffEW("CHB")   
            -0.000016 * getSMEFTCoeffEW("CHW")  +0.001622 * getSMEFTCoeffEW("CHWB")  -0.005659 * getSMEFTCoeffEW("CuWR",2, 2) -0.001063 * getSMEFTCoeffEW("CuBR",2, 2)  
            -0.000015 * getSMEFTCoeffEW("CHl1R",0, 0) -0.000015 * getSMEFTCoeffEW("CHl1R",1, 1) -0.000015 * getSMEFTCoeffEW("CHl1R",2, 2) +0.002311 * getSMEFTCoeffEW("CHl3R",0, 0)  
            +0.002311 * getSMEFTCoeffEW("CHl3R",1, 1) -0.000015 * getSMEFTCoeffEW("CHeR",0, 0) -0.000015 * getSMEFTCoeffEW("CHeR",1, 1) -0.000015 * getSMEFTCoeffEW("CHeR",2, 2)  
            -0.001495 * getSMEFTCoeffEW("CHq1R",0, 0) -0.001495 * getSMEFTCoeffEW("CHq1R",1, 1) +0.012327 * getSMEFTCoeffEW("CHq1R",2, 2) -0.003301 * getSMEFTCoeffEW("CHq3R",0, 0)  
            -0.003301 * getSMEFTCoeffEW("CHq3R",1, 1) +0.000214 * getSMEFTCoeffEW("CHq3R",2, 2) -0.002752 * getSMEFTCoeffEW("CHuR",0, 0) -0.002752 * getSMEFTCoeffEW("CHuR",1, 1)  
            +0.000091 * getSMEFTCoeffEW("CHuR",2, 2) +0.001359 * getSMEFTCoeffEW("CHdR",0, 0) +0.001359 * getSMEFTCoeffEW("CHdR",1, 1) -0.005829 * getSMEFTCoeffEW("CHdR",2, 2)  
            -0.002312 * getSMEFTCoeffEW("CllR",0, 1, 1, 0) +0.000138 * getSMEFTCoeffEW("Cqq1R",0, 0, 0, 0) +0.000033 * getSMEFTCoeffEW("Cqq1R",0, 0, 1, 1) -0.00107 * getSMEFTCoeffEW("Cqq1R",0, 0, 2, 2)  
            +0.000242 * getSMEFTCoeffEW("Cqq1R",0, 1, 1, 0) +0.002171 * getSMEFTCoeffEW("Cqq1R",0, 2, 2, 0) +0.000138 * getSMEFTCoeffEW("Cqq1R",1, 1, 1, 1) -0.00107 * getSMEFTCoeffEW("Cqq1R",1, 1, 2, 2)  
            +0.002171 * getSMEFTCoeffEW("Cqq1R",1, 2, 2, 1) +0.01464 * getSMEFTCoeffEW("Cqq1R",2, 2, 2, 2) +0.001684 * getSMEFTCoeffEW("Cqq3R",0, 0, 0, 0) +0.003602 * getSMEFTCoeffEW("Cqq3R",0, 0, 1, 1)  
            +0.006101 * getSMEFTCoeffEW("Cqq3R",0, 0, 2, 2) -0.000234 * getSMEFTCoeffEW("Cqq3R",0, 1, 1, 0) -0.003235 * getSMEFTCoeffEW("Cqq3R",0, 2, 2, 0) +0.001684 * getSMEFTCoeffEW("Cqq3R",1, 1, 1, 1)  
            +0.006101 * getSMEFTCoeffEW("Cqq3R",1, 1, 2, 2) -0.003235 * getSMEFTCoeffEW("Cqq3R",1, 2, 2, 1) +0.00132 * getSMEFTCoeffEW("Cqq3R",2, 2, 2, 2) -0.000008 * getSMEFTCoeffEW("Clq1R",0, 0, 0, 0)  
            -0.000008 * getSMEFTCoeffEW("Clq1R",0, 0, 1, 1) +0.000168 * getSMEFTCoeffEW("Clq1R",0, 0, 2, 2) -0.000008 * getSMEFTCoeffEW("Clq1R",1, 1, 0, 0) -0.000008 * getSMEFTCoeffEW("Clq1R",1, 1, 1, 1)  
            +0.000168 * getSMEFTCoeffEW("Clq1R",1, 1, 2, 2) -0.000008 * getSMEFTCoeffEW("Clq1R",2, 2, 0, 0) -0.000008 * getSMEFTCoeffEW("Clq1R",2, 2, 1, 1) +0.000168 * getSMEFTCoeffEW("Clq1R",2, 2, 2, 2)  
            +0.0003 * getSMEFTCoeffEW("Clq3R",0, 0, 0, 0) +0.0003 * getSMEFTCoeffEW("Clq3R",0, 0, 1, 1) -0.000585 * getSMEFTCoeffEW("Clq3R",0, 0, 2, 2) +0.0003 * getSMEFTCoeffEW("Clq3R",1, 1, 0, 0)  
            +0.0003 * getSMEFTCoeffEW("Clq3R",1, 1, 1, 1) -0.000585 * getSMEFTCoeffEW("Clq3R",1, 1, 2, 2) +0.0003 * getSMEFTCoeffEW("Clq3R",2, 2, 0, 0) +0.0003 * getSMEFTCoeffEW("Clq3R",2, 2, 1, 1)  
            -0.000585 * getSMEFTCoeffEW("Clq3R",2, 2, 2, 2) +0.000075 * getSMEFTCoeffEW("CuuR",0, 0, 0, 0) +0.000133 * getSMEFTCoeffEW("CuuR",0, 0, 1, 1) +0.001721 * getSMEFTCoeffEW("CuuR",0, 0, 2, 2)  
            +0.000018 * getSMEFTCoeffEW("CuuR",0, 1, 1, 0) +0.00104 * getSMEFTCoeffEW("CuuR",0, 2, 2, 0) +0.000075 * getSMEFTCoeffEW("CuuR",1, 1, 1, 1) +0.001721 * getSMEFTCoeffEW("CuuR",1, 1, 2, 2)  
            +0.00104 * getSMEFTCoeffEW("CuuR",1, 2, 2, 1) +0.000019 * getSMEFTCoeffEW("CddR",0, 0, 0, 0) +0.000033 * getSMEFTCoeffEW("CddR",0, 0, 1, 1) -0.000042 * getSMEFTCoeffEW("CddR",0, 0, 2, 2)  
            +0.000004 * getSMEFTCoeffEW("CddR",0, 1, 1, 0) -0.000006 * getSMEFTCoeffEW("CddR",0, 2, 2, 0) +0.000019 * getSMEFTCoeffEW("CddR",1, 1, 1, 1) -0.000042 * getSMEFTCoeffEW("CddR",1, 1, 2, 2)  
            -0.000006 * getSMEFTCoeffEW("CddR",1, 2, 2, 1) -0.000067 * getSMEFTCoeffEW("CddR",2, 2, 2, 2) -0.000017 * getSMEFTCoeffEW("CeuR",0, 0, 0, 0) -0.000017 * getSMEFTCoeffEW("CeuR",0, 0, 1, 1)  
            -0.000017 * getSMEFTCoeffEW("CeuR",1, 1, 0, 0) -0.000017 * getSMEFTCoeffEW("CeuR",1, 1, 1, 1) -0.000017 * getSMEFTCoeffEW("CeuR",2, 2, 0, 0) -0.000017 * getSMEFTCoeffEW("CeuR",2, 2, 1, 1)  
            +0.000008 * getSMEFTCoeffEW("CedR",0, 0, 0, 0) +0.000008 * getSMEFTCoeffEW("CedR",0, 0, 1, 1) -0.000029 * getSMEFTCoeffEW("CedR",0, 0, 2, 2) +0.000008 * getSMEFTCoeffEW("CedR",1, 1, 0, 0)  
            +0.000008 * getSMEFTCoeffEW("CedR",1, 1, 1, 1) -0.000029 * getSMEFTCoeffEW("CedR",1, 1, 2, 2) +0.000008 * getSMEFTCoeffEW("CedR",2, 2, 0, 0) +0.000008 * getSMEFTCoeffEW("CedR",2, 2, 1, 1)  
            -0.000029 * getSMEFTCoeffEW("CedR",2, 2, 2, 2) -0.000033 * getSMEFTCoeffEW("Cud1R",0, 0, 0, 0) -0.000033 * getSMEFTCoeffEW("Cud1R",0, 0, 1, 1) +0.000042 * getSMEFTCoeffEW("Cud1R",0, 0, 2, 2)  
            -0.000033 * getSMEFTCoeffEW("Cud1R",1, 1, 0, 0) -0.000033 * getSMEFTCoeffEW("Cud1R",1, 1, 1, 1) +0.000042 * getSMEFTCoeffEW("Cud1R",1, 1, 2, 2) -0.00043 * getSMEFTCoeffEW("Cud1R",2, 2, 0, 0)  
            -0.00043 * getSMEFTCoeffEW("Cud1R",2, 2, 1, 1) +0.001531 * getSMEFTCoeffEW("Cud1R",2, 2, 2, 2) -0.000017 * getSMEFTCoeffEW("CluR",0, 0, 0, 0) -0.000017 * getSMEFTCoeffEW("CluR",0, 0, 1, 1)  
            -0.000017 * getSMEFTCoeffEW("CluR",1, 1, 0, 0) -0.000017 * getSMEFTCoeffEW("CluR",1, 1, 1, 1) -0.000017 * getSMEFTCoeffEW("CluR",2, 2, 0, 0) -0.000017 * getSMEFTCoeffEW("CluR",2, 2, 1, 1)  
            +0.000008 * getSMEFTCoeffEW("CldR",0, 0, 0, 0) +0.000008 * getSMEFTCoeffEW("CldR",0, 0, 1, 1) -0.000029 * getSMEFTCoeffEW("CldR",0, 0, 2, 2) +0.000008 * getSMEFTCoeffEW("CldR",1, 1, 0, 0)  
            +0.000008 * getSMEFTCoeffEW("CldR",1, 1, 1, 1) -0.000029 * getSMEFTCoeffEW("CldR",1, 1, 2, 2) +0.000008 * getSMEFTCoeffEW("CldR",2, 2, 0, 0) +0.000008 * getSMEFTCoeffEW("CldR",2, 2, 1, 1)  
            -0.000029 * getSMEFTCoeffEW("CldR",2, 2, 2, 2) -0.000008 * getSMEFTCoeffEW("CqeR",0, 0, 0, 0) -0.000008 * getSMEFTCoeffEW("CqeR",0, 0, 1, 1) -0.000008 * getSMEFTCoeffEW("CqeR",0, 0, 2, 2)  
            -0.000008 * getSMEFTCoeffEW("CqeR",1, 1, 0, 0) -0.000008 * getSMEFTCoeffEW("CqeR",1, 1, 1, 1) -0.000008 * getSMEFTCoeffEW("CqeR",1, 1, 2, 2) +0.000168 * getSMEFTCoeffEW("CqeR",2, 2, 0, 0)  
            +0.000168 * getSMEFTCoeffEW("CqeR",2, 2, 1, 1) +0.000168 * getSMEFTCoeffEW("CqeR",2, 2, 2, 2) +0.000033 * getSMEFTCoeffEW("Cqu1R",0, 0, 0, 0) +0.000033 * getSMEFTCoeffEW("Cqu1R",0, 0, 1, 1)  
            +0.00043 * getSMEFTCoeffEW("Cqu1R",0, 0, 2, 2) +0.000033 * getSMEFTCoeffEW("Cqu1R",1, 1, 0, 0) +0.000033 * getSMEFTCoeffEW("Cqu1R",1, 1, 1, 1) +0.00043 * getSMEFTCoeffEW("Cqu1R",1, 1, 2, 2)  
            -0.00107 * getSMEFTCoeffEW("Cqu1R",2, 2, 0, 0) -0.00107 * getSMEFTCoeffEW("Cqu1R",2, 2, 1, 1) -0.008745 * getSMEFTCoeffEW("Cqu1R",2, 2, 2, 2) -0.000017 * getSMEFTCoeffEW("Cqd1R",0, 0, 0, 0)  
            -0.000017 * getSMEFTCoeffEW("Cqd1R",0, 0, 1, 1) +0.000021 * getSMEFTCoeffEW("Cqd1R",0, 0, 2, 2) -0.000017 * getSMEFTCoeffEW("Cqd1R",1, 1, 0, 0) -0.000017 * getSMEFTCoeffEW("Cqd1R",1, 1, 1, 1)  
            +0.000021 * getSMEFTCoeffEW("Cqd1R",1, 1, 2, 2) +0.000535 * getSMEFTCoeffEW("Cqd1R",2, 2, 0, 0) +0.000535 * getSMEFTCoeffEW("Cqd1R",2, 2, 1, 1) -0.001135 * getSMEFTCoeffEW("Cqd1R",2, 2, 2, 2) ) * v2; 
        break;
    //} else {
        default:
            deltaNLO = 0.;
    }
       
    return dR0_f + cNLOd6 * deltaNLO;
}

const double NPSMEFTd6General::R0_f(const Particle f) const
{
    return (trueSM.R0_f(f) + deltaR0_f(f));
}

////////////////////////////////////////////////////////////////////////

const double NPSMEFTd6General::deltaGV_f(const Particle p) const {
    return (deltaGL_f(p) + deltaGR_f(p));
}

const double NPSMEFTd6General::deltaGA_f(const Particle p) const {
    return (deltaGL_f(p) - deltaGR_f(p));
}

const double NPSMEFTd6General::deltaGL_f(const Particle p) const {
    double I3p = p.getIsospin(), Qp = p.getCharge();
    double CHF1 = CHF1_diag(p);
    double CHF3 = CHF3_diag(p);
    double NPindirect;

    //    NPindirect = -I3p / 4.0 * (getSMEFTCoeffEW("CHD") * v2_over_LambdaNP2 + 2.0 * delta_GF)
    //                - Qp * sW2_tree / 4.0 / (cW2_tree - sW2_tree)
    //                *((4.0 * cW_tree / sW_tree * getSMEFTCoeffEW("CHWB") + getSMEFTCoeffEW("CHD")) * v2_over_LambdaNP2 + 2.0 * delta_GF);

    NPindirect = (I3p - Qp * sW2_tree) * delta_UgNC + Qp * delta_QgNC;

    double NPdirect = -0.5 * (CHF1 - 2.0 * I3p * CHF3) * v2;
    return (NPindirect + NPdirect);
}

const double NPSMEFTd6General::deltaGR_f(const Particle p) const {
    double Qp = p.getCharge();
    double CHf = CHf_diag(p);
    double NPindirect;

    //    NPindirect = -Qp * sW2_tree / 4.0 / (cW2_tree - sW2_tree)
    //                *((4.0 * cW_tree / sW_tree * getSMEFTCoeffEW("CHWB") + getSMEFTCoeffEW("CHD")) * v2_over_LambdaNP2 + 2.0 * delta_GF);

    NPindirect = (-Qp * sW2_tree) * delta_UgNC + Qp * delta_QgNC;

    double NPdirect = -0.5 * CHf * v2;
    return (NPindirect + NPdirect);
}


const double NPSMEFTd6General::deltaGL_f_mu(const Particle p, const double mu) const {
    double I3p = p.getIsospin(), Qp = p.getCharge();
    double CHF;
    double NPindirect;
    
    // Parameters from the indirect corrections depending on the RG scale
    double d_UgNC_mu, d_QgNC_mu;
    
    //  NP indirect corrections to EW fermion couplings
    d_UgNC_mu = delU_gNC(mu);
    d_QgNC_mu = delQ_gNC(mu);    
    
    NPindirect = (I3p - Qp * sW2_tree) * d_UgNC_mu + Qp * d_QgNC_mu;
    
    // Direct contribution  
    switch(p.getIndex()){
    //if (p.is("NEUTRINO_1"))
        case 0:
            CHF = getSMEFTCoeff("CHl1R", 0, 0, mu) - getSMEFTCoeff("CHl3R", 0, 0, mu);
            break;
    //else if (p.is("ELECTRON"))
        case 1:
            CHF = getSMEFTCoeff("CHl1R", 0, 0, mu) + getSMEFTCoeff("CHl3R", 0, 0, mu);
            break;
    //else if (p.is("NEUTRINO_2"))
        case 2:
            CHF = getSMEFTCoeff("CHl1R", 1, 1, mu) - getSMEFTCoeff("CHl3R", 1, 1, mu);
            break;
    //else if (p.is("MU"))
        case 3:
            CHF = getSMEFTCoeff("CHl1R", 1, 1, mu) + getSMEFTCoeff("CHl3R", 1, 1, mu);
            break;
    //else if (p.is("NEUTRINO_3"))
        case 4:
            CHF = getSMEFTCoeff("CHl1R", 2, 2, mu) - getSMEFTCoeff("CHl3R", 2, 2, mu);
            break;
    //else if (p.is("TAU"))
        case 5:
            CHF = getSMEFTCoeff("CHl1R", 2, 2, mu) + getSMEFTCoeff("CHl3R", 2, 2, mu);
            break;
    //else if (p.is("UP"))
        case 6:
            CHF = getSMEFTCoeff("CHq1R", 0, 0, mu) - getSMEFTCoeff("CHq3R", 0, 0, mu);
            break;
        case 7:
            CHF = getSMEFTCoeff("CHq1R", 0, 0, mu) + getSMEFTCoeff("CHq3R", 0, 0, mu);
            break;
        case 8:
            CHF = getSMEFTCoeff("CHq1R", 1, 1, mu) - getSMEFTCoeff("CHq3R", 1, 1, mu);
            break;
    //else if (p.is("STRANGE"))
        case 9:
            CHF = getSMEFTCoeff("CHq1R", 1, 1, mu) + getSMEFTCoeff("CHq3R", 1, 1, mu);
            break;
    //else if (p.is("TOP"))
        case 10:
            CHF = getSMEFTCoeff("CHq1R", 2, 2, mu) - getSMEFTCoeff("CHq3R", 2, 2, mu);
            break;
    //else if (p.is("BOTTOM"))
        case 11:
            CHF = getSMEFTCoeff("CHq1R", 2, 2, mu) + getSMEFTCoeff("CHq3R", 2, 2, mu);
            break;
    //else
        default:
            throw std::runtime_error("NPSMEFTd6General::deltaGL_f_mu(): wrong argument");
    }

    double NPdirect = -0.5 * CHF * v2;
    return (NPindirect + NPdirect);
}

const double NPSMEFTd6General::deltaGR_f_mu(const Particle p, const double mu) const {
    double Qp = p.getCharge();
    double CHf;
    double NPindirect;
    
    // Parameters from the indirect corrections depending on the RG scale
    double d_UgNC_mu, d_QgNC_mu;
    
    //  NP indirect corrections to EW fermion couplings
    d_UgNC_mu = delU_gNC(mu);
    d_QgNC_mu = delQ_gNC(mu);   
    
    NPindirect = (-Qp * sW2_tree) * d_UgNC_mu + Qp * d_QgNC_mu;
    
    // Direct contribution  
    switch(p.getIndex()){
    //if (p.is("NEUTRINO_1") || p.is("NEUTRINO_2") || p.is("NEUTRINO_3"))
        case 0:
            CHf = 0.0;
            break;
    //else if (p.is("ELECTRON"))
        case 1:
            CHf = getSMEFTCoeff("CHeR", 0, 0, mu);
            break;
        case 2:
            CHf = 0.;
            break;
    //else if (p.is("MU"))
        case 3:
            CHf = getSMEFTCoeff("CHeR", 1, 1, mu);
            break;
        case 4:
            CHf = 0.;
            break;
    //else if (p.is("TAU"))
        case 5:
            CHf = getSMEFTCoeff("CHeR", 2, 2, mu);
            break;
    //else if (p.is("UP"))
        case 6:
            CHf = getSMEFTCoeff("CHuR", 0, 0, mu);
            break;
    //else if (p.is("DOWN"))
        case 7:
            CHf = getSMEFTCoeff("CHdR", 0, 0, mu);
            break;
        case 8:
            CHf = getSMEFTCoeff("CHuR", 1, 1, mu);
            break;
        case 9:
            CHf = getSMEFTCoeff("CHdR", 1, 1, mu);
            break;
        case 10:
            CHf = getSMEFTCoeff("CHuR", 2, 2, mu);
            break;
    //else if (p.is("BOTTOM"))
        case 11:
            CHf = getSMEFTCoeff("CHdR", 2, 2, mu);
            break;
    //else
        default:
            throw std::runtime_error("NPSMEFTd6General::deltaGR_f_mu(): wrong argument");
    }

    double NPdirect = -0.5 * CHf * v2;
    return (NPindirect + NPdirect);
}


gslpp::complex NPSMEFTd6General::deltaGL_Wff(const Particle pbar, const Particle p) const {
    if (pbar.getIndex() + 1 != p.getIndex() || pbar.getIndex() % 2 != 0)
        throw std::runtime_error("NPSMEFTd6General::deltaGL_Wff(): Not implemented");

    //double CHF3 = CHF3_diag(pbar);
    gslpp::complex CHF3 = CHF3CC_diag(pbar);
    
    gslpp::complex NPindirect;

    //    NPindirect = -cW2_tree / 4.0 / (cW2_tree - sW2_tree)
    //                * ((4.0 * sW_tree / cW_tree * getSMEFTCoeffEW("CHWB") + getSMEFTCoeffEW("CHD")) * v2_over_LambdaNP2 + 2.0 * delta_GF);

    NPindirect = gslpp::complex(delta_UgCC, 0.0, false);
    
    return (NPindirect + CHF3 * v2 );
}

gslpp::complex NPSMEFTd6General::deltaGR_Wff(const Particle pbar, const Particle p) const {
    if (pbar.getIndex() + 1 != p.getIndex() || pbar.getIndex() % 2 != 0)
        throw std::runtime_error("NPSMEFTd6General::deltaGR_Wff(): Not implemented");

    gslpp::complex CHud = CHud_diag(pbar);
    return (0.5 * CHud * v2);
}


gslpp::complex NPSMEFTd6General::deltaGL_Wff_mu(const Particle pbar, const Particle p, const double mu) const {
    if (pbar.getIndex() + 1 != p.getIndex() || pbar.getIndex() % 2 != 0)
        throw std::runtime_error("NPSMEFTd6General::deltaGL_Wff(): Not implemented");

    double CHF3;
    double NPindirect;

    //  NP indirect corrections to EW fermion couplings
    NPindirect = delU_gCC(mu);
    
    // Direct contribution
    if (pbar.is("NEUTRINO_1") || pbar.is("ELECTRON"))
        CHF3 = getSMEFTCoeff("CHl3R", 0, 0, mu);
    else if (pbar.is("NEUTRINO_2") || pbar.is("MU"))
        CHF3 = getSMEFTCoeff("CHl3R", 1, 1, mu);
    else if (pbar.is("NEUTRINO_3") || pbar.is("TAU"))
        CHF3 = getSMEFTCoeff("CHl3R", 2, 2, mu);
    else if (pbar.is("UP") || pbar.is("DOWN"))
        CHF3 = getSMEFTCoeff("CHq3R", 0, 0, mu);
    else if (pbar.is("CHARM") || pbar.is("STRANGE"))
        CHF3 = getSMEFTCoeff("CHq3R", 1, 1, mu);
    else if (pbar.is("TOP") || pbar.is("BOTTOM"))
        CHF3 = getSMEFTCoeff("CHq3R", 2, 2, mu);
    else
        throw std::runtime_error("NPSMEFTd6General::deltaGL_Wff_mu(): wrong argument");

    double NPdirect = CHF3 * v2;
    return (NPindirect + NPdirect);
}

gslpp::complex NPSMEFTd6General::deltaGR_Wff_mu(const Particle pbar, const Particle p, const double mu) const {
    if (pbar.getIndex() + 1 != p.getIndex() || pbar.getIndex() % 2 != 0)
        throw std::runtime_error("NPSMEFTd6General::deltaGR_Wff_mu(): Not implemented");

    gslpp::complex CHud;
    
    if (!pbar.is("QUARK") || pbar.getIndex() % 2 != 0)
        throw std::runtime_error("NPSMEFTd6General::deltaGR_Wff_mu(): wrong argument");

    if (pbar.is("UP"))
        CHud = gslpp::complex(getSMEFTCoeff("CHudR", 0, 0, mu), getSMEFTCoeff("CHudI", 0, 0, mu), false);
    else if (pbar.is("CHARM"))
        CHud = gslpp::complex(getSMEFTCoeff("CHudR", 1, 1, mu), getSMEFTCoeff("CHudI", 1, 1, mu), false);
    else if (pbar.is("TOP"))
        CHud = gslpp::complex(getSMEFTCoeff("CHudR", 2, 2, mu), getSMEFTCoeff("CHudI", 2, 2, mu), false);
    else
        throw std::runtime_error("NPSMEFTd6General::deltaGR_Wff_mu(): wrong argument");    
    
    return (0.5 * CHud * v2);
}

    // Modifications of Higgs couplings

const double NPSMEFTd6General::deltaG_hgg() const {
    return (getSMEFTCoeffEW("CHG") * v2 / v());
}

const double NPSMEFTd6General::deltaG_hggRatio() const {
    double m_t = mtpole;
    double m_b = quarks[BOTTOM].getMass();
    double m_c = quarks[CHARM].getMass();
    double m_s = quarks[STRANGE].getMass();
    double tau_t = 4.0 * m_t * m_t / mHl / mHl;
    double tau_b = 4.0 * m_b * m_b / mHl / mHl;
    double tau_c = 4.0 * m_c * m_c / mHl / mHl;
    double tau_s = 4.0 * m_s * m_s / mHl / mHl;
    double aSPiv = AlsMz / 16.0 / M_PI / v();
    gslpp::complex gSM, dg;
    gslpp::complex dKappa_t = cLHd6 * deltaG_hff(quarks[TOP]) / (-m_t / v());
    gslpp::complex dKappa_b = cLHd6 * deltaG_hff(quarks[BOTTOM]) / (-m_b / v());
    gslpp::complex dKappa_c = cLHd6 * deltaG_hff(quarks[CHARM]) / (-m_c / v());
    gslpp::complex dKappa_s = cLHd6 * deltaG_hff(quarks[STRANGE]) / (-m_s / v());
    
    double deltaloc = deltaG_hgg();

    gSM = aSPiv * (AH_f(tau_t) + AH_f(tau_b) + AH_f(tau_c));

    dg = deltaloc / gSM + (aSPiv / gSM) * (dKappa_t * AH_f(tau_t) + dKappa_b * AH_f(tau_b) + dKappa_c * AH_f(tau_c) + dKappa_s * AH_f(tau_s));

    return dg.real();
}

const double NPSMEFTd6General::deltaG1_hWW() const {
    return ((2.0 * getSMEFTCoeffEW("CHW")) * v2 / v());
}

const double NPSMEFTd6General::deltaG2_hWW() const {
    return 0.0;
}

const double NPSMEFTd6General::deltaG3_hWW() const {
    double NPindirect;

    //    NPindirect = 2.0 * cW2_tree * Mz * Mz / v()
    //                * (delta_h - 1.0 / 2.0 / (cW2_tree - sW2_tree)
    //                * ((4.0 * sW_tree * cW_tree * getSMEFTCoeffEW("CHWB") + cW2_tree * getSMEFTCoeffEW("CHD")) * v2_over_LambdaNP2 + delta_GF));

    NPindirect = 2.0 * cW2_tree * Mz * Mz / v()
            * (delta_h + 0.5 * delta_GF + 2.0 * delta_e - delta_sW2);

    return NPindirect;
}

const double NPSMEFTd6General::deltaG1_hZZ() const {
    return ( delta_ZZ / v());
}

const double NPSMEFTd6General::deltaG2_hZZ() const {
    return 0.0;
}

const double NPSMEFTd6General::deltaG3_hZZ() const {
    //    double NPindirect = Mz * Mz / v() * (-0.5 * getSMEFTCoeffEW("CHD") * v2_over_LambdaNP2 + delta_h - 0.5 * delta_GF);
    double NPindirect = Mz * Mz / v() * (delta_Z + delta_h + 0.5 * delta_GF + 2.0 * delta_e - (1.0 - sW2_tree / cW2_tree) * delta_sW2);
    double NPdirect = Mz * Mz / v() * getSMEFTCoeffEW("CHD") * v2;

    return (NPindirect + NPdirect);
}

const double NPSMEFTd6General::deltaG1_hZA() const {
    return ( delta_AZ / v());
}

const double NPSMEFTd6General::deltaG1_hZARatio() const {
    double m_t = mtpole;
    double m_b = quarks[BOTTOM].getMass();
    double m_c = quarks[CHARM].getMass();
    double m_s = quarks[STRANGE].getMass();
    double m_tau = leptons[TAU].getMass();
    double m_mu = leptons[MU].getMass();

    double M_w_2 = (trueSM.Mw())*(trueSM.Mw());

    double Qt = quarks[TOP].getCharge();
    double Qb = quarks[BOTTOM].getCharge();
    double Qc = quarks[CHARM].getCharge();
    double Qs = quarks[STRANGE].getCharge();
    double Qtau = leptons[TAU].getCharge();
    double Qmu = leptons[MU].getCharge();

    double tau_t = 4.0 * m_t * m_t / mHl / mHl;
    double tau_b = 4.0 * m_b * m_b / mHl / mHl;
    double tau_c = 4.0 * m_c * m_c / mHl / mHl;
    double tau_s = 4.0 * m_s * m_s / mHl / mHl;
    double tau_tau = 4.0 * m_tau * m_tau / mHl / mHl;
    double tau_mu = 4.0 * m_mu * m_mu / mHl / mHl;
    double tau_W = 4.0 * M_w_2 / mHl / mHl;

    double lambda_t = 4.0 * m_t * m_t / Mz / Mz;
    double lambda_b = 4.0 * m_b * m_b / Mz / Mz;
    double lambda_c = 4.0 * m_c * m_c / Mz / Mz;
    double lambda_s = 4.0 * m_s * m_s / Mz / Mz;
    double lambda_tau = 4.0 * m_tau * m_tau / Mz / Mz;
    double lambda_mu = 4.0 * m_mu * m_mu / Mz / Mz;
    double lambda_W = 4.0 * M_w_2 / Mz / Mz;
    double alpha2 = sqrt(2.0) * GF * M_w_2 / M_PI;
    double aPiv = sqrt(ale * alpha2) / 4.0 / M_PI / v();

    //  mod. of Higgs couplings
    gslpp::complex gSM, dg;
    gslpp::complex dKappa_t = cLHd6 * deltaG_hff(quarks[TOP]) / (-m_t / v());
    gslpp::complex dKappa_b = cLHd6 * deltaG_hff(quarks[BOTTOM]) / (-m_b / v());
    gslpp::complex dKappa_c = cLHd6 * deltaG_hff(quarks[CHARM]) / (-m_c / v());
    gslpp::complex dKappa_s = cLHd6 * deltaG_hff(quarks[STRANGE]) / (-m_s / v());
    gslpp::complex dKappa_tau = cLHd6 * deltaG_hff(leptons[TAU]) / (-m_tau / v());
    gslpp::complex dKappa_mu = cLHd6 * deltaG_hff(leptons[MU]) / (-m_mu / v());
    double dKappa_W = cLHd6 * (0.5 * v() / M_w_2) * deltaG3_hWW();

    //  mod of EW vector couplings vf =2 gvf    
    double vSMt = 2.0 * (quarks[TOP].getIsospin()) - 4.0 * Qt * sW2_tree;
    double vSMb = 2.0 * (quarks[BOTTOM].getIsospin()) - 4.0 * Qb * sW2_tree;
    double vSMc = 2.0 * (quarks[CHARM].getIsospin()) - 4.0 * Qc * sW2_tree;
    double vSMs = 2.0 * (quarks[STRANGE].getIsospin()) - 4.0 * Qs * sW2_tree;
    double vSMtau = 2.0 * (leptons[TAU].getIsospin()) - 4.0 * Qtau * sW2_tree;
    double vSMmu = 2.0 * (leptons[MU].getIsospin()) - 4.0 * Qmu * sW2_tree;

    double dvSMt = cLHd6 * 2.0 * deltaGV_f(quarks[TOP]);
    double dvSMb = cLHd6 * 2.0 * deltaGV_f(quarks[BOTTOM]);
    double dvSMc = cLHd6 * 2.0 * deltaGV_f(quarks[CHARM]);
    double dvSMs = cLHd6 * 2.0 * deltaGV_f(quarks[STRANGE]);
    double dvSMtau = cLHd6 * 2.0 * deltaGV_f(leptons[TAU]);
    double dvSMmu = cLHd6 * 2.0 * deltaGV_f(leptons[MU]);

    double deltaloc = deltaG1_hZA();

    gSM = -aPiv * ((3.0 * vSMt * Qt * AHZga_f(tau_t, lambda_t) +
            3.0 * vSMb * Qb * AHZga_f(tau_b, lambda_b) +
            3.0 * vSMc * Qc * AHZga_f(tau_c, lambda_c) +
            3.0 * vSMs * Qs * AHZga_f(tau_s, lambda_s) +
            vSMtau * Qtau * AHZga_f(tau_tau, lambda_tau) +
            vSMmu * Qmu * AHZga_f(tau_mu, lambda_mu)) / cW_tree +
            AHZga_W(tau_W, lambda_W));

    dg = deltaloc / gSM - (aPiv / gSM) * (
            (3.0 * vSMt * dKappa_t * Qt * AHZga_f(tau_t, lambda_t) +
            3.0 * vSMb * dKappa_b * Qb * AHZga_f(tau_b, lambda_b) +
            3.0 * vSMc * dKappa_c * Qc * AHZga_f(tau_c, lambda_c) +
            3.0 * vSMs * dKappa_s * Qs * AHZga_f(tau_s, lambda_s) +
            dKappa_tau * vSMtau * Qtau * AHZga_f(tau_tau, lambda_tau) +
            dKappa_mu * vSMmu * Qmu * AHZga_f(tau_mu, lambda_mu)) / cW_tree +
            dKappa_W * AHZga_W(tau_W, lambda_W) +
            (3.0 * dvSMt * Qt * AHZga_f(tau_t, lambda_t) +
            3.0 * dvSMb * Qb * AHZga_f(tau_b, lambda_b) +
            3.0 * dvSMc * Qc * AHZga_f(tau_c, lambda_c) +
            3.0 * dvSMs * Qs * AHZga_f(tau_s, lambda_s) +
            dvSMtau * Qtau * AHZga_f(tau_tau, lambda_tau) +
            dvSMmu * Qmu * AHZga_f(tau_mu, lambda_mu)) / cW_tree
            );

    return dg.real();
}

const double NPSMEFTd6General::deltaG2_hZA() const {
    return 0.0;
}

const double NPSMEFTd6General::deltaG_hAA() const {
    return (delta_AA / v());
}

const double NPSMEFTd6General::deltaG_hAARatio() const {
    double m_t = mtpole;
    double m_b = quarks[BOTTOM].getMass();
    double m_c = quarks[CHARM].getMass();
    double m_s = quarks[STRANGE].getMass();
    double m_tau = leptons[TAU].getMass();
    double m_mu = leptons[MU].getMass();

    double M_w_2 = (trueSM.Mw())*(trueSM.Mw());

    double Qt = quarks[TOP].getCharge();
    double Qb = quarks[BOTTOM].getCharge();
    double Qc = quarks[CHARM].getCharge();
    double Qs = quarks[STRANGE].getCharge();
    double Qtau = leptons[TAU].getCharge();
    double Qmu = leptons[MU].getCharge();

    double tau_t = 4.0 * m_t * m_t / mHl / mHl;
    double tau_b = 4.0 * m_b * m_b / mHl / mHl;
    double tau_c = 4.0 * m_c * m_c / mHl / mHl;
    double tau_s = 4.0 * m_s * m_s / mHl / mHl;
    double tau_tau = 4.0 * m_tau * m_tau / mHl / mHl;
    double tau_mu = 4.0 * m_mu * m_mu / mHl / mHl;
    double tau_W = 4.0 * M_w_2 / mHl / mHl;

    double aPiv = ale / 8.0 / M_PI / v();
    gslpp::complex gSM, dg;
    gslpp::complex dKappa_t = cLHd6 * deltaG_hff(quarks[TOP]) / (-m_t / v());
    gslpp::complex dKappa_b = cLHd6 * deltaG_hff(quarks[BOTTOM]) / (-m_b / v());
    gslpp::complex dKappa_c = cLHd6 * deltaG_hff(quarks[CHARM]) / (-m_c / v());
    gslpp::complex dKappa_s = cLHd6 * deltaG_hff(quarks[STRANGE]) / (-m_s / v());
    gslpp::complex dKappa_tau = cLHd6 * deltaG_hff(leptons[TAU]) / (-m_tau / v());
    gslpp::complex dKappa_mu = cLHd6 * deltaG_hff(leptons[MU]) / (-m_mu / v());
    double dKappa_W = cLHd6 * (0.5 * v() / M_w_2) * deltaG3_hWW();

    double deltaloc = deltaG_hAA();

    gSM = aPiv * (3.0 * Qt * Qt * AH_f(tau_t) +
            3.0 * Qb * Qb * AH_f(tau_b) +
            3.0 * Qc * Qc * AH_f(tau_c) +
            3.0 * Qs * Qs * AH_f(tau_s) +
            Qtau * Qtau * AH_f(tau_tau) +
            Qmu * Qmu * AH_f(tau_mu) +
            AH_W(tau_W));

    dg = deltaloc / gSM + (aPiv / gSM) * (
            3.0 * Qt * Qt * dKappa_t * AH_f(tau_t) +
            3.0 * Qb * Qb * dKappa_b * AH_f(tau_b) +
            3.0 * Qc * Qc * dKappa_c * AH_f(tau_c) +
            3.0 * Qs * Qs * dKappa_s * AH_f(tau_s) +
            dKappa_tau * Qtau * Qtau * AH_f(tau_tau) +
            dKappa_mu * Qmu * Qmu * AH_f(tau_mu) +
            dKappa_W * AH_W(tau_W)
            );

    return dg.real();
}

gslpp::complex NPSMEFTd6General::deltaG_hff(const Particle p) const {
    // The effects of the RG running are neglected. 
    double mf;
    if (p.is("TOP"))
        //mf = p.getMass(); // m_t(m_t)
        mf = mtpole; // pole mass
    else
        mf = p.getMass();
    gslpp::complex CfH = CfH_diag(p);
    return (-mf / v() * (delta_h - 0.5 * delta_GF)
            + CfH * v2 / sqrt(2.0));
}

const double NPSMEFTd6General::deltaG_hhhRatio() const {
    double dg;

    dg = -0.5 * delta_GF + 3.0 * delta_h - 2.0 * getSMEFTCoeffEW("CH") * v2 * v2 / mHl / mHl;

    return dg;
}


    // Modifications of Higgs couplings  (scale dependent)

const double NPSMEFTd6General::deltaG_hgg_mu(const double mu) const {
    return (getSMEFTCoeff("CHG", mu) * v2 / v());
}

const double NPSMEFTd6General::deltaG_hggRatio_mu(const double mu) const {
    double m_t = mtpole;
    double m_b = quarks[BOTTOM].getMass();
    double m_c = quarks[CHARM].getMass();
    double m_s = quarks[STRANGE].getMass();
    double tau_t = 4.0 * m_t * m_t / mHl / mHl;
    double tau_b = 4.0 * m_b * m_b / mHl / mHl;
    double tau_c = 4.0 * m_c * m_c / mHl / mHl;
    double tau_s = 4.0 * m_s * m_s / mHl / mHl;
    double aSPiv = AlsMz / 16.0 / M_PI / v();
    gslpp::complex gSM, dg;
    gslpp::complex dKappa_t = cLHd6 * deltaG_hff_mu(quarks[TOP], mu) / (-m_t / v());
    gslpp::complex dKappa_b = cLHd6 * deltaG_hff_mu(quarks[BOTTOM], mu) / (-m_b / v());
    gslpp::complex dKappa_c = cLHd6 * deltaG_hff_mu(quarks[CHARM], mu) / (-m_c / v());
    gslpp::complex dKappa_s = cLHd6 * deltaG_hff_mu(quarks[STRANGE], mu) / (-m_s / v());
    
    double deltaloc = deltaG_hgg_mu(mu);

    gSM = aSPiv * (AH_f(tau_t) + AH_f(tau_b) + AH_f(tau_c));

    dg = deltaloc / gSM + (aSPiv / gSM) * (dKappa_t * AH_f(tau_t) + dKappa_b * AH_f(tau_b) + dKappa_c * AH_f(tau_c) + dKappa_s * AH_f(tau_s));

    return dg.real();
}

const double NPSMEFTd6General::deltaG1_hWW_mu(const double mu) const {
    return ((2.0 * getSMEFTCoeff("CHW", mu)) * v2 / v());
}

const double NPSMEFTd6General::deltaG2_hWW_mu(const double mu) const {
    return 0.0;
}

const double NPSMEFTd6General::deltaG3_hWW_mu(const double mu) const {
    double NPindirect;

    double d_h_mu, d_GF_mu;
    
    d_h_mu = (-getSMEFTCoeff("CHD", mu) / 4.0 + getSMEFTCoeff("CHbox", mu)) * v2;
    d_GF_mu = ((getSMEFTCoeff("CHl3R", 0, 0, mu) + getSMEFTCoeff("CHl3R", 1, 1, mu) - 0.5 * (getSMEFTCoeff("CllR", 0, 1, 1, 0, mu) + getSMEFTCoeff("CllR", 1, 0, 0, 1, mu))) * v2);

    NPindirect = 2.0 * cW2_tree * Mz * Mz / v()
            * (d_h_mu + 0.5 * d_GF_mu + 2.0 * del_e_mu(mu) - del_sW2_mu(mu));

    return NPindirect;
}

const double NPSMEFTd6General::deltaG1_hZZ_mu(const double mu) const {
    
    double d_ZZ_mu;
    
    // delta_ZZ as function os scale
    d_ZZ_mu = (cW2_tree * getSMEFTCoeff("CHW", mu) + sW2_tree * getSMEFTCoeff("CHB", mu) + sW_tree * cW_tree * getSMEFTCoeff("CHWB", mu)) * v2;

    return ( d_ZZ_mu / v());
}

const double NPSMEFTd6General::deltaG2_hZZ_mu(const double mu) const {
    return 0.0;
}

const double NPSMEFTd6General::deltaG3_hZZ_mu(const double mu) const {
    
    double d_h_mu, d_GF_mu;
    
    d_h_mu = (-getSMEFTCoeff("CHD", mu) / 4.0 + getSMEFTCoeff("CHbox", mu)) * v2;
    d_GF_mu = ((getSMEFTCoeff("CHl3R", 0, 0, mu) + getSMEFTCoeff("CHl3R", 1, 1, mu) - 0.5 * (getSMEFTCoeff("CllR", 0, 1, 1, 0, mu) + getSMEFTCoeff("CllR", 1, 0, 0, 1, mu))) * v2);

    double NPindirect = Mz * Mz / v() * (del_Z_mu(mu) + d_h_mu + 0.5 * d_GF_mu + 2.0 * del_e_mu(mu) - (1.0 - sW2_tree / cW2_tree) * del_sW2_mu(mu));
    double NPdirect = Mz * Mz / v() * getSMEFTCoeff("CHD", mu) * v2;

    return (NPindirect + NPdirect);
}

const double NPSMEFTd6General::deltaG1_hZA_mu(const double mu) const {
    
    double d_AZ_mu; 
    
    // delta_AZ as function os scale
    d_AZ_mu = 2.0 * sW_tree * cW_tree * (getSMEFTCoeff("CHW", mu) - getSMEFTCoeff("CHB", mu)) * v2
            - (cW2_tree - sW2_tree) * getSMEFTCoeff("CHWB", mu) * v2;
    
    return ( d_AZ_mu / v());
}

const double NPSMEFTd6General::deltaG1_hZARatio_mu(const double mu) const {
    double m_t = mtpole;
    double m_b = quarks[BOTTOM].getMass();
    double m_c = quarks[CHARM].getMass();
    double m_s = quarks[STRANGE].getMass();
    double m_tau = leptons[TAU].getMass();
    double m_mu = leptons[MU].getMass();

    double M_w_2 = (trueSM.Mw())*(trueSM.Mw());

    double Qt = quarks[TOP].getCharge();
    double Qb = quarks[BOTTOM].getCharge();
    double Qc = quarks[CHARM].getCharge();
    double Qs = quarks[STRANGE].getCharge();
    double Qtau = leptons[TAU].getCharge();
    double Qmu = leptons[MU].getCharge();

    double tau_t = 4.0 * m_t * m_t / mHl / mHl;
    double tau_b = 4.0 * m_b * m_b / mHl / mHl;
    double tau_c = 4.0 * m_c * m_c / mHl / mHl;
    double tau_s = 4.0 * m_s * m_s / mHl / mHl;
    double tau_tau = 4.0 * m_tau * m_tau / mHl / mHl;
    double tau_mu = 4.0 * m_mu * m_mu / mHl / mHl;
    double tau_W = 4.0 * M_w_2 / mHl / mHl;

    double lambda_t = 4.0 * m_t * m_t / Mz / Mz;
    double lambda_b = 4.0 * m_b * m_b / Mz / Mz;
    double lambda_c = 4.0 * m_c * m_c / Mz / Mz;
    double lambda_s = 4.0 * m_s * m_s / Mz / Mz;
    double lambda_tau = 4.0 * m_tau * m_tau / Mz / Mz;
    double lambda_mu = 4.0 * m_mu * m_mu / Mz / Mz;
    double lambda_W = 4.0 * M_w_2 / Mz / Mz;
    double alpha2 = sqrt(2.0) * GF * M_w_2 / M_PI;
    double aPiv = sqrt(ale * alpha2) / 4.0 / M_PI / v();

    //  mod. of Higgs couplings
    gslpp::complex gSM, dg;
    gslpp::complex dKappa_t = cLHd6 * deltaG_hff_mu(quarks[TOP], mu) / (-m_t / v());
    gslpp::complex dKappa_b = cLHd6 * deltaG_hff_mu(quarks[BOTTOM], mu) / (-m_b / v());
    gslpp::complex dKappa_c = cLHd6 * deltaG_hff_mu(quarks[CHARM], mu) / (-m_c / v());
    gslpp::complex dKappa_s = cLHd6 * deltaG_hff_mu(quarks[STRANGE], mu) / (-m_s / v());
    gslpp::complex dKappa_tau = cLHd6 * deltaG_hff_mu(leptons[TAU], mu) / (-m_tau / v());
    gslpp::complex dKappa_mu = cLHd6 * deltaG_hff_mu(leptons[MU], mu) / (-m_mu / v());
    double dKappa_W = cLHd6 * (0.5 * v() / M_w_2) * deltaG3_hWW_mu(mu);

    //  mod of EW vector couplings vf =2 gvf    
    double vSMt = 2.0 * (quarks[TOP].getIsospin()) - 4.0 * Qt * sW2_tree;
    double vSMb = 2.0 * (quarks[BOTTOM].getIsospin()) - 4.0 * Qb * sW2_tree;
    double vSMc = 2.0 * (quarks[CHARM].getIsospin()) - 4.0 * Qc * sW2_tree;
    double vSMs = 2.0 * (quarks[STRANGE].getIsospin()) - 4.0 * Qs * sW2_tree;
    double vSMtau = 2.0 * (leptons[TAU].getIsospin()) - 4.0 * Qtau * sW2_tree;
    double vSMmu = 2.0 * (leptons[MU].getIsospin()) - 4.0 * Qmu * sW2_tree;

    double dvSMt = cLHd6 * 2.0 * (deltaGL_f_mu(quarks[TOP], mu) + deltaGR_f_mu(quarks[TOP], mu)); //deltaGV_f(quarks[TOP]);
    double dvSMb = cLHd6 * 2.0 * (deltaGL_f_mu(quarks[BOTTOM], mu) + deltaGR_f_mu(quarks[BOTTOM], mu)); //deltaGV_f(quarks[BOTTOM]);
    double dvSMc = cLHd6 * 2.0 * (deltaGL_f_mu(quarks[CHARM], mu) + deltaGR_f_mu(quarks[CHARM], mu)); //deltaGV_f(quarks[CHARM]);
    double dvSMs = cLHd6 * 2.0 * (deltaGL_f_mu(quarks[STRANGE], mu) + deltaGR_f_mu(quarks[STRANGE], mu)); //deltaGV_f(quarks[STRANGE]);
    double dvSMtau = cLHd6 * 2.0 * (deltaGL_f_mu(leptons[TAU], mu) + deltaGR_f_mu(leptons[TAU], mu)); //deltaGV_f(leptons[TAU]);
    double dvSMmu = cLHd6 * 2.0 * (deltaGL_f_mu(leptons[MU], mu) + deltaGR_f_mu(leptons[MU], mu)); //deltaGV_f(leptons[MU]);

    double deltaloc = deltaG1_hZA_mu(mu);

    gSM = -aPiv * ((3.0 * vSMt * Qt * AHZga_f(tau_t, lambda_t) +
            3.0 * vSMb * Qb * AHZga_f(tau_b, lambda_b) +
            3.0 * vSMc * Qc * AHZga_f(tau_c, lambda_c) +
            3.0 * vSMs * Qs * AHZga_f(tau_s, lambda_s) +
            vSMtau * Qtau * AHZga_f(tau_tau, lambda_tau) +
            vSMmu * Qmu * AHZga_f(tau_mu, lambda_mu)) / cW_tree +
            AHZga_W(tau_W, lambda_W));

    dg = deltaloc / gSM - (aPiv / gSM) * (
            (3.0 * vSMt * dKappa_t * Qt * AHZga_f(tau_t, lambda_t) +
            3.0 * vSMb * dKappa_b * Qb * AHZga_f(tau_b, lambda_b) +
            3.0 * vSMc * dKappa_c * Qc * AHZga_f(tau_c, lambda_c) +
            3.0 * vSMs * dKappa_s * Qs * AHZga_f(tau_s, lambda_s) +
            dKappa_tau * vSMtau * Qtau * AHZga_f(tau_tau, lambda_tau) +
            dKappa_mu * vSMmu * Qmu * AHZga_f(tau_mu, lambda_mu)) / cW_tree +
            dKappa_W * AHZga_W(tau_W, lambda_W) +
            (3.0 * dvSMt * Qt * AHZga_f(tau_t, lambda_t) +
            3.0 * dvSMb * Qb * AHZga_f(tau_b, lambda_b) +
            3.0 * dvSMc * Qc * AHZga_f(tau_c, lambda_c) +
            3.0 * dvSMs * Qs * AHZga_f(tau_s, lambda_s) +
            dvSMtau * Qtau * AHZga_f(tau_tau, lambda_tau) +
            dvSMmu * Qmu * AHZga_f(tau_mu, lambda_mu)) / cW_tree
            );

    return dg.real();
}

const double NPSMEFTd6General::deltaG2_hZA_mu(const double mu) const {
    return 0.0;
}

const double NPSMEFTd6General::deltaG_hAA_mu(const double mu) const {
    
    double d_AA_mu;
    
    // delta_AA as function os scale
    d_AA_mu = (sW2_tree * getSMEFTCoeff("CHW", mu) + cW2_tree * getSMEFTCoeff("CHB", mu) - sW_tree * cW_tree * getSMEFTCoeff("CHWB", mu)) * v2;

    return (d_AA_mu / v());
}

const double NPSMEFTd6General::deltaG_hAARatio_mu(const double mu) const {
    double m_t = mtpole;
    double m_b = quarks[BOTTOM].getMass();
    double m_c = quarks[CHARM].getMass();
    double m_s = quarks[STRANGE].getMass();
    double m_tau = leptons[TAU].getMass();
    double m_mu = leptons[MU].getMass();

    double M_w_2 = (trueSM.Mw())*(trueSM.Mw());

    double Qt = quarks[TOP].getCharge();
    double Qb = quarks[BOTTOM].getCharge();
    double Qc = quarks[CHARM].getCharge();
    double Qs = quarks[STRANGE].getCharge();
    double Qtau = leptons[TAU].getCharge();
    double Qmu = leptons[MU].getCharge();

    double tau_t = 4.0 * m_t * m_t / mHl / mHl;
    double tau_b = 4.0 * m_b * m_b / mHl / mHl;
    double tau_c = 4.0 * m_c * m_c / mHl / mHl;
    double tau_s = 4.0 * m_s * m_s / mHl / mHl;
    double tau_tau = 4.0 * m_tau * m_tau / mHl / mHl;
    double tau_mu = 4.0 * m_mu * m_mu / mHl / mHl;
    double tau_W = 4.0 * M_w_2 / mHl / mHl;

    double aPiv = ale / 8.0 / M_PI / v();
    gslpp::complex gSM, dg;
    gslpp::complex dKappa_t = cLHd6 * deltaG_hff_mu(quarks[TOP], mu) / (-m_t / v());
    gslpp::complex dKappa_b = cLHd6 * deltaG_hff_mu(quarks[BOTTOM], mu) / (-m_b / v());
    gslpp::complex dKappa_c = cLHd6 * deltaG_hff_mu(quarks[CHARM], mu) / (-m_c / v());
    gslpp::complex dKappa_s = cLHd6 * deltaG_hff_mu(quarks[STRANGE], mu) / (-m_s / v());
    gslpp::complex dKappa_tau = cLHd6 * deltaG_hff_mu(leptons[TAU], mu) / (-m_tau / v());
    gslpp::complex dKappa_mu = cLHd6 * deltaG_hff_mu(leptons[MU], mu) / (-m_mu / v());
    double dKappa_W = cLHd6 * (0.5 * v() / M_w_2) * deltaG3_hWW_mu(mu);

    double deltaloc = deltaG_hAA_mu(mu);

    gSM = aPiv * (3.0 * Qt * Qt * AH_f(tau_t) +
            3.0 * Qb * Qb * AH_f(tau_b) +
            3.0 * Qc * Qc * AH_f(tau_c) +
            3.0 * Qs * Qs * AH_f(tau_s) +
            Qtau * Qtau * AH_f(tau_tau) +
            Qmu * Qmu * AH_f(tau_mu) +
            AH_W(tau_W));

    dg = deltaloc / gSM + (aPiv / gSM) * (
            3.0 * Qt * Qt * dKappa_t * AH_f(tau_t) +
            3.0 * Qb * Qb * dKappa_b * AH_f(tau_b) +
            3.0 * Qc * Qc * dKappa_c * AH_f(tau_c) +
            3.0 * Qs * Qs * dKappa_s * AH_f(tau_s) +
            dKappa_tau * Qtau * Qtau * AH_f(tau_tau) +
            dKappa_mu * Qmu * Qmu * AH_f(tau_mu) +
            dKappa_W * AH_W(tau_W)
            );

    return dg.real();
}

gslpp::complex NPSMEFTd6General::deltaG_hff_mu(const Particle p, const double mu) const {
    // The effects of the SM RG running are neglected. 
    double mf;
    
    double d_h_mu, d_GF_mu;
    
    d_h_mu = (-getSMEFTCoeff("CHD", mu) / 4.0 + getSMEFTCoeff("CHbox", mu)) * v2;
    d_GF_mu = ((getSMEFTCoeff("CHl3R", 0, 0, mu) + getSMEFTCoeff("CHl3R", 1, 1, mu) - 0.5 * (getSMEFTCoeff("CllR", 0, 1, 1, 0, mu) + getSMEFTCoeff("CllR", 1, 0, 0, 1, mu))) * v2);
    
    if (p.is("TOP"))
        //mf = p.getMass(); // m_t(m_t)
        mf = mtpole; // pole mass
    else
        mf = p.getMass();

    gslpp::complex CfH = CfH_diag_mu(p, mu);
    
    return (-mf / v() * (d_h_mu - 0.5 * d_GF_mu)
            + CfH * v2 / sqrt(2.0));
}

const double NPSMEFTd6General::deltaG_hhhRatio_mu(const double mu) const {
    double dg;
    double d_h_mu, d_GF_mu;
    
    d_h_mu = (-getSMEFTCoeff("CHD", mu) / 4.0 + getSMEFTCoeff("CHbox", mu)) * v2;
    d_GF_mu = ((getSMEFTCoeff("CHl3R", 0, 0, mu) + getSMEFTCoeff("CHl3R", 1, 1, mu) - 0.5 * (getSMEFTCoeff("CllR", 0, 1, 1, 0, mu) + getSMEFTCoeff("CllR", 1, 0, 0, 1, mu))) * v2);

    dg = -0.5 * d_GF_mu + 3.0 * d_h_mu - 2.0 * getSMEFTCoeff("CH", mu) * v2 * v2 / mHl / mHl;

    return dg;
}



    /////////////////// hVff interactions     ///////////////////


gslpp::complex NPSMEFTd6General::deltaGL_Wffh(const Particle pbar, const Particle p) const {
    if (pbar.getIndex() + 1 != p.getIndex() || pbar.getIndex() % 2 != 0)
        throw std::runtime_error("NPSMEFTd6General::deltaGL_Wffh(): Not implemented");

    //double CHF3 = CHF3_diag(pbar);
    gslpp::complex CHF3 = CHF3CC_diag(pbar);
    
    return (2.0 * sqrt(2.0) * Mz * cW_tree / v() / v() * CHF3 * v2);
}

gslpp::complex NPSMEFTd6General::deltaGR_Wffh(const Particle pbar, const Particle p) const {
    if (pbar.getIndex() + 1 != p.getIndex() || pbar.getIndex() % 2 != 0)
        throw std::runtime_error("NPSMEFTd6General::deltaGR_Wffh(): Not implemented");

    gslpp::complex CHud = CHud_diag(pbar);
    return (sqrt(2.0) * Mz * cW_tree / v() / v() * CHud * v2);
}

const double NPSMEFTd6General::deltaGL_Zffh(const Particle p) const {
    double I3p = p.getIsospin();
    double CHF1 = CHF1_diag(p);
    double CHF3 = CHF3_diag(p);
    return (-2.0 * Mz / v() / v() * (CHF1 - 2.0 * I3p * CHF3) * v2);
}

const double NPSMEFTd6General::deltaGR_Zffh(const Particle p) const {
    double CHf = CHf_diag(p);
    return (-2.0 * Mz / v() / v() * CHf * v2);
}

    /////////////////// hVff dipole interactions     ///////////////////

gslpp::complex NPSMEFTd6General::deltaG_hGff(const Particle p) const {
    // Set to 0. for the moment 

    return 0.;
}

gslpp::complex NPSMEFTd6General::deltaG_hZff(const Particle p) const {
    // Set to 0. for the moment 

    return 0.;
}

gslpp::complex NPSMEFTd6General::deltaG_hAff(const Particle p) const {
    // Set to 0. for the moment 

    return 0.;
}

    /////////////////// Vff dipole interactions     ///////////////////

gslpp::complex NPSMEFTd6General::deltaG_Gff(const Particle p) const {
    // Set to 0. for the moment 

    return 0.;
}

gslpp::complex NPSMEFTd6General::deltaG_Zff(const Particle p) const {
    // Set to 0. for the moment 

    return 0.;
}

gslpp::complex NPSMEFTd6General::deltaG_Aff(const Particle p) const {
    // Set to 0. for the moment 

    return 0.;
}

const double NPSMEFTd6General::deltag3G() const {
    // Set to 0. for the moment 

    return 0.;
}


////////////////////////////////////////////////////////////////////////

//gslpp::complex NPSMEFTd6General::AHZga_W(const double tau, const double lambda) const {
//    gslpp::complex tmp;
//
//    double tan2w = trueSM.sW2() / trueSM.cW2();
//
//    tmp = 4.0 * (3.0 - tan2w) * I_triangle_2(tau, lambda);

//    tmp = tmp + ((1.0 + 2.0 / tau) * tan2w - (5.0 + 2.0 / tau)) * I_triangle_1(tau, lambda);

//    return sqrt(trueSM.cW2()) * tmp;
//}


/////////////////////////////////////////////////////

const double NPSMEFTd6General::delta_muggH_1(const double sqrt_s) const {
    double mu = 0.0;
    double C1 = 0.0066; //It seems to be independent of energy 
    
    double CHG = 0.0, CDH = 0.0, CHD = 0.0, CuHR33 = 0.0, CtGR = 0.0, CHl3R11 = 0.0, CHl3R22 = 0.0, Cll1221 = 0.0; 
    double muRG = 125.1;
    
//  Wilson coefficients definitions 
    CHG = getSMEFTCoeff("CHG",muRG); 
    CDH = (-getSMEFTCoeff("CHbox",muRG)); 
    CHD = getSMEFTCoeff("CHD",muRG); 
    CuHR33 = getSMEFTCoeff("CuHR",2,2,muRG); 
    CtGR = (getSMEFTCoeff("CuGR",2,2,muRG) / g3_tree); 
    CHl3R11 = getSMEFTCoeff("CHl3R",0,0,muRG); 
    CHl3R22 = getSMEFTCoeff("CHl3R",1,1,muRG); 
    Cll1221 = getSMEFTCoeff("CllR",0,1,1,0,muRG); 

    /*
    double m_t = mtpole;
    //double m_t = quarks[TOP].getMass();
    double m_b = quarks[BOTTOM].getMass();
    double m_c = quarks[CHARM].getMass();

    // L_eff_SM = (G_eff_t_SM + G_eff_b_SM)*hGG 
    gslpp::complex G_eff_t_SM = AlsMz / 16.0 / M_PI / v() * AH_f(4.0 * m_t * m_t / mHl / mHl);
    gslpp::complex G_eff_b_SM = AlsMz / 16.0 / M_PI / v() * AH_f(4.0 * m_b * m_b / mHl / mHl);
    gslpp::complex G_eff_c_SM = AlsMz / 16.0 / M_PI / v() * AH_f(4.0 * m_c * m_c / mHl / mHl);
    gslpp::complex G_eff_SM = G_eff_t_SM + G_eff_b_SM + G_eff_c_SM;

    //double sigma_tt_SM = trueSM.computeSigmaggH_tt(sqrt_s);
    //double sigma_bb_SM = trueSM.computeSigmaggH_bb(sqrt_s);
    //double sigma_tb_SM = trueSM.computeSigmaggH_tb(sqrt_s);
    //gslpp::complex tmp = (2.0 * dKappa_t * sigma_tt_SM
    //        + 2.0 * dKappa_b * sigma_bb_SM
    //        + (dKappa_t + dKappa_b) * sigma_tb_SM)
    //        / (sigma_tt_SM + sigma_bb_SM + sigma_tb_SM);

    gslpp::complex dKappa_t = cLHd6 * deltaG_hff(quarks[TOP]) / (-m_t / v());
    gslpp::complex dKappa_b = cLHd6 * deltaG_hff(quarks[BOTTOM]) / (-m_b / v());
    gslpp::complex dKappa_c = cLHd6 * deltaG_hff(quarks[CHARM]) / (-m_c / v());

    gslpp::complex tmpHG = getSMEFTCoeffEW("CHG") / v() * v2 / G_eff_SM;
    gslpp::complex tmpt = G_eff_t_SM * dKappa_t / G_eff_SM;
    gslpp::complex tmpb = G_eff_b_SM * dKappa_b / G_eff_SM;
    gslpp::complex tmpc = G_eff_c_SM * dKappa_c / G_eff_SM;

    double mu = (1.0 + 2.0 * (tmpt.real() + tmpb.real() + tmpc.real() + tmpHG.real()));*/

    //AG:
    // Obtained with SMEFETatNLO. cuG_Warsaw = g3_tree*cuG_SMEFTatNLO    
    if (sqrt_s == 8.0) {
        //mu += cWsch * (   // Same for alpha & MW scheme at LO
        mu += (
                ((0.12124142781783014) * getSMEFTCoeffEW("CHbox")
                + (-0.030314752945313873) * getSMEFTCoeffEW("CHD")
                + (39.31144) * getSMEFTCoeffEW("CHG") //
                + (-0.1224898892210304) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (1.1269562159310709) * getSMEFTCoeffEW("CuGR", 2, 2) * g3_tree
                + (-0.060629505890627745) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.060629505890627745) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.060629505890627745) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );
    } else if (sqrt_s == 13.0) {
        //mu += cWsch * (   // Same for alpha & MW scheme at LO
        mu +=  (
                ((0.121) * getSMEFTCoeffEW("CHbox")
                + (-0.03031) * getSMEFTCoeffEW("CHD")
                + (39.31144) * getSMEFTCoeffEW("CHG")
                + (-0.12245) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (1.127) * getSMEFTCoeffEW("CuGR", 2, 2) * g3_tree
                + (-0.06062) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.06062) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0606) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );
    } else if (sqrt_s == 14.0) {
        //mu += cWsch * (   // Same for alpha & MW scheme at LO
        mu +=  (
                +34861157. * CHG 
                +121542. * CDH 
                -30260.6 * CHD 
                -121842. * CuHR33 
                +1577851. * CtGR 
                -60687.9 * (CHl3R11 + CHl3R22 - Cll1221)  
                );
    } else if (sqrt_s == 50.0) {
        //mu += cWsch * (   // Same for alpha & MW scheme at LO
        mu +=  (
                +34861330. * CHG 
                +121551. * CDH 
                -30261.2 * CHD 
                -121874. * CuHR33 
                +1577818. * CtGR 
                -60706.6 * (CHl3R11 + CHl3R22 - Cll1221)
                );
    } else if (sqrt_s == 84.0) {
        //mu += cWsch * (   // Same for alpha & MW scheme at LO
        mu +=  (
                +34860509. * CHG 
                +121540. * CDH 
                -30278.6 * CHD 
                -121876. * CuHR33 
                +1577893. * CtGR 
                -60714. * (CHl3R11 + CHl3R22 - Cll1221)
                );
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::delta_muggH_1()");
    //AG:end

    //  Linear contribution from Higgs self-coupling
    mu += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    return mu;
}

const double NPSMEFTd6General::delta_muggH_2(const double sqrt_s) const {
    double mu = 0.0;

    if (FlagQuadraticTerms) {
        if (sqrt_s == 8.0) {
            mu += 0.0;
        } else if (sqrt_s == 13.0) {
            mu += 0.0;
        } else
            throw std::runtime_error("Bad argument in NPSMEFTd6General::delta_muggH_2()");
    }

    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    //  mu = mu + cLHd6 * cLH3d62 * deltaH3L2(C1) * deltaG_hhhRatio() * deltaG_hhhRatio();

    return mu;
}

const double NPSMEFTd6General::muggH(const double sqrt_s) const //AG:modified
{
    double mu = 1.0;

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eggFint + eggFpar;

    // Linear contribution (including the Higgs self-coupling)
    mu += delta_muggH_1(sqrt_s);

    // Quadratic contribution (including the Higgs self-coupling)
    mu += delta_muggH_2(sqrt_s);

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::delta_muVBF_1(const double sqrt_s) const {
    double mu = 0.0;
    double C1 = 0.0;
    
    double CHB = 0.0, CHW = 0.0, CHWB = 0.0, CHG = 0.0, CHD = 0.0, CHbox = 0.0; 
    double CHl3R11 = 0.0, CHl3R22 = 0.0, CllR1221 = 0.0, CHq1R11 = 0.0, CHq3R11 = 0.0;
    double CHq1R22 = 0.0, CHq3R22 = 0.0, CHuR11 = 0.0, CHuR22 = 0.0, CHdR11 = 0.0, CHdR22 = 0.0; 
    
    double muRG = muw;
    
//  Wilson coefficients definitions 
    CHB = getSMEFTCoeff("CHB", muRG); 
    CHW = getSMEFTCoeff("CHW", muRG); 
    CHWB = getSMEFTCoeff("CHWB", muRG); 
    CHG = getSMEFTCoeff("CHG", muRG); 
    CHD = getSMEFTCoeff("CHD", muRG); 
    CHbox = getSMEFTCoeff("CHbox", muRG); 
    CHl3R11 = getSMEFTCoeff("CHl3R",0,0, muRG); 
    CHl3R22 = getSMEFTCoeff("CHl3R",1,1, muRG); 
    CllR1221 = getSMEFTCoeff("CllR",0,1,1,0, muRG); 
    CHq1R11 = getSMEFTCoeff("CHq1R",0,0, muRG); 
    CHq3R11 = getSMEFTCoeff("CHq3R",0,0, muRG); 
    CHq1R22 = getSMEFTCoeff("CHq1R",1,1, muRG); 
    CHq3R22 = getSMEFTCoeff("CHq3R",1,1, muRG); 
    CHuR11 = getSMEFTCoeff("CHuR",0,0, muRG); 
    CHuR22 = getSMEFTCoeff("CHuR",1,1, muRG); 
    CHdR11 = getSMEFTCoeff("CHdR",0,0, muRG); 
    CHdR22 = getSMEFTCoeff("CHdR",1,1, muRG); 

    if (sqrt_s == 1.96) {

        C1 = 0.0; // N.A.

        mu +=
                +121321. * getSMEFTCoeffEW("CHbox")
                + 5770.95 * getSMEFTCoeffEW("CHB")
                - 51626.2 * getSMEFTCoeffEW("CHW")
                + 57783.8 * getSMEFTCoeffEW("CHG")
                - 15060.5 * getSMEFTCoeffEW("CHq1R", 0, 0)
                - 1122.91 * getSMEFTCoeffEW("CHq1R", 1, 1)
                - 9988.6 * getSMEFTCoeffEW("CHuR", 0, 0)
                - 629.4 * getSMEFTCoeffEW("CHuR", 1, 1)
                + 2994.79 * getSMEFTCoeffEW("CHdR", 0, 0)
                + 467.105 * getSMEFTCoeffEW("CHdR", 1, 1)
                - 205793. * getSMEFTCoeffEW("CHq3R", 0, 0)
                - 16751.6 * getSMEFTCoeffEW("CHq3R", 1, 1)
                + cAsch * (-170868. * getSMEFTCoeffEW("CHD")
                - 322062. * getSMEFTCoeffEW("CHWB")
                - 4.567 * delta_GF
                - 3.498 * deltaMwd6())
                + cWsch * (-13112. * getSMEFTCoeffEW("CHD")
                + 21988.3 * getSMEFTCoeffEW("CHWB")
                - 3.003 * delta_GF)
                ;

    } else if (sqrt_s == 7.0) {

        C1 = 0.0065;

        mu +=
                +121090. * getSMEFTCoeffEW("CHbox")
                - 810.554 * getSMEFTCoeffEW("CHB")
                - 86724.3 * getSMEFTCoeffEW("CHW")
                - 155709. * getSMEFTCoeffEW("CHG")
                + 15633.8 * getSMEFTCoeffEW("CHq1R", 0, 0)
                - 2932.56 * getSMEFTCoeffEW("CHq1R", 1, 1)
                - 24997.3 * getSMEFTCoeffEW("CHuR", 0, 0)
                - 2380.75 * getSMEFTCoeffEW("CHuR", 1, 1)
                + 7157.18 * getSMEFTCoeffEW("CHdR", 0, 0)
                + 1508.92 * getSMEFTCoeffEW("CHdR", 1, 1)
                - 355189. * getSMEFTCoeffEW("CHq3R", 0, 0)
                - 52211.2 * getSMEFTCoeffEW("CHq3R", 1, 1)
                + cAsch * (-166792. * getSMEFTCoeffEW("CHD")
                - 316769. * getSMEFTCoeffEW("CHWB")
                - 4.542 * delta_GF
                - 3.253 * deltaMwd6())
                + cWsch * (-11689.4 * getSMEFTCoeffEW("CHD")
                + 23083.4 * getSMEFTCoeffEW("CHWB")
                - 3.004 * delta_GF)
                ;

    } else if (sqrt_s == 8.0) {

        C1 = 0.0065;

        /*mu +=
                +121100. * getSMEFTCoeffEW("CHbox")
                - 684.545 * getSMEFTCoeffEW("CHB")
                - 85129.2 * getSMEFTCoeffEW("CHW")
                - 136876. * getSMEFTCoeffEW("CHG")
                + 15225.3 * getSMEFTCoeffEW("CHq1R", 0, 0)
                - 3114.83 * getSMEFTCoeffEW("CHq1R", 1, 1)
                - 25391.2 * getSMEFTCoeffEW("CHuR", 0, 0)
                - 2583.43 * getSMEFTCoeffEW("CHuR", 1, 1)
                + 7410.87 * getSMEFTCoeffEW("CHdR", 0, 0)
                + 1629.31 * getSMEFTCoeffEW("CHdR", 1, 1)
                - 363032. * getSMEFTCoeffEW("CHq3R", 0, 0)
                - 56263.7 * getSMEFTCoeffEW("CHq3R", 1, 1)
                + cAsch * (-166792. * getSMEFTCoeffEW("CHD")
                - 317073. * getSMEFTCoeffEW("CHWB")
                - 4.541 * delta_GF
                - 3.347 * deltaMwd6())
                + cWsch * (-11741.3 * getSMEFTCoeffEW("CHD")
                + 22626.6 *  getSMEFTCoeffEW("CHWB")
                - 3.003 * delta_GF)
                ;*/
        //AG:begin
        mu += cWsch * (
                ((0.1212) * getSMEFTCoeffEW("CHbox")
                + (0.09705) * getSMEFTCoeffEW("CHW")
                + (0.005368) * getSMEFTCoeffEW("CHB")
                + (-0.009586) * getSMEFTCoeffEW("CHD")
                + (0.04278) * getSMEFTCoeffEW("CHWB")
                + (-0.00204) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.002219) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.17898) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.007077) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.01424) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (9.3e-05) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.005403) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (-0.0004033) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.1818681) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.1818681) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.18188) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                + (-0.146) * deltaGwd6()
                + (-0.0732) * deltaGzd6()
                );
        //AG:end

    } else if (sqrt_s == 13.0) {

        C1 = 0.0064;

        /*mu +=
                +121332. * getSMEFTCoeffEW("CHbox")
                - 283.27 * getSMEFTCoeffEW("CHB")
                - 80829.5 * getSMEFTCoeffEW("CHW")
                - 90637.9 * getSMEFTCoeffEW("CHG")
                + 13466.3 * getSMEFTCoeffEW("CHq1R", 0, 0)
                - 3912.24 * getSMEFTCoeffEW("CHq1R", 1, 1)
                - 26789.8 * getSMEFTCoeffEW("CHuR", 0, 0)
                - 3408.16 * getSMEFTCoeffEW("CHuR", 1, 1)
                + 8302.17 * getSMEFTCoeffEW("CHdR", 0, 0)
                + 2107.16 * getSMEFTCoeffEW("CHdR", 1, 1)
                - 389656. * getSMEFTCoeffEW("CHq3R", 0, 0)
                - 72334.1 * getSMEFTCoeffEW("CHq3R", 1, 1)
                + cAsch * (-166707. * getSMEFTCoeffEW("CHD")
                - 317068. * getSMEFTCoeffEW("CHWB")
                - 4.532 * delta_GF
                - 3.247 * deltaMwd6())
                + cWsch * (-11844.9 * getSMEFTCoeffEW("CHD")
                + 21545. * getSMEFTCoeffEW("CHWB")
                - 2.999 * delta_GF)
                ;*/
        //AG:begin
        mu += cWsch * (
                ((0.1213) * getSMEFTCoeffEW("CHbox")
                + (-0.05852) * getSMEFTCoeffEW("CHW")
                + (-0.0034826) * getSMEFTCoeffEW("CHB")
                + (-0.012075) * getSMEFTCoeffEW("CHD")
                + (0.013098) * getSMEFTCoeffEW("CHWB")
                + (0.012076) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.006699) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.3236105) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0730228) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.02151748) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.002749016) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.006742) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.0022914) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.1818213) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.1818213) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.18192) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                + (-0.107) * deltaGwd6()
                + (-0.051) * deltaGzd6()

                );
        //AG:end

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 14.0) {

        // Mw scheme

        C1 = 0.0064;

        mu +=
                cWsch * (
                -149.911 * CHB 
                -82290.4 * CHW 
                +21589.7 * CHWB 
                -64109.4 * CHG 
                -11380.7 * CHD 
                +121758. * CHbox 
                -182196. * CHl3R11 
                -181307. * CHl3R22 
                +183438. * CllR1221 
                +15981.4 * CHq1R11 
                -385489. * CHq3R11 
                -5754.62 * CHq1R22 
                -81679.1 * CHq3R22 
                -25756.3 * CHuR11 
                -3379.74 * CHuR22 
                +8049.27 * CHdR11 
                +2139.42 * CHdR22
                );

    } else if (sqrt_s == 27.0) {

        // Only Alpha scheme

        C1 = 0.0062; // From arXiv: 1902.00134

        mu +=
                +120777. * getSMEFTCoeffEW("CHbox")
                + 6664.27 * getSMEFTCoeffEW("CHq1R", 0, 0)
                - 34230.7 * getSMEFTCoeffEW("CHuR", 0, 0)
                + 12917.3 * getSMEFTCoeffEW("CHdR", 0, 0)
                - 536216. * getSMEFTCoeffEW("CHq3R", 0, 0)
                - 163493. * getSMEFTCoeffEW("CHD")
                + 58.33 * getSMEFTCoeffEW("CHB")
                - 81360.5 * getSMEFTCoeffEW("CHW")
                - 313026. * getSMEFTCoeffEW("CHWB")
                - 16430. * getSMEFTCoeffEW("CHG")
                - 4.475 * delta_GF
                - 2.99 * deltaMwd6()
                ;
        
    } else if (sqrt_s == 50.0) {

        // Mw scheme

        C1 = 0.0; // N.A.

        mu +=
                cWsch * (
                +63.2251 * CHB 
                -84681.3 * CHW 
                +20726.1 * CHWB 
                -34760.9 * CHG 
                -10986.7 * CHD 
                +121258. * CHbox 
                -181170. * CHl3R11 
                -181540. * CHl3R22 
                +183281. * CllR1221 
                +11576.7 * CHq1R11 
                -461606. * CHq3R11 
                -8442.73 * CHq1R22 
                -134822. * CHq3R22 
                -29766.6 * CHuR11 
                -6031.76 * CHuR22 
                +10677.4 * CHdR11 
                +3637.44 * CHdR22 
                );
        
    } else if (sqrt_s == 84.0) {

        // Mw scheme

        C1 = 0.0; // N.A.

        mu +=
                cWsch * (
                +49.3432 * CHB 
                -88355. * CHW 
                +20554. * CHWB 
                -32006.7 * CHG 
                -11122. * CHD 
                +121764. * CHbox 
                -181033. * CHl3R11 
                -181604. * CHl3R22 
                +184047. * CllR1221 
                +9449.49 * CHq1R11 
                -490153. * CHq3R11 
                -9699.98 * CHq1R22 
                -160491. * CHq3R22 
                -31231.9 * CHuR11 
                -7518.66 * CHuR22 
                +11885.7 * CHdR11 
                +4545.8 * CHdR22 
                );

    } else if (sqrt_s == 100.0) {

        // Only Alpha scheme

        C1 = 0.0; // N.A.

        mu +=
                +121714. * getSMEFTCoeffEW("CHbox")
                - 2261.73 * getSMEFTCoeffEW("CHq1R", 0, 0)
                - 42045.4 * getSMEFTCoeffEW("CHuR", 0, 0)
                + 17539.2 * getSMEFTCoeffEW("CHdR", 0, 0)
                - 674206. * getSMEFTCoeffEW("CHq3R", 0, 0)
                - 163344. * getSMEFTCoeffEW("CHD")
                + 71.488 * getSMEFTCoeffEW("CHB")
                - 90808.2 * getSMEFTCoeffEW("CHW")
                - 312544. * getSMEFTCoeffEW("CHWB")
                - 8165.65 * getSMEFTCoeffEW("CHG")
                - 4.452 * delta_GF
                - 2.949 * deltaMwd6()
                ;

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::delta_muVBF_1()");

    //  Linear contribution from Higgs self-coupling
    mu += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    return mu;
}

const double NPSMEFTd6General::delta_muVBF_2(const double sqrt_s) const {
    double mu = 0.0;

    if (FlagQuadraticTerms) {
        if (sqrt_s == 8.0) {
            mu += 0.0;
        } else if (sqrt_s == 13.0) {
            mu += cWsch * (
                    +(0.014669) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                    + (0.03814) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                    + (0.0001606) * pow(getSMEFTCoeffEW("CHB"), 2.0)
                    + (0.0012512) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                    + (0.002816) * pow(getSMEFTCoeffEW("CHWB"), 2.0)
                    + (0.04114) * pow(getSMEFTCoeffEW("CHq1R", 0, 0), 2.0)
                    + (0.005951) * pow(getSMEFTCoeffEW("CHq1R", 1, 1), 2.0)
                    + (0.12999) * pow(getSMEFTCoeffEW("CHq3R", 0, 0), 2.0)
                    + (0.021) * pow(getSMEFTCoeffEW("CHq3R", 1, 1), 2.0)
                    + (0.02614) * pow(getSMEFTCoeffEW("CHuR", 0, 0), 2.0)
                    + (0.002254) * pow(getSMEFTCoeffEW("CHuR", 1, 1), 2.0)
                    + (0.01424) * pow(getSMEFTCoeffEW("CHdR", 0, 0), 2.0)
                    + (0.003715) * pow(getSMEFTCoeffEW("CHdR", 1, 1), 2.0)
                    + (0.011029) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                    + (0.011029) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                    + (0.011025) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                    + (-0.0070851) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                    + (-0.00042041) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHB")
                    + (-0.0051343) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                    + (0.0015819) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHWB")
                    + (0.0014674) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 0, 0)
                    + (-0.0008105) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 1, 1)
                    + (-0.03923489) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (-0.00884719) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (-0.002606668) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHuR", 0, 0)
                    + (-0.0003321783) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHuR", 1, 1)
                    + (0.0008181) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHdR", 0, 0)
                    + (0.00027756) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHdR", 1, 1)
                    + (-0.0147203) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.0147203) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.014696) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.0038751) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHB")
                    + (0.0009616) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                    + (0.0063486) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHWB")
                    + (-0.0012817) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 0, 0)
                    + (0.0005912) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 1, 1)
                    + (0.036381) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (0.007742) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (0.0018475) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHuR", 0, 0)
                    + (0.0002321) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHuR", 1, 1)
                    + (-0.00057524) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHdR", 0, 0)
                    + (-0.00019275) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHdR", 1, 1)
                    + (0.00709) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.00709) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.0070951) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.00030585) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHD")
                    + (0.0026636) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHWB")
                    + (-0.0004294) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                    + (0.00016956) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                    + (0.0023133) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (0.00047684) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (0.0005299) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHuR", 0, 0)
                    + (-0.0001649) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHdR", 0, 0)
                    + (0.00042179) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.00042179) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.00042005) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.0016858) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHWB")
                    + (0.001146) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 0, 0)
                    + (0.00035237) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 1, 1)
                    + (0.007992) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (0.0019854) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (0.0032017) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHuR", 0, 0)
                    + (0.00041567) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHuR", 1, 1)
                    + (-0.001009181) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHdR", 0, 0)
                    + (-0.000346716) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHdR", 1, 1)
                    + (0.0014614) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.0014614) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.0014596) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.0014258) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                    + (0.0001052) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                    + (-0.0023342) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (-0.0004515) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (0.0025923) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHuR", 0, 0)
                    + (0.00032608) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHuR", 1, 1)
                    + (-0.00080841) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHdR", 0, 0)
                    + (-0.00027189) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHdR", 1, 1)
                    + (-0.0015826) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.0015826) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.0015764) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.024622) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (-0.0014685) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.0014685) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.0014626) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.0002688) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (0.0028941) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (0.0008132) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.0008132) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.00080835) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.0028) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (-0.0003598) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHuR", 0, 0)
                    + (-0.00012322) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHuR", 1, 1)
                    + (0.00017138) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHdR", 0, 0)
                    + (0.039187) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.039187) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.03918207) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.00019908) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHuR", 0, 0)
                    + (0.008845) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.008845) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.00885679) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.0026059) * getSMEFTCoeffEW("CHuR", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.0026059) * getSMEFTCoeffEW("CHuR", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.002607191) * getSMEFTCoeffEW("CHuR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.00033244) * getSMEFTCoeffEW("CHuR", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.00033244) * getSMEFTCoeffEW("CHuR", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.0003324333) * getSMEFTCoeffEW("CHuR", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.000817569) * getSMEFTCoeffEW("CHdR", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.000817569) * getSMEFTCoeffEW("CHdR", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.0008182) * getSMEFTCoeffEW("CHdR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.00027752) * getSMEFTCoeffEW("CHdR", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.00027752) * getSMEFTCoeffEW("CHdR", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.00027744) * getSMEFTCoeffEW("CHdR", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.01101) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.02202142) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.02202142) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    ) * pow(1000000.0, 2.0);
        } else
            throw std::runtime_error("Bad argument in NPSMEFTd6General::delta_muVBF_2()");
    }

    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    //  mu = mu + cLHd6 * cLH3d62 * deltaH3L2(C1) * deltaG_hhhRatio() * deltaG_hhhRatio();

    return mu;
}

const double NPSMEFTd6General::muVBF(const double sqrt_s) const //AG:modified
{
    double mu = 1.0;

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eVBFint + eVBFpar;

    // Linear contribution (including the Higgs self-coupling)
    mu += delta_muVBF_1(sqrt_s);

    // Quadratic contribution (including the Higgs self-coupling)
    mu += delta_muVBF_2(sqrt_s);

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::delta_muWH_1(const double sqrt_s) const {
    double mu = 0.0;
    double C1 = 0.0;
    
    double CHW = 0.0, CHWB = 0.0, CHD = 0.0, CHbox = 0.0, CHl3R11 = 0.0, CHl3R22 = 0.0, CllR1221 = 0.0, CHq3R11 = 0.0, CHq3R22 = 0.0;
    double muRG = muw;
    
//  Wilson coefficients definitions 
    CHW = getSMEFTCoeff("CHW", muRG); 
    CHWB = getSMEFTCoeff("CHWB", muRG); 
    CHD = getSMEFTCoeff("CHD", muRG); 
    CHbox = getSMEFTCoeff("CHbox", muRG); 
    CHl3R11 = getSMEFTCoeff("CHl3R",0,0, muRG); 
    CHl3R22 = getSMEFTCoeff("CHl3R",1,1, muRG); 
    CllR1221 = getSMEFTCoeff("CllR",0,1,1,0, muRG); 
    CHq3R11 = getSMEFTCoeff("CHq3R",0,0, muRG); 
    CHq3R22 = getSMEFTCoeff("CHq3R",1,1, muRG); 

    if (sqrt_s == 1.96) {

        C1 = 0.0; // N.A.

        mu +=
                +121231. * getSMEFTCoeffEW("CHbox")
                + 855498. * getSMEFTCoeffEW("CHW")
                + 1554889. * getSMEFTCoeffEW("CHq3R", 0, 0)
                + 10415.1 * getSMEFTCoeffEW("CHq3R", 1, 1)
                + cAsch * (-160273. * getSMEFTCoeffEW("CHD")
                - 284953. * getSMEFTCoeffEW("CHWB")
                - 3.288 * delta_GF
                - 2.258 * deltaMwd6())
                + cWsch * (-30311.6 * getSMEFTCoeffEW("CHD")
                + 0. * getSMEFTCoeffEW("CHWB")
                - 2. * delta_GF)
                ;
    } else if (sqrt_s == 7.0) {

        C1 = 0.0106;

        mu +=
                +121215. * getSMEFTCoeffEW("CHbox")
                + 874536. * getSMEFTCoeffEW("CHW")
                + 1688781. * getSMEFTCoeffEW("CHq3R", 0, 0)
                + 101677. * getSMEFTCoeffEW("CHq3R", 1, 1)
                + cAsch * (-160236. * getSMEFTCoeffEW("CHD")
                - 284911. * getSMEFTCoeffEW("CHWB")
                - 3.286 * delta_GF
                - 2.217 * deltaMwd6())
                + cWsch * (-30300.4 * getSMEFTCoeffEW("CHD")
                + 0. * getSMEFTCoeffEW("CHWB")
                - 1.999 * delta_GF)
                ;
    } else if (sqrt_s == 8.0) {

        C1 = 0.0105;

        /*mu +=
                +121222. * getSMEFTCoeffEW("CHbox")
                + 877503. * getSMEFTCoeffEW("CHW")
                + 1716018. * getSMEFTCoeffEW("CHq3R", 0, 0)
                + 113210. * getSMEFTCoeffEW("CHq3R", 1, 1)
                + cAsch * (-160294. * getSMEFTCoeffEW("CHD")
                - 284954. * getSMEFTCoeffEW("CHWB")
                - 3.287 * delta_GF
                - 2.179 * deltaMwd6())
                + cWsch * (-30310.6 * getSMEFTCoeffEW("CHD")
                + 0. * getSMEFTCoeffEW("CHWB")
                - 1.999 * delta_GF)
                ;*/

        //AG:begin
        mu += cWsch * (
                ((0.121211) * getSMEFTCoeffEW("CHbox")
                + (-0.030304941) * getSMEFTCoeffEW("CHD")
                + (0.87535) * getSMEFTCoeffEW("CHW")
                + (1.6911) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.13786) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.12128307) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.12128307) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.121211) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );
        //AG:end
    } else if (sqrt_s == 13.0) {

        C1 = 0.0103;

        /*mu +=
                +121126. * getSMEFTCoeffEW("CHbox")
                + 886205. * getSMEFTCoeffEW("CHW")
                + 1792005. * getSMEFTCoeffEW("CHq3R", 0, 0)
                + 161535. * getSMEFTCoeffEW("CHq3R", 1, 1)
                + cAsch * (-160176. * getSMEFTCoeffEW("CHD")
                - 284823. * getSMEFTCoeffEW("CHWB")
                - 3.287 * delta_GF
                - 2.139 * deltaMwd6())
                + cWsch * (-30285.8 * getSMEFTCoeffEW("CHD")
                + 0. * getSMEFTCoeffEW("CHWB")
                - 1.999 * delta_GF)
                ;*/
        // AG:begin
        mu += cWsch * (
                ((0.121283) * getSMEFTCoeffEW("CHbox")
                + (-0.0303129) * getSMEFTCoeffEW("CHD")
                + (0.88562) * getSMEFTCoeffEW("CHW")
                + (1.7298) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.19535) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.121234) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.121234) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.121283) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );
        mu += cWsch * ((0.0016) * deltaGwd6());
        //AG:end
    } else if (sqrt_s == 14.0) {

        // Mw scheme

        C1 = 0.0103;

        mu +=
                cWsch * (
                +884638. * CHW 
                -12.8388 * CHWB 
                -30014.6 * CHD 
                +121050. * CHbox 
                -121033. * (CHl3R11 + CHl3R22 -CllR1221)  
                +1763715. * CHq3R11 
                +189400. * CHq3R22 
                );
    } else if (sqrt_s == 27.0) {

        // Only Alpha scheme

        C1 = 0.0101; // From arXiv: 1902.00134

        mu +=
                +120696. * getSMEFTCoeffEW("CHbox")
                + 2105646. * getSMEFTCoeffEW("CHq3R", 0, 0)
                - 159695. * getSMEFTCoeffEW("CHD")
                + 900162. * getSMEFTCoeffEW("CHW")
                - 283257. * getSMEFTCoeffEW("CHWB")
                - 3.256 * delta_GF
                - 2.063 * deltaMwd6()
                ;
    } else if (sqrt_s == 50.0) {

        // Mw scheme

        C1 = 0.0; // N.A. 

        mu +=
                cWsch * (
                +894965. * CHW 
                -5.20074 * CHWB 
                -30691.6 * CHD 
                +120571. * CHbox 
                -121425. * (CHl3R11 + CHl3R22 -CllR1221) 
                +1831037. * CHq3R11 
                +352873. * CHq3R22 
                );
    } else if (sqrt_s == 84.0) {

        // Mw scheme

        C1 = 0.0; // N.A. 

        mu +=
                cWsch * (
                +897281. * CHW 
                -43.9532 * CHWB 
                -30887.3 * CHD 
                +120409. * CHbox 
                -121441. * (CHl3R11 + CHl3R22 -CllR1221) 
                +1828221. * CHq3R11 
                +424079. * CHq3R22 
                );
    } else if (sqrt_s == 100.0) {

        // Only Alpha scheme

        C1 = 0.0; // N.A. 

        mu +=
                +121319. * getSMEFTCoeffEW("CHbox")
                + 2294991. * getSMEFTCoeffEW("CHq3R", 0, 0)
                - 159242. * getSMEFTCoeffEW("CHD")
                + 908130. * getSMEFTCoeffEW("CHW")
                - 282574. * getSMEFTCoeffEW("CHWB")
                - 3.259 * delta_GF
                - 2.047 * deltaMwd6()
                ;
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::delta_muWH_1()");

    //  Linear contribution from Higgs self-coupling
    mu += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    return mu;
}

const double NPSMEFTd6General::delta_muWH_2(const double sqrt_s) const {
    double mu = 0.0;

    if (FlagQuadraticTerms) {
        if (sqrt_s == 8.0) {
            mu += 0.0;
        } else if (sqrt_s == 13.0) {
            mu += cWsch * (
                    (+(0.014703) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                    + (0.0009196) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                    + (0.46) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                    + (2.6808) * pow(getSMEFTCoeffEW("CHq3R", 0, 0), 2.0)
                    + (0.16559) * pow(getSMEFTCoeffEW("CHq3R", 1, 1), 2.0)
                    + (0.0036771) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                    + (0.0036771) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                    + (0.0036771) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                    + (-0.00735169) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                    + (0.107336) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                    + (0.20952) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (0.023682) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (-0.00735169) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.00735169) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.0073527) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.0268286) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHW")
                    + (-0.0523729) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (-0.00592073) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (0.00183843) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.00183843) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.00183825) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.94797) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (0.100674) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (-0.0536603) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.0536603) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.053669) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.002) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (-0.10475) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.10475) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.104756) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.0118402) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.0118402) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.0118411) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.00735169) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.00735169) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    ) * pow(1000000.0, 2.0)
                    );
            mu += cWsch * ((-0.0007) * pow(deltaGwd6(), 2.0));

            mu += cWsch * (
                    +(-0.00019) * deltaGwd6() * getSMEFTCoeffEW("CHbox")
                    + (-0.000155) * deltaGwd6() * getSMEFTCoeffEW("CHD")
                    + (-0.0007) * deltaGwd6() * getSMEFTCoeffEW("CHW")
                    + (-0.0019) * deltaGwd6() * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (-0.0003) * deltaGwd6() * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (-0.00063) * deltaGwd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.00063) * deltaGwd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.00019) * deltaGwd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    )*1000000;
        } else
            throw std::runtime_error("Bad argument in NPSMEFTd6General::delta_muWH_2()");
    }

    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    //  mu = mu + cLHd6 * cLH3d62 * deltaH3L2(C1) * deltaG_hhhRatio() * deltaG_hhhRatio();

    return mu;
}

const double NPSMEFTd6General::muWH(const double sqrt_s) const //AG:modified
{
    double mu = 1.0;

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eWHint + eWHpar;

    // Linear contribution (including the Higgs self-coupling)
    mu += delta_muWH_1(sqrt_s);

    // Quadratic contribution (including the Higgs self-coupling)
    mu += delta_muWH_2(sqrt_s);

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::delta_muZH_1(const double sqrt_s) const {
    double mu = 0.0;
    double C1 = 0.0;
    
    double CHB = 0.0, CHW = 0.0, CHWB = 0.0, CHD = 0.0, CHbox = 0.0, CHl3R11 = 0.0;
    double CHl3R22 = 0.0, CllR1221 = 0.0, CHq1R11 = 0.0, CHq3R11 = 0.0, CHq1R22 = 0.0;
    double CHq3R22 = 0.0, CHuR11 = 0.0, CHuR22 = 0.0, CHdR11 = 0.0, CHdR22 = 0.0;
    double muRG = muw;
    
//  Wilson coefficients definitions 
    CHB = getSMEFTCoeff("CHB", muRG); 
    CHW = getSMEFTCoeff("CHW", muRG); 
    CHWB = getSMEFTCoeff("CHWB", muRG); 
    CHD = getSMEFTCoeff("CHD", muRG); 
    CHbox = getSMEFTCoeff("CHbox", muRG); 
    CHl3R11 = getSMEFTCoeff("CHl3R",0,0, muRG); 
    CHl3R22 = getSMEFTCoeff("CHl3R",1,1, muRG); 
    CllR1221 = getSMEFTCoeff("CllR",0,1,1,0, muRG); 
    CHq1R11 = getSMEFTCoeff("CHq1R",0,0, muRG); 
    CHq3R11 = getSMEFTCoeff("CHq3R",0,0, muRG); 
    CHq1R22 = getSMEFTCoeff("CHq1R",1,1, muRG); 
    CHq3R22 = getSMEFTCoeff("CHq3R",1,1, muRG); 
    CHuR11 = getSMEFTCoeff("CHuR",0,0, muRG); 
    CHuR22 = getSMEFTCoeff("CHuR",1,1, muRG); 
    CHdR11 = getSMEFTCoeff("CHdR",0,0, muRG); 
    CHdR22 = getSMEFTCoeff("CHdR",1,1, muRG); 

    if (sqrt_s == 1.96) {

        C1 = 0.0; // N.A.

        mu +=
                +121186. * getSMEFTCoeffEW("CHbox")
                + 79191.5 * getSMEFTCoeffEW("CHB")
                + 712325. * getSMEFTCoeffEW("CHW")
                - 813859. * getSMEFTCoeffEW("CHq1R", 0, 0)
                + 3350.92 * getSMEFTCoeffEW("CHq1R", 1, 1)
                + 527754. * getSMEFTCoeffEW("CHuR", 0, 0)
                + 1274.21 * getSMEFTCoeffEW("CHuR", 1, 1)
                - 67806.5 * getSMEFTCoeffEW("CHdR", 0, 0)
                - 1130.86 * getSMEFTCoeffEW("CHdR", 1, 1)
                + 1558454. * getSMEFTCoeffEW("CHq3R", 0, 0)
                + 9076.74 * getSMEFTCoeffEW("CHq3R", 1, 1)
                + cAsch * (-16406.7 * getSMEFTCoeffEW("CHD")
                + 189539. * getSMEFTCoeffEW("CHWB")
                - 2.54 * delta_GF)
                + cWsch * (+38221.8 * getSMEFTCoeffEW("CHD")
                + 309296. * getSMEFTCoeffEW("CHWB")
                - 2. * delta_GF)
                ;
    } else if (sqrt_s == 7.0) {

        C1 = 0.0123;

        mu +=
                +121226. * getSMEFTCoeffEW("CHbox")
                + 87099.3 * getSMEFTCoeffEW("CHB")
                + 717825. * getSMEFTCoeffEW("CHW")
                - 213136. * getSMEFTCoeffEW("CHq1R", 0, 0)
                + 30259.1 * getSMEFTCoeffEW("CHq1R", 1, 1)
                + 405194. * getSMEFTCoeffEW("CHuR", 0, 0)
                + 16467.8 * getSMEFTCoeffEW("CHuR", 1, 1)
                - 127014. * getSMEFTCoeffEW("CHdR", 0, 0)
                - 12241.3 * getSMEFTCoeffEW("CHdR", 1, 1)
                + 1608269. * getSMEFTCoeffEW("CHq3R", 0, 0)
                + 104261. * getSMEFTCoeffEW("CHq3R", 1, 1)
                + cAsch * (-15321.2 * getSMEFTCoeffEW("CHD")
                + 203123. * getSMEFTCoeffEW("CHWB")
                - 2.506 * delta_GF)
                + cWsch * (+35707.6 * getSMEFTCoeffEW("CHD")
                + 315273. * getSMEFTCoeffEW("CHWB")
                - 1.999 * delta_GF)
                ;
    } else if (sqrt_s == 8.0) {

        C1 = 0.0122;

        /*mu +=
                +121277. * getSMEFTCoeffEW("CHbox")
                + 87409.1 * getSMEFTCoeffEW("CHB")
                + 721014. * getSMEFTCoeffEW("CHW")
                - 211101. * getSMEFTCoeffEW("CHq1R", 0, 0)
                + 32881.7 * getSMEFTCoeffEW("CHq1R", 1, 1)
                + 409966. * getSMEFTCoeffEW("CHuR", 0, 0)
                + 18389.4 * getSMEFTCoeffEW("CHuR", 1, 1)
                - 129402. * getSMEFTCoeffEW("CHdR", 0, 0)
                - 13507. * getSMEFTCoeffEW("CHdR", 1, 1)
                + 1632382. * getSMEFTCoeffEW("CHq3R", 0, 0)
                + 115538. * getSMEFTCoeffEW("CHq3R", 1, 1)
                + cAsch * (-15333.2 * getSMEFTCoeffEW("CHD")
                + 204451. * getSMEFTCoeffEW("CHWB")
                - 2.506 * delta_GF)
                + cWsch * (+35736.8 * getSMEFTCoeffEW("CHD")
                + 316485. * getSMEFTCoeffEW("CHWB")
                - 2. * delta_GF)
                ;*/

        // AG: begin
        mu += cWsch * (
                ((0.121219) * getSMEFTCoeffEW("CHbox")
                + (0.036781) * getSMEFTCoeffEW("CHD")
                + (0.72711) * getSMEFTCoeffEW("CHW")
                + (0.081545) * getSMEFTCoeffEW("CHB")
                + (0.31005) * getSMEFTCoeffEW("CHWB")
                + (-0.19211) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.082808) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (1.61236) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.158059) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.38108) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (0.0158969) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.1238226) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (-0.02100008) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.12119837) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.12119837) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.121219) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );
        //AG:end
    } else if (sqrt_s == 13.0) {

        C1 = 0.0119;

        /*mu +=
                +121234. * getSMEFTCoeffEW("CHbox")
                + 88512.4 * getSMEFTCoeffEW("CHB")
                + 728790. * getSMEFTCoeffEW("CHW")
                - 196945. * getSMEFTCoeffEW("CHq1R", 0, 0)
                + 43331.9 * getSMEFTCoeffEW("CHq1R", 1, 1)
                + 422018. * getSMEFTCoeffEW("CHuR", 0, 0)
                + 26503. * getSMEFTCoeffEW("CHuR", 1, 1)
                - 136921. * getSMEFTCoeffEW("CHdR", 0, 0)
                - 18730.5 * getSMEFTCoeffEW("CHdR", 1, 1)
                + 1700150. * getSMEFTCoeffEW("CHq3R", 0, 0)
                + 162456. * getSMEFTCoeffEW("CHq3R", 1, 1)
                + cAsch * (-15274.7 * getSMEFTCoeffEW("CHD")
                + 207822. * getSMEFTCoeffEW("CHWB")
                - 2.502 * delta_GF)
                + cWsch * (+35605.2 * getSMEFTCoeffEW("CHD")
                + 319361. * getSMEFTCoeffEW("CHWB")
                - 1.999 * delta_GF)
                ;*/
        // AG: begin
        mu += cWsch * (
                ((0.121184) * getSMEFTCoeffEW("CHbox")
                + (0.036574) * getSMEFTCoeffEW("CHD")
                + (0.73619) * getSMEFTCoeffEW("CHW")
                + (0.082602) * getSMEFTCoeffEW("CHB")
                + (0.31339) * getSMEFTCoeffEW("CHWB")
                + (-0.1927) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.108112) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (1.6542) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.21874) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.39005) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (0.023369) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.1274518) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (-0.02848691) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.121233) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.121233) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.121184) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );
        //AG:end
    } else if (sqrt_s == 14.0) {

        // Mw scheme

        C1 = 0.0118;

        mu +=
                cWsch * (
                +82708.7 * CHB 
                +736201. * CHW 
                +313759. * CHWB 
                +36761.1 * CHD 
                +121603. * CHbox 
                -121162. * (CHl3R11 + CHl3R22 - CllR1221)  
                -232996. * CHq1R11 
                +1675060. * CHq3R11 
                +77454.8 * CHq1R22 
                +203131. * CHq3R22 
                +404665. * CHuR11 
                +26641. * CHuR22 
                -132321. * CHdR11 
                -18720.6 * CHdR22
                );
    } else if (sqrt_s == 27.0) {

        // Only Alpha scheme

        C1 = 0.0116; // From arXiv: 1902.00134

        mu +=
                +121206. * getSMEFTCoeffEW("CHbox")
                - 101865. * getSMEFTCoeffEW("CHq1R", 0, 0)
                + 468029. * getSMEFTCoeffEW("CHuR", 0, 0)
                - 173377. * getSMEFTCoeffEW("CHdR", 0, 0)
                + 2002478. * getSMEFTCoeffEW("CHq3R", 0, 0)
                - 15486.3 * getSMEFTCoeffEW("CHD")
                + 89958. * getSMEFTCoeffEW("CHB")
                + 735013. * getSMEFTCoeffEW("CHW")
                + 211026. * getSMEFTCoeffEW("CHWB")
                - 2.505 * delta_GF
                ;
    } else if (sqrt_s == 50.0) {

        // Mw scheme

        C1 = 0.0; // N.A.

        mu +=
                cWsch * (
                +84651.9 * CHB 
                +745844. * CHW 
                +317941. * CHWB 
                +36732.9 * CHD 
                +121413. * CHbox 
                -121096. * (CHl3R11 + CHl3R22 - CllR1221)
                -166824. * CHq1R11 
                +1735550. * CHq3R11 
                +105478. * CHq1R22 
                +357701. * CHq3R22 
                +404281. * CHuR11 
                +53551.6 * CHuR22 
                -142253. * CHdR11 
                -34995.9 * CHdR22
                );
    } else if (sqrt_s == 84.0) {

        // Mw scheme

        C1 = 0.0; // N.A.

        mu +=
                cWsch * (
                +85156.7 * CHB 
                +748204. * CHW 
                +318992. * CHWB 
                +36536.9 * CHD 
                +121415. * CHbox 
                -120911. * (CHl3R11 + CHl3R22 - CllR1221)
                -136107. * CHq1R11 
                +1730540. * CHq3R11 
                +115332. * CHq1R22 
                +424682. * CHq3R22 
                +396960. * CHuR11 
                +65688.9 * CHuR22 
                -144251. * CHdR11 
                -41973.4 * CHdR22 
                );
    } else if (sqrt_s == 100.0) {

        // Only Alpha scheme

        C1 = 0.0; // N.A.

        mu +=
                +121269. * getSMEFTCoeffEW("CHbox")
                + 90.68 * getSMEFTCoeffEW("CHq1R", 0, 0)
                + 484275. * getSMEFTCoeffEW("CHuR", 0, 0)
                - 197878. * getSMEFTCoeffEW("CHdR", 0, 0)
                + 2175601. * getSMEFTCoeffEW("CHq3R", 0, 0)
                - 14992.4 * getSMEFTCoeffEW("CHD")
                + 91707.3 * getSMEFTCoeffEW("CHB")
                + 741805. * getSMEFTCoeffEW("CHW")
                + 215319. * getSMEFTCoeffEW("CHWB")
                - 2.504 * delta_GF
                ;
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::delta_muZH_1()");

    //  Linear contribution from Higgs self-coupling
    mu += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    return mu;
}

const double NPSMEFTd6General::delta_muZH_2(const double sqrt_s) const {
    double mu = 0.0;

    if (FlagQuadraticTerms) {
        if (sqrt_s == 8.0) {
            mu += 0.0;
        } else if (sqrt_s == 13.0) {
            mu += cWsch * (
                    (+(0.014709) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                    + (0.0001828) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                    + (0.33883) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                    + (0.03517) * pow(getSMEFTCoeffEW("CHB"), 2.0)
                    + (0.06101) * pow(getSMEFTCoeffEW("CHWB"), 2.0)
                    + (2.4309) * pow(getSMEFTCoeffEW("CHq1R", 0, 0), 2.0)
                    + (0.17818) * pow(getSMEFTCoeffEW("CHq1R", 1, 1), 2.0)
                    + (2.4309) * pow(getSMEFTCoeffEW("CHq3R", 0, 0), 2.0)
                    + (0.17818) * pow(getSMEFTCoeffEW("CHq3R", 1, 1), 2.0)
                    + (1.512) * pow(getSMEFTCoeffEW("CHuR", 0, 0), 2.0)
                    + (0.051115) * pow(getSMEFTCoeffEW("CHuR", 1, 1), 2.0)
                    + (0.9114) * pow(getSMEFTCoeffEW("CHdR", 0, 0), 2.0)
                    + (0.12658) * pow(getSMEFTCoeffEW("CHdR", 1, 1), 2.0)
                    + (0.0036747) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                    + (0.0036747) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                    + (0.0036747) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                    + (0.0007706) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                    + (0.089253) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                    + (0.0100228) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHB")
                    + (0.038007) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHWB")
                    + (-0.023331) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 0, 0)
                    + (0.013107) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 1, 1)
                    + (0.20054) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (0.02653) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (0.04728) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHuR", 0, 0)
                    + (0.0028337) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHuR", 1, 1)
                    + (-0.0154464) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHdR", 0, 0)
                    + (-0.00345757) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHdR", 1, 1)
                    + (-0.00735198) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.00735198) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.0073517) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.023824) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHW")
                    + (-0.0186024) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHB")
                    + (-0.0163142) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHWB")
                    + (-0.0223393) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 0, 0)
                    + (-0.00245371) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 1, 1)
                    + (0.0083336) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (-0.00056189) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (-0.0522227) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHuR", 0, 0)
                    + (-0.003119027) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHuR", 1, 1)
                    + (0.017032) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHdR", 0, 0)
                    + (0.0038028) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHdR", 1, 1)
                    + (-0.00222376) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.00222376) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.0022196) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.003359) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHB")
                    + (0.21456) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHWB")
                    + (-0.17418) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 0, 0)
                    + (0.042875) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 1, 1)
                    + (0.84884) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (0.099481) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (0.0184103) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHuR", 0, 0)
                    + (0.0012777) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHuR", 1, 1)
                    + (-0.00612324) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHdR", 0, 0)
                    + (-0.00153483) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHdR", 1, 1)
                    + (-0.0446364) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.0446364) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.044638) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.073521) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHWB")
                    + (0.071113) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                    + (0.0100257) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                    + (0.006735) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (0.0069349) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (0.183946) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHuR", 0, 0)
                    + (0.0100203) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHuR", 1, 1)
                    + (-0.059448) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHdR", 0, 0)
                    + (-0.0123557) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHdR", 1, 1)
                    + (-0.0050083) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.0050083) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.0050114) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.009927) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                    + (0.021428) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                    + (0.29213) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (0.038981) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (0.132604) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHuR", 0, 0)
                    + (0.0070524) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHuR", 1, 1)
                    + (-0.0427501) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHdR", 0, 0)
                    + (-0.008726) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHdR", 1, 1)
                    + (-0.0190091) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.0190091) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.0190052) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-1.1966) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (0.011703) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.011703) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.01167) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.15048) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (-0.0065592) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.0065592) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.0065532) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.100277) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.100277) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.100266) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.0132704) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.0132704) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.0132638) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.02364103) * getSMEFTCoeffEW("CHuR", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.02364103) * getSMEFTCoeffEW("CHuR", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.023635) * getSMEFTCoeffEW("CHuR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.001417969) * getSMEFTCoeffEW("CHuR", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.001417969) * getSMEFTCoeffEW("CHuR", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.00141704) * getSMEFTCoeffEW("CHuR", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.0077183) * getSMEFTCoeffEW("CHdR", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.0077183) * getSMEFTCoeffEW("CHdR", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.0077248) * getSMEFTCoeffEW("CHdR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.0017279) * getSMEFTCoeffEW("CHdR", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.0017279) * getSMEFTCoeffEW("CHdR", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.00172848) * getSMEFTCoeffEW("CHdR", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.00735198) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.00735198) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    ) * pow(1000000.0, 2.0)
                    );

            mu += cWsch * ((0.008) * pow(deltaGzd6(), 2.0));

            mu += cWsch * (
                    +(0.00021) * deltaGzd6() * getSMEFTCoeffEW("CHD")
                    + (-0.0015) * deltaGzd6() * getSMEFTCoeffEW("CHW")
                    + (0.0007) * deltaGzd6() * getSMEFTCoeffEW("CHB")
                    + (-0.0007) * deltaGzd6() * getSMEFTCoeffEW("CHWB")
                    + (-0.014) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 0, 0)
                    + (0.0024) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (-0.0012) * deltaGzd6() * getSMEFTCoeffEW("CHuR", 0, 0)
                    + (0.00084) * deltaGzd6() * getSMEFTCoeffEW("CHdR", 0, 0)
                    + (0.00045) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.00016) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                    )*1000000;
        } else
            throw std::runtime_error("Bad argument in NPSMEFTd6General::delta_muZH_2()");
    }

    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    //  mu = mu + cLHd6 * cLH3d62 * deltaH3L2(C1) * deltaG_hhhRatio() * deltaG_hhhRatio();

    return mu;
}

const double NPSMEFTd6General::muZH(const double sqrt_s) const //AG:modified
{
    double mu = 1.0;

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eZHint + eZHpar;

    // Linear contribution (including the Higgs self-coupling)
    mu += delta_muZH_1(sqrt_s);

    // Quadratic contribution (including the Higgs self-coupling)
    mu += delta_muZH_2(sqrt_s);

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::delta_muttH_1(const double sqrt_s) const {
    double mu = 0.0;
    double C1 = 0.0;
    
    double CG = 0.0, CuHR33 = 0.0, CHq1R11 = 0.0, CHq3R11 = 0.0, CHuR11 = 0.0;
    double CHdR11 = 0.0, CHq1R22 = 0.0, CHq3R22 = 0.0, CHuR22 = 0.0, CHdR22 = 0.0;
    double CHq1R33 = 0.0, CHq3R33 = 0.0, CHuR33 = 0.0, CuGR33 = 0.0, Cqq1R1133 = 0.0;
    double Cqq1R1331 = 0.0, Cqq1R2233 = 0.0, Cqq1R2332 = 0.0, Cqq3R1133 = 0.0, Cqq3R1331 = 0.0;
    double Cqq3R2233 = 0.0, Cqq3R2332 = 0.0, CuuR1133 = 0.0, CuuR2233 = 0.0, CuuR1331 = 0.0;
    double CuuR2332 = 0.0, Cud1R3311 = 0.0, Cud1R3322 = 0.0, Cud8R3311 = 0.0, Cud8R3322 = 0.0;
    double Cqu1R1133 = 0.0, Cqu1R2233 = 0.0, Cqu1R3311 = 0.0, Cqu1R3322 = 0.0, Cqu8R1133 = 0.0;
    double Cqu8R2233 = 0.0, Cqu8R3311 = 0.0, Cqu8R3322 = 0.0, Cqd1R3311 = 0.0, Cqd1R3322 = 0.0, Cqd8R3311 = 0.0, Cqd8R3322 = 0.0; 
    double muRG = 240.;
    
//  Wilson coefficients definitions 
    CG = getSMEFTCoeff("CG", muRG); 
    CuHR33 = getSMEFTCoeff("CuHR",2,2, muRG); 
    CHq1R11 = getSMEFTCoeff("CHq1R",0,0, muRG); 
    CHq3R11 = getSMEFTCoeff("CHq3R",0,0, muRG); 
    CHuR11 = getSMEFTCoeff("CHuR",0,0, muRG); 
    CHdR11 = getSMEFTCoeff("CHdR",0,0, muRG); 
    CHq1R22 = getSMEFTCoeff("CHq1R",1,1, muRG); 
    CHq3R22 = getSMEFTCoeff("CHq3R",1,1, muRG); 
    CHuR22 = getSMEFTCoeff("CHuR",1,1, muRG); 
    CHdR22 = getSMEFTCoeff("CHdR",1,1, muRG); 
    CHq1R33 = getSMEFTCoeff("CHq1R",2,2, muRG); 
    CHq3R33 = getSMEFTCoeff("CHq3R",2,2, muRG); 
    CHuR33 = getSMEFTCoeff("CHuR",2,2, muRG); 
    CuGR33 = getSMEFTCoeff("CuGR",2,2, muRG); 
    Cqq1R1133 = getSMEFTCoeff("Cqq1R",0,0,2,2, muRG); 
    Cqq1R1331 = getSMEFTCoeff("Cqq1R",0,2,2,0, muRG); 
    Cqq1R2233 = getSMEFTCoeff("Cqq1R",1,1,2,2, muRG); 
    Cqq1R2332 = getSMEFTCoeff("Cqq1R",1,2,2,1, muRG); 
    Cqq3R1133 = getSMEFTCoeff("Cqq3R",0,0,2,2, muRG); 
    Cqq3R1331 = getSMEFTCoeff("Cqq3R",0,2,2,0, muRG); 
    Cqq3R2233 = getSMEFTCoeff("Cqq3R",1,1,2,2, muRG); 
    Cqq3R2332 = getSMEFTCoeff("Cqq3R",1,2,2,1, muRG); 
    CuuR1133 = getSMEFTCoeff("CuuR",0,0,2,2, muRG); 
    CuuR2233 = getSMEFTCoeff("CuuR",1,1,2,2, muRG); 
    CuuR1331 = getSMEFTCoeff("CuuR",0,2,2,0, muRG); 
    CuuR2332 = getSMEFTCoeff("CuuR",1,2,2,1, muRG); 
    Cud1R3311 = getSMEFTCoeff("Cud1R",2,2,0,0, muRG); 
    Cud1R3322 = getSMEFTCoeff("Cud1R",2,2,1,1, muRG); 
    Cud8R3311 = getSMEFTCoeff("Cud8R",2,2,0,0, muRG); 
    Cud8R3322 = getSMEFTCoeff("Cud8R",2,2,1,1, muRG); 
    Cqu1R1133 = getSMEFTCoeff("Cqu1R",0,0,2,2, muRG); 
    Cqu1R2233 = getSMEFTCoeff("Cqu1R",1,1,2,2, muRG); 
    Cqu1R3311 = getSMEFTCoeff("Cqu1R",2,2,0,0, muRG); 
    Cqu1R3322 = getSMEFTCoeff("Cqu1R",2,2,1,1, muRG); 
    Cqu8R1133 = getSMEFTCoeff("Cqu8R",0,0,2,2, muRG); 
    Cqu8R2233 = getSMEFTCoeff("Cqu8R",1,1,2,2, muRG); 
    Cqu8R3311 = getSMEFTCoeff("Cqu8R",2,2,0,0, muRG); 
    Cqu8R3322 = getSMEFTCoeff("Cqu8R",2,2,1,1, muRG); 
    Cqd1R3311 = getSMEFTCoeff("Cqd1R",2,2,0,0, muRG); 
    Cqd1R3322 = getSMEFTCoeff("Cqd1R",2,2,1,1, muRG); 
    Cqd8R3311 = getSMEFTCoeff("Cqd8R",2,2,0,0, muRG); 
    Cqd8R3322 = getSMEFTCoeff("Cqd8R",2,2,1,1, muRG); 

    // 4F ccontributions computed using SMEFTsimA
    if (sqrt_s == 1.96) {

        C1 = 0.0; // N.A.

        mu +=
                +423765. * getSMEFTCoeffEW("CHG")
                - 4152.27 * getSMEFTCoeffEW("CG")
                + 568696. * getSMEFTCoeffEW("CuGR", 2, 2)
                - 2.844 * deltaG_hff(quarks[TOP]).real()
                + 57950.7 * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2)
                + 572237. * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0)
                + 68506.5 * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                + 689368. * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                + 34359.2 * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2)
                + 562953. * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                - 1123.41 * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                + 15070.6 * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                + 22531.7 * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                + 13290.1 * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                + 152635. * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                + 137479. * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0)
                - 890.245 * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                + 15388.5 * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                ;
    } else if (sqrt_s == 7.0) {

        C1 = 0.0387;

        mu +=
                +531046. * getSMEFTCoeffEW("CHG")
                - 85174.4 * getSMEFTCoeffEW("CG")
                + 810365. * getSMEFTCoeffEW("CuGR", 2, 2)
                - 2.846 * deltaG_hff(quarks[TOP]).real()
                + 19387.7 * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2)
                + 309431. * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0)
                + 53723.7 * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                + 633768. * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                + 19654.7 * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2)
                + 303278. * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                - 3442.03 * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                + 41220. * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                + 6827.86 * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                + 7038.59 * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                + 116509. * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                + 74277.5 * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0)
                - 2514.79 * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                + 41346.5 * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                ;
    } else if (sqrt_s == 8.0) {

        C1 = 0.0378;

        /*mu +=
                +535133. * getSMEFTCoeffEW("CHG")
                - 86316.6 * getSMEFTCoeffEW("CG")
                + 824047. * getSMEFTCoeffEW("CuGR", 2, 2)
                - 2.846 * deltaG_hff(quarks[TOP]).real()
                + 18617. * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2)
                + 294168. * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0)
                + 51386.8 * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                + 603913. * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                + 18807. * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2)
                + 287709. * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                - 3419.45 * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                + 39513.7 * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                + 6838.91 * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                + 6363.98 * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                + 110752. * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                + 70573.7 * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0)
                - 2659.57 * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                + 39608.7 * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                ;*/

        //AG:begin
        mu += cWsch * (
                ((0.1213) * getSMEFTCoeffEW("CHbox")
                + (-0.03042977) * getSMEFTCoeffEW("CHD")
                + (0.0013429) * getSMEFTCoeffEW("CHW")
                + (0.00034889) * getSMEFTCoeffEW("CHB")
                + (-0.001046257) * getSMEFTCoeffEW("CHWB")
                + (-0.0008895) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (6.729e-05) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0006294) * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.0041079) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.00015173) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.00062947) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.52771) * getSMEFTCoeffEW("CHG")
                + (-0.1223697) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (-0.839333) * getSMEFTCoeffEW("CuGR", 2, 2)
                + (0.08296) * getSMEFTCoeffEW("CG")
                + (-0.0097958) * getSMEFTCoeffEW("CuWR", 2, 2)
                + (-0.0033868) * getSMEFTCoeffEW("CuBR", 2, 2)
                + (0.019807) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2)
                + (0.2932) * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0)
                + (-0.0007416) * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2)
                + (0.0055071) * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1)
                + (0.05702) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                + (0.60888) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                + (0.0021613) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2)
                + (0.030738) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1)
                + (0.019568) * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2)
                + (0.28692) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                + (0.00036217) * getSMEFTCoeffEW("CuuR", 1, 1, 2, 2)
                + (0.0053893) * getSMEFTCoeffEW("CuuR", 1, 2, 2, 1)
                + (-0.00285764) * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                + (-0.000223758) * getSMEFTCoeffEW("Cud1R", 2, 2, 1, 1)
                + (0.041058) * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                + (0.0032835) * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1)
                + (0.007507) * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                + (0.0064828) * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                + (-0.00012226) * getSMEFTCoeffEW("Cqu1R", 1, 1, 2, 2)
                + (0.00012461) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1)
                + (0.11116) * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                + (0.070065) * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0)
                + (0.0045917) * getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2)
                + (0.0013165) * getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1)
                + (-0.0019135) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                + (-0.0001571758) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1)
                + (0.041092) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                + (0.0032845) * getSMEFTCoeffEW("Cqd8R", 2, 2, 1, 1)
                + (-0.0609562) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0609562) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.06105) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );
        //AG:end
    } else if (sqrt_s == 13.0) {

        C1 = 0.0351;    // 13 TeV
        
        /*mu +=
                +538046. * getSMEFTCoeffEW("CHG")
                - 85159.5 * getSMEFTCoeffEW("CG")
                + 861157. * getSMEFTCoeffEW("CuGR", 2, 2)
                - 2.846 * deltaG_hff(quarks[TOP]).real()
                + 13574.9 * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2)
                + 227043. * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0)
                + 41257.5 * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                + 473396. * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                + 14488.3 * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2)
                + 221664. * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                - 3400.07 * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                + 31615.5 * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                + 4516.51 * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                + 4161.27 * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                + 85356.9 * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                + 53893.6 * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0)
                - 2791.1 * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                + 30575.2 * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                ;*/

        //AG:begin
        // mu += cWsch * // QCD LO contribution should be alpha-MW scheme independent. Use as first approx for the moment 
        mu +=  (
                ((0.12121) * getSMEFTCoeffEW("CHbox")
                + (-0.03042744) * getSMEFTCoeffEW("CHD")
                + (0.001047) * getSMEFTCoeffEW("CHW")
                + (0.00026451) * getSMEFTCoeffEW("CHB")
                + (-0.00075726) * getSMEFTCoeffEW("CHWB")
                + (-0.0007866) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.0004779) * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.0041559) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.00020603) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.00047808) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.53368) * getSMEFTCoeffEW("CHG")
                + (-0.122585689) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (-0.887533) * getSMEFTCoeffEW("CuGR", 2, 2)
                + (0.08762) * getSMEFTCoeffEW("CG")
                + (-0.00752105) * getSMEFTCoeffEW("CuWR", 2, 2)
                + (-0.0025626) * getSMEFTCoeffEW("CuBR", 2, 2)
                + (0.015813) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2)
                + (0.23866) * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0)
                + (-0.0009533) * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2)
                + (0.0062474) * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1)
                + (0.048406) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                + (0.5037) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                + (0.002587) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2)
                + (0.036061) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1)
                + (0.016338) * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2)
                + (0.23349) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                + (0.00041585) * getSMEFTCoeffEW("CuuR", 1, 1, 2, 2)
                + (0.0061126) * getSMEFTCoeffEW("CuuR", 1, 2, 2, 1)
                + (-0.00245583) * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                + (-0.000269396) * getSMEFTCoeffEW("Cud1R", 2, 2, 1, 1)
                + (0.034461) * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                + (0.003882) * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1)
                + (0.0058827) * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                + (0.0050841) * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                + (-0.00013204) * getSMEFTCoeffEW("Cqu1R", 1, 1, 2, 2)
                + (0.00013861) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1)
                + (0.09143) * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                + (0.057019) * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0)
                + (0.0053692) * getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2)
                + (0.0014935) * getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1)
                + (-0.001545363) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                + (-0.000181173) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1)
                + (0.034487) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                + (0.00388) * getSMEFTCoeffEW("Cqd8R", 2, 2, 1, 1)
                + (-0.06091715) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.06091715) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.060881) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );
        //AG:end 

    } else if (sqrt_s == 14.0) {

        //  Mw scheme. Only interference with QCD 

        C1 = 0.0347;

        mu +=  (
                +83480.4 * CG 
                -122879. * CuHR33 
                -4.73871 * CHq1R11 
                -231.66 * CHq3R11 
                -91.7543 * CHuR11 
                +87.4143 * CHdR11 
                -24.8507 * CHq1R22 
                +16.9517 * CHq3R22 
                -17.2674 * CHuR22 
                -15.1008 * CHdR22 
                -115.164 * CHq1R33 
                -217.306 * CHq3R33 
                -239.384 * CHuR33 
                -865559. * CuGR33 
                -115.367 * Cqq1R1133 
                +172262. * Cqq1R1331 
                -8.83359 * Cqq1R2233 
                +5264.44 * Cqq1R2332 
                -102.174 * Cqq3R1133 
                +376043. * Cqq3R1331 
                -10.6569 * Cqq3R2233 
                +31547.6 * Cqq3R2332 
                -46.0629 * CuuR1133 
                -48.4844 * CuuR2233 
                +173243. * CuuR1331 
                +5195.12 * CuuR2332 
                -77.2185 * Cud1R3311 
                -72.1335 * Cud1R3322 
                +26016.4 * Cud8R3311 
                +1960.64 * Cud8R3322 
                -130.929 * Cqu1R1133 
                -46.8336 * Cqu1R2233 
                -202.882 * Cqu1R3311 
                -30.1958 * Cqu1R3322 
                +68525.2 * Cqu8R1133 
                +4494.83 * Cqu8R2233 
                +42510. * Cqu8R3311 
                +1281.44 * Cqu8R3322 
                -152.4 * Cqd1R3311 
                -37.2748 * Cqd1R3322 
                +26242.2 * Cqd8R3311 
                +1993.33 * Cqd8R3322 
                );

    } else if (sqrt_s == 27.0) {

        //  Old (but ok) implementation + Missing 4F

        C1 = 0.0320; // From arXiv: 1902.00134

        mu +=
                +519682. * getSMEFTCoeffEW("CHG")
                - 68463.1 * getSMEFTCoeffEW("CG")
                + 884060. * getSMEFTCoeffEW("CuGR", 2, 2)
                - 2.849 * deltaG_hff(quarks[TOP]).real()
                ;
        
    } else if (sqrt_s == 50.0) {

        //  Mw scheme. Only interference with QCD

        C1 = 0.0; // N.A.

        mu +=  (
                +48030.8 * CG 
                -122979. * CuHR33 
                -205.704 * CHq1R11 
                -174.036 * CHq3R11 
                +35.0258 * CHuR11 
                +9.29779 * CHdR11 
                -106.234 * CHq1R22 
                -23.9319 * CHq3R22 
                -78.4184 * CHuR22 
                -10.0042 * CHdR22 
                -85.4844 * CHq1R33 
                -242.855 * CHq3R33 
                -258.711 * CHuR33 
                -886651. * CuGR33 
                -80.4492 * Cqq1R1133 
                +87600.9 * Cqq1R1331 
                -18.1512 * Cqq1R2233 
                +6155.28 * Cqq1R2332 
                +30.6261 * Cqq3R1133 
                +198713. * Cqq3R1331 
                -48.6117 * Cqq3R2233 
                +28525.5 * Cqq3R2332 
                -210.478 * CuuR1133 
                -20.4365 * CuuR2233 
                +88038.5 * CuuR1331 
                +6188.99 * CuuR2332 
                -110.028 * Cud1R3311 
                -80.9324 * Cud1R3322 
                +14322.3 * Cud8R3311 
                +2112.96 * Cud8R3322 
                -195.357 * Cqu1R1133 
                -32.7726 * Cqu1R2233 
                -6.33031 * Cqu1R3311 
                -49.1434 * Cqu1R3322 
                +35537.6 * Cqu8R1133 
                +4228.53 * Cqu8R2233 
                +21136.8 * Cqu8R3311 
                +1540.47 * Cqu8R3322 
                -152.389 * Cqd1R3311 
                -20.2313 * Cqd1R3322 
                +13562.3 * Cqd8R3311 
                +2031.46 * Cqd8R3322 
                );
        
    } else if (sqrt_s == 84.0) {

        //  Mw scheme. Only interference with QCD

        C1 = 0.0; // N.A.

        mu +=  (
                +29568.5 * CG 
                -122466. * CuHR33 
                -188.515 * CHq1R11 
                -161.156 * CHq3R11 
                -18.7298 * CHuR11 
                +84.0969 * CHdR11 
                -60.6269 * CHq1R22 
                +3.04679 * CHq3R22 
                -33.1077 * CHuR22 
                -10.836 * CHdR22 
                +33.4766 * CHq1R33 
                -249.387 * CHq3R33 
                -170.736 * CHuR33 
                -882584. * CuGR33 
                +165.169 * Cqq1R1133 
                +66847.5 * Cqq1R1331 
                -29.2351 * Cqq1R2233 
                +6258.47 * Cqq1R2332 
                +71.2558 * Cqq3R1133 
                +153407. * Cqq3R1331 
                -31.3139 * Cqq3R2233 
                +26872.2 * Cqq3R2332 
                -27.0795 * CuuR1133 
                -49.9167 * CuuR2233 
                +66805.3 * CuuR1331 
                +6238.71 * CuuR2332 
                -2.604 * Cud1R3311 
                -100.751 * Cud1R3322 
                +11049.3 * Cud8R3311 
                +2000. * Cud8R3322 
                +82.7029 * Cqu1R1133 
                -5.7992 * Cqu1R2233 
                -28.88 * Cqu1R3311 
                -56.5691 * Cqu1R3322 
                +27287.5 * Cqu8R1133 
                +4036.71 * Cqu8R2233 
                +15311. * Cqu8R3311 
                +1562.51 * Cqu8R3322 
                -40.5882 * Cqd1R3311 
                -14.8135 * Cqd1R3322 
                +10857.1 * Cqd8R3311 
                +1948.06 * Cqd8R3322
                );

    } else if (sqrt_s == 100.0) {

        //  Old (but ok) implementation + Missing 4F

        C1 = 0.0; // N.A.

        mu +=
                +467438. * getSMEFTCoeffEW("CHG")
                - 22519. * getSMEFTCoeffEW("CG")
                + 880378. * getSMEFTCoeffEW("CuGR", 2, 2)
                - 2.837 * deltaG_hff(quarks[TOP]).real()
                ;
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::delta_muttH_1()");

    //  Linear contribution from Higgs self-coupling
    mu += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    return mu;
}

const double NPSMEFTd6General::delta_muttH_2(const double sqrt_s) const {
    double mu = 0.0;

    if (FlagQuadraticTerms) {
        if (sqrt_s == 8.0) {
            mu += 0.0;
        } else if (sqrt_s == 13.0) {
            mu += cWsch * (
                    +(0.014702) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                    + (0.0009337) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                    + (0.04044) * pow(getSMEFTCoeffEW("CHq1R", 0, 0), 2.0)
                    + (0.001357) * pow(getSMEFTCoeffEW("CHq1R", 1, 1), 2.0)
                    + (0.0404) * pow(getSMEFTCoeffEW("CHq3R", 0, 0), 2.0)
                    + (0.0013565) * pow(getSMEFTCoeffEW("CHq3R", 1, 1), 2.0)
                    + (0.7841) * pow(getSMEFTCoeffEW("CHG"), 2.0)
                    + (0.00375) * pow(getSMEFTCoeffEW("CuHR", 2, 2), 2.0)
                    + (1.087) * pow(getSMEFTCoeffEW("CuGR", 2, 2), 2.0)
                    + (2.3045) * pow(getSMEFTCoeffEW("CG"), 2.0)
                    + (0.014584) * pow(getSMEFTCoeffEW("CuWR", 2, 2), 2.0)
                    + (0.005576) * pow(getSMEFTCoeffEW("CuBR", 2, 2), 2.0)
                    + (0.6789) * pow(getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2), 2.0)
                    + (0.4348) * pow(getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0), 2.0)
                    + (0.02768) * pow(getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2), 2.0)
                    + (0.008345) * pow(getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1), 2.0)
                    + (0.68) * pow(getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2), 2.0)
                    + (1.4142) * pow(getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0), 2.0)
                    + (0.02769) * pow(getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2), 2.0)
                    + (0.08561) * pow(getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1), 2.0)
                    + (0.4348) * pow(getSMEFTCoeffEW("CuuR", 0, 0, 2, 2), 2.0)
                    + (0.4348) * pow(getSMEFTCoeffEW("CuuR", 0, 2, 2, 0), 2.0)
                    + (0.008345) * pow(getSMEFTCoeffEW("CuuR", 1, 1, 2, 2), 2.0)
                    + (0.008345) * pow(getSMEFTCoeffEW("CuuR", 1, 2, 2, 1), 2.0)
                    + (0.06132) * pow(getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0), 2.0)
                    + (0.004841) * pow(getSMEFTCoeffEW("Cud1R", 2, 2, 1, 1), 2.0)
                    + (0.013625) * pow(getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0), 2.0)
                    + (0.0010732) * pow(getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1), 2.0)
                    + (0.16996) * pow(getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2), 2.0)
                    + (0.10881) * pow(getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0), 2.0)
                    + (0.006934) * pow(getSMEFTCoeffEW("Cqu1R", 1, 1, 2, 2), 2.0)
                    + (0.0020928) * pow(getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1), 2.0)
                    + (0.03774) * pow(getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2), 2.0)
                    + (0.024096) * pow(getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0), 2.0)
                    + (0.0015337) * pow(getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2), 2.0)
                    + (0.0004612) * pow(getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1), 2.0)
                    + (0.06119) * pow(getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0), 2.0)
                    + (0.004829) * pow(getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1), 2.0)
                    + (0.013597) * pow(getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0), 2.0)
                    + (0.0010673) * pow(getSMEFTCoeffEW("Cqd8R", 2, 2, 1, 1), 2.0)
                    + (-0.007357295) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                    + (0.00050321) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (0.028502) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHG")
                    + (-0.01484933) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CuHR", 2, 2)
                    + (-0.107575) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CuGR", 2, 2)
                    + (0.010564) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CG")
                    + (-0.000912358) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CuWR", 2, 2)
                    + (-0.000310819) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CuBR", 2, 2)
                    + (0.0019226) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2)
                    + (0.028947) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0)
                    + (-0.00011542) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2)
                    + (0.00075765) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1)
                    + (0.0058677) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                    + (0.061084) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                    + (0.00031326) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2)
                    + (0.0043669) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1)
                    + (0.0019799) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2)
                    + (0.028312) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                    + (0.00074137) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CuuR", 1, 2, 2, 1)
                    + (-0.000298441) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                    + (0.0041771) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                    + (0.00047054) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1)
                    + (0.00071321) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                    + (0.00061642) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                    + (0.0110873) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                    + (0.0069104) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0)
                    + (0.00065058) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2)
                    + (0.00018121) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1)
                    + (-0.0001874256) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1)
                    + (0.0041783) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.00047084) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.0071375) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CuGR", 2, 2)
                    + (0.0037252) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CG")
                    + (0.026911) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CuWR", 2, 2)
                    + (-0.0026404) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CuBR", 2, 2)
                    + (0.00021154) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2)
                    + (0.00059) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0)
                    + (-0.00101219) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2)
                    + (-0.00731675) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1)
                    + (-0.000191691) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                    + (-0.00143574) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2)
                    + (-0.0155257) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1)
                    + (-0.001117055) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                    + (-0.00273813) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CuuR", 1, 1, 2, 2)
                    + (-0.00782204) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CuuR", 1, 2, 2, 1)
                    + (-0.0002044194) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("Cud1R", 2, 2, 1, 1)
                    + (0.00041247) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                    + (-0.001044099) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                    + (-0.0001176787) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                    + (-0.000617426) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("Cqu1R", 1, 1, 2, 2)
                    + (-0.000865933) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1)
                    + (-0.00277261) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2)
                    + (-0.001727692) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1)
                    + (-0.0001626746) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("Cqd1R", 0, 0, 2, 2)
                    + (0.00026339) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("Cqd8R", 1, 1, 2, 2)
                    + (-0.001045699) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.0001177004) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq1R", 1, 1)
                    + (-0.0242) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CuHR", 2, 2)
                    + (0.000716) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2)
                    + (-0.034646) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                    + (-0.007406) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                    + (-0.009617) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2)
                    + (-0.015716) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                    + (0.010743) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                    + (0.0009319) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CuWR", 2, 2)
                    + (-0.0013849) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2)
                    + (-0.00013945) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                    + (0.0005455) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                    + (-0.0007824) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("Cud1R", 2, 2, 1, 1)
                    + (0.000349) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("Cqd1R", 0, 0, 2, 2)
                    + (-0.00047073) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CuBR", 2, 2)
                    + (-0.000101878) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0)
                    + (-0.001303) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2)
                    + (-0.00157647) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                    + (0.00023622) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CuuR", 1, 1, 2, 2)
                    + (-0.0081488) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                    + (0.0007056) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("Cud1R", 2, 2, 1, 1)
                    + (-0.00045995) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                    + (0.00019478) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1)
                    + (0.00082057) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                    + (0.00027355) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                    + (-0.000124622) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                    + (-0.00025589) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("Cqd1R", 0, 0, 2, 2)
                    + (0.0010011) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("Cqd1R", 1, 1, 2, 2)
                    + (-0.000298658) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (0.00045) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1)
                    + (-0.002292) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2)
                    + (0.0004973) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                    + (0.009579) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CuuR", 1, 1, 2, 2)
                    + (0.007383) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CuuR", 1, 2, 2, 1)
                    + (0.034689) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                    + (-0.000958) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1)
                    + (-0.003224) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                    + (-0.00050371) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2)
                    + (-0.00050371) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1)
                    + (0.00050288) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                    + (-0.00012965) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CuuR", 1, 1, 2, 2)
                    + (-0.0005446) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                    + (0.00013994) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1)
                    + (0.0013804) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("Cqu1R", 1, 1, 2, 2)
                    + (-0.0005041) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1)
                    + (0.0001237) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                    + (-0.001176913) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                    + (0.00021557) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("Cud1R", 2, 2, 1, 1)
                    + (0.0013101) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                    + (0.0015776) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1)
                    + (-0.00023607) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                    + (0.008153) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("Cqu1R", 1, 1, 2, 2)
                    + (-0.0007042) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1)
                    + (0.00046004) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                    + (-0.000194607) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0)
                    + (-0.0008201) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2)
                    + (-0.000273441) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1)
                    + (0.00012454) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                    + (0.0002565) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                    + (-0.00100107) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("Cqd8R", 2, 2, 1, 1)
                    + (0.00029847) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0)
                    + (-0.012472) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CuuR", 1, 2, 2, 1)
                    + (-0.90423) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                    + (0.0929) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("Cud1R", 2, 2, 1, 1)
                    + (0.087161) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                    + (0.0019958) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1)
                    + (0.19048) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0)
                    + (0.0121443) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1)
                    + (0.087145) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("Cqd1R", 1, 1, 2, 2)
                    + (0.0019961) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1)
                    + (0.012923) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                    + (0.00126871) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("Cqd8R", 2, 2, 1, 1)
                    + (0.034738) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("CG")
                    + (0.021802) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("CuWR", 2, 2)
                    + (0.0017674) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("CuBR", 2, 2)
                    + (0.00049917) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2)
                    + (0.012927) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                    + (0.00126852) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("CuuR", 1, 1, 2, 2)
                    + (-0.0101842) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("CuuR", 1, 2, 2, 1)
                    + (-0.0101842) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                    + (0.010186) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("Cud1R", 2, 2, 1, 1)
                    + (0.084054) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                    + (-0.010671) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1)
                    + (0.00070203) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                    + (0.00024481) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                    + (-0.001927) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("Cqu1R", 1, 1, 2, 2)
                    + (-0.0292148) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1)
                    + (0.00011522) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                    + (-0.000764818) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0)
                    + (-0.0058127) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2)
                    + (-0.0616611) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1)
                    + (-0.000311842) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("Cqd1R", 0, 0, 2, 2)
                    + (-0.004405432) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("Cqd1R", 1, 1, 2, 2)
                    + (-0.00198732) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                    + (-0.0285725) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1)
                    + (-0.00074887) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("Cqd8R", 1, 1, 2, 2)
                    + (0.00029942) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                    + (-0.00422357) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.000475661) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.00072331) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.0006366) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("CG")
                    + (-0.01119465) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2)
                    + (-0.00698442) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0)
                    + (-0.000656429) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2)
                    + (-0.0001830691) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1)
                    + (0.00019355) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1)
                    + (-0.00422373) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                    + (-0.00047546) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("Cud1R", 2, 2, 1, 1)
                    + (0.0037431) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                    + (0.0037431) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1)
                    + (-0.003741291) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                    + (1.2499) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                    + (-0.126853) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0)
                    + (-0.002833057) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1)
                    + (-0.275727) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("Cqd1R", 1, 1, 2, 2)
                    + (-0.0170037) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1)
                    + (-0.126864) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("Cqd8R", 1, 1, 2, 2)
                    + (-0.002833131) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("Cqd8R", 2, 2, 1, 1)
                    + (-0.01862109) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.00177154) * getSMEFTCoeffEW("CG") * getSMEFTCoeffEW("CuWR", 2, 2)
                    + (-0.0503556) * getSMEFTCoeffEW("CG") * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1)
                    + (-0.0317301) * getSMEFTCoeffEW("CG") * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                    + (-0.00247985) * getSMEFTCoeffEW("CG") * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                    + (-0.000708879) * getSMEFTCoeffEW("CG") * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2)
                    + (-0.01864009) * getSMEFTCoeffEW("CG") * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1)
                    + (-0.001772083) * getSMEFTCoeffEW("CG") * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                    + (-0.01862109) * getSMEFTCoeffEW("CuGR", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.00177154) * getSMEFTCoeffEW("CG") * getSMEFTCoeffEW("CuWR", 2, 2)
                    + (-0.0503556) * getSMEFTCoeffEW("CG") * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1)
                    + (-0.0317301) * getSMEFTCoeffEW("CG") * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                    + (-0.00247985) * getSMEFTCoeffEW("CG") * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                    + (-0.000708879) * getSMEFTCoeffEW("CG") * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2)
                    + (-0.01864009) * getSMEFTCoeffEW("CG") * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1)
                    + (-0.001772083) * getSMEFTCoeffEW("CG") * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                    + (0.0269) * getSMEFTCoeffEW("CG") * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                    + (0.0269) * getSMEFTCoeffEW("CG") * getSMEFTCoeffEW("Cqu1R", 1, 1, 2, 2)
                    + (-0.0269037) * getSMEFTCoeffEW("CG") * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1)
                    + (0.0007731) * getSMEFTCoeffEW("CuWR", 2, 2) * getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1)
                    + (-0.034008) * getSMEFTCoeffEW("CuWR", 2, 2) * getSMEFTCoeffEW("Cqd1R", 0, 0, 2, 2)
                    + (-0.0276195) * getSMEFTCoeffEW("CuWR", 2, 2) * getSMEFTCoeffEW("Cqd1R", 1, 1, 2, 2)
                    + (0.0028091) * getSMEFTCoeffEW("CuWR", 2, 2) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                    + (-0.000619) * getSMEFTCoeffEW("CuWR", 2, 2) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1)
                    + (-0.13154) * getSMEFTCoeffEW("CuWR", 2, 2) * getSMEFTCoeffEW("Cqd1R", 0, 0, 2, 2)
                    + (0.004949) * getSMEFTCoeffEW("CuWR", 2, 2) * getSMEFTCoeffEW("Cqd8R", 1, 1, 2, 2)
                    + (-0.006521) * getSMEFTCoeffEW("CuWR", 2, 2) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                    + (0.002492) * getSMEFTCoeffEW("CuWR", 2, 2) * getSMEFTCoeffEW("Cqd8R", 2, 2, 1, 1)
                    + (0.00044879) * getSMEFTCoeffEW("CuWR", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.00014959) * getSMEFTCoeffEW("CuWR", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.017057) * getSMEFTCoeffEW("CuBR", 2, 2) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                    + (0.00022461) * getSMEFTCoeffEW("CuBR", 2, 2) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2)
                    + (0.0014015) * getSMEFTCoeffEW("CuBR", 2, 2) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1)
                    + (0.00091266) * getSMEFTCoeffEW("CuBR", 2, 2) * getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1)
                    + (0.00091266) * getSMEFTCoeffEW("CuBR", 2, 2) * getSMEFTCoeffEW("Cqd1R", 0, 0, 2, 2)
                    + (-0.000912218) * getSMEFTCoeffEW("CuBR", 2, 2) * getSMEFTCoeffEW("Cqd1R", 1, 1, 2, 2)
                    + (-0.0230086) * getSMEFTCoeffEW("CuBR", 2, 2) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                    + (-0.0046743) * getSMEFTCoeffEW("CuBR", 2, 2) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1)
                    + (-0.00117563) * getSMEFTCoeffEW("CuBR", 2, 2) * getSMEFTCoeffEW("Cqd1R", 0, 0, 2, 2)
                    + (-0.000103453) * getSMEFTCoeffEW("CuBR", 2, 2) * getSMEFTCoeffEW("Cqd8R", 1, 1, 2, 2)
                    + (-0.005022) * getSMEFTCoeffEW("CuBR", 2, 2) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                    + (-0.0106677) * getSMEFTCoeffEW("CuBR", 2, 2) * getSMEFTCoeffEW("Cqd8R", 2, 2, 1, 1)
                    + (0.00055688) * getSMEFTCoeffEW("CuBR", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.000680356) * getSMEFTCoeffEW("CuBR", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.058583) * getSMEFTCoeffEW("CuBR", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.0195304) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0)
                    + (-0.0013111) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2)
                    + (-0.00043707) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1)
                    + (0.008605) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                    + (0.00082027) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                    + (-0.0115044) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2) * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2)
                    + (-0.0293196) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                    + (-0.00058824) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2) * getSMEFTCoeffEW("CuuR", 1, 1, 2, 2)
                    + (0.0086014) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1)
                    + (0.00081998) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                    + (0.00031031) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                    + (0.00031031) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1)
                    + (-0.00031033) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqd1R", 0, 0, 2, 2)
                    + (0.285) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqd8R", 1, 1, 2, 2)
                    + (-0.001) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                    + (-0.0008) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqd8R", 2, 2, 1, 1)
                    + (0.3785) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.61551) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.23842) * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0) * getSMEFTCoeffEW("CuuR", 1, 2, 2, 1)
                    + (-0.001926) * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0) * getSMEFTCoeffEW("Cqd8R", 1, 1, 2, 2)
                    + (-0.001926) * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                    + (0.0019241) * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0) * getSMEFTCoeffEW("Cqd8R", 2, 2, 1, 1)
                    + (-0.0015) * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.0015) * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.28911) * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.86736) * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2) * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1)
                    + (0.05014) * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2) * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                    + (0.066855) * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2) * getSMEFTCoeffEW("Cqu1R", 1, 1, 2, 2)
                    + (-0.0151167) * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.0151167) * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.015126) * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.00556) * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                    + (-0.021927) * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1)
                    + (0.031335) * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1) * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2)
                    + (0.0113331) * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1)
                    + (0.00011539) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                    + (0.00011539) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2)
                    + (-0.00011547) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1)
                    + (0.0055636) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2) * getSMEFTCoeffEW("CuuR", 1, 1, 2, 2)
                    + (0.01669) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2) * getSMEFTCoeffEW("CuuR", 1, 2, 2, 1)
                    + (0.00108813) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2)
                    + (0.0014524) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                    + (-0.000395291) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                    + (-0.000395291) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0) * getSMEFTCoeffEW("CuuR", 1, 1, 2, 2)
                    + (0.00039521) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0) * getSMEFTCoeffEW("CuuR", 1, 2, 2, 1)
                    + (-0.042) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0) * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                    + (-0.0019) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0) * getSMEFTCoeffEW("Cud1R", 2, 2, 1, 1)
                    + (-0.002) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0) * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                    + (0.06253) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0) * getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1)
                    + (-0.0058702) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2) * getSMEFTCoeffEW("Cud1R", 2, 2, 1, 1)
                    + (-0.0058702) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2) * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                    + (0.0058678) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2) * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1)
                    + (-0.003) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2) * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                    + (-0.002) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2) * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                    + (0.10864) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                    + (0.14487) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                    + (-0.0305092) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1) * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                    + (-0.0305092) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1) * getSMEFTCoeffEW("Cqu1R", 1, 1, 2, 2)
                    + (0.030531) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1)
                    + (-0.0202) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1) * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                    + (-0.0047994) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1) * getSMEFTCoeffEW("Cqd8R", 2, 2, 1, 1)
                    + (-0.000313303) * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0)
                    + (-0.000313303) * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2)
                    + (0.00031331) * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1)
                    + (0.0064625) * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.0086274) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0) * getSMEFTCoeffEW("Cud1R", 2, 2, 1, 1)
                    + (-0.00212214) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0) * getSMEFTCoeffEW("Cqd1R", 1, 1, 2, 2)
                    + (-0.00212214) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                    + (0.0021228) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1)
                    + (0.285) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0) * getSMEFTCoeffEW("Cqd1R", 0, 0, 2, 2)
                    + (-0.0015) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0) * getSMEFTCoeffEW("Cqd8R", 1, 1, 2, 2)
                    + (-0.0015) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                    + (-0.0015) * getSMEFTCoeffEW("CuuR", 1, 1, 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.0015) * getSMEFTCoeffEW("CuuR", 1, 1, 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.00556) * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0) * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                    + (-0.0002) * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0) * getSMEFTCoeffEW("Cqd1R", 0, 0, 2, 2)
                    + (0.043884) * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1)
                    + (0.00029842) * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                    + (0.00029842) * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1)
                    + (-0.000298606) * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1) * getSMEFTCoeffEW("Cqd1R", 0, 0, 2, 2)
                    + (0.0040322) * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqd1R", 1, 1, 2, 2)
                    + (0.0097484) * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.00209006) * getSMEFTCoeffEW("Cqu1R", 1, 1, 2, 2) * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                    + (-0.00209006) * getSMEFTCoeffEW("Cqu1R", 1, 1, 2, 2) * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0)
                    + (0.0020882) * getSMEFTCoeffEW("Cqu1R", 1, 1, 2, 2) * getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2)
                    + (0.00089675) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1) * getSMEFTCoeffEW("Cqd1R", 1, 1, 2, 2)
                    + (-0.000235425) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                    + (-0.000235425) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1)
                    + (0.00023517) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1) * getSMEFTCoeffEW("Cqd1R", 0, 0, 2, 2)
                    + (-0.0012) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1) * getSMEFTCoeffEW("Cqd8R", 1, 1, 2, 2)
                    + (-0.0004) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                    + (-0.0004) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1) * getSMEFTCoeffEW("Cqd8R", 2, 2, 1, 1)
                    + (-0.00071357) * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.00071357) * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.00071314) * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.0004) * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0) * getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2)
                    + (-0.0005) * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0) * getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1)
                    + (-0.0006162615) * getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                    + (-0.0006162615) * getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1)
                    + (0.00061646) * getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2) * getSMEFTCoeffEW("Cqd1R", 0, 0, 2, 2)
                    + (-0.00554128) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.00554128) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.0055443) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.003456905) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.003456905) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.0034557) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    ) * pow(1000000.0, 2.0);

        } else
            throw std::runtime_error("Bad argument in NPSMEFTd6General::delta_muttH_2()");
    }

    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    //  mu = mu + cLHd6 * cLH3d62 * deltaH3L2(C1) * deltaG_hhhRatio() * deltaG_hhhRatio();

    return mu;
}

const double NPSMEFTd6General::muttH(const double sqrt_s) const //AG:modified
{
    double mu = 1.0;

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += ettHint + ettHpar;

    // Linear contribution (including the Higgs self-coupling)
    mu += delta_muttH_1(sqrt_s);

    // Quadratic contribution (including the Higgs self-coupling)
    mu += delta_muttH_2(sqrt_s);

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::delta_mutH_1(const double sqrt_s) const {
    double mu = 0.0;
    double C1 = 0.0;

    // Obtained with MG5 in the 5Flavor-scheme (p p > h t j)
    if (sqrt_s == 8.0) {
        C1 = 0; // to be added
        mu += cWsch * (
                ((0.12122) * getSMEFTCoeffEW("CHbox")
                + (-0.03034483) * getSMEFTCoeffEW("CHD")
                + (0.2149) * getSMEFTCoeffEW("CHW")
                + (-0.07668) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.009001) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.03961) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.043175) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (-0.500813) * getSMEFTCoeffEW("CuWR", 2, 2)
                + (-0.97677) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                + (0.1629) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                + (-0.079828) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2)
                + (0.013296) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1)
                + (-0.1822825) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.1822825) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.18181) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );
    } else if (sqrt_s == 13.0) {
        C1 = 0.0091;
        mu += cWsch * (
                ((0.12116) * getSMEFTCoeffEW("CHbox")
                + (-0.03031732) * getSMEFTCoeffEW("CHD")
                + (0.14294) * getSMEFTCoeffEW("CHW")
                + (-0.1183) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.014446) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.05131) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.020319) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (-0.337708) * getSMEFTCoeffEW("CuWR", 2, 2)
                + (-0.67007) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                + (0.11138) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                + (-0.068432) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2)
                + (0.011428) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1)
                + (-0.1818849) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.1818849) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.18178) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::delta_mutH_1()");

    //  Linear contribution from Higgs self-coupling
    mu += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio();


    return mu;
}

const double NPSMEFTd6General::delta_mutH_2(const double sqrt_s) const {
    double mu = 0.0;

    if (FlagQuadraticTerms) {
        if (sqrt_s == 8.0) {
            mu += 0.0;
        } else if (sqrt_s == 13.0) {
            mu += cWsch * (
                    +(0.014714) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                    + (0.0009197) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                    + (0.10664) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                    + (0.397) * pow(getSMEFTCoeffEW("CHq3R", 0, 0), 2.0)
                    + (0.04262) * pow(getSMEFTCoeffEW("CHq3R", 1, 1), 2.0)
                    + (0.18668) * pow(getSMEFTCoeffEW("CHq3R", 2, 2), 2.0)
                    + (0.011788) * pow(getSMEFTCoeffEW("CuHR", 2, 2), 2.0)
                    + (0.7536) * pow(getSMEFTCoeffEW("CuWR", 2, 2), 2.0)
                    + (14.225) * pow(getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2), 2.0)
                    + (3.555) * pow(getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0), 2.0)
                    + (0.652) * pow(getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2), 2.0)
                    + (0.16289) * pow(getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1), 2.0)
                    + (0.010994) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                    + (-0.001836136) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                    + (0.008656) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                    + (-0.000798) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (0.004219) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 2, 2)
                    + (-0.0012381) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CuHR", 2, 2)
                    + (-0.0293566) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CuWR", 2, 2)
                    + (-0.01836136) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.01836136) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.01839) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.0021629) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHW")
                    + (0.0002008) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (-0.0010582) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 2, 2)
                    + (0.0003102) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CuHR", 2, 2)
                    + (0.007338) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CuWR", 2, 2)
                    + (0.0045973) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.0045973) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.00459305) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.08103) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 0, 0)
                    + (0.009231) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (0.09655) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 2, 2)
                    + (-0.0179965) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CuHR", 2, 2)
                    + (-0.188379) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CuWR", 2, 2)
                    + (-0.021629) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (-0.021629) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (0.021637) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.0018) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 1, 1)
                    + (0.157) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 2, 2)
                    + (-0.0585129) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CuHR", 2, 2)
                    + (-0.00854) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CuWR", 2, 2)
                    + (0.011151) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.011151) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.01114) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.0194) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHq3R", 2, 2)
                    + (-0.0079104) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CuHR", 2, 2)
                    + (0.004977) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CuWR", 2, 2)
                    + (0.0013522) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.0013522) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.0013467) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.0633763) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("CuHR", 2, 2)
                    + (-0.089472) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("CuWR", 2, 2)
                    + (0.00245) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.00245) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.00249) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.040817) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("CuWR", 2, 2)
                    + (0.003102) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.003102) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.0030947) * getSMEFTCoeffEW("CuHR", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (0.04541) * getSMEFTCoeffEW("CuWR", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + (0.04541) * getSMEFTCoeffEW("CuWR", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.0453941) * getSMEFTCoeffEW("CuWR", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-4.78) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                    + (-0.05) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2)
                    + (-0.04) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1)
                    + (-0.01) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2)
                    + (-0.011) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1)
                    + (-0.216) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1)
                    + (-0.216) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                    + (-0.02754112) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    + (-0.02754112) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                    ) * pow(1000000.0, 2.0);

        } else
            throw std::runtime_error("Bad argument in NPSMEFTd6General::delta_mutH_2()");
    }

    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    //  mu = mu + cLHd6 * cLH3d62 * deltaH3L2(C1) * deltaG_hhhRatio() * deltaG_hhhRatio();

    return mu;
}

const double NPSMEFTd6General::mutH(const double sqrt_s) const //AG:added
{
    double mu = 1.0;

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    //mu += etHint + etHpar;

    // Linear contribution (including the Higgs self-coupling)
    mu += delta_mutH_1(sqrt_s);

    // Quadratic contribution (including the Higgs self-coupling)
    mu += delta_mutH_2(sqrt_s);

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::delta_muVH_1(const double sqrt_s) const {
    double mu = 0.0;

    double sigmaWH_SM = computeSigmaWH(sqrt_s);
    double sigmaZH_SM = computeSigmaZH(sqrt_s);

    double sigmaWH_1 = delta_muWH_1(sqrt_s) * sigmaWH_SM;
    double sigmaZH_1 = delta_muZH_1(sqrt_s) * sigmaZH_SM;
    mu += ((sigmaWH_1 + sigmaZH_1) / (sigmaWH_SM + sigmaZH_SM));

    return mu;
}

const double NPSMEFTd6General::delta_muVH_2(const double sqrt_s) const {
    double mu = 0.0;

    if (FlagQuadraticTerms) {
        double sigmaWH_SM = computeSigmaWH(sqrt_s);
        double sigmaZH_SM = computeSigmaZH(sqrt_s);

        double sigmaWH_2 = delta_muWH_2(sqrt_s) * sigmaWH_SM;
        double sigmaZH_2 = delta_muZH_2(sqrt_s) * sigmaZH_SM;
        mu += ((sigmaWH_2 + sigmaZH_2) / (sigmaWH_SM + sigmaZH_SM));
    }

    return mu;
}

const double NPSMEFTd6General::muVH(const double sqrt_s) const {
    double mu = 1.0;

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    //mu += ;

    // Linear contribution 
    mu += delta_muVH_1(sqrt_s);

    // Quadratic contribution 
    mu += delta_muVH_2(sqrt_s);

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}


/////////////////////////////////////////////////////

const double NPSMEFTd6General::muggHH(const double sqrt_s) const {
    double mu = 1.0;
    double A1HH = 0.0, A2HH = 0.0, A3HH = 0.0, A4HH = 0.0, A5HH = 0.0;
    double A6HH = 0.0, A7HH = 0.0, A8HH = 0.0, A9HH = 0.0, A10HH = 0.0;
    double A11HH = 0.0, A12HH = 0.0, A13HH = 0.0, A14HH = 0.0, A15HH = 0.0;
    double ct, c2t, c3, cg, c2g;

    if (sqrt_s == 14.0) {

        // From the cut-based analysis. Table IV

        A1HH = 1.70;
        A2HH = 10.7;
        A3HH = 0.117;
        A4HH = 6.11;
        A5HH = 217.0;
        A6HH = -7.56;
        A7HH = -0.819;
        A8HH = 1.95;
        A9HH = 10.90;
        A10HH = 51.6;
        A11HH = -3.86;
        A12HH = -12.5;
        A13HH = 1.46;
        A14HH = 5.49;
        A15HH = 58.4;

    } else if (sqrt_s == 100.0) {

        // From the cut-based analysis. Table IV

        A1HH = 1.59;
        A2HH = 12.8;
        A3HH = 0.090;
        A4HH = 5.2;
        A5HH = 358.0;
        A6HH = -7.66;
        A7HH = -0.681;
        A8HH = 1.83;
        A9HH = 9.25;
        A10HH = 51.2;
        A11HH = -2.61;
        A12HH = -7.35;
        A13HH = 1.03;
        A14HH = 4.65;
        A15HH = 65.5;

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::muggHH()");

    ct = 1.0 - 0.5 * delta_GF + delta_h - v() * getSMEFTCoeffEW("CuHR", 2, 2) * v2 / sqrt(2.0) / mtpole;
    c2t = delta_h - 3.0 * v() * getSMEFTCoeffEW("CuHR", 2, 2) * v2 / 2.0 / sqrt(2.0) / mtpole;
    c3 = 1.0 + deltaG_hhhRatio();
    cg = M_PI * getSMEFTCoeffEW("CHG") * v2 / AlsMz;
    c2g = cg;

    // In the SM the Eq. returns 0.999. Fix that small offset by adding 0.0010    
    mu = 0.0010 + A1HH * ct * ct * ct * ct +
            A2HH * c2t * c2t +
            A3HH * ct * ct * c3 * c3 +
            A4HH * cg * cg * c3 * c3 +
            A5HH * c2g * c2g +
            A6HH * c2t * ct * ct +
            A7HH * ct * ct * ct * c3 +
            A8HH * c2t * ct * c3 +
            A9HH * c2t * cg * c3 +
            A10HH * c2t * c2g +
            A11HH * ct * ct * cg * c3 +
            A12HH * ct * ct * c2g +
            A13HH * ct * c3 * c3 * cg +
            A14HH * ct * c3 * c2g +
            A15HH * cg * c3*c2g;

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::muVBFgamma(const double sqrt_s) const {
    double mu = 1.0;

    double C1 = 0.0; //Use same values as VBF

    if (sqrt_s == 13.0) {

        C1 = 0.0064;

        mu +=
                +121253. * getSMEFTCoeffEW("CHbox")
                + 11791.5 * getSMEFTCoeffEW("CHB")
                - 130714. * getSMEFTCoeffEW("CHW")
                + 23472.1 * getSMEFTCoeffEW("CW")
                - 461704. * getSMEFTCoeffEW("CHq3R", 0, 0)
                - 35103.4 * getSMEFTCoeffEW("CHq3R", 1, 1)
                + cAsch * (-203622. * getSMEFTCoeffEW("CHD")
                - 270077. * getSMEFTCoeffEW("CHWB")
                - 4.714 * delta_GF
                - 5.764 * deltaMwd6())
                + cWsch * (-131254. * getSMEFTCoeffEW("CHD")
                - 111576. * getSMEFTCoeffEW("CHWB")
                - 3.998 * delta_GF)
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::muVBFgamma()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy. Use same as VBF.)
    mu += eVBFint + eVBFpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio();


    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::mueeWBF(const double sqrt_s, const double Pol_em, const double Pol_ep) const {

    //  Mw scheme

    double mu = 1.0;

    double C1 = 0.0;
    
    double CHW = 0.0, CHWB = 0.0, CHD = 0.0, CHbox = 0.0, CHl3R11 = 0.0, CHl3R22 = 0.0, CllR1221 = 0.0;
    double muRG = 0;
    
    double scalTH = 1.0;
    
    if ( sqrt_s > 0.5 ) {
        // Theory uncert. scaling like log^2(E/MW)
        
        scalTH = log(sqrt_s/0.080365)/log(0.5/0.080365);
        scalTH = scalTH * scalTH;
    }
    
    // RG scale in GeV
    muRG = 1000. * sqrt_s;
    
    //  Wilson coefficients definitions 
    CHW = getSMEFTCoeff("CHW", muRG); 
    CHWB = getSMEFTCoeff("CHWB", muRG); 
    CHD = getSMEFTCoeff("CHD", muRG); 
    CHbox = getSMEFTCoeff("CHbox", muRG); 
    CHl3R11 = getSMEFTCoeff("CHl3R",0,0, muRG); 
    CHl3R22 = getSMEFTCoeff("CHl3R",1,1, muRG); 
    CllR1221 = getSMEFTCoeff("CllR",0,1,1,0, muRG);
        
    //  Pure WBF, hence only initiated by LH fermions. No difference between polarizations at the linear level.
    //  Expand like other functions when quadratic terms are included
    

    if (sqrt_s == 0.230) {

        C1 = 0.00639683;

        mu += cWsch * (
                -22678.4 * CHW 
                -403.784 * CHWB 
                -30227.6 * CHD 
                +120870. * CHbox 
                -307776. * CHl3R11 
                -182383. * CHl3R22 
                +181458. * CllR1221 
                );


    } else if (sqrt_s == 0.240) {

        C1 = 0.00639683;

        mu += cWsch * (
                -24480.4 * CHW 
                -420.775 * CHWB 
                -30228.3 * CHD 
                +120890. * CHbox 
                -316741. * CHl3R11 
                -182335. * CHl3R22 
                +181564. * CllR1221 
                );


    } else if (sqrt_s == 0.250) {

        C1 = 0.0064;

        mu += cWsch * (
                -26656.2 * CHW 
                -536.424 * CHWB 
                -30398.4 * CHD 
                +120546. * CHbox 
                -325556. * CHl3R11 
                -182521. * CHl3R22 
                +181327. * CllR1221 
                );


    } else if (sqrt_s == 0.350) {

        C1 = 0.0062;

        mu += cWsch * (
                -39530.3 * CHW 
                -646.027 * CHWB 
                -30240.6 * CHD 
                +120881. * CHbox 
                -396701. * CHl3R11 
                -182400. * CHl3R22 
                +181394. * CllR1221 
                );


    } else if (sqrt_s == 0.365) {

        C1 = 0.00618352;

        mu += cWsch * (
                -40796.6 * CHW 
                -626.864 * CHWB 
                -30507.4 * CHD 
                +120603. * CHbox 
                -405380. * CHl3R11 
                -182353. * CHl3R22 
                +181575. * CllR1221
                );


    } else if (sqrt_s == 0.380) {

        C1 = 0.0062; // Use the same as 350 GeV

        mu += cWsch * (
                -41677.4 * CHW 
                -456.017 * CHWB 
                -30347.6 * CHD 
                +120703. * CHbox 
                -413858. * CHl3R11 
                -182188. * CHl3R22 
                +181341. * CllR1221 
                );

    } else if (sqrt_s == 0.500) {

        C1 = 0.0061;

        mu += cWsch * (
                -47053.9 * CHW 
                -244.306 * CHWB 
                -30283.9 * CHD 
                +121058. * CHbox 
                -471403. * CHl3R11 
                -181871. * CHl3R22 
                +181700. * CllR1221
                );


    } else if (sqrt_s == 0.550) {

        C1 = 0.0061;

        mu += cWsch * (
                -48186.2 * CHW 
                -331.282 * CHWB 
                -30408.3 * CHD 
                +121124. * CHbox 
                -491380. * CHl3R11 
                -181977. * CHl3R22 
                +181701. * CllR1221 
                );


    } else if (sqrt_s == 1.0) {

        C1 = 0.0059;

        mu += cWsch * (
                -49488.8 * CHW 
                -166.83 * CHWB 
                -30446.4 * CHD 
                +121190. * CHbox 
                -617416. * CHl3R11 
                -182202. * CHl3R22 
                +181511. * CllR1221 
                );


    } else if (sqrt_s == 1.4) {

        C1 = 0.0058;

        mu += cWsch * (
                -46762. * CHW 
                -145.836 * CHWB 
                -30411.2 * CHD 
                +121259. * CHbox 
                -689513. * CHl3R11 
                -182210. * CHl3R22 
                +181661. * CllR1221 
                );


    } else if (sqrt_s == 1.5) {

        mu += cWsch * (
                -46321.6 * CHW 
                -315.498 * CHWB 
                -30490.1 * CHD 
                +121143. * CHbox 
                -704469. * CHl3R11 
                -182156. * CHl3R22 
                +181112. * CllR1221 
                );

    } else if (sqrt_s == 3.0) {

        C1 = 0.0057;

        mu += cWsch * (
                -38546. * CHW 
                -674.92 * CHWB 
                -30159.9 * CHD 
                +121148. * CHbox 
                -857367. * CHl3R11 
                -182782. * CHl3R22 
                +180763. * CllR1221 
                );

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeWBF()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += scalTH * eeeWBFint + eeeWBFpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::mueeHvv(const double sqrt_s, const double Pol_em, const double Pol_ep) const {

    //  Mw scheme

    double mu = 1.0;

    double C1 = 0.0;
    
    // Wilson coefficients and scale
    double CHB = 0.0, CHW = 0.0, CHWB = 0.0, CHD = 0.0, CHbox = 0.0, CHl1R11 = 0.0;
    double CHl3R11 = 0.0, CHl3R22 = 0.0, CHeR11 = 0.0, CllR1221 = 0.0; 
    double muRG = 0;    

    // Polarization factors
    double Pe = Pol_em, Pp = Pol_ep;
    double fLR, fRL;

    // LH and RH cross sections    
    double sigmaSMeLHa0 = 0.0, sigmaeLHa0 = 0.0, sigmaSMeLHa1 = 0.0, sigmaeLHa1 = 0.0; 
    double sigmaSMeRHa0 = 0.0, sigmaeRHa0 = 0.0, sigmaSMeRHa1 = 0.0, sigmaeRHa1 = 0.0;

    double scalTH = 1.0;
    
    // -------------------------------------------------------------------------
    
    if ( sqrt_s > 0.5 ) {
        // Theory uncert. scaling like log^2(E/MW)
        
        scalTH = log(sqrt_s/0.080365)/log(0.5/0.080365);
        scalTH = scalTH * scalTH;
    }
        
    fLR = 0.25 * (1.0 - Pe) * (1.0 + Pp);
    fRL = 0.25 * (1.0 + Pe) * (1.0 - Pp);
    
    // RG scale in GeV
    muRG = 1000. * sqrt_s;
    
    //  Wilson coefficients definitions 
    CHB = getSMEFTCoeff("CHB", muRG); 
    CHW = getSMEFTCoeff("CHW", muRG); 
    CHWB = getSMEFTCoeff("CHWB", muRG); 
    CHD = getSMEFTCoeff("CHD", muRG); 
    CHbox = getSMEFTCoeff("CHbox", muRG); 
    CHl1R11 = getSMEFTCoeff("CHl1R",0,0, muRG); 
    CHl3R11 = getSMEFTCoeff("CHl3R",0,0, muRG); 
    CHl3R22 = getSMEFTCoeff("CHl3R",1,1, muRG); 
    CHeR11 = getSMEFTCoeff("CHeR",0,0, muRG); 
    CllR1221 = getSMEFTCoeff("CllR",0,1,1,0, muRG);
    
    //  For the Higgs trilinear dependence assume the WBF mechanism dominates
    
    // Computed as the difference between e+ e- > H ve ve and e+ e- > H Z, Z > ve ve

    if (sqrt_s == 0.230) {

        C1 = 0.00639683;

        // e+ e- > H ve ve - e+ e- > H Z, Z > ve ve
        // LH -------------------------------
        sigmaSMeLHa0 = 0.059149; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -6703.9 * CHB 
                +28405.8 * CHW 
                +8204.2 * CHWB 
                +4505.86 * CHD 
                +7247.85 * CHbox 
                +46957.8 * CHl1R11 
                +41337.8 * CHl3R11 
                -10716.8 * CHl3R22 
                +50.057 * CHeR11 
                +10816.5 * CllR1221
                );
        
        sigmaSMeLHa1 = 0.029738; 
 
        sigmaeLHa1 = cWsch * (sigmaSMeLHa1
                -5698. * CHB 
                +24313. * CHW 
                +6634. * CHWB 
                +4154. * CHD 
                +3596. * CHbox 
                +37856. * CHl1R11 
                +39659. * CHl3R11 
                -5412. * CHl3R22 
                -2. * CHeR11 
                +5405. * CllR1221              
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.021932; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +11963.9 * CHB 
                +1660.64 * CHW 
                +6640.6 * CHWB 
                -5265.33 * CHD 
                +2635.77 * CHbox 
                -2626.19 * CHl1R11 
                -1364.38 * CHl3R11 
                -3977.51 * CHl3R22 
                -37857.4 * CHeR11 
                +3998.57 * CllR1221              
                );
        
        sigmaSMeRHa1 = 0.019411; 
 
        sigmaeRHa1 = cWsch * (sigmaSMeRHa1
                +10684.6 * CHB 
                +1491.6 * CHW 
                +5968.6 * CHWB 
                -4673.2 * CHD 
                +2359.6 * CHbox 
                -2347.2 * CHl1R11 
                -1176.4 * CHl3R11 
                -3522.7 * CHl3R22 
                -33504.4 * CHeR11 
                +3535.6 * CllR1221              
                );
        
    } else if (sqrt_s == 0.240) {

        C1 = 0.00639683;
        
        // e+ e- > H ve ve - e+ e- > H Z, Z > ve ve
        // LH -------------------------------
        sigmaSMeLHa0 = 0.064179; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -7582.01 * CHB 
                +31652.3 * CHW 
                +8473.6 * CHWB 
                +4551.21 * CHD 
                +7782.99 * CHbox 
                +53595.2 * CHl1R11 
                +46797.1 * CHl3R11 
                -11665.3 * CHl3R22 
                -34.399 * CHeR11 
                +11729.1 * CllR1221 
                );
        
        sigmaSMeLHa1 = 0.032478; 
 
        sigmaeLHa1 = cWsch * (sigmaSMeLHa1
                -6747. * CHB 
                +28236. * CHW 
                +7213. * CHWB 
                +4534. * CHD 
                +3930. * CHbox 
                +45348. * CHl1R11 
                +47337. * CHl3R11 
                -5915. * CHl3R22 
                -5. * CHeR11 
                +5905. * CllR1221              
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.024227; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +14216.9 * CHB 
                +1819.5 * CHW 
                +8263.49 * CHWB 
                -5810.48 * CHD 
                +2944.56 * CHbox 
                -2904.14 * CHl1R11 
                -1479.61 * CHl3R11 
                -4379.55 * CHl3R22 
                -45568.2 * CHeR11 
                +4424.17 * CllR1221              
                );
        
        sigmaSMeRHa1 = 0.021198; 
 
        sigmaeRHa1 = cWsch * (sigmaSMeRHa1
                +12477. * CHB 
                +1581. * CHW 
                +7265. * CHWB 
                -5103. * CHD 
                +2581. * CHbox 
                -2563.9 * CHl1R11 
                -1282.9 * CHl3R11 
                -3841.8 * CHl3R22 
                -39845. * CHeR11 
                +3860. * CllR1221              
                );

    } else if (sqrt_s == 0.250) {

        C1 = 0.0064;

        // e+ e- > H ve ve - e+ e- > H Z, Z > ve ve
        // LH -------------------------------
        sigmaSMeLHa0 = 0.067697; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -7842.55 * CHB 
                +32195.3 * CHW 
                +7995.72 * CHWB 
                +4345.9 * CHD 
                +8239.09 * CHbox 
                +56576.4 * CHl1R11 
                +47681.9 * CHl3R11 
                -12330.7 * CHl3R22 
                +4.62 * CHeR11 
                +12293.3 * CllR1221 
                );
        
        sigmaSMeLHa1 = 0.032502; 
 
        sigmaeLHa1 = cWsch * (sigmaSMeLHa1
                -7262. * CHB 
                +29887. * CHW 
                +7183. * CHWB 
                +4539. * CHD 
                +3925. * CHbox 
                +49603. * CHl1R11 
                +51583. * CHl3R11 
                -5918. * CHl3R22 
                -9. * CHeR11 
                +5897. * CllR1221              
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.024424; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +15200.9 * CHB 
                +1794.68 * CHW 
                +9134.34 * CHWB 
                -5883.35 * CHD 
                +2944.13 * CHbox 
                -2967.46 * CHl1R11 
                -1479.3 * CHl3R11 
                -4437.99 * CHl3R22 
                -49809.1 * CHeR11 
                +4461.27 * CllR1221              
                );
        
        sigmaSMeRHa1 = 0.021221; 
 
        sigmaeRHa1 = cWsch * (sigmaSMeRHa1
                +13253. * CHB 
                +1527. * CHW 
                +7972. * CHWB 
                -5113.4 * CHD 
                +2577. * CHbox 
                -2574.3 * CHl1R11 
                -1286. * CHl3R11 
                -3855.1 * CHl3R22 
                -43275. * CHeR11 
                +3856. * CllR1221               
                );

    } else if (sqrt_s == 0.350) {

        C1 = 0.0062;

        // e+ e- > H ve ve - e+ e- > H Z, Z > ve ve
        // LH -------------------------------
        sigmaSMeLHa0 = 0.134698; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -4610.61 * CHB 
                +13131.4 * CHW 
                +3271.33 * CHWB 
                -1426.48 * CHD 
                +16256.3 * CHbox 
                +52474.1 * CHl1R11 
                +5236.32 * CHl3R11 
                -24479. * CHl3R22 
                -79.73 * CHeR11 
                +24584.9 * CllR1221 
                );
        
        sigmaSMeLHa1 = 0.017502; 
 
        sigmaeLHa1 = cWsch * (sigmaSMeLHa1
                -6067.4 * CHB 
                +22837.2 * CHW 
                +3670.2 * CHWB 
                +2444.5 * CHD 
                +2120.8 * CHbox 
                +54404.2 * CHl1R11 
                +55470.2 * CHl3R11 
                -3184. * CHl3R22 
                -2.7 * CHeR11 
                +3180.2 * CllR1221              
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.013416; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +12262.3 * CHB 
                +674.27 * CHW 
                +8562.69 * CHWB 
                -3239.42 * CHD 
                +1628.99 * CHbox 
                -1664.92 * CHl1R11 
                -772.27 * CHl3R11 
                -2434.07 * CHl3R22 
                -53588.2 * CHeR11 
                +2433.13 * CllR1221               
                );
        
        sigmaSMeRHa1 = 0.011428; 
 
        sigmaeRHa1 = cWsch * (sigmaSMeRHa1
                +10380.3 * CHB 
                +578.1 * CHW 
                +7249.4 * CHWB 
                -2754.8 * CHD 
                +1382.8 * CHbox 
                -1386.5 * CHl1R11 
                -695.2 * CHl3R11 
                -2079.1 * CHl3R22 
                -45682.7 * CHeR11 
                +2080.1 * CllR1221              
                );

    } else if (sqrt_s == 0.365) {

        C1 = 0.00618352;

        // e+ e- > H ve ve - e+ e- > H Z, Z > ve ve
        // LH -------------------------------
        sigmaSMeLHa0 = 0.149505; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -4089.28 * CHB 
                +10219.8 * CHW 
                +2978.04 * CHWB 
                -2089.33 * CHD 
                +18094.8 * CHbox 
                +51560.3 * CHl1R11 
                -3886.54 * CHl3R11 
                -27167.1 * CHl3R22 
                +40.4 * CHeR11 
                +27244.9 * CllR1221 
                );
        
        sigmaSMeLHa1 = 0.015907; 
 
        sigmaeLHa1 = cWsch * (sigmaSMeLHa1
                -5736.2 * CHB 
                +21442.2 * CHW 
                +3310.6 * CHWB 
                +2221. * CHD 
                +1927.1 * CHbox 
                +53940.2 * CHl1R11 
                +54912.2 * CHl3R11 
                -2892.8 * CHl3R22 
                -1.6 * CHeR11 
                +2891.4 * CllR1221              
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.012207; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +11547.6 * CHB 
                +589.54 * CHW 
                +8177.48 * CHWB 
                -2948.28 * CHD 
                +1481.42 * CHbox 
                -1521.36 * CHl1R11 
                -701.48 * CHl3R11 
                -2218.87 * CHl3R22 
                -53022.9 * CHeR11 
                +2214.52 * CllR1221               
                );
        
        sigmaSMeRHa1 = 0.010386; 
 
        sigmaeRHa1 = cWsch * (sigmaSMeRHa1
                +9767.4 * CHB 
                +498.7 * CHW 
                +6888.4 * CHWB 
                -2501.9 * CHD 
                +1260.2 * CHbox 
                -1260.4 * CHl1R11 
                -632. * CHl3R11 
                -1889.5 * CHl3R22 
                -45151.6 * CHeR11 
                +1891.8 * CllR1221               
                );

    } else if (sqrt_s == 0.380) {

        C1 = 0.0062;

        // e+ e- > H ve ve - e+ e- > H Z, Z > ve ve
        // LH -------------------------------
        sigmaSMeLHa0 = 0.165164; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -3620.09 * CHB 
                +7262.01 * CHW 
                +2533.79 * CHWB 
                -2795.85 * CHD 
                +19930.1 * CHbox 
                +50455.6 * CHl1R11 
                -13297.1 * CHl3R11 
                -30129. * CHl3R22 
                -75.41 * CHeR11 
                +29935.6 * CllR1221
                );
        
        sigmaSMeLHa1 = 0.014504; 
 
        sigmaeLHa1 = cWsch * (sigmaSMeLHa1
                -5414.8 * CHB 
                +20137. * CHW 
                +3002.5 * CHWB 
                +2029.9 * CHD 
                +1760.6 * CHbox 
                +53470. * CHl1R11 
                +54342. * CHl3R11 
                -2636.3 * CHl3R22 
                +2.7 * CHeR11 
                +2640.2 * CllR1221              
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.011137; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +10870.8 * CHB 
                +511.27 * CHW 
                +7767.56 * CHWB 
                -2692.87 * CHD 
                +1349.76 * CHbox 
                -1394.99 * CHl1R11 
                -634.74 * CHl3R11 
                -2023.82 * CHl3R22 
                -52450.2 * CHeR11 
                +2030.93 * CllR1221              
                );
        
        sigmaSMeRHa1 = 0.009472; 
 
        sigmaeRHa1 = cWsch * (sigmaSMeRHa1
                +9181.6 * CHB 
                +430.1 * CHW 
                +6529.6 * CHWB 
                -2282.2 * CHD 
                +1147.4 * CHbox 
                -1151. * CHl1R11 
                -575.8 * CHl3R11 
                -1722.9 * CHl3R22 
                -44623.5 * CHeR11 
                +1726.7 * CllR1221              
                );

    } else if (sqrt_s == 0.500) {

        C1 = 0.0061;

        // e+ e- > H ve ve - e+ e- > H Z, Z > ve ve
        // LH -------------------------------
        sigmaSMeLHa0 = 0.302866; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -401.42 * CHB 
                -11755. * CHW 
                +877.96 * CHWB 
                -8221.05 * CHD 
                +36140. * CHbox 
                +45149.8 * CHl1R11 
                -95968.7 * CHl3R11 
                -55410.3 * CHl3R22 
                -243.04 * CHeR11 
                +54805.9 * CllR1221 
                );
        
        sigmaSMeLHa1 = 0.00776; 
 
        sigmaeLHa1 = cWsch * (sigmaSMeLHa1
                -3477.5 * CHB 
                +12550.9 * CHW 
                +1542.9 * CHWB 
                +1083.3 * CHD 
                +941.7 * CHbox 
                +50229.9 * CHl1R11 
                +50669.9 * CHl3R11 
                -1411.6 * CHl3R22 
                -0.7 * CHeR11 
                +1411. * CllR1221               
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.005968; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +6902.97 * CHB 
                +180.91 * CHW 
                +5139.82 * CHWB 
                -1436.97 * CHD 
                +722.43 * CHbox 
                -752.583 * CHl1R11 
                -332.172 * CHl3R11 
                -1083.6 * CHl3R22 
                -48701.4 * CHeR11 
                +1087.27 * CllR1221               
                );
        
        sigmaSMeRHa1 = 0.005067; 
 
        sigmaeRHa1 = cWsch * (sigmaSMeRHa1
                +5773.6 * CHB 
                +153.1 * CHW 
                +4277.7 * CHWB 
                -1220.2 * CHD 
                +614.4 * CHbox 
                -614.8 * CHl1R11 
                -307.7 * CHl3R11 
                -921.5 * CHl3R22 
                -41341.8 * CHeR11 
                +923.7 * CllR1221               
                );

    } else if (sqrt_s == 0.550) {

        C1 = 0.0061;

        // e+ e- > H ve ve - e+ e- > H Z, Z > ve ve
        // LH -------------------------------
        sigmaSMeLHa0 = 0.362269; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                +373.85 * CHB 
                -17839.8 * CHW 
                +734.48 * CHWB 
                -9923.28 * CHD 
                +43743. * CHbox 
                +44063.1 * CHl1R11 
                -132983. * CHl3R11 
                -65946.9 * CHl3R22 
                +152.15 * CHeR11 
                +66262.6 * CllR1221 
                );
        
        sigmaSMeLHa1 = 0.006271; 
 
        sigmaeLHa1 = cWsch * (sigmaSMeLHa1
                -2939. * CHB 
                +10537.5 * CHW 
                +1232.7 * CHWB 
                +876. * CHD 
                +761.8 * CHbox 
                +49277.3 * CHl1R11 
                +49629.3 * CHl3R11 
                -1139.8 * CHl3R22 
                -0.2 * CHeR11 
                +1140.9 * CllR1221              
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.004825; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +5824.16 * CHB 
                +125.188 * CHW 
                +4375.17 * CHWB 
                -1164.22 * CHD 
                +579.62 * CHbox 
                -613.231 * CHl1R11 
                -265.447 * CHl3R11 
                -877.103 * CHl3R22 
                -47624.2 * CHeR11 
                +876.017 * CllR1221              
                );
        
        sigmaSMeRHa1 = 0.004095; 
 
        sigmaeRHa1 = cWsch * (sigmaSMeRHa1
                +4857.9 * CHB 
                +105.3 * CHW 
                +3628.7 * CHWB 
                -986.7 * CHD 
                +497.2 * CHbox 
                -496.9 * CHl1R11 
                -248.5 * CHl3R11 
                -744.8 * CHl3R22 
                -40427.9 * CHeR11 
                +745.8 * CllR1221              
                );

    } else if (sqrt_s == 1.0) {

        C1 = 0.0059;

        // e+ e- > H ve ve - e+ e- > H Z, Z > ve ve
        // LH -------------------------------
        sigmaSMeLHa0 = 0.840445; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                +1799.69 * CHB 
                -46969.5 * CHW 
                +104.525 * CHWB 
                -25193.7 * CHD 
                +101623. * CHbox 
                +42181.4 * CHl1R11 
                -477637. * CHl3R11 
                -153174. * CHl3R22 
                -72.821 * CHeR11 
                +152853. * CllR1221
                );
        
        sigmaSMeLHa1 = 0.001741; 
 
        sigmaeLHa1 = cWsch * (sigmaSMeLHa1
                -952.62 * CHB 
                +3344.46 * CHW 
                +325.76 * CHWB 
                +243.3 * CHD 
                +211.6 * CHbox 
                +45697. * CHl1R11 
                +45787. * CHl3R11 
                -317.11 * CHl3R22 
                +0.04 * CHeR11 
                +317.06 * CllR1221              
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.001338; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +1883.78 * CHB 
                +12.31 * CHW 
                +1460.68 * CHWB 
                -322.405 * CHD 
                +162.126 * CHbox 
                -173.677 * CHl1R11 
                -69.869 * CHl3R11 
                -243.069 * CHl3R22 
                -43656.7 * CHeR11 
                +243.762 * CllR1221              
                );
        
        sigmaSMeRHa1 = 0.001137; 
 
        sigmaeRHa1 = cWsch * (sigmaSMeRHa1
                +1552.24 * CHB 
                +9.77 * CHW 
                +1192.24 * CHWB 
                -274. * CHD 
                +137.9 * CHbox 
                -138.09 * CHl1R11 
                -69.34 * CHl3R11 
                -207.12 * CHl3R22 
                -37101. * CHeR11 
                +207.27 * CllR1221              
                );

    } else if (sqrt_s == 1.4) {

        C1 = 0.0058;

        // e+ e- > H ve ve - e+ e- > H Z, Z > ve ve
        // LH -------------------------------
        sigmaSMeLHa0 = 1.16664; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                +1515.52 * CHB 
                -60139.2 * CHW 
                -313.042 * CHWB 
                -35595.8 * CHD 
                +140688. * CHbox 
                +44830.7 * CHl1R11 
                -760542. * CHl3R11 
                -212799. * CHl3R22 
                -216.739 * CHeR11 
                +212046. * CllR1221
                );
        
        sigmaSMeLHa1 = 0.00087; 
 
        sigmaeLHa1 = cWsch * (sigmaSMeLHa1
                -493.41 * CHB 
                +1722.63 * CHW 
                +160.89 * CHWB 
                +121.5 * CHD 
                +105.7 * CHbox 
                +44873.7 * CHl1R11 
                +44905.7 * CHl3R11 
                -158.44 * CHl3R22 
                +0.06 * CHeR11 
                +158.6 * CllR1221              
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.000668; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +978.328 * CHB 
                +2.9797 * CHW 
                +762.181 * CHWB 
                -161.445 * CHD 
                +80.9252 * CHbox 
                -87.7595 * CHl1R11 
                -34.4707 * CHl3R11 
                -121.863 * CHl3R22 
                -42733.6 * CHeR11 
                +121.358 * CllR1221              
                );
        
        sigmaSMeRHa1 = 0.000568; 
 
        sigmaeRHa1 = cWsch * (sigmaSMeRHa1
                +800.12 * CHB 
                +2.56 * CHW 
                +617.74 * CHWB 
                -137. * CHD 
                +69.04 * CHbox 
                -68.9 * CHl1R11 
                -34.69 * CHl3R11 
                -103.56 * CHl3R22 
                -36345.3 * CHeR11 
                +103.63 * CllR1221              
                );

    } else if (sqrt_s == 1.5) {

        C1 = 0.0058;

        // e+ e- > H ve ve - e+ e- > H Z, Z > ve ve
        // LH -------------------------------
        sigmaSMeLHa0 = 1.23716; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                +1360.69 * CHB 
                -62523.7 * CHW 
                -725.756 * CHWB 
                -37981.9 * CHD 
                +148772. * CHbox 
                +45105.6 * CHl1R11 
                -827326. * CHl3R11 
                -225838. * CHl3R22 
                -486.794 * CHeR11 
                +224000. * CllR1221 
                );
        
        sigmaSMeLHa1 = 0.000756; 
 
        sigmaeLHa1 = cWsch * (sigmaSMeLHa1
                -430.8 * CHB 
                +1501.77 * CHW 
                +139.53 * CHWB 
                +105.54 * CHD 
                +91.77 * CHbox 
                +44758. * CHl1R11 
                +44786. * CHl3R11 
                -137.66 * CHl3R22 
                +0.03 * CHeR11 
                +137.58 * CllR1221              
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.000581; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +854.12 * CHB 
                +2.2845 * CHW 
                +666.124 * CHWB 
                -140.103 * CHD 
                +70.3909 * CHbox 
                -76.2121 * CHl1R11 
                -29.8378 * CHl3R11 
                -105.842 * CHl3R22 
                -42598.1 * CHeR11 
                +105.12 * CllR1221              
                );
        
        sigmaSMeRHa1 = 0.000494; 
 
        sigmaeRHa1 = cWsch * (sigmaSMeRHa1
                +698.25 * CHB 
                +1.85 * CHW 
                +539.85 * CHWB 
                -119.02 * CHD 
                +59.95 * CHbox 
                -59.89 * CHl1R11 
                -30.15 * CHl3R11 
                -89.98 * CHl3R22 
                -36240.7 * CHeR11 
                +89.99 * CllR1221              
                );

    } else if (sqrt_s == 3.0) {

        C1 = 0.0057;

        // e+ e- > H ve ve - e+ e- > H Z, Z > ve ve
        // LH -------------------------------
        sigmaSMeLHa0 = 1.98635; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                +167.781 * CHB 
                -80364. * CHW 
                -1108.24 * CHWB 
                -61687.4 * CHD 
                +238369. * CHbox 
                +47553.5 * CHl1R11 
                -1654456. * CHl3R11 
                -363189. * CHl3R22 
                -1681.06 * CHeR11 
                +359731. * CllR1221
                );
        
        sigmaSMeLHa1 = 0.000186; 
 
        sigmaeLHa1 = cWsch * (sigmaSMeLHa1
                -108.342 * CHB 
                +378.008 * CHW 
                +34.078 * CHWB 
                +26.048 * CHD 
                +22.648 * CHbox 
                +44190.7 * CHl1R11 
                +44174.7 * CHl3R11 
                -33.916 * CHl3R22 
                +0.021 * CHeR11 
                +33.948 * CllR1221               
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.000143; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +217.438 * CHB 
                +0.099697 * CHW 
                +171.124 * CHWB 
                -34.49 * CHD 
                +17.3203 * CHbox 
                -18.9965 * CHl1R11 
                -7.08342 * CHl3R11 
                -26.059 * CHl3R22 
                -41954. * CHeR11 
                +25.932 * CllR1221              
                );
        
        sigmaSMeRHa1 = 0.000122; 
 
        sigmaeRHa1 = cWsch * (sigmaSMeRHa1
                +175.68 * CHB 
                +0.114 * CHW 
                +136.74 * CHWB 
                -29.295 * CHD 
                +14.797 * CHbox 
                -14.707 * CHl1R11 
                -7.394 * CHl3R11 
                -22.139 * CHl3R22 
                -35717.6 * CHeR11 
                +22.19 * CllR1221               
                );

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeHvv()");
    
    // Construct the signal strength
    // Total cross section
    mu = fLR * (sigmaeLHa0 - sigmaeLHa1) + fRL * (sigmaeRHa0 - sigmaeRHa1);
    // Normalize to SM
    mu = mu / (fLR * (sigmaSMeLHa0 - sigmaSMeLHa1) + fRL * (sigmaSMeRHa0 - sigmaSMeRHa1));

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += scalTH * eeeWBFint + eeeWBFpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::mueeZBF(const double sqrt_s, const double Pol_em, const double Pol_ep) const {

    //  Mw scheme

    double mu = 1.0;

    double C1 = 0.0;

    // Wilson coefficients and scale    
    double CHB = 0.0, CHW = 0.0, CHWB = 0.0, CHD = 0.0, CHbox = 0.0, CHl1R11 = 0.0;
    double CHl3R11 = 0.0, CHl3R22 = 0.0, CHeR11 = 0.0, CllR1221 = 0.0; 
    double muRG = 0;

    // Polarization factors
    double Pe = Pol_em, Pp = Pol_ep;
    double fLR, fRL, fLL, fRR;
    
    // LR, RL, LL, and RR cross sections    
    double sigmaSMeLRa0 = 0.0, sigmaeLRa0 = 0.0; 
    double sigmaSMeRLa0 = 0.0, sigmaeRLa0 = 0.0;
    
    double sigmaSMeLLa0 = 0.0, sigmaeLLa0 = 0.0; 
    double sigmaSMeRRa0 = 0.0, sigmaeRRa0 = 0.0;
    
    double scalTH = 1.0;
    
    // -------------------------------------------------------------------------
    
    if ( sqrt_s > 0.5 ) {
        // Theory uncert. scaling like log^2(E/MW)
        
        scalTH = log(sqrt_s/0.080365)/log(0.5/0.080365);
        scalTH = scalTH * scalTH;
    }
        
    fLR = 0.25 * (1.0 - Pe) * (1.0 + Pp);
    fRL = 0.25 * (1.0 + Pe) * (1.0 - Pp);
    fLL = 0.25 * (1.0 - Pe) * (1.0 - Pp);
    fRR = 0.25 * (1.0 + Pe) * (1.0 + Pp);
    
    // RG scale in GeV
    muRG = 1000. * sqrt_s;
    
//  Wilson coefficients definitions 
    CHB = getSMEFTCoeff("CHB", muRG); 
    CHW = getSMEFTCoeff("CHW", muRG); 
    CHWB = getSMEFTCoeff("CHWB", muRG); 
    CHD = getSMEFTCoeff("CHD", muRG); 
    CHbox = getSMEFTCoeff("CHbox", muRG); 
    CHl1R11 = getSMEFTCoeff("CHl1R",0,0, muRG); 
    CHl3R11 = getSMEFTCoeff("CHl3R",0,0, muRG); 
    CHl3R22 = getSMEFTCoeff("CHl3R",1,1, muRG); 
    CHeR11 = getSMEFTCoeff("CHeR",0,0, muRG); 
    CllR1221 = getSMEFTCoeff("CllR",0,1,1,0, muRG);
    
    // Computed as the pure between e+ e- > H e+ e- via ZBF, without any s-channel contribution
    
    if (sqrt_s == 0.500) {

        C1 = 0.0067;
        
        // e+ e- > H e+ e- 
        // LR -------------------------------
        sigmaSMeLRa0 = 0.010339; 
 
        sigmaeLRa0 = cWsch * (sigmaSMeLRa0
                -2455.7 * CHB 
                -2622.7 * CHW 
                +6297. * CHWB 
                +3208. * CHD 
                +1254. * CHbox 
                -4875.8 * CHl1R11 
                -6752.7 * CHl3R11 
                -1881.1 * CHl3R22 
                +4. * CHeR11 
                +1882. * CllR1221
                );
        
        
        // RL -------------------------------
        sigmaSMeRLa0 = 0.004408; 
 
        sigmaeRLa0 = cWsch * (sigmaSMeRLa0
                -3017.2 * CHB 
                -185. * CHW 
                -1260.4 * CHWB 
                -1990.9 * CHD 
                +534.2 * CHbox 
                +0.9 * CHl1R11 
                -800.6 * CHl3R11 
                -802.2 * CHl3R22 
                +2575.2 * CHeR11 
                +802.3 * CllR1221              
                );
                
        // LL -------------------------------
        sigmaSMeLLa0 = 0.006964; 
 
        sigmaeLLa0 = cWsch * (sigmaSMeLLa0
                +4723.4 * CHB 
                +1092.9 * CHW 
                -3439.1 * CHWB 
                -491.9 * CHD 
                +844.7 * CHbox 
                -1785.4 * CHl1R11 
                -3050.5 * CHl3R11 
                -1267. * CHl3R22 
                +2215.4 * CHeR11 
                +1267.4 * CllR1221
                );
        

        // RR -------------------------------
        sigmaSMeRRa0 = 0.006964; 
 
        sigmaeRRa0 = cWsch * (sigmaSMeRRa0
                +4723.4 * CHB 
                +1096.3 * CHW 
                -3435.1 * CHWB 
                -490.4 * CHD 
                +842.2 * CHbox 
                -1784.7 * CHl1R11 
                -3050.7 * CHl3R11 
                -1264.2 * CHl3R22 
                +2213.9 * CHeR11 
                +1267.4 * CllR1221             
                );

    } else if (sqrt_s == 0.550) {

        C1 = 0.0067;

        // e+ e- > H e+ e- 
        // LR -------------------------------
        sigmaSMeLRa0 = 0.012531; 
 
        sigmaeLRa0 = cWsch * (sigmaSMeLRa0
                -2846.7 * CHB 
                -3153.5 * CHW 
                +7554. * CHWB 
                +3888. * CHD 
                +1521. * CHbox 
                -6342.7 * CHl1R11 
                -8619.3 * CHl3R11 
                -2278. * CHl3R22 
                +5. * CHeR11 
                +2283. * CllR1221
                );
        
        
        // RL -------------------------------
        sigmaSMeRLa0 = 0.005342; 
 
        sigmaeRLa0 = cWsch * (sigmaSMeRLa0
                -3571.2 * CHB 
                -205.3 * CHW 
                -1576.1 * CHWB 
                -2412.8 * CHD 
                +648.3 * CHbox 
                +1.3 * CHl1R11 
                -969.9 * CHl3R11 
                -971.6 * CHl3R22 
                +3351.3 * CHeR11 
                +973.1 * CllR1221             
                );
                
        // LL -------------------------------
        sigmaSMeLLa0 = 0.008384; 
 
        sigmaeLLa0 = cWsch * (sigmaSMeLLa0
                +5195.9 * CHB 
                +1184.5 * CHW 
                -3839.5 * CHWB 
                -592.5 * CHD 
                +1017.3 * CHbox 
                -2276.4 * CHl1R11 
                -3799.1 * CHl3R11 
                -1525. * CHl3R22 
                +2823.9 * CHeR11 
                +1526.4 * CllR1221
                );
        

        // RR -------------------------------
        sigmaSMeRRa0 = 0.008384; 
 
        sigmaeRRa0 = cWsch * (sigmaSMeRRa0
                +5197.9 * CHB 
                +1188.1 * CHW 
                -3835.5 * CHWB 
                -592.5 * CHD 
                +1017.3 * CHbox 
                -2277.5 * CHl1R11 
                -3800.4 * CHl3R11 
                -1525. * CHl3R22 
                +2823.9 * CHeR11 
                +1526.4 * CllR1221             
                );

    } else if (sqrt_s == 1.0) {

        C1 = 0.0065;

        // e+ e- > H e+ e- 
        // LR -------------------------------
        sigmaSMeLRa0 = 0.030357; 
 
        sigmaeLRa0 = cWsch * (sigmaSMeLRa0
                -5227. * CHB 
                -6830. * CHW 
                +17024. * CHWB 
                +9420. * CHD 
                +3687. * CHbox 
                -22051.9 * CHl1R11 
                -27585.4 * CHl3R11 
                -5520. * CHl3R22 
                +13. * CHeR11 
                +5532. * CllR1221
                );
        
        
        // RL -------------------------------
        sigmaSMeRLa0 = 0.012942; 
 
        sigmaeRLa0 = cWsch * (sigmaSMeRLa0
                -7216. * CHB 
                -304. * CHW 
                -4417.7 * CHWB 
                -5844.6 * CHD 
                +1572. * CHbox 
                +5. * CHl1R11 
                -2348. * CHl3R11 
                -2353. * CHl3R22 
                +11654. * CHeR11 
                +2358. * CllR1221              
                );
                
        // LL -------------------------------
        sigmaSMeLLa0 = 0.019928; 
 
        sigmaeLLa0 = cWsch * (sigmaSMeLLa0
                +7750. * CHB 
                +1636. * CHW 
                -6201. * CHWB 
                -1408. * CHD 
                +2420. * CHbox 
                -7400. * CHl1R11 
                -11020.6 * CHl3R11 
                -3625. * CHl3R22 
                +9176. * CHeR11 
                +3630. * CllR1221
                );
        

        // RR -------------------------------
        sigmaSMeRRa0 = 0.019928; 
 
        sigmaeRRa0 = cWsch * (sigmaSMeRRa0
                +7753. * CHB 
                +1648. * CHW 
                -6189. * CHWB 
                -1408. * CHD 
                +2420. * CHbox 
                -7396. * CHl1R11 
                -11020.1 * CHl3R11 
                -3625. * CHl3R22 
                +9174. * CHeR11 
                +3630. * CllR1221             
                );

    } else if (sqrt_s == 1.4) {

        C1 = 0.0065;

        // e+ e- > H e+ e- 
        // LR -------------------------------
        sigmaSMeLRa0 = 0.042715; 
 
        sigmaeLRa0 = cWsch * (sigmaSMeLRa0
                -6315. * CHB 
                -8759. * CHW 
                +22966. * CHWB 
                +13250. * CHD 
                +5175. * CHbox 
                -36465.5 * CHl1R11 
                -44246.7 * CHl3R11 
                -7755. * CHl3R22 
                +1. * CHeR11 
                +7782. * CllR1221 
                );
        
        
        // RL -------------------------------
        sigmaSMeRLa0 = 0.01821; 
 
        sigmaeRLa0 = cWsch * (sigmaSMeRLa0
                 -9021.3 * CHB 
                -343. * CHW 
                -6557. * CHWB 
                -8224.3 * CHD 
                +2207. * CHbox 
                +5. * CHl1R11 
                -3305. * CHl3R11 
                -3312. * CHl3R22 
                +19259. * CHeR11 
                +3318. * CllR1221             
                );
                
        // LL -------------------------------
        sigmaSMeLLa0 = 0.027954; 
 
        sigmaeLLa0 = cWsch * (sigmaSMeLLa0
                +8794. * CHB 
                +1796. * CHW 
                -7333. * CHWB 
                -1976. * CHD 
                +3388. * CHbox 
                -12072. * CHl1R11 
                -17149. * CHl3R11 
                -5084. * CHl3R22 
                +14954. * CHeR11 
                +5093. * CllR1221
                );
        

        // RR -------------------------------
        sigmaSMeRRa0 = 0.027954; 
 
        sigmaeRRa0 = cWsch * (sigmaSMeRRa0
                +8802. * CHB 
                +1812. * CHW 
                -7315. * CHWB 
                -1976. * CHD 
                +3388. * CHbox 
                -12060. * CHl1R11 
                -17151. * CHl3R11 
                -5084. * CHl3R22 
                +14953. * CHeR11 
                +5093. * CllR1221              
                );

    } else if (sqrt_s == 1.5) {

        C1 = 0.0065; // Use the same as 1400 GeV

        // e+ e- > H e+ e- 
        // LR -------------------------------
        sigmaSMeLRa0 = 0.045391; 
 
        sigmaeLRa0 = cWsch * (sigmaSMeLRa0
                -6499. * CHB 
                -9111. * CHW 
                +24208. * CHWB 
                +14078. * CHD 
                +5504. * CHbox 
                -39948.6 * CHl1R11 
                -48214.3 * CHl3R11 
                -8238. * CHl3R22 
                +2. * CHeR11 
                +8271. * CllR1221 
                );
        
        
        // RL -------------------------------
        sigmaSMeRLa0 = 0.019352; 
 
        sigmaeRLa0 = cWsch * (sigmaSMeRLa0
                -9353.7 * CHB 
                -348. * CHW 
                -7033. * CHWB 
                -8741. * CHD 
                +2346. * CHbox 
                +5. * CHl1R11 
                -3513. * CHl3R11 
                -3520. * CHl3R22 
                +21099. * CHeR11 
                +3526. * CllR1221              
                );
                
        // LL -------------------------------
        sigmaSMeLLa0 = 0.029695; 
 
        sigmaeLLa0 = cWsch * (sigmaSMeLLa0
                +8978. * CHB 
                +1827. * CHW 
                -7544. * CHWB 
                -2101. * CHD 
                +3601. * CHbox 
                -13199. * CHl1R11 
                -18594. * CHl3R11 
                -5400. * CHl3R22 
                +16352. * CHeR11 
                +5411. * CllR1221
                );
        

        // RR -------------------------------
        sigmaSMeRRa0 = 0.029695; 
 
        sigmaeRRa0 = cWsch * (sigmaSMeRRa0
                +8983. * CHB 
                +1841. * CHW 
                -7521. * CHWB 
                -2101. * CHD 
                +3601. * CHbox 
                -13187. * CHl1R11 
                -18597. * CHl3R11 
                -5400. * CHl3R22 
                +16353. * CHeR11 
                +5411. * CllR1221              
                );

    } else if (sqrt_s == 3.0) {

        C1 = 0.0063;

        // e+ e- > H e+ e- 
        // LR -------------------------------
        sigmaSMeLRa0 = 0.074102; 
 
        sigmaeLRa0 = cWsch * (sigmaSMeLRa0
                -7921. * CHB 
                -11849. * CHW 
                +36688. * CHWB 
                +23012. * CHD 
                +8976. * CHbox 
                -85300. * CHl1R11 
                -98820. * CHl3R11 
                -13463. * CHl3R22 
                -3. * CHeR11 
                +13507. * CllR1221 
                );
        
        
        // RL -------------------------------
        sigmaSMeRLa0 = 0.031592; 
 
        sigmaeRLa0 = cWsch * (sigmaSMeRLa0
                -11864. * CHB 
                -380. * CHW 
                -12283. * CHWB 
                -14264. * CHD 
                +3826. * CHbox 
                +8. * CHl1R11 
                -5737. * CHl3R11 
                -5744. * CHl3R22 
                +45048. * CHeR11 
                +5759. * CllR1221             
                );
                
        // LL -------------------------------
        sigmaSMeLLa0 = 0.048401; 
 
        sigmaeLLa0 = cWsch * (sigmaSMeLLa0
                +10290. * CHB 
                +1982. * CHW 
                -9308. * CHWB 
                -3411. * CHD 
                +5863. * CHbox 
                -27936. * CHl1R11 
                -36729. * CHl3R11 
                -8799. * CHl3R22 
                +34596. * CHeR11 
                +8824. * CllR1221
                );
        

        // RR -------------------------------
        sigmaSMeRRa0 = 0.048401; 
 
        sigmaeRRa0 = cWsch * (sigmaSMeRRa0
                +10301. * CHB 
                +2016. * CHW 
                -9292. * CHWB 
                -3411. * CHD 
                +5863. * CHbox 
                -27914. * CHl1R11 
                -36742. * CHl3R11 
                -8799. * CHl3R22 
                +34591. * CHeR11 
                +8824. * CllR1221             
                );
        
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZBF()");
    
    // Construct the signal strength
    // Total cross section
    mu = fLR * (sigmaeLRa0) + fRL * (sigmaeRLa0) + fLL * (sigmaeLLa0) + fRR * (sigmaeRRa0);
    // Normalize to SM
    mu = mu / (fLR * (sigmaSMeLRa0) + fRL * (sigmaSMeRLa0) + fLL * (sigmaSMeLLa0) + fRR * (sigmaSMeRRa0));

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    //(Assume similar to WBF.)
    mu += scalTH * eeeWBFint + eeeWBFpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}


const double NPSMEFTd6General::mueeHee(const double sqrt_s, const double Pol_em, const double Pol_ep) const {

    //  Mw scheme

    double mu = 1.0;

    double C1 = 0.0;

    // Wilson coefficients and scale    
    double CHB = 0.0, CHW = 0.0, CHWB = 0.0, CHD = 0.0, CHbox = 0.0, CHl1R11 = 0.0;
    double CHl3R11 = 0.0, CHl3R22 = 0.0, CHeR11 = 0.0, CllR1221 = 0.0; 
    double muRG = 0;
    
    // Polarization factors
    double Pe = Pol_em, Pp = Pol_ep;
    double fLR, fRL, fLL, fRR;
    
    // LR, RL, LL, and RR cross sections    
    double sigmaSMeLRa0 = 0.0, sigmaeLRa0 = 0.0, sigmaSMeLRa1 = 0.0, sigmaeLRa1 = 0.0; 
    double sigmaSMeRLa0 = 0.0, sigmaeRLa0 = 0.0, sigmaSMeRLa1 = 0.0, sigmaeRLa1 = 0.0;
    
    double sigmaSMeLLa0 = 0.0, sigmaeLLa0 = 0.0, sigmaSMeLLa1 = 0.0, sigmaeLLa1 = 0.0; 
    double sigmaSMeRRa0 = 0.0, sigmaeRRa0 = 0.0, sigmaSMeRRa1 = 0.0, sigmaeRRa1 = 0.0;
    
    double scalTH = 1.0;
    
    // -------------------------------------------------------------------------
    
    if ( sqrt_s > 0.5 ) {
        // Theory uncert. scaling like log^2(E/MW)
        
        scalTH = log(sqrt_s/0.080365)/log(0.5/0.080365);
        scalTH = scalTH * scalTH;
    }
    
    fLR = 0.25 * (1.0 - Pe) * (1.0 + Pp);
    fRL = 0.25 * (1.0 + Pe) * (1.0 - Pp);
    fLL = 0.25 * (1.0 - Pe) * (1.0 - Pp);
    fRR = 0.25 * (1.0 + Pe) * (1.0 + Pp);
    
    // RG scale in GeV
    muRG = 1000. * sqrt_s;
    
//  Wilson coefficients definitions 
    CHB = getSMEFTCoeff("CHB", muRG); 
    CHW = getSMEFTCoeff("CHW", muRG); 
    CHWB = getSMEFTCoeff("CHWB", muRG); 
    CHD = getSMEFTCoeff("CHD", muRG); 
    CHbox = getSMEFTCoeff("CHbox", muRG); 
    CHl1R11 = getSMEFTCoeff("CHl1R",0,0, muRG); 
    CHl3R11 = getSMEFTCoeff("CHl3R",0,0, muRG); 
    CHl3R22 = getSMEFTCoeff("CHl3R",1,1, muRG); 
    CHeR11 = getSMEFTCoeff("CHeR",0,0, muRG); 
    CllR1221 = getSMEFTCoeff("CllR",0,1,1,0, muRG);
    
    // Computed as the difference between e+ e- > H e+ e- and e+ e- > H Z, Z > e+ e-
    
    if (sqrt_s == 0.500) {

        C1 = 0.0067;
        
        // e+ e- > H e+ e- - e+ e- > H Z, Z > e+ e-
        // LR -------------------------------
        sigmaSMeLRa0 = 0.015502; 
 
        sigmaeLRa0 = cWsch * (sigmaSMeLRa0
                -4098.92 * CHB 
                +7192.41 * CHW 
                +6438.5 * CHWB 
                +4108.48 * CHD 
                +1877.39 * CHbox 
                +28079.5 * CHl1R11 
                +25267.8 * CHl3R11 
                -2824.24 * CHl3R22 
                -526.241 * CHeR11 
                +2810.1 * CllR1221 
                );
        
        sigmaSMeLRa1 = 0.003925; 
 
        sigmaeLRa1 = cWsch * (sigmaSMeLRa1
                -1760.76 * CHB 
                +6343.83 * CHW 
                +862.93 * CHWB 
                +624.83 * CHD 
                +475.03 * CHbox 
                +26386.7 * CHl1R11 
                +25667.3 * CHl3R11 
                -714.93 * CHl3R22 
                -421.83 * CHeR11 
                +711.83 * CllR1221               
                );
        
        // RL -------------------------------
        sigmaSMeRLa0 = 0.007657; 
 
        sigmaeRLa0 = cWsch * (sigmaSMeRLa0
                +1971.91 * CHB 
                -91.342 * CHW 
                +1373.22 * CHWB 
                -2764.85 * CHD 
                +924.564 * CHbox 
                +414.096 * CHl1R11 
                -976.972 * CHl3R11 
                -1394.52 * CHl3R22 
                -23347.4 * CHeR11 
                +1388.44 * CllR1221              
                );
        
        sigmaSMeRLa1 = 0.002563; 
 
        sigmaeRLa1 = cWsch * (sigmaSMeRLa1
                +2917.26 * CHB 
                +76.18 * CHW 
                +2218.96 * CHWB 
                -566.82 * CHD 
                +310.61 * CHbox 
                +340.09 * CHl1R11 
                -126.53 * CHl3R11 
                -466.71 * CHl3R22 
                -21174.2 * CHeR11 
                +464.69 * CllR1221               
                );   
        
        // LL -------------------------------
        sigmaSMeLLa0 = 0.006966; 
 
        sigmaeLLa0 = cWsch * (sigmaSMeLLa0
                +4733.36 * CHB 
                +1093.5 * CHW 
                -3452.57 * CHWB 
                -494.684 * CHD 
                +844.033 * CHbox 
                -1787.74 * CHl1R11 
                -3056.39 * CHl3R11 
                -1268.13 * CHl3R22 
                +2206.99 * CHeR11 
                +1266.16 * CllR1221
                );
        
        sigmaSMeLLa1 = 0.0; 
 
        sigmaeLLa1 = sigmaSMeLLa1;
        
        // RR -------------------------------
        sigmaSMeRRa0 = 0.006966; 
 
        sigmaeRRa0 = cWsch * (sigmaSMeRRa0
                +4735.97 * CHB 
                +1092.78 * CHW 
                -3453.81 * CHWB 
                -494.684 * CHD 
                +844.033 * CHbox 
                -1788.99 * CHl1R11 
                -3056.38 * CHl3R11 
                -1268.13 * CHl3R22 
                +2206.53 * CHeR11 
                +1266.16 * CllR1221             
                );
        
        sigmaSMeRRa1 = 0.0; 
 
        sigmaeRRa1 = sigmaSMeRRa1; 

    } else if (sqrt_s == 0.550) {

        C1 = 0.0067;
        
        // e+ e- > H e+ e- - e+ e- > H Z, Z > e+ e-
        // LR -------------------------------
        sigmaSMeLRa0 = 0.016705; 
 
        sigmaeLRa0 = cWsch * (sigmaSMeLRa0
                -4112.54 * CHB 
                +5601.16 * CHW 
                +7336.04 * CHWB 
                +4634.02 * CHD 
                +2029.88 * CHbox 
                +25858.5 * CHl1R11 
                +22849.8 * CHl3R11 
                -3039.76 * CHl3R22 
                -434.5 * CHeR11 
                +3041.28 * CllR1221
                );
        
        sigmaSMeLRa1 = 0.003172; 
 
        sigmaeLRa1 = cWsch * (sigmaSMeLRa1
                -1488.24 * CHB 
                +5327.07 * CHW 
                +689.75 * CHWB 
                +506.48 * CHD 
                +383.93 * CHbox 
                +25710.4 * CHl1R11 
                +25128.9 * CHl3R11 
                -576.71 * CHl3R22 
                -340.94 * CHeR11 
                +576.93 * CllR1221               
                );
        
        // RL -------------------------------
        sigmaSMeRLa0 = 0.007966; 
 
        sigmaeRLa0 = cWsch * (sigmaSMeRLa0
                +984.448 * CHB 
                -142.658 * CHW 
                +677.26 * CHWB 
                -3034.71 * CHD 
                +965.07 * CHbox 
                +340.095 * CHl1R11 
                -1101.65 * CHl3R11 
                -1452.34 * CHl3R22 
                -21978.4 * CHeR11 
                +1451.97 * CllR1221             
                );
        
        sigmaSMeRLa1 = 0.00207; 
 
        sigmaeRLa1 = cWsch * (sigmaSMeRLa1
                +2454.5 * CHB 
                +53.84 * CHW 
                +1880.89 * CHWB 
                -457.54 * CHD 
                +251.23 * CHbox 
                +275.71 * CHl1R11 
                -101.57 * CHl3R11 
                -376.05 * CHl3R22 
                -20653.6 * CHeR11 
                +376.16 * CllR1221                
                );   
        
        // LL -------------------------------
        sigmaSMeLLa0 = 0.008388; 
 
        sigmaeLLa0 = cWsch * (sigmaSMeLLa0
                +5210.05 * CHB 
                +1184.39 * CHW 
                -3856.1 * CHWB 
                -596.339 * CHD 
                +1015.68 * CHbox 
                -2279.34 * CHl1R11 
                -3807.33 * CHl3R11 
                -1526.87 * CHl3R22 
                +2813.4 * CHeR11 
                +1523.44 * CllR1221
                );
        
        sigmaSMeLLa1 = 0.0; 
 
        sigmaeLLa1 = sigmaSMeLLa1;
        
        // RR -------------------------------
        sigmaSMeRRa0 = 0.008388; 
 
        sigmaeRRa0 = cWsch * (sigmaSMeRRa0
                +5210.49 * CHB 
                +1183.86 * CHW 
                -3856.65 * CHWB 
                -594.298 * CHD 
                +1014.02 * CHbox 
                -2283.41 * CHl1R11 
                -3805.47 * CHl3R11 
                -1526.24 * CHl3R22 
                +2814.1 * CHeR11 
                +1522.51 * CllR1221             
                );
        
        sigmaSMeRRa1 = 0.0; 
 
        sigmaeRRa1 = sigmaSMeRRa1; 

    } else if (sqrt_s == 1.0) {

        C1 = 0.0065;

        // e+ e- > H e+ e- - e+ e- > H Z, Z > e+ e-
        // LR -------------------------------
        sigmaSMeLRa0 = 0.031515; 
 
        sigmaeLRa0 = cWsch * (sigmaSMeLRa0
                -5273.48 * CHB 
                -2563.62 * CHW 
                +16070.3 * CHWB 
                +9598.71 * CHD 
                +3803.15 * CHbox 
                +6786.78 * CHl1R11 
                +1156.86 * CHl3R11 
                -5735.46 * CHl3R22 
                -132.37 * CHeR11 
                +5728.09 * CllR1221
                );
        
        sigmaSMeLRa1 = 0.00088; 
 
        sigmaeLRa1 = cWsch * (sigmaSMeLRa1
                -482.328 * CHB 
                +1692.36 * CHW 
                +183.29 * CHWB 
                +140.1 * CHD 
                +106.2 * CHbox 
                +23325.2 * CHl1R11 
                +23162.1 * CHl3R11 
                -160.16 * CHl3R22 
                -94.45 * CHeR11 
                +159.86 * CllR1221               
                );
        
        // RL -------------------------------
        sigmaSMeRLa0 = 0.013671; 
 
        sigmaeRLa0 = cWsch * (sigmaSMeRLa0
                -4714.26 * CHB 
                -308.604 * CHW 
                -3682.04 * CHWB 
                -6021.83 * CHD 
                +1648.1 * CHbox 
                +93.8183 * CHl1R11 
                -2395.03 * CHl3R11 
                -2489.25 * CHl3R22 
                -11195.5 * CHeR11 
                +2484.75 * CllR1221             
                );
        
        sigmaSMeRLa1 = 0.000575; 
 
        sigmaeRLa1 = cWsch * (sigmaSMeRLa1
                +783.67 * CHB 
                +4.93 * CHW 
                +615.38 * CHWB 
                -127.27 * CHD 
                +69.67 * CHbox 
                +76.16 * CHl1R11 
                -28.32 * CHl3R11 
                -104.57 * CHl3R22 
                -18814. * CHeR11 
                +104.73 * CllR1221                
                );   
        
        // LL -------------------------------
        sigmaSMeLLa0 = 0.019938; 
 
        sigmaeLLa0 = cWsch * (sigmaSMeLLa0
                +7757.24 * CHB 
                +1628.67 * CHW 
                -6241.45 * CHWB 
                -1420.11 * CHD 
                +2407.24 * CHbox 
                -7405.21 * CHl1R11 
                -11030.9 * CHl3R11 
                -3630.32 * CHl3R22 
                +9152.39 * CHeR11 
                +3619.27 * CllR1221
                );
        
        sigmaSMeLLa1 = 0.0; 
 
        sigmaeLLa1 = sigmaSMeLLa1;
        
        // RR -------------------------------
        sigmaSMeRRa0 = 0.019938; 
 
        sigmaeRRa0 = cWsch * (sigmaSMeRRa0
                +7760.88 * CHB 
                +1629.58 * CHW 
                -6241.85 * CHWB 
                -1420.11 * CHD 
                +2407.24 * CHbox 
                -7416.83 * CHl1R11 
                -11036.3 * CHl3R11 
                -3630.32 * CHl3R22 
                +9151.14 * CHeR11 
                +3619.27 * CllR1221             
                );
        
        sigmaSMeRRa1 = 0.0; 
 
        sigmaeRRa1 = sigmaSMeRRa1; 

    } else if (sqrt_s == 1.4) {

        C1 = 0.0065;

        // e+ e- > H e+ e- - e+ e- > H Z, Z > e+ e-
        // LR -------------------------------
        sigmaSMeLRa0 = 0.043295; 
 
        sigmaeLRa0 = cWsch * (sigmaSMeLRa0
                -6192.44 * CHB 
                -5876.33 * CHW 
                +22064.3 * CHWB 
                +13310.3 * CHD 
                +5226.12 * CHbox 
                -8410.11 * CHl1R11 
                -16330.9 * CHl3R11 
                -7885.24 * CHl3R22 
                -80.8144 * CHeR11 
                +7861.2 * CllR1221
                );
        
        sigmaSMeLRa1 = 0.00044; 
 
        sigmaeLRa1 = cWsch * (sigmaSMeLRa1
                -249.516 * CHB 
                +871.46 * CHW 
                +91. * CHWB 
                +70.15 * CHD 
                +53.31 * CHbox 
                +22795.3 * CHl1R11 
                +22705.4 * CHl3R11 
                -80.019 * CHl3R22 
                -47.409 * CHeR11 
                +79.81 * CllR1221               
                );
        
        // RL -------------------------------
        sigmaSMeRLa0 = 0.018575; 
 
        sigmaeRLa0 = cWsch * (sigmaSMeRLa0
                -7253.38 * CHB 
                -354.216 * CHW 
                -6168.17 * CHWB 
                -8318.73 * CHD 
                +2239.38 * CHbox 
                +44.6 * CHl1R11 
                -3340.37 * CHl3R11 
                -3383.27 * CHl3R22 
                -3085.96 * CHeR11 
                +3370.78 * CllR1221             
                );
        
        sigmaSMeRLa1 = 0.000287; 
 
        sigmaeRLa1 = cWsch * (sigmaSMeRLa1
                +404.369 * CHB 
                +1.262 * CHW 
                +318.379 * CHWB 
                -63.65 * CHD 
                +34.837 * CHbox 
                +38.139 * CHl1R11 
                -14.289 * CHl3R11 
                -52.272 * CHl3R22 
                -18393.9 * CHeR11 
                +52.215 * CllR1221                
                );   
        
        // LL -------------------------------
        sigmaSMeLLa0 = 0.027967; 
 
        sigmaeLLa0 = cWsch * (sigmaSMeLLa0
                +8797.53 * CHB 
                +1783.21 * CHW 
                -7389.69 * CHWB 
                -1996.03 * CHD 
                +3374.01 * CHbox 
                -12077. * CHl1R11 
                -17157.9 * CHl3R11 
                -5092.09 * CHl3R22 
                +14929.2 * CHeR11 
                +5076.1 * CllR1221
                );
        
        sigmaSMeLLa1 = 0.0; 
 
        sigmaeLLa1 = sigmaSMeLLa1;
        
        // RR -------------------------------
        sigmaSMeRRa0 = 0.027967; 
 
        sigmaeRRa0 = cWsch * (sigmaSMeRRa0
                +8799.81 * CHB 
                +1789.18 * CHW 
                -7386.69 * CHWB 
                -1996.03 * CHD 
                +3374.07 * CHbox 
                -12093.2 * CHl1R11 
                -17168.1 * CHl3R11 
                -5092.1 * CHl3R22 
                +14921.5 * CHeR11 
                +5076.11 * CllR1221             
                );
        
        sigmaSMeRRa1 = 0.0; 
 
        sigmaeRRa1 = sigmaSMeRRa1;  

    } else if (sqrt_s == 1.5) {

        C1 = 0.0065; // Use the same as 1400 GeV

        // e+ e- > H e+ e- - e+ e- > H Z, Z > e+ e-
        // LR -------------------------------
        sigmaSMeLRa0 = 0.045902; 
 
        sigmaeLRa0 = cWsch * (sigmaSMeLRa0
                -6375.19 * CHB 
                -6460.92 * CHW 
                +23318.4 * CHWB 
                +14123. * CHD 
                +5539.23 * CHbox 
                -12062.5 * CHl1R11 
                -20377.7 * CHl3R11 
                -8361.26 * CHl3R22 
                -70.2473 * CHeR11 
                +8323.76 * CllR1221 
                );
        
        sigmaSMeLRa1 = 0.000382; 
 
        sigmaeLRa1 = cWsch * (sigmaSMeLRa1
                -217.463 * CHB 
                +760.524 * CHW 
                +78.744 * CHWB 
                +60.914 * CHD 
                +46.284 * CHbox 
                +22714.2 * CHl1R11 
                +22643.9 * CHl3R11 
                -69.698 * CHl3R22 
                -41.158 * CHeR11 
                +69.444 * CllR1221                
                );
        
        // RL -------------------------------
        sigmaSMeRLa0 = 0.019672; 
 
        sigmaeRLa0 = cWsch * (sigmaSMeRLa0
                -7723.03 * CHB 
                -363.499 * CHW 
                -6714.28 * CHWB 
                -8822.04 * CHD 
                +2368.63 * CHbox 
                +26.1277 * CHl1R11 
                -3541.43 * CHl3R11 
                -3586.63 * CHl3R22 
                -1139.61 * CHeR11 
                +3562.85 * CllR1221              
                );
        
        sigmaSMeRLa1 = 0.00025; 
 
        sigmaeRLa1 = cWsch * (sigmaSMeRLa1
                +353.423 * CHB 
                +0.877 * CHW 
                +278.093 * CHWB 
                -55.24 * CHD 
                +30.338 * CHbox 
                +33.078 * CHl1R11 
                -12.356 * CHl3R11 
                -45.362 * CHl3R22 
                -18343.1 * CHeR11 
                +45.449 * CllR1221                
                );   
        
        // LL -------------------------------
        sigmaSMeLLa0 = 0.029711; 
 
        sigmaeLLa0 = cWsch * (sigmaSMeLLa0
                +8980.14 * CHB 
                +1806.17 * CHW 
                -7606.24 * CHWB 
                -2122.01 * CHD 
                +3584.01 * CHbox 
                -13210.4 * CHl1R11 
                -18604.3 * CHl3R11 
                -5410.06 * CHl3R22 
                +16326.5 * CHeR11 
                +5389.08 * CllR1221 
                );
        
        sigmaSMeLLa1 = 0.0; 
 
        sigmaeLLa1 = sigmaSMeLLa1;
        
        // RR -------------------------------
        sigmaSMeRRa0 = 0.029711; 
 
        sigmaeRRa0 = cWsch * (sigmaSMeRRa0
                +8985.08 * CHB 
                +1815.25 * CHW 
                -7606.1 * CHWB 
                -2122.01 * CHD 
                +3584.06 * CHbox 
                -13225.4 * CHl1R11 
                -18615.2 * CHl3R11 
                -5410.07 * CHl3R22 
                +16320. * CHeR11 
                +5389.08 * CllR1221              
                );
        
        sigmaSMeRRa1 = 0.0; 
 
        sigmaeRRa1 = sigmaSMeRRa1;  

    } else if (sqrt_s == 3.0) {

        C1 = 0.0063;

        // e+ e- > H e+ e- - e+ e- > H Z, Z > e+ e-
        // LR -------------------------------
        sigmaSMeLRa0 = 0.074258; 
 
        sigmaeLRa0 = cWsch * (sigmaSMeLRa0
                -7890.8 * CHB 
                -10712. * CHW 
                +36102.9 * CHWB 
                +22954.4 * CHD 
                +8950.34 * CHbox 
                -58386.8 * CHl1R11 
                -71823.6 * CHl3R11 
                -13529.9 * CHl3R22 
                -84.4482 * CHeR11 
                +13440.9 * CllR1221 
                );
        
        sigmaSMeLRa1 = 0.000094; 
 
        sigmaeLRa1 = cWsch * (sigmaSMeLRa1
                -54.8938 * CHB 
                +191.442 * CHW 
                +19.136 * CHWB 
                +14.986 * CHD 
                +11.398 * CHbox 
                +22370.4 * CHl1R11 
                +22337.9 * CHl3R11 
                -17.152 * CHl3R22 
                -10.134 * CHeR11 
                +17.064 * CllR1221                
                );
        
        // RL -------------------------------
        sigmaSMeRLa0 = 0.031683; 
 
        sigmaeRLa0 = cWsch * (sigmaSMeRLa0
                -11227.5 * CHB 
                -410.83 * CHW 
                -12206.1 * CHWB 
                -14304.6 * CHD 
                +3817.17 * CHbox 
                -0.93975 * CHl1R11 
                -5766.16 * CHl3R11 
                -5772.65 * CHl3R22 
                +23381.2 * CHeR11 
                +5741.22 * CllR1221              
                );
        
        sigmaSMeRLa1 = 0.000061; 
 
        sigmaeRLa1 = cWsch * (sigmaSMeRLa1
                +89.174 * CHB 
                -0.004 * CHW 
                +70.224 * CHWB 
                -13.617 * CHD 
                +7.452 * CHbox 
                +8.178 * CHl1R11 
                -3.058 * CHl3R11 
                -11.199 * CHl3R22 
                -18063.7 * CHeR11 
                +11.123 * CllR1221                
                );   
        
        // LL -------------------------------
        sigmaSMeLLa0 = 0.048427; 
 
        sigmaeLLa0 = cWsch * (sigmaSMeLLa0
                +10268.1 * CHB 
                +1941.01 * CHW 
                -9431.02 * CHWB 
                -3454. * CHD 
                +5837. * CHbox 
                -27962.8 * CHl1R11 
                -36729.7 * CHl3R11 
                -8820.01 * CHl3R22 
                +34561.2 * CHeR11 
                +8778.01 * CllR1221 
                );
        
        sigmaSMeLLa1 = 0.0; 
 
        sigmaeLLa1 = sigmaSMeLLa1;
        
        // RR -------------------------------
        sigmaSMeRRa0 = 0.048427; 
 
        sigmaeRRa0 = cWsch * (sigmaSMeRRa0
                +10279.1 * CHB 
                +1965.01 * CHW 
                -9436.92 * CHWB 
                -3454. * CHD 
                +5837. * CHbox 
                -27968.7 * CHl1R11 
                -36755.7 * CHl3R11 
                -8820.01 * CHl3R22 
                +34557.2 * CHeR11 
                +8779.01 * CllR1221              
                );
        
        sigmaSMeRRa1 = 0.0; 
 
        sigmaeRRa1 = sigmaSMeRRa1;  
 
        sigmaeRRa1 = cWsch * (sigmaSMeRRa1
               
                ); 
        
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeHee()");
    
    // Construct the signal strength
    // Total cross section
    mu = fLR * (sigmaeLRa0 - sigmaeLRa1) + fRL * (sigmaeRLa0 - sigmaeRLa1) + fLL * (sigmaeLLa0 - sigmaeLLa1) + fRR * (sigmaeRRa0 - sigmaeRRa1);
    // Normalize to SM
    mu = mu / (fLR * (sigmaSMeLRa0 - sigmaSMeLRa1) + fRL * (sigmaSMeRLa0 - sigmaSMeRLa1) + fLL * (sigmaSMeLLa0 - sigmaSMeLLa1) + fRR * (sigmaSMeRRa0 - sigmaSMeRRa1));

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    //(Assume similar to WBF.)
    mu += scalTH * eeeWBFint + eeeWBFpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}



const double NPSMEFTd6General::muepWBF(const double sqrt_s) const {

    //  2025 versions are for electron polarization -80% (1.2 and 1.3 TeV)
        
    double mu = 1.0;
    //double C1 = 0.0;
    
    double CHW = 0.0, CHWB = 0.0, CHD = 0.0, CHbox = 0.0, CHl3R11 = 0.0;
    double CHl3R22 = 0.0, CHq3R11 = 0.0, CHq3R22 = 0.0, CllR1221 = 0.0;
    double muRG = muw;
    
//  Wilson coefficients definitions 
    CHW = getSMEFTCoeff("CHW", muRG); 
    CHWB = getSMEFTCoeff("CHWB", muRG); 
    CHD = getSMEFTCoeff("CHD", muRG); 
    CHbox = getSMEFTCoeff("CHbox", muRG); 
    CHl3R11 = getSMEFTCoeff("CHl3R",0,0, muRG); 
    CHl3R22 = getSMEFTCoeff("CHl3R",1,1, muRG); 
    CHq3R11 = getSMEFTCoeff("CHq3R",0,0, muRG); 
    CHq3R22 = getSMEFTCoeff("CHq3R",1,1, muRG); 
    CllR1221 = getSMEFTCoeff("CllR",0,1,1,0, muRG); 

    if (sqrt_s == 1.2) {

        //C1 = 0.0;
        
        mu += cWsch * (
                -89863.9 * CHW 
                +1384.83 * CHWB 
                -29993.1 * CHD 
                +121095. * CHbox 
                -331289. * CHl3R11 
                -181498. * CHl3R22 
                -139640. * CHq3R11 
                -9061.74 * CHq3R22 
                +181670. * CllR1221 
                );

    } else if (sqrt_s == 1.3) {
        
        //C1 = 0.0;
        
        mu += cWsch * (
                -84713.5 * CHW 
                +2452.67 * CHWB 
                -29561.7 * CHD 
                +121718. * CHbox 
                -335293. * CHl3R11 
                -181119. * CHl3R22 
                -143207. * CHq3R11 
                -10057.4 * CHq3R22 
                +181876. * CllR1221 
                );

    } else if (sqrt_s == 1.8) {
        
    //  Only Alpha scheme

        mu +=
                +121867. * getSMEFTCoeffEW("CHbox")
                - 182643. * getSMEFTCoeffEW("CHl3R", 0, 0)
                - 181961. * getSMEFTCoeffEW("CHq3R", 0, 0)
                - 202400. * getSMEFTCoeffEW("CHD")
                - 78295.8 * getSMEFTCoeffEW("CHW")
                - 377193. * getSMEFTCoeffEW("CHWB")
                - 4.672 * delta_GF
                - 4.637 * deltaMwd6()
                ;

        //        if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients

        //        }

    } else if (sqrt_s == 3.5) {
        
    //  Only Alpha scheme

        mu +=
                +121250. * getSMEFTCoeffEW("CHbox")
                - 216885. * getSMEFTCoeffEW("CHl3R", 0, 0)
                - 218544. * getSMEFTCoeffEW("CHq3R", 0, 0)
                - 202390. * getSMEFTCoeffEW("CHD")
                - 64783.2 * getSMEFTCoeffEW("CHW")
                - 377727. * getSMEFTCoeffEW("CHWB")
                - 4.688 * delta_GF
                - 4.573 * deltaMwd6()
                ;

        //        if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients

        //        }

    } else if (sqrt_s == 5.0) {

        mu +=
                +119662. * getSMEFTCoeffEW("CHbox")
                - 237868. * getSMEFTCoeffEW("CHl3R", 0, 0)
                - 236470. * getSMEFTCoeffEW("CHq3R", 0, 0)
                - 203294. * getSMEFTCoeffEW("CHD")
                - 60911. * getSMEFTCoeffEW("CHW")
                - 378045. * getSMEFTCoeffEW("CHWB")
                - 4.667 * delta_GF
                - 4.437 * deltaMwd6()
                ;

        //        if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients

        //        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::muepWBF()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eepWBFint + eepWBFpar;

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::muepZBF(const double sqrt_s) const {

    //  2025 versions are for electron polarization -80% (1.2 and 1.3 TeV)
    
    double mu = 1.0;
    //double C1 = 0.0;
    
    double CHB = 0.0, CHW = 0.0, CHWB = 0.0, CHD = 0.0, CHbox = 0.0, CHl1R11 = 0.0;
    double CHl3R11 = 0.0, CHl3R22 = 0.0, CHeR11 = 0.0, CHq1R11 = 0.0, CHq3R11 = 0.0;
    double CHq1R22 = 0.0, CHq3R22 = 0.0, CHuR11 = 0.0, CHuR22 = 0.0, CHdR11 = 0.0, CHdR22 = 0.0, CllR1221 = 0.0; 
    double muRG = muw;
    
//  Wilson coefficients definitions 
    CHB = getSMEFTCoeff("CHB", muRG); 
    CHW = getSMEFTCoeff("CHW", muRG); 
    CHWB = getSMEFTCoeff("CHWB", muRG); 
    CHD = getSMEFTCoeff("CHD", muRG); 
    CHbox = getSMEFTCoeff("CHbox", muRG); 
    CHl1R11 = getSMEFTCoeff("CHl1R",0,0, muRG); 
    CHl3R11 = getSMEFTCoeff("CHl3R",0,0, muRG); 
    CHl3R22 = getSMEFTCoeff("CHl3R",1,1, muRG); 
    CHeR11 = getSMEFTCoeff("CHeR",0,0, muRG); 
    CHq1R11 = getSMEFTCoeff("CHq1R",0,0, muRG); 
    CHq3R11 = getSMEFTCoeff("CHq3R",0,0, muRG); 
    CHq1R22 = getSMEFTCoeff("CHq1R",1,1, muRG); 
    CHq3R22 = getSMEFTCoeff("CHq3R",1,1, muRG); 
    CHuR11 = getSMEFTCoeff("CHuR",0,0, muRG); 
    CHuR22 = getSMEFTCoeff("CHuR",1,1, muRG); 
    CHdR11 = getSMEFTCoeff("CHdR",0,0, muRG); 
    CHdR22 = getSMEFTCoeff("CHdR",1,1, muRG); 
    CllR1221 = getSMEFTCoeff("CllR",0,1,1,0, muRG);

    if (sqrt_s == 1.2) {

        //C1 = 0.0;
        
        mu += cWsch * (
                -45626.8 * CHB 
                -233105. * CHW 
                +322530. * CHWB 
                +153678. * CHD 
                +122298. * CHbox 
                -223465. * CHl1R11 
                -405483. * CHl3R11 
                -180952. * CHl3R22 
                +19607.3 * CHeR11 
                +38972.5 * CHq1R11 
                -141632. * CHq3R11 
                -5274.11 * CHq1R22 
                -14946.6 * CHq3R22 
                -34549.1 * CHuR11 
                -1967. * CHuR22 
                +10146.9 * CHdR11 
                +1521.41 * CHdR22 
                +183749. * CllR1221 
                );

    } else if (sqrt_s == 1.3) {
        
        //C1 = 0.0;
        
        mu += cWsch * (
                -40452.1 * CHB 
                -222889. * CHW 
                +314229. * CHWB 
                +153151. * CHD 
                +120937. * CHbox 
                -232181. * CHl1R11 
                -414451. * CHl3R11 
                -182056. * CHl3R22 
                +19001.5 * CHeR11 
                +36594.9 * CHq1R11 
                -146957. * CHq3R11 
                -5715.25 * CHq1R22 
                -16408.9 * CHq3R22 
                -35934.4 * CHuR11 
                -2333.7 * CHuR22 
                +10800.1 * CHdR11 
                +1501.27 * CHdR22 
                +182692. * CllR1221
                );

    } else if (sqrt_s == 1.8) {
        
        //  Only Alpha scheme

        mu +=
                +120218. * getSMEFTCoeffEW("CHbox")
                - 173566. * getSMEFTCoeffEW("CHl1R", 0, 0)
                + 26307.1 * getSMEFTCoeffEW("CHq1R", 0, 0)
                + 142600. * getSMEFTCoeffEW("CHeR", 0, 0)
                - 47449. * getSMEFTCoeffEW("CHuR", 0, 0)
                + 14356.2 * getSMEFTCoeffEW("CHdR", 0, 0)
                - 173566. * getSMEFTCoeffEW("CHl3R", 0, 0)
                - 188606. * getSMEFTCoeffEW("CHq3R", 0, 0)
                - 174301. * getSMEFTCoeffEW("CHD")
                - 19800. * getSMEFTCoeffEW("CHB")
                - 103254. * getSMEFTCoeffEW("CHW")
                - 89049.2 * getSMEFTCoeffEW("CHWB")
                - 3.714 * delta_GF
                ;

        //        if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients

        //        }

    } else if (sqrt_s == 3.5) {
        
        //  Only Alpha scheme

        mu +=
                +123119. * getSMEFTCoeffEW("CHbox")
                - 206981. * getSMEFTCoeffEW("CHl1R", 0, 0)
                + 18620.9 * getSMEFTCoeffEW("CHq1R", 0, 0)
                + 177706. * getSMEFTCoeffEW("CHeR", 0, 0)
                - 53822. * getSMEFTCoeffEW("CHuR", 0, 0)
                + 20491.5 * getSMEFTCoeffEW("CHdR", 0, 0)
                - 206981. * getSMEFTCoeffEW("CHl3R", 0, 0)
                - 227549. * getSMEFTCoeffEW("CHq3R", 0, 0)
                - 172298. * getSMEFTCoeffEW("CHD")
                - 6887.17 * getSMEFTCoeffEW("CHB")
                - 79245. * getSMEFTCoeffEW("CHW")
                - 103223. * getSMEFTCoeffEW("CHWB")
                - 3.721 * delta_GF
                ;

        //        if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients

        //        }

    } else if (sqrt_s == 5.0) {
        
        //  Only Alpha scheme

        mu +=
                +121709. * getSMEFTCoeffEW("CHbox")
                - 225267. * getSMEFTCoeffEW("CHl1R", 0, 0)
                + 13471.8 * getSMEFTCoeffEW("CHq1R", 0, 0)
                + 193542. * getSMEFTCoeffEW("CHeR", 0, 0)
                - 57640.9 * getSMEFTCoeffEW("CHuR", 0, 0)
                + 22573. * getSMEFTCoeffEW("CHdR", 0, 0)
                - 225267. * getSMEFTCoeffEW("CHl3R", 0, 0)
                - 247738. * getSMEFTCoeffEW("CHq3R", 0, 0)
                - 172768. * getSMEFTCoeffEW("CHD")
                - 4524.89 * getSMEFTCoeffEW("CHB")
                - 71935.4 * getSMEFTCoeffEW("CHW")
                - 104998. * getSMEFTCoeffEW("CHWB")
                - 3.71 * delta_GF
                ;

        //        if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients

        //        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::muepZBF()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eepZBFint + eepZBFpar;

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::muWHpT250(const double sqrt_s) const {
    double mu = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 13.0) {

        C1 = 0.0119;

        mu +=
                +121150. * getSMEFTCoeffEW("CHbox")
                + 1095782. * getSMEFTCoeffEW("CHW")
                + 11951748. * getSMEFTCoeffEW("CHq3R", 0, 0)
                + 540010. * getSMEFTCoeffEW("CHq3R", 1, 1)
                + cAsch * (-160282. * getSMEFTCoeffEW("CHD")
                - 285105. * getSMEFTCoeffEW("CHWB")
                - 3.287 * delta_GF
                - 1.986 * deltaMwd6())
                + cWsch * (-30279.5 * getSMEFTCoeffEW("CHD")
                + 0. * getSMEFTCoeffEW("CHWB")
                - 2. * delta_GF)
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::muWHpT250()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eWHint + eWHpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio();


    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::muZHpT250(const double sqrt_s) const {
    double mu = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 13.0) {

        C1 = 0.0119;

        mu +=
                +121102. * getSMEFTCoeffEW("CHbox")
                + 103334. * getSMEFTCoeffEW("CHB")
                + 968778. * getSMEFTCoeffEW("CHW")
                - 1507566. * getSMEFTCoeffEW("CHq1R", 0, 0)
                + 165375. * getSMEFTCoeffEW("CHq1R", 1, 1)
                + 2712770. * getSMEFTCoeffEW("CHuR", 0, 0)
                + 83533. * getSMEFTCoeffEW("CHuR", 1, 1)
                - 836015. * getSMEFTCoeffEW("CHdR", 0, 0)
                - 64306.7 * getSMEFTCoeffEW("CHdR", 1, 1)
                + 10690175. * getSMEFTCoeffEW("CHq3R", 0, 0)
                + 540904. * getSMEFTCoeffEW("CHq3R", 1, 1)
                + cAsch * (-15339.3 * getSMEFTCoeffEW("CHD")
                + 286518. * getSMEFTCoeffEW("CHWB")
                - 2.508 * delta_GF)
                + cWsch * (+35828.1 * getSMEFTCoeffEW("CHD")
                + 398987. * getSMEFTCoeffEW("CHWB")
                - 2. * delta_GF)
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::muZHpT250()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eZHint + eZHpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio();


    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}


const double NPSMEFTd6General::mueeZH(const double sqrt_s, const double Pol_em, const double Pol_ep) const {

    double mu = 1.0;
    
    double dmuLO = 0.0;
    double dmuNLO = 0.0;
    
    double xsSMLO, xsSMNLOW, xsSMNLO;   
    
//     SM NLO absolute cross sections: Weak and Weak+QED [fb] 
  
    double xsSMweakLH[7] = {507.646, 247.943, 118.768, 95.0014, 23.7511, 9.27339, 1.76382}; 
    double xsSMweakRH[7] = {420.667, 204.977, 100.773, 81.189, 21.5294, 8.92131, 1.98509}; 
    double xsSMNLOLH[7] = {416.118, 267.004, 138.711, 113.282, 32.1297, 13.8278, 3.28209}; 
    double xsSMNLORH[7] = {361.39, 217.322, 113.689, 93.0279, 26.9557, 11.8709, 2.96837};  
    
//     SM NLO absolute corrections: Weak and QED [fb] 
  
    double dSMWLH[7] = {-72.6944, -35.9317, -19.7524, -16.947, -7.33368, -4.2239, -1.56196}; 
    double dSMWRH[7] = {44.8204, 21.1311, 11.0627, 8.68772, 1.39796, 0.18004, -0.16879}; // SM weak corrections (LH and RH) 
    double dSMQEDLH[7] = {-91.5282, 19.0611, 19.943, 18.2803, 8.37861, 4.55443, 1.51827}; 
    double dSMQEDRH[7] = {-59.2764, 12.3445, 12.9157, 11.8389, 5.42624, 2.94959, 0.98328}; // SM QED corrections (LH and RH) 
    
    double tofb = 3.894e+11;  // Conversion of the cross section to fb
    
    double s,s2, MH2, MW2, MZ2, MH4, MW4, MZ4, MW6, MZ6, MW8, MZ8;
    
    // For LO corrections
    double CHDden, CHWden, CHWBden; // Independent denominators
    double Cllnum, CHl111num, CHe11num, CHl322num, CHBnum, CHWnum, CHWBnum, CHDnum, CHboxnum; // Independent Numerators
    double derSMMW;
    
    // For NLO corrections
    //double C1 = 0.0;
    
    // RG scale of the process
    double muRG;
    
    double Ch2f1 = 0.0, Ch2f2 = 0.0;
    double Ch4f1 = 0.0, Ch4f2 = 0.0, Ch4f3 = 0.0, Ch4f4 = 0.0, Ch4f5 = 0.0, Ch4f6 = 0.0;

    // Energy dependent corrections for each operator: LH and RH initial electrons
    // (To normalize with SM NLO weak cross section)
  
    double d6LHCHD[7] = {-0.04299, -0.00717, 0.0003, 0.00163, 0.00606, 0.01022, 0.05332}; 
    double d6RHCHD[7] = {0.02165, -0.01445, -0.02584, -0.02757, -0.03435, -0.04432, -0.11827}; 
    double d6LHCHbox[7] = {-0.03952, -0.01798, -0.01631, -0.01713, -0.03571, -0.06942, -0.25989}; 
    double d6RHCHbox[7] = {-0.00321, 0.01412, 0.01872, 0.01903, 0.01298, -0.00227, -0.09124}; 
    double d6LHCHW[7] = {-0.24126, -0.1175, -0.06842, -0.058, -0.03242, -0.04867, -0.14268}; 
    double d6RHCHW[7] = {-0.00247, 0.01106, 0.01143, 0.01143, 0.01258, 0.0146, 0.01977};
    double d6LHCHB[7] = {0.04791, 0.02058, 0.00773, 0.00519, 0.00422, 0.01953, 0.09224}; 
    double d6RHCHB[7] = {-0.0325, 0.08517, 0.15935, 0.17883, 0.28562, 0.35672, 0.50909}; 
    double d6LHCHWB[7] = {-0.05099, 0.00165, 0.01518, 0.01774, 0.02588, 0.02493, 0.00208}; 
    double d6RHCHWB[7] = {-0.03449, 0.02039, 0.0588, 0.06846, 0.1088, 0.12043, 0.11923}; 
    double d6LHCHeR00[7] = {-0.00009, -0.00092, -0.00237, -0.00306, -0.01351, -0.03546, -0.18968}; 
    double d6RHCHeR00[7] = {0.17601, -0.07965, -0.21354, -0.22168, 0.97615, 6.14511, 61.1339}; 
    double d6LHCHl1R00[7] = {-0.39382, -0.41129, -0.8309, -1.09036, -6.88023, -23.8012, -192.589}; 
    double d6RHCHl1R00[7] = {0.00058, 0.00231, 0.00509, 0.00638, 0.02476, 0.06022, 0.27243}; 
    double d6LHCHl3R00[7] = {-0.14027, -0.19375, -0.62064, -0.87823, -6.52212, -22.8349, -184.162}; 
    double d6RHCHl3R00[7] = {0.18109, 0.16306, 0.15559, 0.15557, 0.16567, 0.17859, 0.20946}; 
    double d6LHCHl3R11[7] = {0.28034, 0.25281, 0.24915, 0.24974, 0.25337, 0.22484, -0.17093}; 
    double d6RHCHl3R11[7] = {0.18109, 0.16306, 0.15559, 0.15557, 0.16567, 0.17859, 0.20946};
    double d6LHCh4f2[7] = {-0.14156, -0.12918, -0.13022, -0.13195, -0.15634, -0.19052, -0.33624}; 
    double d6RHCh4f2[7] = {-0.09048, -0.08082, -0.07661, -0.07645, -0.08047, -0.08612, -0.09991};
    double d6LHCHq1R22[7] = {-0.01375, -0.02132, -0.02865, -0.03052, -0.03723, -0.03024, 0.08402}; 
    double d6RHCHq1R22[7] = {0.01363, 0.0161, 0.02163, 0.02358, 0.02967, 0.01375, -0.1589}; 
    double d6LHCHq3R22[7] = {-0.00938, -0.01891, -0.03284, -0.04004, -0.15147, -0.3839, -2.00432}; 
    double d6RHCHq3R22[7] = {0.01243, 0.02378, 0.02671, 0.02714, 0.02844, 0.02928, 0.03188}; 
    double d6LHCHuR22[7] = {0.00905, 0.03414, 0.04831, 0.05243, 0.09079, 0.15022, 0.50155}; 
    double d6RHCHuR22[7] = {-0.01212, -0.02946, -0.04383, -0.04964, -0.11046, -0.20081, -0.66506};
    double d6LHCuWR22[7] = {-0.00743, 0.0175, 0.03761, 0.04127, 0.05212, 0.05502, 0.06255}; 
    double d6RHCuWR22[7] = {0.00626, -0.00756, -0.01194, -0.01231, -0.00949, -0.00524, 0.00327};
    double d6LHCuBR22[7] = {-0.00247, -0.01796, -0.01902, -0.01898, -0.01769, -0.01696, -0.01713}; 
    double d6RHCuBR22[7] = {0.00291, 0.01241, 0.00533, 0.00365, -0.004, -0.00766, -0.01347}; 
    double d6LHCuHR22[7] = {0.00013, -0.0019, -0.00168, -0.00139, 0.00188, 0.00511, 0.01316}; 
    double d6RHCuHR22[7] = {0.00055, -0.0001, -0.00099, -0.0009, 0.00123, 0.00333, 0.00751}; 
    double d6LHCh2f1[7] = {-0.00009, -0.00092, -0.00237, -0.00306, -0.01351, -0.03546, -0.18968}; 
    double d6RHCh2f1[7] = {0.00069, 0.00242, 0.0052, 0.00649, 0.02488, 0.06034, 0.27257}; 
    double d6LHCh2f2[7] = {-0.00218, -0.00553, -0.01095, -0.01348, -0.05085, -0.12824, -0.66818}; 
    double d6RHCh2f2[7] = {0.00002, 0.00007, 0.00012, 0.00013, 0.00025, 0.00034, 0.00054};
    double d6LHCHl1R11[7] = {-0.00023, -0.00107, -0.00252, -0.00321, -0.01367, -0.03564, -0.18992}; 
    double d6RHCHl1R11[7] = {0.00058, 0.00231, 0.00509, 0.00638, 0.02476, 0.06022, 0.27243};
    double d6LHCH[7] = {-0.00801, -0.00111, 0.00111, 0.00152, 0.00266, 0.00285, 0.00322}; 
    double d6RHCH[7] = {-0.00626, -0.00087, 0.00085, 0.00115, 0.0019, 0.00192, 0.00185};
    double d6LHCW[7] = {0.02991, 0.05402, 0.07139, 0.07651, 0.11131, 0.14851, 0.33599}; 
    double d6RHCW[7] = {-0.00007, -0.00127, -0.00186, -0.00199, -0.00239, -0.00241, -0.00226};
    double d6LHCeuR0022[7] = {0., 0., 0., 0., 0., 0., 0.}; 
    double d6RHCeuR0022[7] = {0.00003, -0.08231, -0.27679, -0.35687, -1.32756, -3.00171, -12.4065};
    double d6LHCluR0022[7] = {-0.00003, 0.08455, 0.29183, 0.37898, 1.49534, 3.58836, 17.3504}; 
    double d6RHCluR0022[7] = {0., 0., 0., 0., 0., 0., 0.}; 
    double d6LHCqeR2200[7] = {0., 0., 0., 0., 0., 0., 0.}; 
    double d6RHCqeR2200[7] = {0.00651, 0.10815, 0.2918, 0.37025, 1.34648, 3.05393, 12.7244};
    double d6LHClq1R0022[7] = {-0.00671, -0.1111, -0.30765, -0.39318, -1.51665, -3.65078, -17.795}; 
    double d6RHClq1R0022[7] = {0., 0., 0., 0., 0., 0., 0.}; 
    double d6LHClq3R0022[7] = {-0.00484, 0.08613, 0.26288, 0.33941, 1.33495, 3.21002, 15.567}; 
    double d6RHClq3R0022[7] = {-0.00235, -0.00406, -0.0053, -0.0057, -0.00851, -0.01072, -0.01528}; 
    double d6LHClq3R1122[7] = {-0.003, -0.00518, -0.00694, -0.00753, -0.01191, -0.01592, -0.02655}; 
    double d6RHClq3R1122[7] = {-0.00235, -0.00406, -0.0053, -0.0057, -0.00851, -0.01072, -0.01528};
    double d6LHCh4f1[7] = {0.00075, 0.00173, 0.0033, 0.00404, 0.01482, 0.03709, 0.19217}; 
    double d6RHCh4f1[7] = {0., 0., 0., 0., 0., 0., 0.}; 
    double d6LHCh4f3[7] = {-0.00151, -0.001, 0.00016, 0.00075, 0.01041, 0.0316, 0.18378}; 
    double d6RHCh4f3[7] = {-0.00176, -0.00214, -0.0024, -0.00249, -0.00315, -0.0037, -0.00483}; 
    double d6LHCh4f4[7] = {-0.00037, -0.00086, -0.00164, -0.00201, -0.00737, -0.01843, -0.09552}; 
    double d6RHCh4f4[7] = {0., 0., 0., 0., 0., 0., 0.}; 
    double d6LHCh4f5[7] = {0., 0., 0., 0., 0., 0., 0.}; 
    double d6RHCh4f5[7] = {-0.00072, -0.00168, -0.00313, -0.0038, -0.01316, -0.03102, -0.13741}; 
    double d6LHCh4f6[7] = {0., 0., 0., 0., 0., 0., 0.}; 
    double d6RHCh4f6[7] = {-0.00029, -0.00067, -0.00125, -0.00152, -0.00526, -0.01241, -0.05497}; 
    double d6LHCleR0000[7] = {0.00075, 0.00173, 0.0033, 0.00404, 0.01482, 0.03709, 0.19217}; 
    double d6RHCleR0000[7] = {-0.00072, -0.00168, -0.00313, -0.0038, -0.01316, -0.03102, -0.13741}; 
    double d6LHCllR0000[7] = {0.00075, 0.00174, 0.00332, 0.00406, 0.01491, 0.0373, 0.19331}; 
    double d6RHCllR0000[7] = {0., 0., 0., 0., 0., 0., 0.};
    double d6LHCeeR0000[7] = {0., 0., 0., 0., 0., 0., 0.}; 
    double d6RHCeeR0000[7] = {-0.00203, -0.00471, -0.00877, -0.01064, -0.03684, -0.08686, -0.38476};
//    double d6LHCHBt[3] = {0.00278, 0.00803, 0.0103};
//    double d6RHCHBt[3] = {0.00551, 0.014, 0.0259};
//    double d6LHCHWt[3] = {0.0226, 0.0788, 0.112};
//    double d6RHCHWt[3] = {0.0009, 0.00081, 0.00038};
//    double d6LHCHWBt[3] = {0.00473, 0.0125, 0.0192};
//    double d6RHCHWBt[3] = {0.00478, 0.018, 0.0349};
//    double d6LHCWt[3] = {0.00608, 0.0215, 0.0334};
//    double d6RHCWt[3] = {0.00013, 0.00058, 0.00124};
    
    double d6NLOLH = 0., d6NLORH = 0.; // SMEFT absolute NLO corrections (LH and RH)
    
    // Current input of observables is in TeV -> Translate sqrt_s to GeV before operating
    double sqrt_sGeV;
    
    // Polarization factors
    double Pe = Pol_em, Pp = Pol_ep;
    double fLR, fRL;
    
    fLR = 0.25 * (1.0 - Pe) * (1.0 + Pp);
    fRL = 0.25 * (1.0 + Pe) * (1.0 - Pp);
    
    sqrt_sGeV = 1000. * sqrt_s;
    
    muRG = sqrt_sGeV;
    
    // Base implementation in W mass scheme
    s = sqrt_sGeV * sqrt_sGeV;
    s2 = s * s;
    MH2 = mHl * mHl;
    MW2 = Mw_tree * Mw_tree;
    MZ2 = Mz * Mz;
    MH4 = MH2 * MH2;
    MW4 = MW2 * MW2;
    MZ4 = MZ2 * MZ2;
    MW6 = MW4 * MW2;
    MZ6 = MZ4 * MZ2;
    MW8 = MW4 * MW4;
    MZ8 = MZ4 * MZ4;
    
    // SM cross section at LO
    xsSMLO = - GF*GF * (8.0 * MW4 * (-1.0 + Pe * Pp) - 4.0 * MW2 * MZ2 * (-3.0 + Pp + Pe * (-1.0 + 3.0 * Pp)) 
            + MZ4 * (-5.0 + 3.0 * Pp + Pe * (-3.0 + 5.0 * Pp))) * sqrt( MH4 + (MZ2 - s) * (MZ2 - s) - 2.0 * MH2 * (MZ2 + s) ) * (MH4 + MZ4 + 10.0 * MZ2 * s + s2 - 2.0 * MH2 * (MZ2 + s));
    
    xsSMLO = xsSMLO/( 48.0 * M_PI * (MZ2 - s) * (MZ2 - s) * s2 );
    
    // Independent denominators of the LO dimension-6 contrib.
    CHDden = GF * (8.0 * MW8 * MZ4 * (-1.0 + Pe * Pp) - 4.0 * MW6 * MZ6 * (-3.0 + Pp + Pe * (-1.0 + 3.0 * Pp)) + MW4 * MZ8 * (-5.0 + 3.0 * Pp + Pe * (-3.0 + 5.0 * Pp)));
        
    CHWden = CHDden * (MH4 * MZ2 + MZ6 + 10.0 * MZ4 * s + MZ2 * s2 + MH2 * (-2.0 * MZ4 - 2.0 * MZ2 * s));

    CHWBden = CHWden * MZ2 * MW2 * (MZ4 - MZ2 * s) * (MZ4 - MZ2 * s);
    
    // Independent numerators of the LO dimension-6 contrib.
    Cllnum = sqrt(2.0); 
    CHl111num = sqrt(2.0) * MW2 * MZ2 * (2.0 * MW4 * MZ2 - MW2 * MZ4) * (-1.0 + Pe) * (1.0 + Pp) * s; 
    CHe11num = 2.0 * sqrt(2.0) * MW2 * MZ2 * (MW4 * MZ2 - MW2 * MZ4) * (1.0 + Pe) * (-1.0 + Pp) * s; 
    CHl322num = -Cllnum;
    
    CHBnum = -12.0 * sqrt(2.0) * (MW4 * MZ2 - MW2 * MZ4) * (-MH2 * MZ2 + MZ4 + MZ2 * s) * (8.0 * MW8 * MZ2 * (-1.0 + Pe * Pp) 
            + MW4 * MZ4 * (-5.0 - 3.0 * Pe + 3.0 * Pp + 5.0 * Pe * Pp) * s 
            - 2.0 * MW6 * (-3.0 + Pp + Pe * (-1.0 + 3.0 * Pp)) * (MZ4 + MZ2 * s));
    
    CHWnum = 12.0 * sqrt(2.0) * MW2 * (-MH2 * MZ2 + MZ4 + MZ2 * s) * (8.0 * MW8 * MZ4 * (-1.0 + Pe * Pp) 
            - 2.0 * MW6 * MZ2 * (MZ4 * (-7.0 + Pp + Pe * (-1.0 + 7.0 * Pp)) -  MZ2 * (-1.0 + Pe) * (1.0 + Pp) * s) 
            + MW4 * (2.0 * MZ8 * (-3.0 + Pp + Pe * (-1.0 + 3.0 * Pp)) - MZ6 * (-1.0 + Pe) * (1.0 + Pp) * s)); 
    
    CHWBnum = 2.0 * sqrt(2.0) * sqrt( -((MW4 * MZ2)/( MW4 * MZ2 - MW2 * MZ4)) ) * (-MZ4 + MZ2 * s) * (-MZ4 + MZ2 * s)
            * (-((2.0 * MW8 * MZ4 - 3.0 * MW6 * MZ6 + MW4 * MZ8) * (-1.0 + Pe) * (1.0 + Pp) * (MH4 * MW2 * MZ4 + 12.0 * MW4 * MZ2 * (MZ4 + MZ2 * s) 
            + MW2 * (-5.0 * MZ8 + 4.0 * MZ6 * s + MZ4 * s2) + MH2 * MZ2 * (-12.0 * MW4 * MZ2 + MW2 * (4.0 * MZ4 - 2.0 * MZ2 * s)))) 
            - 2.0 * (-MW4 * MZ2 + MW2 * MZ4) * (-MW4 * MZ2 + MW2 * MZ4) * (1.0 + Pe) * (-1.0 + Pp) * (MH4 * MW2 * MZ4 + 12.0 * MW4 * MZ2 * (MZ4 + MZ2 * s) 
            - MW2 * (5.0 * MZ8 + 2.0 * MZ6 * s + 5.0 * MZ4 * s2) + MH2 * MZ2 * (-12.0 * MW4 * MZ2 + MW2 * (4.0 * MZ4 + 4.0 * MZ2 * s)))); 
    
    CHDnum = sqrt(2.0) * MW4 * MZ2 * (MW2 * MZ4 * (3.0 + Pe - Pp - 3.0 * Pe * Pp) + 4.0 * MW4 * MZ2 * (-1.0 + Pe * Pp)); 
    
    CHboxnum = sqrt(2.0);
    
    // Derivative of cross section wrt MW, normalized to SM
    derSMMW = 8.0 * Mw_tree * (MZ2 * (3.0 + Pe - Pp - 3.0 * Pe * Pp) + 4.0 * MW2 * (-1.0 + Pe * Pp));
    
    derSMMW = derSMMW / (8.0 * MW4 * (-1.0 + Pe * Pp) - 4.0 * MW2 * MZ2 * (-3.0 + Pp + Pe * (-1.0 + 3.0 * Pp)) + MZ4 * (-5.0 + 3.0 * Pp + Pe * (-3.0 + 5.0 * Pp)));
    
    // LO corrections to signal strength in W scheme
    dmuLO += 
                + ( CHboxnum/GF ) * getSMEFTCoeff("CHbox", muRG)
                + ( CHl111num/CHDden ) * getSMEFTCoeff("CHl1R", 0, 0, muRG)
                + ( CHe11num/CHDden ) * getSMEFTCoeff("CHeR", 0, 0, muRG)
                + ( CHl111num/CHDden + CHl322num/GF ) * getSMEFTCoeff("CHl3R", 0, 0, muRG)
                + ( CHl322num/GF ) * getSMEFTCoeff("CHl3R", 1, 1, muRG)
                + ( CHDnum/CHDden ) * getSMEFTCoeff("CHD", muRG)
                + ( CHBnum/CHWden/MW2 ) * getSMEFTCoeff("CHB", muRG)
                + ( CHWnum/CHWden ) * getSMEFTCoeff("CHW", muRG)
                + ( CHWBnum/CHWBden ) * getSMEFTCoeff("CHWB", muRG)
                + ( Cllnum/GF ) * getSMEFTCoeff("CllR", 0, 1, 1, 0, muRG);
    
    // Correction to alpha scheme: only added if the scheme is chosen
    dmuLO += cAsch * DeltaOWtoalph(derSMMW, muRG);
    
    if (FlagfiniteNLO && (sqrt_s < 3.100) ) {
        
        // Choose the right index in the different lists according to the selected energy
        int iECM;
        
        // Ordered according to the energies more commonly used
        if ( (sqrt_s > 0.220) && (sqrt_s < 0.260) ) {
            iECM = 0;
        } else if ( (sqrt_s > 0.340) && (sqrt_s < 0.390) ) {
            iECM = 1;  
        } else if ( (sqrt_s > 0.510) && (sqrt_s < 0.600) ) {
            iECM = 3;
        } else if ( (sqrt_s > 0.900) && (sqrt_s < 1.200) ) {
            iECM = 4;
        } else if ( (sqrt_s > 1.200) && (sqrt_s < 1.600) ) {
            iECM = 5;
        } else if ( (sqrt_s > 2.500) && (sqrt_s < 3.100) ) {
            iECM = 6;
        } else if ( (sqrt_s > 0.450) && (sqrt_s < 0.510) ) {
            iECM = 2;
        } else 
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZH(): NLO corrections not available for this energy");            
        
        
        // Include NLO corrections
        
        // SM Cross section including only EW corrections [fb]
        xsSMNLOW = tofb * xsSMLO 
                + fLR * dSMWLH[iECM] 
                + fRL * dSMWRH[iECM];
        xsSMNLO = xsSMNLOW
                + fLR * dSMQEDLH[iECM] 
                + fRL * dSMQEDRH[iECM];
        
        // Combination of dimension-6 coefficients
        Ch2f1 = getSMEFTCoeff("CHeR",1, 1, muRG) + getSMEFTCoeff("CHeR",2, 2, muRG) 
                + getSMEFTCoeff("CHdR",0, 0, muRG) + getSMEFTCoeff("CHdR",1, 1, muRG) + getSMEFTCoeff("CHdR",2, 2, muRG) 
                - 2.0 * getSMEFTCoeff("CHuR",0, 0, muRG) - 2.0 * getSMEFTCoeff("CHuR",1, 1, muRG) 
                - getSMEFTCoeff("CHq1R",0, 0, muRG) - getSMEFTCoeff("CHq1R",1, 1, muRG) + getSMEFTCoeff("CHl1R",2, 2, muRG);
        
        Ch2f2 = getSMEFTCoeff("CHl3R",2, 2, muRG) 
                + 3.0 * getSMEFTCoeff("CHq3R",0, 0, muRG) + 3.0 * getSMEFTCoeff("CHq3R",1, 1, muRG);
        
        Ch4f1 = getSMEFTCoeff("CldR",0, 0, 0, 0, muRG) + getSMEFTCoeff("CldR",0, 0, 1, 1, muRG) + getSMEFTCoeff("CldR",0, 0, 2, 2, muRG) 
                - 2.0*(getSMEFTCoeff("CluR",0, 0, 0, 0, muRG) + getSMEFTCoeff("CluR",0, 0, 1, 1, muRG)) 
                - getSMEFTCoeff("Clq1R",0, 0, 0, 0, muRG) - getSMEFTCoeff("Clq1R",0, 0, 1, 1, muRG) 
                + getSMEFTCoeff("CllR",0, 0, 2, 2, muRG) + getSMEFTCoeff("CllR",2, 2, 0, 0, muRG) 
                + getSMEFTCoeff("CleR",0, 0, 1, 1, muRG) + getSMEFTCoeff("CleR",0, 0, 2, 2, muRG) 
                - (3.0 * MW2)/(MZ2 - MW2)*(getSMEFTCoeff("Clq3R",0, 0, 0, 0, muRG) + getSMEFTCoeff("Clq3R",0, 0, 1, 1, muRG));
        
        Ch4f2 = getSMEFTCoeff("CllR",0, 1, 1, 0, muRG) + getSMEFTCoeff("CllR",1, 0, 0, 1, muRG);
        Ch4f3 = getSMEFTCoeff("CllR",0, 0, 1, 1, muRG) + getSMEFTCoeff("CllR",1, 1, 0, 0, muRG);
        Ch4f4 = getSMEFTCoeff("CllR",0, 2, 2, 0, muRG) + getSMEFTCoeff("CllR",2, 0, 0, 2, muRG);
        Ch4f5 = getSMEFTCoeff("CeeR",0, 0, 1, 1, muRG) + getSMEFTCoeff("CeeR",0, 0, 2, 2, muRG) + getSMEFTCoeff("CeeR",1, 1, 0, 0, muRG) + getSMEFTCoeff("CeeR",2, 2, 0, 0, muRG) 
                - getSMEFTCoeff("CqeR",0, 0, 0, 0, muRG) - getSMEFTCoeff("CqeR",1, 1, 0, 0, muRG) 
                - 2.0 * (getSMEFTCoeff("CeuR",0, 0, 0, 0, muRG) + getSMEFTCoeff("CeuR",0, 0, 1, 1, muRG) ) 
                + getSMEFTCoeff("CedR",0, 0, 0, 0, muRG) + getSMEFTCoeff("CedR",0, 0, 1, 1, muRG) + getSMEFTCoeff("CedR",0, 0, 2, 2, muRG) 
                + getSMEFTCoeff("CleR",1, 1, 0, 0, muRG) + getSMEFTCoeff("CleR",2, 2, 0, 0, muRG);
        Ch4f6 = getSMEFTCoeff("CeeR",0, 1, 1, 0, muRG) + getSMEFTCoeff("CeeR",1, 0, 0, 1, muRG) + getSMEFTCoeff("CeeR",0, 2, 2, 0, muRG) + getSMEFTCoeff("CeeR",2, 0, 0, 2, muRG);

        // Corrections for LH initial electrons
        d6NLOLH = d6LHCHD[iECM] * getSMEFTCoeff("CHD", muRG)
                + d6LHCHbox[iECM] * getSMEFTCoeff("CHbox", muRG)
                + d6LHCHW[iECM] * getSMEFTCoeff("CHW", muRG)
                + d6LHCHB[iECM] * getSMEFTCoeff("CHB", muRG)
                + d6LHCHWB[iECM] * getSMEFTCoeff("CHWB", muRG)
                + d6LHCHeR00[iECM] * getSMEFTCoeff("CHeR", 0, 0, muRG)
                + d6LHCHl1R00[iECM] * getSMEFTCoeff("CHl1R", 0, 0, muRG)
                + d6LHCHl3R00[iECM] * getSMEFTCoeff("CHl3R", 0, 0, muRG)
                + d6LHCHl3R11[iECM] * getSMEFTCoeff("CHl3R", 1, 1, muRG)
                + d6LHCh4f2[iECM] * Ch4f2                                
                + d6LHCHq1R22[iECM] * getSMEFTCoeff("CHq1R", 2, 2, muRG)
                + d6LHCHq3R22[iECM] * getSMEFTCoeff("CHq3R", 2, 2, muRG)
                + d6LHCHuR22[iECM] * getSMEFTCoeff("CHuR", 2, 2, muRG)
                + d6LHCuWR22[iECM] * getSMEFTCoeff("CuWR", 2, 2, muRG)
                + d6LHCuBR22[iECM] * getSMEFTCoeff("CuBR", 2, 2, muRG)
                + d6LHCuHR22[iECM] * getSMEFTCoeff("CuHR", 2, 2, muRG)
                + d6LHCh2f1[iECM] * Ch2f1
                + d6LHCh2f2[iECM] * Ch2f2                
                + d6LHCHl1R11[iECM] * getSMEFTCoeff("CHl1R", 1, 1, muRG)
                + d6LHCH[iECM] * getSMEFTCoeff("CH", muRG)
                + d6LHCW[iECM] * getSMEFTCoeff("CW", muRG)                
                + d6LHCeuR0022[iECM] * getSMEFTCoeff("CeuR",0, 0, 2, 2, muRG)
                + d6LHCluR0022[iECM] * getSMEFTCoeff("CluR",0, 0, 2, 2, muRG)
                + d6LHCqeR2200[iECM] * getSMEFTCoeff("CqeR",2, 2, 0, 0, muRG)
                + d6LHClq1R0022[iECM] * getSMEFTCoeff("Clq1R",0, 0, 2, 2, muRG)
                + d6LHClq3R0022[iECM] * getSMEFTCoeff("Clq3R",0, 0, 2, 2, muRG)
                + d6LHClq3R1122[iECM] * getSMEFTCoeff("Clq3R",1, 1, 2, 2, muRG)
                + d6LHCh4f1[iECM] * Ch4f1
                + d6LHCh4f3[iECM] * Ch4f3
                + d6LHCh4f4[iECM] * Ch4f4
                + d6LHCh4f5[iECM] * Ch4f5
                + d6LHCh4f6[iECM] * Ch4f6            
                + d6LHCleR0000[iECM] * getSMEFTCoeff("CleR",0, 0, 0, 0, muRG)
                + d6LHCllR0000[iECM] * getSMEFTCoeff("CllR",0, 0, 0, 0, muRG)
                + d6LHCeeR0000[iECM] * getSMEFTCoeff("CeeR",0, 0, 0, 0, muRG)                
                //+ d6LHCHBt[iECM] * getSMEFTCoeff("CHBtilde", muRG)
                //+ d6LHCHWt[iECM] * getSMEFTCoeff("CHWtilde", muRG)
                //+ d6LHCHWBt[iECM] * getSMEFTCoeff("CHWtildeB", muRG)
                //+ d6LHCWt[iECM] * getSMEFTCoeff("CWtilde", muRG)
                ;
                  
        // Corrections for RH initial electrons
        d6NLORH = d6RHCHD[iECM] * getSMEFTCoeff("CHD", muRG)
                + d6RHCHbox[iECM] * getSMEFTCoeff("CHbox", muRG)
                + d6RHCHW[iECM] * getSMEFTCoeff("CHW", muRG)
                + d6RHCHB[iECM] * getSMEFTCoeff("CHB", muRG)
                + d6RHCHWB[iECM] * getSMEFTCoeff("CHWB", muRG)
                + d6RHCHeR00[iECM] * getSMEFTCoeff("CHeR", 0, 0, muRG)
                + d6RHCHl1R00[iECM] * getSMEFTCoeff("CHl1R", 0, 0, muRG)
                + d6RHCHl3R00[iECM] * getSMEFTCoeff("CHl3R", 0, 0, muRG)
                + d6RHCHl3R11[iECM] * getSMEFTCoeff("CHl3R", 1, 1, muRG)
                + d6RHCh4f2[iECM] * Ch4f2                                
                + d6RHCHq1R22[iECM] * getSMEFTCoeff("CHq1R", 2, 2, muRG)
                + d6RHCHq3R22[iECM] * getSMEFTCoeff("CHq3R", 2, 2, muRG)
                + d6RHCHuR22[iECM] * getSMEFTCoeff("CHuR", 2, 2, muRG)
                + d6RHCuWR22[iECM] * getSMEFTCoeff("CuWR", 2, 2, muRG)
                + d6RHCuBR22[iECM] * getSMEFTCoeff("CuBR", 2, 2, muRG)
                + d6RHCuHR22[iECM] * getSMEFTCoeff("CuHR", 2, 2, muRG)
                + d6RHCh2f1[iECM] * Ch2f1
                + d6RHCh2f2[iECM] * Ch2f2                
                + d6RHCHl1R11[iECM] * getSMEFTCoeff("CHl1R", 1, 1, muRG)
                + d6RHCH[iECM] * getSMEFTCoeff("CH", muRG)
                + d6RHCW[iECM] * getSMEFTCoeff("CW", muRG)                
                + d6RHCeuR0022[iECM] * getSMEFTCoeff("CeuR",0, 0, 2, 2, muRG)
                + d6RHCluR0022[iECM] * getSMEFTCoeff("CluR",0, 0, 2, 2, muRG)
                + d6RHCqeR2200[iECM] * getSMEFTCoeff("CqeR",2, 2, 0, 0, muRG)
                + d6RHClq1R0022[iECM] * getSMEFTCoeff("Clq1R",0, 0, 2, 2, muRG)
                + d6RHClq3R0022[iECM] * getSMEFTCoeff("Clq3R",0, 0, 2, 2, muRG)
                + d6RHClq3R1122[iECM] * getSMEFTCoeff("Clq3R",1, 1, 2, 2, muRG)
                + d6RHCh4f1[iECM] * Ch4f1
                + d6RHCh4f3[iECM] * Ch4f3
                + d6RHCh4f4[iECM] * Ch4f4
                + d6RHCh4f5[iECM] * Ch4f5
                + d6RHCh4f6[iECM] * Ch4f6            
                + d6RHCleR0000[iECM] * getSMEFTCoeff("CleR",0, 0, 0, 0, muRG)
                + d6RHCllR0000[iECM] * getSMEFTCoeff("CllR",0, 0, 0, 0, muRG)
                + d6RHCeeR0000[iECM] * getSMEFTCoeff("CeeR",0, 0, 0, 0, muRG)                
                //+ d6RHCHBt[iECM] * getSMEFTCoeff("CHBtilde", muRG)
                //+ d6RHCHWt[iECM] * getSMEFTCoeff("CHWtilde", muRG)
                //+ d6RHCHWBt[iECM] * getSMEFTCoeff("CHWtildeB", muRG)
                //+ d6RHCWt[iECM] * getSMEFTCoeff("CWtilde", muRG)
                ;       
        
        // Correction to polarized cross section: Need to multiply by (Lambda=1000 GeV)^2
        dmuNLO += ( fLR * xsSMweakLH[iECM] * d6NLOLH  
                + fRL * xsSMweakRH[iECM] * d6NLORH ) * 1000000;
        // Normalize to SM full NLO cross section
        dmuNLO = dmuNLO /(fLR * xsSMNLOLH[iECM] + fRL * xsSMNLORH[iECM]);
        
        // Rescale the LO contribution and normalizer the NLO to the SM cross section
        dmuLO = dmuLO * (tofb * xsSMLO/xsSMNLO);
        
    }
    
    // Coefficient for Higgs self-coupling corrections (disabled for the moment as these are already included in NLO above)
    //if (sqrt_s == 240.) {

    //    C1 = 0.0173302;
        
    //} else if (sqrt_s == 250.) {

    //    C1 = 0.015;

    //} else if (sqrt_s == 350.) {

    //    C1 = 0.0057;

    //} else if (sqrt_s == 365.) {

    //    C1 = 0.00493549; 

    //} else if (sqrt_s == 380.) {

    //    C1 = 0.0057; // Use same as 350 GeV

    //} else if (sqrt_s == 500.) {

    //    C1 = 0.00099;

    //} else if (sqrt_s == 1000.) {

    //    C1 = -0.0012;

    //} else if (sqrt_s == 1400.) {

    //    C1 = -0.0011;

    //} else if (sqrt_s == 1500.) {

    //    C1 = -0.0011; // Use the same as 1400 GeV

    //} else if (sqrt_s == 3000.) {

    //    C1 = -0.00054;

    //} else
    //    throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZH()");

    // Add the LO and NLO corrections
    mu += dmuLO + dmuNLO;

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eeeZHint + eeeZHpar;

    //  Linear contribution from Higgs self-coupling
    // mu += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio(); // Linear corrections already included


    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}


const double NPSMEFTd6General::mueeZHGen(const double sqrt_s, const double Pol_em, const double Pol_ep) const {

    // Only Alpha scheme

    double mu = 1.0;

    double C1 = 0.0;
    
    double muRG = 0;
    
    // RG scale in GeV
    muRG = 1000. * sqrt_s;
    
    if ( (Pol_em != 0.) || (Pol_ep != 0) ) return mueeZHPol(sqrt_s, Pol_em, Pol_ep);

    if (sqrt_s == 0.240) {

        C1 = 0.0173302;

        mu +=
                +121263. * getSMEFTCoeffEW("CHbox")
                + 898682. * getSMEFTCoeffEW("CHl1R", 0, 0)
                - 767820. * getSMEFTCoeffEW("CHeR", 0, 0)
                + 898682. * getSMEFTCoeffEW("CHl3R", 0, 0)
                - 6046.36 * getSMEFTCoeffEW("CHD")
                + 122439. * getSMEFTCoeffEW("CHB")
                + 540057. * getSMEFTCoeffEW("CHW")
                + 231063. * getSMEFTCoeffEW("CHWB")
                - 2.2 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 4.775 * deltaMz()
                - 3.071 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.250) {

        C1 = 0.015;

        mu +=
                +121263. * getSMEFTCoeffEW("CHbox")
                + 975101. * getSMEFTCoeffEW("CHl1R", 0, 0)
                - 833750. * getSMEFTCoeffEW("CHeR", 0, 0)
                + 975101. * getSMEFTCoeffEW("CHl3R", 0, 0)
                - 6046.36 * getSMEFTCoeffEW("CHD")
                + 128443. * getSMEFTCoeffEW("CHB")
                + 568273. * getSMEFTCoeffEW("CHW")
                + 244206. * getSMEFTCoeffEW("CHWB")
                - 2.2 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 5.219 * deltaMz()
                - 2.27 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.350) {

        C1 = 0.0057;

        mu +=
                +121283. * getSMEFTCoeffEW("CHbox")
                + 1911340. * getSMEFTCoeffEW("CHl1R", 0, 0)
                - 1640958. * getSMEFTCoeffEW("CHeR", 0, 0)
                + 1911340. * getSMEFTCoeffEW("CHl3R", 0, 0)
                - 6009.52 * getSMEFTCoeffEW("CHD")
                + 173183. * getSMEFTCoeffEW("CHB")
                + 785843. * getSMEFTCoeffEW("CHW")
                + 344494. * getSMEFTCoeffEW("CHWB")
                - 2.201 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 5.396 * deltaMz()
                - 0.729 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.365) {

        C1 = 0.00493549;

        mu +=
                +121243. * getSMEFTCoeffEW("CHbox")
                + 2078482. * getSMEFTCoeffEW("CHl1R", 0, 0)
                - 1785085. * getSMEFTCoeffEW("CHeR", 0, 0)
                + 2078482. * getSMEFTCoeffEW("CHl3R", 0, 0)
                - 6010.65 * getSMEFTCoeffEW("CHD")
                + 178173. * getSMEFTCoeffEW("CHB")
                + 809806. * getSMEFTCoeffEW("CHW")
                + 355487. * getSMEFTCoeffEW("CHWB")
                - 2.201 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 5.348 * deltaMz()
                - 0.664 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.380) {

        C1 = 0.0057; // Use same as 350 GeV

        mu +=
                +121281. * getSMEFTCoeffEW("CHbox")
                + 2253013. * getSMEFTCoeffEW("CHl1R", 0, 0)
                - 1934557. * getSMEFTCoeffEW("CHeR", 0, 0)
                + 2253013. * getSMEFTCoeffEW("CHl3R", 0, 0)
                - 6026.37 * getSMEFTCoeffEW("CHD")
                + 182674. * getSMEFTCoeffEW("CHB")
                + 832109. * getSMEFTCoeffEW("CHW")
                + 365819. * getSMEFTCoeffEW("CHWB")
                - 2.202 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 5.301 * deltaMz()
                - 0.609 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.500) {

        C1 = 0.00099;

        mu +=
                +121264. * getSMEFTCoeffEW("CHbox")
                + 3900384. * getSMEFTCoeffEW("CHl1R", 0, 0)
                - 3350136. * getSMEFTCoeffEW("CHeR", 0, 0)
                + 3900384. * getSMEFTCoeffEW("CHl3R", 0, 0)
                - 6019.22 * getSMEFTCoeffEW("CHD")
                + 209229. * getSMEFTCoeffEW("CHB")
                + 959942. * getSMEFTCoeffEW("CHW")
                + 425112. * getSMEFTCoeffEW("CHWB")
                - 2.202 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 5. * deltaMz()
                - 0.351 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 1.0) {

        C1 = -0.0012;

        mu +=
                +121274. * getSMEFTCoeffEW("CHbox")
                + 15601820. * getSMEFTCoeffEW("CHl1R", 0, 0)
                - 13395670. * getSMEFTCoeffEW("CHeR", 0, 0)
                + 15601820. * getSMEFTCoeffEW("CHl3R", 0, 0)
                - 6040.16 * getSMEFTCoeffEW("CHD")
                + 243960. * getSMEFTCoeffEW("CHB")
                + 1128805. * getSMEFTCoeffEW("CHW")
                + 503138. * getSMEFTCoeffEW("CHWB")
                - 2.202 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 4.574 * deltaMz()
                - 0.092 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 1.4) {

        C1 = -0.0011;

        mu +=
                +121283. * getSMEFTCoeffEW("CHbox")
                + 30579278. * getSMEFTCoeffEW("CHl1R", 0, 0)
                - 26253064. * getSMEFTCoeffEW("CHeR", 0, 0)
                + 30579278. * getSMEFTCoeffEW("CHl3R", 0, 0)
                - 6010.77 * getSMEFTCoeffEW("CHD")
                + 250804. * getSMEFTCoeffEW("CHB")
                + 1161208. * getSMEFTCoeffEW("CHW")
                + 518040. * getSMEFTCoeffEW("CHWB")
                - 2.203 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 4.491 * deltaMz()
                - 0.047 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 1.5) {

        C1 = -0.0011; // Use the same as 1400 GeV

        mu +=
                +121262. * getSMEFTCoeffEW("CHbox")
                + 35102329. * getSMEFTCoeffEW("CHl1R", 0, 0)
                - 30135878. * getSMEFTCoeffEW("CHeR", 0, 0)
                + 35102329. * getSMEFTCoeffEW("CHl3R", 0, 0)
                - 6034.22 * getSMEFTCoeffEW("CHD")
                + 251576. * getSMEFTCoeffEW("CHB")
                + 1165634. * getSMEFTCoeffEW("CHW")
                + 519954. * getSMEFTCoeffEW("CHWB")
                - 2.203 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 4.479 * deltaMz()
                - 0.041 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 3.0) {

        C1 = -0.00054;

        mu +=
                +121279. * getSMEFTCoeffEW("CHbox")
                + 140413697. * getSMEFTCoeffEW("CHl1R", 0, 0)
                - 120540988. * getSMEFTCoeffEW("CHeR", 0, 0)
                + 140413697. * getSMEFTCoeffEW("CHl3R", 0, 0)
                - 6012.61 * getSMEFTCoeffEW("CHD")
                + 257222. * getSMEFTCoeffEW("CHB")
                + 1188444. * getSMEFTCoeffEW("CHW")
                + 530503. * getSMEFTCoeffEW("CHWB")
                - 2.202 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 4.42 * deltaMz()
                - 0.01 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZH()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eeeZHint + eeeZHpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::mueeZllH(const double sqrt_s, const double Pol_em, const double Pol_ep) const {
    
    if ( (Pol_em != 0.) || (Pol_ep != 0) ) return mueeZllHPol(sqrt_s, Pol_em, Pol_ep);

    //  The signal strength eeZH
    double mu = mueeZH(sqrt_s, 0., 0.);

    //  The (relative) linear correction to the Z>ll BR
    double deltaBRratio;

    deltaBRratio = deltaGamma_Zf(leptons[ELECTRON])
            + deltaGamma_Zf(leptons[MU]);

    deltaBRratio = deltaBRratio /
            (trueSM.GammaZ(leptons[ELECTRON]) + trueSM.GammaZ(leptons[MU]));

    deltaBRratio = deltaBRratio - deltaGamma_Z() / trueSM.Gamma_Z();

    return mu + deltaBRratio;
}

const double NPSMEFTd6General::mueeZqqH(const double sqrt_s, const double Pol_em, const double Pol_ep) const {
    
    if ( (Pol_em != 0.) || (Pol_ep != 0) ) return mueeZqqHPol(sqrt_s, Pol_em, Pol_ep);

    //  The signal strength eeZH
    double mu = mueeZH(sqrt_s, 0., 0.);

    //  The (relative) linear correction to the Z>qq BR
    double deltaBRratio;

    deltaBRratio = deltaGamma_Zf(quarks[UP])
            + deltaGamma_Zf(quarks[DOWN])
            + deltaGamma_Zf(quarks[CHARM])
            + deltaGamma_Zf(quarks[STRANGE])
            + deltaGamma_Zf(quarks[BOTTOM]);

    deltaBRratio = deltaBRratio /
            (trueSM.GammaZ(quarks[UP]) + trueSM.GammaZ(quarks[DOWN])
            + trueSM.GammaZ(quarks[CHARM]) + trueSM.GammaZ(quarks[STRANGE])
            + trueSM.GammaZ(quarks[BOTTOM]));

    deltaBRratio = deltaBRratio - deltaGamma_Z() / trueSM.Gamma_Z();

    return mu + deltaBRratio;
}

const double NPSMEFTd6General::mueeZHPol(const double sqrt_s, const double Pol_em, const double Pol_ep) const {

    // Only Alpha scheme

    double mu = 1.0;

    double C1 = 0.0;
    
    double muRG = 0;
    
    // RG scale in GeV
    muRG = 1000. * sqrt_s;

    if (sqrt_s == 0.240) {

        C1 = 0.0173302;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121260. * getSMEFTCoeffEW("CHbox")
                    + 117191. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 1681596. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 117191. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 74555.1 * getSMEFTCoeffEW("CHD")
                    + 528105. * getSMEFTCoeffEW("CHB")
                    + 134403. * getSMEFTCoeffEW("CHW")
                    + 872560. * getSMEFTCoeffEW("CHWB")
                    + 0.459 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    - 0.544 * deltaMz()
                    - 3.071 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121254. * getSMEFTCoeffEW("CHbox")
                    + 1495015. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 76567.2 * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 1495015. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 67582.1 * getSMEFTCoeffEW("CHD")
                    - 187104. * getSMEFTCoeffEW("CHB")
                    + 849552. * getSMEFTCoeffEW("CHW")
                    - 258537. * getSMEFTCoeffEW("CHWB")
                    - 4.23 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 8.834 * deltaMz()
                    - 3.071 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121256. * getSMEFTCoeffEW("CHbox")
                    + 204529. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 1578998. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 204529. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 65548.7 * getSMEFTCoeffEW("CHD")
                    + 482729. * getSMEFTCoeffEW("CHB")
                    + 179733. * getSMEFTCoeffEW("CHW")
                    + 800870. * getSMEFTCoeffEW("CHWB")
                    + 0.162 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    + 0.05 * deltaMz()
                    - 3.071 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121264. * getSMEFTCoeffEW("CHbox")
                    + 1442776. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 137405. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 1442776. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 62167.6 * getSMEFTCoeffEW("CHD")
                    - 159988. * getSMEFTCoeffEW("CHB")
                    + 822448. * getSMEFTCoeffEW("CHW")
                    - 215639. * getSMEFTCoeffEW("CHWB")
                    - 4.052 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 8.479 * deltaMz()
                    - 3.071 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else if (sqrt_s == 0.250) {

        C1 = 0.015;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121264. * getSMEFTCoeffEW("CHbox")
                    + 127210. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 1824910. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 127210. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 74597.1 * getSMEFTCoeffEW("CHD")
                    + 560319. * getSMEFTCoeffEW("CHB")
                    + 136129. * getSMEFTCoeffEW("CHW")
                    + 902676. * getSMEFTCoeffEW("CHWB")
                    + 0.459 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    - 0.1 * deltaMz()
                    - 2.27 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121257. * getSMEFTCoeffEW("CHbox")
                    + 1622228. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 83107. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 1622228. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 67554.3 * getSMEFTCoeffEW("CHD")
                    - 201409. * getSMEFTCoeffEW("CHB")
                    + 898116. * getSMEFTCoeffEW("CHW")
                    - 258306. * getSMEFTCoeffEW("CHWB")
                    - 4.23 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 9.279 * deltaMz()
                    - 2.27 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121309. * getSMEFTCoeffEW("CHbox")
                    + 221930. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 1714047. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 221930. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 65599.6 * getSMEFTCoeffEW("CHD")
                    + 512136. * getSMEFTCoeffEW("CHB")
                    + 184424. * getSMEFTCoeffEW("CHW")
                    + 829145. * getSMEFTCoeffEW("CHWB")
                    + 0.162 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    + 0.494 * deltaMz()
                    - 2.27 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121269. * getSMEFTCoeffEW("CHbox")
                    + 1565559. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 148908. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 1565559. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 62170. * getSMEFTCoeffEW("CHD")
                    - 172540. * getSMEFTCoeffEW("CHB")
                    + 869218. * getSMEFTCoeffEW("CHW")
                    - 214299. * getSMEFTCoeffEW("CHWB")
                    - 4.053 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 8.923 * deltaMz()
                    - 2.27 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else if (sqrt_s == 0.350) {

        C1 = 0.0057;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121274. * getSMEFTCoeffEW("CHbox")
                    + 249309. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 3576996. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 249309. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 74596.5 * getSMEFTCoeffEW("CHD")
                    + 812491. * getSMEFTCoeffEW("CHB")
                    + 146212. * getSMEFTCoeffEW("CHW")
                    + 1135161. * getSMEFTCoeffEW("CHWB")
                    + 0.458 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    + 0.077 * deltaMz()
                    - 0.729 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121289. * getSMEFTCoeffEW("CHbox")
                    + 3179548. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 163347. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 3179548. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 67524.8 * getSMEFTCoeffEW("CHD")
                    - 314653. * getSMEFTCoeffEW("CHB")
                    + 1273817. * getSMEFTCoeffEW("CHW")
                    - 258947. * getSMEFTCoeffEW("CHWB")
                    - 4.231 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 9.456 * deltaMz()
                    - 0.729 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121304. * getSMEFTCoeffEW("CHbox")
                    + 434952. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 3360980. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 434952. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 65624.7 * getSMEFTCoeffEW("CHD")
                    + 741142. * getSMEFTCoeffEW("CHB")
                    + 217654. * getSMEFTCoeffEW("CHW")
                    + 1046799. * getSMEFTCoeffEW("CHWB")
                    + 0.161 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    + 0.671 * deltaMz()
                    - 0.729 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121259. * getSMEFTCoeffEW("CHbox")
                    + 3068356. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 292427. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 3068356. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 62160.7 * getSMEFTCoeffEW("CHD")
                    - 271962. * getSMEFTCoeffEW("CHB")
                    + 1231171. * getSMEFTCoeffEW("CHW")
                    - 206112. * getSMEFTCoeffEW("CHWB")
                    - 4.053 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 9.1 * deltaMz()
                    - 0.729 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else if (sqrt_s == 0.365) {

        C1 = 0.00493549;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121270. * getSMEFTCoeffEW("CHbox")
                    + 271098. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 3890169. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 271098. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 74554. * getSMEFTCoeffEW("CHD")
                    + 840573. * getSMEFTCoeffEW("CHB")
                    + 147108. * getSMEFTCoeffEW("CHW")
                    + 1160947. * getSMEFTCoeffEW("CHWB")
                    + 0.459 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    + 0.029 * deltaMz()
                    - 0.664 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121238. * getSMEFTCoeffEW("CHbox")
                    + 3457848. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 177584. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 3457848. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 67578.3 * getSMEFTCoeffEW("CHD")
                    - 327391. * getSMEFTCoeffEW("CHB")
                    + 1315671. * getSMEFTCoeffEW("CHW")
                    - 259142. * getSMEFTCoeffEW("CHWB")
                    - 4.231 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 9.408 * deltaMz()
                    - 0.664 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121251. * getSMEFTCoeffEW("CHbox")
                    + 472985. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 3655203. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 472985. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 65559.4 * getSMEFTCoeffEW("CHD")
                    + 766585. * getSMEFTCoeffEW("CHB")
                    + 221202. * getSMEFTCoeffEW("CHW")
                    + 1070933. * getSMEFTCoeffEW("CHWB")
                    + 0.161 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    + 0.623 * deltaMz()
                    - 0.664 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121238. * getSMEFTCoeffEW("CHbox")
                    + 3336984. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 317944. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 3336984. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 62188.9 * getSMEFTCoeffEW("CHD")
                    - 283174. * getSMEFTCoeffEW("CHB")
                    + 1271272. * getSMEFTCoeffEW("CHW")
                    - 205330. * getSMEFTCoeffEW("CHWB")
                    - 4.053 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 9.052 * deltaMz()
                    - 0.664 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else if (sqrt_s == 0.380) {

        C1 = 0.0057; // Use same as 350 GeV

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121228. * getSMEFTCoeffEW("CHbox")
                    + 293860. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 4216491. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 293860. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 74561.4 * getSMEFTCoeffEW("CHD")
                    + 866754. * getSMEFTCoeffEW("CHB")
                    + 147982. * getSMEFTCoeffEW("CHW")
                    + 1184912. * getSMEFTCoeffEW("CHWB")
                    + 0.459 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    - 0.018 * deltaMz()
                    - 0.609 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121226. * getSMEFTCoeffEW("CHbox")
                    + 3747707. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 192650. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 3747707. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 67608.3 * getSMEFTCoeffEW("CHD")
                    - 339193. * getSMEFTCoeffEW("CHB")
                    + 1354040. * getSMEFTCoeffEW("CHW")
                    - 259321. * getSMEFTCoeffEW("CHWB")
                    - 4.23 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 9.361 * deltaMz()
                    - 0.609 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121325. * getSMEFTCoeffEW("CHbox")
                    + 512707. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 3961665. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 512707. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 65601.7 * getSMEFTCoeffEW("CHD")
                    + 790306. * getSMEFTCoeffEW("CHB")
                    + 224394. * getSMEFTCoeffEW("CHW")
                    + 1093297. * getSMEFTCoeffEW("CHWB")
                    + 0.161 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    + 0.576 * deltaMz()
                    - 0.609 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121273. * getSMEFTCoeffEW("CHbox")
                    + 3617032. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 344629. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 3617032. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 62148.3 * getSMEFTCoeffEW("CHD")
                    - 293491. * getSMEFTCoeffEW("CHB")
                    + 1308558. * getSMEFTCoeffEW("CHW")
                    - 204594. * getSMEFTCoeffEW("CHWB")
                    - 4.053 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 9.005 * deltaMz()
                    - 0.609 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else if (sqrt_s == 0.500) {

        C1 = 0.00099;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121268. * getSMEFTCoeffEW("CHbox")
                    + 508715. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 7299333. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 508715. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 74603.6 * getSMEFTCoeffEW("CHD")
                    + 1018069. * getSMEFTCoeffEW("CHB")
                    + 151257. * getSMEFTCoeffEW("CHW")
                    + 1323862. * getSMEFTCoeffEW("CHWB")
                    + 0.458 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    - 0.319 * deltaMz()
                    - 0.351 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121273. * getSMEFTCoeffEW("CHbox")
                    + 6488707. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 332950. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 6488707. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 67530.9 * getSMEFTCoeffEW("CHD")
                    - 408101. * getSMEFTCoeffEW("CHB")
                    + 1576859. * getSMEFTCoeffEW("CHW")
                    - 260777. * getSMEFTCoeffEW("CHWB")
                    - 4.231 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 9.06 * deltaMz()
                    - 0.351 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121280. * getSMEFTCoeffEW("CHbox")
                    + 887632. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 6858533. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 887632. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 65606.6 * getSMEFTCoeffEW("CHD")
                    + 927745. * getSMEFTCoeffEW("CHB")
                    + 241619. * getSMEFTCoeffEW("CHW")
                    + 1223535. * getSMEFTCoeffEW("CHWB")
                    + 0.161 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    + 0.275 * deltaMz()
                    - 0.351 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121268. * getSMEFTCoeffEW("CHbox")
                    + 6262095. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 597046. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 6262095. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 62148.8 * getSMEFTCoeffEW("CHD")
                    - 353914. * getSMEFTCoeffEW("CHB")
                    + 1522841. * getSMEFTCoeffEW("CHW")
                    - 200684. * getSMEFTCoeffEW("CHWB")
                    - 4.054 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 8.704 * deltaMz()
                    - 0.351 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else if (sqrt_s == 1.0) {

        C1 = -0.0012;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121236. * getSMEFTCoeffEW("CHbox")
                    + 2034785. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 29195703. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 2034785. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 74612.7 * getSMEFTCoeffEW("CHD")
                    + 1218284. * getSMEFTCoeffEW("CHB")
                    + 154779. * getSMEFTCoeffEW("CHW")
                    + 1507673. * getSMEFTCoeffEW("CHWB")
                    + 0.458 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    - 0.745 * deltaMz()
                    - 0.092 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121298. * getSMEFTCoeffEW("CHbox")
                    + 25954994. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 1333713. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 25954994. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 67536.7 * getSMEFTCoeffEW("CHD")
                    - 499699. * getSMEFTCoeffEW("CHB")
                    + 1872177. * getSMEFTCoeffEW("CHW")
                    - 263454. * getSMEFTCoeffEW("CHWB")
                    - 4.233 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 8.633 * deltaMz()
                    - 0.092 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == -20.) {
            mu +=
                    +121257. * getSMEFTCoeffEW("CHbox")
                    + 2475072. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 28682974. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 2475072. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 72023. * getSMEFTCoeffEW("CHD")
                    + 1186280. * getSMEFTCoeffEW("CHB")
                    + 186435. * getSMEFTCoeffEW("CHW")
                    + 1475072. * getSMEFTCoeffEW("CHWB")
                    + 0.371 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-0.572 * deltaMz()
                    - 0.091 * deltaMh()
                    + 2.375 * deltaaMZ()
                    - 0.377 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 20.) {
            mu +=
                    +121306. * getSMEFTCoeffEW("CHbox")
                    + 25696973. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 1634825. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 25696973. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 65976.8 * getSMEFTCoeffEW("CHD")
                    - 480973. * getSMEFTCoeffEW("CHB")
                    + 1853631. * getSMEFTCoeffEW("CHW")
                    - 244288. * getSMEFTCoeffEW("CHWB")
                    - 4.182 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+8.536 * deltaMz()
                    - 0.09 * deltaMh()
                    - 2.178 * deltaaMZ()
                    + 4.178 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121307. * getSMEFTCoeffEW("CHbox")
                    + 3550656. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 27432206. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 3550656. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 65607.4 * getSMEFTCoeffEW("CHD")
                    + 1109435. * getSMEFTCoeffEW("CHB")
                    + 263679. * getSMEFTCoeffEW("CHW")
                    + 1395519. * getSMEFTCoeffEW("CHWB")
                    + 0.159 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    - 0.151 * deltaMz()
                    - 0.092 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121327. * getSMEFTCoeffEW("CHbox")
                    + 25048839. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 2390358. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 25048839. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 62132.7 * getSMEFTCoeffEW("CHD")
                    - 434824. * getSMEFTCoeffEW("CHB")
                    + 1807095. * getSMEFTCoeffEW("CHW")
                    - 196264. * getSMEFTCoeffEW("CHWB")
                    - 4.056 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 8.278 * deltaMz()
                    - 0.092 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else if (sqrt_s == 1.4) {

        C1 = -0.0011;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121277. * getSMEFTCoeffEW("CHbox")
                    + 3988231. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 57226150. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 3988231. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 74608.5 * getSMEFTCoeffEW("CHD")
                    + 1256970. * getSMEFTCoeffEW("CHB")
                    + 155358. * getSMEFTCoeffEW("CHW")
                    + 1542655. * getSMEFTCoeffEW("CHWB")
                    + 0.457 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    - 0.828 * deltaMz()
                    - 0.047 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121314. * getSMEFTCoeffEW("CHbox")
                    + 50871646. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 2614134. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 50871646. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 67535.5 * getSMEFTCoeffEW("CHD")
                    - 516385. * getSMEFTCoeffEW("CHB")
                    + 1928805. * getSMEFTCoeffEW("CHW")
                    - 264072. * getSMEFTCoeffEW("CHWB")
                    - 4.233 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 8.55 * deltaMz()
                    - 0.047 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121250. * getSMEFTCoeffEW("CHbox")
                    + 6958750. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 53762500. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 6958750. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 65589.3 * getSMEFTCoeffEW("CHD")
                    + 1144464. * getSMEFTCoeffEW("CHB")
                    + 267732. * getSMEFTCoeffEW("CHW")
                    + 1428214. * getSMEFTCoeffEW("CHWB")
                    + 0.16 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    - 0.234 * deltaMz()
                    - 0.047 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121278. * getSMEFTCoeffEW("CHbox")
                    + 49094486. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 4685522. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 49094486. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 62150.9 * getSMEFTCoeffEW("CHD")
                    - 450090. * getSMEFTCoeffEW("CHB")
                    + 1861602. * getSMEFTCoeffEW("CHW")
                    - 195621. * getSMEFTCoeffEW("CHWB")
                    - 4.055 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 8.195 * deltaMz()
                    - 0.047 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else if (sqrt_s == 1.5) {

        C1 = -0.0011; // Use the same as 1400 GeV

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121268. * getSMEFTCoeffEW("CHbox")
                    + 4578315. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 65691823. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 4578315. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 74595.2 * getSMEFTCoeffEW("CHD")
                    + 1262261. * getSMEFTCoeffEW("CHB")
                    + 155435. * getSMEFTCoeffEW("CHW")
                    + 1547379. * getSMEFTCoeffEW("CHWB")
                    + 0.457 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    - 0.84 * deltaMz()
                    - 0.041 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121277. * getSMEFTCoeffEW("CHbox")
                    + 58398883. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 3000385. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 58398883. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 67535.8 * getSMEFTCoeffEW("CHD")
                    - 518798. * getSMEFTCoeffEW("CHB")
                    + 1936613. * getSMEFTCoeffEW("CHW")
                    - 264171. * getSMEFTCoeffEW("CHWB")
                    - 4.233 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 8.539 * deltaMz()
                    - 0.041 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121289. * getSMEFTCoeffEW("CHbox")
                    + 7988570. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 61718691. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 7988570. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 65599. * getSMEFTCoeffEW("CHD")
                    + 1149083. * getSMEFTCoeffEW("CHB")
                    + 268317. * getSMEFTCoeffEW("CHW")
                    + 1432777. * getSMEFTCoeffEW("CHWB")
                    + 0.16 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    - 0.246 * deltaMz()
                    - 0.041 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121259. * getSMEFTCoeffEW("CHbox")
                    + 56356946. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 5378233. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 56356946. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 62168.7 * getSMEFTCoeffEW("CHD")
                    - 452149. * getSMEFTCoeffEW("CHB")
                    + 1869136. * getSMEFTCoeffEW("CHW")
                    - 195562. * getSMEFTCoeffEW("CHWB")
                    - 4.055 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 8.183 * deltaMz()
                    - 0.041 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else if (sqrt_s == 3.0) {

        C1 = -0.00054;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121320. * getSMEFTCoeffEW("CHbox")
                    + 18314161. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 262773345. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 18314161. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 74663.6 * getSMEFTCoeffEW("CHD")
                    + 1289569. * getSMEFTCoeffEW("CHB")
                    + 155612. * getSMEFTCoeffEW("CHW")
                    + 1572580. * getSMEFTCoeffEW("CHWB")
                    + 0.456 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    - 0.899 * deltaMz()
                    - 0.01 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121305. * getSMEFTCoeffEW("CHbox")
                    + 233598342. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 12002450. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 233598342. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 67507.7 * getSMEFTCoeffEW("CHD")
                    - 531387. * getSMEFTCoeffEW("CHB")
                    + 1976750. * getSMEFTCoeffEW("CHW")
                    - 264661. * getSMEFTCoeffEW("CHWB")
                    - 4.233 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 8.48 * deltaMz()
                    - 0.01 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121225. * getSMEFTCoeffEW("CHbox")
                    + 31953446. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 246870182. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 31953446. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    + 65576.5 * getSMEFTCoeffEW("CHD")
                    + 1173703. * getSMEFTCoeffEW("CHB")
                    + 270983. * getSMEFTCoeffEW("CHW")
                    + 1456032. * getSMEFTCoeffEW("CHWB")
                    + 0.16 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    - 0.305 * deltaMz()
                    - 0.01 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121248. * getSMEFTCoeffEW("CHbox")
                    + 225427310. * getSMEFTCoeffEW("CHl1R", 0, 0)
                    - 21505526. * getSMEFTCoeffEW("CHeR", 0, 0)
                    + 225427310. * getSMEFTCoeffEW("CHl3R", 0, 0)
                    - 62193.4 * getSMEFTCoeffEW("CHD")
                    - 463403. * getSMEFTCoeffEW("CHB")
                    + 1907593. * getSMEFTCoeffEW("CHW")
                    - 195017. * getSMEFTCoeffEW("CHWB")
                    - 4.054 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 8.124 * deltaMz()
                    - 0.01 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eeeZHint + eeeZHpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::mueeZllHPol(const double sqrt_s, const double Pol_em, const double Pol_ep) const {

    //  The signal strength eeZH
    double mu = mueeZHPol(sqrt_s, Pol_em, Pol_ep);

    //  The (relative) linear correction to the Z>ll BR
    double deltaBRratio;

    deltaBRratio = deltaGamma_Zf(leptons[ELECTRON])
            + deltaGamma_Zf(leptons[MU]);

    deltaBRratio = deltaBRratio /
            (trueSM.GammaZ(leptons[ELECTRON]) + trueSM.GammaZ(leptons[MU]));

    deltaBRratio = deltaBRratio - deltaGamma_Z() / trueSM.Gamma_Z();

    return mu + deltaBRratio;
}

const double NPSMEFTd6General::mueeZqqHPol(const double sqrt_s, const double Pol_em, const double Pol_ep) const {

    //  The signal strength eeZH
    double mu = mueeZHPol(sqrt_s, Pol_em, Pol_ep);

    //  The (relative) linear correction to the Z>qq BR
    double deltaBRratio;

    deltaBRratio = deltaGamma_Zf(quarks[UP])
            + deltaGamma_Zf(quarks[DOWN])
            + deltaGamma_Zf(quarks[CHARM])
            + deltaGamma_Zf(quarks[STRANGE])
            + deltaGamma_Zf(quarks[BOTTOM]);

    deltaBRratio = deltaBRratio /
            (trueSM.GammaZ(quarks[UP]) + trueSM.GammaZ(quarks[DOWN])
            + trueSM.GammaZ(quarks[CHARM]) + trueSM.GammaZ(quarks[STRANGE])
            + trueSM.GammaZ(quarks[BOTTOM]));

    deltaBRratio = deltaBRratio - deltaGamma_Z() / trueSM.Gamma_Z();

    return mu + deltaBRratio;
}

const double NPSMEFTd6General::aPskPol(const double sqrt_s, const double Pol_em, const double Pol_ep) const {

    // Expression missing Cll contributions!

    double aL, aR, aPol;
    double sM = sqrt_s * sqrt_s;
    double Mz2 = Mz*Mz;
    double MH2 = mHl*mHl;
    double dMz = 0.0;
    double dMH = 0.0;
    double dv, dg, dgp, dgL, dgR;
    double kCM, kCM2, EZ, EZ2, kZ, kH;
    double EtaZ;
    double CHpsk, CTpsk, CHl, CHlp, CHE;
    double CWB, CBB, CWW;

    // Convention for dim 6 operators
    CWB = g2_tree * g2_tree / (8.0 * g2_tree * g1_tree) * getSMEFTCoeffEW("CHWB") * v2;
    CBB = 0.25 * (g2_tree * g2_tree / g1_tree / g1_tree) * getSMEFTCoeffEW("CHB") * v2;
    CWW = 0.25 * getSMEFTCoeffEW("CHW") * v2;

    CHpsk = (-2.0 * getSMEFTCoeffEW("CHbox") + 0.25 * getSMEFTCoeffEW("CHD")) * v2;
    CTpsk = -0.5 * getSMEFTCoeffEW("CHD") * v2;
    CHl = getSMEFTCoeffEW("CHl1R", 0, 0) * v2;
    CHlp = getSMEFTCoeffEW("CHl3R", 0, 0) * v2;
    CHE = getSMEFTCoeffEW("CHeR", 0, 0) * v2;

    //  Other parameters (1): Missing Cll!!!
    dv = 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1)) * v2;

    // WFR
    EtaZ = -(1.0 / 2.0) * CHpsk + 2.0 * dMz - dv - CTpsk;

    // Kinematics
    kCM = sqrt((sM * sM + (MH2 - Mz2)*(MH2 - Mz2) - 2.0 * sM * (MH2 + Mz2)) / (4.0 * sM));
    kCM2 = kCM*kCM;

    EZ = sqrt(Mz2 + kCM2);
    EZ2 = EZ*EZ;

    kZ = 2.0 * Mz2 / (sM - Mz2) + (EZ * Mz2) / (2 * kCM2 * sqrt_s) - Mz2 / (2 * kCM2) - (EZ2 / Mz2) / (2.0 + EZ2 / Mz2)*(1.0 - Mz2 / (EZ * sqrt_s));

    kH = -((EZ * MH2) / (2 * kCM2 * sqrt_s)) - (EZ2 / Mz2) / (2 + EZ2 / Mz2) * MH2 / (EZ * sqrt_s);

    //  Other parameters (2): Missing Cll!!!
    dg = -(1.0 / (g1_tree * (cW2_tree * cW2_tree - sW2_tree * sW2_tree))) * (dv * cW2_tree * g1_tree
            - cW2_tree * dMz * g1_tree + 0.25 * getSMEFTCoeffEW("CHD") * cW2_tree * g1_tree * v2
            + getSMEFTCoeffEW("CHW") * cW2_tree * cW2_tree * g1_tree * v2 + getSMEFTCoeffEW("CHWB") * cW2_tree * g2_tree * sW2_tree * v2
            - getSMEFTCoeffEW("CHW") * g1_tree * sW2_tree * sW2_tree * v2 + getSMEFTCoeffEW("CHWB") * g2_tree * sW2_tree * sW2_tree * v2);


    dgp = -(1.0 / (cW2_tree * g1_tree * g1_tree * (-cW2_tree * cW2_tree + sW2_tree * sW2_tree))) * (dv * cW2_tree * g1_tree * g1_tree * sW2_tree
            - cW2_tree * dMz * g1_tree * g1_tree * sW2_tree + 0.25 * getSMEFTCoeffEW("CHD") * cW2_tree * g1_tree * g1_tree * sW2_tree * v2
            + getSMEFTCoeffEW("CHWB") * cW2_tree * cW2_tree * g1_tree * g2_tree * sW2_tree * v2
            - getSMEFTCoeffEW("CHB") * cW2_tree * cW2_tree * g2_tree * g2_tree * sW2_tree * v2
            + getSMEFTCoeffEW("CHWB") * cW2_tree * g1_tree * g2_tree * sW2_tree * sW2_tree * v2
            + getSMEFTCoeffEW("CHB") * g2_tree * g2_tree * sW2_tree * sW2_tree * sW2_tree * v2);

    dgL = (1.0 / (0.5 - sW2_tree))*(cW2_tree * (0.5 + sW2_tree) * dg
            - sW2_tree * (0.5 + cW2_tree) * dgp
            + 0.5 * (CHl + CHlp)
            + 0.25 * cW2_tree * (1.0 + 2.0 * sW2_tree)*8.0 * CWW
            - 0.5 * sW2_tree * (1.0 - 2.0 * sW2_tree)*8.0 * CWB
            - 0.25 * sW2_tree * sW2_tree / cW2_tree * (1.0 + 2.0 * cW2_tree)*8.0 * CBB);

    dgR = -cW2_tree * dg + (1.0 + cW2_tree) * dgp
            - 1.0 / (2.0 * sW2_tree) * CHE - 0.5 * cW2_tree * 8 * CWW
            + cW2_tree * 8.0 * CWB + 0.5 * sW2_tree / cW2_tree * (1.0 + cW2_tree)*8.0 * CBB;


    //  LH and RH pars            

    aL = dgL + 2 * dMz - dv + EtaZ + (sM - Mz2) / (2 * Mz2)*(CHl + CHlp) / (0.5 - sW2_tree) + kZ * dMz + kH*dMH;
    aR = dgR + 2 * dMz - dv + EtaZ - (sM - Mz2) / (2 * Mz2) * CHE / sW2_tree + kZ * dMz + kH*dMH;

    //  Polarized a parameter
    aPol = 0.25 * ((1.0 - Pol_em / 100.0)*(1.0 + Pol_ep / 100.0) * aL
            + (1.0 + Pol_em / 100.0)*(1.0 - Pol_ep / 100.0) * aR);

    return aPol;
}

const double NPSMEFTd6General::bPskPol(const double sqrt_s, const double Pol_em, const double Pol_ep) const {
    double bL, bR, bPol;
    double sM = sqrt_s * sqrt_s;
    double Mz2 = Mz*Mz;

    double ZetaZ, ZetaAZ;
    double CWB, CBB, CWW;

    // Convention for dim 6 operators
    CWB = g2_tree * g2_tree / (8.0 * g2_tree * g1_tree) * getSMEFTCoeffEW("CHWB") * v2;
    CBB = 0.25 * (g2_tree * g2_tree / g1_tree / g1_tree) * getSMEFTCoeffEW("CHB") * v2;
    CWW = 0.25 * getSMEFTCoeffEW("CHW") * v2;

    ZetaZ = cW2_tree * 8.0 * CWW + 2.0 * sW2_tree * 8 * CWB + (sW2_tree * sW2_tree / cW2_tree)*8.0 * CBB;
    ZetaAZ = sW_tree * cW_tree * (8.0 * CWW - (1.0 - sW2_tree / cW2_tree)*8 * CWB - (sW2_tree / cW2_tree)*8.0 * CBB);

    //  LH and RH pars 
    bL = ZetaZ + (sW_tree * cW_tree) / (0.5 - sW2_tree)*(sM - Mz2) / sM*ZetaAZ;
    bR = ZetaZ - (cW_tree / sW_tree)*(sM - Mz2) / sM*ZetaAZ;

    //  Polarized b parameter
    bPol = 0.25 * ((1.0 - Pol_em / 100.0)*(1.0 + Pol_ep / 100.0) * bL
            + (1.0 + Pol_em / 100.0)*(1.0 - Pol_ep / 100.0) * bR);

    return bPol;
}

const double NPSMEFTd6General::muVHpT250(const double sqrt_s) const {
    //Use MG SM values
    double sigmaWH_SM = 0.26944e-01;
    double sigmaZH_SM = 0.14600e-01;
    double sigmaWH = muWHpT250(sqrt_s) * sigmaWH_SM;
    double sigmaZH = muZHpT250(sqrt_s) * sigmaZH_SM;
    double mu = ((sigmaWH + sigmaZH) / (sigmaWH_SM + sigmaZH_SM));

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::muVBFpVH(const double sqrt_s) const {
    double sigmaWH_SM = computeSigmaWH(sqrt_s);
    double sigmaZH_SM = computeSigmaZH(sqrt_s);
    double sigmaVBF_SM = computeSigmaVBF(sqrt_s);
    double sigmaWH = muWH(sqrt_s) * sigmaWH_SM;
    double sigmaZH = muZH(sqrt_s) * sigmaZH_SM;
    double sigmaVBF = muVBF(sqrt_s) * sigmaVBF_SM;
    double mu = ((sigmaWH + sigmaZH + sigmaVBF) / (sigmaWH_SM + sigmaZH_SM + sigmaVBF_SM));

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::mutHq(const double sqrt_s) const {
    double mu = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 7.0) {

        C1 = 0.0;

        mu += 0.0;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 8.0) {

        C1 = 0.0;

        mu += 0.0;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 13.0) {

        C1 = 0.0;

        mu += 0.0;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 14.0) {

        C1 = 0.0;

        mu += 0.0;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 27.0) {

        C1 = 0.0;

        mu += 0.0;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 100.0) {

        C1 = 0.0;

        mu += 0.0;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mutHq()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    //mu += etHqint + etHqpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio();


    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::muggHpttH(const double sqrt_s) const {
    double sigmaggH_SM = computeSigmaggH(sqrt_s);
    double sigmattH_SM = computeSigmattH(sqrt_s);
    double sigmaggH = muggH(sqrt_s) * sigmaggH_SM;
    double sigmattH = muttH(sqrt_s) * sigmattH_SM;

    double mu = ((sigmaggH + sigmattH) / (sigmaggH_SM + sigmattH_SM));

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::mueettH(const double sqrt_s, const double Pol_em, const double Pol_ep) const {

    //  Mw scheme

    double mu = 1.0;

    double C1 = 0.0;

    // Wilson coefficients and scale    
    double CHB = 0.0, CHW = 0.0, CHWB = 0.0, CHD = 0.0, CHbox = 0.0, CHl1R11 = 0.0;
    double CHl3R11 = 0.0, CHl3R22 = 0.0, CHeR11 = 0.0, CllR1221 = 0.0, Clq1R1133 = 0.0;
    double Clq3R1133 = 0.0, CeuR1133 = 0.0, CluR1133 = 0.0, CqeR3311 = 0.0;
    double muRG = 0;
    
    // Polarization factors
    double Pe = Pol_em, Pp = Pol_ep;
    double fLR, fRL;

    // LH and RH cross sections    
    double sigmaSMeLHa0 = 0.0, sigmaeLHa0 = 0.0; 
    double sigmaSMeRHa0 = 0.0, sigmaeRHa0 = 0.0;
    
    // -------------------------------------------------------------------------

    fLR = 0.25 * (1.0 - Pe) * (1.0 + Pp);
    fRL = 0.25 * (1.0 + Pe) * (1.0 - Pp);
    
    // RG scale in GeV
    muRG = 1000. * sqrt_s;
    
//  Wilson coefficients definitions 
    CHB = getSMEFTCoeff("CHB", muRG); 
    CHW = getSMEFTCoeff("CHW", muRG); 
    CHWB = getSMEFTCoeff("CHWB", muRG); 
    CHD = getSMEFTCoeff("CHD", muRG); 
    CHbox = getSMEFTCoeff("CHbox", muRG); 
    CHl1R11 = getSMEFTCoeff("CHl1R",0,0, muRG); 
    CHl3R11 = getSMEFTCoeff("CHl3R",0,0, muRG); 
    CHl3R22 = getSMEFTCoeff("CHl3R",1,1, muRG); 
    CHeR11 = getSMEFTCoeff("CHeR",0,0, muRG); 
    CllR1221 = getSMEFTCoeff("CllR",0,1,1,0, muRG); 
    Clq1R1133 = getSMEFTCoeff("Clq1R",0,0,2,2, muRG); 
    Clq3R1133 = getSMEFTCoeff("Clq3R",0,0,2,2, muRG); 
    CeuR1133 = getSMEFTCoeff("CeuR",0,0,2,2, muRG); 
    CluR1133 = getSMEFTCoeff("CluR",0,0,2,2, muRG); 
    CqeR3311 = getSMEFTCoeff("CqeR",2,2,0,0, muRG); 
    
    if (sqrt_s == 0.500) {

        C1 = 0.086;

        // LH -------------------------------
        sigmaSMeLHa0 = 0.000784; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                +64.05 * CHB 
                +150.149 * CHW 
                -293.859 * CHWB 
                -83.749 * CHD 
                +94.929 * CHbox 
                +99.403 * CHl1R11 
                -43.388 * CHl3R11 
                -142.79 * CHl3R22 
                -0.09 * CHeR11 
                +142.587 * CllR1221 
                -2459.84 * Clq1R1133 
                +2459.57 * Clq3R1133 
                -0.039 * CeuR1133 
                -2383.15 * CluR1133 
                +0.038 * CqeR3311 
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.000306; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +84.619 * CHB 
                -1.392 * CHW 
                -229.525 * CHWB 
                -94.6744 * CHD 
                +37.061 * CHbox 
                -0.045 * CHl1R11 
                -55.781 * CHl3R11 
                -55.7456 * CHl3R22 
                +47.617 * CHeR11 
                +55.691 * CllR1221 
                -0.07 * Clq1R1133 
                -0.023 * Clq3R1133 
                -1539.29 * CeuR1133 
                -0.04 * CluR1133 
                -1476.99 * CqeR3311               
                );

    } else if (sqrt_s == 0.550) {

        C1 = 0.086;

        // LH -------------------------------
        sigmaSMeLHa0 = 0.00312; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                +297.11 * CHB 
                +724.31 * CHW 
                -1223.66 * CHWB 
                -325.49 * CHD 
                +377.98 * CHbox 
                +534.49 * CHl1R11 
                -33.9 * CHl3R11 
                -567.507 * CHl3R22 
                +0.21 * CHeR11 
                +567.66 * CllR1221 
                -11969.1 * Clq1R1133 
                +11968.5 * Clq3R1133 
                -0.11 * CeuR1133 
                -11014.6 * CluR1133 
                +0.67 * CqeR3311 
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.001237; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                 +409.925 * CHB 
                -5.186 * CHW 
                -935.608 * CHWB 
                -381.431 * CHD 
                +149.802 * CHbox 
                -0.09 * CHl1R11 
                -225.376 * CHl3R11 
                -225.159 * CHl3R22 
                +135.744 * CHeR11 
                +225.027 * CllR1221 
                -0.125 * Clq1R1133 
                -0.068 * Clq3R1133 
                -7563.55 * CeuR1133 
                -0.029 * CluR1133 
                -6791.05 * CqeR3311 
             
                );

    } else if (sqrt_s == 1.0) {

        C1 = 0.017;

        // LH -------------------------------
        sigmaSMeLHa0 = 0.005628; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                +1025.46 * CHB 
                +3025.89 * CHW 
                -2904.01 * CHWB 
                -487.21 * CHD 
                +679.93 * CHbox 
                +7559.2 * CHl1R11 
                +6531.9 * CHl3R11 
                -1025.4 * CHl3R22 
                -1.38 * CHeR11 
                +1023.74 * CllR1221 
                -74007.7 * Clq1R1133 
                +74002.2 * Clq3R1133 
                -0.51 * CeuR1133 
                -49985.1 * CluR1133 
                +1.77 * CqeR3311 
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.002438; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +1730.78 * CHB 
                -4.46 * CHW 
                -1901.35 * CHWB 
                -734.641 * CHD 
                +294.72 * CHbox 
                +0.18 * CHl1R11 
                -444.453 * CHl3R11 
                -444.042 * CHl3R22 
                -4301.18 * CHeR11 
                +443.17 * CllR1221 
                -0.99 * Clq1R1133 
                -0.53 * Clq3R1133 
                -49023.4 * CeuR1133 
                +0. * CluR1133 
                -29612. * CqeR3311               
                );

    } else if (sqrt_s == 1.4) {

        C1 = 0.0094;

        // LH -------------------------------
        sigmaSMeLHa0 = 0.003663; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                +851.16 * CHB 
                +2683.85 * CHW 
                -2175.84 * CHWB 
                -281.36 * CHD 
                +443.46 * CHbox 
                +14219.5 * CHl1R11 
                +13530.3 * CHl3R11 
                -666.64 * CHl3R22 
                +0.23 * CHeR11 
                +667.92 * CllR1221 
                -94483. * Clq1R1133 
                +94422.2 * Clq3R1133 
                -0.27 * CeuR1133 
                -55215.2 * CluR1133 
                +2.12 * CqeR3311 
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.001649; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                 +1534.5 * CHB 
                -1.516 * CHW 
                -1307.33 * CHWB 
                -491.01 * CHD 
                +199.437 * CHbox 
                +0.185 * CHl1R11 
                -300.664 * CHl3R11 
                -300.5 * CHl3R22 
                -9966.43 * CHeR11 
                +299.889 * CllR1221 
                -0.467 * Clq1R1133 
                -0.15 * Clq3R1133 
                -63653.5 * CeuR1133 
                +0.084 * CluR1133 
                -31925.6 * CqeR3311              
                );

    } else if (sqrt_s == 1.5) {

        C1 = 0.0094; // Use the same as 1400 GeV

        // LH -------------------------------
        sigmaSMeLHa0 = 0.003313; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                +802.15 * CHB 
                +2557.53 * CHW 
                -2020.86 * CHWB 
                -247.18 * CHD 
                +399.96 * CHbox 
                +15759.7 * CHl1R11 
                +15137.2 * CHl3R11 
                -603.19 * CHl3R22 
                -0.33 * CHeR11 
                +603.07 * CllR1221 
                -97959.2 * Clq1R1133 
                +97891.1 * Clq3R1133 
                -1.18 * CeuR1133 
                -55773.9 * CluR1133 
                +0.81 * CqeR3311 
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.001501; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +1463.34 * CHB 
                -0.798 * CHW 
                -1194.15 * CHWB 
                -445.894 * CHD 
                +181.657 * CHbox 
                +0.545 * CHl1R11 
                -273.374 * CHl3R11 
                -273.049 * CHl3R22 
                -11292.4 * CHeR11 
                +273.183 * CllR1221 
                -0.06 * Clq1R1133 
                -0.076 * Clq3R1133 
                -66166.1 * CeuR1133 
                +0.319 * CluR1133 
                -32094.8 * CqeR3311               
                );

    } else if (sqrt_s == 3.0) {

        C1 = 0.0037;

        // LH -------------------------------
        sigmaSMeLHa0 = 0.001106; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                +369.229 * CHB 
                +1267.68 * CHW 
                -846.969 * CHWB 
                -65.475 * CHD 
                +133.094 * CHbox 
                +33426.2 * CHl1R11 
                +33181.8 * CHl3R11 
                -201.591 * CHl3R22 
                +0.184 * CHeR11 
                +201.833 * CllR1221 
                -127907. * Clq1R1133 
                +127790. * Clq3R1133 
                -0.298 * CeuR1133 
                -60001.5 * CluR1133 
                +0.24 * CqeR3311 
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.000527; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +724.065 * CHB 
                +0.053 * CHW 
                -436.716 * CHWB 
                -153.745 * CHD 
                +63.636 * CHbox 
                +0.234 * CHl1R11 
                -96.001 * CHl3R11 
                -95.827 * CHl3R22 
                -26304.8 * CHeR11 
                +95.878 * CllR1221 
                -0.166 * Clq1R1133 
                -0.081 * Clq3R1133 
                -88019.1 * CeuR1133 
                +0.289 * CluR1133 
                -33112.4 * CqeR3311               
                );

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mueettH()");
    
    // Construct the signal strength
    // Total cross section
    mu = fLR * (sigmaeLHa0) + fRL * (sigmaeRHa0);
    // Normalize to SM
    mu = mu / (fLR * (sigmaSMeLHa0) + fRL * (sigmaSMeRHa0));

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eeettHint + eeettHpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}


const double NPSMEFTd6General::mummH(const double sqrt_s) const {
    double mu = 1.0;

    if (sqrt_s == 0.125) {

        //  Peak production cross section mu mu -> H -> X = 4 pi/mH^2 * BR(H->mu mu) * BR(H-> X)
        //  Use mu mu -> H = 4 pi/mH^2 * BR(H->mu mu), so the xs BR formulae still applies
        mu = BrHmumuRatio();

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mummH()");

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::mummHNWA(const double sqrt_s) const {
    double mu = 1.0;

    double dymu = deltaG_hff(leptons[MU]).real();
    double ymuSM = -(leptons[MU].getMass()) / v();

    //  The ratio is given by a scaling of the muon Yukawa.
    mu = 1.0 + 2.0 * dymu / ymuSM;

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        mu += dymu * dymu / ymuSM / ymuSM;
    }

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::mummZH(const double sqrt_s) const {

    // Only Alpha scheme

    double mu = 1.0;

    double C1 = 0.0;
    
    double muRG = 0;
    
    // RG scale in GeV
    muRG = 1000. * sqrt_s;

    if (sqrt_s == 3.0) {

        C1 = -0.00054; // Use the same as CLIC

        mu +=
                +120311. * getSMEFTCoeffEW("CHbox")
                - 5772.03 * getSMEFTCoeffEW("CHD")
                + 253308. * getSMEFTCoeffEW("CHB")
                + 1178831. * getSMEFTCoeffEW("CHW")
                + 526388. * getSMEFTCoeffEW("CHWB")
                + 139222448. * getSMEFTCoeffEW("CHl1R", 1, 1)
                - 119515557. * getSMEFTCoeffEW("CHeR", 1, 1)
                + 0. * getSMEFTCoeffEW("CHl3R", 0, 0)
                + 139217069. * getSMEFTCoeffEW("CHl3R", 1, 1)
                - 2.19 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+4.384 * deltaMz()
                - 0.009 * deltaMh()
                - 0.198 * deltaaMZ()
                + 2.199 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 10.0) {

        C1 = 0.0; // NA

        mu +=
                +110705. * getSMEFTCoeffEW("CHbox")
                - 2881.46 * getSMEFTCoeffEW("CHD")
                + 234510. * getSMEFTCoeffEW("CHB")
                + 1090997. * getSMEFTCoeffEW("CHW")
                + 487384. * getSMEFTCoeffEW("CHWB")
                + 1423231114. * getSMEFTCoeffEW("CHl1R", 1, 1)
                - 1221737534. * getSMEFTCoeffEW("CHeR", 1, 1)
                + 74.649 * getSMEFTCoeffEW("CHl3R", 0, 0)
                + 1423208868. * getSMEFTCoeffEW("CHl3R", 1, 1)
                - 2.096 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+4.016 * deltaMz()
                + 0. * deltaMh()
                - 0.182 * deltaaMZ()
                + 2.183 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mummZH()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eeeZHint + eeeZHpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::mummHvv(const double sqrt_s) const {

    //  Mw scheme

    double mu = 1.0;

    double C1 = 0.0;
    
    // Wilson coefficients and scale 
    double CHB = 0.0, CHW = 0.0, CHWB = 0.0, CHD = 0.0, CHbox = 0.0, CHl1R22 = 0.0;
    double CHl3R11 = 0.0, CHl3R22 = 0.0, CHeR22 = 0.0, CllR1221 = 0.0;
    double muRG = 0;
    
    double scalTH = 1.0;
    
    if ( sqrt_s > 0.5 ) {
        // Theory uncert. scaling like log^2(E/MW)
        
        scalTH = log(sqrt_s/0.080365)/log(0.5/0.080365);
        scalTH = scalTH * scalTH;
    }
    
    // RG scale in GeV
    muRG = 1000. * sqrt_s;
    
//  Wilson coefficients definitions 
    CHB = getSMEFTCoeff("CHB", muRG); 
    CHW = getSMEFTCoeff("CHW", muRG); 
    CHWB = getSMEFTCoeff("CHWB", muRG); 
    CHD = getSMEFTCoeff("CHD", muRG); 
    CHbox = getSMEFTCoeff("CHbox", muRG); 
    CHl1R22 = getSMEFTCoeff("CHl1R",1,1, muRG); 
    CHl3R11 = getSMEFTCoeff("CHl3R",0,0, muRG); 
    CHl3R22 = getSMEFTCoeff("CHl3R",1,1, muRG); 
    CHeR22 = getSMEFTCoeff("CHeR",1,1, muRG); 
    CllR1221 = getSMEFTCoeff("CllR",0,1,1,0, muRG); 

    //  For the Higgs trilinear dependence assume the WBF mechanism dominates
    
    // Defined as (unpolarized) mu+ mu- > H vm vm~. At these energies it is mostly WBF

    if (sqrt_s == 3.0) {

        C1 = 0.0057; // Use the same as CLIC

        mu += cWsch * (
                -189.453 * CHB 
                -40354.5 * CHW 
                -498.257 * CHWB 
                -30770. * CHD 
                +120184. * CHbox 
                +23876.8 * CHl1R22 
                -182919. * CHl3R11 
                -833760. * CHl3R22 
                -21601.8 * CHeR22 
                +181050. * CllR1221 
                );

    } else if (sqrt_s == 10.0) {

        C1 = 0.0; // NA

        mu += cWsch * (
                -578.66 * CHB 
                -27152.7 * CHW 
                -101.506 * CHWB 
                -30749.2 * CHD 
                +120814. * CHbox 
                +14588.5 * CHl1R22 
                -182384. * CHl3R11 
                -1117285. * CHl3R22 
                -13721. * CHeR22 
                +181019. * CllR1221 
                );

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mummHvv()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += scalTH * eeeWBFint + eeeWBFpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::mummHmm(const double sqrt_s) const {

    //  Mw scheme

    double mu = 1.0;

    double C1 = 0.0;

    // Wilson coefficients and scale    
    double CHB = 0.0, CHW = 0.0, CHWB = 0.0, CHD = 0.0, CHbox = 0.0, CHl1R22 = 0.0;
    double CHl3R11 = 0.0, CHl3R22 = 0.0, CHeR22 = 0.0, CllR1221 = 0.0;
    double muRG = 0;
    
    double scalTH = 1.0;
    
    if ( sqrt_s > 0.5 ) {
        // Theory uncert. scaling like log^2(E/MW)
        
        scalTH = log(sqrt_s/0.080365)/log(0.5/0.080365);
        scalTH = scalTH * scalTH;
    }
    
    // RG scale in GeV
    muRG = 1000. * sqrt_s;
    
//  Wilson coefficients definitions 
    CHB = getSMEFTCoeff("CHB", muRG); 
    CHW = getSMEFTCoeff("CHW", muRG); 
    CHWB = getSMEFTCoeff("CHWB", muRG); 
    CHD = getSMEFTCoeff("CHD", muRG); 
    CHbox = getSMEFTCoeff("CHbox", muRG); 
    CHl1R22 = getSMEFTCoeff("CHl1R",1,1, muRG); 
    CHl3R11 = getSMEFTCoeff("CHl3R",0,0, muRG); 
    CHl3R22 = getSMEFTCoeff("CHl3R",1,1, muRG); 
    CHeR22 = getSMEFTCoeff("CHeR",1,1, muRG); 
    CllR1221 = getSMEFTCoeff("CllR",0,1,1,0, muRG); 
    
    // Defined as (unpolarized) mu+ mu- > H mu+ mu-. At these energies it is mostly ZBF

    if (sqrt_s == 3.0) {

        C1 = 0.0063; // Use the same as CLIC

        mu += cWsch * (
                +8523.28 * CHB 
                -36317.7 * CHW 
                +24490.5 * CHWB 
                +8511.15 * CHD 
                +120628. * CHbox 
                -564246. * CHl1R22 
                -182191. * CHl3R11 
                -745892. * CHl3R22 
                +456271. * CHeR22 
                +181186. * CllR1221 
                );

    } else if (sqrt_s == 10.0) {

        C1 = 0.0; //NA

        mu += cWsch * (
                -562.405 * CHB 
                -27961.5 * CHW 
                +35431.1 * CHWB 
                +8154.94 * CHD 
                +119971. * CHbox 
                -920487. * CHl1R22 
                -182505. * CHl3R11 
                -1101897. * CHl3R22 
                +742050. * CHeR22 
                +181016. * CllR1221 
                );

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mummHmm()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    //(Assume similar to WBF.)
    mu += scalTH * eeeWBFint + eeeWBFpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

const double NPSMEFTd6General::mummttH(const double sqrt_s) const {

    // Only Alpha scheme

    double mu = 1.0;

    double C1 = 0.0;
    
    double muRG = 0;
    
    // RG scale in GeV
    muRG = 1000. * sqrt_s;

    if (sqrt_s == 3.0) {

        C1 = 0.0037; // Use the same as CLIC

        mu +=
                +121703. * getSMEFTCoeffEW("CHbox")
                - 105827. * getSMEFTCoeffEW("CuHR", 2, 2)
                - 60143.2 * getSMEFTCoeffEW("CHD")
                + 696642. * getSMEFTCoeffEW("CHB")
                + 749580. * getSMEFTCoeffEW("CHW")
                - 625570. * getSMEFTCoeffEW("CHWB")
                + 8600327. * getSMEFTCoeffEW("CuWR", 2, 2)
                + 10933756. * getSMEFTCoeffEW("CuBR", 2, 2)
                + 19536100. * getSMEFTCoeffEW("CHl1R", 1, 1)
                - 16360523. * getSMEFTCoeffEW("CHeR", 1, 1)
                + 22577.7 * getSMEFTCoeffEW("CHuR", 2, 2)
                - 120.094 * getSMEFTCoeffEW("CHl3R", 0, 0)
                + 19529711. * getSMEFTCoeffEW("CHl3R", 1, 1)
                - 2.244 * delta_GF
                + 4.309 * -0.5 * (getSMEFTCoeffEW("CHq1R", 2, 2) - getSMEFTCoeffEW("CHq3R", 2, 2)) * v2
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+2.486 * deltaMz()
                - 0.594 * deltaMh()
                + 0.777 * deltaaMZ()
                + 2.227 * deltaGmu()
                + 2.183 * deltamt());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 10.0) {

        C1 = 0.0037; //NA

        mu +=
                +121697. * getSMEFTCoeffEW("CHbox")
                - 99433. * getSMEFTCoeffEW("CuHR", 2, 2)
                - 59412.6 * getSMEFTCoeffEW("CHD")
                + 977027. * getSMEFTCoeffEW("CHB")
                + 1069899. * getSMEFTCoeffEW("CHW")
                - 816019. * getSMEFTCoeffEW("CHWB")
                + 48598343. * getSMEFTCoeffEW("CuWR", 2, 2)
                + 62025699. * getSMEFTCoeffEW("CuBR", 2, 2)
                + 300770201. * getSMEFTCoeffEW("CHl1R", 1, 1)
                - 257079386. * getSMEFTCoeffEW("CHeR", 1, 1)
                + 37385. * getSMEFTCoeffEW("CHuR", 2, 2)
                - 36.349 * getSMEFTCoeffEW("CHl3R", 0, 0)
                + 299984515. * getSMEFTCoeffEW("CHl3R", 1, 1)
                - 2.329 * delta_GF
                + 5.129 * -0.5 * (getSMEFTCoeffEW("CHq1R", 2, 2) - getSMEFTCoeffEW("CHq3R", 2, 2)) * v2
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+2.661 * deltaMz()
                - 0.39 * deltaMh()
                + 0.693 * deltaaMZ()
                + 2.295 * deltaGmu()
                + 2.081 * deltamt());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mummttH()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eeettHint + eeettHpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}


////////////HIGGS DECAY WIDTHS AND BRANCHING RATIOS/////////////

const double NPSMEFTd6General::computeGammaTotalRatio() const {
    double width = 1.0;

    width += dGammaHTotR1;

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += dGammaHTotR2;
    }

    if (width < 0) return std::numeric_limits<double>::quiet_NaN();

    return width;

}

const double NPSMEFTd6General::deltaGammaTotalRatio1() const {
    double deltaGammaRatio;

    //  The change in the ratio assuming only SM decays
    deltaGammaRatio = (trueSM.computeBrHtogg() * deltaGammaHggRatio1()
            //            + trueSM.computeBrHtoWW() * deltaGammaHWWRatio1()
            //            + trueSM.computeBrHtoZZ() * deltaGammaHZZRatio1()
            + trueSM.computeBrHto4f() * deltaGammaH4fRatio1()
            + trueSM.computeBrHtoZga() * deltaGammaHZgaRatio1()
            + trueSM.computeBrHtogaga() * deltaGammaHgagaRatio1()
            + trueSM.computeBrHtomumu() * deltaGammaHmumuRatio1()
            + trueSM.computeBrHtotautau() * deltaGammaHtautauRatio1()
            + trueSM.computeBrHtocc() * deltaGammaHccRatio1()
            + trueSM.computeBrHtoss() * deltaGammaHssRatio1()
            + trueSM.computeBrHtobb() * deltaGammaHbbRatio1());

    //  Add the effect of the invisible and exotic BR. Include also here the
    //  pure contribution from BrHinv and BrHexo even in case of no dim 6 contributions    
    deltaGammaRatio = -1.0 + (1.0 + deltaGammaRatio) / (1.0 - BrHinv - BrHexo);

    //std::cout<<"deltaGammaHggRatio1()="<<deltaGammaHggRatio1()<<std::endl;
    //std::cout<<"deltaGammaH4fRatio1()="<<deltaGammaH4fRatio1()<<std::endl;
    //std::cout<<"deltaGammaHZgaRatio1()="<<deltaGammaHZgaRatio1()<<std::endl;
    //std::cout<<"deltaGammaHgagaRatio1()="<<deltaGammaHgagaRatio1()<<std::endl;
    //std::cout<<"deltaGammaHmumuRatio1()="<<deltaGammaHmumuRatio1()<<std::endl;
    //std::cout<<"deltaGammaHtautauRatio1()="<<deltaGammaHtautauRatio1()<<std::endl;
    //std::cout<<"deltaGammaHccRatio1()="<<deltaGammaHccRatio1()<<std::endl;
    //std::cout<<"deltaGammaHbbRatio1()="<<deltaGammaHbbRatio1()<<std::endl;

    return deltaGammaRatio;
}

const double NPSMEFTd6General::deltaGammaTotalRatio1noError() const {
    double deltaGammaRatio;

    //  The change in the ratio assuming only SM decays
    deltaGammaRatio = (trueSM.computeBrHtogg() * (deltaGammaHggRatio1() - eHggint - eHggpar)
            //            + trueSM.computeBrHtoWW() * (deltaGammaHWWRatio1() - eHWWint - eHWWpar )
            //            + trueSM.computeBrHtoZZ() * (deltaGammaHZZRatio1() - eHZZint - eHZZpar )          
            + trueSM.computeBrHto4f() * deltaGammaH4fRatio1()
            - trueSM.computeBrHtoWW() * (eHWWint + eHWWpar)
            - trueSM.computeBrHtoZZ() * (eHZZint + eHZZpar)
            + trueSM.computeBrHtoZga() * (deltaGammaHZgaRatio1() - eHZgaint - eHZgapar)
            + trueSM.computeBrHtogaga() * (deltaGammaHgagaRatio1() - eHgagaint - eHgagapar)
            + trueSM.computeBrHtomumu() * (deltaGammaHmumuRatio1() - eHmumuint - eHmumupar)
            + trueSM.computeBrHtotautau() * (deltaGammaHtautauRatio1() - eHtautauint - eHtautaupar)
            + trueSM.computeBrHtocc() * (deltaGammaHccRatio1() - eHccint - eHccpar)
            + trueSM.computeBrHtoss() * (deltaGammaHssRatio1() - eHssint - eHsspar)
            + trueSM.computeBrHtobb() * (deltaGammaHbbRatio1() - eHbbint - eHbbpar));

    //  Add the effect of the invisible and exotic BR. Include also here the
    //  pure contribution from BrHinv and BrHexo even in case of no dim 6 contributions    
    deltaGammaRatio = -1.0 + (1.0 + deltaGammaRatio) / (1.0 - BrHinv - BrHexo);

    return deltaGammaRatio;
}

const double NPSMEFTd6General::deltaGammaTotalRatio2() const {
    double deltaGammaRatio = 0.0;

    if (FlagQuadraticTerms) {
        //  The change in the ratio assuming only SM decays
        deltaGammaRatio = trueSM.computeBrHtogg() * deltaGammaHggRatio2()
                //            + trueSM.computeBrHtoWW() * deltaGammaHWWRatio2()
                //            + trueSM.computeBrHtoZZ() * deltaGammaHZZRatio2()
                + trueSM.computeBrHto4f() * deltaGammaH4fRatio2()
                + trueSM.computeBrHtoZga() * deltaGammaHZgaRatio2()
                + trueSM.computeBrHtogaga() * deltaGammaHgagaRatio2()
                + trueSM.computeBrHtomumu() * deltaGammaHmumuRatio2()
                + trueSM.computeBrHtotautau() * deltaGammaHtautauRatio2()
                + trueSM.computeBrHtocc() * deltaGammaHccRatio2()
                + trueSM.computeBrHtoss() * deltaGammaHssRatio2()
                + trueSM.computeBrHtobb() * deltaGammaHbbRatio2();

        //  Add the effect of the invisible and exotic BR and return     
        deltaGammaRatio = (deltaGammaRatio / (1.0 - BrHinv - BrHexo));
    }
    return deltaGammaRatio;
}

const double NPSMEFTd6General::GammaHggRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHggRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHggRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHggRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0066;    
    double muRG = 125.1;

    /*dwidth += (+37526258. * getSMEFTCoeffEW("CHG")
            + cLHd6 * (
            +121248. * getSMEFTCoeffEW("CHbox")
            + 173353. * getSMEFTCoeffEW("CuHR", 1, 1)
            - 129155. * getSMEFTCoeffEW("CuHR", 2, 2)
            + 248530. * getSMEFTCoeffEW("CdHR", 2, 2)
            - 30312.1 * getSMEFTCoeffEW("CHD")
            - 60624.1 * delta_GF / v() / v())
            );*/

    // AG:begin
    // Obtained with SMEFTatNLO. 
    // cuG_Warsaw = g3_tree*cuG_SMEFTatNLO
    // Used reweigthing procedure for cHG
    //  This should be at LO independent of alpha-MW scheme
    //dwidth += cWsch * ((
    dwidth += ((
            (39.3001) * getSMEFTCoeff("CHG",muRG)
            + (0.12124) * getSMEFTCoeff("CHbox",muRG)
            + (-0.12251) * getSMEFTCoeff("CuHR", 2, 2,muRG)
            + (1.12694) * getSMEFTCoeff("CuGR", 2, 2,muRG) * g3_tree
            + (-0.03032) * getSMEFTCoeff("CHD",muRG)
            + (-0.06064) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.06064) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.06064) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            );
    //AG:end

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (+1.003 * deltaGmu()
            + 2.31 * deltaaSMZ()
            + 3.276 * deltaMh()
            - 0.134 * deltamt()
            - 0.106 * deltamb()
            - 0.03 * deltamc());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHggint + eHggpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaHggRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHggRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHggRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHggRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaHWWRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHWWRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHWWRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHWWRatio1() const {
    double dwidth = 0.0;

    //    double C1 = 0.0073;

    dwidth = deltaGammaHWW4fRatio1();

    //  Linear contribution from Higgs self-coupling
    //    dwidth += cLHd6*(C1 + 2.0*dZH1)*deltaG_hhhRatio(); 
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    //    dwidth += cLHd6*cLH3d62*dZH2*deltaG_hhhRatio()*deltaG_hhhRatio();

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //    dwidth += eHWWint + eHWWpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHWWRatio2() const {
    double dwidth = 0.0;

    if (FlagQuadraticTerms) {
        dwidth = deltaGammaHWW4fRatio2();
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHWWRatio() const {

//    return BrHWW4fRatio();
    return BrH4fCCRatio();

}

const double NPSMEFTd6General::GammaHWlvRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHWlvRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHWlvRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHWlvRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0073;
    double muRG = 125.1;

    dwidth += (+121875. * getSMEFTCoeff("CHbox",muRG)
            + 18351.9 * (1.0 / 2.0) * (getSMEFTCoeff("CHl3R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG))
            - 159873. * getSMEFTCoeff("CHD",muRG)
            - 91288.7 * getSMEFTCoeff("CHW",muRG)
            - 284689. * getSMEFTCoeff("CHWB",muRG)
            - 3.292 * delta_GF
            - 15.14 * deltaMwd6());

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 );

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHWWint + eHWWpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHWlvRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHWlvRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHWlvRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHWlvRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::GammaHWW2l2vRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHWW2l2vRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHWW2l2vRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHWW2l2vRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0073;
    double muRG = 125.1;

    dwidth += (+120742. * getSMEFTCoeff("CHbox",muRG)
            + 131582. * (1.0 / 2.0) * (getSMEFTCoeff("CHl3R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG))
            - 204043. * getSMEFTCoeff("CHD",muRG)
            - 91463.9 * getSMEFTCoeff("CHW",muRG)
            - 379529. * getSMEFTCoeff("CHWB",muRG)
            - 4.705 * delta_GF
            - 13.735 * deltaMwd6()
            - 0.965 * deltaGwd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (-12.123 * deltaMz()
            + 13.615 * deltaMh()
            + 1.756 * deltaaMZ()
            + 0.216 * deltaGmu());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHWWint + eHWWpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHWW2l2vRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHWW2l2vRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHWW2l2vRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHWW2l2vRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::GammaHWjjRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHWjjRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHWjjRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHWjjRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0073;
    double muRG = 125.1;

    dwidth += (+121611. * getSMEFTCoeff("CHbox",muRG)
            + 17701.4 * (1.0 / 2.0) * (getSMEFTCoeff("CHq3R", 0, 0,muRG) + getSMEFTCoeff("CHq3R", 1, 1,muRG))
            - 159273. * getSMEFTCoeff("CHD",muRG)
            - 91021.6 * getSMEFTCoeff("CHW",muRG)
            - 282574. * getSMEFTCoeff("CHWB",muRG)
            - 3.259 * delta_GF
            - 15.198 * deltaMwd6());

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 ); 

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHWWint + eHWWpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHWjjRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHWjjRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHWjjRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHWjjRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::GammaHWW4jRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHWW4jRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHWW4jRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHWW4jRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0073;
    double muRG = 125.1;

    dwidth += (+121936. * getSMEFTCoeff("CHbox",muRG)
            + 138860. * (1.0 / 2.0) * (getSMEFTCoeff("CHq3R", 0, 0,muRG) + getSMEFTCoeff("CHq3R", 1, 1,muRG))
            - 205023. * getSMEFTCoeff("CHD",muRG)
            - 89938.5 * getSMEFTCoeff("CHW",muRG)
            - 383944. * getSMEFTCoeff("CHWB",muRG)
            - 4.816 * delta_GF
            - 13.647 * deltaMwd6()
            - 0.959 * deltaGwd6());

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (-12.168 * deltaMz()
            + 13.66 * deltaMh()
            + 1.899 * deltaaMZ()
            + 0.189 * deltaGmu());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHWWint + eHWWpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHWW4jRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHWW4jRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHWW4jRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHWW4jRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::GammaHWffRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHWffRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHWffRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHWffRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0073;
    double muRG = 125.1;

    dwidth += (+121288. * getSMEFTCoeff("CHbox",muRG)
            + 5395.21 * (1.0 / 3.0) * (getSMEFTCoeff("CHl3R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG) + getSMEFTCoeff("CHl3R", 2, 2,muRG))
            + 11680.9 * (1.0 / 2.0) * (getSMEFTCoeff("CHq3R", 0, 0,muRG) + getSMEFTCoeff("CHq3R", 1, 1,muRG))
            - 159787. * getSMEFTCoeff("CHD",muRG)
            - 91509.1 * getSMEFTCoeff("CHW",muRG)
            - 283092. * getSMEFTCoeff("CHWB",muRG)
            - 3.259 * delta_GF
            - 15.196 * deltaMwd6());

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 ); 

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHWWint + eHWWpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHWffRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHWffRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHWffRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHWffRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::GammaHWW4fRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHWW4fRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHWW4fRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHWW4fRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0073;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg
    double CWff, sf;

    CWff = (getSMEFTCoeff("CHl3R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG) + getSMEFTCoeff("CHl3R", 2, 2,muRG)) * v2 +
            Nc * (getSMEFTCoeff("CHq3R", 0, 0,muRG) + getSMEFTCoeff("CHq3R", 1, 1,muRG)) * v2;

    CWff = CWff / (3.0 + 2.0 * Nc);

    sf = 90362.5 * (1.0 / 2.0) * (3.0 + 2.0 * Nc) / (Nc * v2); // Coefficient of the CWff term. From the getSMEFTCoeff("CHq3R",0,0) term in the ME.

    dwidth += cAsch * (+121886. * getSMEFTCoeff("CHbox",muRG)
            + sf * CWff
            - 204009. * getSMEFTCoeff("CHD",muRG)
            - 91455.7 * getSMEFTCoeff("CHW",muRG)
            - 382903. * getSMEFTCoeff("CHWB",muRG)
            - 4.757 * delta_GF
            - 13.716 * deltaMwd6()
            - 0.963 * deltaGwd6()
            );
    
    //------ Old alpha scheme expression: End

    //AG:begin
    dwidth += cWsch * (
            ((0.12133) * getSMEFTCoeff("CHbox",muRG)
            + (-0.0905777) * getSMEFTCoeff("CHW",muRG)
            + (-0.03034378) * getSMEFTCoeff("CHD",muRG)
            + (-0.11424153) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.1141935) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.18202) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            );

    dwidth += cWsch * (+(-0.94) * deltaGwd6());


    //AG:end

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (-12.271 * deltaMz()
            + 13.665 * deltaMh()
            + 1.85 * deltaaMZ()
            + 0.224 * deltaGmu());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHWWint + eHWWpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHWW4fRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += cWsch * (
                +(0.01471) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (-0.0081083) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (0.0009192) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (0.005083) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.00508) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.011034) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (-0.01097899) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.0073562947) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                + (-0.00649564) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0064908) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.014711) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0027439) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (0.0023097) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0023154) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.01097899) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0016225) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0016221) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0036781165) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00439) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.013843218) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.01384871) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.85) * pow(deltaGwd6(), 2.0));

        dwidth += cWsch * (
                +(-0.1119) * deltaGwd6() * getSMEFTCoeffEW("CHbox")
                + (0.0842) * deltaGwd6() * getSMEFTCoeffEW("CHW")
                + (0.029323) * deltaGwd6() * getSMEFTCoeffEW("CHD")
                + (0.10437) * deltaGwd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.10931) * deltaGwd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.1679) * deltaGwd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;

    }

    return dwidth;
}

const double NPSMEFTd6General::BrHWW4fRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHWW4fRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHWW4fRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::GammaHZZRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZZRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZZRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHZZRatio1() const {
    double dwidth = 0.0;

    //    double C1 = 0.0083;

    dwidth = deltaGammaHZZ4fRatio1();

    //  Linear contribution from Higgs self-coupling
    //    dwidth += cLHd6*(C1 + 2.0*dZH1)*deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    //    dwidth += cLHd6*cLH3d62*dZH2*deltaG_hhhRatio()*deltaG_hhhRatio();

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //    dwidth += eHZZint + eHZZpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHZZRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHZZRatio() const {
    //return BrHZZ4fRatio();    
    return BrH4fNCRatio();
}

const double NPSMEFTd6General::GammaHZllRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZllRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZllRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHZllRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    dwidth += (+121715. * getSMEFTCoeff("CHbox",muRG)
            + 8726.9 * (1.0 / 2.0) * (getSMEFTCoeff("CHl1R", 0, 0,muRG) + getSMEFTCoeff("CHl1R", 1, 1,muRG))
            - 7315.2 * (1.0 / 2.0) * (getSMEFTCoeff("CHeR", 0, 0,muRG) + getSMEFTCoeff("CHeR", 1, 1,muRG))
            + 8726.9 * (1.0 / 2.0) * (getSMEFTCoeff("CHl3R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG))
            - 5544.15 * getSMEFTCoeff("CHD",muRG)
            - 13560.9 * getSMEFTCoeff("CHB",muRG)
            - 45585.2 * getSMEFTCoeff("CHW",muRG)
            - 53507.9 * getSMEFTCoeff("CHWB",muRG)
            - 2.204 * delta_GF);

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 ); 

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHZZint + eHZZpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHZllRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHZllRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZllRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZllRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::GammaHZeeRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZeeRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZeeRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHZeeRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    //  Derived from the HZll expression for l=e only

    dwidth += (+121715. * getSMEFTCoeff("CHbox",muRG)
            + 8726.9 * getSMEFTCoeff("CHl1R", 0, 0,muRG)
            - 7315.2 * getSMEFTCoeff("CHeR", 0, 0,muRG)
            + 8726.9 * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            - 5544.15 * getSMEFTCoeff("CHD",muRG)
            - 13560.9 * getSMEFTCoeff("CHB",muRG)
            - 45585.2 * getSMEFTCoeff("CHW",muRG)
            - 53507.9 * getSMEFTCoeff("CHWB",muRG)
            - 2.204 * delta_GF);

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 ); 

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHZZint + eHZZpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHZeeRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::GammaHZmumuRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZmumuRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZmumuRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHZmumuRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    //  Derived from the HZll expression for l=mu only

    dwidth += (+121715. * getSMEFTCoeff("CHbox",muRG)
            + 8726.9 * getSMEFTCoeff("CHl1R", 1, 1,muRG)
            - 7315.2 * getSMEFTCoeff("CHeR", 1, 1,muRG)
            + 8726.9 * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            - 5544.15 * getSMEFTCoeff("CHD",muRG)
            - 13560.9 * getSMEFTCoeff("CHB",muRG)
            - 45585.2 * getSMEFTCoeff("CHW",muRG)
            - 53507.9 * getSMEFTCoeff("CHWB",muRG)
            - 2.204 * delta_GF);

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 ); 

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHZZint + eHZZpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHZmumuRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::GammaHZZ4lRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZZ4lRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZZ4lRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHZZ4lRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    double CZll, sf;

    CZll = gZlL * (-0.5 * (getSMEFTCoeff("CHl1R", 0, 0,muRG) + getSMEFTCoeff("CHl1R", 1, 1,muRG) + getSMEFTCoeff("CHl3R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG)) * v2) +
            gZlR * (-0.5 * (getSMEFTCoeff("CHeR", 0, 0,muRG) + getSMEFTCoeff("CHeR", 1, 1,muRG)) * v2);

    CZll = CZll / (2.0 * (gZlL * gZlL + gZlR * gZlR));

    sf = 124479. * (1.0 / 2.0) * (2.0 * (gZlL * gZlL + gZlR * gZlR)) / (-0.5 * gZlL * v2); // Coefficient of the CZll term. From the getSMEFTCoeff("CHl1R",0,0) term in the ME.

    dwidth += (+122273. * getSMEFTCoeff("CHbox",muRG)
            + sf * CZll
            - 44025.7 * getSMEFTCoeff("CHD",muRG)
            - 13602.6 * getSMEFTCoeff("CHB",muRG)
            - 45248.6 * getSMEFTCoeff("CHW",muRG)
            - 88372.1 * getSMEFTCoeff("CHWB",muRG)
            - 3.462 * delta_GF
            - 0.808 * deltaGzd6());

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (-9.734 * deltaMz()
            + 15.37 * deltaMh()
            - 0.154 * deltaaMZ()
            + 2.339 * deltaGmu());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHZZ4lRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHZZ4lRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZZ4lRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZZ4lRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::GammaHZZ4eRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZZ4eRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZZ4eRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHZZ4eRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    dwidth += (+121386. * getSMEFTCoeff("CHbox",muRG)
            + 123413. * getSMEFTCoeff("CHl1R", 0, 0,muRG)
            - 103717. * getSMEFTCoeff("CHeR", 0, 0,muRG)
            + 123413. * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            - 44056.9 * getSMEFTCoeff("CHD",muRG)
            - 13385.3 * getSMEFTCoeff("CHB",muRG)
            - 45127.7 * getSMEFTCoeff("CHW",muRG)
            - 91708.7 * getSMEFTCoeff("CHWB",muRG)
            - 3.462 * delta_GF
            - 0.769 * deltaGzd6());

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (-9.228 * deltaMz()
            + 15.148 * deltaMh()
            - 0.229 * deltaaMZ()
            + 2.493 * deltaGmu());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHZZ4eRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHZZ4eRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZZ4eRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZZ4eRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::GammaHZZ2e2muRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZZ2e2muRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZZ2e2muRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHZZ2e2muRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    dwidth += (+120836. * getSMEFTCoeff("CHbox",muRG)
            + 126374. * (1.0 / 2.0) * (getSMEFTCoeff("CHl1R", 0, 0,muRG) + getSMEFTCoeff("CHl1R", 1, 1,muRG))
            - 109064. * (1.0 / 2.0) * (getSMEFTCoeff("CHeR", 0, 0,muRG) + getSMEFTCoeff("CHeR", 1, 1,muRG))
            + 126374. * (1.0 / 2.0) * (getSMEFTCoeff("CHl3R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG))
            - 42370.4 * getSMEFTCoeff("CHD",muRG)
            - 14299. * getSMEFTCoeff("CHB",muRG)
            - 47298.2 * getSMEFTCoeff("CHW",muRG)
            - 83098.2 * getSMEFTCoeff("CHWB",muRG)
            - 3.378 * delta_GF
            - 0.85 * deltaGzd6());

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (-10.07 * deltaMz()
            + 15.626 * deltaMh()
            - 0.128 * deltaaMZ()
            + 2.258 * deltaGmu());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHZZ2e2muRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHZZ2e2muRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZZ2e2muRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZZ2e2muRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::GammaHZZ4muRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZZ4muRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZZ4muRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHZZ4muRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    dwidth += (+120688. * getSMEFTCoeff("CHbox",muRG)
            + 123059. * getSMEFTCoeff("CHl1R", 1, 1,muRG)
            - 103862. * getSMEFTCoeff("CHeR", 1, 1,muRG)
            + 123059. * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            - 43977.1 * getSMEFTCoeff("CHD",muRG)
            - 13575.5 * getSMEFTCoeff("CHB",muRG)
            - 45200.8 * getSMEFTCoeff("CHW",muRG)
            - 91625.2 * getSMEFTCoeff("CHWB",muRG)
            - 3.471 * delta_GF
            - 0.774 * deltaGzd6());

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (-9.254 * deltaMz()
            + 15.109 * deltaMh()
            - 0.207 * deltaaMZ()
            + 2.405 * deltaGmu());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHZZ4muRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHZZ4muRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZZ4muRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZZ4muRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::GammaHZvvRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZvvRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZvvRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHZvvRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    dwidth += (+121530. * getSMEFTCoeff("CHbox",muRG)
            - 7943.34 * (1.0 / 3.0) * (getSMEFTCoeff("CHl1R", 0, 0,muRG) + getSMEFTCoeff("CHl1R", 1, 1,muRG) + getSMEFTCoeff("CHl1R", 2, 2,muRG))
            + 7943.34 * (1.0 / 3.0) * (getSMEFTCoeff("CHl3R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG) + getSMEFTCoeff("CHl3R", 2, 2,muRG))
            - 229.41 * getSMEFTCoeff("CHD",muRG)
            - 13535.2 * getSMEFTCoeff("CHB",muRG)
            - 45480.6 * getSMEFTCoeff("CHW",muRG)
            - 24891. * getSMEFTCoeff("CHWB",muRG)
            - 2. * delta_GF);

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 ); 

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHZZint + eHZZpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHZvvRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHZvvRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZvvRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZvvRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::GammaHZZ4vRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZZ4vRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZZ4vRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHZZ4vRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    dwidth += (+120596. * getSMEFTCoeff("CHbox",muRG)
            - 115532. * (1.0 / 3.0) * (getSMEFTCoeff("CHl1R", 0, 0,muRG) + getSMEFTCoeff("CHl1R", 1, 1,muRG) + getSMEFTCoeff("CHl1R", 2, 2,muRG))
            + 115532. * (1.0 / 3.0) * (getSMEFTCoeff("CHl3R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG) + getSMEFTCoeff("CHl3R", 2, 2,muRG))
            - 28744.1 * getSMEFTCoeff("CHD",muRG)
            - 13816.7 * getSMEFTCoeff("CHB",muRG)
            - 44782.1 * getSMEFTCoeff("CHW",muRG)
            - 25256.6 * getSMEFTCoeff("CHWB",muRG)
            - 3.013 * delta_GF
            - 0.787 * deltaGzd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (-10.49 * deltaMz()
            + 15.294 * deltaMh()
            + 0.255 * deltaaMZ()
            + 1.979 * deltaGmu());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHZZ4vRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHZZ4vRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZZ4vRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZZ4vRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::GammaHZuuRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZuuRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZuuRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHZuuRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    dwidth += (+121512. * getSMEFTCoeff("CHbox",muRG)
            - 9648.28 * (1.0 / 2.0) * (getSMEFTCoeff("CHq1R", 0, 0,muRG) + getSMEFTCoeff("CHq1R", 1, 1,muRG))
            + 4218.6 * (1.0 / 2.0) * (getSMEFTCoeff("CHuR", 0, 0,muRG) + getSMEFTCoeff("CHuR", 1, 1,muRG))
            + 9648.28 * (1.0 / 2.0) * (getSMEFTCoeff("CHq3R", 0, 0,muRG) + getSMEFTCoeff("CHq3R", 1, 1,muRG))
            - 17762.5 * getSMEFTCoeff("CHD",muRG)
            - 13473.3 * getSMEFTCoeff("CHB",muRG)
            - 45667.9 * getSMEFTCoeff("CHW",muRG)
            - 110057. * getSMEFTCoeff("CHWB",muRG)
            - 2.6 * delta_GF);

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 ); 

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHZZint + eHZZpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHZuuRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHZuuRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZuuRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZuuRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::BrHZZ4uRatio() const {
    double deltaBRratio;

    deltaBRratio = deltaGamma_Zf(quarks[UP])
            + deltaGamma_Zf(quarks[CHARM]);

    deltaBRratio = deltaBRratio /
            (trueSM.GammaZ(quarks[UP]) + trueSM.GammaZ(quarks[CHARM]));

    deltaBRratio = deltaBRratio - deltaGamma_Z() / trueSM.Gamma_Z();

    return ( BrHZuuRatio() + deltaBRratio);
}

const double NPSMEFTd6General::GammaHZddRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZddRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZddRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHZddRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    dwidth += (+121756. * getSMEFTCoeff("CHbox",muRG)
            + 9252.73 * (1.0 / 3.0) * (getSMEFTCoeff("CHq1R", 0, 0,muRG) + getSMEFTCoeff("CHq1R", 1, 1,muRG) + getSMEFTCoeff("CHq1R", 2, 2,muRG))
            - 1471.03 * (1.0 / 3.0) * (getSMEFTCoeff("CHdR", 0, 0,muRG) + getSMEFTCoeff("CHdR", 1, 1,muRG) + getSMEFTCoeff("CHdR", 2, 2,muRG))
            + 9252.73 * (1.0 / 3.0) * (getSMEFTCoeff("CHq3R", 0, 0,muRG) + getSMEFTCoeff("CHq3R", 1, 1,muRG) + getSMEFTCoeff("CHq3R", 2, 2,muRG))
            - 12714.3 * getSMEFTCoeff("CHD",muRG)
            - 13589.3 * getSMEFTCoeff("CHB",muRG)
            - 45689.4 * getSMEFTCoeff("CHW",muRG)
            - 85582.3 * getSMEFTCoeff("CHWB",muRG)
            - 2.427 * delta_GF);

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 ); 

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHZZint + eHZZpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHZddRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHZddRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZddRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZddRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::BrHZZ4dRatio() const {
    double deltaBRratio;

    deltaBRratio = deltaGamma_Zf(quarks[DOWN])
            + deltaGamma_Zf(quarks[STRANGE])
            + deltaGamma_Zf(quarks[BOTTOM]);

    deltaBRratio = deltaBRratio /
            (trueSM.GammaZ(quarks[DOWN])
            + trueSM.GammaZ(quarks[STRANGE])
            + trueSM.GammaZ(quarks[BOTTOM]));

    deltaBRratio = deltaBRratio - deltaGamma_Z() / trueSM.Gamma_Z();

    return ( BrHZddRatio() + deltaBRratio);
}

const double NPSMEFTd6General::GammaHZffRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZffRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZffRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHZffRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    dwidth += (+121551. * getSMEFTCoeff("CHbox",muRG)
            - 824.482 * (1.0 / 3.0) * (getSMEFTCoeff("CHl1R", 0, 0,muRG) + getSMEFTCoeff("CHl1R", 1, 1,muRG) + getSMEFTCoeff("CHl1R", 2, 2,muRG))
            + 1840.54 * (1.0 / 12.0) * (5.0 * getSMEFTCoeff("CHq1R", 0, 0,muRG) + 5.0 * getSMEFTCoeff("CHq1R", 1, 1,muRG) + 2.0 * getSMEFTCoeff("CHq1R", 2, 2,muRG) - getSMEFTCoeff("CHq3R", 0, 0,muRG) - getSMEFTCoeff("CHq3R", 1, 1,muRG) + 2.0 * getSMEFTCoeff("CHq3R", 2, 2,muRG))
            - 795.383 * (1.0 / 3.0) * (getSMEFTCoeff("CHeR", 0, 0,muRG) + getSMEFTCoeff("CHeR", 1, 1,muRG) + getSMEFTCoeff("CHeR", 2, 2,muRG))
            + 1069.4 * (1.0 / 2.0) * (getSMEFTCoeff("CHuR", 0, 0,muRG) + getSMEFTCoeff("CHuR", 1, 1,muRG))
            - 579.563 * (1.0 / 3.0) * (getSMEFTCoeff("CHdR", 0, 0,muRG) + getSMEFTCoeff("CHdR", 1, 1,muRG) + getSMEFTCoeff("CHdR", 2, 2,muRG))
            + 3164.56 * (1.0 / 3.0) * (getSMEFTCoeff("CHl3R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG) + getSMEFTCoeff("CHl3R", 2, 2,muRG))
            + 6413.99 * (-1.0 / 12.0) * (getSMEFTCoeff("CHq1R", 0, 0,muRG) + getSMEFTCoeff("CHq1R", 1, 1,muRG) - 2.0 * getSMEFTCoeff("CHq1R", 2, 2,muRG) - 5.0 * getSMEFTCoeff("CHq3R", 0, 0,muRG) - 5.0 * getSMEFTCoeff("CHq3R", 1, 1,muRG) - 2.0 * getSMEFTCoeff("CHq3R", 2, 2,muRG))
            - 10839.5 * getSMEFTCoeff("CHD",muRG)
            - 14222.3 * getSMEFTCoeff("CHB",muRG)
            - 45455.6 * getSMEFTCoeff("CHW",muRG)
            - 75343.1 * getSMEFTCoeff("CHWB",muRG)
            - 2.356 * delta_GF);

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 ); 

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHZZint + eHZZpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHZffRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHZffRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZffRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZffRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::GammaHZZ4fRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZZ4fRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZZ4fRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHZZ4fRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg
    double CZff, sf;

    CZff = gZvL * (-0.5 * (getSMEFTCoeff("CHl1R", 0, 0,muRG) + getSMEFTCoeff("CHl1R", 1, 1,muRG) + getSMEFTCoeff("CHl1R", 2, 2,muRG) - getSMEFTCoeff("CHl3R", 0, 0,muRG) - getSMEFTCoeff("CHl3R", 1, 1,muRG) - getSMEFTCoeff("CHl3R", 2, 2,muRG)) * v2) +
            gZlL * (-0.5 * (getSMEFTCoeff("CHl1R", 0, 0,muRG) + getSMEFTCoeff("CHl1R", 1, 1,muRG) + getSMEFTCoeff("CHl1R", 2, 2,muRG) + getSMEFTCoeff("CHl3R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG) + getSMEFTCoeff("CHl3R", 2, 2,muRG)) * v2) +
            gZlR * (-0.5 * (getSMEFTCoeff("CHeR", 0, 0,muRG) + getSMEFTCoeff("CHeR", 1, 1,muRG) + getSMEFTCoeff("CHeR", 2, 2,muRG)) * v2) +
            Nc * (
            gZdL * (-0.5 * (getSMEFTCoeff("CHq1R", 0, 0,muRG) + getSMEFTCoeff("CHq1R", 1, 1,muRG) + getSMEFTCoeff("CHq1R", 2, 2,muRG) + getSMEFTCoeff("CHq3R", 0, 0,muRG) + getSMEFTCoeff("CHq3R", 1, 1,muRG) + getSMEFTCoeff("CHq3R", 2, 2,muRG)) * v2) +
            gZdR * (-0.5 * (getSMEFTCoeff("CHdR", 0, 0,muRG) + getSMEFTCoeff("CHdR", 1, 1,muRG) + getSMEFTCoeff("CHdR", 2, 2,muRG)) * v2) +
            gZuL * (-0.5 * (getSMEFTCoeff("CHq1R", 0, 0,muRG) + getSMEFTCoeff("CHq1R", 1, 1,muRG) - getSMEFTCoeff("CHq3R", 0, 0,muRG) - getSMEFTCoeff("CHq3R", 1, 1,muRG)) * v2) +
            gZuR * (-0.5 * (getSMEFTCoeff("CHuR", 0, 0,muRG) + getSMEFTCoeff("CHuR", 1, 1,muRG)) * v2)
            );

    CZff = CZff / (
            3.0 * (gZvL * gZvL + gZlL * gZlL + gZlR * gZlR) +
            Nc * (3.0 * (gZdL * gZdL + gZdR * gZdR) + 2.0 * (gZuL * gZuL + gZuR * gZuR))
            );

    sf = -11267.6 * (1.0 / 3.0) * (
            3.0 * (gZvL * gZvL + gZlL * gZlL + gZlR * gZlR) +
            Nc * (3.0 * (gZdL * gZdL + gZdR * gZdR) + 2.0 * (gZuL * gZuL + gZuR * gZuR))
            );

    sf = sf / (-0.5 * (gZlL + gZvL) * v2); // Coefficient of the CZff term. From the getSMEFTCoeff("CHl1R",0,0) term in the ME.

    dwidth += cAsch * (+121373. * getSMEFTCoeff("CHbox",muRG)
            + sf * CZff
            - 50927.1 * getSMEFTCoeff("CHD",muRG)
            - 14137.9 * getSMEFTCoeff("CHB",muRG)
            - 46350.1 * getSMEFTCoeff("CHW",muRG)
            - 126336. * getSMEFTCoeff("CHWB",muRG)
            - 3.715 * delta_GF
            - 0.834 * deltaGzd6()
            );
    
    //------ Old alpha scheme expression: End

    //AG:begin
    dwidth += cWsch * (
            ((0.12104) * getSMEFTCoeff("CHbox",muRG)
            + (-0.02372) * getSMEFTCoeff("CHW",muRG)
            + (-0.03647) * getSMEFTCoeff("CHB",muRG)
            + (-0.016569) * getSMEFTCoeff("CHD",muRG)
            + (-0.021999) * getSMEFTCoeff("CHWB",muRG)
            + (-0.017927) * getSMEFTCoeff("CHl1R", 0, 0,muRG)
            + (-0.017925) * getSMEFTCoeff("CHl1R", 1, 1,muRG)
            + (-0.1213776) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.1215437) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (-0.01686521) * getSMEFTCoeff("CHeR", 0, 0,muRG)
            + (-0.01688863) * getSMEFTCoeff("CHeR", 1, 1,muRG)
            + (0.18165) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            );

    dwidth += cWsch * (+(-0.797) * deltaGzd6());

    //AG:end

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (-9.548 * deltaMz()
            + 15.799 * deltaMh()
            - 0.412 * deltaaMZ()
            + 2.569 * deltaGmu());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;

}

const double NPSMEFTd6General::deltaGammaHZZ4fRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += cWsch * (
                +(0.01438) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (0.4094) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (1.1627) * pow(getSMEFTCoeffEW("CHB"), 2.0)
                + (0.00456) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (0.378) * pow(getSMEFTCoeffEW("CHWB"), 2.0)
                + (0.001943) * pow(getSMEFTCoeffEW("CHl1R", 0, 0), 2.0)
                + (0.001583) * pow(getSMEFTCoeffEW("CHl1R", 1, 1), 2.0)
                + (0.005694) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.00575) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.000979) * pow(getSMEFTCoeffEW("CHeR", 0, 0), 2.0)
                + (0.0009751) * pow(getSMEFTCoeffEW("CHeR", 1, 1), 2.0)
                + (0.01079) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (-0.002848) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.004447) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHB")
                + (-0.005693) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                + (-0.0026556) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHWB")
                + (-0.00229) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.002115) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.00740797) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.007346) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.001997847) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (-0.002008333) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0146) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.23185) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHB")
                + (0.016075) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (-0.696823) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHWB")
                + (0.0014623) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.001441) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.000525) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.000586) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.001284) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.001275) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.002852) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.013314) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHD")
                + (-0.42542) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHWB")
                + (0.000223) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.000233) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.001511) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.001507) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0002824) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0002599) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.004446) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00184) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHWB")
                + (0.0016472) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0016545) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0043953) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0043919) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0016695) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0016726) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.002015) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.002499) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.002498) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0016531) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0016563) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0024083) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0024057) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.0026557) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00041) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0021669) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.002104) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00229) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.002018) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0021733) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.002115) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0034) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0019783) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.001986) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.0147319) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0019818) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.00198) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.01463445) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.001997847) * getSMEFTCoeffEW("CHeR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.002008333) * getSMEFTCoeffEW("CHeR", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.71) * pow(deltaGzd6(), 2.0));

        dwidth += cWsch * (
                +(-0.095) * deltaGzd6() * getSMEFTCoeffEW("CHbox")
                + (0.0101) * deltaGzd6() * getSMEFTCoeffEW("CHW")
                + (0.0301) * deltaGzd6() * getSMEFTCoeffEW("CHB")
                + (0.01178) * deltaGzd6() * getSMEFTCoeffEW("CHD")
                + (0.023) * deltaGzd6() * getSMEFTCoeffEW("CHWB")
                + (0.016) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0179) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0971) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.078) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.01439) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.01349) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.143) * deltaGzd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;

    }

    return dwidth;
}

const double NPSMEFTd6General::BrHZZ4fRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZZ4fRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZZ4fRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::BrHVVRatio() const {
    double BrZZSM = trueSM.computeBrHtoZZ(), BrWWSM = trueSM.computeBrHtoWW();

    return (BrZZSM * BrHZZRatio() + BrWWSM * BrHWWRatio()) / (BrZZSM + BrWWSM);
}

const double NPSMEFTd6General::GammaHZgaRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZgaRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZgaRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHZgaRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0;
    double muRG = 125.1;

    //  It includes modifications of Zff vertices and MW, but not on the pure VVV and VVVV vertices
    //  Write the tree-level contributions directly as a function 
    //  of delta_ZA (or deltaG1_hZA()) to account for variations of sw2 and cw
    /*dwidth += (-71769.02 * deltaG1_hZA()
            //            +14894914. *getSMEFTCoeff("CHB",muRG) 
            //            -14894913. * getSMEFTCoeff("CHW",muRG) 
            //            +9508089. * getSMEFTCoeff("CHWB",muRG) 
            + cLHd6 * (
            +120002. * getSMEFTCoeff("CHbox",muRG)
            + 50.12 * getSMEFTCoeff("CHl1R", 2, 2,muRG)
            + 17401. * getSMEFTCoeff("CHq1R", 2, 2,muRG)
            + 50.12 * getSMEFTCoeff("CHeR", 2, 2,muRG)
            + 17188.7 * getSMEFTCoeff("CHuR", 2, 2,muRG)
            + 212.376 * getSMEFTCoeff("CHdR", 2, 2,muRG)
            + 50.12 * getSMEFTCoeff("CHl3R", 2, 2,muRG)
            - 16976.3 * getSMEFTCoeff("CHq3R", 2, 2,muRG)
            - 373.856 * getSMEFTCoeff("CeHR", 2, 2,muRG)
            - 2953.05 * getSMEFTCoeff("CuHR", 1, 1,muRG)
            + 6636.34 * getSMEFTCoeff("CuHR", 2, 2,muRG)
            - 6121.66 * getSMEFTCoeff("CdHR", 2, 2,muRG)
            - 111254. * getSMEFTCoeff("CHD",muRG)
            - 162538. * getSMEFTCoeff("CHWB",muRG)
            - 96076.1 * delta_GF / v() / v()
            - 0.123 * deltaMwd6())
            );*/

    //AG:begin
    // Ref: https://arxiv.org/pdf/1903.12046.pdf
    double cHbox = getSMEFTCoeffEW("CHbox");
    double cHD = getSMEFTCoeffEW("CHD");
    double cHW = getSMEFTCoeffEW("CHW");
    double cHB = getSMEFTCoeffEW("CHB");
    double cHWB = getSMEFTCoeffEW("CHWB");
    double cW = getSMEFTCoeffEW("CW");
    double cHu33 = getSMEFTCoeffEW("CHuR", 2, 2);
    double cuH33 = getSMEFTCoeffEW("CuHR", 2, 2);
    double cdH33 = getSMEFTCoeffEW("CdHR", 2, 2);
    double cuB33 = getSMEFTCoeffEW("CuBR", 2, 2);
    double cuW22 = getSMEFTCoeffEW("CuWR", 1, 1);
    double cuW33 = getSMEFTCoeffEW("CuWR", 2, 2);
    double cdW33 = getSMEFTCoeffEW("CdWR", 2, 2);
    double cHq133 = getSMEFTCoeffEW("CHq1R", 2, 2);
    double cHq333 = getSMEFTCoeffEW("CHq3R", 2, 2);
    double cHl311 = getSMEFTCoeffEW("CHl3R", 0, 0);
    double cHl322 = getSMEFTCoeffEW("CHl3R", 1, 1);
    double cLL = getSMEFTCoeffEW("CllR", 0, 1, 1, 0);

    //dwidth += cWsch * (   // Allow it in both schemes until alpha is ready
    dwidth += (
            (-0.01 * cdH33
            - 0.01 * cdW33
            + 14.6799 * cHB
            + 0.12 * cHbox
            - 0.12 * cHD
            - 0.18 * cHl311
            - 0.18 * cHl322
            + 0.02 * cHq133
            - 0.02 * cHq333
            + 0.02 * cHu33
            - 14.7471 * cHW
            + 9.20962 * cHWB
            + 0.18 * cLL
            - 0.0745564 * cuB33
            + 0.01 * cuH33
            - 0.01 * cuW22
            + 0.461895 * cuW33
            - 0.0772181 * cW)*1000000
            );

    //std::cout<<"deltaG1_hZA()="<<deltaG1_hZA()<<std::endl;
    //std::cout<<"delta_GF="<<delta_GF<<std::endl;
    //std::cout<<"delta_AZ="<<delta_AZ<<std::endl;
    //std::cout<<"eeMz="<<eeMz<<std::endl;
    //std::cout<<"sW_tree="<<sW_tree<<std::endl;
    //std::cout<<"cW_tree="<<cW_tree<<std::endl;
    //std::cout<<"v2="<<v2<<std::endl;
    //std::cout<<"cAsch="<<cAsch<<std::endl;
    //std::cout<<"cWsch="<<cWsch<<std::endl;
    //std::cout<<"Mw_inp="<<Mw_inp<<std::endl;
    //std::cout<<"Mz="<<Mz<<std::endl;
    //std::cout<<"GF="<<GF<<std::endl;
    //std::cout<<"aleMz="<<aleMz<<std::endl;

    //AG:end

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (+1. * deltaa0()
            - 0.629 * deltaaMZ()
            + 2.629 * deltaGmu()
            - 4.926 * deltaMz()
            + 0.004 * deltaaSMZ()
            + 11.167 * deltaMh()
            + 0.013 * deltamt()
            + 0.004 * deltamb()
            + 0.001 * deltamc()
            + 0. * deltamtau());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZgaint + eHZgapar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaHZgaRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHZgaRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZgaRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZgaRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::BrHZgallRatio() const {
    double deltaBRratio;

    deltaBRratio = deltaGamma_Zf(leptons[ELECTRON])
            + deltaGamma_Zf(leptons[MU]);

    deltaBRratio = deltaBRratio /
            (trueSM.GammaZ(leptons[ELECTRON]) + trueSM.GammaZ(leptons[MU]));

    deltaBRratio = deltaBRratio - deltaGamma_Z() / trueSM.Gamma_Z();

    return ( BrHZgaRatio() + deltaBRratio);
}

const double NPSMEFTd6General::BrHZgaeeRatio() const {
    double deltaBRratio;

    deltaBRratio = deltaGamma_Zf(leptons[ELECTRON]) / (trueSM.GammaZ(leptons[ELECTRON]));

    deltaBRratio = deltaBRratio - deltaGamma_Z() / trueSM.Gamma_Z();

    return ( BrHZgaRatio() + deltaBRratio);
}

const double NPSMEFTd6General::BrHZgamumuRatio() const {
    double deltaBRratio;

    deltaBRratio = deltaGamma_Zf(leptons[MU]) / (trueSM.GammaZ(leptons[MU]));

    deltaBRratio = deltaBRratio - deltaGamma_Z() / trueSM.Gamma_Z();

    return ( BrHZgaRatio() + deltaBRratio);
}

const double NPSMEFTd6General::GammaHgagaRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHgagaRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHgagaRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHgagaRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0049;
    double muRG = 125.1;

    //  It does not include modifications of MW
    //  Write the tree-level contributions directly as a function 
    //  of delta_AA (or deltaG_hAA) to account for variations of sw2 and cw2
    /*dwidth += (-255156.97 * deltaG_hAA()
            //            -48314158. *getSMEFTCoeff("CHB",muRG) 
            //            -14510502. * getSMEFTCoeff("CHW",muRG) 
            //            +26477588. * getSMEFTCoeff("CHWB",muRG)  
            + cLHd6 * (
            +119766. * getSMEFTCoeff("CHbox",muRG)
            - 42565.7 * getSMEFTCoeff("CeHR", 2, 2,muRG)
            - 48868.1 * getSMEFTCoeff("CuHR", 1, 1,muRG)
            + 32078.2 * getSMEFTCoeff("CuHR", 2, 2,muRG)
            - 18428.3 * getSMEFTCoeff("CdHR", 2, 2,muRG)
            - 137452. * getSMEFTCoeff("CHD",muRG)
            - 235677. * getSMEFTCoeff("CHWB",muRG)
            - 124462. * delta_GF / v() / v()
            - 1.257 * deltaMwd6())
            );*/

    //AG:begin
    /*
     * Numeric parametrizations based on arXiV:1805.00302.
     * The analytical expressions were entered into a Mathematica notebook, and a numeric
     parametrization was obtained upon using the updated input values in the MW-scheme.
     * The contribution from eq.411 was rederived in the MW-scheme which now depends on cHD.
     * CKM=1. Pending to add the CKM into the cdH, coming from defining the SU2-doublet as (u,Vd).
     * Future improvement: change to analytic parametrization. 
     */
    double cHbox = getSMEFTCoeffEW("CHbox");
    double cHD = getSMEFTCoeffEW("CHD");
    double cHW = getSMEFTCoeffEW("CHW");
    double cHB = getSMEFTCoeffEW("CHB");
    double cHWB = getSMEFTCoeffEW("CHWB");
    double cW = getSMEFTCoeffEW("CW");
    double dgf = delta_GF;
    double ceH11 = getSMEFTCoeffEW("CeHR", 0, 0);
    double ceH22 = getSMEFTCoeffEW("CeHR", 1, 1);
    double ceH33 = getSMEFTCoeffEW("CeHR", 2, 2);
    double cuH11 = getSMEFTCoeffEW("CuHR", 0, 0);
    double cuH22 = getSMEFTCoeffEW("CuHR", 1, 1);
    double cuH33 = getSMEFTCoeffEW("CuHR", 2, 2);
    double cdH11 = getSMEFTCoeffEW("CdHR", 0, 0);
    double cdH22 = getSMEFTCoeffEW("CdHR", 1, 1);
    double cdH33 = getSMEFTCoeffEW("CdHR", 2, 2);
    double ceB11 = getSMEFTCoeffEW("CeBR", 0, 0);
    double ceB22 = getSMEFTCoeffEW("CeBR", 1, 1);
    double ceB33 = getSMEFTCoeffEW("CeBR", 2, 2);
    double ceW11 = getSMEFTCoeffEW("CeWR", 0, 0);
    double ceW22 = getSMEFTCoeffEW("CeWR", 1, 1);
    double ceW33 = getSMEFTCoeffEW("CeWR", 2, 2);
    double cuB11 = getSMEFTCoeffEW("CuBR", 0, 0);
    double cuB22 = getSMEFTCoeffEW("CuBR", 1, 1);
    double cuB33 = getSMEFTCoeffEW("CuBR", 2, 2);
    double cuW11 = getSMEFTCoeffEW("CuWR", 0, 0);
    double cuW22 = getSMEFTCoeffEW("CuWR", 1, 1);
    double cuW33 = getSMEFTCoeffEW("CuWR", 2, 2);
    double cdB11 = getSMEFTCoeffEW("CdBR", 0, 0);
    double cdB22 = getSMEFTCoeffEW("CdBR", 1, 1);
    double cdB33 = getSMEFTCoeffEW("CdBR", 2, 2);
    double cdW11 = getSMEFTCoeffEW("CdWR", 0, 0);
    double cdW22 = getSMEFTCoeffEW("CdWR", 1, 1);
    double cdW33 = getSMEFTCoeffEW("CdWR", 2, 2);

    /*double cHbox = 0.;
    double cHD = 0.;
    double cHW = 0.;
    double cHB = 0.;
    double cHWB = 0.;
    double cW = 0.;
    double dgf = 0.;
    double ceH11 = 0.;
    double ceH22 = 0.;
    double ceH33 = 0.;
    double cuH11 = 0.;
    double cuH22 = 0.;
    double cuH33 = 0.;
    double cdH11 = 0.;
    double cdH22 = 0.;
    double cdH33 = 0.;
    double ceB11=0.;
    double ceB22=0.;
    double ceB33=0.;
    double ceW11=1.;
    double ceW22=0.;
    double ceW33=0.;
    double cuB11=0.;
    double cuB22=0.;
    double cuB33=0.;
    double cuW11=0.;
    double cuW22=0.;
    double cuW33=0.;
    double cdB11=0.;
    double cdB22=0.;
    double cdB33=0.;
    double cdW11=0.;
    double cdW22=0.;
    double cdW33=0.;*/

    double MuS = mHl;
    double MuS2 = MuS*MuS;
    double MZ = Mz;
    double MZ2 = MZ*MZ;

    double deltaGammaHgaga_Prefactor, dGammaHgagaRatio_HiggsField;
    double dGammaHgagaRatio_Yukawa, dGammaHgagaRatio_dipoleOp;
    double dGammaHgagaRatio_cW;
    double dGammaHgaga_cHB, dGammaHgaga_cHW, dGammaHgaga_cHWB, dGammaHgagaRatio_tree;

    //-- Indirect effects from the theory-scheme prefactors:
    deltaGammaHgaga_Prefactor = (-0.211587 * cHD - 0.352136 * cHWB) * pow(1000, 2) - 0.181872 * dgf;

    //-- Indirect effect from Higgs-shift:
    dGammaHgagaRatio_HiggsField = sqrt(2)*(cHbox - cHD / 4.) / GF;

    //-- Insertions in fermion-loop:
    dGammaHgagaRatio_Yukawa =
            (-0.000257658 * cdH11 - 0.00248474 * cdH22 - 0.0186489 * cdH33
            - 0.000126593 * ceH11 - 0.00812649 * ceH22 - 0.0430632 * ceH33
            - 0.000562257 * cuH11 - 0.0493429 * cuH22 + 0.0342643 * cuH33) * pow(1000, 2);

    dGammaHgagaRatio_dipoleOp = (
            cuB33 * (1.863305361 - 0.828073331 * log(MuS2 / MZ2)) +
            cuW33 * (0.966911579 - 0.429706107 * log(MuS2 / MZ2)) +
            cuB22 * (-0.027127066 - 0.006102554 * log(MuS2 / MZ2)) +
            cdW33 * (-0.017084248 - 0.005211430 * log(MuS2 / MZ2)) +
            cuW22 * (-0.014076852 - 0.003166754 * log(MuS2 / MZ2)) +
            ceW33 * (-0.009110967 - 0.002215306 * log(MuS2 / MZ2)) +
            ceW22 * (-0.000912481 - 0.000131729 * log(MuS2 / MZ2)) +
            cdW22 * (-0.000820980 - 0.000116446 * log(MuS2 / MZ2)) +
            cuB11 * (-0.000147805 - 0.000010570 * log(MuS2 / MZ2)) +
            cdW11 * (-0.000065914 - 5.822339464e-6 * log(MuS2 / MZ2)) +
            cuW11 * (-0.000076699 - 5.485466633e-6 * log(MuS2 / MZ2)) +
            ceW11 * (-0.000011198 - 6.370897972e-7 * log(MuS2 / MZ2)) +
            ceB11 * (0.000021579 + 1.227716019e-6 * log(MuS2 / MZ2)) +
            cdB11 * (0.000127022 + 0.000011220 * log(MuS2 / MZ2)) +
            cdB22 * (0.001582086 + 0.000224401 * log(MuS2 / MZ2)) +
            ceB22 * (0.001758414 + 0.000253852 * log(MuS2 / MZ2)) +
            ceB33 * (0.01755746253200913 + 0.004269048861525898 * log(MuS2 / MZ2)) +
            cdB33 * (0.03292252565024579 + 0.010042785723792674 * log(MuS2 / MZ2))) * pow(1000, 2);

    //-- Insertions in boson-loop: 
    dGammaHgagaRatio_cW = (-0.0338638 * cW) * pow(1000, 2);

    //-- Tree-Level contributions:
    dGammaHgaga_cHB = (-45.2606 + 0.975724 * log(MuS2 / MZ2)) * pow(1000, 2);
    dGammaHgaga_cHW = (-13.0377 + 0.196935 * log(MuS2 / MZ2)) * pow(1000, 2);
    dGammaHgaga_cHWB = (24.4444 - 0.500946 * log(MuS2 / MZ2)) * pow(1000, 2);

    dGammaHgagaRatio_tree = dGammaHgaga_cHB * cHB + dGammaHgaga_cHW * cHW + dGammaHgaga_cHWB*cHWB;

    //--- TOTAL:
    dwidth += deltaGammaHgaga_Prefactor + dGammaHgagaRatio_HiggsField
            + dGammaHgagaRatio_Yukawa + dGammaHgagaRatio_dipoleOp
            + dGammaHgagaRatio_cW
            + dGammaHgagaRatio_tree;

    //std::cout<<"deltaGammaHgaga_Prefactor = "<<deltaGammaHgaga_Prefactor<<std::endl;
    //std::cout<<"dGammaZgagaRatio_HiggsField = "<<dGammaHgagaRatio_HiggsField<<std::endl;
    //std::cout<<"dGammaZgagaRatio_Yukawa = "<<dGammaHgagaRatio_Yukawa<<std::endl;
    //std::cout<<"dGammaHgagaRatio_dipoleOp = "<<dGammaHgagaRatio_dipoleOp<<std::endl;
    //std::cout<<"dGammaZgagaRatio_cW = "<<dGammaHgagaRatio_cW<<std::endl;
    //std::cout<<"dGammaHZgagaRatio_tree = "<<dGammaHgagaRatio_tree<<std::endl;
    //AG:end

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (+2. * deltaa0()
            + 0.27 * deltaaMZ()
            + 0.736 * deltaGmu()
            - 1.797 * deltaMz()
            + 0.02 * deltaaSMZ()
            + 4.195 * deltaMh()
            + 0.047 * deltamt()
            + 0.008 * deltamb()
            + 0.009 * deltamc()
            + 0.01 * deltamtau());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHgagaint + eHgagapar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaHgagaRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHgagaRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHgagaRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHgagaRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::deltaGammaHffRatio1(const double mf, const double CifH) const //AG:added
{
    double muRG = 125.1;
    
    double CiHbox = getSMEFTCoeff("CHbox",muRG);
    double CiHD = getSMEFTCoeff("CHD",muRG);

    return (-delta_GF + 2.0 * CiHbox * v2 - CiHD * v2 / 2.0 - pow(2.0, 0.5) * CifH * pow(v(), 3.0) / mf);
}

const double NPSMEFTd6General::deltaGammaHffRatio2(const double mf, const double CifH) const //AG:added
{
    double dwidth = 0.0;

    if (FlagQuadraticTerms) {
        double CiHbox = getSMEFTCoeffEW("CHbox");
        double CiHD = getSMEFTCoeffEW("CHD");

        dwidth += (pow(delta_GF, 2.0) - delta_GF_2 - CifH * delta_GF * pow(v(), 3.0) / pow(2.0, 0.5) / mf
                + 4.0 * pow(CiHbox, 2.0) * pow(v(), 4.0) - 2.0 * CiHbox * CiHD * pow(v(), 4.0) + pow(CiHD, 2.0) * pow(v(), 4.0) / 4.0
                - 2.0 * pow(2.0, 0.5) * CifH * CiHbox * pow(v(), 5.0) / mf + CifH * CiHD * pow(v(), 5.0) / pow(2.0, 0.5) / mf
                + pow(CifH, 2.0) * pow(v(), 6.0) / 2.0 / pow(mf, 2.0));
    }
    return dwidth;
}

const double NPSMEFTd6General::GammaHmumuRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHmumuRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHmumuRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHmumuRatio1() const //AG:modified
{
    double dwidth = 0.0;

    double C1 = 0.0;
    double muRG = 125.1;
    
    /*dwidth += (+121248. * getSMEFTCoeff("CHbox")
            - 199792511. * getSMEFTCoeff("CeHR", 1, 1)
            - 30312.1 * getSMEFTCoeff("CHD")
            - 60624.1 * delta_GF / v() / v());*/

    //AG:begin
    double mf = leptons[MU].getMass();
    double CifH = getSMEFTCoeff("CeHR", 1, 1,muRG);
    dwidth = deltaGammaHffRatio1(mf, CifH);
    //AG:end

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (+1. * deltaGmu()
            + 1. * deltaMh());
    
    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHmumuint + eHmumupar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaHmumuRatio2() const //AG:modified
{
    double dwidth = 0.0;

    if (FlagQuadraticTerms) {
        //AG:begin  
        double mf = leptons[MU].getMass();
        double CifH = getSMEFTCoeffEW("CeHR", 1, 1);
        dwidth += deltaGammaHffRatio2(mf, CifH);
        //AG:end 
    }
    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);
}

const double NPSMEFTd6General::BrHmumuRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHmumuRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHmumuRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaHtautauRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHtautauRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHtautauRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHtautauRatio1() const //AG:modified
{
    double dwidth = 0.0;

    double C1 = 0.0;
    double muRG = 125.1;
    
    /*dwidth += (+121248. * getSMEFTCoeff("CHbox")
            - 11880369. * getSMEFTCoeff("CeHR", 2, 2)
            - 30312.1 * getSMEFTCoeff("CHD")
            - 60624.1 * delta_GF / v() / v());*/
    //AG:begin
    double mf = leptons[TAU].getMass();
    double CifH = getSMEFTCoeff("CeHR", 2, 2,muRG);
    dwidth = deltaGammaHffRatio1(mf, CifH);
    //AG:end

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (+1. * deltaGmu()
            + 1.002 * deltaMh()
            + 1.998 * deltamtau());
    
    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHtautauint + eHtautaupar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaHtautauRatio2() const //AG:modified
{
    double dwidth = 0.0;

    if (FlagQuadraticTerms) {
        //AG:begin
        double mf = leptons[TAU].getMass();
        double CifH = getSMEFTCoeffEW("CeHR", 2, 2);
        dwidth += deltaGammaHffRatio2(mf, CifH);
        //AG:end   
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHtautauRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHtautauRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHtautauRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaHccRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHccRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHccRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHccRatio1() const //AG:modified
{
    double dwidth = 0.0;

    double C1 = 0.0;
    double muRG = 125.1;
    
    //if (FlagLoopHd6) {

    //    dwidth += (+121248. * getSMEFTCoeff("CHbox",muRG)
    //            - 16421890. * getSMEFTCoeff("CuHR", 1, 1,muRG)
    //            - 992.159 * getSMEFTCoeff("CuHR", 2, 2,muRG)
    //            - 30312.1 * getSMEFTCoeff("CHD",muRG)
    //            - 60624.1 * delta_GF / v() / v());

    //} else {

        /*dwidth += (+121248. * getSMEFTCoeff("CHbox")
                - 16556668. * getSMEFTCoeff("CuHR", 1, 1)
                - 30312.1 * getSMEFTCoeff("CHD")
                - 60624.1 * delta_GF / v() / v());*/

        //AG:begin
        double mf = quarks[CHARM].getMass();
        double CifH = getSMEFTCoeff("CuHR", 1, 1,muRG);
        dwidth = deltaGammaHffRatio1(mf, CifH);
        //AG:end

    //}

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (+1. * deltaGmu()
            - 0.789 * deltaaSMZ()
            + 1.004 * deltaMh()
            + 0.001 * deltamt()
            + 1.995 * deltamc());
    
    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHccint + eHccpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaHccRatio2() const //AG:modified
{
    double dwidth = 0.0;

    if (FlagQuadraticTerms) {
        //AG:begin
        double mf = quarks[CHARM].getMass();
        double CifH = getSMEFTCoeffEW("CuHR", 1, 1);
        dwidth += deltaGammaHffRatio2(mf, CifH);
        //AG:end
    }
    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);
}

const double NPSMEFTd6General::BrHccRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHccRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHccRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}


const double NPSMEFTd6General::GammaHssRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHssRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHssRatio2();
    }

    return width;

}

const double NPSMEFTd6General::deltaGammaHssRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0;
    double muRG = 125.1;
    
    //if (FlagLoopHd6) {

    //    dwidth += (+121248. * getSMEFTCoeff("CHbox",muRG)
    //            - 16421890. * getSMEFTCoeff("CuHR", 1, 1,muRG)
    //            - 992.159 * getSMEFTCoeff("CuHR", 2, 2,muRG)
    //            - 30312.1 * getSMEFTCoeff("CHD",muRG)
    //            - 60624.1 * delta_GF / v() / v());

    //} else {

        /*dwidth += (+121248. * getSMEFTCoeff("CHbox",muRG)
                - 16556668. * getSMEFTCoeff("CuHR", 1, 1,muRG)
                - 30312.1 * getSMEFTCoeff("CHD",muRG)
                - 60624.1 * delta_GF / v() / v());*/

    //    double mf = quarks[STRANGE].getMass();
    //    double CifH = getSMEFTCoeff("CdHR", 1, 1,muRG);
    //    dwidth = deltaGammaHffRatio1(mf, CifH);

    //}
    
        double mf = quarks[STRANGE].getMass();
        double CifH = getSMEFTCoeff("CdHR", 1, 1,muRG);
        dwidth = deltaGammaHffRatio1(mf, CifH);

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters. Not here    
    dwidth += cHSM * (0.);
        
    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHssint + eHsspar; // Defined but still not included as part of the model free parameters!

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaHssRatio2() const
{
    double dwidth = 0.0;

    if (FlagQuadraticTerms) {
        double mf = quarks[STRANGE].getMass();
        double CifH = getSMEFTCoeffEW("CdHR", 1, 1);
        dwidth += deltaGammaHffRatio2(mf, CifH);
    }
    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);
}

const double NPSMEFTd6General::BrHssRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHssRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHssRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}


const double NPSMEFTd6General::GammaHbbRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHbbRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHbbRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaHbbRatio1() const //AG:modified
{
    double dwidth = 0.0;

    double C1 = 0.0;
    double muRG = 125.1;
    
    //if (FlagLoopHd6) {

    //    dwidth += (+121248. * getSMEFTCoeff("CHbox",muRG)
    //            - 558.186 * getSMEFTCoeff("CuHR", 2, 2,muRG)
    //            - 5027051. * getSMEFTCoeff("CdHR", 2, 2,muRG)
    //            - 30312.1 * getSMEFTCoeff("CHD",muRG)
    //            - 60624.1 * delta_GF / v() / v());

    //} else {

        /*dwidth += (+121248. * getSMEFTCoeff("CHbox")
                - 5050180. * getSMEFTCoeff("CdHR", 2, 2)
                - 30312.1 * getSMEFTCoeff("CHD")
                - 60624.1 * delta_GF / v() / v());*/

        //AG:begin
        double mf = quarks[BOTTOM].getMass();
        double CifH = getSMEFTCoeff("CdHR", 2, 2,muRG);
        dwidth = deltaGammaHffRatio1(mf, CifH);
        //AG:end
    //}

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (+1. * deltaGmu()
            - 0.23 * deltaaSMZ()
            + 1.007 * deltaMh()
            + 0.001 * deltamt()
            + 1.992 * deltamb());
        
    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHbbint + eHbbpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaHbbRatio2() const //AG:modified
{
    double dwidth = 0.0;

    if (FlagQuadraticTerms) {
        //AG:begin
        double mf = leptons[BOTTOM].getMass();
        double CifH = getSMEFTCoeffEW("CdHR", 2, 2);
        dwidth += deltaGammaHffRatio2(mf, CifH);
        //AG:end
    }
    return ( dwidth);
}

const double NPSMEFTd6General::BrHbbRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHbbRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHbbRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2L2LRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2L2LRatio1
    double width = 1.0;

    width += deltaGammaH2L2LRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2L2LRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2L2LRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg
    
    dwidth += cAsch * (+121302. * getSMEFTCoeff("CHbox",muRG)
            - 59592.5 * getSMEFTCoeff("CHB",muRG)
            - 6187.97 * getSMEFTCoeff("CHW",muRG)
            + 42404.3 * (getSMEFTCoeff("CHl1R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 0, 0,muRG))
            + 42440.7 * (getSMEFTCoeff("CHl1R", 1, 1,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG))
            + 42633.3 * (getSMEFTCoeff("CHl1R", 2, 2,muRG) + getSMEFTCoeff("CHl3R", 2, 2,muRG))
            - 36384.4 * getSMEFTCoeff("CHeR", 0, 0,muRG)
            - 36395.3 * getSMEFTCoeff("CHeR", 1, 1,muRG)
            - 36589.1 * getSMEFTCoeff("CHeR", 2, 2,muRG)
            - 42519.3 * getSMEFTCoeff("CHD",muRG)
            - 112124. * getSMEFTCoeff("CHWB",muRG)
            - 3.401 * delta_GF
            - 0.836 * deltaGzd6()
            );
            /*+ cWsch * (-1940.8 * getSMEFTCoeff("CHD")
            - 23529. * getSMEFTCoeff("CHWB")
            - 3.002 * delta_GF
            - 0.836 * deltaGzd6()
            ));*/
    
    //------ Old alpha scheme expression: End

    // AG: 
    dwidth += cWsch * (
            ((0.12111) * getSMEFTCoeff("CHbox",muRG)
            + (0.00953) * getSMEFTCoeff("CHW",muRG)
            + (-0.0764) * getSMEFTCoeff("CHB",muRG)
            + (0.01008) * getSMEFTCoeff("CHD",muRG)
            + (-0.02236) * getSMEFTCoeff("CHWB",muRG)
            + (0.043324) * getSMEFTCoeff("CHl1R", 0, 0,muRG)
            + (0.043349) * getSMEFTCoeff("CHl1R", 1, 1,muRG)
            + (0.043607) * getSMEFTCoeff("CHl1R", 2, 2,muRG)
            + (-0.1385393) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.1385419) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.043607) * getSMEFTCoeff("CHl3R", 2, 2,muRG)
            + (-0.03486366) * getSMEFTCoeff("CHeR", 0, 0,muRG)
            + (-0.03493756) * getSMEFTCoeff("CHeR", 1, 1,muRG)
            + (-0.03507062) * getSMEFTCoeff("CHeR", 2, 2,muRG)
            + (0.18171) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            + (-0.815) * deltaGzd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-10.484 * deltaMz()
            + 16.233 * deltaMh()
            - 0.114 * deltaaMZ()
            + 2.278 * deltaGmu()))
            + cWsch * (cHSM * (-11.298 * deltaMz()
            + 16.233 * deltaMh()
            + 2.163 * deltaGmu()
            + 0.552 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2L2LRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {

        dwidth += cWsch * (
                +(0.014691) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (0.18009) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (0.48021) * pow(getSMEFTCoeffEW("CHB"), 2.0)
                + (0.0159) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (0.1418) * pow(getSMEFTCoeffEW("CHWB"), 2.0)
                + (0.0020415) * pow(getSMEFTCoeffEW("CHl1R", 0, 0), 2.0)
                + (0.0020419) * pow(getSMEFTCoeffEW("CHl1R", 1, 1), 2.0)
                + (0.0020604) * pow(getSMEFTCoeffEW("CHl1R", 2, 2), 2.0)
                + (0.007781) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.007808) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.0020604) * pow(getSMEFTCoeffEW("CHl3R", 2, 2), 2.0)
                + (0.0020398) * pow(getSMEFTCoeffEW("CHeR", 0, 0), 2.0)
                + (0.0020412) * pow(getSMEFTCoeffEW("CHeR", 1, 1), 2.0)
                + (0.0020619) * pow(getSMEFTCoeffEW("CHeR", 2, 2), 2.0)
                + (0.011019) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (0.001152) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.00926) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHB")
                + (-0.0024578) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                + (-0.002726) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHWB")
                + (0.0052648) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0052647) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0052995) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.0094343) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0094397) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0052995) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.004236321) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (-0.004237771) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.0042564489) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.014702) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.132391) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHB")
                + (0.044171) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (-0.2607976) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHWB")
                + (-0.00107) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.001071) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0013914) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0013727) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0013766) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.001152) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.046792) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHD")
                + (-0.190576) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHWB")
                + (-0.0046147) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.0046248) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.0046253) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.004583) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.004645) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0046253) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0017605) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0017583) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0017491) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.00926) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.003693) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHWB")
                + (0.0046375) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0046306) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0046353) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.003425) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.003419) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0046353) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0029378) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0029368) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0030038) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.001227) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0009464) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0009426) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0009911) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.003648) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.003656) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0009911) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0055397) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0055456) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0055823) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.002726) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.000181) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.000179) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.001181687) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.005088263) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.00017612) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.00014542) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.000140787) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.0052648) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.000183) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.005085178) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0011831968) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.00017606) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.000145462) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (-0.000140905) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.0052647) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.005124758) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.005119363) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0041247) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.000141677) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (-0.000141659) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0052995) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.000695) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.005099) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.004239) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0040937) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.004119) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.016786442) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.005125) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0040916) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0042405) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0041174) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.01678974) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.000141677) * getSMEFTCoeffEW("CHl3R", 2, 2) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (-0.000141659) * getSMEFTCoeffEW("CHl3R", 2, 2) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0052995) * getSMEFTCoeffEW("CHl3R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.000121) * getSMEFTCoeffEW("CHeR", 0, 0) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.000121) * getSMEFTCoeffEW("CHeR", 0, 0) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.004236321) * getSMEFTCoeffEW("CHeR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.000118) * getSMEFTCoeffEW("CHeR", 1, 1) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.004237771) * getSMEFTCoeffEW("CHeR", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0042564489) * getSMEFTCoeffEW("CHeR", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.72) * pow(deltaGzd6(), 2.0));

        dwidth += cWsch * (
                +(-0.0982) * deltaGzd6() * getSMEFTCoeffEW("CHbox")
                + (-0.0146) * deltaGzd6() * getSMEFTCoeffEW("CHW")
                + (0.0726) * deltaGzd6() * getSMEFTCoeffEW("CHB")
                + (-0.0063) * deltaGzd6() * getSMEFTCoeffEW("CHD")
                + (0.0262) * deltaGzd6() * getSMEFTCoeffEW("CHWB")
                + (-0.0381) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.0373) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.0384) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.1078) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.10943) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0384) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.03042) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.03003) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.03121) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.148) * deltaGzd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;

    }

    return dwidth;
}

const double NPSMEFTd6General::BrH2L2LRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2L2LRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2L2LRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2e2muRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2e2muRatio1
    double width = 1.0;

    width += deltaGammaH2e2muRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2e2muRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2e2muRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    dwidth += (+121249. * getSMEFTCoeff("CHbox",muRG)
            - 59336.7 * getSMEFTCoeff("CHB",muRG)
            - 7152.53 * getSMEFTCoeff("CHW",muRG)
            + 63753.6 * (getSMEFTCoeff("CHl1R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 0, 0,muRG))
            + 63771.3 * (getSMEFTCoeff("CHl1R", 1, 1,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG))
            - 54745.8 * getSMEFTCoeff("CHeR", 0, 0,muRG)
            - 54706. * getSMEFTCoeff("CHeR", 1, 1,muRG)
            + cAsch * (-42424.4 * getSMEFTCoeff("CHD",muRG)
            - 111863. * getSMEFTCoeff("CHWB",muRG)
            - 3.401 * delta_GF
            - 0.837 * deltaGzd6()
            )
            + cWsch * (-2206.38 * getSMEFTCoeff("CHD",muRG)
            - 23677.2 * getSMEFTCoeff("CHWB",muRG)
            - 3.001 * delta_GF
            - 0.837 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-10.452 * deltaMz()
            + 16.193 * deltaMh()
            - 0.096 * deltaaMZ()
            + 2.281 * deltaGmu()))
            + cWsch * (cHSM * (-11.25 * deltaMz()
            + 16.193 * deltaMh()
            + 2.17 * deltaGmu()
            + 0.522 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2e2muRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH2e2muRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2e2muRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2e2muRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2v2vRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2v2vRatio1
    double width = 1.0;

    width += deltaGammaH2v2vRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2v2vRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2v2vRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg
    dwidth += cAsch * (+121344. * getSMEFTCoeff("CHbox",muRG)
            - 14021.1 * getSMEFTCoeff("CHB",muRG)
            - 46733.1 * getSMEFTCoeff("CHW",muRG)
            - 39647.5 * (getSMEFTCoeff("CHl1R", 0, 0,muRG) - getSMEFTCoeff("CHl3R", 0, 0,muRG))
            - 39690.9 * (getSMEFTCoeff("CHl1R", 1, 1,muRG) - getSMEFTCoeff("CHl3R", 1, 1,muRG))
            - 39622.3 * (getSMEFTCoeff("CHl1R", 2, 2,muRG) - getSMEFTCoeff("CHl3R", 2, 2,muRG))
            - 30324.8 * getSMEFTCoeff("CHD",muRG)
            - 25575.1 * getSMEFTCoeff("CHWB",muRG)
            - 3.003 * delta_GF
            - 0.847 * deltaGzd6()
            );
            /*+ cWsch * (-30324.8 * getSMEFTCoeff("CHD")
            - 25575.1 * getSMEFTCoeff("CHWB")
            - 3.003 * delta_GF
            - 0.847 * deltaGzd6()
            ));*/
    
    //------ Old alpha scheme expression: End

    // AG: 
    dwidth += cWsch * (
            ((0.121319) * getSMEFTCoeff("CHbox",muRG)
            + (-0.0473339) * getSMEFTCoeff("CHW",muRG)
            + (-0.01358688) * getSMEFTCoeff("CHB",muRG)
            + (-0.0303464) * getSMEFTCoeff("CHD",muRG)
            + (-0.0253525) * getSMEFTCoeff("CHWB",muRG)
            + (-0.039647621) * getSMEFTCoeff("CHl1R", 0, 0,muRG)
            + (-0.03965331) * getSMEFTCoeff("CHl1R", 1, 1,muRG)
            + (-0.03967702) * getSMEFTCoeff("CHl1R", 2, 2,muRG)
            + (-0.14240624) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.14220981) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.03968) * getSMEFTCoeff("CHl3R", 2, 2,muRG)
            + (0.18201) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            + (-0.825) * deltaGzd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-10.87 * deltaMz()
            + 15.738 * deltaMh()
            + 0.292 * deltaaMZ()
            + 1.853 * deltaGmu()))
            + cWsch * (cHSM * (-8.952 * deltaMz()
            + 15.738 * deltaMh()
            + 2.164 * deltaGmu()
            - 1.149 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2v2vRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += cWsch * (
                +(0.014715) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (-0.00492776) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (-0.00157955) * pow(getSMEFTCoeffEW("CHB"), 2.0)
                + (-0.00091971) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (-0.00059168) * pow(getSMEFTCoeffEW("CHWB"), 2.0)
                + (0.0010428) * pow(getSMEFTCoeffEW("CHl1R", 0, 0), 2.0)
                + (0.0010396) * pow(getSMEFTCoeffEW("CHl1R", 1, 1), 2.0)
                + (0.0010413) * pow(getSMEFTCoeffEW("CHl1R", 2, 2), 2.0)
                + (0.007271) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.007277) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.0010413) * pow(getSMEFTCoeffEW("CHl3R", 2, 2), 2.0)
                + (0.011034) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (-0.00573523) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.001647119) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHB")
                + (-0.00735786) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                + (-0.00307385) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHWB")
                + (-0.004812955) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.004812852) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.004808936) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.009915377) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00990658) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.004811) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0147117) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00046464) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHB")
                + (0.00143336) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (-0.00374267) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHWB")
                + (0.0028723) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0028722) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.002873) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.0028623) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0028624) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00287322) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.00573523) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0022564) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHD")
                + (-0.001287724) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHWB")
                + (0.00082433) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.00082434) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.00082455) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.00082142) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.00082156) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.000824707) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.001647119) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0024896) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHWB")
                + (0.0037252) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0037252) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.003677513) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00153868) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.00153874) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.00153902) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.0015333) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.00153356) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00153952) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.00307385) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0001357) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0001341) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.002721) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0046768) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.000131172) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.004812955) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0001394) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.0046772) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0027206) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.000131214) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.004812852) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.004674) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0046785) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0020839) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.004808936) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.001553) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.004677) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.017264274) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.004686) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.017274024) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.004811) * getSMEFTCoeffEW("CHl3R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.7) * pow(deltaGzd6(), 2.0));

        dwidth += cWsch * (
                +(-0.1008) * deltaGzd6() * getSMEFTCoeffEW("CHbox")
                + (0.03623) * deltaGzd6() * getSMEFTCoeffEW("CHW")
                + (0.01039) * deltaGzd6() * getSMEFTCoeffEW("CHB")
                + (0.02495) * deltaGzd6() * getSMEFTCoeffEW("CHD")
                + (0.01941) * deltaGzd6() * getSMEFTCoeffEW("CHWB")
                + (0.0363) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.03548) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.03566) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.11278) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.11353) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0354) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.1512) * deltaGzd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH2v2vRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2v2vRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2v2vRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2L2vRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2L2vRatio1
    double width = 1.0;

    width += deltaGammaH2L2vRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2L2vRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2L2vRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;
    
    //------ Old alpha scheme expression: Beg
    dwidth += cAsch * (+121291. * getSMEFTCoeff("CHbox",muRG)
            - 35349.6 * getSMEFTCoeff("CHB",muRG)
            - 27095.7 * getSMEFTCoeff("CHW",muRG)
            + 3026.29 * getSMEFTCoeff("CHl1R", 0, 0,muRG)
            + 3021.87 * getSMEFTCoeff("CHl1R", 1, 1,muRG)
            + 2746.62 * getSMEFTCoeff("CHl1R", 2, 2,muRG)
            - 18924.3 * getSMEFTCoeff("CHeR", 0, 0,muRG)
            - 18918.4 * getSMEFTCoeff("CHeR", 1, 1,muRG)
            - 18820.4 * getSMEFTCoeff("CHeR", 2, 2,muRG)
            + 41085.2 * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + 41121.1 * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + 41134.2 * getSMEFTCoeff("CHl3R", 2, 2,muRG)
            - 36393. * getSMEFTCoeff("CHD",muRG)
            - 69325.9 * getSMEFTCoeff("CHWB",muRG)
            - 3.201 * delta_GF
            - 0.846 * deltaGzd6()
            );
            /*+ cWsch * (-16170.3 * getSMEFTCoeff("CHD")
            - 24273.2 * getSMEFTCoeff("CHWB")
            - 3. * delta_GF
            - 0.846 * deltaGzd6()
            ));*/
    
    //------ Old alpha scheme expression: End

    // AG: 
    dwidth += cWsch * (
            ((0.1213) * getSMEFTCoeff("CHbox",muRG)
            + (-0.01494) * getSMEFTCoeff("CHW",muRG)
            + (-0.040852) * getSMEFTCoeff("CHB",muRG)
            + (-0.009936) * getSMEFTCoeff("CHD",muRG)
            + (-0.023597) * getSMEFTCoeff("CHWB",muRG)
            + (0.003651) * getSMEFTCoeff("CHl1R", 0, 0,muRG)
            + (0.003794) * getSMEFTCoeff("CHl1R", 1, 1,muRG)
            + (0.003449) * getSMEFTCoeff("CHl1R", 2, 2,muRG)
            + (-0.139236) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.138049) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.041527) * getSMEFTCoeff("CHl3R", 2, 2,muRG)
            + (-0.0181637) * getSMEFTCoeff("CHeR", 0, 0,muRG)
            + (-0.0181476) * getSMEFTCoeff("CHeR", 1, 1,muRG)
            + (-0.0180375) * getSMEFTCoeff("CHeR", 2, 2,muRG)
            + (0.1819) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            + (-0.831) * deltaGzd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-10.683 * deltaMz()
            + 15.939 * deltaMh()
            + 0.095 * deltaaMZ()
            + 2.099 * deltaGmu()))
            + cWsch * (cHSM * (-10.108 * deltaMz()
            + 15.939 * deltaMh()
            + 2.178 * deltaGmu()
            - 0.402 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2L2vRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += cWsch * (
                +(0.0147) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (0.073334) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (0.070511) * pow(getSMEFTCoeffEW("CHB"), 2.0)
                + (0.00727) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (0.02474) * pow(getSMEFTCoeffEW("CHWB"), 2.0)
                + (0.0015651) * pow(getSMEFTCoeffEW("CHl1R", 0, 0), 2.0)
                + (0.0015665) * pow(getSMEFTCoeffEW("CHl1R", 1, 1), 2.0)
                + (0.0015709) * pow(getSMEFTCoeffEW("CHl1R", 2, 2), 2.0)
                + (0.00756) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.00754) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.0015709) * pow(getSMEFTCoeffEW("CHl3R", 2, 2), 2.0)
                + (0.0010729) * pow(getSMEFTCoeffEW("CHeR", 0, 0), 2.0)
                + (0.0010725) * pow(getSMEFTCoeffEW("CHeR", 1, 1), 2.0)
                + (0.0010717) * pow(getSMEFTCoeffEW("CHeR", 2, 2), 2.0)
                + (0.01103) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (-0.0018682) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.0049606) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHB")
                + (-0.0048972) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                + (-0.0028616) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHWB")
                + (0.0004288) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0004278) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0003926) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.00965737) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00965793) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0050567) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.00220467) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (-0.00220376) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.00219322) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.014703) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.1491845) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHB")
                + (0.021695) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (-0.0828173) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHWB")
                + (-0.0010147) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.0009678) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.0009749) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.0006629) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0006513) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0013712) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.00174) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0017382) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.001721) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.0018682) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0194976) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHD")
                + (0.075507) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHWB")
                + (0.0006084) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.000613) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0006208) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.0026763) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0026821) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0023806) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.0049606) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00292) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHWB")
                + (0.0014409) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0014413) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.001437) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.0035829) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0035822) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0023398) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.00193758) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.00193767) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0019465) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.0012277) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0019702) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0019726) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0019855) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.002644) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.002641) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00015) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.002477) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0024764) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0024663) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.0028616) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0001474) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.0001471) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.00072424) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0004297) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0004288) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0001487) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.0004276) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.00072447) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0004278) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.000397) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0003963) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.00113809) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0003926) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00109) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00492) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0022043) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0021427) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.00213396) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.01701421) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0049) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.00214211) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.00220462) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.00213375) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.017004442) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0050567) * getSMEFTCoeffEW("CHl3R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00220467) * getSMEFTCoeffEW("CHeR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00220376) * getSMEFTCoeffEW("CHeR", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00219322) * getSMEFTCoeffEW("CHeR", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.74) * pow(deltaGzd6(), 2.0));

        dwidth += cWsch * (
                +(-0.102) * deltaGzd6() * getSMEFTCoeffEW("CHbox")
                + (0.00348) * deltaGzd6() * getSMEFTCoeffEW("CHW")
                + (0.0282) * deltaGzd6() * getSMEFTCoeffEW("CHB")
                + (0.00716) * deltaGzd6() * getSMEFTCoeffEW("CHD")
                + (0.0178) * deltaGzd6() * getSMEFTCoeffEW("CHWB")
                + (-0.00316) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.00347) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.00309) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.107) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.11147) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.03691) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.01632) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0158) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.01655) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.154) * deltaGzd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH2L2vRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2L2vRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2L2vRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2L2v2Ratio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2L2v2Ratio1
    double width = 1.0;

    width += deltaGammaH2L2v2Ratio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2L2v2Ratio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2L2v2Ratio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    dwidth += (+121298. * getSMEFTCoeff("CHbox",muRG)
            - 35499.1 * getSMEFTCoeff("CHB",muRG)
            - 27241.9 * getSMEFTCoeff("CHW",muRG)
            + 18600.1 * getSMEFTCoeff("CHl1R", 0, 0,muRG)
            + 18562.6 * getSMEFTCoeff("CHl1R", 1, 1,muRG)
            - 28682. * getSMEFTCoeff("CHl1R", 2, 2,muRG)
            - 28294.2 * getSMEFTCoeff("CHeR", 0, 0,muRG)
            - 28285.3 * getSMEFTCoeff("CHeR", 1, 1,muRG)
            + 47342.8 * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + 47360.7 * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + 28708.8 * getSMEFTCoeff("CHl3R", 2, 2,muRG)
            + cAsch * (-36443.1 * getSMEFTCoeff("CHD",muRG)
            - 68837.8 * getSMEFTCoeff("CHWB",muRG)
            - 3.201 * delta_GF
            - 0.839 * deltaGzd6()
            )
            + cWsch * (-16226. * getSMEFTCoeff("CHD",muRG)
            - 24353. * getSMEFTCoeff("CHWB",muRG)
            - 3.002 * delta_GF
            - 0.839 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-10.697 * deltaMz()
            + 16.002 * deltaMh()
            + 0.083 * deltaaMZ()
            + 2.115 * deltaGmu()))
            + cWsch * (cHSM * (-10.137 * deltaMz()
            + 16.002 * deltaMh()
            + 2.179 * deltaGmu()
            - 0.466 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2L2v2Ratio2() const {
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

const double NPSMEFTd6General::BrH2L2v2Ratio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2L2v2Ratio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2L2v2Ratio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2e2vRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2e2vRatio1
    double width = 1.0;

    width += deltaGammaH2e2vRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2e2vRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2e2vRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    dwidth += (+121287. * getSMEFTCoeff("CHbox",muRG)
            - 35405.9 * getSMEFTCoeff("CHB",muRG)
            - 27195.5 * getSMEFTCoeff("CHW",muRG)
            + 65790.6 * (getSMEFTCoeff("CHl1R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 0, 0,muRG))
            - 28690.7 * (getSMEFTCoeff("CHl1R", 1, 1,muRG) - getSMEFTCoeff("CHl3R", 1, 1,muRG))
            - 28703.9 * (getSMEFTCoeff("CHl1R", 2, 2,muRG) - getSMEFTCoeff("CHl3R", 2, 2,muRG))
            - 56575.7 * getSMEFTCoeff("CHeR", 0, 0,muRG)
            + cAsch * (-36350.8 * getSMEFTCoeff("CHD",muRG)
            - 68896.2 * getSMEFTCoeff("CHWB",muRG)
            - 3.199 * delta_GF
            - 0.846 * deltaGzd6())
            + cWsch * (-16304.9 * getSMEFTCoeff("CHD",muRG)
            - 24376.4 * getSMEFTCoeff("CHWB",muRG)
            - 3. * delta_GF
            - 0.846 * deltaGzd6())
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (cAsch * (-10.705 * deltaMz()
            + 15.922 * deltaMh()
            + 0.079 * deltaaMZ()
            + 2.103 * deltaGmu())
            + cWsch * (
            -10.099 * deltaMz()
            + 15.922 * deltaMh()
            + 2.191 * deltaGmu()
            - 0.445 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2e2vRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH2e2vRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2e2vRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2e2vRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2mu2vRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2mu2vRatio1
    double width = 1.0;

    width += deltaGammaH2mu2vRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2mu2vRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2mu2vRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    dwidth += (+121291. * getSMEFTCoeff("CHbox",muRG)
            - 35658.4 * getSMEFTCoeff("CHB",muRG)
            - 26866.3 * getSMEFTCoeff("CHW",muRG)
            - 28684.4 * (getSMEFTCoeff("CHl1R", 0, 0,muRG) - getSMEFTCoeff("CHl3R", 0, 0,muRG))
            + 65832. * (getSMEFTCoeff("CHl1R", 1, 1,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG))
            - 28703.3 * (getSMEFTCoeff("CHl1R", 2, 2,muRG) - getSMEFTCoeff("CHl3R", 2, 2,muRG))
            - 56559.6 * getSMEFTCoeff("CHeR", 1, 1,muRG)
            + cAsch * (-36391.6 * getSMEFTCoeff("CHD",muRG)
            - 69347.6 * getSMEFTCoeff("CHWB",muRG)
            - 3.198 * delta_GF
            - 0.842 * deltaGzd6())
            + cWsch * (-16131.8 * getSMEFTCoeff("CHD",muRG)
            - 24298.9 * getSMEFTCoeff("CHWB",muRG)
            - 3. * delta_GF
            - 0.842 * deltaGzd6())
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (cAsch * (-10.716 * deltaMz()
            + 15.962 * deltaMh()
            + 0.082 * deltaaMZ()
            + 2.075 * deltaGmu())
            + cWsch * (-10.13 * deltaMz()
            + 15.962 * deltaMh()
            + 2.177 * deltaGmu()
            - 0.489 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2mu2vRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH2mu2vRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2mu2vRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2mu2vRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2u2uRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2u2uRatio1
    double width = 1.0;

    width += deltaGammaH2u2uRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2u2uRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2u2uRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg
    dwidth += cAsch * (+121242. * getSMEFTCoeff("CHbox",muRG)
            - 147406. * getSMEFTCoeff("CHB",muRG)
            + 73926.6 * getSMEFTCoeff("CHW",muRG)
            - 71435.3 * (getSMEFTCoeff("CHq1R", 0, 0,muRG) - getSMEFTCoeff("CHq3R", 0, 0,muRG))
            - 71331.9 * (getSMEFTCoeff("CHq1R", 1, 1,muRG) - getSMEFTCoeff("CHq3R", 1, 1,muRG))
            + 31760.4 * getSMEFTCoeff("CHuR", 0, 0,muRG)
            + 31666.6 * getSMEFTCoeff("CHuR", 1, 1,muRG)
            - 66129.8 * getSMEFTCoeff("CHD",muRG)
            - 270623. * getSMEFTCoeff("CHWB",muRG)
            - 4.182 * delta_GF
            - 0.827 * deltaGzd6()
            );
            /*+ cWsch * (+53075.8 * getSMEFTCoeff("CHD")
            - 9701.32 * getSMEFTCoeff("CHWB")
            - 3.002 * delta_GF
            - 0.827 * deltaGzd6()
            ));*/
    
    //------ Old alpha scheme expression: End

    // AG: 
    dwidth += cWsch * (
            ((0.121221) * getSMEFTCoeff("CHbox",muRG)
            + (0.0747) * getSMEFTCoeff("CHW",muRG)
            + (-0.148967) * getSMEFTCoeff("CHB",muRG)
            + (0.057368) * getSMEFTCoeff("CHD",muRG)
            + (-0.011196) * getSMEFTCoeff("CHWB",muRG)
            + (-0.071576) * getSMEFTCoeff("CHq1R", 0, 0,muRG)
            + (-0.071476) * getSMEFTCoeff("CHq1R", 1, 1,muRG)
            + (0.071574) * getSMEFTCoeff("CHq3R", 0, 0,muRG)
            + (0.071473) * getSMEFTCoeff("CHq3R", 1, 1,muRG)
            + (0.030282) * getSMEFTCoeff("CHuR", 0, 0,muRG)
            + (0.030178) * getSMEFTCoeff("CHuR", 1, 1,muRG)
            + (-0.181763) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.181763) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.18186) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            + (-0.801) * deltaGzd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.043 * deltaMz()
            + 16.707 * deltaMh()
            - 0.908 * deltaaMZ()
            + 3.065 * deltaGmu()))
            + cWsch * (cHSM * (-15.04 * deltaMz()
            + 16.707 * deltaMh()
            + 2.177 * deltaGmu()
            + 4.215 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2u2uRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        dwidth += cWsch * (
                +(0.014716) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (0.06274) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (0.09129) * pow(getSMEFTCoeffEW("CHB"), 2.0)
                + (0.00513) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (0.026875) * pow(getSMEFTCoeffEW("CHWB"), 2.0)
                + (0.002647) * pow(getSMEFTCoeffEW("CHq1R", 0, 0), 2.0)
                + (0.0026461) * pow(getSMEFTCoeffEW("CHq1R", 1, 1), 2.0)
                + (0.002647) * pow(getSMEFTCoeffEW("CHq3R", 0, 0), 2.0)
                + (0.0026461) * pow(getSMEFTCoeffEW("CHq3R", 1, 1), 2.0)
                + (0.002648) * pow(getSMEFTCoeffEW("CHuR", 0, 0), 2.0)
                + (0.0026461) * pow(getSMEFTCoeffEW("CHuR", 1, 1), 2.0)
                + (0.011037) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.011037) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.011034) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (0.009076) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.018068) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHB")
                + (0.0032896) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                + (-0.001344) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHWB")
                + (-0.00868253) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.00867303) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0086747) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.00867) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0036743) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (0.0036607) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.0147042) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0147042) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.014712) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0860094) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHB")
                + (0.004936) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (-0.0862249) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHWB")
                + (-0.0043116) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.0041397) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0043074) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.00415) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0009706) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (0.0009075) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.009046) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.009046) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.009076) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0086983) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHD")
                + (0.013604) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHWB")
                + (0.011699) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.01154) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0117092) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.011543) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0032871) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.0032289) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.01807) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.01807) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.018068) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0023272) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHWB")
                + (-0.00645833) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.00643743) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0064561) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0064367) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.00182137) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.00184267) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.0069681) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0069681) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0069646) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0023122) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.0022494) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0023093) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0022472) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.00547273) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.00542879) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.001348) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.001348) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.001344) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.000569) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.005300265) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00057357) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.00023902) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.008675) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.008675) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00868253) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00057357) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00529391) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.00024275) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (0.0086683) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0086683) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00867303) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.000569) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.00023907) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.0086817) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0086817) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0086747) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00024302) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.0086672) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0086672) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.00867) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.000101) * getSMEFTCoeffEW("CHuR", 0, 0) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.00367303) * getSMEFTCoeffEW("CHuR", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00367303) * getSMEFTCoeffEW("CHuR", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0036743) * getSMEFTCoeffEW("CHuR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00365915) * getSMEFTCoeffEW("CHuR", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00365915) * getSMEFTCoeffEW("CHuR", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0036607) * getSMEFTCoeffEW("CHuR", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.01099) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0220568) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0220568) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.7) * pow(deltaGzd6(), 2.0));

        dwidth += cWsch * (
                +(-0.0987) * deltaGzd6() * getSMEFTCoeffEW("CHbox")
                + (-0.0818) * deltaGzd6() * getSMEFTCoeffEW("CHW")
                + (0.1374) * deltaGzd6() * getSMEFTCoeffEW("CHB")
                + (-0.0456) * deltaGzd6() * getSMEFTCoeffEW("CHD")
                + (0.024) * deltaGzd6() * getSMEFTCoeffEW("CHWB")
                + (0.06193) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.06291) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0627) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0646) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0272) * deltaGzd6() * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.02668) * deltaGzd6() * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.14658) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.14658) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.1481) * deltaGzd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH2u2uRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2u2uRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2u2uRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2d2dRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2d2dRatio1
    double width = 1.0;

    width += deltaGammaH2d2dRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2d2dRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2d2dRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg
    dwidth += cAsch * (+121209. * getSMEFTCoeff("CHbox",muRG)
            - 109493. * getSMEFTCoeff("CHB",muRG)
            + 40559.6 * getSMEFTCoeff("CHW",muRG)
            + 43704.5 * (getSMEFTCoeff("CHq1R", 0, 0,muRG) + getSMEFTCoeff("CHq3R", 0, 0,muRG))
            + 43686.8 * (getSMEFTCoeff("CHq1R", 1, 1,muRG) + getSMEFTCoeff("CHq3R", 1, 1,muRG))
            + 48405. * (getSMEFTCoeff("CHq1R", 2, 2,muRG) + getSMEFTCoeff("CHq3R", 2, 2,muRG))
            - 7957.66 * getSMEFTCoeff("CHdR", 0, 0,muRG)
            - 7942.9 * getSMEFTCoeff("CHdR", 1, 1,muRG)
            - 8231.05 * getSMEFTCoeff("CHdR", 2, 2,muRG)
            - 55688.4 * getSMEFTCoeff("CHD",muRG)
            - 202420. * getSMEFTCoeff("CHWB",muRG)
            - 3.837 * delta_GF
            - 0.829 * deltaGzd6()
            );
            /*+ cWsch * (+28762.7 * getSMEFTCoeff("CHD")
            - 17533.6 * getSMEFTCoeff("CHWB")
            - 3. * delta_GF
            - 0.829 * deltaGzd6()
            ));*/

    //------ Old alpha scheme expression: End
    
    // AG: 
    dwidth += cWsch * (
            ((0.12095) * getSMEFTCoeff("CHbox",muRG)
            + (0.037885) * getSMEFTCoeff("CHW",muRG)
            + (-0.106698) * getSMEFTCoeff("CHB",muRG)
            + (0.029535) * getSMEFTCoeff("CHD",muRG)
            + (-0.0189127) * getSMEFTCoeff("CHWB",muRG)
            + (0.0435) * getSMEFTCoeff("CHq1R", 0, 0,muRG)
            + (0.043466) * getSMEFTCoeff("CHq1R", 1, 1,muRG)
            + (0.048137) * getSMEFTCoeff("CHq1R", 2, 2,muRG)
            + (0.0435) * getSMEFTCoeff("CHq3R", 0, 0,muRG)
            + (0.043466) * getSMEFTCoeff("CHq3R", 1, 1,muRG)
            + (0.048137) * getSMEFTCoeff("CHq3R", 2, 2,muRG)
            + (-0.007595) * getSMEFTCoeff("CHdR", 0, 0,muRG)
            + (-0.0075958) * getSMEFTCoeff("CHdR", 1, 1,muRG)
            + (-0.0078264) * getSMEFTCoeff("CHdR", 2, 2,muRG)
            + (-0.181359) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.181359) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.18142) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            + (-0.826) * deltaGzd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.78 * deltaMz()
            + 16.533 * deltaMh()
            - 0.55 * deltaaMZ()
            + 2.769 * deltaGmu()))
            + cWsch * (cHSM * (-13.39 * deltaMz()
            + 16.533 * deltaMh()
            + 2.228 * deltaGmu()
            + 2.601 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2d2dRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        dwidth += cWsch * (
                +(0.014652) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (0.013992) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (0.002345) * pow(getSMEFTCoeffEW("CHB"), 2.0)
                + (-0.00049844) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (0.0024799) * pow(getSMEFTCoeffEW("CHWB"), 2.0)
                + (0.0013233) * pow(getSMEFTCoeffEW("CHq1R", 0, 0), 2.0)
                + (0.001324) * pow(getSMEFTCoeffEW("CHq1R", 1, 1), 2.0)
                + (0.0014861) * pow(getSMEFTCoeffEW("CHq1R", 2, 2), 2.0)
                + (0.0013233) * pow(getSMEFTCoeffEW("CHq3R", 0, 0), 2.0)
                + (0.001324) * pow(getSMEFTCoeffEW("CHq3R", 1, 1), 2.0)
                + (0.0014861) * pow(getSMEFTCoeffEW("CHq3R", 2, 2), 2.0)
                + (0.0013225) * pow(getSMEFTCoeffEW("CHdR", 0, 0), 2.0)
                + (0.0013239) * pow(getSMEFTCoeffEW("CHdR", 1, 1), 2.0)
                + (0.001485) * pow(getSMEFTCoeffEW("CHdR", 2, 2), 2.0)
                + (0.010987) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.010987) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.010987) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (0.0046) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.0129346) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHB")
                + (-0.0022905) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHWB")
                + (0.0052759) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.0052737) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0058395) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.0052759) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0052737) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0058395) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.000921702) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (-0.000921711) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.000948092) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (-0.0146752) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0146752) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.014678) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0200055) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHB")
                + (-0.0067433) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (-0.0310973) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHWB")
                + (0.0006793) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.0006842) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0007669) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.0006793) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0006842) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0007669) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.0045821) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0045815) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0046) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.007028) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHD")
                + (0.017325) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHWB")
                + (-0.00504565) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.00504237) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.00550773) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.00504565) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00504237) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.00550773) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.0005692) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.0005693) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.0005646) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (0.012951) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.012951) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0129346) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0023514) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHWB")
                + (0.0022438) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.0022464) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0022931) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.0022438) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0022464) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0022931) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.000551) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.00055081) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.00072654) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (-0.0035825) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0035825) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0035844) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00212189) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.00212373) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.00232565) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.00212189) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00212373) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.00232565) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.0012709) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.0012722) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.0013618) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (0.0022976) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0022976) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0022905) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00016) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.000192) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.0026472) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.00015973) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.00019157) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.0052765) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0052765) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0052759) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.000191) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.00015973) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0026472) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.00019165) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.00527248) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00527248) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0052737) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00019157) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.00019165) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0029704) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.00584244) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00584244) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0058395) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00016) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.000192) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.0052765) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0052765) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0052759) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.000191) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.00527248) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00527248) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0052737) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00584244) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00584244) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0058395) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00092155) * getSMEFTCoeffEW("CHdR", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.00092155) * getSMEFTCoeffEW("CHdR", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.000827894) * getSMEFTCoeffEW("CHdR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00092121) * getSMEFTCoeffEW("CHdR", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.00092121) * getSMEFTCoeffEW("CHdR", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.000921711) * getSMEFTCoeffEW("CHdR", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.000949) * getSMEFTCoeffEW("CHdR", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.000949) * getSMEFTCoeffEW("CHdR", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.000948092) * getSMEFTCoeffEW("CHdR", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.01105) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.02200835) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.02200835) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.74) * pow(deltaGzd6(), 2.0));

        dwidth += cWsch * (
                +(-0.0955) * deltaGzd6() * getSMEFTCoeffEW("CHbox")
                + (-0.0433) * deltaGzd6() * getSMEFTCoeffEW("CHW")
                + (0.09154) * deltaGzd6() * getSMEFTCoeffEW("CHB")
                + (-0.02254) * deltaGzd6() * getSMEFTCoeffEW("CHD")
                + (0.02369) * deltaGzd6() * getSMEFTCoeffEW("CHWB")
                + (-0.0382) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.0376) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0424) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.0382) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0376) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0424) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.006704) * deltaGzd6() * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.006547) * deltaGzd6() * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.007081) * deltaGzd6() * getSMEFTCoeffEW("CHdR", 2, 2)
                + (0.1461) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.1461) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.1433) * deltaGzd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH2d2dRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2d2dRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2d2dRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2u2dRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2u2dRatio1
    double width = 1.0;

    width += deltaGammaH2u2dRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2u2dRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2u2dRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg
    dwidth += cAsch * (+121245. * getSMEFTCoeff("CHbox",muRG)
            - 129896. * getSMEFTCoeff("CHB",muRG)
            + 58951.9 * getSMEFTCoeff("CHW",muRG)
            - 18953.2 * getSMEFTCoeff("CHq1R", 0, 0,muRG)
            - 18954.1 * getSMEFTCoeff("CHq1R", 1, 1,muRG)
            + 36775. * getSMEFTCoeff("CHq1R", 2, 2,muRG)
            + 15639.1 * getSMEFTCoeff("CHuR", 0, 0,muRG)
            + 15598.5 * getSMEFTCoeff("CHuR", 1, 1,muRG)
            - 2951.74 * getSMEFTCoeff("CHdR", 0, 0,muRG)
            - 2940.03 * getSMEFTCoeff("CHdR", 1, 1,muRG)
            - 6238.49 * getSMEFTCoeff("CHdR", 2, 2,muRG)
            + 51319. * getSMEFTCoeff("CHq3R", 0, 0,muRG)
            + 51289.2 * getSMEFTCoeff("CHq3R", 1, 1,muRG)
            + 36755.6 * getSMEFTCoeff("CHq3R", 2, 2,muRG)
            - 60973.2 * getSMEFTCoeff("CHD",muRG)
            - 238821. * getSMEFTCoeff("CHWB",muRG)
            - 4.013 * delta_GF
            - 0.832 * deltaGzd6()
            );
            /*+ cWsch * (+41194.1 * getSMEFTCoeff("CHD")
            - 14774.7 * getSMEFTCoeff("CHWB")
            - 3.001 * delta_GF
            - 0.832 * deltaGzd6()
            ));*/
    
    //------ Old alpha scheme expression: End

    // AG: 
    dwidth += cWsch * (
            ((0.1212) * getSMEFTCoeff("CHbox",muRG)
            + (0.057954) * getSMEFTCoeff("CHW",muRG)
            + (-0.12929) * getSMEFTCoeff("CHB",muRG)
            + (0.043672) * getSMEFTCoeff("CHD",muRG)
            + (-0.016284) * getSMEFTCoeff("CHWB",muRG)
            + (-0.019017) * getSMEFTCoeff("CHq1R", 0, 0,muRG)
            + (-0.019103) * getSMEFTCoeff("CHq1R", 1, 1,muRG)
            + (0.036608) * getSMEFTCoeff("CHq1R", 2, 2,muRG)
            + (0.051357) * getSMEFTCoeff("CHq3R", 0, 0,muRG)
            + (0.051276) * getSMEFTCoeff("CHq3R", 1, 1,muRG)
            + (0.036608) * getSMEFTCoeff("CHq3R", 2, 2,muRG)
            + (0.014886) * getSMEFTCoeff("CHuR", 0, 0,muRG)
            + (0.014851) * getSMEFTCoeff("CHuR", 1, 1,muRG)
            + (-0.002823638) * getSMEFTCoeff("CHdR", 0, 0,muRG)
            + (-0.002812766) * getSMEFTCoeff("CHdR", 1, 1,muRG)
            + (-0.00594515) * getSMEFTCoeff("CHdR", 2, 2,muRG)
            + (-0.181783) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.181783) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.18182) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            + (-0.802) * deltaGzd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.34 * deltaMz()
            + 16.613 * deltaMh()
            - 0.716 * deltaaMZ()
            + 2.838 * deltaGmu()))
            + cWsch * (cHSM * (-14.238 * deltaMz()
            + 16.613 * deltaMh()
            + 2.133 * deltaGmu()
            + 3.346 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2u2dRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        dwidth += cWsch * (
                +(0.014695) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (0.039324) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (0.033113) * pow(getSMEFTCoeffEW("CHB"), 2.0)
                + (0.0022317) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (0.011348) * pow(getSMEFTCoeffEW("CHWB"), 2.0)
                + (0.00179) * pow(getSMEFTCoeffEW("CHq1R", 0, 0), 2.0)
                + (0.0017897) * pow(getSMEFTCoeffEW("CHq1R", 1, 1), 2.0)
                + (0.00113) * pow(getSMEFTCoeffEW("CHq1R", 2, 2), 2.0)
                + (0.00179) * pow(getSMEFTCoeffEW("CHq3R", 0, 0), 2.0)
                + (0.0017897) * pow(getSMEFTCoeffEW("CHq3R", 1, 1), 2.0)
                + (0.00113) * pow(getSMEFTCoeffEW("CHq3R", 2, 2), 2.0)
                + (0.001296) * pow(getSMEFTCoeffEW("CHuR", 0, 0), 2.0)
                + (0.0012961) * pow(getSMEFTCoeffEW("CHuR", 1, 1), 2.0)
                + (0.00049373) * pow(getSMEFTCoeffEW("CHdR", 0, 0), 2.0)
                + (0.00049057) * pow(getSMEFTCoeffEW("CHdR", 1, 1), 2.0)
                + (0.0011314) * pow(getSMEFTCoeffEW("CHdR", 2, 2), 2.0)
                + (0.011019) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.011019) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.011019) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (0.006886) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.015571) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHB")
                + (0.0016252) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                + (-0.0019574) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHWB")
                + (-0.002309) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.0023147) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0044402) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.0062245) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0062191) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0044402) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.0018054) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (0.0018013) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.0003419172) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (-0.000340856) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.000721154) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (-0.0147031) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0147031) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.014698) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0642138) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHB")
                + (-0.000834) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (-0.0573053) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHWB")
                + (0.0001529) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.0001488) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0021791) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.0016906) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0016234) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0021791) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.0001656) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.0001627) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.0002752) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (-0.0068912) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0068912) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.006886) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.000459) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHD")
                + (0.033411) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHWB")
                + (0.0019038) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.0019508) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0057366) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.0068118) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0067877) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0057366) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.00111553) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.00111376) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.00031123) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.00030304) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.0006683) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (0.015629) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.015629) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.015571) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0027622) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHWB")
                + (-0.0017088) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.0017166) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0022723) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.003769) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0037624) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0022723) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.00107784) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.00108799) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.00016963) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.0001701) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.00046646) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (-0.0052936) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0052936) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0052919) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0021911) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.0017537) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0017338) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0021911) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.00248676) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.00248368) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.00050869) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.00050349) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.0011318) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (0.0019662) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0019662) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0019574) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.000259) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.000154) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.0016047) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00015498) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.0023037) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0023037) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.002309) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.000154) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.0016123) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.00015353) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.0023125) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0023125) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0023147) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00015503) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.00015329) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0022593) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.004436654) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.004436654) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0044402) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.000259) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.000156) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.00622384) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00622384) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0062245) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.000154) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.00621958) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00621958) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0062191) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.004436654) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.004436654) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0044402) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00180408) * getSMEFTCoeffEW("CHuR", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00180408) * getSMEFTCoeffEW("CHuR", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0018054) * getSMEFTCoeffEW("CHuR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00180249) * getSMEFTCoeffEW("CHuR", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00180249) * getSMEFTCoeffEW("CHuR", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0018013) * getSMEFTCoeffEW("CHuR", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00034209) * getSMEFTCoeffEW("CHdR", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.00034209) * getSMEFTCoeffEW("CHdR", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0003419172) * getSMEFTCoeffEW("CHdR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00034101) * getSMEFTCoeffEW("CHdR", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.00034101) * getSMEFTCoeffEW("CHdR", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.000340856) * getSMEFTCoeffEW("CHdR", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0007216) * getSMEFTCoeffEW("CHdR", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0007216) * getSMEFTCoeffEW("CHdR", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.000721154) * getSMEFTCoeffEW("CHdR", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.01104) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0220565) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0220565) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.66) * pow(deltaGzd6(), 2.0));

        dwidth += cWsch * (
                +(-0.0999) * deltaGzd6() * getSMEFTCoeffEW("CHbox")
                + (-0.0604) * deltaGzd6() * getSMEFTCoeffEW("CHW")
                + (0.1133) * deltaGzd6() * getSMEFTCoeffEW("CHB")
                + (-0.0362) * deltaGzd6() * getSMEFTCoeffEW("CHD")
                + (0.0245) * deltaGzd6() * getSMEFTCoeffEW("CHWB")
                + (0.01605) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.01555) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0326) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.0458) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0465) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0326) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.01307) * deltaGzd6() * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.01299) * deltaGzd6() * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.0025172) * deltaGzd6() * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.0023751) * deltaGzd6() * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.005281) * deltaGzd6() * getSMEFTCoeffEW("CHdR", 2, 2)
                + (0.14682) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.14682) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.1499) * deltaGzd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH2u2dRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2u2dRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2u2dRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2L2uRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2L2uRatio1
    double width = 1.0;

    width += deltaGammaH2L2uRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2L2uRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2L2uRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg
    dwidth += cAsch * (+121251. * getSMEFTCoeff("CHbox",muRG)
            - 103956. * getSMEFTCoeff("CHB",muRG)
            + 35760.1 * getSMEFTCoeff("CHW",muRG)
            + 21276.1 * (getSMEFTCoeff("CHl1R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 0, 0,muRG))
            + 21284.8 * (getSMEFTCoeff("CHl1R", 1, 1,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG))
            + 21179.4 * (getSMEFTCoeff("CHl1R", 2, 2,muRG) + getSMEFTCoeff("CHl3R", 2, 2,muRG))
            - 35906.7 * (getSMEFTCoeff("CHq1R", 0, 0,muRG) - getSMEFTCoeff("CHq3R", 0, 0,muRG))
            - 35849.3 * (getSMEFTCoeff("CHq1R", 1, 1,muRG) - getSMEFTCoeff("CHq3R", 1, 1,muRG))
            - 18274.6 * getSMEFTCoeff("CHeR", 0, 0,muRG)
            - 18258.1 * getSMEFTCoeff("CHeR", 1, 1,muRG)
            - 18170.5 * getSMEFTCoeff("CHeR", 2, 2,muRG)
            + 15975.7 * getSMEFTCoeff("CHuR", 0, 0,muRG)
            + 15912.4 * getSMEFTCoeff("CHuR", 1, 1,muRG)
            - 54348.3 * getSMEFTCoeff("CHD",muRG)
            - 194795. * getSMEFTCoeff("CHWB",muRG)
            - 3.791 * delta_GF
            - 0.836 * deltaGzd6()
            );
            /*+ cWsch * (+25556.3 * getSMEFTCoeff("CHD")
            - 19191.5 * getSMEFTCoeff("CHWB")
            - 3. * delta_GF
            - 0.836 * deltaGzd6()
            ));*/
    
    //------ Old alpha scheme expression: End

    // AG: 
    dwidth += cWsch * (
            ((0.12136) * getSMEFTCoeff("CHbox",muRG)
            + (0.04252) * getSMEFTCoeff("CHW",muRG)
            + (-0.11176) * getSMEFTCoeff("CHB",muRG)
            + (0.0333) * getSMEFTCoeff("CHD",muRG)
            + (-0.01805) * getSMEFTCoeff("CHWB",muRG)
            + (0.021514) * getSMEFTCoeff("CHl1R", 0, 0,muRG)
            + (0.021631) * getSMEFTCoeff("CHl1R", 1, 1,muRG)
            + (0.021538) * getSMEFTCoeff("CHl1R", 2, 2,muRG)
            + (-0.16016) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.1598348) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.021538) * getSMEFTCoeff("CHl3R", 2, 2,muRG)
            + (-0.01711641) * getSMEFTCoeff("CHeR", 0, 0,muRG)
            + (-0.01727087) * getSMEFTCoeff("CHeR", 1, 1,muRG)
            + (-0.01726594) * getSMEFTCoeff("CHeR", 2, 2,muRG)
            + (-0.03561039) * getSMEFTCoeff("CHq1R", 0, 0,muRG)
            + (-0.03558411) * getSMEFTCoeff("CHq1R", 1, 1,muRG)
            + (0.035628) * getSMEFTCoeff("CHq3R", 0, 0,muRG)
            + (0.035464) * getSMEFTCoeff("CHq3R", 1, 1,muRG)
            + (0.015096) * getSMEFTCoeff("CHuR", 0, 0,muRG)
            + (0.014986) * getSMEFTCoeff("CHuR", 1, 1,muRG)
            + (0.18207) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            + (-0.816) * deltaGzd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.689 * deltaMz()
            + 16.184 * deltaMh()
            - 0.517 * deltaaMZ()
            + 2.692 * deltaGmu()))
            + cWsch * (cHSM * (-13.135 * deltaMz()
            + 16.184 * deltaMh()
            + 2.157 * deltaGmu()
            + 2.403 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2L2uRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        dwidth += cWsch * (
                +(0.014712) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (0.11704) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (0.23808) * pow(getSMEFTCoeffEW("CHB"), 2.0)
                + (0.010204) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (0.06973) * pow(getSMEFTCoeffEW("CHWB"), 2.0)
                + (0.0010203) * pow(getSMEFTCoeffEW("CHl1R", 0, 0), 2.0)
                + (0.0010184) * pow(getSMEFTCoeffEW("CHl1R", 1, 1), 2.0)
                + (0.0010188) * pow(getSMEFTCoeffEW("CHl1R", 2, 2), 2.0)
                + (0.0094) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.0094) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.0010188) * pow(getSMEFTCoeffEW("CHl3R", 2, 2), 2.0)
                + (0.0010192) * pow(getSMEFTCoeffEW("CHeR", 0, 0), 2.0)
                + (0.0010184) * pow(getSMEFTCoeffEW("CHeR", 1, 1), 2.0)
                + (0.0010172) * pow(getSMEFTCoeffEW("CHeR", 2, 2), 2.0)
                + (0.0013261) * pow(getSMEFTCoeffEW("CHq1R", 0, 0), 2.0)
                + (0.0013229) * pow(getSMEFTCoeffEW("CHq1R", 1, 1), 2.0)
                + (0.0013261) * pow(getSMEFTCoeffEW("CHq3R", 0, 0), 2.0)
                + (0.0013229) * pow(getSMEFTCoeffEW("CHq3R", 1, 1), 2.0)
                + (0.0013245) * pow(getSMEFTCoeffEW("CHuR", 0, 0), 2.0)
                + (0.0013226) * pow(getSMEFTCoeffEW("CHuR", 1, 1), 2.0)
                + (0.011033) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (0.005234) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.013568) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHB")
                + (0.0004184) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                + (-0.002182) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHWB")
                + (0.0026337) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.002631) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0026204) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.01206044) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.01206456) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0026204) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.002118503) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (-0.0021174) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.002109743) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.00433568) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.004327143) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0043399) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0043328) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0018366) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (0.0018281) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.014692) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.143958) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHB")
                + (0.023022) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (-0.1570976) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHWB")
                + (0.0015154) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0015196) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0015219) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.003728) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.003781) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0015219) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.0005571) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (-0.0006072) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.0006202) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.0001747) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.0001548) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0001772) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0001611) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0005458) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.000531) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.005234) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.028141) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHD")
                + (-0.031371) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHWB")
                + (-0.0038795) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.0038758) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.0038654) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.009644) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.009688) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0038654) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0019463) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0019533) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0019535) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.003307) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.003269) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0032933) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0032703) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0007667) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.0007652) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.013568) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00144) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHWB")
                + (0.0028307) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.002828) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0028158) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.001232) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0012439) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0028158) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0010537) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0010534) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0010662) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.0023745) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.0023721) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0023765) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0023712) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.00127183) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.00127912) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.00406) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0001408) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0001334) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0001475) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.002294) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.002296) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0001475) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0031757) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0031774) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.003167) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.0005142) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.0005087) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0005083) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0004994) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0023805) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.00237786) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.002182) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0005904659) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00263259) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0026337) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0026362) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.000590148) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.002631) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00261892) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00261892) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0020389) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0026204) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00576) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00261) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0021198) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0021178) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0021066) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.0042491) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.0042424) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.00424852) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.004239582) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.001799671) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.001792115) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.01938906) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.002607) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0021198) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0021178) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0021066) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.0042503) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.0042428) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.004249441) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.004243656) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.001798463) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.001791597) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.01938972) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0026204) * getSMEFTCoeffEW("CHl3R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.002118503) * getSMEFTCoeffEW("CHeR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0021174) * getSMEFTCoeffEW("CHeR", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.002109743) * getSMEFTCoeffEW("CHeR", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00265285) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00433568) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00265126) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.004327143) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0043399) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0043328) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0018366) * getSMEFTCoeffEW("CHuR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0018281) * getSMEFTCoeffEW("CHuR", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.75) * pow(deltaGzd6(), 2.0));

        dwidth += cWsch * (
                +(-0.0968) * deltaGzd6() * getSMEFTCoeffEW("CHbox")
                + (-0.0449) * deltaGzd6() * getSMEFTCoeffEW("CHW")
                + (0.1028) * deltaGzd6() * getSMEFTCoeffEW("CHB")
                + (-0.028) * deltaGzd6() * getSMEFTCoeffEW("CHD")
                + (0.0219) * deltaGzd6() * getSMEFTCoeffEW("CHWB")
                + (-0.01853) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.01905) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.01862) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.12306) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.12259) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.01862) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.01454) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.015637) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.014707) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.031184) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.027789) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0327) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0315) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.01361) * deltaGzd6() * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.01343) * deltaGzd6() * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.145) * deltaGzd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;

    }

    return dwidth;
}

const double NPSMEFTd6General::BrH2L2uRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2L2uRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2L2uRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2L2dRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2L2dRatio1
    double width = 1.0;

    width += deltaGammaH2L2dRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2L2dRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2L2dRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg    
    dwidth += cAsch * (+121289. * getSMEFTCoeff("CHbox",muRG)
            - 84134.2 * getSMEFTCoeff("CHB",muRG)
            + 17402.7 * getSMEFTCoeff("CHW",muRG)
            + 21075. * (getSMEFTCoeff("CHl1R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 0, 0,muRG))
            + 21073.9 * (getSMEFTCoeff("CHl1R", 1, 1,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG))
            + 20966.2 * (getSMEFTCoeff("CHl1R", 2, 2,muRG) + getSMEFTCoeff("CHl3R", 2, 2,muRG))
            + 23026.5 * (getSMEFTCoeff("CHq1R", 0, 0,muRG) + getSMEFTCoeff("CHq3R", 0, 0,muRG))
            + 23023.9 * (getSMEFTCoeff("CHq1R", 1, 1,muRG) + getSMEFTCoeff("CHq3R", 1, 1,muRG))
            + 22666. * (getSMEFTCoeff("CHq1R", 2, 2,muRG) + getSMEFTCoeff("CHq3R", 2, 2,muRG))
            - 18090.2 * getSMEFTCoeff("CHeR", 0, 0,muRG)
            - 18067. * getSMEFTCoeff("CHeR", 1, 1,muRG)
            - 17980.6 * getSMEFTCoeff("CHeR", 2, 2,muRG)
            - 4190.57 * getSMEFTCoeff("CHdR", 0, 0,muRG)
            - 4189.38 * getSMEFTCoeff("CHdR", 1, 1,muRG)
            - 3850.11 * getSMEFTCoeff("CHdR", 2, 2,muRG)
            - 48948.9 * getSMEFTCoeff("CHD",muRG)
            - 158101. * getSMEFTCoeff("CHWB",muRG)
            - 3.617 * delta_GF
            - 0.837 * deltaGzd6()
            );
            /*+ cWsch * (+13172. * getSMEFTCoeff("CHD")
            - 21275. * getSMEFTCoeff("CHWB")
            - 3. * delta_GF
            - 0.837 * deltaGzd6()
            ));*/
    
    //------ Old alpha scheme expression: End

    // AG: 
    dwidth += cWsch * (
            ((0.12067) * getSMEFTCoeff("CHbox",muRG)
            + (0.02221) * getSMEFTCoeff("CHW",muRG)
            + (-0.08987) * getSMEFTCoeff("CHB",muRG)
            + (0.0195) * getSMEFTCoeff("CHD",muRG)
            + (-0.02029) * getSMEFTCoeff("CHWB",muRG)
            + (0.021341) * getSMEFTCoeff("CHl1R", 0, 0,muRG)
            + (0.021391) * getSMEFTCoeff("CHl1R", 1, 1,muRG)
            + (0.021248) * getSMEFTCoeff("CHl1R", 2, 2,muRG)
            + (-0.1582728) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.158513) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.021248) * getSMEFTCoeff("CHl3R", 2, 2,muRG)
            + (-0.01721521) * getSMEFTCoeff("CHeR", 0, 0,muRG)
            + (-0.0172416) * getSMEFTCoeff("CHeR", 1, 1,muRG)
            + (-0.0171251) * getSMEFTCoeff("CHeR", 2, 2,muRG)
            + (0.022094) * getSMEFTCoeff("CHq1R", 0, 0,muRG)
            + (0.02214) * getSMEFTCoeff("CHq1R", 1, 1,muRG)
            + (0.023737) * getSMEFTCoeff("CHq1R", 2, 2,muRG)
            + (0.022094) * getSMEFTCoeff("CHq3R", 0, 0,muRG)
            + (0.02214) * getSMEFTCoeff("CHq3R", 1, 1,muRG)
            + (0.023737) * getSMEFTCoeff("CHq3R", 2, 2,muRG)
            + (-0.003856346) * getSMEFTCoeff("CHdR", 0, 0,muRG)
            + (-0.00384488) * getSMEFTCoeff("CHdR", 1, 1,muRG)
            + (-0.003870856) * getSMEFTCoeff("CHdR", 2, 2,muRG)
            + (0.18095) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            + (-0.831) * deltaGzd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-10.043 * deltaMz()
            + 16.281 * deltaMh()
            - 0.342 * deltaaMZ()
            + 2.516 * deltaGmu()))
            + cWsch * (cHSM * (-12.322 * deltaMz()
            + 16.281 * deltaMh()
            + 2.201 * deltaGmu()
            + 1.57 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2L2dRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        dwidth += cWsch * (
                +(0.014825) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (0.08465) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (0.10657) * pow(getSMEFTCoeffEW("CHB"), 2.0)
                + (0.007578) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (0.032649) * pow(getSMEFTCoeffEW("CHWB"), 2.0)
                + (0.001005) * pow(getSMEFTCoeffEW("CHl1R", 0, 0), 2.0)
                + (0.0010092) * pow(getSMEFTCoeffEW("CHl1R", 1, 1), 2.0)
                + (0.0010064) * pow(getSMEFTCoeffEW("CHl1R", 2, 2), 2.0)
                + (0.009463) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.009375) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.0010064) * pow(getSMEFTCoeffEW("CHl3R", 2, 2), 2.0)
                + (0.0010054) * pow(getSMEFTCoeffEW("CHeR", 0, 0), 2.0)
                + (0.0010055) * pow(getSMEFTCoeffEW("CHeR", 1, 1), 2.0)
                + (0.0010051) * pow(getSMEFTCoeffEW("CHeR", 2, 2), 2.0)
                + (0.0006784) * pow(getSMEFTCoeffEW("CHq1R", 0, 0), 2.0)
                + (0.000655) * pow(getSMEFTCoeffEW("CHq1R", 1, 1), 2.0)
                + (0.0007329) * pow(getSMEFTCoeffEW("CHq1R", 2, 2), 2.0)
                + (0.0006784) * pow(getSMEFTCoeffEW("CHq3R", 0, 0), 2.0)
                + (0.000655) * pow(getSMEFTCoeffEW("CHq3R", 1, 1), 2.0)
                + (0.0007329) * pow(getSMEFTCoeffEW("CHq3R", 2, 2), 2.0)
                + (0.0006792) * pow(getSMEFTCoeffEW("CHdR", 0, 0), 2.0)
                + (0.0006779) * pow(getSMEFTCoeffEW("CHdR", 1, 1), 2.0)
                + (0.0007332) * pow(getSMEFTCoeffEW("CHdR", 2, 2), 2.0)
                + (0.011121) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (0.002721) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.010906) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHB")
                + (-0.0012719) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                + (-0.0024549) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHWB")
                + (0.0026064) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0026073) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.002596) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.01207611) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.01209367) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.002596) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.0020974) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (-0.00209905) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.00208636) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.0026944) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.0026923) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0028925) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.0026944) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0026923) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0028925) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.00047059) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (-0.0004699201) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (0.014684) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.1563694) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHB")
                + (0.018562) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (-0.1022427) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHWB")
                + (0.0006588) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0006557) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0006715) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.002116) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.002118) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0006715) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0001906) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0001915) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.000173) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.0002293) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.0002229) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0002215) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.0002293) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0002229) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0002215) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.0001371) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.000138) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.0001006) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (0.002694) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0207025) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHD")
                + (0.059846) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHWB")
                + (-0.00294565) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.00294453) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.00293256) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.007992) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.007978) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00293256) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0013157) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0013112) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.001313) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.0018767) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.0018778) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0020349) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.0018767) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0018778) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0020349) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.0001977) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.0001982) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.0001883) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (-0.010907) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.000988) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHWB")
                + (0.0025211) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0025204) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.002511) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.0001134) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0001259) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.002511) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.001268) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0012691) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0012823) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.0008924) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.000892) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0009143) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.0008924) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.000892) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0009143) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.0003253) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.00032566) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.00039497) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (0.0024039) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0003186) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0003249) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0003404) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.002784) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.002786) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0003404) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.002898) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0028961) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0028869) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.0008712) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.0008626) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0009395) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.0008712) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0008626) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0009395) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.00061055) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.00060968) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.00063252) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (-0.0024548) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.000590513) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0026049) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0026064) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00260457) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.000590967) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0026073) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00259549) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00259549) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0020129) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.002596) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00581) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.002642) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0020996) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.002098) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0020855) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.002638086) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.0026360054) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.002830181) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.002638086) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0026360054) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.002830181) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.0004606) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.00046071) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.00046383) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHdR", 2, 2)
                + (-0.01942) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.002561) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0020996) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0020983) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0020855) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.002636675) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.002640509) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.002831097) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.002636675) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.002640509) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.002831097) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.00046075) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.00046077) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.00046367) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHdR", 2, 2)
                + (-0.01943808) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.002596) * getSMEFTCoeffEW("CHl3R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0020974) * getSMEFTCoeffEW("CHeR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00209905) * getSMEFTCoeffEW("CHeR", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00208636) * getSMEFTCoeffEW("CHeR", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0013588) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0026944) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00135887) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0026923) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00147085) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.0028925) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0026944) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0026923) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0028925) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00047059) * getSMEFTCoeffEW("CHdR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0004699201) * getSMEFTCoeffEW("CHdR", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.77) * pow(deltaGzd6(), 2.0));

        dwidth += cWsch * (
                +(-0.095) * deltaGzd6() * getSMEFTCoeffEW("CHbox")
                + (-0.0213) * deltaGzd6() * getSMEFTCoeffEW("CHW")
                + (0.0747) * deltaGzd6() * getSMEFTCoeffEW("CHB")
                + (-0.0162) * deltaGzd6() * getSMEFTCoeffEW("CHD")
                + (0.023) * deltaGzd6() * getSMEFTCoeffEW("CHWB")
                + (-0.0187) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.01838) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.01821) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.108636) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.114941) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.01821) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0142) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.015339) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.014586) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.01942) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.01967) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.02085) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.01942) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.01967) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.02085) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.003423) * deltaGzd6() * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.0032534) * deltaGzd6() * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.0032839) * deltaGzd6() * getSMEFTCoeffEW("CHdR", 2, 2)
                + (-0.142) * deltaGzd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH2L2dRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2L2dRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2L2dRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2v2uRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2v2uRatio1
    double width = 1.0;

    width += deltaGammaH2v2uRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2v2uRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2v2uRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg
    dwidth += cAsch * (+121248. * getSMEFTCoeff("CHbox",muRG)
            - 76316.6 * getSMEFTCoeff("CHB",muRG)
            + 13981.5 * getSMEFTCoeff("CHW",muRG)
            - 19052.2 * (getSMEFTCoeff("CHl1R", 0, 0,muRG) - getSMEFTCoeff("CHl3R", 0, 0,muRG))
            - 19081.3 * (getSMEFTCoeff("CHl1R", 1, 1,muRG) - getSMEFTCoeff("CHl3R", 1, 1,muRG))
            - 19088.9 * (getSMEFTCoeff("CHl1R", 2, 2,muRG) - getSMEFTCoeff("CHl3R", 2, 2,muRG))
            - 37234.1 * (getSMEFTCoeff("CHq1R", 0, 0,muRG) - getSMEFTCoeff("CHq3R", 0, 0,muRG))
            - 37155.9 * (getSMEFTCoeff("CHq1R", 1, 1,muRG) - getSMEFTCoeff("CHq3R", 1, 1,muRG))
            + 16564.7 * getSMEFTCoeff("CHuR", 0, 0,muRG)
            + 16487.2 * getSMEFTCoeff("CHuR", 1, 1,muRG)
            - 48203. * getSMEFTCoeff("CHD",muRG)
            - 150929. * getSMEFTCoeff("CHWB",muRG)
            - 3.589 * delta_GF
            - 0.849 * deltaGzd6()
            );
            /*+ cWsch * (+11461.3 * getSMEFTCoeff("CHD")
            - 20220.2 * getSMEFTCoeff("CHWB")
            - 2.998 * delta_GF
            - 0.849 * deltaGzd6()
            ));*/
    
    //------ Old alpha scheme expression: End

    // AG: 
    dwidth += cWsch * (
            ((0.12122) * getSMEFTCoeff("CHbox",muRG)
            + (0.01598) * getSMEFTCoeff("CHW",muRG)
            + (-0.074959) * getSMEFTCoeff("CHB",muRG)
            + (0.013404) * getSMEFTCoeff("CHD",muRG)
            + (-0.021103) * getSMEFTCoeff("CHWB",muRG)
            + (-0.01884082) * getSMEFTCoeff("CHl1R", 0, 0,muRG)
            + (-0.01874224) * getSMEFTCoeff("CHl1R", 1, 1,muRG)
            + (-0.01879955) * getSMEFTCoeff("CHl1R", 2, 2,muRG)
            + (-0.161822) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.1613675) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.018957) * getSMEFTCoeff("CHl3R", 2, 2,muRG)
            + (-0.037156) * getSMEFTCoeff("CHq1R", 0, 0,muRG)
            + (-0.0371722) * getSMEFTCoeff("CHq1R", 1, 1,muRG)
            + (0.037258) * getSMEFTCoeff("CHq3R", 0, 0,muRG)
            + (0.037209) * getSMEFTCoeff("CHq3R", 1, 1,muRG)
            + (0.015779) * getSMEFTCoeff("CHuR", 0, 0,muRG)
            + (0.015702) * getSMEFTCoeff("CHuR", 1, 1,muRG)
            + (0.1818) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            + (-0.832) * deltaGzd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.867 * deltaMz()
            + 15.889 * deltaMh()
            - 0.28 * deltaaMZ()
            + 2.519 * deltaGmu()))
            + cWsch * (cHSM * (-11.908 * deltaMz()
            + 15.889 * deltaMh()
            + 2.169 * deltaGmu()
            + 1.303 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2v2uRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        dwidth += cWsch * (
                +(0.014683) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (0.029977) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (0.020534) * pow(getSMEFTCoeffEW("CHB"), 2.0)
                + (0.0011316) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (0.009588) * pow(getSMEFTCoeffEW("CHWB"), 2.0)
                + (0.00049619) * pow(getSMEFTCoeffEW("CHl1R", 0, 0), 2.0)
                + (0.00049702) * pow(getSMEFTCoeffEW("CHl1R", 1, 1), 2.0)
                + (0.00049647) * pow(getSMEFTCoeffEW("CHl1R", 2, 2), 2.0)
                + (0.00922) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.00919) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.00049647) * pow(getSMEFTCoeffEW("CHl3R", 2, 2), 2.0)
                + (0.0013928) * pow(getSMEFTCoeffEW("CHq1R", 0, 0), 2.0)
                + (0.0013902) * pow(getSMEFTCoeffEW("CHq1R", 1, 1), 2.0)
                + (0.0013928) * pow(getSMEFTCoeffEW("CHq3R", 0, 0), 2.0)
                + (0.0013902) * pow(getSMEFTCoeffEW("CHq3R", 1, 1), 2.0)
                + (0.0013945) * pow(getSMEFTCoeffEW("CHuR", 0, 0), 2.0)
                + (0.0013955) * pow(getSMEFTCoeffEW("CHuR", 1, 1), 2.0)
                + (0.01101) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (0.001982) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.0090937) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHB")
                + (-0.0020315) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                + (-0.0025573) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHWB")
                + (-0.002318106) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.002317968) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.01237941) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.01238009) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0023188) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.00451966) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.00451184) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0045183) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0045101) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0019117) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (0.0019033) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.0147057) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0561529) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHB")
                + (0.0005954) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (-0.0455873) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHWB")
                + (-0.0010602) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.001113) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.001132) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.001144) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.001023) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0010671) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0023205) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.0023067) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.00230254) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00228524) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.00149435) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.00149032) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.001982) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0003054) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHD")
                + (0.034986) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHWB")
                + (0.0028311) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0028277) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0028398) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.006269) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0062789) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00283266) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0011441) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.00114) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.001135831) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00113128) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0090937) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.000408) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHWB")
                + (-0.0009051) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.00090638) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.00090555) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.0007383) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0007345) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.00090609) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.00162977) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.001624214) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0016305) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0016236) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.00167945) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.00168335) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.0016461) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0014831) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0014813) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0014901) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.001034) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0010168) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00148265) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.000102) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0021338) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.00214234) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.0025573) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00132225) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0023183) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.002318106) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.002319) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0013223) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0023188) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0023188) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.000997117) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.002317968) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00638) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00233) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0044333) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.0044255) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.00443452) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0044265) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.001876252) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.0018688) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.0197481) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0023) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0044334) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.0044253) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.00443484) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00442866) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.001875899) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.00186879) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.01972415) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0023188) * getSMEFTCoeffEW("CHl3R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00279155) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00451966) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00278867) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.00451184) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0045183) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0045101) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0019117) * getSMEFTCoeffEW("CHuR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0019033) * getSMEFTCoeffEW("CHuR", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.757) * pow(deltaGzd6(), 2.0));

        dwidth += cWsch * (
                +(-0.099) * deltaGzd6() * getSMEFTCoeffEW("CHbox")
                + (-0.01511) * deltaGzd6() * getSMEFTCoeffEW("CHW")
                + (0.07347) * deltaGzd6() * getSMEFTCoeffEW("CHB")
                + (-0.01184) * deltaGzd6() * getSMEFTCoeffEW("CHD")
                + (0.02039) * deltaGzd6() * getSMEFTCoeffEW("CHWB")
                + (0.01399) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.015557) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.01326) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.13487) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.13114) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.01462) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.03421) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.03301) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0335) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.034) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0134) * deltaGzd6() * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.01395) * deltaGzd6() * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.148) * deltaGzd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH2v2uRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2v2uRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2v2uRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2v2dRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2v2dRatio1
    double width = 1.0;

    width += deltaGammaH2v2dRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2v2dRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2v2dRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg
    dwidth += cAsch * (+121140. * getSMEFTCoeff("CHbox",muRG)
            - 57872.8 * getSMEFTCoeff("CHB",muRG)
            - 4371.77 * getSMEFTCoeff("CHW",muRG)
            - 18746.1 * (getSMEFTCoeff("CHl1R", 0, 0,muRG) - getSMEFTCoeff("CHl3R", 0, 0,muRG))
            - 18746.1 * (getSMEFTCoeff("CHl1R", 1, 1,muRG) - getSMEFTCoeff("CHl3R", 1, 1,muRG))
            - 18868.3 * (getSMEFTCoeff("CHl1R", 2, 2,muRG) - getSMEFTCoeff("CHl3R", 2, 2,muRG))
            + 23856.6 * (getSMEFTCoeff("CHq1R", 0, 0,muRG) + getSMEFTCoeff("CHq3R", 0, 0,muRG))
            + 23828.1 * (getSMEFTCoeff("CHq1R", 1, 1,muRG) + getSMEFTCoeff("CHq3R", 1, 1,muRG))
            + 23481.4 * (getSMEFTCoeff("CHq1R", 2, 2,muRG) + getSMEFTCoeff("CHq3R", 2, 2,muRG))
            - 4335.75 * getSMEFTCoeff("CHdR", 0, 0,muRG)
            - 4341.01 * getSMEFTCoeff("CHdR", 1, 1,muRG)
            - 4000. * getSMEFTCoeff("CHdR", 2, 2,muRG)
            - 42945.7 * getSMEFTCoeff("CHD",muRG)
            - 113953. * getSMEFTCoeff("CHWB",muRG)
            - 3.412 * delta_GF
            - 0.842 * deltaGzd6()
            );
            /*+ cWsch * (-837.5 * getSMEFTCoeff("CHD")
            - 21725.9 * getSMEFTCoeff("CHWB")
            - 2.996 * delta_GF
            - 0.842 * deltaGzd6()
            ));*/
            
    //------ Old alpha scheme expression: End

    // AG: 
    dwidth += cWsch * (
            ((0.12129) * getSMEFTCoeff("CHbox",muRG)
            + (-0.005765) * getSMEFTCoeff("CHW",muRG)
            + (-0.0553328) * getSMEFTCoeff("CHB",muRG)
            + (-0.0003856) * getSMEFTCoeff("CHD",muRG)
            + (-0.0226353) * getSMEFTCoeff("CHWB",muRG)
            + (-0.01872246) * getSMEFTCoeff("CHl1R", 0, 0,muRG)
            + (-0.01856267) * getSMEFTCoeff("CHl1R", 1, 1,muRG)
            + (-0.01867078) * getSMEFTCoeff("CHl1R", 2, 2,muRG)
            + (-0.161664) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.1624422) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.01871) * getSMEFTCoeff("CHl3R", 2, 2,muRG)
            + (0.023787) * getSMEFTCoeff("CHq1R", 0, 0,muRG)
            + (0.023795) * getSMEFTCoeff("CHq1R", 1, 1,muRG)
            + (0.023434) * getSMEFTCoeff("CHq1R", 2, 2,muRG)
            + (0.023787) * getSMEFTCoeff("CHq3R", 0, 0,muRG)
            + (0.023795) * getSMEFTCoeff("CHq3R", 1, 1,muRG)
            + (0.023434) * getSMEFTCoeff("CHq3R", 2, 2,muRG)
            + (-0.00413664) * getSMEFTCoeff("CHdR", 0, 0,muRG)
            + (-0.00413066) * getSMEFTCoeff("CHdR", 1, 1,muRG)
            + (-0.00380964) * getSMEFTCoeff("CHdR", 2, 2,muRG)
            + (0.1819) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            + (-0.826) * deltaGzd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-10.269 * deltaMz()
            + 15.979 * deltaMh()
            - 0.143 * deltaaMZ()
            + 2.286 * deltaGmu()))
            + cWsch * (cHSM * (-11.132 * deltaMz()
            + 15.979 * deltaMh()
            + 2.144 * deltaGmu()
            + 0.598 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2v2dRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        dwidth += cWsch * (
                +(0.01475) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (0.004384) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (-0.0006489) * pow(getSMEFTCoeffEW("CHB"), 2.0)
                + (-0.00113902) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (0.0015868) * pow(getSMEFTCoeffEW("CHWB"), 2.0)
                + (0.00048923) * pow(getSMEFTCoeffEW("CHl1R", 0, 0), 2.0)
                + (0.0004894) * pow(getSMEFTCoeffEW("CHl1R", 1, 1), 2.0)
                + (0.00048977) * pow(getSMEFTCoeffEW("CHl1R", 2, 2), 2.0)
                + (0.00924) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.009278) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.00048977) * pow(getSMEFTCoeffEW("CHl3R", 2, 2), 2.0)
                + (0.0007335) * pow(getSMEFTCoeffEW("CHq1R", 0, 0), 2.0)
                + (0.0007336) * pow(getSMEFTCoeffEW("CHq1R", 1, 1), 2.0)
                + (0.0007284) * pow(getSMEFTCoeffEW("CHq1R", 2, 2), 2.0)
                + (0.0007335) * pow(getSMEFTCoeffEW("CHq3R", 0, 0), 2.0)
                + (0.0007336) * pow(getSMEFTCoeffEW("CHq3R", 1, 1), 2.0)
                + (0.0007284) * pow(getSMEFTCoeffEW("CHq3R", 2, 2), 2.0)
                + (0.0007359) * pow(getSMEFTCoeffEW("CHdR", 0, 0), 2.0)
                + (0.0007354) * pow(getSMEFTCoeffEW("CHdR", 1, 1), 2.0)
                + (0.00073) * pow(getSMEFTCoeffEW("CHdR", 2, 2), 2.0)
                + (0.01106) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (-0.0006919) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.00671583) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHB")
                + (-0.00372275) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                + (-0.00273962) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHWB")
                + (-0.0022930912) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.002295757) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.002294138) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.01240966) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.012412956) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0022956) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0028811) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.0028831) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0028413) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.0028811) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0028831) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0028413) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.00050295) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (-0.0005030348) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.000462466) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (0.014712) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00987) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHB")
                + (-0.003878) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (-0.01842346) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHWB")
                + (-0.00021) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.000208) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.000208) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.0008856) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0009176) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.00021571) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.00160087) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.00160191) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.00154323) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.00160087) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00160191) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.00154323) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.00039676) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.0003971) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.00033274) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (-0.0006919) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0056261) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHD")
                + (0.0096878) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHWB")
                + (0.0020444) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0020531) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0020521) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.0046779) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0046784) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.002059516) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.0005872) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.000586691) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.00056713) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.0005872) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.000586691) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.00056713) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.00671583) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0001361) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHWB")
                + (-0.00065058) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.000649782) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.00065018) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.00069657) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.00069682) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.00065069) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.00041577) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.00041586) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.00037775) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.00041577) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.00041586) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.00037775) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.00044187) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.00044214) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.00047114) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (0.0012559) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.00124975) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0012523) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.0014392) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0014379) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00125923) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.000512984) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.000513525) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.000476106) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.000512984) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.000513525) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.000476106) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.00056571) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.00056548) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.0005314) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (-0.00273962) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00131131) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0022936) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0022930912) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0022951) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.00131083) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.002295757) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0022956) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0022956) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0009841401) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.002294138) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00636) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.002308) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.0028265) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.00282878) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.002788849) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.0028265) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00282878) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.002788849) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.00049339) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.00049359) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.00045796) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHdR", 2, 2)
                + (-0.01974979) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.002339) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.002827586) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.002830241) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.00279057) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.002827586) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.002830241) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.00279057) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.00049346) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.0004937) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.00045793) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHdR", 2, 2)
                + (-0.01975021) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0022956) * getSMEFTCoeffEW("CHl3R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0014696) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0028811) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0014696) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0028831) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0014591) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.0028413) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0028811) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0028831) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0028413) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00050295) * getSMEFTCoeffEW("CHdR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0005030348) * getSMEFTCoeffEW("CHdR", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.000462466) * getSMEFTCoeffEW("CHdR", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.75) * pow(deltaGzd6(), 2.0));

        dwidth += cWsch * (
                +(-0.101) * deltaGzd6() * getSMEFTCoeffEW("CHbox")
                + (-0.00041) * deltaGzd6() * getSMEFTCoeffEW("CHW")
                + (0.048287) * deltaGzd6() * getSMEFTCoeffEW("CHB")
                + (0.00036) * deltaGzd6() * getSMEFTCoeffEW("CHD")
                + (0.02179) * deltaGzd6() * getSMEFTCoeffEW("CHWB")
                + (0.0149079) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0172908) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.017088) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.13395) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.1303) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.01742) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.02056) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.0189) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.02124) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.02056) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0189) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.02124) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.003758) * deltaGzd6() * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.003796) * deltaGzd6() * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.003317) * deltaGzd6() * getSMEFTCoeffEW("CHdR", 2, 2)
                + (-0.152) * deltaGzd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH2v2dRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2v2dRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2v2dRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH4LRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4LRatio1
    double width = 1.0;

    width += deltaGammaH4LRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4LRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH4LRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg
    dwidth +=  cAsch * (+121291. * getSMEFTCoeff("CHbox",muRG)
            - 103587. * getSMEFTCoeff("CHB",muRG)
            - 25126.1 * getSMEFTCoeff("CHW",muRG)
            + 40801.2 * (getSMEFTCoeff("CHl1R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 0, 0,muRG))
            + 40841.5 * (getSMEFTCoeff("CHl1R", 1, 1,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG))
            + 40593.4 * (getSMEFTCoeff("CHl1R", 2, 2,muRG) + getSMEFTCoeff("CHl3R", 2, 2,muRG))
            - 35062.5 * getSMEFTCoeff("CHeR", 0, 0,muRG)
            - 35200.6 * getSMEFTCoeff("CHeR", 1, 1,muRG)
            - 34739.1 * getSMEFTCoeff("CHeR", 2, 2,muRG)
            - 43327.2 * getSMEFTCoeff("CHD",muRG)
            - 83516.6 * getSMEFTCoeff("CHWB",muRG)
            - 3.426 * delta_GF
            - 0.759 * deltaGzd6()
            );
            /*+ cWsch * (-79.855 * getSMEFTCoeff("CHD")
            + 10882.3 * getSMEFTCoeff("CHWB")
            - 3. * delta_GF
            - 0.759 * deltaGzd6()
            ));*/
    
    //------ Old alpha scheme expression: End

    // AG: 
    dwidth += cWsch * (
            ((0.12134) * getSMEFTCoeff("CHbox",muRG)
            + (-0.0103) * getSMEFTCoeff("CHW",muRG)
            + (-0.11604) * getSMEFTCoeff("CHB",muRG)
            + (0.01268) * getSMEFTCoeff("CHD",muRG)
            + (0.01261) * getSMEFTCoeff("CHWB",muRG)
            + (0.041857) * getSMEFTCoeff("CHl1R", 0, 0,muRG)
            + (0.041873) * getSMEFTCoeff("CHl1R", 1, 1,muRG)
            + (0.041607) * getSMEFTCoeff("CHl1R", 2, 2,muRG)
            + (-0.1401455) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.1401933) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.041607) * getSMEFTCoeff("CHl3R", 2, 2,muRG)
            + (-0.03372101) * getSMEFTCoeff("CHeR", 0, 0,muRG)
            + (-0.0338238) * getSMEFTCoeff("CHeR", 1, 1,muRG)
            + (-0.03341988) * getSMEFTCoeff("CHeR", 2, 2,muRG)
            + (0.18199) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            + (-0.741) * deltaGzd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.741 * deltaMz()
            + 15.903 * deltaMh()
            - 0.172 * deltaaMZ()
            + 2.401 * deltaGmu()))
            + cWsch * (cHSM * (-10.943 * deltaMz()
            + 15.903 * deltaMh()
            + 2.234 * deltaGmu()
            + 0.855 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH4LRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        dwidth += cWsch * (
                +(0.014714) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (0.15495) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (0.41542) * pow(getSMEFTCoeffEW("CHB"), 2.0)
                + (0.016983) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (0.12035) * pow(getSMEFTCoeffEW("CHWB"), 2.0)
                + (0.0018392) * pow(getSMEFTCoeffEW("CHl1R", 0, 0), 2.0)
                + (0.0018429) * pow(getSMEFTCoeffEW("CHl1R", 1, 1), 2.0)
                + (0.0018273) * pow(getSMEFTCoeffEW("CHl1R", 2, 2), 2.0)
                + (0.007796) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.007789) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.0018273) * pow(getSMEFTCoeffEW("CHl3R", 2, 2), 2.0)
                + (0.0018903) * pow(getSMEFTCoeffEW("CHeR", 0, 0), 2.0)
                + (0.0018939) * pow(getSMEFTCoeffEW("CHeR", 1, 1), 2.0)
                + (0.0018728) * pow(getSMEFTCoeffEW("CHeR", 2, 2), 2.0)
                + (0.011032) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (-0.001236) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.014072) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHB")
                + (-0.002148) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                + (0.001548) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHWB")
                + (0.0050712) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.005074) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0050473) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.0096309) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0096384) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0050473) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.004107204) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (-0.0041018682) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.004054257) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.014714) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.11378) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHB")
                + (0.041377) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (-0.220374) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHWB")
                + (-0.001359) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.001361) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.000772) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.00015) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.000772) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0005633) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0005763) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0009145) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.001236) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.036515) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHD")
                + (-0.158913) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHWB")
                + (-0.00351) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.003531) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.004109) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.010605) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.010582) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.004109) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.002904) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0029155) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0025168) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.014072) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.006449) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHWB")
                + (0.0044927) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0045029) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0046153) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.002944) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.002976) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0046153) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0027333) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0027367) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0027896) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.001536) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0019896) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0019886) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0017711) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.000446) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.000441) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0017711) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0056796) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0056827) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0054722) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.001548) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.001397086) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.005076786) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00028075) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0050712) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.005076755) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.001395393) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00028124) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.005074) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.005049493) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.005049493) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0036579) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.00026148) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.0050473) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.000891) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.005056) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0038179) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0041009) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0040482) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.016984847) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.005046) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0041001) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0038194) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.0040482) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.01697742) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00026148) * getSMEFTCoeffEW("CHl3R", 2, 2) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.0050473) * getSMEFTCoeffEW("CHl3R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.004107204) * getSMEFTCoeffEW("CHeR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0041018682) * getSMEFTCoeffEW("CHeR", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.004054257) * getSMEFTCoeffEW("CHeR", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.67) * pow(deltaGzd6(), 2.0));

        dwidth += cWsch * (
                +(-0.0901) * deltaGzd6() * getSMEFTCoeffEW("CHbox")
                + (-0.0072) * deltaGzd6() * getSMEFTCoeffEW("CHW")
                + (0.0523) * deltaGzd6() * getSMEFTCoeffEW("CHB")
                + (-0.0031) * deltaGzd6() * getSMEFTCoeffEW("CHD")
                + (0.0204) * deltaGzd6() * getSMEFTCoeffEW("CHWB")
                + (-0.0344) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.0343) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.0352) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.10209) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.1005) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0352) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.028177) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.028204) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.028786) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.1348) * deltaGzd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH4LRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4LRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4LRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH4L2Ratio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4L2Ratio1
    double width = 1.0;

    width += deltaGammaH4L2Ratio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4L2Ratio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH4L2Ratio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    dwidth += (+121305. * getSMEFTCoeff("CHbox",muRG)
            - 101068. * getSMEFTCoeff("CHB",muRG)
            - 26272.7 * getSMEFTCoeff("CHW",muRG)
            + 61265. * (getSMEFTCoeff("CHl1R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 0, 0,muRG))
            + 61239.2 * (getSMEFTCoeff("CHl1R", 1, 1,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG))
            - 52542.2 * getSMEFTCoeff("CHeR", 0, 0,muRG)
            - 52658.5 * getSMEFTCoeff("CHeR", 1, 1,muRG)
            + cAsch * (-43256.5 * getSMEFTCoeff("CHD",muRG)
            - 82588.8 * getSMEFTCoeff("CHWB",muRG)
            - 3.426 * delta_GF
            - 0.761 * deltaGzd6()
            )
            + cWsch * (-451.131 * getSMEFTCoeff("CHD",muRG)
            + 10429. * getSMEFTCoeff("CHWB",muRG)
            - 3.003 * delta_GF
            - 0.761 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.718 * deltaMz()
            + 15.845 * deltaMh()
            - 0.163 * deltaaMZ()
            + 2.408 * deltaGmu()))
            + cWsch * (cHSM * (-10.905 * deltaMz()
            + 15.845 * deltaMh()
            + 2.236 * deltaGmu()
            + 0.81 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH4L2Ratio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH4L2Ratio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4L2Ratio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4L2Ratio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH4eRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4eRatio1
    double width = 1.0;

    width += deltaGammaH4eRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4eRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH4eRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    dwidth += (+121313. * getSMEFTCoeff("CHbox",muRG)
            - 101223. * getSMEFTCoeff("CHB",muRG)
            - 25774.5 * getSMEFTCoeff("CHW",muRG)
            + 122287. * (getSMEFTCoeff("CHl1R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 0, 0,muRG))
            - 104859. * getSMEFTCoeff("CHeR", 0, 0,muRG)
            + cAsch * (-43133.2 * getSMEFTCoeff("CHD",muRG)
            - 82523.3 * getSMEFTCoeff("CHWB",muRG)
            - 3.424 * delta_GF
            - 0.754 * deltaGzd6())
            + cWsch * (-321.416 * getSMEFTCoeff("CHD",muRG)
            + 10203.3 * getSMEFTCoeff("CHWB",muRG)
            - 3. * delta_GF
            - 0.754 * deltaGzd6())
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (cAsch * (-9.739 * deltaMz()
            + 15.858 * deltaMh()
            - 0.16 * deltaaMZ()
            + 2.408 * deltaGmu())
            + cWsch * (-10.859 * deltaMz()
            + 15.858 * deltaMh()
            + 2.236 * deltaGmu()
            + 0.749 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH4eRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH4eRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4eRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4eRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH4muRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4muRatio1
    double width = 1.0;

    width += deltaGammaH4muRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4muRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH4muRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    dwidth += (+121280. * getSMEFTCoeff("CHbox",muRG)
            - 101266. * getSMEFTCoeff("CHB",muRG)
            - 25189.1 * getSMEFTCoeff("CHW",muRG)
            + 122245. * (getSMEFTCoeff("CHl1R", 1, 1,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG))
            - 105313. * getSMEFTCoeff("CHeR", 1, 1,muRG)
            + cAsch * (-43187.7 * getSMEFTCoeff("CHD",muRG)
            - 82284. * getSMEFTCoeff("CHWB",muRG)
            - 3.424 * delta_GF
            - 0.756 * deltaGzd6())
            + cWsch * (-448.867 * getSMEFTCoeff("CHD",muRG)
            + 10693.5 * getSMEFTCoeff("CHWB",muRG)
            - 2.999 * delta_GF
            - 0.756 * deltaGzd6())
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (cAsch * (-9.697 * deltaMz()
            + 15.843 * deltaMh()
            - 0.171 * deltaaMZ()
            + 2.408 * deltaGmu())
            + cWsch * (-10.868 * deltaMz()
            + 15.843 * deltaMh()
            + 2.244 * deltaGmu()
            + 0.672 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH4muRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH4muRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4muRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4muRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH4vRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4vRatio1
    double width = 1.0;

    width += deltaGammaH4vRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4vRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH4vRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg
    dwidth += cAsch * (+121311. * getSMEFTCoeff("CHbox",muRG)
            - 13320.2 * getSMEFTCoeff("CHB",muRG)
            - 44355.6 * getSMEFTCoeff("CHW",muRG)
            - 37027.3 * (getSMEFTCoeff("CHl1R", 0, 0,muRG) - getSMEFTCoeff("CHl3R", 0, 0,muRG))
            - 36969.3 * (getSMEFTCoeff("CHl1R", 1, 1,muRG) - getSMEFTCoeff("CHl3R", 1, 1,muRG))
            - 37032.5 * (getSMEFTCoeff("CHl1R", 2, 2,muRG) - getSMEFTCoeff("CHl3R", 2, 2,muRG))
            - 30309.7 * getSMEFTCoeff("CHD",muRG)
            - 24266.2 * getSMEFTCoeff("CHWB",muRG)
            - 2.998 * delta_GF
            - 0.715 * deltaGzd6()
            );
            /*+ cWsch * (-30309.7 * getSMEFTCoeff("CHD")
            - 24266.2 * getSMEFTCoeff("CHWB")
            - 2.998 * delta_GF
            - 0.715 * deltaGzd6()
            ));*/

    //------ Old alpha scheme expression: End
    
    // AG: 
    dwidth += cWsch * (
            ((0.12132) * getSMEFTCoeff("CHbox",muRG)
            + (-0.0448947) * getSMEFTCoeff("CHW",muRG)
            + (-0.01288824) * getSMEFTCoeff("CHB",muRG)
            + (-0.0303007) * getSMEFTCoeff("CHD",muRG)
            + (-0.02405184) * getSMEFTCoeff("CHWB",muRG)
            + (-0.03687556) * getSMEFTCoeff("CHl1R", 0, 0,muRG)
            + (-0.03708882) * getSMEFTCoeff("CHl1R", 1, 1,muRG)
            + (-0.03709052) * getSMEFTCoeff("CHl1R", 2, 2,muRG)
            + (-0.1447394) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.144877) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.037099) * getSMEFTCoeff("CHl3R", 2, 2,muRG)
            + (0.18201) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            + (-0.705) * deltaGzd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.608 * deltaMz()
            + 14.774 * deltaMh()
            + 0.233 * deltaaMZ()
            + 2.016 * deltaGmu()))
            + cWsch * (cHSM * (-7.952 * deltaMz()
            + 14.777 * deltaMh()
            + 2.262 * deltaGmu()
            - 1.206 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH4vRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        dwidth += cWsch * (
                +(0.014726) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (-0.00480382) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (-0.00151116) * pow(getSMEFTCoeffEW("CHB"), 2.0)
                + (-0.00092039) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (-0.000594135) * pow(getSMEFTCoeffEW("CHWB"), 2.0)
                + (0.0008871) * pow(getSMEFTCoeffEW("CHl1R", 0, 0), 2.0)
                + (0.0008922) * pow(getSMEFTCoeffEW("CHl1R", 1, 1), 2.0)
                + (0.000888) * pow(getSMEFTCoeffEW("CHl1R", 2, 2), 2.0)
                + (0.007436) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.007428) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.000888) * pow(getSMEFTCoeffEW("CHl3R", 2, 2), 2.0)
                + (0.011046) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (-0.00544326) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.001563085) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHB")
                + (-0.0073519) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                + (-0.002917112) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHWB")
                + (-0.004492723) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.004495401) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.004497299) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.0102118) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.01020412) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0044983) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.014709) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00037571) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHB")
                + (0.0013626) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (-0.003676079) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHWB")
                + (0.0026637) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.002664) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0026642) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.0027871) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0027884) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00266319) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.00544326) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0021446) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHD")
                + (-0.00125948) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHWB")
                + (0.00076461) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0007646) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.00076468) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.0007999) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0008002) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.000764423) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.001563085) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0023664) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHWB")
                + (-0.000202074) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.000202026) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.000202041) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.0038785) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0038773) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.00020215) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.003674358) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0014271) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.0014271) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.0014274) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.0014932) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0014938) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.001426273) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.002917112) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0027238) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0044994) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.004492723) * getSMEFTCoeffEW("CHl1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0044991) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0027251) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.004495401) * getSMEFTCoeffEW("CHl1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0044983) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0044983) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.001768826) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.004497299) * getSMEFTCoeffEW("CHl1R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00197) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.004519) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.01754772) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00451) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.01756145) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0044983) * getSMEFTCoeffEW("CHl3R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.66) * pow(deltaGzd6(), 2.0));

        dwidth += cWsch * (
                +(-0.0835) * deltaGzd6() * getSMEFTCoeffEW("CHbox")
                + (0.031722) * deltaGzd6() * getSMEFTCoeffEW("CHW")
                + (0.009061) * deltaGzd6() * getSMEFTCoeffEW("CHB")
                + (0.02045) * deltaGzd6() * getSMEFTCoeffEW("CHD")
                + (0.01684) * deltaGzd6() * getSMEFTCoeffEW("CHWB")
                + (0.029482) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (0.028462) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (0.030133) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.09418) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.09646) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0301) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.1251) * deltaGzd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH4vRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4vRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4vRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH4uRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4uRatio1
    double width = 1.0;

    width += deltaGammaH4uRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4uRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH4uRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg
    dwidth += cAsch * (+121283. * getSMEFTCoeff("CHbox",muRG)
            - 153814. * getSMEFTCoeff("CHB",muRG)
            + 70762.7 * getSMEFTCoeff("CHW",muRG)
            - 476614. * getSMEFTCoeff("CHG",muRG)
            - 70157.4 * (getSMEFTCoeff("CHq1R", 0, 0,muRG) - getSMEFTCoeff("CHq3R", 0, 0,muRG))
            - 70569. * (getSMEFTCoeff("CHq1R", 1, 1,muRG) - getSMEFTCoeff("CHq3R", 1, 1,muRG))
            + 30328.1 * getSMEFTCoeff("CHuR", 0, 0,muRG)
            + 30455.3 * getSMEFTCoeff("CHuR", 1, 1,muRG)
            - 67742.3 * getSMEFTCoeff("CHD",muRG)
            - 272758. * getSMEFTCoeff("CHWB",muRG)
            - 4.233 * delta_GF
            - 0.781 * deltaGzd6()
            );
            /*+ cWsch * (+56825.9 * getSMEFTCoeff("CHD")
            + 5.842 * getSMEFTCoeff("CHWB")
            - 3.002 * delta_GF
            - 0.781 * deltaGzd6()
            ));*/
    
    //------ Old alpha scheme expression: End

    // AG: 
    dwidth += cWsch * (
            ((0.12118) * getSMEFTCoeff("CHbox",muRG)
            + (0.07154) * getSMEFTCoeff("CHW",muRG)
            + (-0.154493) * getSMEFTCoeff("CHB",muRG)
            + (0.06099) * getSMEFTCoeff("CHD",muRG)
            + (-0.001621) * getSMEFTCoeff("CHWB",muRG)
            + (-0.46458) * getSMEFTCoeff("CHG",muRG)
            + (-0.070151) * getSMEFTCoeff("CHq1R", 0, 0,muRG)
            + (-0.070597) * getSMEFTCoeff("CHq1R", 1, 1,muRG)
            + (0.070159) * getSMEFTCoeff("CHq3R", 0, 0,muRG)
            + (0.070584) * getSMEFTCoeff("CHq3R", 1, 1,muRG)
            + (0.028845) * getSMEFTCoeff("CHuR", 0, 0,muRG)
            + (0.028945) * getSMEFTCoeff("CHuR", 1, 1,muRG)
            + (-0.181705) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.181705) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.18178) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            + (-0.773) * deltaGzd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-8.52 * deltaMz()
            + 16.373 * deltaMh()
            - 0.942 * deltaaMZ()
            + 3.167 * deltaGmu()))
            + cWsch * (cHSM * (-14.978 * deltaMz()
            + 16.373 * deltaMh()
            + 2.198 * deltaGmu()
            + 4.578 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH4uRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        dwidth += cWsch * (
                +(0.014723) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (0.05967) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (0.08583) * pow(getSMEFTCoeffEW("CHB"), 2.0)
                + (0.005284) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (0.024458) * pow(getSMEFTCoeffEW("CHWB"), 2.0)
                + (17.441) * pow(getSMEFTCoeffEW("CHG"), 2.0)
                + (0.002695) * pow(getSMEFTCoeffEW("CHq1R", 0, 0), 2.0)
                + (0.0027093) * pow(getSMEFTCoeffEW("CHq1R", 1, 1), 2.0)
                + (0.0026965) * pow(getSMEFTCoeffEW("CHq3R", 0, 0), 2.0)
                + (0.0027074) * pow(getSMEFTCoeffEW("CHq3R", 1, 1), 2.0)
                + (0.0025407) * pow(getSMEFTCoeffEW("CHuR", 0, 0), 2.0)
                + (0.002553) * pow(getSMEFTCoeffEW("CHuR", 1, 1), 2.0)
                + (0.01104) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.01104) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.01104) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (0.008706) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.018754) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHB")
                + (0.003716) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                + (-0.0001986) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHWB")
                + (-0.056564) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHG")
                + (-0.00851468) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.0085655) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0085081) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0085634) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0034974) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (0.0035094) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.014696081) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.014696081) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.014695) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0816219) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHB")
                + (0.00511) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (-0.0808873) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHWB")
                + (0.008774) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHG")
                + (-0.003999) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.0042009) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.003996) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.004189) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0007209) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (0.000785) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.008701) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.008701) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.008706) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.007909) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHD")
                + (0.013811) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHWB")
                + (0.07569) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHG")
                + (0.011419) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.011655) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0114147) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0116652) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0030623) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.0031141) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.01874) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.01874) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.018754) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0024203) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHWB")
                + (-0.006369) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHG")
                + (-0.0065229) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.006595) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.006513) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0065908) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.00178349) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.00179882) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.0073925) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0073925) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.007378) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.053831) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHG")
                + (0.0019895) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.0020763) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0019874) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0020812) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.00515343) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.00521536) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.0001955) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0001955) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0001986) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.007733) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.007768) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.007704) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.007748) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0032671) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.0031513) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.028219) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.028219) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.028292) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00538675) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00022976) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (0.0085081) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0085081) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00851468) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00542127) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.00022419) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.0085634) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0085634) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0085655) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00022949) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.00851468) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00851468) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0085081) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00022382) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.0085655) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0085655) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0085634) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00349993) * getSMEFTCoeffEW("CHuR", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00349993) * getSMEFTCoeffEW("CHuR", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0034974) * getSMEFTCoeffEW("CHuR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00350917) * getSMEFTCoeffEW("CHuR", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00350917) * getSMEFTCoeffEW("CHuR", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0035094) * getSMEFTCoeffEW("CHuR", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.01099) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.02204873) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.02204873) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.68) * pow(deltaGzd6(), 2.0));

        dwidth += cWsch * (
                +(-0.0933) * deltaGzd6() * getSMEFTCoeffEW("CHbox")
                + (-0.0736) * deltaGzd6() * getSMEFTCoeffEW("CHW")
                + (0.1281) * deltaGzd6() * getSMEFTCoeffEW("CHB")
                + (-0.0475) * deltaGzd6() * getSMEFTCoeffEW("CHD")
                + (0.02) * deltaGzd6() * getSMEFTCoeffEW("CHWB")
                + (0.0122) * deltaGzd6() * getSMEFTCoeffEW("CHG")
                + (0.05898) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.06058) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0604) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0578) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0254) * deltaGzd6() * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.0252) * deltaGzd6() * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.1397) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.1397) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.1399) * deltaGzd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH4uRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4uRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4uRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH4dRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4dRatio1
    double width = 1.0;

    width += deltaGammaH4dRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4dRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH4dRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg
    dwidth += cAsch * (+121248. * getSMEFTCoeff("CHbox",muRG)
            - 106312. * getSMEFTCoeff("CHB",muRG)
            + 37722.3 * getSMEFTCoeff("CHW",muRG)
            - 368494. * getSMEFTCoeff("CHG",muRG)
            + 43669.1 * (getSMEFTCoeff("CHq1R", 0, 0,muRG) + getSMEFTCoeff("CHq3R", 0, 0,muRG))
            + 43649.7 * (getSMEFTCoeff("CHq1R", 1, 1,muRG) + getSMEFTCoeff("CHq3R", 1, 1,muRG))
            + 45003.6 * (getSMEFTCoeff("CHq1R", 2, 2,muRG) + getSMEFTCoeff("CHq3R", 2, 2,muRG))
            - 7637.9 * getSMEFTCoeff("CHdR", 0, 0,muRG)
            - 7633.36 * getSMEFTCoeff("CHdR", 1, 1,muRG)
            - 7294.61 * getSMEFTCoeff("CHdR", 2, 2,muRG)
            - 56026.9 * getSMEFTCoeff("CHD",muRG)
            - 199805. * getSMEFTCoeff("CHWB",muRG)
            - 3.841 * delta_GF
            - 0.778 * deltaGzd6()
            );
            /*+ cWsch * (+29594.4 * getSMEFTCoeff("CHD")
            - 12377.7 * getSMEFTCoeff("CHWB")
            - 2.995 * delta_GF
            - 0.778 * deltaGzd6()
            ));*/
    
    //------ Old alpha scheme expression: End

    // AG: 
    dwidth += cWsch * (
            ((0.12101) * getSMEFTCoeff("CHbox",muRG)
            + (0.035301) * getSMEFTCoeff("CHW",muRG)
            + (-0.1036126) * getSMEFTCoeff("CHB",muRG)
            + (0.030428) * getSMEFTCoeff("CHD",muRG)
            + (-0.013792) * getSMEFTCoeff("CHWB",muRG)
            + (-0.36157) * getSMEFTCoeff("CHG",muRG)
            + (0.043464) * getSMEFTCoeff("CHq1R", 0, 0,muRG)
            + (0.043459) * getSMEFTCoeff("CHq1R", 1, 1,muRG)
            + (0.044816) * getSMEFTCoeff("CHq1R", 2, 2,muRG)
            + (0.043464) * getSMEFTCoeff("CHq3R", 0, 0,muRG)
            + (0.043459) * getSMEFTCoeff("CHq3R", 1, 1,muRG)
            + (0.044816) * getSMEFTCoeff("CHq3R", 2, 2,muRG)
            + (-0.0072915) * getSMEFTCoeff("CHdR", 0, 0,muRG)
            + (-0.0072923) * getSMEFTCoeff("CHdR", 1, 1,muRG)
            + (-0.00694917) * getSMEFTCoeff("CHdR", 2, 2,muRG)
            + (-0.181499) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.181499) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.18154) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            + (-0.786) * deltaGzd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.19 * deltaMz()
            + 16.387 * deltaMh()
            - 0.596 * deltaaMZ()
            + 2.807 * deltaGmu()))
            + cWsch * (cHSM * (-13.077 * deltaMz()
            + 16.387 * deltaMh()
            + 2.268 * deltaGmu()
            + 2.743 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH4dRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        dwidth += cWsch * (
                +(0.014663) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (0.012757) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (0.001286) * pow(getSMEFTCoeffEW("CHB"), 2.0)
                + (-0.00052975) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (0.0018933) * pow(getSMEFTCoeffEW("CHWB"), 2.0)
                + (10.635) * pow(getSMEFTCoeffEW("CHG"), 2.0)
                + (0.0013812) * pow(getSMEFTCoeffEW("CHq1R", 0, 0), 2.0)
                + (0.0013804) * pow(getSMEFTCoeffEW("CHq1R", 1, 1), 2.0)
                + (0.0014343) * pow(getSMEFTCoeffEW("CHq1R", 2, 2), 2.0)
                + (0.0013812) * pow(getSMEFTCoeffEW("CHq3R", 0, 0), 2.0)
                + (0.0013804) * pow(getSMEFTCoeffEW("CHq3R", 1, 1), 2.0)
                + (0.0014343) * pow(getSMEFTCoeffEW("CHq3R", 2, 2), 2.0)
                + (0.0012767) * pow(getSMEFTCoeffEW("CHdR", 0, 0), 2.0)
                + (0.0012783) * pow(getSMEFTCoeffEW("CHdR", 1, 1), 2.0)
                + (0.0013171) * pow(getSMEFTCoeffEW("CHdR", 2, 2), 2.0)
                + (0.011) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.011) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.011) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (0.0042683) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.0125738) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHB")
                + (-0.0016726) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHWB")
                + (-0.043734) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHG")
                + (0.0052642) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.0052762) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0054406) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.0052642) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0052762) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0054406) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.000884882) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (-0.000883694) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.000843951) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (-0.01468531) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.01468531) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.01468) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.01805505) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHB")
                + (-0.0064336) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (-0.02863887) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHWB")
                + (-0.003268) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHG")
                + (0.0004845) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.000485) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0008983) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.0004845) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.000485) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0008983) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.00010197) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.00010131) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.0042711) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0042713) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0042682) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.006856) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHD")
                + (0.016282) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHWB")
                + (0.013229) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHG")
                + (-0.0047668) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.00476478) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.00533894) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.0047668) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00476478) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.00533894) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.00051711) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.00051703) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.00050983) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (0.012561) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.012561) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0125738) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0023965) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHWB")
                + (0.0022286) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.0022325) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.0024145) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.0022286) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0022325) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0024145) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.00054611) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.00054673) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.00062679) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (-0.0036907) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0036907) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0036904) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0148432) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHG")
                + (-0.00193883) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.00193998) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.00216367) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.00193883) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00193998) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.00216367) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.001208) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.0012071) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.001218) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHdR", 2, 2)
                + (0.0016683) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0016679) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.001673) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0036955) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.0036986) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0039625) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.0036955) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0036986) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0039625) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.0006428) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.0006448) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.021874) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.021874) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0218734) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0027621) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.005281107) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.005281107) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0052642) * getSMEFTCoeffEW("CHq1R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0027657) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.005268493) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.005268493) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0052762) * getSMEFTCoeffEW("CHq1R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0028667) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (-0.005440848) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.005440848) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0054406) * getSMEFTCoeffEW("CHq1R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.005281107) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.005281107) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0052642) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.005268493) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.005268493) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0052762) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.005440848) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.005440848) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0054406) * getSMEFTCoeffEW("CHq3R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00088499) * getSMEFTCoeffEW("CHdR", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.00088499) * getSMEFTCoeffEW("CHdR", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.000884882) * getSMEFTCoeffEW("CHdR", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00088467) * getSMEFTCoeffEW("CHdR", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.00088467) * getSMEFTCoeffEW("CHdR", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.000883694) * getSMEFTCoeffEW("CHdR", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00084416) * getSMEFTCoeffEW("CHdR", 2, 2) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.00084416) * getSMEFTCoeffEW("CHdR", 2, 2) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.000843951) * getSMEFTCoeffEW("CHdR", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.01103) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.02201481) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.02201481) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.75) * pow(deltaGzd6(), 2.0));

        dwidth += cWsch * (
                +(-0.0906) * deltaGzd6() * getSMEFTCoeffEW("CHbox")
                + (-0.0398) * deltaGzd6() * getSMEFTCoeffEW("CHW")
                + (0.0836) * deltaGzd6() * getSMEFTCoeffEW("CHB")
                + (-0.0216) * deltaGzd6() * getSMEFTCoeffEW("CHD")
                + (0.02187) * deltaGzd6() * getSMEFTCoeffEW("CHWB")
                + (-0.0128) * deltaGzd6() * getSMEFTCoeffEW("CHG")
                + (-0.0362) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.0371) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0369) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (-0.0362) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0371) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0369) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.006371) * deltaGzd6() * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.006501) * deltaGzd6() * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.006169) * deltaGzd6() * getSMEFTCoeffEW("CHdR", 2, 2)
                + (0.1413) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.1413) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.1361) * deltaGzd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH4dRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4dRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4dRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaHLvvLRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHLvvLRatio1
    double width = 1.0;

    width += deltaGammaHLvvLRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHLvvLRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaHLvvLRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0073;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg
    dwidth += cAsch * (+121150. * getSMEFTCoeff("CHbox",muRG)
            - 91767.5 * getSMEFTCoeff("CHW",muRG)
            + 45140.3 * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + 45192.1 * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + 45407.7 * getSMEFTCoeff("CHl3R", 2, 2,muRG)
            - 203598. * getSMEFTCoeff("CHD",muRG)
            - 379536. * getSMEFTCoeff("CHWB",muRG)
            - 4.713 * delta_GF
            - 13.743 * deltaMwd6()
            - 0.962 * deltaGwd6()
            );
            /*+ cWsch * (-30310.3 * getSMEFTCoeff("CHD")
            + 0. * getSMEFTCoeff("CHWB")
            - 2.996 * delta_GF
            - 0.962 * deltaGwd6()
            ));*/
    
    //------ Old alpha scheme expression: End

    // AG: 
    dwidth += cWsch * (
            ((0.12141) * getSMEFTCoeff("CHbox",muRG)
            + (-0.0905945) * getSMEFTCoeff("CHW",muRG)
            + (-0.03032886) * getSMEFTCoeff("CHD",muRG)
            + (-0.1367504) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.1366861) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.045303) * getSMEFTCoeff("CHl3R", 2, 2,muRG)
            + (0.18211) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            + (-0.919) * deltaGwd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-12.232 * deltaMz()
            + 13.669 * deltaMh()
            + 1.829 * deltaaMZ()
            + 0.189 * deltaGmu()))
            + cWsch * (cHSM * (-0.016 * deltaMz()
            - 8.548 * deltaMw()
            + 13.67 * deltaMh()
            + 2.003 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaHLvvLRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        dwidth += cWsch * (
                +(0.014737) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (-0.0080873) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (0.0009211) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (0.006746) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.00673) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.001181) * pow(getSMEFTCoeffEW("CHl3R", 2, 2), 2.0)
                + (0.011052) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (-0.01099103) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.007355586) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                + (-0.009228766) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.009234217) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0054912) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.014714) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0027512) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (0.0052117) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0052036) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00578441) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.01099103) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0023085) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0023079) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0013725648) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.003676614) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.01658196) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.01658238) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0054912) * getSMEFTCoeffEW("CHl3R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.688) * pow(deltaGwd6(), 2.0));

        dwidth += cWsch * (
                +(-0.1095) * deltaGwd6() * getSMEFTCoeffEW("CHbox")
                + (0.08596) * deltaGwd6() * getSMEFTCoeffEW("CHW")
                + (0.028419) * deltaGwd6() * getSMEFTCoeffEW("CHD")
                + (0.12977) * deltaGwd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.125384) * deltaGwd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0435) * deltaGwd6() * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.1641) * deltaGwd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHLvvLRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHLvvLRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHLvvLRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaHevmuvRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHevmuvRatio1
    double width = 1.0;

    width += deltaGammaHevmuvRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHevmuvRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaHevmuvRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0073;
    double muRG = 125.1;

    dwidth += (+121407. * getSMEFTCoeff("CHbox",muRG)
            - 91741.5 * getSMEFTCoeff("CHW",muRG)
            + 68126.1 * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + 68223.8 * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + cAsch * (-203550. * getSMEFTCoeff("CHD",muRG)
            - 380035. * getSMEFTCoeff("CHWB",muRG)
            - 4.711 * delta_GF
            - 13.53 * deltaMwd6()
            - 0.964 * deltaGwd6()
            )
            + cWsch * (-30299.6 * getSMEFTCoeff("CHD",muRG)
            + 0. * getSMEFTCoeff("CHWB",muRG)
            - 3. * delta_GF
            - 0.964 * deltaGwd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-12.178 * deltaMz()
            + 13.623 * deltaMh()
            + 1.825 * deltaaMZ()
            + 0.233 * deltaGmu()))
            + cWsch * (cHSM * (-0.016 * deltaMz()
            - 8.445 * deltaMw()
            + 13.623 * deltaMh()
            + 2.089 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaHevmuvRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrHevmuvRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHevmuvRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHevmuvRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaHudduRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHudduRatio1
    double width = 1.0;

    width += deltaGammaHudduRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHudduRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaHudduRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0073;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg
    dwidth += cAsch * (+121333. * getSMEFTCoeff("CHbox",muRG)
            - 92283.9 * getSMEFTCoeff("CHW",muRG)
            + 68273.4 * getSMEFTCoeff("CHq3R", 0, 0,muRG)
            + 68176.3 * getSMEFTCoeff("CHq3R", 1, 1,muRG)
            - 203776. * getSMEFTCoeff("CHD",muRG)
            - 380178. * getSMEFTCoeff("CHWB",muRG)
            - 4.719 * delta_GF
            - 14.006 * deltaMwd6()
            - 0.956 * deltaGwd6()
            );
            /*+ cWsch * (-30312.7 * getSMEFTCoeff("CHD")
            + 0. * getSMEFTCoeff("CHWB")
            - 3.003 * delta_GF
            - 0.956 * deltaGwd6()
            ));*/
    
    //------ Old alpha scheme expression: End

    // AG: 
    dwidth += cWsch * (
            ((0.12079) * getSMEFTCoeff("CHbox",muRG)
            + (-0.0903745) * getSMEFTCoeff("CHW",muRG)
            + (-0.03023476) * getSMEFTCoeff("CHD",muRG)
            + (0.06934) * getSMEFTCoeff("CHq3R", 0, 0,muRG)
            + (0.069517) * getSMEFTCoeff("CHq3R", 1, 1,muRG)
            + (-0.1813696) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.1813696) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.18117) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            + (-0.955) * deltaGwd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-12.618 * deltaMz()
            + 14.254 * deltaMh()
            + 1.912 * deltaaMZ()
            + 0.149 * deltaGmu()))
            + cWsch * (cHSM * (-0.018 * deltaMz()
            - 8.857 * deltaMw()
            + 14.251 * deltaMh()
            + 2.073 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaHudduRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        dwidth += cWsch * (
                +(0.014687) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (-0.008077632) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (0.0009178) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (0.0018572) * pow(getSMEFTCoeffEW("CHq3R", 0, 0), 2.0)
                + (0.0018574) * pow(getSMEFTCoeffEW("CHq3R", 1, 1), 2.0)
                + (0.011013) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.011013) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.011013) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (-0.010959679) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.007334116) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                + (0.0084087) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0084295) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.01466739) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.01466739) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.014653) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.002741) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (-0.008875263) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.008882525) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.010964) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.010964) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.010959679) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.002100955) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.002107679) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0036638) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0036638) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.003668205) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0084038) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0084038) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0084087) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00843117) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00843117) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0084295) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.02200743) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.02200743) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.85) * pow(deltaGwd6(), 2.0));

        dwidth += cWsch * (
                +(-0.1163) * deltaGwd6() * getSMEFTCoeffEW("CHbox")
                + (0.086111) * deltaGwd6() * getSMEFTCoeffEW("CHW")
                + (0.029355) * deltaGwd6() * getSMEFTCoeffEW("CHD")
                + (-0.0689) * deltaGwd6() * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0682) * deltaGwd6() * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.17534) * deltaGwd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.17534) * deltaGwd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.1744) * deltaGwd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;

    }

    return dwidth;
}

const double NPSMEFTd6General::BrHudduRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHudduRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHudduRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaHLvudRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHLvudRatio1
    double width = 1.0;

    width += deltaGammaHLvudRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHLvudRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaHLvudRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0073;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg
    dwidth += cAsch * (+121281. * getSMEFTCoeff("CHbox",muRG)
            - 93409.7 * getSMEFTCoeff("CHW",muRG)
            + 22531.9 * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + 22479. * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + 22364.3 * getSMEFTCoeff("CHl3R", 2, 2,muRG)
            + 34744.7 * getSMEFTCoeff("CHq3R", 0, 0,muRG)
            + 34720.9 * getSMEFTCoeff("CHq3R", 1, 1,muRG)
            - 203784. * getSMEFTCoeff("CHD",muRG)
            - 380028. * getSMEFTCoeff("CHWB",muRG)
            - 4.721 * delta_GF
            - 13.591 * deltaMwd6()
            - 0.969 * deltaGwd6()
            );
            /*+ cWsch * (-30359.9 * getSMEFTCoeff("CHD")
            + 0. * getSMEFTCoeff("CHWB")
            - 3.004 * delta_GF
            - 0.969 * deltaGwd6()
            ));*/
    
    //------ Old alpha scheme expression: End

    // AG: 
    dwidth += cWsch * (
            ((0.12133) * getSMEFTCoeff("CHbox",muRG)
            + (-0.0905501) * getSMEFTCoeff("CHW",muRG)
            + (-0.03027917) * getSMEFTCoeff("CHD",muRG)
            + (-0.1591054) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.15932529) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.022578) * getSMEFTCoeff("CHl3R", 2, 2,muRG)
            + (0.034785) * getSMEFTCoeff("CHq3R", 0, 0,muRG)
            + (0.034757) * getSMEFTCoeff("CHq3R", 1, 1,muRG)
            + (0.18198) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            + (-0.964) * deltaGwd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-12.333 * deltaMz()
            + 13.766 * deltaMh()
            + 1.852 * deltaaMZ()
            + 0.169 * deltaGmu()))
            + cWsch * (cHSM * (-0.015 * deltaMz()
            - 8.492 * deltaMw()
            + 13.769 * deltaMh()
            + 2.065 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaHLvudRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        dwidth += cWsch * (
                +(0.014754) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (-0.0080971) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (0.0009223) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (0.008885) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.008893) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.0005886) * pow(getSMEFTCoeffEW("CHl3R", 2, 2), 2.0)
                + (0.00093) * pow(getSMEFTCoeffEW("CHq3R", 0, 0), 2.0)
                + (0.0009298) * pow(getSMEFTCoeffEW("CHq3R", 1, 1), 2.0)
                + (0.011069) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (-0.01098128) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.007344733) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                + (-0.01194738) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.01195405) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.002738) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0042166) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0042142) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.014703) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.002745) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (0.0080855) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0080922) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00288826) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.00445065) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00444505) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.01098128) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0029893) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0029899) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00068459) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.00105334) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0010533816) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.003670687) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.003869) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.003866211) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.01929275) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.003867978) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0038718043) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.01930829) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0003448) * getSMEFTCoeffEW("CHl3R", 2, 2) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.00034402) * getSMEFTCoeffEW("CHl3R", 2, 2) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.002738) * getSMEFTCoeffEW("CHl3R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0042166) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0042142) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.94) * pow(deltaGwd6(), 2.0));

        dwidth += cWsch * (
                +(-0.117) * deltaGwd6() * getSMEFTCoeffEW("CHbox")
                + (0.08693) * deltaGwd6() * getSMEFTCoeffEW("CHW")
                + (0.02861) * deltaGwd6() * getSMEFTCoeffEW("CHD")
                + (0.14745) * deltaGwd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.14791) * deltaGwd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.02192) * deltaGwd6() * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.0338) * deltaGwd6() * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0329) * deltaGwd6() * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.1754) * deltaGwd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;

    }

    return dwidth;
}

const double NPSMEFTd6General::BrHLvudRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHLvudRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHLvudRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2udRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2udRatio1
    double width = 1.0;

    width += deltaGammaH2udRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2udRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2udRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0073;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg
    dwidth += cAsch * (+121425. * getSMEFTCoeff("CHbox",muRG)
            - 3244.8 * getSMEFTCoeff("CHB",muRG)
            - 88391.2 * getSMEFTCoeff("CHW",muRG)
            - 55282. * getSMEFTCoeff("CHG",muRG)
            - 23.442 * getSMEFTCoeff("CHq1R", 0, 0,muRG)
            - 22.98 * getSMEFTCoeff("CHq1R", 1, 1,muRG)
            + 559.485 * getSMEFTCoeff("CHuR", 0, 0,muRG)
            + 560.558 * getSMEFTCoeff("CHuR", 1, 1,muRG)
            - 217.102 * getSMEFTCoeff("CHdR", 0, 0,muRG)
            - 218.04 * getSMEFTCoeff("CHdR", 1, 1,muRG)
            + 68556.8 * getSMEFTCoeff("CHq3R", 0, 0,muRG)
            + 68783.1 * getSMEFTCoeff("CHq3R", 1, 1,muRG)
            - 199535. * getSMEFTCoeff("CHD",muRG)
            - 375669. * getSMEFTCoeff("CHWB",muRG)
            - 4.696 * delta_GF
            - 0.026 * deltaGzd6()
            - 13.64 * deltaMwd6()
            - 0.944 * deltaGwd6()
            );
            /*+ cWsch * (-28852.8 * getSMEFTCoeff("CHD")
            - 1306.57 * getSMEFTCoeff("CHWB")
            - 3.002 * delta_GF
            - 0.026 * deltaGzd6()
            - 0.944 * deltaGwd6()
            ));*/
    
    //------ Old alpha scheme expression: End

    // AG: 
    dwidth += cWsch * (
            ((0.12135) * getSMEFTCoeff("CHbox",muRG)
            + (-0.0851047) * getSMEFTCoeff("CHW",muRG)
            + (-0.0045438) * getSMEFTCoeff("CHB",muRG)
            + (-0.02822615) * getSMEFTCoeff("CHD",muRG)
            + (-0.0017067) * getSMEFTCoeff("CHWB",muRG)
            + (-0.05868) * getSMEFTCoeff("CHG",muRG)
            + (0.070123) * getSMEFTCoeff("CHq3R", 0, 0,muRG)
            + (0.069746) * getSMEFTCoeff("CHq3R", 1, 1,muRG)
            + (0.0006591) * getSMEFTCoeff("CHuR", 0, 0,muRG)
            + (0.00065708) * getSMEFTCoeff("CHuR", 1, 1,muRG)
            + (-0.000256626) * getSMEFTCoeff("CHdR", 0, 0,muRG)
            + (-0.000252814) * getSMEFTCoeff("CHdR", 1, 1,muRG)
            + (-0.181971) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.181971) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.182) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            + (-0.895) * deltaGwd6()
            + (-0.0262) * deltaGzd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-12.708 * deltaMz()
            + 14.393 * deltaMh()
            + 1.82 * deltaaMZ()
            + 0.188 * deltaGmu()))
            + cWsch * (cHSM * (-0.441 * deltaMz()
            - 8.601 * deltaMw()
            + 14.393 * deltaMh()
            + 2.022 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)  
    // Dominated by CC => Use HWW uncertainty
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2udRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        dwidth += cWsch * (
                +(0.014695) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (0.000994) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (0.015278) * pow(getSMEFTCoeffEW("CHB"), 2.0)
                + (0.0010088) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (0.005252) * pow(getSMEFTCoeffEW("CHWB"), 2.0)
                + (11.456) * pow(getSMEFTCoeffEW("CHG"), 2.0)
                + (0.0029759) * pow(getSMEFTCoeffEW("CHq3R", 0, 0), 2.0)
                + (0.0029646) * pow(getSMEFTCoeffEW("CHq3R", 1, 1), 2.0)
                + (0.011018) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.011018) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.011018) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (-0.01033512) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.00055115) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHB")
                + (-0.007099838) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                + (-0.00020639) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHWB")
                + (-0.007042) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHG")
                + (0.0085086) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0084775) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.01470364) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.01470364) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.014725) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0126698) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHB")
                + (0.0027047) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (-0.01297797) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHWB")
                + (-0.0006016) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHG")
                + (-0.00851159) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00850078) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.010333) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.010333) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.01033512) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00015239) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHD")
                + (0.0031685) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHWB")
                + (-0.00038338) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00038161) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0005526) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0005526) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0005511) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0017583) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHG")
                + (-0.00188801) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00188114) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0034285) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0034285) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00342549) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00013828) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00013656) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.000111953) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.0001115399) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.00020662) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.00020667) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00020631) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0009234) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0009279) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.003528) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.003528) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0035169) * getSMEFTCoeffEW("CHG") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00851568) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00851568) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0085086) * getSMEFTCoeffEW("CHq3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.008478119) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.008478119) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0084775) * getSMEFTCoeffEW("CHq3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0111) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.02206664) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.02206664) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.74) * pow(deltaGwd6(), 2.0) + (0.0087) * pow(deltaGzd6(), 2.0));

        dwidth += cWsch * (
                +(-0.1123) * deltaGwd6() * getSMEFTCoeffEW("CHbox")
                + (0.08154) * deltaGwd6() * getSMEFTCoeffEW("CHW")
                + (9.3e-05) * deltaGwd6() * getSMEFTCoeffEW("CHB")
                + (0.028249) * deltaGwd6() * getSMEFTCoeffEW("CHD")
                + (3.7e-05) * deltaGwd6() * getSMEFTCoeffEW("CHWB")
                + (-0.0106) * deltaGwd6() * getSMEFTCoeffEW("CHG")
                + (-9e-06) * deltaGwd6() * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (3e-06) * deltaGwd6() * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0653) * deltaGwd6() * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0654) * deltaGwd6() * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (3e-06) * deltaGwd6() * getSMEFTCoeffEW("CHuR", 0, 0)
                + (8.3e-06) * deltaGwd6() * getSMEFTCoeffEW("CHuR", 1, 1)
                + (2.25e-06) * deltaGwd6() * getSMEFTCoeffEW("CHdR", 0, 0)
                + (1.38e-06) * deltaGwd6() * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.16645) * deltaGwd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.16645) * deltaGwd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.1685) * deltaGwd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0039) * deltaGzd6() * getSMEFTCoeffEW("CHbox")
                + (-0.002882) * deltaGzd6() * getSMEFTCoeffEW("CHW")
                + (0.005316) * deltaGzd6() * getSMEFTCoeffEW("CHB")
                + (-0.0013023) * deltaGzd6() * getSMEFTCoeffEW("CHD")
                + (0.001036) * deltaGzd6() * getSMEFTCoeffEW("CHWB")
                + (-0.005) * deltaGzd6() * getSMEFTCoeffEW("CHG")
                + (5.1e-05) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (9.65e-05) * deltaGzd6() * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.00263) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.00228) * deltaGzd6() * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0006) * deltaGzd6() * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.000582) * deltaGzd6() * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.0002321) * deltaGzd6() * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.0002269) * deltaGzd6() * getSMEFTCoeffEW("CHdR", 1, 1)
                + (0.00641) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.00641) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0059) * deltaGzd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH2udRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2udRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2udRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2LvRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2LvRatio1
    double width = 1.0;

    width += deltaGammaH2LvRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2LvRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2LvRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0073;
    double muRG = 125.1;

    //------ Old alpha scheme expression: Beg
    dwidth += cAsch * (+121133. * getSMEFTCoeff("CHbox",muRG)
            + 1057.61 * getSMEFTCoeff("CHB",muRG)
            - 91969.3 * getSMEFTCoeff("CHW",muRG)
            - 137.279 * getSMEFTCoeff("CHl1R", 0, 0,muRG)
            - 137.825 * getSMEFTCoeff("CHl1R", 1, 1,muRG)
            - 123.03 * getSMEFTCoeff("CHl1R", 2, 2,muRG)
            - 897.801 * getSMEFTCoeff("CHeR", 0, 0,muRG)
            - 865.641 * getSMEFTCoeff("CHeR", 1, 1,muRG)
            - 862.721 * getSMEFTCoeff("CHeR", 2, 2,muRG)
            + 45408.9 * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + 45540.1 * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + 45765.4 * getSMEFTCoeff("CHl3R", 2, 2,muRG)
            - 198032. * getSMEFTCoeff("CHD",muRG)
            - 364301. * getSMEFTCoeff("CHWB",muRG)
            - 4.631 * delta_GF
            - 13.529 * deltaMwd6()
            - 0.956 * deltaGwd6()
            - 0.037 * deltaGzd6()
            );
            /*+ cWsch * (-33553.1 * getSMEFTCoeff("CHD")
            - 3437.65 * getSMEFTCoeff("CHWB")
            - 3.001 * delta_GF
            - 0.036 * deltaGzd6()
            - 0.956 * deltaGwd6()
            ));*/
    
    //------ Old alpha scheme expression: End

    // AG: 
    dwidth += cWsch * (
            ((0.12114) * getSMEFTCoeff("CHbox",muRG)
            + (-0.0916348) * getSMEFTCoeff("CHW",muRG)
            + (0.000592) * getSMEFTCoeff("CHB",muRG)
            + (-0.0333329) * getSMEFTCoeff("CHD",muRG)
            + (-0.003342) * getSMEFTCoeff("CHWB",muRG)
            + (-0.00014956) * getSMEFTCoeff("CHl1R", 0, 0,muRG)
            + (-0.0001496) * getSMEFTCoeff("CHl1R", 1, 1,muRG)
            + (-0.0001277) * getSMEFTCoeff("CHl1R", 2, 2,muRG)
            + (-0.1360386) * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + (-0.1361577) * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + (0.045354) * getSMEFTCoeff("CHl3R", 2, 2,muRG)
            + (-0.000816964) * getSMEFTCoeff("CHeR", 0, 0,muRG)
            + (-0.000817925) * getSMEFTCoeff("CHeR", 1, 1,muRG)
            + (-0.000817821) * getSMEFTCoeff("CHeR", 2, 2,muRG)
            + (0.1817) * getSMEFTCoeff("CllR", 0, 1, 1, 0,muRG)) * 1000000
            + (-0.938) * deltaGwd6()
            + (-0.041) * deltaGzd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-12.684 * deltaMz()
            + 13.95 * deltaMh()
            + 1.899 * deltaaMZ()
            + 0.151 * deltaGmu()))
            + cWsch * (cHSM * (-0.128 * deltaMz()
            - 8.864 * deltaMw()
            + 13.95 * deltaMh()
            + 2.045 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)  
    // Dominated by CC => Use HWW uncertainty
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2LvRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        dwidth += cWsch * (
                +(0.014703) * pow(getSMEFTCoeffEW("CHbox"), 2.0)
                + (0.010735) * pow(getSMEFTCoeffEW("CHW"), 2.0)
                + (0.018974) * pow(getSMEFTCoeffEW("CHB"), 2.0)
                + (0.0013761) * pow(getSMEFTCoeffEW("CHD"), 2.0)
                + (0.007877) * pow(getSMEFTCoeffEW("CHWB"), 2.0)
                + (0.007426) * pow(getSMEFTCoeffEW("CHl3R", 0, 0), 2.0)
                + (0.007427) * pow(getSMEFTCoeffEW("CHl3R", 1, 1), 2.0)
                + (0.0019336) * pow(getSMEFTCoeffEW("CHl3R", 2, 2), 2.0)
                + (0.011029) * pow(getSMEFTCoeffEW("CllR", 0, 1, 1, 0), 2.0)
                + (-0.01111144) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHW")
                + (-0.007719474) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHD")
                + (-0.00040589) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHWB")
                + (-0.00915104) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.00914935) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.0055012) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.014685) * getSMEFTCoeffEW("CHbox") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.037699) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHB")
                + (0.0042941) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHD")
                + (-0.0236584) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHWB")
                + (0.005298) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0052989) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00576922) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.01111144) * getSMEFTCoeffEW("CHW") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00133872) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHD")
                + (0.023535) * getSMEFTCoeffEW("CHB") * getSMEFTCoeffEW("CHWB")
                + (0.00032712) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHWB")
                + (0.00268) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.0026807) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.00134623) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.00403804) * getSMEFTCoeffEW("CHD") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.00038329) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.00038372) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.000111398) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.00011135) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.00011094) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.00040588) * getSMEFTCoeffEW("CHWB") * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.005492) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.016504846) * getSMEFTCoeffEW("CHl3R", 0, 0) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.00549) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.016487234) * getSMEFTCoeffEW("CHl3R", 1, 1) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (0.0055012) * getSMEFTCoeffEW("CHl3R", 2, 2) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                ) * pow(1000000.0, 2.0);

        dwidth += cWsch * ((0.78) * pow(deltaGwd6(), 2.0) + (0.03) * pow(deltaGzd6(), 2.0));

        dwidth += cWsch * (
                +(-0.113) * deltaGwd6() * getSMEFTCoeffEW("CHbox")
                + (0.08401) * deltaGwd6() * getSMEFTCoeffEW("CHW")
                + (0.00021) * deltaGwd6() * getSMEFTCoeffEW("CHB")
                + (0.02799) * deltaGwd6() * getSMEFTCoeffEW("CHD")
                + (0.000269) * deltaGwd6() * getSMEFTCoeffEW("CHWB")
                + (1.29e-05) * deltaGwd6() * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (5.8e-06) * deltaGwd6() * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (1.13e-05) * deltaGwd6() * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.12714) * deltaGwd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.12563) * deltaGwd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0429) * deltaGwd6() * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (3.154e-05) * deltaGwd6() * getSMEFTCoeffEW("CHeR", 0, 0)
                + (-2.23e-06) * deltaGwd6() * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-2.448e-05) * deltaGwd6() * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.1695) * deltaGwd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                + (-0.0052) * deltaGzd6() * getSMEFTCoeffEW("CHbox")
                + (0.000409) * deltaGzd6() * getSMEFTCoeffEW("CHW")
                + (0.001324) * deltaGzd6() * getSMEFTCoeffEW("CHB")
                + (0.000337) * deltaGzd6() * getSMEFTCoeffEW("CHD")
                + (0.00102) * deltaGzd6() * getSMEFTCoeffEW("CHWB")
                + (-8.5e-05) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-5.01e-05) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.000104) * deltaGzd6() * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (0.006545) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (0.004527) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (-0.0015) * deltaGzd6() * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (0.0007588) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 0, 0)
                + (0.0007016) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0.00072326) * deltaGzd6() * getSMEFTCoeffEW("CHeR", 2, 2)
                + (-0.0078) * deltaGzd6() * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                )*1000000;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH2LvRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2LvRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2LvRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2Lv2Ratio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2Lv2Ratio1
    double width = 1.0;

    width += deltaGammaH2Lv2Ratio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2Lv2Ratio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2Lv2Ratio1() const {
    double dwidth = 0.0;

    double C1 = 0.0073;
    double muRG = 125.1;

    dwidth += (+121215. * getSMEFTCoeff("CHbox",muRG)
            + 1054.39 * getSMEFTCoeff("CHB",muRG)
            - 91849.7 * getSMEFTCoeff("CHW",muRG)
            - 205.44 * getSMEFTCoeff("CHl1R", 0, 0,muRG)
            - 205.933 * getSMEFTCoeff("CHl1R", 1, 1,muRG)
            - 1345.15 * getSMEFTCoeff("CHeR", 0, 0,muRG)
            - 1299.22 * getSMEFTCoeff("CHeR", 1, 1,muRG)
            + 68383.7 * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + 68347.6 * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + cAsch * (-198193. * getSMEFTCoeff("CHD",muRG)
            - 364163. * getSMEFTCoeff("CHWB",muRG)
            - 4.627 * delta_GF
            - 13.439 * deltaMwd6()
            - 0.961 * deltaGwd6()
            - 0.042 * deltaGzd6()
            )
            + cWsch * (-33577.8 * getSMEFTCoeff("CHD",muRG)
            - 3457.89 * getSMEFTCoeff("CHWB",muRG)
            - 2.999 * delta_GF
            - 0.042 * deltaGzd6()
            - 0.961 * deltaGwd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-12.755 * deltaMz()
            + 14.08 * deltaMh()
            + 1.884 * deltaaMZ()
            + 0.121 * deltaGmu()))
            + cWsch * (cHSM * (-0.118 * deltaMz()
            - 8.746 * deltaMw()
            + 14.08 * deltaMh()
            + 2.002 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)  
    // Dominated by CC => Use HWW uncertainty
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2Lv2Ratio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH2Lv2Ratio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2Lv2Ratio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2Lv2Ratio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2evRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2evRatio1
    double width = 1.0;

    width += deltaGammaH2evRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2evRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2evRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0073;
    double muRG = 125.1;

    dwidth += (+121306. * getSMEFTCoeff("CHbox",muRG)
            + 1054.18 * getSMEFTCoeff("CHB",muRG)
            - 91797.7 * getSMEFTCoeff("CHW",muRG)
            - 411.183 * getSMEFTCoeff("CHl1R", 0, 0,muRG)
            - 2684.07 * getSMEFTCoeff("CHeR", 0, 0,muRG)
            + 136899. * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + cAsch * (-198266. * getSMEFTCoeff("CHD",muRG)
            - 364381. * getSMEFTCoeff("CHWB",muRG)
            - 4.629 * delta_GF
            - 0.037 * deltaGzd6()
            - 13.549 * deltaMwd6()
            - 0.965 * deltaGwd6())
            + cWsch * (-33589.4 * getSMEFTCoeff("CHD",muRG)
            - 3458.14 * getSMEFTCoeff("CHWB",muRG)
            - 2.999 * delta_GF
            - 0.037 * deltaGzd6()
            - 0.965 * deltaGwd6())
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (cAsch * (-12.638 * deltaMz()
            + 14.08 * deltaMh()
            + 1.901 * deltaaMZ()
            + 0.103 * deltaGmu())
            + cWsch * (-0.103 * deltaMz()
            - 8.875 * deltaMw()
            + 14.08 * deltaMh()
            + 2.015 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)  
    // Dominated by CC => Use HWW uncertainty
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2evRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH2evRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2evRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2evRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2muvRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2muvRatio1
    double width = 1.0;

    width += deltaGammaH2muvRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2muvRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2muvRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0073;
    double muRG = 125.1;

    dwidth += (+121244. * getSMEFTCoeff("CHbox",muRG)
            + 1045.26 * getSMEFTCoeff("CHB",muRG)
            - 91781. * getSMEFTCoeff("CHW",muRG)
            - 410.738 * getSMEFTCoeff("CHl1R", 1, 1,muRG)
            - 2593.82 * getSMEFTCoeff("CHeR", 1, 1,muRG)
            + 136695. * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + cAsch * (-198022. * getSMEFTCoeff("CHD",muRG)
            - 364213. * getSMEFTCoeff("CHWB",muRG)
            - 4.625 * delta_GF
            - 0.031 * deltaGzd6())
            + cWsch * (-33559. * getSMEFTCoeff("CHD",muRG)
            - 3447.11 * getSMEFTCoeff("CHWB",muRG)
            - 2.998 * delta_GF
            - 0.031 * deltaGzd6())
            );

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (cAsch * (-12.671 * deltaMz()
            - 13.492 * deltaMwd6()
            - 0.957 * deltaGwd6()
            + 14.005 * deltaMh()
            + 1.868 * deltaaMZ()
            + 0.103 * deltaGmu())
            + cWsch * (-0.177 * deltaMz()
            - 8.833 * deltaMw()
            - 0.957 * deltaGwd6()
            + 14.005 * deltaMh()
            + 1.959 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)  
    // Dominated by CC => Use HWW uncertainty
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2muvRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH2muvRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2muvRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2muvRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH4fRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4fRatio1
    double width = 1.0;

    width += deltaGammaH4fRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4fRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH4fRatio1() const {
    double dwidth = 0.0;
    
    // SM decay widths (from MG simulations)
    /*double wH2L2LSM = 0.65682e-06, wH2v2vSM = 0.28126e-05, wH2L2vSM = 0.27224e-05;
    double wH2u2uSM = 0.22500e-05, wH2d2dSM = 0.11906e-04, wH2u2dSM = 0.12361e-04;
    double wH2L2uSM = 0.45029e-05, wH2L2dSM = 0.85830e-05, wH2v2uSM = 0.93233e-05;
    double wH2v2dSM = 0.17794e-04, wH4LSM = 0.33973e-06, wH4vSM = 0.16884e-05;
    double wH4uSM = 0.23669e-05, wH4dSM = 0.60254e-05;
    double wHLvvLSM = 0.58098e-04, wHudduSM = 0.13384e-03, wHLvudSM = 0.34149e-03;
    double wH2udSM = 0.13711e-03, wH2LvSM = 0.27557e-04;*/

    // AG: 
    double wH2L2LSM = 6.905e-07, wH2v2vSM = 2.922e-06, wH2L2vSM = 2.844e-06;
    double wH2u2uSM = 2.406e-06, wH2d2dSM = 1.265e-05, wH2u2dSM = 1.291e-05;
    double wH2L2uSM = 4.402e-06, wH2L2dSM = 8.593e-06, wH2v2uSM = 9.831e-06, wH2v2dSM = 1.867e-05;
    double wH4LSM = 3.565e-07, wH4vSM = 1.747e-06;
    double wH4uSM = 2.533e-06, wH4dSM = 6.394e-06;
    double wHLvvLSM = 6.318e-05, wHudduSM = 0.0001716, wHLvudSM = 0.0003606;
    double wH2udSM = 0.0001758, wH2LvSM = 3.164e-05;

    // Sum
    double wH4fSM = wH2L2LSM + wH2v2vSM + wH2L2vSM + wH2u2uSM + wH2d2dSM + wH2u2dSM +
            wH2L2uSM + wH2L2dSM + wH2v2uSM + wH2v2dSM + wH4LSM + wH4vSM + wH4uSM + wH4dSM + wHLvvLSM + wHudduSM +
            wHLvudSM + wH2udSM + wH2LvSM;

    dwidth += (wH2L2LSM * deltaGammaH2L2LRatio1() + wH2v2vSM * deltaGammaH2v2vRatio1() + wH2L2vSM * deltaGammaH2L2vRatio1() +
            wH2u2uSM * deltaGammaH2u2uRatio1() + wH2d2dSM * deltaGammaH2d2dRatio1() + wH2u2dSM * deltaGammaH2u2dRatio1() +
            wH2L2uSM * deltaGammaH2L2uRatio1() + wH2L2dSM * deltaGammaH2L2dRatio1() + wH2v2uSM * deltaGammaH2v2uRatio1() +
            wH2v2dSM * deltaGammaH2v2dRatio1() + wH4LSM * deltaGammaH4LRatio1() + wH4LSM * deltaGammaH4LRatio1() +
            wH4uSM * deltaGammaH4uRatio1() + wH4dSM * deltaGammaH4dRatio1() +
            wHLvvLSM * deltaGammaHLvvLRatio1() + wHudduSM * deltaGammaHudduRatio1() + wHLvudSM * deltaGammaHLvudRatio1() +
            wH2udSM * deltaGammaH2udRatio1() + wH2LvSM * deltaGammaH2LvRatio1()) / wH4fSM;
    
    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH4fRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        // SM decay widths (from MG simulations)
        double wH2L2LSM = 6.905e-07, wH2v2vSM = 2.922e-06, wH2L2vSM = 2.844e-06;
        double wH2u2uSM = 2.406e-06, wH2d2dSM = 1.265e-05, wH2u2dSM = 1.291e-05;
        double wH2L2uSM = 4.402e-06, wH2L2dSM = 8.593e-06, wH2v2uSM = 9.831e-06, wH2v2dSM = 1.867e-05;
        double wH4LSM = 3.565e-07, wH4vSM = 1.747e-06;
        double wH4uSM = 2.533e-06, wH4dSM = 6.394e-06;
        double wHLvvLSM = 6.318e-05, wHudduSM = 0.0001716, wHLvudSM = 0.0003606;
        double wH2udSM = 0.0001758, wH2LvSM = 3.164e-05;

        // Sum
        double wH4fSM = wH2L2LSM + wH2v2vSM + wH2L2vSM + wH2u2uSM + wH2d2dSM + wH2u2dSM +
                wH2L2uSM + wH2L2dSM + wH2v2uSM + wH2v2dSM + wH4LSM + wH4vSM + wH4uSM + wH4dSM + wHLvvLSM + wHudduSM +
                wHLvudSM + wH2udSM + wH2LvSM;

        //Contributions that are quadratic in the effective coefficients
        dwidth += (wH2L2LSM * deltaGammaH2L2LRatio2() + wH2v2vSM * deltaGammaH2v2vRatio2() + wH2L2vSM * deltaGammaH2L2vRatio2() +
                wH2u2uSM * deltaGammaH2u2uRatio2() + wH2d2dSM * deltaGammaH2d2dRatio2() + wH2u2dSM * deltaGammaH2u2dRatio2() +
                wH2L2uSM * deltaGammaH2L2uRatio2() + wH2L2dSM * deltaGammaH2L2dRatio2() + wH2v2uSM * deltaGammaH2v2uRatio2() +
                wH2v2dSM * deltaGammaH2v2dRatio2() + wH4LSM * deltaGammaH4LRatio2() + wH4LSM * deltaGammaH4LRatio2() +
                wH4uSM * deltaGammaH4uRatio2() + wH4dSM * deltaGammaH4dRatio2() +
                wHLvvLSM * deltaGammaHLvvLRatio2() + wHudduSM * deltaGammaHudduRatio2() + wHLvudSM * deltaGammaHLvudRatio2() +
                wH2udSM * deltaGammaH2udRatio2() + wH2LvSM * deltaGammaH2LvRatio2()) / wH4fSM;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH4fRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4fRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4fRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}


const double NPSMEFTd6General::GammaH4fNCRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4fNCRatio1
    double width = 1.0;

    width += deltaGammaH4fNCRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4fNCRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH4fNCRatio1() const {
    double dwidth = 0.0;
    
    // SM decay widths (from MG simulations) 
    double wH2L2LSM = 6.905e-07, wH2v2vSM = 2.922e-06, wH2L2vSM = 2.844e-06;
    double wH2u2uSM = 2.406e-06, wH2d2dSM = 1.265e-05, wH2u2dSM = 1.291e-05;
    double wH2L2uSM = 4.402e-06, wH2L2dSM = 8.593e-06, wH2v2uSM = 9.831e-06, wH2v2dSM = 1.867e-05;
    double wH4LSM = 3.565e-07, wH4vSM = 1.747e-06;
    double wH4uSM = 2.533e-06, wH4dSM = 6.394e-06;

    // Sum
    double wH4fSM = wH2L2LSM + wH2v2vSM + wH2L2vSM + wH2u2uSM + wH2d2dSM + wH2u2dSM +
            wH2L2uSM + wH2L2dSM + wH2v2uSM + wH2v2dSM + wH4LSM + wH4vSM + wH4uSM + wH4dSM;

    dwidth += (wH2L2LSM * deltaGammaH2L2LRatio1() + wH2v2vSM * deltaGammaH2v2vRatio1() + wH2L2vSM * deltaGammaH2L2vRatio1() +
            wH2u2uSM * deltaGammaH2u2uRatio1() + wH2d2dSM * deltaGammaH2d2dRatio1() + wH2u2dSM * deltaGammaH2u2dRatio1() +
            wH2L2uSM * deltaGammaH2L2uRatio1() + wH2L2dSM * deltaGammaH2L2dRatio1() + wH2v2uSM * deltaGammaH2v2uRatio1() +
            wH2v2dSM * deltaGammaH2v2dRatio1() + wH4LSM * deltaGammaH4LRatio1() + wH4LSM * deltaGammaH4LRatio1() +
            wH4uSM * deltaGammaH4uRatio1() + wH4dSM * deltaGammaH4dRatio1()) / wH4fSM;
    
    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH4fNCRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        // SM decay widths (from MG simulations)
        double wH2L2LSM = 6.905e-07, wH2v2vSM = 2.922e-06, wH2L2vSM = 2.844e-06;
        double wH2u2uSM = 2.406e-06, wH2d2dSM = 1.265e-05, wH2u2dSM = 1.291e-05;
        double wH2L2uSM = 4.402e-06, wH2L2dSM = 8.593e-06, wH2v2uSM = 9.831e-06, wH2v2dSM = 1.867e-05;
        double wH4LSM = 3.565e-07, wH4vSM = 1.747e-06;
        double wH4uSM = 2.533e-06, wH4dSM = 6.394e-06;

        // Sum
        double wH4fSM = wH2L2LSM + wH2v2vSM + wH2L2vSM + wH2u2uSM + wH2d2dSM + wH2u2dSM +
                wH2L2uSM + wH2L2dSM + wH2v2uSM + wH2v2dSM + wH4LSM + wH4vSM + wH4uSM + wH4dSM;

        //Contributions that are quadratic in the effective coefficients
        dwidth += (wH2L2LSM * deltaGammaH2L2LRatio2() + wH2v2vSM * deltaGammaH2v2vRatio2() + wH2L2vSM * deltaGammaH2L2vRatio2() +
                wH2u2uSM * deltaGammaH2u2uRatio2() + wH2d2dSM * deltaGammaH2d2dRatio2() + wH2u2dSM * deltaGammaH2u2dRatio2() +
                wH2L2uSM * deltaGammaH2L2uRatio2() + wH2L2dSM * deltaGammaH2L2dRatio2() + wH2v2uSM * deltaGammaH2v2uRatio2() +
                wH2v2dSM * deltaGammaH2v2dRatio2() + wH4LSM * deltaGammaH4LRatio2() + wH4LSM * deltaGammaH4LRatio2() +
                wH4uSM * deltaGammaH4uRatio2() + wH4dSM * deltaGammaH4dRatio2()) / wH4fSM;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH4fNCRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4fNCRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4fNCRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}


const double NPSMEFTd6General::GammaH4fCCRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4fCCRatio1
    double width = 1.0;

    width += deltaGammaH4fCCRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4fCCRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH4fCCRatio1() const {
    double dwidth = 0.0;
    
    // SM decay widths (from MG simulations) 
    double wHLvvLSM = 6.318e-05, wHudduSM = 0.0001716, wHLvudSM = 0.0003606;
    double wH2udSM = 0.0001758, wH2LvSM = 3.164e-05;

    // Sum
    double wH4fSM = wHLvvLSM + wHudduSM + wHLvudSM + wH2udSM + wH2LvSM;

    dwidth += (wHLvvLSM * deltaGammaHLvvLRatio1() + wHudduSM * deltaGammaHudduRatio1() + wHLvudSM * deltaGammaHLvudRatio1() +
            wH2udSM * deltaGammaH2udRatio1() + wH2LvSM * deltaGammaH2LvRatio1()) / wH4fSM;
    
    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH4fCCRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        // SM decay widths (from MG simulations)
        double wHLvvLSM = 6.318e-05, wHudduSM = 0.0001716, wHLvudSM = 0.0003606;
        double wH2udSM = 0.0001758, wH2LvSM = 3.164e-05;

        // Sum
        double wH4fSM = wHLvvLSM + wHudduSM + wHLvudSM + wH2udSM + wH2LvSM;

        //Contributions that are quadratic in the effective coefficients
        dwidth += (wHLvvLSM * deltaGammaHLvvLRatio2() + wHudduSM * deltaGammaHudduRatio2() + wHLvudSM * deltaGammaHLvudRatio2() +
                wH2udSM * deltaGammaH2udRatio2() + wH2LvSM * deltaGammaH2LvRatio2()) / wH4fSM;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH4fCCRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4fCCRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4fCCRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}


const double NPSMEFTd6General::GammaH4lRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4lRatio1
    double width = 1.0;

    width += deltaGammaH4lRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4lRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH4lRatio1() const {
    double dwidth = 0.0;

    // SM decay widths (from MG simmulations)
    double wH2e2muSM = 0.22065e-06, wH4L2SM = 0.22716e-06;

    // Sum
    double wH4lSM = wH2e2muSM + wH4L2SM;

    dwidth += (wH2e2muSM * deltaGammaH2e2muRatio1() + wH4L2SM * deltaGammaH4L2Ratio1()) / wH4lSM;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH4lRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH4lRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4lRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4lRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaH2l2vRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2l2vRatio1
    double width = 1.0;

    width += deltaGammaH2l2vRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2l2vRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaH2l2vRatio1() const {
    double dwidth = 0.0;

    // SM decay widths (from MG simmulations)
    double wH2L2v2SM = 0.18213e-05, wHevmuvSM = 0.19421e-04, wH2Lv2SM = 0.18353e-04;

    // Sum
    double wH2l2vSM = wH2L2v2SM + wHevmuvSM + wH2Lv2SM;

    dwidth += (wH2L2v2SM * deltaGammaH2L2v2Ratio1() + wHevmuvSM * deltaGammaHevmuvRatio1()
            + wH2Lv2SM * deltaGammaH2Lv2Ratio1()) / wH2l2vSM;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaH2l2vRatio2() const {
    double dwidth = 0.0;
    if (FlagQuadraticTerms) {
        //Contributions that are quadratic in the effective coefficients
        dwidth += 0.0;
    }

    return dwidth;
}

const double NPSMEFTd6General::BrH2l2vRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2l2vRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2l2vRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

///////////////////////OTHER DEDICATED (SEMI-)LEPTONIC 4 FERMION DECAYS/////////////////////////

const double NPSMEFTd6General::GammaHlljjRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHlljjRatio1
    double width = 1.0;

    width += deltaGammaHlljjRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHlljjRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaHlljjRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0083;
    double muRG = 125.1;

    dwidth += (+121311. * getSMEFTCoeff("CHbox",muRG)
            - 92298.6 * getSMEFTCoeff("CHB",muRG)
            + 24856.5 * getSMEFTCoeff("CHW",muRG)
            + 31820. * (getSMEFTCoeff("CHl1R", 0, 0,muRG) + getSMEFTCoeff("CHl3R", 0, 0,muRG))
            + 31802.8 * (getSMEFTCoeff("CHl1R", 1, 1,muRG) + getSMEFTCoeff("CHl3R", 1, 1,muRG))
            + 3495.26 * getSMEFTCoeff("CHq1R", 0, 0,muRG)
            + 3545.61 * getSMEFTCoeff("CHq1R", 1, 1,muRG)
            - 27325.3 * getSMEFTCoeff("CHeR", 0, 0,muRG)
            - 27320.8 * getSMEFTCoeff("CHeR", 1, 1,muRG)
            + 6992.68 * getSMEFTCoeff("CHuR", 0, 0,muRG)
            + 6968.35 * getSMEFTCoeff("CHuR", 1, 1,muRG)
            - 3496.34 * getSMEFTCoeff("CHdR", 0, 0,muRG)
            - 3497.7 * getSMEFTCoeff("CHdR", 1, 1,muRG)
            + 34929.4 * getSMEFTCoeff("CHq3R", 0, 0,muRG)
            + 34902.6 * getSMEFTCoeff("CHq3R", 1, 1,muRG)
            + cAsch * (-51170.9 * getSMEFTCoeff("CHD",muRG)
            - 173417. * getSMEFTCoeff("CHWB",muRG)
            - 3.69 * delta_GF
            - 0.84 * deltaGzd6()
            )
            + cWsch * (+18275. * getSMEFTCoeff("CHD",muRG)
            - 20362.3 * getSMEFTCoeff("CHWB",muRG)
            - 3.001 * delta_GF
            - 0.84 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.881 * deltaMz()
            + 16.162 * deltaMh()
            - 0.407 * deltaaMZ()
            + 2.579 * deltaGmu()))
            + cWsch * (cHSM * (-12.635 * deltaMz()
            + 16.162 * deltaMh()
            + 2.15 * deltaGmu()
            + 1.831 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaHlljjRatio2() const {
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

const double NPSMEFTd6General::BrHlljjRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHlljjRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHlljjRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaHlvjjRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHlvjjRatio1
    double width = 1.0;

    width += deltaGammaHlvjjRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHlvjjRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaHlvjjRatio1() const {
    double dwidth = 0.0;

    double C1 = 0.0073;
    double muRG = 125.1;

    dwidth += (+121253. * getSMEFTCoeff("CHbox",muRG)
            - 93392.5 * getSMEFTCoeff("CHW",muRG)
            + 33596.1 * getSMEFTCoeff("CHl3R", 0, 0,muRG)
            + 33564.4 * getSMEFTCoeff("CHl3R", 1, 1,muRG)
            + 34752.8 * getSMEFTCoeff("CHq3R", 0, 0,muRG)
            + 34719.9 * getSMEFTCoeff("CHq3R", 1, 1,muRG)
            + cAsch * (-203815. * getSMEFTCoeff("CHD",muRG)
            - 380827. * getSMEFTCoeff("CHWB",muRG)
            - 4.723 * delta_GF
            - 13.742 * deltaMwd6()
            - 0.962 * deltaGwd6()
            )
            + cWsch * (-30332.8 * getSMEFTCoeff("CHD",muRG)
            + 0. * getSMEFTCoeff("CHWB",muRG)
            - 3.004 * delta_GF
            - 0.962 * deltaGwd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth += cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio_mu(muRG);


    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-12.383 * deltaMz()
            + 13.843 * deltaMh()
            + 1.845 * deltaaMZ()
            + 0.244 * deltaGmu()))
            + cWsch * (cHSM * (-0.034 * deltaMz()
            - 8.477 * deltaMw()
            + 13.843 * deltaMh()
            + 2.008 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaHlvjjRatio2() const {
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

const double NPSMEFTd6General::BrHlvjjRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHlvjjRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHlvjjRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaHlv_lvorjjRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHlv_lvorjjRatio1
    double width = 1.0;

    width += deltaGammaHlv_lvorjjRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHlv_lvorjjRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaHlv_lvorjjRatio1() const {
    double dwidth = 0.0;

    // SM decay widths (from MG simulations)
    double wH2Lv2SM = 0.18353e-04, wHevmuvSM = 0.19421e-04, wHlvjjSM = 0.228e-03;

    // Sum
    double wHlv_lvorjjSM = wH2Lv2SM + wHevmuvSM + wHlvjjSM;

    dwidth += (wH2Lv2SM * deltaGammaH2Lv2Ratio1()
            + wHevmuvSM * deltaGammaHevmuvRatio1()
            + wHlvjjSM * deltaGammaHlvjjRatio1()) / wHlv_lvorjjSM;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaHlv_lvorjjRatio2() const {
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

const double NPSMEFTd6General::BrHlv_lvorjjRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHlv_lvorjjRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHlv_lvorjjRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

const double NPSMEFTd6General::GammaHll_vvorjjRatio() const {
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHll_vvorjjRatio1
    double width = 1.0;

    width += deltaGammaHll_vvorjjRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHll_vvorjjRatio2();
    }

    return width;
}

const double NPSMEFTd6General::deltaGammaHll_vvorjjRatio1() const {
    double dwidth = 0.0;

    // SM decay widths (from MG simmulations)
    double wH2L2v2SM = 0.18213e-05, wHlljjSM = 0.69061E-05;

    // Sum
    double wHll_vvorjjSM = wH2L2v2SM + wHlljjSM;

    dwidth += (wH2L2v2SM * deltaGammaH2L2v2Ratio1()
            + wHlljjSM * deltaGammaHlljjRatio1()) / wHll_vvorjjSM;

    return dwidth;
}

const double NPSMEFTd6General::deltaGammaHll_vvorjjRatio2() const {
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

const double NPSMEFTd6General::BrHll_vvorjjRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHll_vvorjjRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHll_vvorjjRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

///////////////////////OTHER HIGGS BRANCHING RATIOS///////////////////////// 

const double NPSMEFTd6General::Br_H_exo() const {
    if (BrHexo < 0) return std::numeric_limits<double>::quiet_NaN();

    return BrHexo;
}

const double NPSMEFTd6General::Br_H_inv() const {
    //  Contributions from both modifications in H->ZZ->4v and the extra invisible decays
    double BR4v;

    BR4v = BrHZZ4vRatio()*(trueSM.computeBrHto4v());

    //  BR4v positivity is already checked inside BrHZZ4vRatio()
    //  and will be nan if negative. Check here BrHinv, to make sure both are positive
    if (BrHinv < 0) return std::numeric_limits<double>::quiet_NaN();

    return BR4v + BrHinv;
}

const double NPSMEFTd6General::Br_H_inv_NP() const {

    //  BR4v positivity is already checked inside BrHZZ4vRatio()
    //  and will be nan if negative. Check here BrHinv, to make sure both are positive
    if (BrHinv < 0) return std::numeric_limits<double>::quiet_NaN();

    return BrHinv;
}

const double NPSMEFTd6General::BrHvisRatio() const {
    double Br = 1.0;
    double dvis1 = 0.0, dvis2 = 0.0, delta2SM;
    double GHvisR = 1.0;

    //  Sum over decays of visible SM and exotic modes
    dvis1 = (trueSM.computeBrHtogg() * deltaGammaHggRatio1()
            //            + trueSM.computeBrHtoWW() * deltaGammaHWWRatio1()
            //            + trueSM.computeBrHtoZZ() * deltaGammaHZZRatio1()
            + trueSM.computeBrHto4f() * deltaGammaH4fRatio1()
            + trueSM.computeBrHtoZga() * deltaGammaHZgaRatio1()
            + trueSM.computeBrHtogaga() * deltaGammaHgagaRatio1()
            + trueSM.computeBrHtomumu() * deltaGammaHmumuRatio1()
            + trueSM.computeBrHtotautau() * deltaGammaHtautauRatio1()
            + trueSM.computeBrHtocc() * deltaGammaHccRatio1()
            + trueSM.computeBrHtoss() * deltaGammaHssRatio1()
            + trueSM.computeBrHtobb() * deltaGammaHbbRatio1()
            + BrHexo);

    Br += dvis1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        //  Sum over decays of visible SM and exotic modes
        delta2SM = trueSM.computeBrHtogg() * deltaGammaHggRatio2()
                + trueSM.computeBrHtoWW() * deltaGammaHWWRatio2()
                + trueSM.computeBrHtoZZ() * deltaGammaHZZRatio2()
                + trueSM.computeBrHtoZga() * deltaGammaHZgaRatio2()
                + trueSM.computeBrHtogaga() * deltaGammaHgagaRatio2()
                + trueSM.computeBrHtomumu() * deltaGammaHmumuRatio2()
                + trueSM.computeBrHtotautau() * deltaGammaHtautauRatio2()
                + trueSM.computeBrHtocc() * deltaGammaHccRatio2()
                + trueSM.computeBrHtoss() * deltaGammaHssRatio2()
                + trueSM.computeBrHtobb() * deltaGammaHbbRatio2();

        dvis2 = delta2SM + (BrHexo)*(BrHexo + delta2SM);

        //Add contributions that are quadratic in the effective coefficients
        Br += -dvis1 * dGammaHTotR1
                + dvis2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHvisR += dvis1 + dvis2;
    if ((Br < 0) || (GHvisR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::BrHtoinvRatio() const {
    // H->ZZ*->4v + H->inv (NP)
    return ( Br_H_inv() / (trueSM.computeBrHto4v()) );
}


///////////////////////SPECIAL OBSERVABLES/////////////////////////

const double NPSMEFTd6General::muttHZbbboost(const double sqrt_s) const {
    // Ratios of BR with the SM
    double delBRHbbRatio, delBRZbbRatio;

    double CG = 0.0, CuHR33 = 0.0, CHq1R11 = 0.0, CHq3R11 = 0.0, CHuR11 = 0.0;
    double CHdR11 = 0.0, CHq1R22 = 0.0, CHq3R22 = 0.0, CHuR22 = 0.0, CHdR22 = 0.0;
    double CHq1R33 = 0.0, CHq3R33 = 0.0, CHuR33 = 0.0, CuGR33 = 0.0, Cqq1R1133 = 0.0;
    double Cqq1R1331 = 0.0, Cqq1R2233 = 0.0, Cqq1R2332 = 0.0, Cqq3R1133 = 0.0, Cqq3R1331 = 0.0;
    double Cqq3R2233 = 0.0, Cqq3R2332 = 0.0, CuuR1133 = 0.0, CuuR2233 = 0.0, CuuR1331 = 0.0;
    double CuuR2332 = 0.0, Cud1R3311 = 0.0, Cud1R3322 = 0.0, Cud8R3311 = 0.0, Cud8R3322 = 0.0;
    double Cqu1R1133 = 0.0, Cqu1R2233 = 0.0, Cqu1R3311 = 0.0, Cqu1R3322 = 0.0, Cqu8R1133 = 0.0;
    double Cqu8R2233 = 0.0, Cqu8R3311 = 0.0, Cqu8R3322 = 0.0, Cqd1R3311 = 0.0, Cqd1R3322 = 0.0;
    double Cqd8R3311 = 0.0, Cqd8R3322 = 0.0; 
    double CHl3R11 = 0.0, CHl3R22 = 0.0, CllR1221 = 0.0; 
    double muRG = 230.; // ttH done for 236 GeV, ttZ for 220 GeV
    
    double dsigmarat;
    
//  Corrections to ratios of BR for final states
    delBRHbbRatio = deltaGammaHbbRatio1() - dGammaHTotR1;
    
    delBRZbbRatio = deltaGamma_Zf(quarks[BOTTOM])/(trueSM.GammaZ(quarks[BOTTOM])) 
            - deltaGamma_Z()/ trueSM.Gamma_Z();
    
//  Wilson coefficients definitions 
    CG = getSMEFTCoeff("CG", muRG); 
    CuHR33 = getSMEFTCoeff("CuHR",2,2, muRG); 
    CHq1R11 = getSMEFTCoeff("CHq1R",0,0, muRG); 
    CHq3R11 = getSMEFTCoeff("CHq3R",0,0, muRG); 
    CHuR11 = getSMEFTCoeff("CHuR",0,0, muRG); 
    CHdR11 = getSMEFTCoeff("CHdR",0,0, muRG); 
    CHq1R22 = getSMEFTCoeff("CHq1R",1,1, muRG); 
    CHq3R22 = getSMEFTCoeff("CHq3R",1,1, muRG); 
    CHuR22 = getSMEFTCoeff("CHuR",1,1, muRG); 
    CHdR22 = getSMEFTCoeff("CHdR",1,1, muRG); 
    CHq1R33 = getSMEFTCoeff("CHq1R",2,2, muRG); 
    CHq3R33 = getSMEFTCoeff("CHq3R",2,2, muRG); 
    CHuR33 = getSMEFTCoeff("CHuR",2,2, muRG); 
    CuGR33 = getSMEFTCoeff("CuGR",2,2, muRG); 
    Cqq1R1133 = getSMEFTCoeff("Cqq1R",0,0,2,2, muRG); 
    Cqq1R1331 = getSMEFTCoeff("Cqq1R",0,2,2,0, muRG); 
    Cqq1R2233 = getSMEFTCoeff("Cqq1R",1,1,2,2, muRG); 
    Cqq1R2332 = getSMEFTCoeff("Cqq1R",1,2,2,1, muRG); 
    Cqq3R1133 = getSMEFTCoeff("Cqq3R",0,0,2,2, muRG); 
    Cqq3R1331 = getSMEFTCoeff("Cqq3R",0,2,2,0, muRG); 
    Cqq3R2233 = getSMEFTCoeff("Cqq3R",1,1,2,2, muRG); 
    Cqq3R2332 = getSMEFTCoeff("Cqq3R",1,2,2,1, muRG); 
    CuuR1133 = getSMEFTCoeff("CuuR",0,0,2,2, muRG); 
    CuuR2233 = getSMEFTCoeff("CuuR",1,1,2,2, muRG); 
    CuuR1331 = getSMEFTCoeff("CuuR",0,2,2,0, muRG); 
    CuuR2332 = getSMEFTCoeff("CuuR",1,2,2,1, muRG); 
    Cud1R3311 = getSMEFTCoeff("Cud1R",2,2,0,0, muRG); 
    Cud1R3322 = getSMEFTCoeff("Cud1R",2,2,1,1, muRG); 
    Cud8R3311 = getSMEFTCoeff("Cud8R",2,2,0,0, muRG); 
    Cud8R3322 = getSMEFTCoeff("Cud8R",2,2,1,1, muRG); 
    Cqu1R1133 = getSMEFTCoeff("Cqu1R",0,0,2,2, muRG); 
    Cqu1R2233 = getSMEFTCoeff("Cqu1R",1,1,2,2, muRG); 
    Cqu1R3311 = getSMEFTCoeff("Cqu1R",2,2,0,0, muRG); 
    Cqu1R3322 = getSMEFTCoeff("Cqu1R",2,2,1,1, muRG); 
    Cqu8R1133 = getSMEFTCoeff("Cqu8R",0,0,2,2, muRG); 
    Cqu8R2233 = getSMEFTCoeff("Cqu8R",1,1,2,2, muRG); 
    Cqu8R3311 = getSMEFTCoeff("Cqu8R",2,2,0,0, muRG); 
    Cqu8R3322 = getSMEFTCoeff("Cqu8R",2,2,1,1, muRG); 
    Cqd1R3311 = getSMEFTCoeff("Cqd1R",2,2,0,0, muRG); 
    Cqd1R3322 = getSMEFTCoeff("Cqd1R",2,2,1,1, muRG); 
    Cqd8R3311 = getSMEFTCoeff("Cqd8R",2,2,0,0, muRG); 
    Cqd8R3322 = getSMEFTCoeff("Cqd8R",2,2,1,1, muRG);     
    CHl3R11 = getSMEFTCoeff("CHl3R",0,0, muRG); 
    CHl3R22 = getSMEFTCoeff("CHl3R",1,1, muRG); 
    CllR1221 = getSMEFTCoeff("CllR",0,1,1,0, muRG); 
        
    // Madgraph simulations for 84 TeV

    dsigmarat = 1.0;
    //  ttH 84 TeV
    dsigmarat += (
                -814615. * CG 
                -122358. * CuHR33 
                +43.4869 * CHq1R11 
                +29.6743 * CHq3R11 
                +1.47314 * CHuR11 
                +71.5756 * CHdR11 
                +4.91872 * CHq1R22 
                -87.4079 * CHq3R22 
                -76.7362 * CHuR22 
                +11.5842 * CHdR22 
                -443.578 * CHq1R33 
                -293.356 * CHq3R33 
                -329.955 * CHuR33 
                -1237480. * CuGR33 
                +16.9383 * Cqq1R1133 
                +334309. * Cqq1R1331 
                -5.91142 * Cqq1R2233 
                +18575.1 * Cqq1R2332 
                -243.453 * Cqq3R1133 
                +743417. * Cqq3R1331 
                +58.8933 * Cqq3R2233 
                +90015.6 * Cqq3R2332 
                -23.0103 * CuuR1133 
                -44.938 * CuuR2233 
                +333804. * CuuR1331 
                +18524.5 * CuuR2332 
                -21.3446 * Cud1R3311 
                -41.7531 * Cud1R3322 
                +52881.4 * Cud8R3311 
                +6555.05 * Cud8R3322 
                +353.475 * Cqu1R1133 
                -74.8719 * Cqu1R2233 
                -192.922 * Cqu1R3311 
                -47.5578 * Cqu1R3322 
                +133978. * Cqu8R1133 
                +13659.6 * Cqu8R2233 
                +82844. * Cqu8R3311 
                +4587.38 * Cqu8R3322 
                -191.882 * Cqd1R3311 
                -76.3599 * Cqd1R3322 
                +53420.8 * Cqd8R3311 
                +6537.54 * Cqd8R3322 
                -61170.9 * (CHl3R11 + CHl3R22 - CllR1221 ) )
                ;            
            
    //  Divided (linearized) by ttZ 84 TeV
    dsigmarat = dsigmarat - (
                -1253959. * CG 
                -195.273 * CHq1R11 
                +5722.23 * CHq3R11 
                +939.285 * CHuR11 
                -840.086 * CHdR11 
                +316.078 * CHq1R22 
                +819.585 * CHq3R22 
                +97.2898 * CHuR22 
                -134.566 * CHdR22 
                -125938. * CHq1R33 
                +125889. * CHq3R33 
                +91464.4 * CHuR33 
                -564449. * CuGR33 
                -159.949 * Cqq1R1133 
                +371709. * Cqq1R1331 
                -68.0447 * Cqq1R2233 
                +17904.8 * Cqq1R2332 
                -91.1919 * Cqq3R1133 
                +1193228. * Cqq3R1331 
                +47.7377 * Cqq3R2233 
                +152055. * Cqq3R2332 
                -133.953 * CuuR1133 
                -17.3028 * CuuR2233 
                +181860. * CuuR1331 
                +9119.11 * CuuR2332 
                -195.733 * Cud1R3311 
                -39.4786 * Cud1R3322 
                +30947.2 * Cud8R3311 
                +3492.61 * Cud8R3322 
                -45.2385 * Cqu1R1133 
                -14.2913 * Cqu1R2233 
                -98.8336 * Cqu1R3311 
                -24.4606 * Cqu1R3322 
                +138699. * Cqu8R1133 
                +14699.9 * Cqu8R2233 
                +78699.3 * Cqu8R3311 
                +3755.34 * Cqu8R3322 
                -14.8631 * Cqd1R3311 
                -20.1378 * Cqd1R3322 
                +55799.6 * Cqd8R3311 
                +6291.33 * Cqd8R3322 
                -61231.8 * (CHl3R11 + CHl3R22 - CllR1221 ) );

    return (dsigmarat + delBRHbbRatio - delBRZbbRatio);
}

const double NPSMEFTd6General::muttHgagaZeeboost(const double sqrt_s) const {
    // Ratios of BR with the SM
    double delBRHgagaRatio, delBRZeeRatio;
    
    // Wilson Coefficients
    double CG = 0.0, CuHR33 = 0.0, CHq1R11 = 0.0, CHq3R11 = 0.0, CHuR11 = 0.0;
    double CHdR11 = 0.0, CHq1R22 = 0.0, CHq3R22 = 0.0, CHuR22 = 0.0, CHdR22 = 0.0;
    double CHq1R33 = 0.0, CHq3R33 = 0.0, CHuR33 = 0.0, CuGR33 = 0.0, Cqq1R1133 = 0.0;
    double Cqq1R1331 = 0.0, Cqq1R2233 = 0.0, Cqq1R2332 = 0.0, Cqq3R1133 = 0.0, Cqq3R1331 = 0.0;
    double Cqq3R2233 = 0.0, Cqq3R2332 = 0.0, CuuR1133 = 0.0, CuuR2233 = 0.0, CuuR1331 = 0.0;
    double CuuR2332 = 0.0, Cud1R3311 = 0.0, Cud1R3322 = 0.0, Cud8R3311 = 0.0, Cud8R3322 = 0.0;
    double Cqu1R1133 = 0.0, Cqu1R2233 = 0.0, Cqu1R3311 = 0.0, Cqu1R3322 = 0.0, Cqu8R1133 = 0.0;
    double Cqu8R2233 = 0.0, Cqu8R3311 = 0.0, Cqu8R3322 = 0.0, Cqd1R3311 = 0.0, Cqd1R3322 = 0.0;
    double Cqd8R3311 = 0.0, Cqd8R3322 = 0.0; 
    double CHl3R11 = 0.0, CHl3R22 = 0.0, CllR1221 = 0.0; 
    double muRG = 230.; // ttH done for 236 GeV, ttZ for 220 GeV
    
    double dsigmarat;
    
//  Corrections to ratios of BR for final states
    delBRHgagaRatio = deltaGammaHgagaRatio1() - dGammaHTotR1;
    
    delBRZeeRatio = deltaGamma_Zf(leptons[ELECTRON])/(trueSM.GammaZ(leptons[ELECTRON])) 
            - deltaGamma_Z()/ trueSM.Gamma_Z();
    
//  Wilson coefficients definitions 
    CG = getSMEFTCoeff("CG", muRG); 
    CuHR33 = getSMEFTCoeff("CuHR",2,2, muRG); 
    CHq1R11 = getSMEFTCoeff("CHq1R",0,0, muRG); 
    CHq3R11 = getSMEFTCoeff("CHq3R",0,0, muRG); 
    CHuR11 = getSMEFTCoeff("CHuR",0,0, muRG); 
    CHdR11 = getSMEFTCoeff("CHdR",0,0, muRG); 
    CHq1R22 = getSMEFTCoeff("CHq1R",1,1, muRG); 
    CHq3R22 = getSMEFTCoeff("CHq3R",1,1, muRG); 
    CHuR22 = getSMEFTCoeff("CHuR",1,1, muRG); 
    CHdR22 = getSMEFTCoeff("CHdR",1,1, muRG); 
    CHq1R33 = getSMEFTCoeff("CHq1R",2,2, muRG); 
    CHq3R33 = getSMEFTCoeff("CHq3R",2,2, muRG); 
    CHuR33 = getSMEFTCoeff("CHuR",2,2, muRG); 
    CuGR33 = getSMEFTCoeff("CuGR",2,2, muRG); 
    Cqq1R1133 = getSMEFTCoeff("Cqq1R",0,0,2,2, muRG); 
    Cqq1R1331 = getSMEFTCoeff("Cqq1R",0,2,2,0, muRG); 
    Cqq1R2233 = getSMEFTCoeff("Cqq1R",1,1,2,2, muRG); 
    Cqq1R2332 = getSMEFTCoeff("Cqq1R",1,2,2,1, muRG); 
    Cqq3R1133 = getSMEFTCoeff("Cqq3R",0,0,2,2, muRG); 
    Cqq3R1331 = getSMEFTCoeff("Cqq3R",0,2,2,0, muRG); 
    Cqq3R2233 = getSMEFTCoeff("Cqq3R",1,1,2,2, muRG); 
    Cqq3R2332 = getSMEFTCoeff("Cqq3R",1,2,2,1, muRG); 
    CuuR1133 = getSMEFTCoeff("CuuR",0,0,2,2, muRG); 
    CuuR2233 = getSMEFTCoeff("CuuR",1,1,2,2, muRG); 
    CuuR1331 = getSMEFTCoeff("CuuR",0,2,2,0, muRG); 
    CuuR2332 = getSMEFTCoeff("CuuR",1,2,2,1, muRG); 
    Cud1R3311 = getSMEFTCoeff("Cud1R",2,2,0,0, muRG); 
    Cud1R3322 = getSMEFTCoeff("Cud1R",2,2,1,1, muRG); 
    Cud8R3311 = getSMEFTCoeff("Cud8R",2,2,0,0, muRG); 
    Cud8R3322 = getSMEFTCoeff("Cud8R",2,2,1,1, muRG); 
    Cqu1R1133 = getSMEFTCoeff("Cqu1R",0,0,2,2, muRG); 
    Cqu1R2233 = getSMEFTCoeff("Cqu1R",1,1,2,2, muRG); 
    Cqu1R3311 = getSMEFTCoeff("Cqu1R",2,2,0,0, muRG); 
    Cqu1R3322 = getSMEFTCoeff("Cqu1R",2,2,1,1, muRG); 
    Cqu8R1133 = getSMEFTCoeff("Cqu8R",0,0,2,2, muRG); 
    Cqu8R2233 = getSMEFTCoeff("Cqu8R",1,1,2,2, muRG); 
    Cqu8R3311 = getSMEFTCoeff("Cqu8R",2,2,0,0, muRG); 
    Cqu8R3322 = getSMEFTCoeff("Cqu8R",2,2,1,1, muRG); 
    Cqd1R3311 = getSMEFTCoeff("Cqd1R",2,2,0,0, muRG); 
    Cqd1R3322 = getSMEFTCoeff("Cqd1R",2,2,1,1, muRG); 
    Cqd8R3311 = getSMEFTCoeff("Cqd8R",2,2,0,0, muRG); 
    Cqd8R3322 = getSMEFTCoeff("Cqd8R",2,2,1,1, muRG);     
    CHl3R11 = getSMEFTCoeff("CHl3R",0,0, muRG); 
    CHl3R22 = getSMEFTCoeff("CHl3R",1,1, muRG); 
    CllR1221 = getSMEFTCoeff("CllR",0,1,1,0, muRG); 
        
    // Madgraph simulations for 84 TeV

    dsigmarat = 1.0;
    //  ttH 84 TeV
    dsigmarat += (
                -814615. * CG 
                -122358. * CuHR33 
                +43.4869 * CHq1R11 
                +29.6743 * CHq3R11 
                +1.47314 * CHuR11 
                +71.5756 * CHdR11 
                +4.91872 * CHq1R22 
                -87.4079 * CHq3R22 
                -76.7362 * CHuR22 
                +11.5842 * CHdR22 
                -443.578 * CHq1R33 
                -293.356 * CHq3R33 
                -329.955 * CHuR33 
                -1237480. * CuGR33 
                +16.9383 * Cqq1R1133 
                +334309. * Cqq1R1331 
                -5.91142 * Cqq1R2233 
                +18575.1 * Cqq1R2332 
                -243.453 * Cqq3R1133 
                +743417. * Cqq3R1331 
                +58.8933 * Cqq3R2233 
                +90015.6 * Cqq3R2332 
                -23.0103 * CuuR1133 
                -44.938 * CuuR2233 
                +333804. * CuuR1331 
                +18524.5 * CuuR2332 
                -21.3446 * Cud1R3311 
                -41.7531 * Cud1R3322 
                +52881.4 * Cud8R3311 
                +6555.05 * Cud8R3322 
                +353.475 * Cqu1R1133 
                -74.8719 * Cqu1R2233 
                -192.922 * Cqu1R3311 
                -47.5578 * Cqu1R3322 
                +133978. * Cqu8R1133 
                +13659.6 * Cqu8R2233 
                +82844. * Cqu8R3311 
                +4587.38 * Cqu8R3322 
                -191.882 * Cqd1R3311 
                -76.3599 * Cqd1R3322 
                +53420.8 * Cqd8R3311 
                +6537.54 * Cqd8R3322 
                -61170.9 * (CHl3R11 + CHl3R22 - CllR1221 ) )
                ;            
            
    //  Divided (linearized) by ttZ 84 TeV
    dsigmarat = dsigmarat - (
                -1253959. * CG 
                -195.273 * CHq1R11 
                +5722.23 * CHq3R11 
                +939.285 * CHuR11 
                -840.086 * CHdR11 
                +316.078 * CHq1R22 
                +819.585 * CHq3R22 
                +97.2898 * CHuR22 
                -134.566 * CHdR22 
                -125938. * CHq1R33 
                +125889. * CHq3R33 
                +91464.4 * CHuR33 
                -564449. * CuGR33 
                -159.949 * Cqq1R1133 
                +371709. * Cqq1R1331 
                -68.0447 * Cqq1R2233 
                +17904.8 * Cqq1R2332 
                -91.1919 * Cqq3R1133 
                +1193228. * Cqq3R1331 
                +47.7377 * Cqq3R2233 
                +152055. * Cqq3R2332 
                -133.953 * CuuR1133 
                -17.3028 * CuuR2233 
                +181860. * CuuR1331 
                +9119.11 * CuuR2332 
                -195.733 * Cud1R3311 
                -39.4786 * Cud1R3322 
                +30947.2 * Cud8R3311 
                +3492.61 * Cud8R3322 
                -45.2385 * Cqu1R1133 
                -14.2913 * Cqu1R2233 
                -98.8336 * Cqu1R3311 
                -24.4606 * Cqu1R3322 
                +138699. * Cqu8R1133 
                +14699.9 * Cqu8R2233 
                +78699.3 * Cqu8R3311 
                +3755.34 * Cqu8R3322 
                -14.8631 * Cqd1R3311 
                -20.1378 * Cqd1R3322 
                +55799.6 * Cqd8R3311 
                +6291.33 * Cqd8R3322 
                -61231.8 * (CHl3R11 + CHl3R22 - CllR1221 ) );

    return (dsigmarat + delBRHgagaRatio - delBRZeeRatio);

}


const double NPSMEFTd6General::muggHgaga(const double sqrt_s) const {
    return muggH(sqrt_s) * BrHgagaRatio();

}

const double NPSMEFTd6General::muVBFHgaga(const double sqrt_s) const {
    return muVBF(sqrt_s) * BrHgagaRatio();

}

const double NPSMEFTd6General::muZHgaga(const double sqrt_s) const {
    return muZH(sqrt_s) * BrHgagaRatio();

}

const double NPSMEFTd6General::muWHgaga(const double sqrt_s) const {
    return muWH(sqrt_s) * BrHgagaRatio();

}

const double NPSMEFTd6General::muVHgaga(const double sqrt_s) const {
    return muVH(sqrt_s) * BrHgagaRatio();

}

const double NPSMEFTd6General::muttHgaga(const double sqrt_s) const {
    return muttH(sqrt_s) * BrHgagaRatio();

}

const double NPSMEFTd6General::muggHZga(const double sqrt_s) const {
    return muggH(sqrt_s) * BrHZgaRatio();

}

const double NPSMEFTd6General::muVBFHZga(const double sqrt_s) const {
    return muVBF(sqrt_s) * BrHZgaRatio();

}

const double NPSMEFTd6General::muZHZga(const double sqrt_s) const {
    return muZH(sqrt_s) * BrHZgaRatio();

}

const double NPSMEFTd6General::muWHZga(const double sqrt_s) const {
    return muWH(sqrt_s) * BrHZgaRatio();

}

const double NPSMEFTd6General::muVHZga(const double sqrt_s) const {
    return muVH(sqrt_s) * BrHZgaRatio();

}

const double NPSMEFTd6General::muttHZga(const double sqrt_s) const {
    return muttH(sqrt_s) * BrHZgaRatio();

}

const double NPSMEFTd6General::muggHZZ(const double sqrt_s) const {
    return muggH(sqrt_s) * BrHZZRatio();

}

const double NPSMEFTd6General::muVBFHZZ(const double sqrt_s) const {
    return muVBF(sqrt_s) * BrHZZRatio();

}

const double NPSMEFTd6General::muZHZZ(const double sqrt_s) const {
    return muZH(sqrt_s) * BrHZZRatio();

}

const double NPSMEFTd6General::muWHZZ(const double sqrt_s) const {
    return muWH(sqrt_s) * BrHZZRatio();

}

const double NPSMEFTd6General::muVHZZ(const double sqrt_s) const {
    return muVH(sqrt_s) * BrHZZRatio();

}

const double NPSMEFTd6General::muttHZZ(const double sqrt_s) const {
    return muttH(sqrt_s) * BrHZZRatio();

}

const double NPSMEFTd6General::muggHZZ4l(const double sqrt_s) const {
    return muggH(sqrt_s) * BrHZZ4lRatio();

}

const double NPSMEFTd6General::muVBFHZZ4l(const double sqrt_s) const {
    return muVBF(sqrt_s) * BrHZZ4lRatio();

}

const double NPSMEFTd6General::muZHZZ4l(const double sqrt_s) const {
    return muZH(sqrt_s) * BrHZZ4lRatio();

}

const double NPSMEFTd6General::muWHZZ4l(const double sqrt_s) const {
    return muWH(sqrt_s) * BrHZZ4lRatio();

}

const double NPSMEFTd6General::muVHZZ4l(const double sqrt_s) const {
    return muVH(sqrt_s) * BrHZZ4lRatio();

}

const double NPSMEFTd6General::muttHZZ4l(const double sqrt_s) const {
    return muttH(sqrt_s) * BrHZZ4lRatio();

}

const double NPSMEFTd6General::muggHWW(const double sqrt_s) const {
    return muggH(sqrt_s) * BrHWWRatio();

}

const double NPSMEFTd6General::muVBFHWW(const double sqrt_s) const {
    return muVBF(sqrt_s) * BrHWWRatio();

}

const double NPSMEFTd6General::muZHWW(const double sqrt_s) const {
    return muZH(sqrt_s) * BrHWWRatio();

}

const double NPSMEFTd6General::muWHWW(const double sqrt_s) const {
    return muWH(sqrt_s) * BrHWWRatio();

}

const double NPSMEFTd6General::muVHWW(const double sqrt_s) const {
    return muVH(sqrt_s) * BrHWWRatio();

}

const double NPSMEFTd6General::muttHWW(const double sqrt_s) const {
    return muttH(sqrt_s) * BrHWWRatio();

}

const double NPSMEFTd6General::muggHWW2l2v(const double sqrt_s) const {
    return muggH(sqrt_s) * BrHWW2l2vRatio();

}

const double NPSMEFTd6General::muVBFHWW2l2v(const double sqrt_s) const {
    return muVBF(sqrt_s) * BrHWW2l2vRatio();

}

const double NPSMEFTd6General::muZHWW2l2v(const double sqrt_s) const {
    return muZH(sqrt_s) * BrHWW2l2vRatio();

}

const double NPSMEFTd6General::muWHWW2l2v(const double sqrt_s) const {
    return muWH(sqrt_s) * BrHWW2l2vRatio();

}

const double NPSMEFTd6General::muVHWW2l2v(const double sqrt_s) const {
    return muVH(sqrt_s) * BrHWW2l2vRatio();

}

const double NPSMEFTd6General::muttHWW2l2v(const double sqrt_s) const {
    return muttH(sqrt_s) * BrHWW2l2vRatio();

}

const double NPSMEFTd6General::muggHmumu(const double sqrt_s) const {
    return muggH(sqrt_s) * BrHmumuRatio();

}

const double NPSMEFTd6General::muVBFHmumu(const double sqrt_s) const {
    return muVBF(sqrt_s) * BrHmumuRatio();

}

const double NPSMEFTd6General::muZHmumu(const double sqrt_s) const {
    return muZH(sqrt_s) * BrHmumuRatio();

}

const double NPSMEFTd6General::muWHmumu(const double sqrt_s) const {
    return muWH(sqrt_s) * BrHmumuRatio();

}

const double NPSMEFTd6General::muVHmumu(const double sqrt_s) const {
    return muVH(sqrt_s) * BrHmumuRatio();

}

const double NPSMEFTd6General::muttHmumu(const double sqrt_s) const {
    return muttH(sqrt_s) * BrHmumuRatio();

}

const double NPSMEFTd6General::muggHtautau(const double sqrt_s) const {
    return muggH(sqrt_s) * BrHtautauRatio();

}

const double NPSMEFTd6General::muVBFHtautau(const double sqrt_s) const {
    return muVBF(sqrt_s) * BrHtautauRatio();

}

const double NPSMEFTd6General::muZHtautau(const double sqrt_s) const {
    return muZH(sqrt_s) * BrHtautauRatio();

}

const double NPSMEFTd6General::muWHtautau(const double sqrt_s) const {
    return muWH(sqrt_s) * BrHtautauRatio();

}

const double NPSMEFTd6General::muVHtautau(const double sqrt_s) const {
    return muVH(sqrt_s) * BrHtautauRatio();

}

const double NPSMEFTd6General::muttHtautau(const double sqrt_s) const {
    return muttH(sqrt_s) * BrHtautauRatio();

}

const double NPSMEFTd6General::muggHbb(const double sqrt_s) const {
    return muggH(sqrt_s) * BrHbbRatio();

}

const double NPSMEFTd6General::muVBFHbb(const double sqrt_s) const {
    return muVBF(sqrt_s) * BrHbbRatio();

}

const double NPSMEFTd6General::muZHbb(const double sqrt_s) const {
    return muZH(sqrt_s) * BrHbbRatio();

}

const double NPSMEFTd6General::muWHbb(const double sqrt_s) const {
    return muWH(sqrt_s) * BrHbbRatio();

}

const double NPSMEFTd6General::muVHbb(const double sqrt_s) const {
    return muVH(sqrt_s) * BrHbbRatio();

}

const double NPSMEFTd6General::muttHbb(const double sqrt_s) const {
    return muttH(sqrt_s) * BrHbbRatio();

}

////////////////////////////////////////////////////////////////////////////////////////////
//-----------------------------------------------------------------------------------------
//-- Special Hadron collider signal strengths with separate full TH unc U(prod x decay) ---
//-----------------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////// 

const double NPSMEFTd6General::muTHUggHgaga(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHgagaRatio() * (1.0 + eggFHgaga) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHgagaint + eHgagapar));
    } else {
        return ( muggH(sqrt_s) + BrHgagaRatio() - 1.0 + eggFHgaga - eggFint - eggFpar - eHgagaint - eHgagapar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUVBFHgaga(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHgagaRatio() * (1.0 + eVBFHgaga) * (1.0 + eHwidth) / (1.0 + eVBFint + eVBFpar) / (1.0 + eHgagaint + eHgagapar));
    } else {
        return ( muVBF(sqrt_s) + BrHgagaRatio() - 1.0 + eVBFHgaga - eVBFint - eVBFpar - eHgagaint - eHgagapar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUZHgaga(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muZH(sqrt_s) * BrHgagaRatio() * (1.0 + eZHgaga) * (1.0 + eHwidth) / (1.0 + eZHint + eZHpar) / (1.0 + eHgagaint + eHgagapar));
    } else {
        return ( muZH(sqrt_s) + BrHgagaRatio() - 1.0 + eZHgaga - eZHint - eZHpar - eHgagaint - eHgagapar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUWHgaga(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muWH(sqrt_s) * BrHgagaRatio() * (1.0 + eWHgaga) * (1.0 + eHwidth) / (1.0 + eWHint + eWHpar) / (1.0 + eHgagaint + eHgagapar));
    } else {
        return ( muWH(sqrt_s) + BrHgagaRatio() - 1.0 + eWHgaga - eWHint - eWHpar - eHgagaint - eHgagapar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUVHgaga(const double sqrt_s) const {
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot, eVHgaga;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    eVHgaga = (eWHgaga * sigmaWH_SM + eZHgaga * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHgagaRatio() * (1.0 + eVHgaga) * (1.0 + eHwidth) / (1.0 + eVHtot) / (1.0 + eHgagaint + eHgagapar));
    } else {
        return ( muVH(sqrt_s) + BrHgagaRatio() - 1.0 + eVHgaga - eVHtot - eHgagaint - eHgagapar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUttHgaga(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muttH(sqrt_s) * BrHgagaRatio() * (1.0 + ettHgaga) * (1.0 + eHwidth) / (1.0 + eeettHint + eeettHpar) / (1.0 + eHgagaint + eHgagapar));
    } else {
        return ( muttH(sqrt_s) + BrHgagaRatio() - 1.0 + ettHgaga - eeettHint - eeettHpar - eHgagaint - eHgagapar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUggHZga(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHZgaRatio() * (1.0 + eggFHZga) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHZgaint + eHZgapar));
    } else {
        return ( muggH(sqrt_s) + BrHZgaRatio() - 1.0 + eggFHZga - eggFint - eggFpar - eHZgaint - eHZgapar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUVBFHZga(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHZgaRatio() * (1.0 + eVBFHZga) * (1.0 + eHwidth) / (1.0 + eVBFint + eVBFpar) / (1.0 + eHZgaint + eHZgapar));
    } else {
        return ( muVBF(sqrt_s) + BrHZgaRatio() - 1.0 + eVBFHZga - eVBFint - eVBFpar - eHZgaint - eHZgapar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUZHZga(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muZH(sqrt_s) * BrHZgaRatio() * (1.0 + eZHZga) * (1.0 + eHwidth) / (1.0 + eZHint + eZHpar) / (1.0 + eHZgaint + eHZgapar));
    } else {
        return ( muZH(sqrt_s) + BrHZgaRatio() - 1.0 + eZHZga - eZHint - eZHpar - eHZgaint - eHZgapar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUWHZga(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muWH(sqrt_s) * BrHZgaRatio() * (1.0 + eWHZga) * (1.0 + eHwidth) / (1.0 + eWHint + eWHpar) / (1.0 + eHZgaint + eHZgapar));
    } else {
        return ( muWH(sqrt_s) + BrHZgaRatio() - 1.0 + eWHZga - eWHint - eWHpar - eHZgaint - eHZgapar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUVHZga(const double sqrt_s) const {
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot, eVHZga;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    eVHZga = (eWHZga * sigmaWH_SM + eZHZga * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHZgaRatio() * (1.0 + eVHZga) * (1.0 + eHwidth) / (1.0 + eVHtot) / (1.0 + eHZgaint + eHZgapar));
    } else {
        return ( muVH(sqrt_s) + BrHZgaRatio() - 1.0 + eVHZga - eVHtot - eHZgaint - eHZgapar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUttHZga(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muttH(sqrt_s) * BrHZgaRatio() * (1.0 + ettHZga) * (1.0 + eHwidth) / (1.0 + eeettHint + eeettHpar) / (1.0 + eHZgaint + eHZgapar));
    } else {
        return ( muttH(sqrt_s) + BrHZgaRatio() - 1.0 + ettHZga - eeettHint - eeettHpar - eHZgaint - eHZgapar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUggHZZ(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHZZRatio() * (1.0 + eggFHZZ) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muggH(sqrt_s) + BrHZZRatio() - 1.0 + eggFHZZ - eggFint - eggFpar - eHZZint - eHZZpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUVBFHZZ(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHZZRatio() * (1.0 + eVBFHZZ) * (1.0 + eHwidth) / (1.0 + eVBFint + eVBFpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muVBF(sqrt_s) + BrHZZRatio() - 1.0 + eVBFHZZ - eVBFint - eVBFpar - eHZZint - eHZZpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUZHZZ(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muZH(sqrt_s) * BrHZZRatio() * (1.0 + eZHZZ) * (1.0 + eHwidth) / (1.0 + eZHint + eZHpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muZH(sqrt_s) + BrHZZRatio() - 1.0 + eZHZZ - eZHint - eZHpar - eHZZint - eHZZpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUWHZZ(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muWH(sqrt_s) * BrHZZRatio() * (1.0 + eWHZZ) * (1.0 + eHwidth) / (1.0 + eWHint + eWHpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muWH(sqrt_s) + BrHZZRatio() - 1.0 + eWHZZ - eWHint - eWHpar - eHZZint - eHZZpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUVHZZ(const double sqrt_s) const {
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot, eVHZZ;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    eVHZZ = (eWHZZ * sigmaWH_SM + eZHZZ * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHZZRatio() * (1.0 + eVHZZ) * (1.0 + eHwidth) / (1.0 + eVHtot) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muVH(sqrt_s) + BrHZZRatio() - 1.0 + eVHZZ - eVHtot - eHZZint - eHZZpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUttHZZ(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muttH(sqrt_s) * BrHZZRatio() * (1.0 + ettHZZ) * (1.0 + eHwidth) / (1.0 + eeettHint + eeettHpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muttH(sqrt_s) + BrHZZRatio() - 1.0 + ettHZZ - eeettHint - eeettHpar - eHZZint - eHZZpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUggHZZ4l(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHZZ4lRatio() * (1.0 + eggFHZZ) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muggH(sqrt_s) + BrHZZ4lRatio() - 1.0 + eggFHZZ - eggFint - eggFpar - eHZZint - eHZZpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUVBFHZZ4l(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHZZ4lRatio() * (1.0 + eVBFHZZ) * (1.0 + eHwidth) / (1.0 + eVBFint + eVBFpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muVBF(sqrt_s) + BrHZZ4lRatio() - 1.0 + eVBFHZZ - eVBFint - eVBFpar - eHZZint - eHZZpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUZHZZ4l(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muZH(sqrt_s) * BrHZZ4lRatio() * (1.0 + eZHZZ) * (1.0 + eHwidth) / (1.0 + eZHint + eZHpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muZH(sqrt_s) + BrHZZ4lRatio() - 1.0 + eZHZZ - eZHint - eZHpar - eHZZint - eHZZpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUWHZZ4l(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muWH(sqrt_s) * BrHZZ4lRatio() * (1.0 + eWHZZ) * (1.0 + eHwidth) / (1.0 + eWHint + eWHpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muWH(sqrt_s) + BrHZZ4lRatio() - 1.0 + eWHZZ - eWHint - eWHpar - eHZZint - eHZZpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUVHZZ4l(const double sqrt_s) const {
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot, eVHZZ;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    eVHZZ = (eWHZZ * sigmaWH_SM + eZHZZ * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHZZ4lRatio() * (1.0 + eVHZZ) * (1.0 + eHwidth) / (1.0 + eVHtot) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muVH(sqrt_s) + BrHZZ4lRatio() - 1.0 + eVHZZ - eVHtot - eHZZint - eHZZpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUttHZZ4l(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muttH(sqrt_s) * BrHZZ4lRatio() * (1.0 + ettHZZ) * (1.0 + eHwidth) / (1.0 + eeettHint + eeettHpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muttH(sqrt_s) + BrHZZ4lRatio() - 1.0 + ettHZZ - eeettHint - eeettHpar - eHZZint - eHZZpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUggHWW(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHWWRatio() * (1.0 + eggFHWW) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muggH(sqrt_s) + BrHWWRatio() - 1.0 + eggFHWW - eggFint - eggFpar - eHWWint - eHWWpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUVBFHWW(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHWWRatio() * (1.0 + eVBFHWW) * (1.0 + eHwidth) / (1.0 + eVBFint + eVBFpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muVBF(sqrt_s) + BrHWWRatio() - 1.0 + eVBFHWW - eVBFint - eVBFpar - eHWWint - eHWWpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUZHWW(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muZH(sqrt_s) * BrHWWRatio() * (1.0 + eZHWW) * (1.0 + eHwidth) / (1.0 + eZHint + eZHpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muZH(sqrt_s) + BrHWWRatio() - 1.0 + eZHWW - eZHint - eZHpar - eHWWint - eHWWpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUWHWW(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muWH(sqrt_s) * BrHWWRatio() * (1.0 + eWHWW) * (1.0 + eHwidth) / (1.0 + eWHint + eWHpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muWH(sqrt_s) + BrHWWRatio() - 1.0 + eWHWW - eWHint - eWHpar - eHWWint - eHWWpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUVHWW(const double sqrt_s) const {
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot, eVHWW;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    eVHWW = (eWHWW * sigmaWH_SM + eZHWW * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHWWRatio() * (1.0 + eVHWW) * (1.0 + eHwidth) / (1.0 + eVHtot) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muVH(sqrt_s) + BrHWWRatio() - 1.0 + eVHWW - eVHtot - eHWWint - eHWWpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUttHWW(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muttH(sqrt_s) * BrHWWRatio() * (1.0 + ettHWW) * (1.0 + eHwidth) / (1.0 + eeettHint + eeettHpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muttH(sqrt_s) + BrHWWRatio() - 1.0 + ettHWW - eeettHint - eeettHpar - eHWWint - eHWWpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUggHWW2l2v(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHWW2l2vRatio() * (1.0 + eggFHWW) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muggH(sqrt_s) + BrHWW2l2vRatio() - 1.0 + eggFHWW - eggFint - eggFpar - eHWWint - eHWWpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUVBFHWW2l2v(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHWW2l2vRatio() * (1.0 + eVBFHWW) * (1.0 + eHwidth) / (1.0 + eVBFint + eVBFpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muVBF(sqrt_s) + BrHWW2l2vRatio() - 1.0 + eVBFHWW - eVBFint - eVBFpar - eHWWint - eHWWpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUZHWW2l2v(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muZH(sqrt_s) * BrHWW2l2vRatio() * (1.0 + eZHWW) * (1.0 + eHwidth) / (1.0 + eZHint + eZHpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muZH(sqrt_s) + BrHWW2l2vRatio() - 1.0 + eZHWW - eZHint - eZHpar - eHWWint - eHWWpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUWHWW2l2v(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muWH(sqrt_s) * BrHWW2l2vRatio() * (1.0 + eWHWW) * (1.0 + eHwidth) / (1.0 + eWHint + eWHpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muWH(sqrt_s) + BrHWW2l2vRatio() - 1.0 + eWHWW - eWHint - eWHpar - eHWWint - eHWWpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUVHWW2l2v(const double sqrt_s) const {
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot, eVHWW;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    eVHWW = (eWHWW * sigmaWH_SM + eZHWW * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHWW2l2vRatio() * (1.0 + eVHWW) * (1.0 + eHwidth) / (1.0 + eVHtot) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muVH(sqrt_s) + BrHWW2l2vRatio() - 1.0 + eVHWW - eVHtot - eHWWint - eHWWpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUttHWW2l2v(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muttH(sqrt_s) * BrHWW2l2vRatio() * (1.0 + ettHWW) * (1.0 + eHwidth) / (1.0 + eeettHint + eeettHpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muttH(sqrt_s) + BrHWW2l2vRatio() - 1.0 + ettHWW - eeettHint - eeettHpar - eHWWint - eHWWpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUggHmumu(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHmumuRatio() * (1.0 + eggFHmumu) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHmumuint + eHmumupar));
    } else {
        return ( muggH(sqrt_s) + BrHmumuRatio() - 1.0 + eggFHmumu - eggFint - eggFpar - eHmumuint - eHmumupar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUVBFHmumu(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHmumuRatio() * (1.0 + eVBFHmumu) * (1.0 + eHwidth) / (1.0 + eVBFint + eVBFpar) / (1.0 + eHmumuint + eHmumupar));
    } else {
        return ( muVBF(sqrt_s) + BrHmumuRatio() - 1.0 + eVBFHmumu - eVBFint - eVBFpar - eHmumuint - eHmumupar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUZHmumu(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muZH(sqrt_s) * BrHmumuRatio() * (1.0 + eZHmumu) * (1.0 + eHwidth) / (1.0 + eZHint + eZHpar) / (1.0 + eHmumuint + eHmumupar));
    } else {
        return ( muZH(sqrt_s) + BrHmumuRatio() - 1.0 + eZHmumu - eZHint - eZHpar - eHmumuint - eHmumupar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUWHmumu(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muWH(sqrt_s) * BrHmumuRatio() * (1.0 + eWHmumu) * (1.0 + eHwidth) / (1.0 + eWHint + eWHpar) / (1.0 + eHmumuint + eHmumupar));
    } else {
        return ( muWH(sqrt_s) + BrHmumuRatio() - 1.0 + eWHmumu - eWHint - eWHpar - eHmumuint - eHmumupar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUVHmumu(const double sqrt_s) const {
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot, eVHmumu;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    eVHmumu = (eWHmumu * sigmaWH_SM + eZHmumu * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHmumuRatio() * (1.0 + eVHmumu) * (1.0 + eHwidth) / (1.0 + eVHtot) / (1.0 + eHmumuint + eHmumupar));
    } else {
        return ( muVH(sqrt_s) + BrHmumuRatio() - 1.0 + eVHmumu - eVHtot - eHmumuint - eHmumupar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUttHmumu(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muttH(sqrt_s) * BrHmumuRatio() * (1.0 + ettHmumu) * (1.0 + eHwidth) / (1.0 + eeettHint + eeettHpar) / (1.0 + eHmumuint + eHmumupar));
    } else {
        return ( muttH(sqrt_s) + BrHmumuRatio() - 1.0 + ettHmumu - eeettHint - eeettHpar - eHmumuint - eHmumupar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUggHtautau(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHtautauRatio() * (1.0 + eggFHtautau) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHtautauint + eHtautaupar));
    } else {
        return ( muggH(sqrt_s) + BrHtautauRatio() - 1.0 + eggFHtautau - eggFint - eggFpar - eHtautauint - eHtautaupar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUVBFHtautau(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHtautauRatio() * (1.0 + eVBFHtautau) * (1.0 + eHwidth) / (1.0 + eVBFint + eVBFpar) / (1.0 + eHtautauint + eHtautaupar));
    } else {
        return ( muVBF(sqrt_s) + BrHtautauRatio() - 1.0 + eVBFHtautau - eVBFint - eVBFpar - eHtautauint - eHtautaupar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUZHtautau(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muZH(sqrt_s) * BrHtautauRatio() * (1.0 + eZHtautau) * (1.0 + eHwidth) / (1.0 + eZHint + eZHpar) / (1.0 + eHtautauint + eHtautaupar));
    } else {
        return ( muZH(sqrt_s) + BrHtautauRatio() - 1.0 + eZHtautau - eZHint - eZHpar - eHtautauint - eHtautaupar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUWHtautau(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muWH(sqrt_s) * BrHtautauRatio() * (1.0 + eWHtautau) * (1.0 + eHwidth) / (1.0 + eWHint + eWHpar) / (1.0 + eHtautauint + eHtautaupar));
    } else {
        return ( muWH(sqrt_s) + BrHtautauRatio() - 1.0 + eWHtautau - eWHint - eWHpar - eHtautauint - eHtautaupar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUVHtautau(const double sqrt_s) const {
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot, eVHtautau;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    eVHtautau = (eWHtautau * sigmaWH_SM + eZHtautau * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHtautauRatio() * (1.0 + eVHtautau) * (1.0 + eHwidth) / (1.0 + eVHtot) / (1.0 + eHtautauint + eHtautaupar));
    } else {
        return ( muVH(sqrt_s) + BrHtautauRatio() - 1.0 + eVHtautau - eVHtot - eHtautauint - eHtautaupar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUttHtautau(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muttH(sqrt_s) * BrHtautauRatio() * (1.0 + ettHtautau) * (1.0 + eHwidth) / (1.0 + eeettHint + eeettHpar) / (1.0 + eHtautauint + eHtautaupar));
    } else {
        return ( muttH(sqrt_s) + BrHtautauRatio() - 1.0 + ettHtautau - eeettHint - eeettHpar - eHtautauint - eHtautaupar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUggHbb(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHbbRatio() * (1.0 + eggFHbb) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHbbint + eHbbpar));
    } else {
        return ( muggH(sqrt_s) + BrHbbRatio() - 1.0 + eggFHbb - eggFint - eggFpar - eHbbint - eHbbpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUVBFHbb(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHbbRatio() * (1.0 + eVBFHbb) * (1.0 + eHwidth) / (1.0 + eVBFint + eVBFpar) / (1.0 + eHbbint + eHbbpar));
    } else {
        return ( muVBF(sqrt_s) + BrHbbRatio() - 1.0 + eVBFHbb - eVBFint - eVBFpar - eHbbint - eHbbpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUZHbb(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muZH(sqrt_s) * BrHbbRatio() * (1.0 + eZHbb) * (1.0 + eHwidth) / (1.0 + eZHint + eZHpar) / (1.0 + eHbbint + eHbbpar));
    } else {
        return ( muZH(sqrt_s) + BrHbbRatio() - 1.0 + eZHbb - eZHint - eZHpar - eHbbint - eHbbpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUWHbb(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muWH(sqrt_s) * BrHbbRatio() * (1.0 + eWHbb) * (1.0 + eHwidth) / (1.0 + eWHint + eWHpar) / (1.0 + eHbbint + eHbbpar));
    } else {
        return ( muWH(sqrt_s) + BrHbbRatio() - 1.0 + eWHbb - eWHint - eWHpar - eHbbint - eHbbpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUVHbb(const double sqrt_s) const {
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot, eVHbb;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    eVHbb = (eWHbb * sigmaWH_SM + eZHbb * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHbbRatio() * (1.0 + eVHbb) * (1.0 + eHwidth) / (1.0 + eVHtot) / (1.0 + eHbbint + eHbbpar));
    } else {
        return ( muVH(sqrt_s) + BrHbbRatio() - 1.0 + eVHbb - eVHtot - eHbbint - eHbbpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUttHbb(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muttH(sqrt_s) * BrHbbRatio() * (1.0 + ettHbb) * (1.0 + eHwidth) / (1.0 + eeettHint + eeettHpar) / (1.0 + eHbbint + eHbbpar));
    } else {
        return ( muttH(sqrt_s) + BrHbbRatio() - 1.0 + ettHbb - eeettHint - eeettHpar - eHbbint - eHbbpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUVBFBRinv(const double sqrt_s) const {
    return ( muVBF(sqrt_s) * Br_H_inv() * (1.0 + eVBFHinv) / (1.0 + eVBFint + eVBFpar));
}

const double NPSMEFTd6General::muTHUVBFHinv(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHtoinvRatio() * (1.0 + eVBFHinv) / (1.0 + eVBFint + eVBFpar));
    } else {
        return ( muVBF(sqrt_s) + BrHtoinvRatio() - 1.0 + eVBFHinv - eVBFint - eVBFpar);
    }
}

const double NPSMEFTd6General::muTHUVHBRinv(const double sqrt_s) const {
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    return ( muVH(sqrt_s) * Br_H_inv() * (1.0 + eVHinv) / (1.0 + eVHtot));
}

const double NPSMEFTd6General::muTHUVHinv(const double sqrt_s) const {
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHtoinvRatio() * (1.0 + eVHinv) / (1.0 + eVHtot));
    } else {
        return ( muVH(sqrt_s) + BrHtoinvRatio() - 1.0 + eVHinv - eVHtot);
    }
}

const double NPSMEFTd6General::muTHUggHZZ4mu(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHZZ4muRatio() * (1.0 + eggFHZZ) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muggH(sqrt_s) + BrHZZ4muRatio() - 1.0 + eggFHZZ - eggFint - eggFpar - eHZZint - eHZZpar + eHwidth);
    }
}

const double NPSMEFTd6General::muTHUggHZgamumu(const double sqrt_s) const {
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHZgamumuRatio() * (1.0 + eggFHZga) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHZgaint + eHZgapar));
    } else {
        return ( muggH(sqrt_s) + BrHZgamumuRatio() - 1.0 + eggFHZga - eggFint - eggFpar - eHZgaint - eHZgapar + eHwidth);
    }
}

///////////////////////////////////////////////////////////////////////////////

//  Relative correction to EM coupling

const double NPSMEFTd6General::deltaeNP(const double mu) const {
    
    double NPindirect;

    NPindirect = del_e_mu(mu) + 0.5 * del_A_mu(mu);

    return NPindirect;
}

///////////////////////////////////////////////////////////////////////////////

const double NPSMEFTd6General::deltag1ZNP(const double mu) const {
    double NPdirect, NPindirect;

    NPdirect = 0.;

    //      NPindirect = - 1.0 / (cW2_tree-sW2_tree);

    //      NPindirect = NPindirect * (sW_tree * getSMEFTCoeffEW("CHWB") / cW_tree 
    //              + 0.25 * getSMEFTCoeffEW("CHD") ) * v2
    //              + 0.5 * NPindirect * delta_GF ;

    NPindirect = del_e_mu(mu) - 0.5 * del_sW2_mu(mu) / cW2_tree + 0.5 * del_Z_mu(mu) - sW_tree * del_ZA_mu(mu) / cW_tree;

    return NPdirect + NPindirect;
}

const double NPSMEFTd6General::deltaKZNP(const double mu) const {
    // Obtain from the other aTGC  

    return ( deltag1ZNP(mu) - (sW2_tree / cW2_tree) * (deltaKgammaNP(mu) - deltag1gaNP(mu)));
}

const double NPSMEFTd6General::deltag1gaNP(const double mu) const {
    double NPindirect;

    NPindirect = del_e_mu(mu) + 0.5 * del_A_mu(mu);

    return NPindirect;
}

const double NPSMEFTd6General::deltaKgammaNP(const double mu) const {
    double NPdirect, NPindirect;

    NPdirect = eeMz / 4.0 / sW2_tree;

    NPdirect = NPdirect * ((4.0 * sW_tree * cW_tree / eeMz) * getSMEFTCoeff("CHWB",mu)) * v2;

    NPindirect = del_e_mu(mu) + 0.5 * del_A_mu(mu);

    return NPdirect + NPindirect;
}

const double NPSMEFTd6General::lambdaZNP(const double mu) const {
    double NPdirect;

    //    Translate from LHCHXWG-INT-2015-001: Checked with own calculations  
    NPdirect = -(3.0 / 2.0) * (eeMz / sW_tree) * getSMEFTCoeff("CW", mu) * v2;

    return NPdirect;
}

///////////////////////////////////////////////////////////////////////////////

const double NPSMEFTd6General::deltag1ZNPEff() const {
    // From arXiv:1708.09079 [hep-ph]. In our case, delta_e=0 since it is taken as inputs and its effects propagated
    // everywhere else 
    double dgEff;

    dgEff = (1.0 / cW2_tree) * ((cW2_tree - sW2_tree) * deltaGL_f(leptons[ELECTRON]) / gZlL +
            sW2_tree * deltaGR_f(leptons[ELECTRON]) / gZlR -
            2.0 * deltaGL_Wff(leptons[NEUTRINO_1], leptons[ELECTRON]).real() / UevL);

    return dgEff + deltag1ZNP(muw);
}

const double NPSMEFTd6General::deltaKgammaNPEff() const {
    // From arXiv:1708.09079 [hep-ph]. In our case, delta_e=0 since it is taken as inputs and its effects propagated
    // everywhere else 
    double dgEff;

    dgEff = (cW2_tree - sW2_tree)*(deltaGL_f(leptons[ELECTRON]) / gZlL - deltaGR_f(leptons[ELECTRON]) / gZlR)
            - 2.0 * deltaGL_Wff(leptons[NEUTRINO_1], leptons[ELECTRON]).real() / UevL;

    return dgEff + deltaKgammaNP(muw);
}

///////////////////////////////////////////////////////////////////////////////

const double NPSMEFTd6General::deltaxseeWW4fLEP2(const double sqrt_s, const int fstate) const {

    //  Returns cross section in pb

    //  fstate = 0 (jjjj), 1 (e v jj), 2 (mu v jj), 3 (tau v jj),
    //       4 (e v e v), 5 (mu v mu v), 6 (tau v tau v),
    //       7 (e v mu v), 8 (e v tau v), 9 (mu v tau v)
    //      10 (l v jj), 11 (l v l v)

    double xspb = 0.0;

    double xspbSM0;
    double xspbSM[8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
    // SM values from hep-ex/0409016    
    double xsjjjjSM[8] = {7.42, 7.56, 7.68, 7.76, 7.79, 7.81, 7.82, 7.82};
    double xslvjjSM[8] = {7.14, 7.26, 7.38, 7.44, 7.47, 7.50, 7.50, 7.50}; // All leptons. Divide by 3 for each
    double xslvlvSM[8] = {1.72, 1.76, 1.79, 1.80, 1.81, 1.82, 1.82, 1.82}; // All leptons. Divide by 6 for each

    double dgWve, dgWpm1, dgWpm2, dmZ2, dmW2, dGW, dGZ, dGF, dgZ, dsW2, dgVZee, dgAZee, dgZ1, dgga1, dkga, dkZ, dlga, dlZ, deem;

    double gVZeeSM, gAZeeSM;

    double norm4f = 1.0;

    //  Values of the couplings: final-state independent couplings
    gVZeeSM = -0.25 + sW2_tree;
    gAZeeSM = -0.25;

    dGF = delta_GF / sqrt(2.0);

    dmZ2 = cAsch * (0.5 * getSMEFTCoeffEW("CHD") + 2.0 * cW_tree * sW_tree * getSMEFTCoeffEW("CHWB")) * v2
            + cWsch * (0.5 * getSMEFTCoeffEW("CHD") + 2.0 * (Mw_inp / Mz) * sqrt(1.0 - Mw_inp * Mw_inp / Mz / Mz) * getSMEFTCoeffEW("CHWB")) * v2;

    dmW2 = -2.0 * deltaMwd6(); //There is a minus sign between refs. definition of dmW2 and ours

    dGW = deltaGwd6();

    dGZ = deltaGzd6();

    dsW2 = cAsch * (-0.5 * (cW2_tree / (1.0 - 2.0 * sW2_tree)) * ((getSMEFTCoeffEW("CHD")
            + 2.0 * getSMEFTCoeffEW("CHWB") / cW_tree / sW_tree) * v2
            + 2.0 * sqrt(2.0) * dGF))
            + cWsch * (1.0 / sW2_tree) * (0.5 * Mw_inp * Mw_inp * getSMEFTCoeffEW("CHD") / Mz / Mz + Mw_inp * sqrt(1.0 - Mw_inp * Mw_inp / Mz / Mz) * getSMEFTCoeffEW("CHWB") / Mz) * v2;

    dgZ = -dGF / sqrt(2.0) - 0.5 * dmZ2
            + cW_tree * sW_tree * getSMEFTCoeffEW("CHWB") * v2;

    dgVZee = dgZ * gVZeeSM
            - 0.25 * (getSMEFTCoeffEW("CHeR", 0, 0) + getSMEFTCoeffEW("CHl1R", 0, 0) + getSMEFTCoeffEW("CHl3R", 0, 0)) * v2
            - sW2_tree * dsW2;

    dgAZee = dgZ * gAZeeSM
            + 0.25 * (getSMEFTCoeffEW("CHeR", 0, 0) - getSMEFTCoeffEW("CHl1R", 0, 0) - getSMEFTCoeffEW("CHl3R", 0, 0)) * v2;

    dgWve = 0.5 * getSMEFTCoeffEW("CHl3R", 0, 0) * v2
            + cAsch * (0.25 * (cW_tree * getSMEFTCoeffEW("CHWB") / sW_tree) * v2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    dgZ1 = deltag1ZNP(sqrt_s);

    dgga1 = deltag1gaNP(sqrt_s);

    dkga = deltaKgammaNP(sqrt_s);

    dkZ = dgZ1 - (sW2_tree / cW2_tree) * (dkga - dgga1);

    dlga = -lambdaZNP(sqrt_s);

    dlZ = -lambdaZNP(sqrt_s);

    deem = delta_e + 0.5 * delta_A;

    //  Values of the couplings: final-state dependent couplings
    dgWpm1 = 0.0;
    dgWpm2 = 0.0;

    switch (fstate) {

        case 0:
            //  fstate = 0 (jjjj)       
            dgWpm1 = 0.5 * (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1));
            dgWpm2 = 0.5 * (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1));
            norm4f = 1.01;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xsjjjjSM[i];
            }
            break;
        case 1:
            //  fstate = 1 (e v jj)            
            dgWpm1 = getSMEFTCoeffEW("CHl3R", 0, 0);
            dgWpm2 = 0.5 * (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1));
            norm4f = 1.0;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvjjSM[i] / 3.0;
            }
            break;
        case 2:
            //  fstate = 2 (mu v jj)            
            dgWpm1 = getSMEFTCoeffEW("CHl3R", 1, 1);
            dgWpm2 = 0.5 * (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1));
            norm4f = 1.0;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvjjSM[i] / 3.0;
            }
            break;
        case 3:
            //  fstate = 3 (tau v jj)            
            dgWpm1 = getSMEFTCoeffEW("CHl3R", 2, 2);
            dgWpm2 = 0.5 * (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1));
            norm4f = 1.0;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvjjSM[i] / 3.0;
            }
            break;
        case 4:
            //  fstate = 4 (e v e v)            
            dgWpm1 = getSMEFTCoeffEW("CHl3R", 0, 0);
            dgWpm2 = getSMEFTCoeffEW("CHl3R", 0, 0);
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 5:
            //  fstate = 5 (mu v mu v)            
            dgWpm1 = getSMEFTCoeffEW("CHl3R", 1, 1);
            dgWpm2 = getSMEFTCoeffEW("CHl3R", 1, 1);
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 6:
            //  fstate = 6 (tau v tau v)            
            dgWpm1 = getSMEFTCoeffEW("CHl3R", 2, 2);
            dgWpm2 = getSMEFTCoeffEW("CHl3R", 2, 2);
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 7:
            //  fstate = 7 (e v mu v)            
            dgWpm1 = getSMEFTCoeffEW("CHl3R", 0, 0);
            dgWpm2 = getSMEFTCoeffEW("CHl3R", 1, 1);
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 8:
            //  fstate = 8 (e v tau v)           
            dgWpm1 = getSMEFTCoeffEW("CHl3R", 0, 0);
            dgWpm2 = getSMEFTCoeffEW("CHl3R", 2, 2);
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 9:
            //  fstate = 9 (mu v tau v)           
            dgWpm1 = getSMEFTCoeffEW("CHl3R", 1, 1);
            dgWpm2 = getSMEFTCoeffEW("CHl3R", 2, 2);
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 10:
            //  fstate = 10 (l v jj)           
            dgWpm1 = (1.0 / 3.0) * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1) + getSMEFTCoeffEW("CHl3R", 2, 2));
            dgWpm2 = 0.5 * (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1));
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvjjSM[i];
            }
            break;
        case 11:
            //  fstate = 11 (l v l v)           
            dgWpm1 = (1.0 / 3.0) * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1) + getSMEFTCoeffEW("CHl3R", 2, 2));
            dgWpm2 = (1.0 / 3.0) * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1) + getSMEFTCoeffEW("CHl3R", 2, 2));
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i];
            }
            break;
    }

    dgWpm1 = 0.5 * dgWpm1
            + cAsch * (0.25 * (cW_tree * getSMEFTCoeffEW("CHWB") / sW_tree) * v2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    dgWpm2 = 0.5 * dgWpm2
            + cAsch * (0.25 * (cW_tree * getSMEFTCoeffEW("CHWB") / sW_tree) * v2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    if (sqrt_s == 0.1886) {

        xspb += norm4f * cAsch * (
                +2.6 * dmW2
                - 17.0 * dGW
                + 72.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 5.3 * dgVZee
                + 0.3 * dgAZee
                - 0.08 * dgZ1
                - 0.50 * dkga
                - 0.19 * dkZ
                - 0.29 * dlga
                + 0.026 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 72.0 * dgWve
                + 33.4 * dgWpm1
                + 33.4 * dgWpm2
                + 5.72 * dgVZee
                + 0.21 * dgAZee
                - 0.05 * dgZ1
                - 0.57 * dkga
                - 0.16 * dkZ
                - 0.34 * dlga
                + 0.051 * dlZ
                + 0.0005 * dGZ
                - 0.41 * dgga1
                - 0.98 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }
        // Save the SM value, to check the total cross section, SM+NP is not negative
        xspbSM0 = xspbSM[0];

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[0];

    } else if (sqrt_s == 0.1916) {

        xspb += norm4f * cAsch * (
                +1.6 * dmW2
                - 17.0 * dGW
                + 73.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 5.8 * dgVZee
                + 0.4 * dgAZee
                - 0.10 * dgZ1
                - 0.56 * dkga
                - 0.22 * dkZ
                - 0.32 * dlga
                + 0.018 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 72.0 * dgWve
                + 33.6 * dgWpm1
                + 33.6 * dgWpm2
                + 6.26 * dgVZee
                + 0.33 * dgAZee
                - 0.07 * dgZ1
                - 0.64 * dkga
                - 0.19 * dkZ
                - 0.37 * dlga
                + 0.045 * dlZ
                + 0.0005 * dGZ
                - 0.41 * dgga1
                - 1.08 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        // Save the SM value, to check the total cross section, SM+NP is not negative
        xspbSM0 = xspbSM[1];

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[1];

    } else if (sqrt_s == 0.1955) {

        xspb += norm4f * cAsch * (
                +0.26 * dmW2
                - 17.0 * dGW
                + 74.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 6.5 * dgVZee
                + 0.6 * dgAZee
                - 0.12 * dgZ1
                - 0.64 * dkga
                - 0.27 * dkZ
                - 0.36 * dlga
                + 0.005 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 73.0 * dgWve
                + 33.8 * dgWpm1
                + 33.8 * dgWpm2
                + 6.91 * dgVZee
                + 0.50 * dgAZee
                - 0.09 * dgZ1
                - 0.72 * dkga
                - 0.22 * dkZ
                - 0.41 * dlga
                + 0.035 * dlZ
                + 0.0005 * dGZ
                - 0.49 * dgga1
                - 1.20 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        // Save the SM value, to check the total cross section, SM+NP is not negative
        xspbSM0 = xspbSM[2];

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[2];

    } else if (sqrt_s == 0.1995) {

        xspb += norm4f * cAsch * (
                -0.54 * dmW2
                - 17.0 * dGW
                + 75.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 7.1 * dgVZee
                + 0.8 * dgAZee
                - 0.15 * dgZ1
                - 0.71 * dkga
                - 0.31 * dkZ
                - 0.40 * dlga
                - 0.009 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 74.0 * dgWve
                + 33.7 * dgWpm1
                + 33.7 * dgWpm2
                + 7.52 * dgVZee
                + 0.68 * dgAZee
                - 0.11 * dgZ1
                - 0.79 * dkga
                - 0.26 * dkZ
                - 0.45 * dlga
                + 0.022 * dlZ
                + 0.0005 * dGZ
                - 0.53 * dgga1
                - 1.33 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        // Save the SM value, to check the total cross section, SM+NP is not negative
        xspbSM0 = xspbSM[3];

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[3];

    } else if (sqrt_s == 0.2016) {

        xspb += norm4f * cAsch * (
                -0.97 * dmW2
                - 17.0 * dGW
                + 75.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 7.4 * dgVZee
                + 0.9 * dgAZee
                - 0.16 * dgZ1
                - 0.75 * dkga
                - 0.33 * dkZ
                - 0.42 * dlga
                - 0.017 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 74.0 * dgWve
                + 33.7 * dgWpm1
                + 33.7 * dgWpm2
                + 7.82 * dgVZee
                + 0.78 * dgAZee
                - 0.12 * dgZ1
                - 0.83 * dkga
                - 0.28 * dkZ
                - 0.47 * dlga
                + 0.016 * dlZ
                + 0.0005 * dGZ
                - 0.55 * dgga1
                - 1.39 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        // Save the SM value, to check the total cross section, SM+NP is not negative
        xspbSM0 = xspbSM[4];

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[4];

    } else if (sqrt_s == 0.2049) {

        xspb += norm4f * cAsch * (
                -1.4 * dmW2
                - 17.0 * dGW
                + 75.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 7.8 * dgVZee
                + 1.0 * dgAZee
                - 0.18 * dgZ1
                - 0.80 * dkga
                - 0.37 * dkZ
                - 0.44 * dlga
                - 0.029 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 74.0 * dgWve
                + 33.5 * dgWpm1
                + 33.5 * dgWpm2
                + 8.24 * dgVZee
                + 0.93 * dgAZee
                - 0.14 * dgZ1
                - 0.89 * dkga
                - 0.32 * dkZ
                - 0.47 * dlga
                + 0.005 * dlZ
                + 0.0005 * dGZ
                - 0.58 * dgga1
                - 1.47 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        // Save the SM value, to check the total cross section, SM+NP is not negative
        xspbSM0 = xspbSM[5];

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[5];

    } else if (sqrt_s == 0.2066) {

        xspb += norm4f * cAsch * (
                -1.8 * dmW2
                - 17.0 * dGW
                + 76.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 8.0 * dgVZee
                + 1.1 * dgAZee
                - 0.19 * dgZ1
                - 0.83 * dkga
                - 0.39 * dkZ
                - 0.46 * dlga
                - 0.036 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 75.0 * dgWve
                + 33.4 * dgWpm1
                + 33.4 * dgWpm2
                + 8.45 * dgVZee
                + 1.01 * dgAZee
                - 0.15 * dgZ1
                - 0.92 * dkga
                - 0.33 * dkZ
                - 0.51 * dlga
                - 0.001 * dlZ
                + 0.0005 * dGZ
                - 0.60 * dgga1
                - 1.52 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        // Save the SM value, to check the total cross section, SM+NP is not negative
        xspbSM0 = xspbSM[6];

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[6];

    } else if (sqrt_s == 0.208) {

        xspb += norm4f * cAsch * (
                -2.0 * dmW2
                - 17.0 * dGW
                + 76.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 8.2 * dgVZee
                + 1.2 * dgAZee
                - 0.20 * dgZ1
                - 0.85 * dkga
                - 0.40 * dkZ
                - 0.47 * dlga
                - 0.042 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 75.0 * dgWve
                + 33.3 * dgWpm1
                + 33.3 * dgWpm2
                + 8.62 * dgVZee
                + 1.08 * dgAZee
                - 0.16 * dgZ1
                - 0.94 * dkga
                - 0.35 * dkZ
                - 0.52 * dlga
                - 0.007 * dlZ
                + 0.0005 * dGZ
                - 0.61 * dgga1
                - 1.55 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        // Save the SM value, to check the total cross section, SM+NP is not negative
        xspbSM0 = xspbSM[7];

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[7];

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::deltaxseeWW4fLEP2()");

    if ((xspbSM0 + xspb) < 0) return std::numeric_limits<double>::quiet_NaN();

    return xspb;
}

const double NPSMEFTd6General::xseeWW4fLEP2(const double sqrt_s, const int fstate) const {

    //  Returns cross section in pb

    //  fstate = 0 (jjjj), 1 (e v jj), 2 (mu v jj), 3 (tau v jj),
    //       4 (e v e v), 5 (mu v mu v), 6 (tau v tau v),
    //       7 (e v mu v), 8 (e v tau v), 9 (mu v tau v)
    //      10 (l v jj), 11 (l v l v)

    double xspb = 0.0;

    double xspbSM[8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
    // SM values from hep-ex/0409016    
    double xsjjjjSM[8] = {7.42, 7.56, 7.68, 7.76, 7.79, 7.81, 7.82, 7.82};
    double xslvjjSM[8] = {7.14, 7.26, 7.38, 7.44, 7.47, 7.50, 7.50, 7.50}; // All leptons. Divide by 3 for each
    double xslvlvSM[8] = {1.72, 1.76, 1.79, 1.80, 1.81, 1.82, 1.82, 1.82}; // All leptons. Divide by 6 for each

    double dgWve, dgWpm1, dgWpm2, dmZ2, dmW2, dGW, dGZ, dGF, dgZ, dsW2, dgVZee, dgAZee, dgZ1, dgga1, dkga, dkZ, dlga, dlZ, deem;

    double gVZeeSM, gAZeeSM;

    double norm4f = 1.0;

    //  Values of the couplings: final-state independent couplings
    gVZeeSM = -0.25 + sW2_tree;
    gAZeeSM = -0.25;

    dGF = delta_GF / sqrt(2.0);

    dmZ2 = cAsch * (0.5 * getSMEFTCoeffEW("CHD") + 2.0 * cW_tree * sW_tree * getSMEFTCoeffEW("CHWB")) * v2
            + cWsch * (0.5 * getSMEFTCoeffEW("CHD") + 2.0 * (Mw_inp / Mz) * sqrt(1.0 - Mw_inp * Mw_inp / Mz / Mz) * getSMEFTCoeffEW("CHWB")) * v2;

    dmW2 = -2.0 * deltaMwd6(); //There is a minus sign between refs. definition of dmW2 and ours

    dGW = deltaGwd6();

    dGZ = deltaGzd6();

    dsW2 = cAsch * (-0.5 * (cW2_tree / (1.0 - 2.0 * sW2_tree)) * ((getSMEFTCoeffEW("CHD")
            + 2.0 * getSMEFTCoeffEW("CHWB") / cW_tree / sW_tree) * v2
            + 2.0 * sqrt(2.0) * dGF))
            + cWsch * (1.0 / sW2_tree) * (0.5 * Mw_inp * Mw_inp * getSMEFTCoeffEW("CHD") / Mz / Mz + Mw_inp * sqrt(1.0 - Mw_inp * Mw_inp / Mz / Mz) * getSMEFTCoeffEW("CHWB") / Mz) * v2;

    dgZ = -dGF / sqrt(2.0) - 0.5 * dmZ2
            + cW_tree * sW_tree * getSMEFTCoeffEW("CHWB") * v2;

    dgVZee = dgZ * gVZeeSM
            - 0.25 * (getSMEFTCoeffEW("CHeR", 0, 0) + getSMEFTCoeffEW("CHl1R", 0, 0) + getSMEFTCoeffEW("CHl3R", 0, 0)) * v2
            - sW2_tree * dsW2;

    dgAZee = dgZ * gAZeeSM
            + 0.25 * (getSMEFTCoeffEW("CHeR", 0, 0) - getSMEFTCoeffEW("CHl1R", 0, 0) - getSMEFTCoeffEW("CHl3R", 0, 0)) * v2;

    dgWve = 0.5 * getSMEFTCoeffEW("CHl3R", 0, 0) * v2
            + cAsch * (0.25 * (cW_tree * getSMEFTCoeffEW("CHWB") / sW_tree) * v2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    dgZ1 = deltag1ZNP(sqrt_s);

    dgga1 = deltag1gaNP(sqrt_s);

    dkga = deltaKgammaNP(sqrt_s);

    dkZ = dgZ1 - (sW2_tree / cW2_tree) * (dkga - dgga1);

    dlga = -lambdaZNP(sqrt_s);

    dlZ = -lambdaZNP(sqrt_s);

    deem = delta_e + 0.5 * delta_A;

    //  Values of the couplings: final-state dependent couplings
    dgWpm1 = 0.0;
    dgWpm2 = 0.0;

    switch (fstate) {

        case 0:
            //  fstate = 0 (jjjj)       
            dgWpm1 = 0.5 * (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1));
            dgWpm2 = 0.5 * (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1));
            norm4f = 1.01;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xsjjjjSM[i];
            }
            break;
        case 1:
            //  fstate = 1 (e v jj)            
            dgWpm1 = getSMEFTCoeffEW("CHl3R", 0, 0);
            dgWpm2 = 0.5 * (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1));
            norm4f = 1.0;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvjjSM[i] / 3.0;
            }
            break;
        case 2:
            //  fstate = 2 (mu v jj)            
            dgWpm1 = getSMEFTCoeffEW("CHl3R", 1, 1);
            dgWpm2 = 0.5 * (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1));
            norm4f = 1.0;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvjjSM[i] / 3.0;
            }
            break;
        case 3:
            //  fstate = 3 (tau v jj)            
            dgWpm1 = getSMEFTCoeffEW("CHl3R", 2, 2);
            dgWpm2 = 0.5 * (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1));
            norm4f = 1.0;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvjjSM[i] / 3.0;
            }
            break;
        case 4:
            //  fstate = 4 (e v e v)            
            dgWpm1 = getSMEFTCoeffEW("CHl3R", 0, 0);
            dgWpm2 = getSMEFTCoeffEW("CHl3R", 0, 0);
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 5:
            //  fstate = 5 (mu v mu v)            
            dgWpm1 = getSMEFTCoeffEW("CHl3R", 1, 1);
            dgWpm2 = getSMEFTCoeffEW("CHl3R", 1, 1);
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 6:
            //  fstate = 6 (tau v tau v)            
            dgWpm1 = getSMEFTCoeffEW("CHl3R", 2, 2);
            dgWpm2 = getSMEFTCoeffEW("CHl3R", 2, 2);
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 7:
            //  fstate = 7 (e v mu v)            
            dgWpm1 = getSMEFTCoeffEW("CHl3R", 0, 0);
            dgWpm2 = getSMEFTCoeffEW("CHl3R", 1, 1);
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 8:
            //  fstate = 8 (e v tau v)           
            dgWpm1 = getSMEFTCoeffEW("CHl3R", 0, 0);
            dgWpm2 = getSMEFTCoeffEW("CHl3R", 2, 2);
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 9:
            //  fstate = 9 (mu v tau v)           
            dgWpm1 = getSMEFTCoeffEW("CHl3R", 1, 1);
            dgWpm2 = getSMEFTCoeffEW("CHl3R", 2, 2);
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 10:
            //  fstate = 10 (l v jj)           
            dgWpm1 = (1.0 / 3.0) * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1) + getSMEFTCoeffEW("CHl3R", 2, 2));
            dgWpm2 = 0.5 * (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1));
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvjjSM[i];
            }
            break;
        case 11:
            //  fstate = 11 (l v l v)           
            dgWpm1 = (1.0 / 3.0) * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1) + getSMEFTCoeffEW("CHl3R", 2, 2));
            dgWpm2 = (1.0 / 3.0) * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1) + getSMEFTCoeffEW("CHl3R", 2, 2));
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i];
            }
            break;
    }

    dgWpm1 = 0.5 * dgWpm1
            + cAsch * (0.25 * (cW_tree * getSMEFTCoeffEW("CHWB") / sW_tree) * v2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    dgWpm2 = 0.5 * dgWpm2
            + cAsch * (0.25 * (cW_tree * getSMEFTCoeffEW("CHWB") / sW_tree) * v2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    if (sqrt_s == 0.1886) {

        xspb += xspbSM[0] + norm4f * cAsch * (
                +2.6 * dmW2
                - 17.0 * dGW
                + 72.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 5.3 * dgVZee
                + 0.3 * dgAZee
                - 0.08 * dgZ1
                - 0.50 * dkga
                - 0.19 * dkZ
                - 0.29 * dlga
                + 0.026 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 72.0 * dgWve
                + 33.4 * dgWpm1
                + 33.4 * dgWpm2
                + 5.72 * dgVZee
                + 0.21 * dgAZee
                - 0.05 * dgZ1
                - 0.57 * dkga
                - 0.16 * dkZ
                - 0.34 * dlga
                + 0.051 * dlZ
                + 0.0005 * dGZ
                - 0.41 * dgga1
                - 0.98 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[0];

    } else if (sqrt_s == 0.1916) {

        xspb += xspbSM[1] + norm4f * cAsch * (
                +1.6 * dmW2
                - 17.0 * dGW
                + 73.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 5.8 * dgVZee
                + 0.4 * dgAZee
                - 0.10 * dgZ1
                - 0.56 * dkga
                - 0.22 * dkZ
                - 0.32 * dlga
                + 0.018 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 72.0 * dgWve
                + 33.6 * dgWpm1
                + 33.6 * dgWpm2
                + 6.26 * dgVZee
                + 0.33 * dgAZee
                - 0.07 * dgZ1
                - 0.64 * dkga
                - 0.19 * dkZ
                - 0.37 * dlga
                + 0.045 * dlZ
                + 0.0005 * dGZ
                - 0.41 * dgga1
                - 1.08 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[1];

    } else if (sqrt_s == 0.1955) {

        xspb += xspbSM[2] + norm4f * cAsch * (
                +0.26 * dmW2
                - 17.0 * dGW
                + 74.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 6.5 * dgVZee
                + 0.6 * dgAZee
                - 0.12 * dgZ1
                - 0.64 * dkga
                - 0.27 * dkZ
                - 0.36 * dlga
                + 0.005 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 73.0 * dgWve
                + 33.8 * dgWpm1
                + 33.8 * dgWpm2
                + 6.91 * dgVZee
                + 0.50 * dgAZee
                - 0.09 * dgZ1
                - 0.72 * dkga
                - 0.22 * dkZ
                - 0.41 * dlga
                + 0.035 * dlZ
                + 0.0005 * dGZ
                - 0.49 * dgga1
                - 1.20 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[2];

    } else if (sqrt_s == 0.1995) {

        xspb += xspbSM[3] + norm4f * cAsch * (
                -0.54 * dmW2
                - 17.0 * dGW
                + 75.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 7.1 * dgVZee
                + 0.8 * dgAZee
                - 0.15 * dgZ1
                - 0.71 * dkga
                - 0.31 * dkZ
                - 0.40 * dlga
                - 0.009 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 74.0 * dgWve
                + 33.7 * dgWpm1
                + 33.7 * dgWpm2
                + 7.52 * dgVZee
                + 0.68 * dgAZee
                - 0.11 * dgZ1
                - 0.79 * dkga
                - 0.26 * dkZ
                - 0.45 * dlga
                + 0.022 * dlZ
                + 0.0005 * dGZ
                - 0.53 * dgga1
                - 1.33 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[3];

    } else if (sqrt_s == 0.2016) {

        xspb += xspbSM[4] + norm4f * cAsch * (
                -0.97 * dmW2
                - 17.0 * dGW
                + 75.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 7.4 * dgVZee
                + 0.9 * dgAZee
                - 0.16 * dgZ1
                - 0.75 * dkga
                - 0.33 * dkZ
                - 0.42 * dlga
                - 0.017 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 74.0 * dgWve
                + 33.7 * dgWpm1
                + 33.7 * dgWpm2
                + 7.82 * dgVZee
                + 0.78 * dgAZee
                - 0.12 * dgZ1
                - 0.83 * dkga
                - 0.28 * dkZ
                - 0.47 * dlga
                + 0.016 * dlZ
                + 0.0005 * dGZ
                - 0.55 * dgga1
                - 1.39 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[4];

    } else if (sqrt_s == 0.2049) {

        xspb += xspbSM[5] + norm4f * cAsch * (
                -1.4 * dmW2
                - 17.0 * dGW
                + 75.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 7.8 * dgVZee
                + 1.0 * dgAZee
                - 0.18 * dgZ1
                - 0.80 * dkga
                - 0.37 * dkZ
                - 0.44 * dlga
                - 0.029 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 74.0 * dgWve
                + 33.5 * dgWpm1
                + 33.5 * dgWpm2
                + 8.24 * dgVZee
                + 0.93 * dgAZee
                - 0.14 * dgZ1
                - 0.89 * dkga
                - 0.32 * dkZ
                - 0.47 * dlga
                + 0.005 * dlZ
                + 0.0005 * dGZ
                - 0.58 * dgga1
                - 1.47 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[5];

    } else if (sqrt_s == 0.2066) {

        xspb += xspbSM[6] + norm4f * cAsch * (
                -1.8 * dmW2
                - 17.0 * dGW
                + 76.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 8.0 * dgVZee
                + 1.1 * dgAZee
                - 0.19 * dgZ1
                - 0.83 * dkga
                - 0.39 * dkZ
                - 0.46 * dlga
                - 0.036 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 75.0 * dgWve
                + 33.4 * dgWpm1
                + 33.4 * dgWpm2
                + 8.45 * dgVZee
                + 1.01 * dgAZee
                - 0.15 * dgZ1
                - 0.92 * dkga
                - 0.33 * dkZ
                - 0.51 * dlga
                - 0.001 * dlZ
                + 0.0005 * dGZ
                - 0.60 * dgga1
                - 1.52 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[6];

    } else if (sqrt_s == 0.208) {

        xspb += xspbSM[7] + norm4f * cAsch * (
                -2.0 * dmW2
                - 17.0 * dGW
                + 76.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 8.2 * dgVZee
                + 1.2 * dgAZee
                - 0.20 * dgZ1
                - 0.85 * dkga
                - 0.40 * dkZ
                - 0.47 * dlga
                - 0.042 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 75.0 * dgWve
                + 33.3 * dgWpm1
                + 33.3 * dgWpm2
                + 8.62 * dgVZee
                + 1.08 * dgAZee
                - 0.16 * dgZ1
                - 0.94 * dkga
                - 0.35 * dkZ
                - 0.52 * dlga
                - 0.007 * dlZ
                + 0.0005 * dGZ
                - 0.61 * dgga1
                - 1.55 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[7];

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::xseeWW4fLEP2()");

    if (xspb < 0) return std::numeric_limits<double>::quiet_NaN();

    return xspb;
}

const double NPSMEFTd6General::deltaxseeWWtotLEP2(const double sqrt_s) const {
    return ( deltaxseeWW4fLEP2(sqrt_s, 0) + deltaxseeWW4fLEP2(sqrt_s, 10) + deltaxseeWW4fLEP2(sqrt_s, 11));
}

const double NPSMEFTd6General::xseeWWtotLEP2(const double sqrt_s) const {
    return ( xseeWW4fLEP2(sqrt_s, 0) + xseeWW4fLEP2(sqrt_s, 10) + xseeWW4fLEP2(sqrt_s, 11));
}

const double NPSMEFTd6General::deltadxsdcoseeWWlvjjLEP2(const double sqrt_s, const int bin) const {

    //  Returns differential cross section in pb  
    //  bin = 1, 2, 3, 4

    double xspb = 0.0;

    double xspbSM = 0.0;
    // SM values from Table 8 in hep-ex/0409016
    // Sum bin contents into B1=[-1,-0.8], B2=[-0.4,-0.2], B3=[0.4,0.6], B4=[0.8,1]
    double xslvjjSM183[4] = {0.74, 1.20, 2.86, 5.47};
    double xslvjjSM206[4] = {0.52, 0.98, 2.92, 7.80};

    double dgWve, dgWpm1, dgWpm2, dmZ2, dmW2, dGW, dGF, dgZ, dsW2, dgVZee, dgAZee, dgZ1, dgga1, dkga, dkZ, dlga, dlZ, deem;

    double gVZeeSM, gAZeeSM;

    //  Values of the couplings: final-state independent couplings
    gVZeeSM = -0.25 + sW2_tree;
    gAZeeSM = -0.25;

    dGF = delta_GF / sqrt(2.0);

    dmZ2 = cAsch * (0.5 * getSMEFTCoeffEW("CHD") + 2.0 * cW_tree * sW_tree * getSMEFTCoeffEW("CHWB")) * v2
            + cWsch * (0.5 * getSMEFTCoeffEW("CHD") + 2.0 * (Mw_inp / Mz) * sqrt(1.0 - Mw_inp * Mw_inp / Mz / Mz) * getSMEFTCoeffEW("CHWB")) * v2;

    dmW2 = -2.0 * deltaMwd6(); //There is a minus sign between refs. definition of dmW2 and ours

    dGW = deltaGwd6();

    dsW2 = cAsch * (-0.5 * (cW2_tree / (1.0 - 2.0 * sW2_tree)) * ((getSMEFTCoeffEW("CHD")
            + 2.0 * getSMEFTCoeffEW("CHWB") / cW_tree / sW_tree) * v2
            + 2.0 * sqrt(2.0) * dGF))
            + cWsch * (1.0 / sW2_tree) * (0.5 * Mw_inp * Mw_inp * getSMEFTCoeffEW("CHD") / Mz / Mz + Mw_inp * sqrt(1.0 - Mw_inp * Mw_inp / Mz / Mz) * getSMEFTCoeffEW("CHWB") / Mz) * v2;

    dgZ = -dGF / sqrt(2.0) - 0.5 * dmZ2
            + cW_tree * sW_tree * getSMEFTCoeffEW("CHWB") * v2;

    dgVZee = dgZ * gVZeeSM
            - 0.25 * (getSMEFTCoeffEW("CHeR", 0, 0) + getSMEFTCoeffEW("CHl1R", 0, 0) + getSMEFTCoeffEW("CHl3R", 0, 0)) * v2
            - sW2_tree * dsW2;

    dgAZee = dgZ * gAZeeSM
            + 0.25 * (getSMEFTCoeffEW("CHeR", 0, 0) - getSMEFTCoeffEW("CHl1R", 0, 0) - getSMEFTCoeffEW("CHl3R", 0, 0)) * v2;

    dgWve = 0.5 * getSMEFTCoeffEW("CHl3R", 0, 0) * v2
            + cAsch * (0.25 * (cW_tree * getSMEFTCoeffEW("CHWB") / sW_tree) * v2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    dgZ1 = deltag1ZNP(sqrt_s);

    dgga1 = deltag1gaNP(sqrt_s);

    dkga = deltaKgammaNP(sqrt_s);

    dkZ = dgZ1 - (sW2_tree / cW2_tree) * (dkga - dgga1);

    dlga = -lambdaZNP(sqrt_s);

    dlZ = -lambdaZNP(sqrt_s);

    deem = delta_e + 0.5 * delta_A;

    //  Values of the couplings for the W decays: I assume ME from arXiv: 1606.06693 [hep-ph] are, as in
    //  the LEP2 experimental analyses they use, for l=e, mu    
    dgWpm1 = 0.25 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1)) * v2
            + cAsch * (0.25 * (cW_tree * getSMEFTCoeffEW("CHWB") / sW_tree) * v2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    dgWpm2 = 0.25 * (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1)) * v2
            + cAsch * (0.25 * (cW_tree * getSMEFTCoeffEW("CHWB") / sW_tree) * v2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    if (sqrt_s == 0.1827) {

        switch (bin) {
            case 1:
                //  Bin 1        
                xspbSM = xslvjjSM183[0];
                xspb += cAsch * (-1.6 * dmW2
                        - 1.5 * dGW
                        + 12.0 * dgWve
                        + 2.9 * dgWpm1
                        + 2.9 * dgWpm2
                        + 4.1 * dgVZee
                        + 3.0 * dgAZee
                        - 0.44 * dgZ1
                        - 0.34 * dkga
                        - 0.47 * dkZ
                        - 0.32 * dlga
                        - 0.45 * dlZ)
                        ;

                xspb += cWsch * (
                        -1.5 * dGW
                        + 12.0 * dgWve
                        + 2.9 * dgWpm1
                        + 2.9 * dgWpm2
                        + 4.3 * dgVZee
                        + 3.0 * dgAZee
                        - 0.42 * dgZ1
                        - 0.37 * dkga
                        - 0.45 * dkZ
                        - 0.35 * dlga
                        - 0.43 * dlZ
                        - 0.34 * dgga1
                        - 0.71 * deem
                        );

                break;

            case 2:
                //  Bin 2   
                xspbSM = xslvjjSM183[1];
                xspb += cAsch * (-1.5 * dmW2
                        - 2.8 * dGW
                        + 16.0 * dgWve
                        + 5.5 * dgWpm1
                        + 5.5 * dgWpm2
                        + 3.5 * dgVZee
                        + 2.2 * dgAZee
                        - 0.30 * dgZ1
                        - 0.32 * dkga
                        - 0.39 * dkZ
                        - 0.26 * dlga
                        - 0.34 * dlZ)
                        ;

                xspb += cWsch * (
                        -2.8 * dGW
                        + 16.0 * dgWve
                        + 5.4 * dgWpm1
                        + 5.4 * dgWpm2
                        + 3.7 * dgVZee
                        + 2.3 * dgAZee
                        - 0.29 * dgZ1
                        - 0.35 * dkga
                        - 0.38 * dkZ
                        - 0.28 * dlga
                        - 0.32 * dlZ
                        - 0.27 * dgga1
                        - 0.62 * deem
                        );

                break;

            case 3:
                //  Bin 3      
                xspbSM = xslvjjSM183[2];
                xspb += cAsch * (0.16 * dmW2
                        - 5.3 * dGW
                        + 22.0 * dgWve
                        + 10.0 * dgWpm1
                        + 10.0 * dgWpm2
                        + 1.5 * dgVZee
                        + 0.2 * dgAZee
                        - 0.04 * dgZ1
                        - 0.14 * dkga
                        - 0.06 * dkZ
                        - 0.06 * dlga
                        + 0.026 * dlZ)
                        ;

                xspb += cWsch * (
                        -5.2 * dGW
                        + 22.0 * dgWve
                        + 10.2 * dgWpm1
                        + 10.2 * dgWpm2
                        + 1.7 * dgVZee
                        + 0.2 * dgAZee
                        - 0.04 * dgZ1
                        - 0.16 * dkga
                        - 0.06 * dkZ
                        - 0.08 * dlga
                        + 0.03 * dlZ
                        - 0.12 * dgga1
                        - 0.29 * deem
                        );

                break;

            case 4:
                //  Bin 4        
                xspbSM = xslvjjSM183[3];
                xspb += cAsch * (18.0 * dmW2
                        - 14.0 * dGW
                        + 39.0 * dgWve
                        + 27.0 * dgWpm1
                        + 27.0 * dgWpm2
                        - 7.7 * dgVZee
                        - 8.8 * dgAZee
                        + 1.2 * dgZ1
                        + 0.62 * dkga
                        + 1.3 * dkZ
                        + 0.63 * dlga
                        + 1.3 * dlZ)
                        ;

                xspb += cWsch * (
                        -14.1 * dGW
                        + 40.0 * dgWve
                        + 27.5 * dgWpm1
                        + 27.5 * dgWpm2
                        - 7.8 * dgVZee
                        - 9.0 * dgAZee
                        + 1.20 * dgZ1
                        + 0.67 * dkga
                        + 1.27 * dkZ
                        + 0.68 * dlga
                        + 1.27 * dlZ
                        + 0.64 * dgga1
                        + 1.30 * deem
                        );

                break;

        }

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

    } else if (sqrt_s == 0.2059) {

        switch (bin) {
            case 1:
                //  Bin 1        
                xspbSM = xslvjjSM206[0];
                xspb += cAsch * (-1.1 * dmW2
                        - 0.9 * dGW
                        + 11.0 * dgWve
                        + 1.8 * dgWpm1
                        + 1.8 * dgWpm2
                        + 4.9 * dgVZee
                        + 3.0 * dgAZee
                        - 0.44 * dgZ1
                        - 0.44 * dkga
                        - 0.50 * dkZ
                        - 0.40 * dlga
                        - 0.46 * dlZ)
                        ;

                xspb += cWsch * (
                        -0.9 * dGW
                        + 10.0 * dgWve
                        + 1.8 * dgWpm1
                        + 1.8 * dgWpm2
                        + 4.9 * dgVZee
                        + 2.9 * dgAZee
                        - 0.40 * dgZ1
                        - 0.47 * dkga
                        - 0.46 * dkZ
                        - 0.43 * dlga
                        - 0.43 * dlZ
                        - 0.41 * dgga1
                        - 0.88 * deem
                        );

                break;

            case 2:
                //  Bin 2        
                xspbSM = xslvjjSM206[1];
                xspb += cAsch * (-1.7 * dmW2
                        - 2.1 * dGW
                        + 15.0 * dgWve
                        + 4.1 * dgWpm1
                        + 4.1 * dgWpm2
                        + 5.0 * dgVZee
                        + 2.8 * dgAZee
                        - 0.34 * dgZ1
                        - 0.53 * dkga
                        - 0.55 * dkZ
                        - 0.37 * dlga
                        - 0.41 * dlZ)
                        ;

                xspb += cWsch * (
                        -2.0 * dGW
                        + 15.0 * dgWve
                        + 4.0 * dgWpm1
                        + 4.0 * dgWpm2
                        + 5.1 * dgVZee
                        + 2.8 * dgAZee
                        - 0.31 * dgZ1
                        - 0.57 * dkga
                        - 0.51 * dkZ
                        - 0.40 * dlga
                        - 0.38 * dlZ
                        - 0.35 * dgga1
                        - 0.92 * deem
                        );

                break;

            case 3:
                //  Bin 3        
                xspbSM = xslvjjSM206[2];
                xspb += cAsch * (-2.3 * dmW2
                        - 4.6 * dGW
                        + 22.0 * dgWve
                        + 9.0 * dgWpm1
                        + 9.0 * dgWpm2
                        + 3.5 * dgVZee
                        + 1.2 * dgAZee
                        - 0.19 * dgZ1
                        - 0.35 * dkga
                        - 0.25 * dkZ
                        - 0.19 * dlga
                        - 0.086 * dlZ)
                        ;

                xspb += cWsch * (
                        -4.5 * dGW
                        + 22.0 * dgWve
                        + 8.8 * dgWpm1
                        + 8.8 * dgWpm2
                        + 3.7 * dgVZee
                        + 1.2 * dgAZee
                        - 0.17 * dgZ1
                        - 0.39 * dkga
                        - 0.22 * dkZ
                        - 0.21 * dlga
                        - 0.07 * dlZ
                        - 0.27 * dgga1
                        - 0.66 * deem
                        );

                break;

            case 4:
                //  Bin 4        
                xspbSM = xslvjjSM206[3];
                xspb += cAsch * (10.0 * dmW2
                        - 20.0 * dGW
                        + 59.0 * dgWve
                        + 39.0 * dgWpm1
                        + 39.0 * dgWpm2
                        - 9.6 * dgVZee
                        - 11.0 * dgAZee
                        + 1.5 * dgZ1
                        + 0.86 * dkga
                        + 1.7 * dkZ
                        + 0.9 * dlga
                        + 1.7 * dlZ)
                        ;

                xspb += cWsch * (
                        -19.8 * dGW
                        + 59.0 * dgWve
                        + 39.0 * dgWpm1
                        + 39.0 * dgWpm2
                        - 9.5 * dgVZee
                        - 11.4 * dgAZee
                        + 1.48 * dgZ1
                        + 0.88 * dkga
                        + 1.63 * dkZ
                        + 0.93 * dlga
                        + 1.67 * dlZ
                        + 0.81 * dgga1
                        + 1.69 * deem
                        );

                break;
        }

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::deltadxsdcoseeWWlvjjLEP2()");

    //Add relative theory errors (free par). (Assume they are constant in energy.)
    xspb += edeeWWdcint * xspbSM;

    if ((xspbSM + xspb) < 0) return std::numeric_limits<double>::quiet_NaN();

    return xspb;
}

const double NPSMEFTd6General::dxsdcoseeWWlvjjLEP2(const double sqrt_s, const int bin) const {

    //  Returns differential cross section in pb  
    //  bin = 1, 2, 3, 4

    double xspb = 0.0;

    double xspbSM = 0.0;
    // SM values from Table 8 in hep-ex/0409016
    // Sum bin contents into B1=[-1,-0.8], B2=[-0.4,-0.2], B3=[0.4,0.6], B4=[0.8,1]
    double xslvjjSM183[4] = {0.74, 1.20, 2.86, 5.47};
    double xslvjjSM206[4] = {0.52, 0.98, 2.92, 7.80};

    double dgWve, dgWpm1, dgWpm2, dmZ2, dmW2, dGW, dGF, dgZ, dsW2, dgVZee, dgAZee, dgZ1, dgga1, dkga, dkZ, dlga, dlZ, deem;

    double gVZeeSM, gAZeeSM;

    //  Values of the couplings: final-state independent couplings
    gVZeeSM = -0.25 + sW2_tree;
    gAZeeSM = -0.25;

    dGF = delta_GF / sqrt(2.0);

    dmZ2 = cAsch * (0.5 * getSMEFTCoeffEW("CHD") + 2.0 * cW_tree * sW_tree * getSMEFTCoeffEW("CHWB")) * v2
            + cWsch * (0.5 * getSMEFTCoeffEW("CHD") + 2.0 * (Mw_inp / Mz) * sqrt(1.0 - Mw_inp * Mw_inp / Mz / Mz) * getSMEFTCoeffEW("CHWB")) * v2;

    dmW2 = -2.0 * deltaMwd6(); //There is a minus sign between refs. definition of dmW2 and ours

    dGW = deltaGwd6();

    dsW2 = cAsch * (-0.5 * (cW2_tree / (1.0 - 2.0 * sW2_tree)) * ((getSMEFTCoeffEW("CHD")
            + 2.0 * getSMEFTCoeffEW("CHWB") / cW_tree / sW_tree) * v2
            + 2.0 * sqrt(2.0) * dGF))
            + cWsch * (1.0 / sW2_tree) * (0.5 * Mw_inp * Mw_inp * getSMEFTCoeffEW("CHD") / Mz / Mz + Mw_inp * sqrt(1.0 - Mw_inp * Mw_inp / Mz / Mz) * getSMEFTCoeffEW("CHWB") / Mz) * v2;

    dgZ = -dGF / sqrt(2.0) - 0.5 * dmZ2
            + cW_tree * sW_tree * getSMEFTCoeffEW("CHWB") * v2;

    dgVZee = dgZ * gVZeeSM
            - 0.25 * (getSMEFTCoeffEW("CHeR", 0, 0) + getSMEFTCoeffEW("CHl1R", 0, 0) + getSMEFTCoeffEW("CHl3R", 0, 0)) * v2
            - sW2_tree * dsW2;

    dgAZee = dgZ * gAZeeSM
            + 0.25 * (getSMEFTCoeffEW("CHeR", 0, 0) - getSMEFTCoeffEW("CHl1R", 0, 0) - getSMEFTCoeffEW("CHl3R", 0, 0)) * v2;

    dgWve = 0.5 * getSMEFTCoeffEW("CHl3R", 0, 0) * v2
            + cAsch * (0.25 * (cW_tree * getSMEFTCoeffEW("CHWB") / sW_tree) * v2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    dgZ1 = deltag1ZNP(sqrt_s);

    dgga1 = deltag1gaNP(sqrt_s);

    dkga = deltaKgammaNP(sqrt_s);

    dkZ = dgZ1 - (sW2_tree / cW2_tree) * (dkga - dgga1);

    dlga = -lambdaZNP(sqrt_s);

    dlZ = -lambdaZNP(sqrt_s);

    deem = delta_e + 0.5 * delta_A;

    //  Values of the couplings for the W decays: I assume ME from arXiv: 1606.06693 [hep-ph] are, as in
    //  the LEP2 experimental analyses they use, for l=e, mu
    dgWpm1 = 0.25 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1)) * v2
            + cAsch * (0.25 * (cW_tree * getSMEFTCoeffEW("CHWB") / sW_tree) * v2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    dgWpm2 = 0.25 * (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1)) * v2
            + cAsch * (0.25 * (cW_tree * getSMEFTCoeffEW("CHWB") / sW_tree) * v2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    if (sqrt_s == 0.1827) {

        switch (bin) {
            case 1:
                //  Bin 1        
                xspbSM = xslvjjSM183[0];
                xspb += xspbSM
                        + cAsch * (-1.6 * dmW2
                        - 1.5 * dGW
                        + 12.0 * dgWve
                        + 2.9 * dgWpm1
                        + 2.9 * dgWpm2
                        + 4.1 * dgVZee
                        + 3.0 * dgAZee
                        - 0.44 * dgZ1
                        - 0.34 * dkga
                        - 0.47 * dkZ
                        - 0.32 * dlga
                        - 0.45 * dlZ)
                        ;

                xspb += cWsch * (
                        -1.5 * dGW
                        + 12.0 * dgWve
                        + 2.9 * dgWpm1
                        + 2.9 * dgWpm2
                        + 4.3 * dgVZee
                        + 3.0 * dgAZee
                        - 0.42 * dgZ1
                        - 0.37 * dkga
                        - 0.45 * dkZ
                        - 0.35 * dlga
                        - 0.43 * dlZ
                        - 0.34 * dgga1
                        - 0.71 * deem
                        );

                break;

            case 2:
                //  Bin 2   
                xspbSM = xslvjjSM183[1];
                xspb += xspbSM
                        + cAsch * (-1.5 * dmW2
                        - 2.8 * dGW
                        + 16.0 * dgWve
                        + 5.5 * dgWpm1
                        + 5.5 * dgWpm2
                        + 3.5 * dgVZee
                        + 2.2 * dgAZee
                        - 0.30 * dgZ1
                        - 0.32 * dkga
                        - 0.39 * dkZ
                        - 0.26 * dlga
                        - 0.34 * dlZ)
                        ;

                xspb += cWsch * (
                        -2.8 * dGW
                        + 16.0 * dgWve
                        + 5.4 * dgWpm1
                        + 5.4 * dgWpm2
                        + 3.7 * dgVZee
                        + 2.3 * dgAZee
                        - 0.29 * dgZ1
                        - 0.35 * dkga
                        - 0.38 * dkZ
                        - 0.28 * dlga
                        - 0.32 * dlZ
                        - 0.27 * dgga1
                        - 0.62 * deem
                        );

                break;

            case 3:
                //  Bin 3      
                xspbSM = xslvjjSM183[2];
                xspb += xspbSM
                        + cAsch * (+0.16 * dmW2
                        - 5.3 * dGW
                        + 22.0 * dgWve
                        + 10.0 * dgWpm1
                        + 10.0 * dgWpm2
                        + 1.5 * dgVZee
                        + 0.2 * dgAZee
                        - 0.04 * dgZ1
                        - 0.14 * dkga
                        - 0.06 * dkZ
                        - 0.06 * dlga
                        + 0.026 * dlZ)
                        ;

                xspb += cWsch * (
                        -5.2 * dGW
                        + 22.0 * dgWve
                        + 10.2 * dgWpm1
                        + 10.2 * dgWpm2
                        + 1.7 * dgVZee
                        + 0.2 * dgAZee
                        - 0.04 * dgZ1
                        - 0.16 * dkga
                        - 0.06 * dkZ
                        - 0.08 * dlga
                        + 0.03 * dlZ
                        - 0.12 * dgga1
                        - 0.29 * deem
                        );

                break;

            case 4:
                //  Bin 4        
                xspbSM = xslvjjSM183[3];
                xspb += xspbSM
                        + cAsch * (+18.0 * dmW2
                        - 14.0 * dGW
                        + 39.0 * dgWve
                        + 27.0 * dgWpm1
                        + 27.0 * dgWpm2
                        - 7.7 * dgVZee
                        - 8.8 * dgAZee
                        + 1.2 * dgZ1
                        + 0.62 * dkga
                        + 1.3 * dkZ
                        + 0.63 * dlga
                        + 1.3 * dlZ)
                        ;

                xspb += cWsch * (
                        -14.1 * dGW
                        + 40.0 * dgWve
                        + 27.5 * dgWpm1
                        + 27.5 * dgWpm2
                        - 7.8 * dgVZee
                        - 9.0 * dgAZee
                        + 1.20 * dgZ1
                        + 0.67 * dkga
                        + 1.27 * dkZ
                        + 0.68 * dlga
                        + 1.27 * dlZ
                        + 0.64 * dgga1
                        + 1.30 * deem
                        );

                break;

        }

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

    } else if (sqrt_s == 0.2059) {

        switch (bin) {
            case 1:
                //  Bin 1        
                xspbSM = xslvjjSM206[0];
                xspb += xspbSM
                        + cAsch * (-1.1 * dmW2
                        - 0.9 * dGW
                        + 11.0 * dgWve
                        + 1.8 * dgWpm1
                        + 1.8 * dgWpm2
                        + 4.9 * dgVZee
                        + 3.0 * dgAZee
                        - 0.44 * dgZ1
                        - 0.44 * dkga
                        - 0.50 * dkZ
                        - 0.40 * dlga
                        - 0.46 * dlZ)
                        ;

                xspb += cWsch * (
                        -0.9 * dGW
                        + 10.0 * dgWve
                        + 1.8 * dgWpm1
                        + 1.8 * dgWpm2
                        + 4.9 * dgVZee
                        + 2.9 * dgAZee
                        - 0.40 * dgZ1
                        - 0.47 * dkga
                        - 0.46 * dkZ
                        - 0.43 * dlga
                        - 0.43 * dlZ
                        - 0.41 * dgga1
                        - 0.88 * deem
                        );

                break;

            case 2:
                //  Bin 2        
                xspbSM = xslvjjSM206[1];
                xspb += xspbSM
                        + cAsch * (-1.7 * dmW2
                        - 2.1 * dGW
                        + 15.0 * dgWve
                        + 4.1 * dgWpm1
                        + 4.1 * dgWpm2
                        + 5.0 * dgVZee
                        + 2.8 * dgAZee
                        - 0.34 * dgZ1
                        - 0.53 * dkga
                        - 0.55 * dkZ
                        - 0.37 * dlga
                        - 0.41 * dlZ)
                        ;

                xspb += cWsch * (
                        -2.0 * dGW
                        + 15.0 * dgWve
                        + 4.0 * dgWpm1
                        + 4.0 * dgWpm2
                        + 5.1 * dgVZee
                        + 2.8 * dgAZee
                        - 0.31 * dgZ1
                        - 0.57 * dkga
                        - 0.51 * dkZ
                        - 0.40 * dlga
                        - 0.38 * dlZ
                        - 0.35 * dgga1
                        - 0.92 * deem
                        );

                break;

            case 3:
                //  Bin 3        
                xspbSM = xslvjjSM206[2];
                xspb += xspbSM
                        + cAsch * (-2.3 * dmW2
                        - 4.6 * dGW
                        + 22.0 * dgWve
                        + 9.0 * dgWpm1
                        + 9.0 * dgWpm2
                        + 3.5 * dgVZee
                        + 1.2 * dgAZee
                        - 0.19 * dgZ1
                        - 0.35 * dkga
                        - 0.25 * dkZ
                        - 0.19 * dlga
                        - 0.086 * dlZ)
                        ;

                xspb += cWsch * (
                        -4.5 * dGW
                        + 22.0 * dgWve
                        + 8.8 * dgWpm1
                        + 8.8 * dgWpm2
                        + 3.7 * dgVZee
                        + 1.2 * dgAZee
                        - 0.17 * dgZ1
                        - 0.39 * dkga
                        - 0.22 * dkZ
                        - 0.21 * dlga
                        - 0.07 * dlZ
                        - 0.27 * dgga1
                        - 0.66 * deem
                        );

                break;

            case 4:
                //  Bin 4        
                xspbSM = xslvjjSM206[3];
                xspb += xspbSM
                        + cAsch * (+10.0 * dmW2
                        - 20.0 * dGW
                        + 59.0 * dgWve
                        + 39.0 * dgWpm1
                        + 39.0 * dgWpm2
                        - 9.6 * dgVZee
                        - 11.0 * dgAZee
                        + 1.5 * dgZ1
                        + 0.86 * dkga
                        + 1.7 * dkZ
                        + 0.9 * dlga
                        + 1.7 * dlZ)
                        ;

                xspb += cWsch * (
                        -19.8 * dGW
                        + 59.0 * dgWve
                        + 39.0 * dgWpm1
                        + 39.0 * dgWpm2
                        - 9.5 * dgVZee
                        - 11.4 * dgAZee
                        + 1.48 * dgZ1
                        + 0.88 * dkga
                        + 1.63 * dkZ
                        + 0.93 * dlga
                        + 1.67 * dlZ
                        + 0.81 * dgga1
                        + 1.69 * deem
                        );

                break;
        }

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::dxsdcoseeWWlvjjLEP2()");

    //Add relative theory errors (free par). (Assume they are constant in energy.)
    xspb += edeeWWdcint * xspbSM;

    if (xspb < 0) return std::numeric_limits<double>::quiet_NaN();

    return xspb;
}

///////////////////////////////////////////////////////////////////////////////

const double NPSMEFTd6General::dxseeWWdcos(const double sqrt_s, const double cos) const {
    double sqrt_sGeV = 1000. * sqrt_s;
    double s = sqrt_sGeV * sqrt_sGeV;
    double cos2 = cos * cos;
    double sin2 = 1.0 - cos2;
    double sin = sqrt(sin2);

    double topb = 0.3894 * 1000000000.0;

    //  NC and CC couplings
    double gLe, gRe;
    gslpp::complex Uenu;

    gLe = -0.5 + sW2_tree + deltaGL_f(leptons[ELECTRON]);
    gRe = sW2_tree + deltaGR_f(leptons[ELECTRON]);

    Uenu = deltaGL_Wff(leptons[NEUTRINO_1], leptons[ELECTRON]);
    Uenu = 1.0 + Uenu;

    //  W mass
    double mw;

    mw = Mw();

    //  Wigner functions
    double d1pp[2], d1mm[2], d1p0[2], d1m0[2], d10p[2], d10m[2], d100[2];

    d1pp[0] = sqrt((1.0 - cos2) / 2.0);
    d1pp[1] = -sqrt((1.0 - cos2) / 2.0);

    d1mm[0] = d1pp[0];
    d1mm[1] = d1pp[1];

    d1p0[0] = (1.0 - cos) / 2.0;
    d1p0[1] = (1.0 + cos) / 2.0;

    d1m0[0] = d1p0[1];
    d1m0[1] = d1p0[0];

    d10p[0] = d1p0[1];
    d10p[1] = d1p0[0];

    d10m[0] = d1p0[0];
    d10m[1] = d1p0[1];

    d100[0] = d1pp[0];
    d100[1] = d1pp[1];

    gslpp::matrix<double> d1LH(3, 3, 0.0);

    gslpp::matrix<double> d1RH(3, 3, 0.0);

    d1LH.assign(0, 0, d1pp[0]);
    d1LH.assign(0, 1, d1p0[0]);
    d1LH.assign(0, 2, 0.0);

    d1LH.assign(1, 0, d10p[0]);
    d1LH.assign(1, 1, d100[0]);
    d1LH.assign(1, 2, d10m[0]);

    d1LH.assign(2, 0, 0.0);
    d1LH.assign(2, 1, d1m0[0]);
    d1LH.assign(2, 2, d1mm[0]);

    d1RH.assign(0, 0, d1pp[1]);
    d1RH.assign(0, 1, d1p0[1]);
    d1RH.assign(0, 2, 0.0);

    d1RH.assign(1, 0, d10p[1]);
    d1RH.assign(1, 1, d100[1]);
    d1RH.assign(1, 2, d10m[1]);

    d1RH.assign(2, 0, 0.0);
    d1RH.assign(2, 1, d1m0[1]);
    d1RH.assign(2, 2, d1mm[1]);

    //  TGC parameterization
    double g1Z, g1ga, kZ, kga, lambdaZ, lambdaga, g4Z, g4ga, g5Z, g5ga, ktZ, ktga, lambdatZ, lambdatga;

    //  TGC present in the SM     
    g1Z = 1.0 + deltag1ZNP(sqrt_s);
    g1ga = 1.0;
    kZ = 1.0 + deltag1ZNP(sqrt_s) - (sW2_tree / cW2_tree) * deltaKgammaNP(sqrt_s);
    kga = 1.0 + deltaKgammaNP(sqrt_s);
    //  TGC not present in the SM
    lambdaZ = lambdaZNP(sqrt_s); //Check normalization
    lambdaga = lambdaZ;
    g4Z = 0.0;
    g4ga = 0.0;
    g5Z = 0.0;
    g5ga = 0.0;
    ktZ = 0.0;
    ktga = 0.0;
    lambdatZ = 0.0;
    lambdatga = 0.0;

    double f3Z, f3ga;

    f3Z = g1Z + kZ + lambdaZ;
    f3ga = g1ga + kga + lambdaga;

    // Kinematic factors
    double beta, gamma, gamma2;

    beta = sqrt(1.0 - 4.0 * mw * mw / s);
    gamma = sqrt_sGeV / (2.0 * mw);
    gamma2 = gamma*gamma;

    //  J=1 Subamplitudes: Z
    gslpp::complex AZpp, AZmm, AZp0, AZm0, AZ0p, AZ0m, AZ00;

    AZpp = gslpp::complex(g1Z + 2.0 * gamma2* lambdaZ, (ktZ + lambdatZ - 2.0 * lambdatZ) / beta, false);
    AZmm = gslpp::complex(g1Z + 2.0 * gamma2* lambdaZ, -(ktZ + lambdatZ - 2.0 * lambdatZ) / beta, false);
    AZp0 = gslpp::complex(f3Z + beta * g5Z, -g4Z + (ktZ - lambdatZ) / beta, false);
    AZp0 = gamma * AZp0;
    AZm0 = gslpp::complex(f3Z - beta * g5Z, -g4Z - (ktZ - lambdatZ) / beta, false);
    AZm0 = gamma * AZm0;
    AZ0p = gslpp::complex(f3Z - beta * g5Z, g4Z + (ktZ - lambdatZ) / beta, false);
    AZ0p = gamma * AZ0p;
    AZ0m = gslpp::complex(f3Z + beta * g5Z, g4Z - (ktZ - lambdatZ) / beta, false);
    AZ0m = gamma * AZ0m;
    AZ00 = gslpp::complex(g1Z + 2.0 * gamma2*kZ, 0.0, false);

    //  Collect in matrices and separate LH and RH
    gslpp::matrix<gslpp::complex> AmpZLH(3, 3, 0.0);
    gslpp::matrix<gslpp::complex> AmpZRH(3, 3, 0.0);

    AmpZLH.assign(0, 0, AZpp * d1LH(0, 0));
    AmpZLH.assign(0, 1, AZp0 * d1LH(0, 1));
    AmpZLH.assign(0, 2, 0.0);

    AmpZLH.assign(1, 0, AZ0p * d1LH(1, 0));
    AmpZLH.assign(1, 1, AZ00 * d1LH(1, 1));
    AmpZLH.assign(1, 2, AZ0m * d1LH(1, 2));

    AmpZLH.assign(2, 0, 0.0);
    AmpZLH.assign(2, 1, AZm0 * d1LH(2, 1));
    AmpZLH.assign(2, 2, AZmm * d1LH(2, 2));

    AmpZLH = AmpZLH * beta * s / (s - Mz * Mz);

    //  Add the correct Zff coupling
    AmpZLH = AmpZLH * gLe / sW2_tree;

    AmpZRH.assign(0, 0, AZpp * d1RH(0, 0));
    AmpZRH.assign(0, 1, AZp0 * d1RH(0, 1));
    AmpZRH.assign(0, 2, 0.0);

    AmpZRH.assign(1, 0, AZ0p * d1RH(1, 0));
    AmpZRH.assign(1, 1, AZ00 * d1RH(1, 1));
    AmpZRH.assign(1, 2, AZ0m * d1RH(1, 2));

    AmpZRH.assign(2, 0, 0.0);
    AmpZRH.assign(2, 1, AZm0 * d1RH(2, 1));
    AmpZRH.assign(2, 2, AZmm * d1RH(2, 2));

    AmpZRH = AmpZRH * beta * s / (s - Mz * Mz);

    //  Add the correct Zff coupling    
    AmpZRH = AmpZRH * gRe / sW2_tree;

    //  J=1 Subamplitudes: gamma
    gslpp::complex Agapp, Agamm, Agap0, Agam0, Aga0p, Aga0m, Aga00;

    Agapp = gslpp::complex(g1ga + 2.0 * gamma2* lambdaga, (ktga + lambdatga - 2.0 * lambdatga) / beta, false);
    Agamm = gslpp::complex(g1ga + 2.0 * gamma2* lambdaga, -(ktga + lambdatga - 2.0 * lambdatga) / beta, false);
    Agap0 = gslpp::complex(f3ga + beta * g5ga, -g4ga + (ktga - lambdatga) / beta, false);
    Agap0 = gamma * Agap0;
    Agam0 = gslpp::complex(f3ga - beta * g5ga, -g4ga - (ktga - lambdatga) / beta, false);
    Agam0 = gamma * Agam0;
    Aga0p = gslpp::complex(f3ga - beta * g5ga, g4ga + (ktga - lambdatga) / beta, false);
    Aga0p = gamma * Aga0p;
    Aga0m = gslpp::complex(f3ga + beta * g5ga, g4ga - (ktga - lambdatga) / beta, false);
    Aga0m = gamma * Aga0m;
    Aga00 = gslpp::complex(g1ga + 2.0 * gamma2*kga, 0.0, false);

    //  Collect in matrices. Here LH = RH, except for the Wigner functions  
    gslpp::matrix<gslpp::complex> AmpgaLH(3, 3, 0.0);
    gslpp::matrix<gslpp::complex> AmpgaRH(3, 3, 0.0);

    AmpgaLH.assign(0, 0, Agapp * d1LH(0, 0));
    AmpgaLH.assign(0, 1, Agap0 * d1LH(0, 1));
    AmpgaLH.assign(0, 2, 0.0);

    AmpgaLH.assign(1, 0, Aga0p * d1LH(1, 0));
    AmpgaLH.assign(1, 1, Aga00 * d1LH(1, 1));
    AmpgaLH.assign(1, 2, Aga0m * d1LH(1, 2));

    AmpgaLH.assign(2, 0, 0.0);
    AmpgaLH.assign(2, 1, Agam0 * d1LH(2, 1));
    AmpgaLH.assign(2, 2, Agamm * d1LH(2, 2));

    AmpgaRH.assign(0, 0, Agapp * d1RH(0, 0));
    AmpgaRH.assign(0, 1, Agap0 * d1RH(0, 1));
    AmpgaRH.assign(0, 2, 0.0);

    AmpgaRH.assign(1, 0, Aga0p * d1RH(1, 0));
    AmpgaRH.assign(1, 1, Aga00 * d1RH(1, 1));
    AmpgaRH.assign(1, 2, Aga0m * d1RH(1, 2));

    AmpgaRH.assign(2, 0, 0.0);
    AmpgaRH.assign(2, 1, Agam0 * d1RH(2, 1));
    AmpgaRH.assign(2, 2, Agamm * d1RH(2, 2));

    AmpgaLH = -beta * AmpgaLH;
    AmpgaRH = -beta * AmpgaRH;

    //  J=1 Subamplitudes: neutrino
    gslpp::complex Bpp, Bmm, Bp0, Bm0, B0p, B0m, B00;
    gslpp::complex Cpp, Cmm, Cp0, Cm0, C0p, C0m, C00;

    Bpp = gslpp::complex(1.0, 0.0, false);
    Bmm = Bpp;
    Bp0 = gslpp::complex(2.0 * gamma, 0.0, false);
    Bm0 = Bp0;
    B0p = Bp0;
    B0m = Bp0;
    B00 = gslpp::complex(2.0 * gamma2, 0.0, false);

    Cpp = gslpp::complex(1.0 / gamma2, 0.0, false);
    Cmm = Cpp;
    Cp0 = gslpp::complex(2.0 * (1.0 + beta) / gamma, 0.0, false);
    Cm0 = gslpp::complex(2.0 * (1.0 - beta) / gamma, 0.0, false);
    C0p = Cm0;
    C0m = Cp0;
    C00 = gslpp::complex(2.0 / gamma2, 0.0, false);

    //  Collect in matrices. Here LH = RH    
    gslpp::matrix<gslpp::complex> Bnu(3, 3, 0.0);
    gslpp::matrix<gslpp::complex> Cnu(3, 3, 0.0);

    Bnu.assign(0, 0, Bpp * d1LH(0, 0));
    Bnu.assign(0, 1, Bp0 * d1LH(0, 1));
    Bnu.assign(0, 2, 0.0);

    Bnu.assign(1, 0, B0p * d1LH(1, 0));
    Bnu.assign(1, 1, B00 * d1LH(1, 1));
    Bnu.assign(1, 2, B0m * d1LH(1, 2));

    Bnu.assign(2, 0, 0.0);
    Bnu.assign(2, 1, Bm0 * d1LH(2, 1));
    Bnu.assign(2, 2, Bmm * d1LH(2, 2));

    Cnu.assign(0, 0, Cpp * d1LH(0, 0));
    Cnu.assign(0, 1, Cp0 * d1LH(0, 1));
    Cnu.assign(0, 2, 0.0);

    Cnu.assign(1, 0, C0p * d1LH(1, 0));
    Cnu.assign(1, 1, C00 * d1LH(1, 1));
    Cnu.assign(1, 2, C0m * d1LH(1, 2));

    Cnu.assign(2, 0, 0.0);
    Cnu.assign(2, 1, Cm0 * d1LH(2, 1));
    Cnu.assign(2, 2, Cmm * d1LH(2, 2));

    //  The matrix with the total J=1 neutrino amplitude (only LH neutrinos)  
    gslpp::matrix<gslpp::complex> Ampnu1(3, 3, 0.0);

    Ampnu1 = Bnu - Cnu / (1.0 + beta * beta - 2.0 * beta * cos);

    Ampnu1 = Uenu * Uenu.conjugate() * Ampnu1 / (2.0 * beta * sW2_tree);

    gslpp::matrix<gslpp::complex> Ampnu2(3, 3, 0.0);

    Ampnu2.assign(0, 2, (1.0 - cos) / 2.0);
    Ampnu2.assign(1, 1, 0.0);
    Ampnu2.assign(2, 0, -(1.0 + cos) / 2.0);

    Ampnu2 = (2.0 * eeMz2 / sW2_tree) * Uenu * Uenu.conjugate() * Ampnu2 * sin / (1.0 + beta * beta - 2.0 * beta * cos);

    //  Total amplitudes 
    gslpp::matrix<gslpp::complex> MRH(3, 3, 0.0);
    gslpp::matrix<gslpp::complex> MLH(3, 3, 0.0);

    MRH = sqrt(2.0) * eeMz2 * (AmpZRH + AmpgaRH);
    MLH = -sqrt(2.0) * eeMz2 * (AmpZLH + AmpgaLH + Ampnu1) + Ampnu2;

    //  Total amplitude squared and differential cross section (in pb)
    gslpp::matrix<double> M2(3, 3, 0.0);
    double dxsdcos;

    dxsdcos = 0.0;

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            M2.assign(i, j, (MRH(i, j)* (MRH(i, j).conjugate())
                    + MLH(i, j)* (MLH(i, j).conjugate())).real());

            dxsdcos = dxsdcos + M2(i, j);
        }
    }

    //  Differential cross section in pb
    dxsdcos = (topb * beta / 32.0 / M_PI / s) * dxsdcos;

    return dxsdcos;
}

const double NPSMEFTd6General::dxseeWWdcosBin(const double sqrt_s, const double cos1, const double cos2) const {
    double xsWWbin; // *< Gsl integral variable 
    double errWW; // *< Gsl integral variable 

    gsl_function FR; // *< Gsl integral variable 

    FR = convertToGslFunction(bind(&NPSMEFTd6General::dxseeWWdcos, &(*this), sqrt_s, _1));

    gsl_integration_cquad(&FR, cos1, cos2, 1.e-5, 1.e-4, w_WW, &xsWWbin, &errWW, NULL);

    //  Simple integration for testing
    //    double cosx;

    //    xsWWbin = 0.0;

    //    for (int i=1; i<100; i++){
    //        cosx = cos1 +  i*(cos2-cos1)/100;
    //        xsWWbin = xsWWbin + dxseeWWdcos(sqrt_s, cosx);
    //    }

    //    xsWWbin = xsWWbin + 0.5 * (dxseeWWdcos(sqrt_s, cos1) + dxseeWWdcos(sqrt_s, cos2));

    //    xsWWbin = xsWWbin * (cos2-cos1)/100;

    //  Compute the BR into e nu, mu nu for one W and into jets for the other
    double BRlv, BRjj;

    BRlv = GammaW(leptons[NEUTRINO_1], leptons[ELECTRON]) +
            GammaW(leptons[NEUTRINO_2], leptons[MU]) +
            GammaW(leptons[NEUTRINO_3], leptons[TAU]);

    BRjj = GammaW() - BRlv;

    BRlv = BRlv - GammaW(leptons[NEUTRINO_3], leptons[TAU]);

    BRlv = BRlv / GammaW();

    BRjj = BRjj / GammaW();



    return xsWWbin * BRlv * BRjj;
}

const double NPSMEFTd6General::xseeWW(const double sqrt_s) const {
    return dxseeWWdcosBin(sqrt_s, -1.0, 1.0);
}

const double NPSMEFTd6General::mueeWW(const double sqrt_s, const double Pol_em, const double Pol_ep) const {

    //  Mw scheme
    
    double mu = 1.0;

    // Wilson coefficients and scale    
    double CW = 0.0, CHWB = 0.0, CHD = 0.0, CHl1R11 = 0.0, CHl3R11 = 0.0;
    double CHl3R22 = 0.0, CHeR11 = 0.0, CllR1221 = 0.0; 
    double muRG = 0;
    
    // Polarization factors
    double Pe = Pol_em, Pp = Pol_ep;
    double fLR, fRL;

    // LH and RH cross sections    
    double sigmaSMeLHa0 = 0.0, sigmaeLHa0 = 0.0; 
    double sigmaSMeRHa0 = 0.0, sigmaeRHa0 = 0.0;
    
    // -------------------------------------------------------------------------
    
    fLR = 0.25 * (1.0 - Pe) * (1.0 + Pp);
    fRL = 0.25 * (1.0 + Pe) * (1.0 - Pp);
    
    // RG scale in GeV
    muRG = 1000. * sqrt_s;
    
//  Wilson coefficients definitions 
    CW = getSMEFTCoeff("CW", muRG); 
    CHWB = getSMEFTCoeff("CHWB", muRG); 
    CHD = getSMEFTCoeff("CHD", muRG); 
    CHl1R11 = getSMEFTCoeff("CHl1R",0,0, muRG); 
    CHl3R11 = getSMEFTCoeff("CHl3R",0,0, muRG); 
    CHl3R22 = getSMEFTCoeff("CHl3R",1,1, muRG); 
    CHeR11 = getSMEFTCoeff("CHeR",0,0, muRG); 
    CllR1221 = getSMEFTCoeff("CllR",0,1,1,0, muRG);

    if (sqrt_s == 0.161) {

        // LH -------------------------------
        sigmaSMeLHa0 = 12.9284; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -70. * CW 
                +38. * CHWB 
                -80. * CHD 
                -1416. * CHl1R11 
                +1568661. * CHl3R11 
                -1567486. * CHl3R22 
                -1073. * CHeR11 
                +1567418. * CllR1221
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.00232; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +122.385 * CW 
                +235.258 * CHWB 
                -488.691 * CHD 
                -0.0333 * CHl1R11 
                -281.296 * CHl3R11 
                -281.292 * CHl3R22 
                -1960.29 * CHeR11 
                +281.274 * CllR1221             
                );

    } else if (sqrt_s == 0.230) {

        // LH -------------------------------
        sigmaSMeLHa0 = 70.5564; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -402730. * CW 
                +23840. * CHWB 
                -226360. * CHD 
                -1745010. * CHl1R11 
                +10098670. * CHl3R11 
                -8510260. * CHl3R22 
                +10640. * CHeR11 
                +8598300. * CllR1221 
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.684821; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +32771. * CW 
                +275222. * CHWB 
                -144266. * CHD 
                -22. * CHl1R11 
                -82975. * CHl3R11 
                -82897. * CHl3R22 
                -1181168. * CHeR11 
                +83185. * CllR1221             
                );


    } else if (sqrt_s == 0.240) {

        // LH -------------------------------
        sigmaSMeLHa0 = 67.9294; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -439450. * CW 
                +40210. * CHWB 
                -228100. * CHD 
                -1866240. * CHl1R11 
                +9886460. * CHl3R11 
                -8196200. * CHl3R22 
                +3050. * CHeR11 
                +8272340. * CllR1221
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.639986; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +29994. * CW 
                +284436. * CHWB 
                -134835. * CHD 
                +4. * CHl1R11 
                -77575. * CHl3R11 
                -77505. * CHl3R22 
                -1201943. * CHeR11 
                +77766. * CllR1221             
                );


    } else if (sqrt_s == 0.250) {

        // LH -------------------------------
        sigmaSMeLHa0 = 65.3108; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -449120. * CW 
                +71270. * CHWB 
                -205800. * CHD 
                -1957840. * CHl1R11 
                +9671820. * CHl3R11 
                -7877690. * CHl3R22 
                +6620. * CHeR11 
                +7962190. * CllR1221
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.593472; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +27185. * CW 
                +288498. * CHWB 
                -125062. * CHD 
                -81. * CHl1R11 
                -71945. * CHl3R11 
                -71972. * CHl3R22 
                -1209216. * CHeR11 
                +72007. * CllR1221             
                );


    } else if (sqrt_s == 0.350) {

        // LH -------------------------------
        sigmaSMeLHa0 = 44.8939; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -439960. * CW 
                +155590. * CHWB 
                -118280. * CHD 
                -2143580. * CHl1R11 
                +7481240. * CHl3R11 
                -5415950. * CHl3R22 
                +10980. * CHeR11 
                +5473930. * CllR1221 
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.267037; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +9564. * CW 
                +230676. * CHWB 
                -56256. * CHD 
                -18. * CHl1R11 
                -32398. * CHl3R11 
                -32368. * CHl3R22 
                -1066430. * CHeR11 
                +32444. * CllR1221             
                );


    } else if (sqrt_s == 0.365) {

        // LH -------------------------------
        sigmaSMeLHa0 = 42.6742; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -426720. * CW 
                +156580. * CHWB 
                -109180. * CHD 
                -2125940. * CHl1R11 
                +7206190. * CHl3R11 
                -5148260. * CHl3R22 
                +10850. * CHeR11 
                +5202890. * CllR1221
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.239761; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +8244. * CW 
                +218802. * CHWB 
                -50510. * CHD 
                -25. * CHl1R11 
                -29102. * CHl3R11 
                -29066. * CHl3R22 
                -1041291. * CHeR11 
                +29116. * CllR1221              
                );


    } else if (sqrt_s == 0.380) {

        // LH -------------------------------
        sigmaSMeLHa0 = 40.6204; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -409440. * CW 
                +156620. * CHWB 
                -100050. * CHD 
                -2107634. * CHl1R11 
                +6949930. * CHl3R11 
                -4899610. * CHl3R22 
                +10740. * CHeR11 
                +4954360. * CllR1221
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.216166; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +7126. * CW 
                +207337. * CHWB 
                -45542. * CHD 
                -22. * CHl1R11 
                -26233. * CHl3R11 
                -26217. * CHl3R22 
                -1017531. * CHeR11 
                +26219. * CllR1221             
                );


    } else if (sqrt_s == 0.500) {

        // LH -------------------------------
        sigmaSMeLHa0 = 28.5996; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -294100. * CW 
                +129650. * CHWB 
                -55880. * CHD 
                -1935741. * CHl1R11 
                +5364950. * CHl3R11 
                -3446370. * CHl3R22 
                +9900. * CHeR11 
                +3485060. * CllR1221 
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.107613; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +2564.6 * CW 
                +135799. * CHWB 
                -22683.7 * CHD 
                -4.9 * CHl1R11 
                -13070.6 * CHl3R11 
                -13060.2 * CHl3R22 
                -876943. * CHeR11 
                +13043.6 * CllR1221              
                );


    } else if (sqrt_s == 0.550) {

        // LH -------------------------------
        sigmaSMeLHa0 = 25.1749; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -256296. * CW 
                +118140. * CHWB 
                -44500. * CHD 
                -1867097. * CHl1R11 
                +4896910. * CHl3R11 
                -3031578. * CHl3R22 
                +10830. * CHeR11 
                +3069940. * CllR1221
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.08506; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +1776.7 * CW 
                +115390. * CHWB 
                -17929.8 * CHD 
                +1.1 * CHl1R11 
                -10331. * CHl3R11 
                -10328. * CHl3R22 
                -838703. * CHeR11 
                +10323.6 * CllR1221             
                );


    } else if (sqrt_s == 1.0) {

        // LH -------------------------------
        sigmaSMeLHa0 = 10.6999; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -92382. * CW 
                +49273. * CHWB 
                -10274. * CHD 
                -1580824. * CHl1R11 
                +2884383. * CHl3R11 
                -1285157. * CHl3R22 
                +7857. * CHeR11 
                +1307083. * CllR1221 
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.021453; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +165.5 * CW 
                +38090.4 * CHWB 
                -4524.6 * CHD 
                +0.5 * CHl1R11 
                -2607.1 * CHl3R11 
                -2604.3 * CHl3R22 
                -699201. * CHeR11 
                +2603. * CllR1221             
                );


    } else if (sqrt_s == 1.4) {

        // LH -------------------------------
        sigmaSMeLHa0 = 6.38565; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -48428. * CW 
                +26846. * CHWB 
                -5517. * CHD 
                -1503300. * CHl1R11 
                +2282510. * CHl3R11 
                -766437. * CHl3R22 
                +4723. * CHeR11 
                +779623. * CllR1221
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.010445; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +41.49 * CW 
                +19779.7 * CHWB 
                -2202.72 * CHD 
                +0.64 * CHl1R11 
                -1268.91 * CHl3R11 
                -1267.89 * CHl3R22 
                -667234. * CHeR11 
                +1268.68 * CllR1221             
                );


    } else if (sqrt_s == 1.5) {

        // LH -------------------------------
        sigmaSMeLHa0 = 5.73018; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -42573. * CW 
                +23444. * CHWB 
                -5270. * CHD 
                -1493406. * CHl1R11 
                +2191484. * CHl3R11 
                -688035. * CHl3R22 
                +4044. * CHeR11 
                +699633. * CllR1221
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.009039; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +31.06 * CW 
                +17271.3 * CHWB 
                -1905.96 * CHD 
                +0.61 * CHl1R11 
                -1097.86 * CHl3R11 
                -1097.06 * CHl3R22 
                -662888. * CHeR11 
                +1097.77 * CllR1221              
                );


    } else if (sqrt_s == 3.0) {

        // LH -------------------------------
        sigmaSMeLHa0 = 1.85913; 
 
        sigmaeLHa0 = cWsch * (sigmaSMeLHa0
                -11055.6 * CW 
                +6174.7 * CHWB 
                -1334.5 * CHD 
                -1437804. * CHl1R11 
                +1662016. * CHl3R11 
                -225638. * CHl3R22 
                -109.3 * CHeR11 
                +225706. * CllR1221
                );
        
        // RH -------------------------------
        sigmaSMeRHa0 = 0.002184; 
 
        sigmaeRHa0 = cWsch * (sigmaSMeRHa0
                +1.26 * CW 
                +4369.21 * CHWB 
                -460.56 * CHD 
                +0.24 * CHl1R11 
                -265.13 * CHl3R11 
                -265.06 * CHl3R22 
                -640592. * CHeR11 
                +265.16 * CllR1221             
                );

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeWW()");
    
    // Construct the signal strength
    // Total cross section
    mu = fLR * (sigmaeLHa0) + fRL * (sigmaeRHa0);
    // Normalize to SM
    mu = mu / (fLR * (sigmaSMeLHa0) + fRL * (sigmaSMeRHa0));
    
    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eeeWWint;

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}


////////////////////////////////////////////////////////////////////////

//----- High Energy diboson observables at hadron colliders

const double NPSMEFTd6General::ppZHprobe(const double sqrt_s) const {

    double gpZ = 0.0;

    double ghZuL, ghZdL, ghZuR, ghZdR;

    // In the Warsaw basis the contact interactions are generated only by CHF ops but
    // in the modified basis ODHB, ODHW also contribute

    ghZuL = -(eeMz / sW_tree / cW_tree)*(getSMEFTCoeffEW("CHq1R", 0, 0) - getSMEFTCoeffEW("CHq3R", 0, 0) ) * v2;
    ghZdL = -(eeMz / sW_tree / cW_tree)*(getSMEFTCoeffEW("CHq1R", 0, 0) + getSMEFTCoeffEW("CHq3R", 0, 0) ) * v2;
    ghZuR = -(eeMz / sW_tree / cW_tree)*(getSMEFTCoeffEW("CHuR", 0, 0) ) * v2;
    ghZdR = -(eeMz / sW_tree / cW_tree)*(getSMEFTCoeffEW("CHdR", 0, 0) ) * v2;

    if (sqrt_s == 14.0) {

        gpZ = ghZuL - 0.76 * ghZdL - 0.45 * ghZuR + 0.14 * ghZdR;

    } else if (sqrt_s == 27.0) {
        // Use the same as for 14 TeV for the moment 

        gpZ = ghZuL - 0.76 * ghZdL - 0.45 * ghZuR + 0.14 * ghZdR;

    } else if (sqrt_s == 100.0) {

        gpZ = ghZuL - 0.90 * ghZdL - 0.45 * ghZuR + 0.17 * ghZdR;

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::ppZHprobe()");


    return gpZ;

}

const double NPSMEFTd6General::mupTVppWZ(const double sqrt_s, const double pTV1, const double pTV2) const {
    double mu = 1.0;

    double cHWp = 0.0;

    // In the Warsaw basis the contact interactions are generated only by CiHQ3 but
    // in the modified basis ODHW also contribute
    // Master Equations below are for cHWp = Ci/Lambda^2 in units of TeV^{-2}, 
    // but LambdaNP is in GeV. Add conversion factor.

    cHWp = 4.0 * (sW2_tree / eeMz2) * (getSMEFTCoeffEW("CHq3R", 0, 0) ) * 1000000.0;

    //  Bin dependences assuming cutoff of the EFT at 5 TeV
    //  Normalize to the total number of events to remove the dependence on Lumi
    //  (Numbers correspond to 3/ab)
    if (sqrt_s == 14.0) {

        if (pTV1 == 100.) {
            mu += (558.0 * cHWp + 56.8 * cHWp * cHWp) / 3450.0;

        } else if (pTV1 == 150.) {
            mu += (410.0 * cHWp + 17.64 * cHWp * cHWp) / 2690.0;

        } else if (pTV1 == 220.) {
            
            cHWp = 4.0 * (sW2_tree / eeMz2) * (getSMEFTCoeff("CHq3R", 0, 0, 240.) ) * 1000000.0;
            
            mu += (266.0 * cHWp + 45.6 * cHWp * cHWp) / 925.0;

        } else if (pTV1 == 300.) {
            
            cHWp = 4.0 * (sW2_tree / eeMz2) * (getSMEFTCoeff("CHq3R", 0, 0, 350.) ) * 1000000.0;
            
            mu += (304.0 * cHWp + 108.0 * cHWp * cHWp) / 563.0;

        } else if (pTV1 == 500.) {
            
            cHWp = 4.0 * (sW2_tree / eeMz2) * (getSMEFTCoeff("CHq3R", 0, 0, 550.) ) * 1000000.0;
            
            mu += (114.40 * cHWp + 96.8 * cHWp * cHWp) / 85.1;

        } else if (pTV1 == 750.) {
            
            cHWp = 4.0 * (sW2_tree / eeMz2) * (getSMEFTCoeff("CHq3R", 0, 0, 1000.) ) * 1000000.0;
            
            mu += (46.20 * cHWp + 86.8 * cHWp * cHWp) / 14.9;

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mupTVppWZ()");
        }

    } else if (sqrt_s == 27.0) {

        if (pTV1 == 150.) {
            mu += (824.0 * cHWp + 71.6 * cHWp * cHWp) / 5370.0;

        } else if (pTV1 == 220.) {
            mu += (510.0 * cHWp + 75.2 * cHWp * cHWp) / 2210.0;

        } else if (pTV1 == 300.) {
            mu += (808.0 * cHWp + 268.4 * cHWp * cHWp) / 1610.0;

        } else if (pTV1 == 500.) {
            mu += (374.0 * cHWp + 308.0 * cHWp * cHWp) / 331.0;

        } else if (pTV1 == 750.) {
            mu += (216.0 * cHWp + 420.0 * cHWp * cHWp) / 85.9;

        } else if (pTV1 == 1200.) {
            mu += (78.2 * cHWp + 325.2 * cHWp * cHWp) / 10.0;

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mupTVppWZ()");
        }

    } else if (sqrt_s == 100.0) {

        if (pTV1 == 220.) {
            mu += (2000.0 * cHWp + 368.4 * cHWp * cHWp) / 8030.0;

        } else if (pTV1 == 300.) {
            mu += (2780.0 * cHWp + 1000.0 * cHWp * cHWp) / 7270.0;

        } else if (pTV1 == 500.) {
            mu += (1544.0 * cHWp + 1428.0 * cHWp * cHWp) / 2000.0;

        } else if (pTV1 == 750.) {
            mu += (1256.0 * cHWp + 2668.0 * cHWp * cHWp) / 717.0;

        } else if (pTV1 == 1200.) {
            mu += (678.0 * cHWp + 3400.0 * cHWp * cHWp) / 142.0;

        } else if (pTV1 == 1800.) {
            mu += (234.0 * cHWp + 2540.0 * cHWp * cHWp) / 27.5;

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mupTVppWZ()");
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mupTVppWZ()");

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;

}



////////////////////////////////////////////////////////////////////////


//----- Simplified Template Cross Sections Bins

//----- Stage 0

const double NPSMEFTd6General::STXS0_qqH(const double sqrt_s) const {

    double STXSb = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 13.0) {

        C1 = 0.0064; // Use the same as VBF 

        STXSb +=
                +121687. * getSMEFTCoeffEW("CHbox")
                - 162383. * getSMEFTCoeffEW("CHD")
                + 6933.53 * getSMEFTCoeffEW("CHB")
                + 133459. * getSMEFTCoeffEW("CHW")
                - 286707. * getSMEFTCoeffEW("CHWB")
                - 1929.85 * getSMEFTCoeffEW("CHq1R", 0, 0)
                + 1378.01 * getSMEFTCoeffEW("CHq1R", 1, 1)
                + 2505.13 * getSMEFTCoeffEW("CHq1R", 2, 2)
                + 17471.4 * getSMEFTCoeffEW("CHuR", 0, 0)
                + 532.133 * getSMEFTCoeffEW("CHuR", 1, 1)
                - 6552.85 * getSMEFTCoeffEW("CHdR", 0, 0)
                - 454.364 * getSMEFTCoeffEW("CHdR", 1, 1)
                - 437.319 * getSMEFTCoeffEW("CHdR", 2, 2)
                + 152289. * getSMEFTCoeffEW("CHq3R", 0, 0)
                - 2645.75 * getSMEFTCoeffEW("CHq3R", 1, 1)
                + 2515.78 * getSMEFTCoeffEW("CHq3R", 2, 2)
                - 4.496 * delta_GF
                - 0.084 * deltaGzd6()
                - 2.759 * deltaMwd6()
                - 0.142 * deltaGwd6()
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            STXSb += 0.0;

        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS0_qqH()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    // Use the same as VBF
    STXSb += eVBFint + eVBFpar;

    //  Linear contribution from Higgs self-coupling
    STXSb = STXSb + cLHd6 * deltaH3L1(C1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    STXSb = STXSb + cLHd6 * cLH3d62 * deltaH3L2(C1) * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}


//----- Stage 1
// NOTE: Not our own calculations. From https://twiki.cern.ch/twiki/bin/view/LHCPhysics/STXStoEFT  for HEL calculations
// From Table 3 in ATL-PHYS-PUB-2019-042 for Warsaw basis calculations

const double NPSMEFTd6General::STXS_ggH_VBFtopo_j3v(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 + 56.6 * aiG + 5.5 * ai3G + 4.36 * ai2G;

    return STXSb;
}

const double NPSMEFTd6General::STXS_ggH_VBFtopo_j3(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 + 55.9 * aiG + 9.04 * ai3G + 8.1 * ai2G;

    return STXSb;
}

const double NPSMEFTd6General::STXS_ggH0j(const double sqrt_s) const {

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    //    STXSb = 1.0 + 55.2*aiG + 0.362*ai3G + 0.276*ai2G;

    STXSb += (35.0 * getSMEFTCoeffEW("CHG")) * (1000000.0);

    return STXSb;
}

const double NPSMEFTd6General::STXS_ggH1j_pTH_0_60(const double sqrt_s) const {

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    //    STXSb = 1.0 + 56.0*aiG + 1.52*ai3G + 1.19*ai2G;

    STXSb += (28.3 * getSMEFTCoeffEW("CHG")) * (1000000.0);

    return STXSb;
}

const double NPSMEFTd6General::STXS_ggH1j_pTH_60_120(const double sqrt_s) const {

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    //    STXSb = 1.0 + 55.5*aiG + 4.12*ai3G + 2.76*ai2G;

    STXSb += (26.1 * getSMEFTCoeffEW("CHG")) * (1000000.0);

    return STXSb;
}

const double NPSMEFTd6General::STXS_ggH1j_pTH_120_200(const double sqrt_s) const {

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    //    STXSb = 1.0 + 56.5*aiG + 17.8*ai3G + 11.2*ai2G;

    STXSb += (23.1 * getSMEFTCoeffEW("CHG")) * (1000000.0);

    return STXSb;
}

const double NPSMEFTd6General::STXS_ggH1j_pTH_200(const double sqrt_s) const {

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    //    STXSb = 1.0 + 55.0*aiG + 52.0*ai3G + 34.0*ai2G;

    STXSb += (15.6 * getSMEFTCoeffEW("CHG")) * (1000000.0);

    return STXSb;
}

const double NPSMEFTd6General::STXS_ggH2j_pTH_0_200(const double sqrt_s) const {

    // Warsaw parameterization

    double STXSb = 1.0;

    STXSb = 1.0 + 16.0 * getSMEFTCoeffEW("CHG");

    return STXSb;
}

const double NPSMEFTd6General::STXS_ggH2j_pTH_0_60(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 + 55.6 * aiG + 3.66 * ai3G + 4.23 * ai2G;

    return STXSb;
}

const double NPSMEFTd6General::STXS_ggH2j_pTH_60_120(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 + 56.1 * aiG + 7.73 * ai3G + 6.81 * ai2G;

    return STXSb;
}

const double NPSMEFTd6General::STXS_ggH2j_pTH_120_200(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 + 55.8 * aiG + 23.0 * ai3G + 17.5 * ai2G;

    return STXSb;
}

const double NPSMEFTd6General::STXS_ggH2j_pTH_200(const double sqrt_s) const {

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    //    STXSb = 1.0 + 56.0*aiG + 89.8*ai3G + 68.1*ai2G;

    STXSb += (15.6 * getSMEFTCoeffEW("CHG")) * (1000000.0);

    return STXSb;
}

const double NPSMEFTd6General::STXS_qqHqq_VBFtopo_Rest(const double sqrt_s) const {

    return STXS_qqHqq_Rest(sqrt_s);
}

const double NPSMEFTd6General::STXS_qqHqq_VBFtopo_j3v(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 + 1.256 * aiWW - 0.02319 * aiB - 4.31 * aiHW - 0.2907 * aiHB;

    return STXSb;
}

const double NPSMEFTd6General::STXS_qqHqq_VBFtopo_j3(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 + 1.204 * aiWW - 0.02692 * aiB - 5.76 * aiHW - 0.4058 * aiHB;

    return STXSb;
}

const double NPSMEFTd6General::STXS_qqHqq_nonVHtopo(const double sqrt_s) const {

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    double CiHL3 = getSMEFTCoeffEW("CHl3R", 0, 0);
    double CiHQ1 = getSMEFTCoeffEW("CHq1R", 0, 0), CiHQ3 = getSMEFTCoeffEW("CHq3R", 0, 0), CiHu = getSMEFTCoeffEW("CHuR", 0, 0), CiHd = getSMEFTCoeffEW("CHdR", 0, 0);

    //    STXSb = 1.0 + 1.389*aiWW - 0.0284*aiB - 6.23*aiHW - 0.417*aiHB;

    STXSb += (0.1213 * getSMEFTCoeffEW("CHbox") - 0.0107 * getSMEFTCoeffEW("CHD") - 0.008 * getSMEFTCoeffEW("CHW") + 0.0313 * getSMEFTCoeffEW("CHWB")
            - 0.364 * CiHL3 + 0.0043 * CiHQ1 - 0.212 * CiHQ3 - 0.0108 * CiHu
            + 0.0038 * CiHd + 0.182 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

    return STXSb;
}

const double NPSMEFTd6General::STXS_qqHqq_VHtopo(const double sqrt_s) const {

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    double CiHL3 = getSMEFTCoeffEW("CHl3R", 0, 0);
    double CiHQ1 = getSMEFTCoeffEW("CHq1R", 0, 0), CiHQ3 = getSMEFTCoeffEW("CHq3R", 0, 0), CiHu = getSMEFTCoeffEW("CHuR", 0, 0), CiHd = getSMEFTCoeffEW("CHdR", 0, 0);

    //    STXSb = 1.0 + 1.389*aiWW - 0.0284*aiB - 6.23*aiHW - 0.417*aiHB;

    STXSb += (0.120 * getSMEFTCoeffEW("CHbox") - 0.0071 * getSMEFTCoeffEW("CHD") + 0.623 * getSMEFTCoeffEW("CHW") + 0.0215 * getSMEFTCoeffEW("CHB")
            + 0.098 * getSMEFTCoeffEW("CHWB") - 0.360 * CiHL3 - 0.026 * CiHQ1 + 1.86 * CiHQ3
            + 0.135 * CiHu - 0.0506 * CiHd + 0.181 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

    return STXSb;
}

const double NPSMEFTd6General::STXS_qqHqq_Rest(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 + 1.546 * aiWW - 0.02509 * aiB - 3.631 * aiHW - 0.2361 * aiHB;

    return STXSb;
}

const double NPSMEFTd6General::STXS_qqHqq_pTj_200(const double sqrt_s) const {

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    double CiHL3 = getSMEFTCoeffEW("CHl3R", 0, 0);
    double CiHQ1 = getSMEFTCoeffEW("CHq1R", 0, 0), CiHQ3 = getSMEFTCoeffEW("CHq3R", 0, 0), CiHu = getSMEFTCoeffEW("CHuR", 0, 0), CiHd = getSMEFTCoeffEW("CHdR", 0, 0);

    //    STXSb = 1.0 + 7.82*aiWW - 0.1868*aiB - 30.65*aiHW - 2.371*aiHB;

    STXSb += (0.122 * getSMEFTCoeffEW("CHbox") - 0.0073 * getSMEFTCoeffEW("CHD") - 0.25 * getSMEFTCoeffEW("CHW") + 0.0024 * getSMEFTCoeffEW("CHB")
            + 0.045 * getSMEFTCoeffEW("CHWB") - 0.367 * CiHL3 + 0.030 * CiHQ1 - 0.47 * CiHQ3
            - 0.030 * CiHu + 0.0087 * CiHd + 0.180 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

    return STXSb;
}

const double NPSMEFTd6General::STXS_qqHlv_pTV_0_250(const double sqrt_s) const {

    // Warsaw parameterization

    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    double CiHL3 = getSMEFTCoeffEW("CHl3R", 0, 0);
    double CiHQ3 = getSMEFTCoeffEW("CHq3R", 0, 0);

    STXSb += (0.1212 * getSMEFTCoeffEW("CHbox") - 0.0304 * getSMEFTCoeffEW("CHD") + 0.874 * getSMEFTCoeffEW("CHW")
            - 0.242 * CiHL3 + 1.710 * CiHQ3 + 0.182 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

    return STXSb;
}

const double NPSMEFTd6General::STXS_qqHlv_pTV_0_150(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 1.001 * aiH + 33.63 * aiWW + 11.49 * aiHW + 23.62 * aipHQ + 2.013 * aipHL;

    return STXSb;
}

const double NPSMEFTd6General::STXS_qqHlv_pTV_150_250_0j(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 0.998 * aiH + 76.3 * aiWW + 50.7 * aiHW + 66.5 * aipHQ + 2.03 * aipHL;

    return STXSb;
}

const double NPSMEFTd6General::STXS_qqHlv_pTV_150_250_1j(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 1.006 * aiH + 70.9 * aiWW + 45.5 * aiHW + 60.8 * aipHQ + 2.04 * aipHL;

    return STXSb;
}

const double NPSMEFTd6General::STXS_qqHlv_pTV_250(const double sqrt_s) const {

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    double CiHL3 = getSMEFTCoeffEW("CHl3R", 0, 0);
    double CiHQ3 = getSMEFTCoeffEW("CHq3R", 0, 0);

    //    STXSb = 1.0 - 1.001*aiH + 196.5*aiWW + 169.4*aiHW + 186.3*aipHQ + 2.03*aipHL;

    STXSb += (0.121 * getSMEFTCoeffEW("CHbox") - 0.0299 * getSMEFTCoeffEW("CHD") + 1.06 * getSMEFTCoeffEW("CHW") - 0.237 * CiHL3
            + 10.9 * CiHQ3 + 0.184 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

    return STXSb;
}

const double NPSMEFTd6General::STXS_qqHll_pTV_0_150(const double sqrt_s) const {

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    double CiHL1 = getSMEFTCoeffEW("CHl1R", 0, 0), CiHL3 = getSMEFTCoeffEW("CHl3R", 0, 0), CiHe = getSMEFTCoeffEW("CHeR", 0, 0);
    double CiHQ1 = getSMEFTCoeffEW("CHq1R", 0, 0), CiHQ3 = getSMEFTCoeffEW("CHq3R", 0, 0), CiHu = getSMEFTCoeffEW("CHuR", 0, 0), CiHd = getSMEFTCoeffEW("CHdR", 0, 0);

    //    STXSb = 1.0 - 1.0*aiH - 4.001*aiT + 29.82*aiWW + 8.43*aiB + 8.5*aiHW 
    //            + 2.545*aiHB + 0.0315*aiA - 1.89*aiHQ + 22.84*aipHQ + 5.247*aiHu 
    //            - 2.0*aiHd - 0.963*aiHL + 2.042*aipHL - 0.2307*aiHe;

    STXSb += (0.1218 * getSMEFTCoeffEW("CHbox") + 0.0259 * getSMEFTCoeffEW("CHD") + 0.696 * getSMEFTCoeffEW("CHW") + 0.0846 * getSMEFTCoeffEW("CHB")
            + 0.328 * getSMEFTCoeffEW("CHWB") + 0.1332 * CiHL1 - 0.231 * CiHL3 - 0.1076 * CiHe
            + 0.016 * CiHQ1 + 1.409 * CiHQ3 + 0.315 * CiHu - 0.1294 * CiHd
            + 0.182 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

    return STXSb;
}

const double NPSMEFTd6General::STXS_qqHll_pTV_150_250(const double sqrt_s) const {

    // Warsaw parameterization

    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    double CiHL1 = getSMEFTCoeffEW("CHl1R", 0, 0), CiHL3 = getSMEFTCoeffEW("CHl3R", 0, 0), CiHe = getSMEFTCoeffEW("CHeR", 0, 0);
    double CiHQ1 = getSMEFTCoeffEW("CHq1R", 0, 0), CiHQ3 = getSMEFTCoeffEW("CHq3R", 0, 0), CiHu = getSMEFTCoeffEW("CHuR", 0, 0), CiHd = getSMEFTCoeffEW("CHdR", 0, 0);


    STXSb += (0.124 * getSMEFTCoeffEW("CHbox") + 0.026 * getSMEFTCoeffEW("CHD") + 0.85 * getSMEFTCoeffEW("CHW") + 0.102 * getSMEFTCoeffEW("CHB")
            + 0.389 * getSMEFTCoeffEW("CHWB") + 0.134 * CiHL1 - 0.232 * CiHL3 - 0.109 * CiHe
            - 0.16 * CiHQ1 + 3.56 * CiHQ3 + 0.85 * CiHu - 0.315 * CiHd
            + 0.184 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

    return STXSb;
}

const double NPSMEFTd6General::STXS_qqHll_pTV_150_250_0j(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 0.993 * aiH - 4.0 * aiT + 62.4 * aiWW + 18.08 * aiB + 37.6 * aiHW
            + 11.22 * aiHB - 5.03 * aiHQ + 61.0 * aipHQ + 14.39 * aiHu - 5.17 * aiHd
            - 0.977 * aiHL + 2.08 * aipHL - 0.234 * aiHe;

    return STXSb;
}

const double NPSMEFTd6General::STXS_qqHll_pTV_150_250_1j(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 1.002 * aiH - 4.01 * aiT + 57.9 * aiWW + 16.78 * aiB + 32.8 * aiHW
            + 9.86 * aiHB - 4.58 * aiHQ + 55.6 * aipHQ + 13.54 * aiHu - 4.56 * aiHd
            - 0.989 * aiHL + 2.09 * aipHL - 0.235 * aiHe;

    return STXSb;
}

const double NPSMEFTd6General::STXS_qqHll_pTV_250(const double sqrt_s) const {

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    double CiHL1 = getSMEFTCoeffEW("CHl1R", 0, 0), CiHL3 = getSMEFTCoeffEW("CHl3R", 0, 0), CiHe = getSMEFTCoeffEW("CHeR", 0, 0);
    double CiHQ1 = getSMEFTCoeffEW("CHq1R", 0, 0), CiHQ3 = getSMEFTCoeffEW("CHq3R", 0, 0), CiHu = getSMEFTCoeffEW("CHuR", 0, 0), CiHd = getSMEFTCoeffEW("CHdR", 0, 0);

    //    STXSb = 1.0 - 0.998*aiH - 4.0*aiT + 153.1*aiWW + 45.6*aiB + 126.4*aiHW 
    //            + 37.9*aiHB - 13.85*aiHQ + 168.6*aipHQ + 41.7*aiHu - 13.48*aiHd 
    //            - 0.977*aiHL + 2.09*aipHL - 0.238*aiHe;

    STXSb += (0.122 * getSMEFTCoeffEW("CHbox") + 0.028 * getSMEFTCoeffEW("CHD") + 0.88 * getSMEFTCoeffEW("CHW") + 0.121 * getSMEFTCoeffEW("CHB")
            + 0.43 * getSMEFTCoeffEW("CHWB") + 0.137 * CiHL1 - 0.234 * CiHL3 - 0.113 * CiHe
            - 0.82 * CiHQ1 + 8.5 * CiHQ3 + 2.14 * CiHu - 0.71 * CiHd
            + 0.182 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

    return STXSb;
}

const double NPSMEFTd6General::STXS_ttHtH(const double sqrt_s) const {

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    double CiHL3 = getSMEFTCoeffEW("CHl3R", 0, 0);
    double CiHQ3 = getSMEFTCoeffEW("CHq3R", 0, 0);

    //  Set 4 quark operators to zero for the moment.
    double Cqq1 = 0.0, Cqq11 = 0.0, Cqq3 = 0.0, Cqq31 = 0.0;
    double Cuu = 0.0, Cuu1 = 0.0, Cud1 = 0.0, Cud8 = 0.0;
    double Cqu1 = 0.0, Cqu8 = 0.0, Cqd1 = 0.0, Cqd8 = 0.0;

    //    STXSb = 1.0 - 0.983*aiH + 2.949*aiu + 0.928*aiG + 313.6*aiuG 
    //            + 27.48*ai3G - 13.09*ai2G;

    STXSb += (0.133 * getSMEFTCoeffEW("CG") + 0.1182 * getSMEFTCoeffEW("CHbox") - 0.0296 * getSMEFTCoeffEW("CHD") + 0.532 * getSMEFTCoeffEW("CHG")
            + 0.0120 * getSMEFTCoeffEW("CHW") - 0.1152 * getSMEFTCoeffEW("CuHR", 2, 2) - 0.790 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.0111 * getSMEFTCoeffEW("CuWR", 2, 2)
            - 0.0017 * getSMEFTCoeffEW("CuBR", 2, 2) - 0.1320 * CiHL3 + 0.0146 * CiHQ3
            + 0.0660 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0) + 0.0218 * Cqq1 + 0.1601 * Cqq11 + 0.0263 * Cqq3
            + 0.388 * Cqq31 + 0.0114 * Cuu + 0.1681 * Cuu1 - 0.0018 * Cud1
            + 0.0265 * Cud8 + 0.007 * Cqu1 + 0.1087 * Cqu8
            - 0.0011 * Cqd1 + 0.0266 * Cqd8) * (1000000.0);

    return STXSb;
}

const double NPSMEFTd6General::STXS_WHqqHqq_VBFtopo_j3v(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 0.94 * aiH + 39.5 * aiWW + 13.8 * aiHW + 32.1 * aipHQ;

    return STXSb;
}

const double NPSMEFTd6General::STXS_WHqqHqq_VBFtopo_j3(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 1.04 * aiH + 44.9 * aiWW + 20.3 * aiHW + 36.8 * aipHQ;

    return STXSb;
}

const double NPSMEFTd6General::STXS_WHqqHqq_VH2j(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 0.996 * aiH + 45.57 * aiWW + 23.66 * aiHW + 37.55 * aipHQ;

    return STXSb;
}

const double NPSMEFTd6General::STXS_WHqqHqq_Rest(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 1.002 * aiH + 34.29 * aiWW + 11.56 * aiHW + 26.27 * aipHQ;

    return STXSb;
}

const double NPSMEFTd6General::STXS_WHqqHqq_pTj1_200(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 1.003 * aiH + 181.2 * aiWW + 152.3 * aiHW + 173.7 * aipHQ;

    return STXSb;
}

const double NPSMEFTd6General::STXS_ZHqqHqq_VBFtopo_j3v(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 0.94 * aiH - 4.0 * aiT + 34.8 * aiWW + 10.0 * aiB + 9.9 * aiHW
            + 3.04 * aiHB - 2.14 * aiHQ + 31.1 * aipHQ + 7.6 * aiHu - 2.59 * aiHd;

    return STXSb;
}

const double NPSMEFTd6General::STXS_ZHqqHqq_VBFtopo_j3(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 0.97 * aiH - 3.98 * aiT + 38.1 * aiWW + 10.5 * aiB + 14.2 * aiHW
            + 4.15 * aiHB - 2.36 * aiHQ + 34.5 * aipHQ + 8.4 * aiHu - 2.79 * aiHd;

    return STXSb;
}

const double NPSMEFTd6General::STXS_ZHqqHqq_VH2j(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 0.998 * aiH - 4.002 * aiT + 37.99 * aiWW + 10.47 * aiB + 16.45 * aiHW
            + 4.927 * aiHB - 2.401 * aiHQ + 34.45 * aipHQ + 7.94 * aiHu - 2.993 * aiHd;

    return STXSb;
}

const double NPSMEFTd6General::STXS_ZHqqHqq_Rest(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 1.001 * aiH - 3.998 * aiT + 30.89 * aiWW + 8.35 * aiB + 8.71 * aiHW
            + 2.616 * aiHB - 1.782 * aiHQ + 26.1 * aipHQ + 5.942 * aiHu - 2.305 * aiHd;

    return STXSb;
}

const double NPSMEFTd6General::STXS_ZHqqHqq_pTj1_200(const double sqrt_s) const {

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 1.003 * aiH - 4.03 * aiT + 141.5 * aiWW + 41.6 * aiB + 112.5 * aiHW
            + 33.6 * aiHB - 11.52 * aiHQ + 156.2 * aipHQ + 38.9 * aiHu - 12.53 * aiHd;

    return STXSb;
}


//----- Stage 1.2
// NOTE: Not our own calculations.
// From Appendix A in ATLAS-CONF-2020-053 
// Warsaw basis calculations in {GF,MW,MZ} scheme, assuming U(3)^5 symmetry

const double NPSMEFTd6General::STXS12_BrH4lRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiTotR1 = 0.0;

    // To be fixed together with the UFO file when going beyond U(2)
    // 4l
    dGHiR1 = (0.12 * getSMEFTCoeffEW("CHbox") + 0.005 * getSMEFTCoeffEW("CHD") - 0.296 * getSMEFTCoeffEW("CHW") - 0.197 * getSMEFTCoeffEW("CHB") + 0.296 * getSMEFTCoeffEW("CHWB")
            + 0.126 * (getSMEFTCoeffEW("CHl1R", 0, 0) + getSMEFTCoeffEW("CHl1R", 1, 1)) / 2.0 - 0.234 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1)) / 2.0
            - 0.101 * (getSMEFTCoeffEW("CHeR", 0, 0) + getSMEFTCoeffEW("CHeR", 1, 1)) / 2.0 + 0.181 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

    // Tot
    dGHiTotR1 = (-0.001 * getSMEFTCoeffEW("CW") + 0.12 * getSMEFTCoeffEW("CHbox") - 0.030 * getSMEFTCoeffEW("CHD") + 1.362 * getSMEFTCoeffEW("CHG") - 0.048 * getSMEFTCoeffEW("CHW")
            - 0.049 * getSMEFTCoeffEW("CHB") + 0.046 * getSMEFTCoeffEW("CHWB") - 0.005 * getSMEFTCoeffEW("CeHR", 2, 2) - 0.012 * getSMEFTCoeffEW("CuHR", 2, 2) - 0.085 * getSMEFTCoeffEW("CdHR", 2, 2)
            + 0.051 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.002 * getSMEFTCoeffEW("CuWR", 2, 2) - 0.003 * getSMEFTCoeffEW("CuBR", 2, 2)
            - 0.150 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1) + getSMEFTCoeffEW("CHl3R", 2, 2)) / 3.0 + 0.013 * (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0
            + 0.079 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

    Br += dGHiR1 - dGHiTotR1;

    if ((Br < 0) || (dGHiR1 < -1.0) || (dGHiTotR1 < -1.0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::STXS12_BrHevmuvRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiTotR1 = 0.0;

    // To be fixed together with the UFO file when going beyond U(2)

    // e v mu v
    dGHiR1 = deltaGammaHevmuvRatio1();

    // Tot
    dGHiTotR1 = (-0.001 * getSMEFTCoeffEW("CW") + 0.12 * getSMEFTCoeffEW("CHbox") - 0.030 * getSMEFTCoeffEW("CHD") + 1.362 * getSMEFTCoeffEW("CHG") - 0.048 * getSMEFTCoeffEW("CHW")
            - 0.049 * getSMEFTCoeffEW("CHB") + 0.046 * getSMEFTCoeffEW("CHWB") - 0.005 * getSMEFTCoeffEW("CeHR", 2, 2) - 0.012 * getSMEFTCoeffEW("CuHR", 2, 2) - 0.085 * getSMEFTCoeffEW("CdHR", 2, 2)
            + 0.051 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.002 * getSMEFTCoeffEW("CuWR", 2, 2) - 0.003 * getSMEFTCoeffEW("CuBR", 2, 2)
            - 0.150 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1) + getSMEFTCoeffEW("CHl3R", 2, 2)) / 3.0 + 0.013 * (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0
            + 0.079 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

    Br += dGHiR1 - dGHiTotR1;

    if ((Br < 0) || (dGHiR1 < -1.0) || (dGHiTotR1 < -1.0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::STXS12_BrHgagaRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiTotR1 = 0.0;

    // To be fixed together with the UFO file when going beyond U(2)
    // gaga
    dGHiR1 = (-40.15 * getSMEFTCoeffEW("CHB") - 13.08 * getSMEFTCoeffEW("CHW") + 22.4 * getSMEFTCoeffEW("CHWB") - 0.9463 * getSMEFTCoeffEW("CW") + 0.12 * getSMEFTCoeffEW("CHbox")
            - 0.2417 * getSMEFTCoeffEW("CHD") + 0.03447 * getSMEFTCoeffEW("CuHR", 2, 2) - 1.151 * getSMEFTCoeffEW("CuWR", 2, 2) - 2.150 * getSMEFTCoeffEW("CuBR", 2, 2)
            - 0.3637 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1)) / 2.0 + 0.1819 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);
    ;

    // Tot
    dGHiTotR1 = (-0.001 * getSMEFTCoeffEW("CW") + 0.12 * getSMEFTCoeffEW("CHbox") - 0.030 * getSMEFTCoeffEW("CHD") + 1.362 * getSMEFTCoeffEW("CHG") - 0.048 * getSMEFTCoeffEW("CHW")
            - 0.049 * getSMEFTCoeffEW("CHB") + 0.046 * getSMEFTCoeffEW("CHWB") - 0.005 * getSMEFTCoeffEW("CeHR", 2, 2) - 0.012 * getSMEFTCoeffEW("CuHR", 2, 2) - 0.085 * getSMEFTCoeffEW("CdHR", 2, 2)
            + 0.051 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.002 * getSMEFTCoeffEW("CuWR", 2, 2) - 0.003 * getSMEFTCoeffEW("CuBR", 2, 2)
            - 0.150 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1) + getSMEFTCoeffEW("CHl3R", 2, 2)) / 3.0 + 0.013 * (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0
            + 0.079 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

    Br += dGHiR1 - dGHiTotR1;

    if ((Br < 0) || (dGHiR1 < -1.0) || (dGHiTotR1 < -1.0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::STXS12_BrHbbRatio() const {
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiTotR1 = 0.0;

    // To be fixed together with the UFO file when going beyond U(2)

    // bb
    dGHiR1 = (0.12 * getSMEFTCoeffEW("CHbox") - 0.030 * getSMEFTCoeffEW("CHD") - 0.121 * getSMEFTCoeffEW("CdHR", 2, 2) - 0.121 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1)) / 2.0
            + 0.061 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

    // Tot
    dGHiTotR1 = (-0.001 * getSMEFTCoeffEW("CW") + 0.12 * getSMEFTCoeffEW("CHbox") - 0.030 * getSMEFTCoeffEW("CHD") + 1.362 * getSMEFTCoeffEW("CHG") - 0.048 * getSMEFTCoeffEW("CHW")
            - 0.049 * getSMEFTCoeffEW("CHB") + 0.046 * getSMEFTCoeffEW("CHWB") - 0.005 * getSMEFTCoeffEW("CeHR", 2, 2) - 0.012 * getSMEFTCoeffEW("CuHR", 2, 2) - 0.085 * getSMEFTCoeffEW("CdHR", 2, 2)
            + 0.051 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.002 * getSMEFTCoeffEW("CuWR", 2, 2) - 0.003 * getSMEFTCoeffEW("CuBR", 2, 2)
            - 0.150 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1) + getSMEFTCoeffEW("CHl3R", 2, 2)) / 3.0 + 0.013 * (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0
            + 0.079 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

    Br += dGHiR1 - dGHiTotR1;

    if ((Br < 0) || (dGHiR1 < -1.0) || (dGHiTotR1 < -1.0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

const double NPSMEFTd6General::STXS12_ggH_pTH200_300_Nj01(const double sqrt_s) const {
    // To be fixed together with the UFO file when going beyond U(2)

    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.030 * getSMEFTCoeffEW("CHD") + 47 * getSMEFTCoeffEW("CHG") - 0.122 * getSMEFTCoeffEW("CuHR", 2, 2)
                - 1.69 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.120 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.058 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH200_300_Nj01()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ggH_pTH300_450_Nj01(const double sqrt_s) const {

    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.029 * getSMEFTCoeffEW("CHD") + 60 * getSMEFTCoeffEW("CHG") - 0.12 * getSMEFTCoeffEW("CuHR", 2, 2)
                - 2.1 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.11 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.055 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH300_450_Nj01()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ggH_pTH450_650_Nj01(const double sqrt_s) const {
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.030 * getSMEFTCoeffEW("CHD") + 70 * getSMEFTCoeffEW("CHG") - 0.14 * getSMEFTCoeffEW("CuHR", 2, 2)
                - 2. * getSMEFTCoeffEW("CuGR", 2, 2) - 0.13 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.07 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH450_650_Nj01()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ggH_pTH650_Inf_Nj01(const double sqrt_s) const {

    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.02 * getSMEFTCoeffEW("CHD") + 200 * getSMEFTCoeffEW("CHG") - 0.05 * getSMEFTCoeffEW("CuHR", 2, 2)
                - 10 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.07 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.06 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH650_Inf_Nj01()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}


//VM: How was this obtained without parton shower???
const double NPSMEFTd6General::STXS12_ggH_pTH0_10_Nj0(const double sqrt_s) const //AG:modified
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        // To be fixed together with the UFO file when going beyond U(2)
        /*STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.0294 * getSMEFTCoeffEW("CHD") + 42.0 * getSMEFTCoeffEW("CHG") - 0.117 * getSMEFTCoeffEW("CuHR", 2, 2)
                - 1.59 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.117 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.0587 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);*/
        //AG: Obtained with SMEFETatNLO.
        // cuG_Warsaw = g3_tree*cuG_SMEFTatNLO
        STXSb += cWsch * (
                ((0.12127490039840637) * getSMEFTCoeffEW("CHbox")
                + (-0.030326693227091632) * getSMEFTCoeffEW("CHD")
                + (39.28731544) * getSMEFTCoeffEW("CHG")
                + (-0.12254980079681274) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (1.1274900398406373) * getSMEFTCoeffEW("CuGR", 2, 2) * g3_tree
                + (-0.060669322709163344) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.060669322709163344) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.06064541832669322) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH0_10_Nj0()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}




const double NPSMEFTd6General::STXS12_ggH_pTH10_200_Nj0(const double sqrt_s) const 
{
    
    //NOT PROPERLY IMPLEMENTED, RETURNING A NaN
    return std::numeric_limits<double>::quiet_NaN();
    
    double STXSb = 1.0;
    
    if (sqrt_s == 13.0) {

        
        
        STXSb += cWsch * (
                (0.) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH10_200_Nj0()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}







const double NPSMEFTd6General::STXS12_ggH_pTH200_300(const double sqrt_s) const 
{
    
    //NOT PROPERLY IMPLEMENTED, RETURNING A NaN
    return std::numeric_limits<double>::quiet_NaN();
    
    double STXSb = 1.0;
    
    if (sqrt_s == 13.0) {

        
        
        STXSb += cWsch * (
                (0.) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH200_300()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}





const double NPSMEFTd6General::STXS12_ggH_pTH300_450(const double sqrt_s) const 
{
    
    //NOT PROPERLY IMPLEMENTED, RETURNING A NaN
    return std::numeric_limits<double>::quiet_NaN();
    
    double STXSb = 1.0;
    
    if (sqrt_s == 13.0) {

        
        
        STXSb += cWsch * (
                (0.) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH300_450()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}





const double NPSMEFTd6General::STXS12_ggH_pTH450_Inf(const double sqrt_s) const 
{
    
    //NOT PROPERLY IMPLEMENTED, RETURNING A NaN
    return std::numeric_limits<double>::quiet_NaN();
    
    double STXSb = 1.0;
    
    if (sqrt_s == 13.0) {

        
        
        STXSb += cWsch * (
                (0.) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH450_Inf()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}





const double NPSMEFTd6General::STXS12_ggH_pTH450_650(const double sqrt_s) const 
{
    
    //NOT PROPERLY IMPLEMENTED, RETURNING A NaN
    return std::numeric_limits<double>::quiet_NaN();
    
    double STXSb = 1.0;
    
    if (sqrt_s == 13.0) {

        
        
        STXSb += cWsch * (
                (0.) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH450_650()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}





const double NPSMEFTd6General::STXS12_ggH_pTH650_Inf(const double sqrt_s) const 
{
    
    //NOT PROPERLY IMPLEMENTED, RETURNING A NaN
    return std::numeric_limits<double>::quiet_NaN();
    
    double STXSb = 1.0;
    
    if (sqrt_s == 13.0) {

        
        
        STXSb += cWsch * (
                (0.) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH650_Inf()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}






const double NPSMEFTd6General::STXS12_ggH_pTH10_Inf_Nj0(const double sqrt_s) const {

    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.0295 * getSMEFTCoeffEW("CHD") + 42.2 * getSMEFTCoeffEW("CHG") - 0.1186 * getSMEFTCoeffEW("CuHR", 2, 2)
                - 1.62 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.1182 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.0590 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH10_Inf_Nj0()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}




const double NPSMEFTd6General::STXS12_ggH_mjj0_350_pTH0_60_Nj1(const double sqrt_s) const 
{
    
    //NOT PROPERLY IMPLEMENTED, RETURNING A NaN
    return std::numeric_limits<double>::quiet_NaN();
    
    double STXSb = 1.0;
    
    if (sqrt_s == 13.0) {

        
        
        STXSb += cWsch * (
                (0.) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH200_300()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}





const double NPSMEFTd6General::STXS12_ggH_pTH0_60_Nj1(const double sqrt_s) const //AG:modified
{

    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        // To be fixed together with the UFO file when going beyond U(2)
        /*STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.0330 * getSMEFTCoeffEW("CHD") + 44.0 * getSMEFTCoeffEW("CHG") - 0.132 * getSMEFTCoeffEW("CuHR", 2, 2)
                - 1.60 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.132 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.065 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);*/

        //AG: 
        // Obtained with SMEFETatNLO. cuG_Warsaw = g3_tree*cuG_SMEFTatNLO
        //pTj>30GeV
        STXSb += cWsch * (
                ((0.12123683316343867) * getSMEFTCoeffEW("CHbox")
                + (-0.030312606184165817) * getSMEFTCoeffEW("CHD")
                + (39.36687385) * getSMEFTCoeffEW("CHG")
                + (-0.12249405368671423) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (1.126741420319402) * getSMEFTCoeffEW("CuGR", 2, 2) * g3_tree
                + (-0.060618416581719334) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.060618416581719334) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.060618416581719334) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );
        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH0_60_Nj1()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ggH_pTH60_120_Nj1(const double sqrt_s) const //AG:modified
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        // To be fixed together with the UFO file when going beyond U(2)
        /*STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.0314 * getSMEFTCoeffEW("CHD") + 43.5 * getSMEFTCoeffEW("CHG") - 0.125 * getSMEFTCoeffEW("CuHR", 2, 2)
                - 1.58 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.125 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.063 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);*/
        //AG:
        // Obtained with SMEFETatNLO. cuG_Warsaw = g3_tree*cuG_SMEFTatNLO
        //pTj>30GeV
        STXSb += cWsch * (
                ((0.12123503465658475) * getSMEFTCoeffEW("CHbox")
                + (-0.030315059861373662) * getSMEFTCoeffEW("CHD")
                + (39.68515459) * getSMEFTCoeffEW("CHG")
                + (-0.12249527410207939) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (1.119722747321991) * getSMEFTCoeffEW("CuGR", 2, 2) * g3_tree
                + (-0.060636420919974794) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.060636420919974794) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.060636420919974794) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH60_120_Nj1()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ggH_pTH120_200_Nj1(const double sqrt_s) const //AG:modified
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        // To be fixed together with the UFO file when going beyond U(2)
        /*STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.028 * getSMEFTCoeffEW("CHD") + 44 * getSMEFTCoeffEW("CHG") - 0.118 * getSMEFTCoeffEW("CuHR", 2, 2)
                - 1.60 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.112 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.058 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);*/
        // AG: 
        // Obtained with SMEFETatNLO. cuG_Warsaw = g3_tree*cuG_SMEFTatNLO
        //pTj>30GeV
        STXSb += cWsch * (
                ((0.12123076923076923) * getSMEFTCoeffEW("CHbox")
                + (-0.030307692307692306) * getSMEFTCoeffEW("CHD")
                + (40.11053009) * getSMEFTCoeffEW("CHG")
                + (-0.12248076923076923) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (1.115576923076923) * getSMEFTCoeffEW("CuGR", 2, 2) * g3_tree
                + (-0.06061538461538461) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.06061538461538461) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.06061538461538461) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH120_200_Nj1()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ggH_mjj0_350_pTH0_60_Nj2(const double sqrt_s) const //AG:modified
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        // To be fixed together with the UFO file when going beyond U(2)
        /*STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.033 * getSMEFTCoeffEW("CHD") + 46 * getSMEFTCoeffEW("CHG") - 0.128 * getSMEFTCoeffEW("CuHR", 2, 2)
                - 1.63 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.132 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.065 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);*/
        //AG:
        // Obtained with SMEFETatNLO. cuG_Warsaw = g3_tree*cuG_SMEFTatNLO
        //pTj>30GeV
        STXSb += cWsch * (
                ((0.12117552334943638) * getSMEFTCoeffEW("CHbox")
                + (-0.03036231884057971) * getSMEFTCoeffEW("CHD")
                + (39.3) * getSMEFTCoeffEW("CHG") //To be updated
                + (-0.12262479871175523) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (1.0990338164251208) * getSMEFTCoeffEW("CuGR", 2, 2) * g3_tree
                + (-0.060708534621578096) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.060708534621578096) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.06058776167471819) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_mjj0_350_pTH0_60_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ggH_mjj0_350_pTH60_120_Nj2(const double sqrt_s) const //AG:modified
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        // To be fixed together with the UFO file when going beyond U(2)
        /*STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.033 * getSMEFTCoeffEW("CHD") + 47 * getSMEFTCoeffEW("CHG") - 0.133 * getSMEFTCoeffEW("CuHR", 2, 2)
                - 1.59 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.130 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.065 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);*/

        //AG:
        // Obtained with SMEFETatNLO. cuG_Warsaw = g3_tree*cuG_SMEFTatNLO
        //pTj>30GeV
        STXSb += cWsch * (
                ((0.121) * getSMEFTCoeffEW("CHbox")
                + (-0.0303) * getSMEFTCoeffEW("CHD")
                + (39.3) * getSMEFTCoeffEW("CHG") //To be updated
                + (-0.1224) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (1.093) * getSMEFTCoeffEW("CuGR", 2, 2) * g3_tree
                + (-0.0606) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0606) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.061) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_mjj0_350_pTH60_120_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ggH_mjj0_350_pTH120_200_Nj2(const double sqrt_s) const //AG:modified
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        // To be fixed together with the UFO file when going beyond U(2)
        /*STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.032 * getSMEFTCoeffEW("CHD") + 46 * getSMEFTCoeffEW("CHG") - 0.132 * getSMEFTCoeffEW("CuHR", 2, 2)
                - 1.48 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.130 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.066 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);*/
        // AG: 
        // Obtained with SMEFETatNLO. cuG_Warsaw = g3_tree*cuG_SMEFTatNLO
        //pTj>30GeV
        STXSb += cWsch * (
                ((0.121) * getSMEFTCoeffEW("CHbox")
                + (-0.0303) * getSMEFTCoeffEW("CHD")
                + (39.3) * getSMEFTCoeffEW("CHG") //To be updated
                + (-0.123) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (1.077) * getSMEFTCoeffEW("CuGR", 2, 2) * g3_tree
                + (-0.061) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.061) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.061) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_mjj0_350_pTH120_200_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ggH_mjj350_700_pTH0_200_ptHjj0_25_Nj2(const double sqrt_s) const {
    
    //NOT PROPERLY IMPLEMENTED, RETURNING A NaN
    return std::numeric_limits<double>::quiet_NaN();
    
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.038 * getSMEFTCoeffEW("CHD") + 48 * getSMEFTCoeffEW("CHG") - 0.16 * getSMEFTCoeffEW("CuHR", 2, 2)
                - 1.60 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.147 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.075 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_mjj350_700_pTH0_200_ptHjj0_25_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ggH_mjj350_700_pTH0_200_ptHjj25_Inf_Nj2(const double sqrt_s) const {
    
    
    //NOT PROPERLY IMPLEMENTED, RETURNING A NaN
    return std::numeric_limits<double>::quiet_NaN();
    
    
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.033 * getSMEFTCoeffEW("CHD") + 42 * getSMEFTCoeffEW("CHG") - 0.131 * getSMEFTCoeffEW("CuHR", 2, 2)
                - 1.43 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.124 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.064 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_mjj350_700_pTH0_200_ptHjj25_Inf_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ggH_mjj700_Inf_pTH0_200_ptHjj0_25_Nj2(const double sqrt_s) const {
    
    //NOT PROPERLY IMPLEMENTED, RETURNING A NaN
    return std::numeric_limits<double>::quiet_NaN();
    
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.033 * getSMEFTCoeffEW("CHD") + 50 * getSMEFTCoeffEW("CHG") - 0.14 * getSMEFTCoeffEW("CuHR", 2, 2)
                - 1.60 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.13 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.068 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_mjj700_Inf_pTH0_200_ptHjj0_25_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}




const double NPSMEFTd6General::STXS12_ggH_mjj700_Inf_pTH0_200_ptHjj25_Inf_Nj2(const double sqrt_s) const {
    
    //NOT PROPERLY IMPLEMENTED, RETURNING A NaN
    return std::numeric_limits<double>::quiet_NaN();
    
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.030 * getSMEFTCoeffEW("CHD") + 44 * getSMEFTCoeffEW("CHG") - 0.13 * getSMEFTCoeffEW("CuHR", 2, 2)
                - 1.4 * getSMEFTCoeffEW("CuGR", 2, 2) - 0.13 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.061 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_mjj700_Inf_pTH0_200_ptHjj25_Inf_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ggH_mjj350_700_pTH0_200_Nj2(const double sqrt_s) const //AG:added
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        // Obtained with SMEFETatNLO. cuG_Warsaw = g3_tree*cuG_SMEFTatNLO
        //pTj>30GeV
        STXSb += cWsch * (
                ((0.12121771217712178) * getSMEFTCoeffEW("CHbox")
                + (-0.030401291512915127) * getSMEFTCoeffEW("CHD")
                + (39.3) * getSMEFTCoeffEW("CHG") //To be updated
                + (-0.12283210332103321) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (0.992158671586716) * getSMEFTCoeffEW("CuGR", 2, 2) * g3_tree
                + (-0.06079335793357934) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.06079335793357934) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.06060885608856089) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_mjj350_700_pTH0_200_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ggH_mjj700_Inf_pTH0_200_Nj2(const double sqrt_s) const //AG:added
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        // Obtained with SMEFETatNLO. cuG_Warsaw = g3_tree*cuG_SMEFTatNLO
        //pTj>30GeV
        STXSb += cWsch * (
                ((0.12123629112662014) * getSMEFTCoeffEW("CHbox")
                + (-0.030348953140578262) * getSMEFTCoeffEW("CHD")
                + (39.3) * getSMEFTCoeffEW("CHG") //To be updated
                + (-0.12263210368893321) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (0.9950149551345963) * getSMEFTCoeffEW("CuGR", 2, 2) * g3_tree
                + (-0.060697906281156525) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.060697906281156525) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.006083) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_mjj700_Inf_pTH0_200_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ggHll_pTV0_75(const double sqrt_s) const {
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (getSMEFTCoeffEW("CHq1R", 0, 0) + getSMEFTCoeffEW("CHq1R", 1, 1) + getSMEFTCoeffEW("CHq1R", 2, 2)) / 3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.0057 * getSMEFTCoeffEW("CHD") + 0.0090 * getSMEFTCoeffEW("CHWB")
                + 0.0454 * getSMEFTCoeffEW("CuHR", 2, 2) - 0.309 * getSMEFTCoeffEW("CuGR", 2, 2)
                - 0.0102 * 0.5 * (getSMEFTCoeffEW("CHl1R", 0, 0) + getSMEFTCoeffEW("CHl1R", 1, 1) - getSMEFTCoeffEW("CHl3R", 0, 0) - getSMEFTCoeffEW("CHl3R", 1, 1))
                - 0.2932 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                - 0.0231 * 0.5 * (getSMEFTCoeffEW("CHeR", 0, 0) + getSMEFTCoeffEW("CHeR", 1, 1)) - 0.827 * CiHQ1
                - 0.289 * CiHQ3
                + 0.246 * CiHu + 0.296 * CiHd
                + 0.218 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggHll_pTV0_75()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ggHll_pTV75_150(const double sqrt_s) const {
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (getSMEFTCoeffEW("CHq1R", 0, 0) + getSMEFTCoeffEW("CHq1R", 1, 1) + getSMEFTCoeffEW("CHq1R", 2, 2)) / 3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.0015 * getSMEFTCoeffEW("CHD") + 0.0088 * getSMEFTCoeffEW("CHWB")
                + 0.0542 * getSMEFTCoeffEW("CuHR", 2, 2) - 0.387 * getSMEFTCoeffEW("CuGR", 2, 2)
                - 0.0103 * 0.5 * (getSMEFTCoeffEW("CHl1R", 0, 0) + getSMEFTCoeffEW("CHl1R", 1, 1) - getSMEFTCoeffEW("CHl3R", 0, 0) - getSMEFTCoeffEW("CHl3R", 1, 1))
                - 0.2943 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                - 0.0235 * 0.5 * (getSMEFTCoeffEW("CHeR", 0, 0) + getSMEFTCoeffEW("CHeR", 1, 1)) - 0.698 * CiHQ1
                - 0.250 * CiHQ3
                + 0.199 * CiHu + 0.257 * CiHd
                + 0.220 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggHll_pTV75_150()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ggHll_pTV150_250_Nj0(const double sqrt_s) const {
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (getSMEFTCoeffEW("CHq1R", 0, 0) + getSMEFTCoeffEW("CHq1R", 1, 1) + getSMEFTCoeffEW("CHq1R", 2, 2)) / 3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") + 0.020 * getSMEFTCoeffEW("CHD") + 0.008 * getSMEFTCoeffEW("CHWB")
                + 0.100 * getSMEFTCoeffEW("CuHR", 2, 2) - 0.539 * getSMEFTCoeffEW("CuGR", 2, 2)
                - 0.0104 * 0.5 * (getSMEFTCoeffEW("CHl1R", 0, 0) + getSMEFTCoeffEW("CHl1R", 1, 1) - getSMEFTCoeffEW("CHl3R", 0, 0) - getSMEFTCoeffEW("CHl3R", 1, 1))
                - 0.2974 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                - 0.0236 * 0.5 * (getSMEFTCoeffEW("CHeR", 0, 0) + getSMEFTCoeffEW("CHeR", 1, 1)) - 0.499 * CiHQ1
                - 0.199 * CiHQ3 + 0.105 * CiHu + 0.205 * CiHd
                + 0.223 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggHll_pTV150_250_Nj0()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ggHll_pTV150_250_Nj1(const double sqrt_s) const {
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (getSMEFTCoeffEW("CHq1R", 0, 0) + getSMEFTCoeffEW("CHq1R", 1, 1) + getSMEFTCoeffEW("CHq1R", 2, 2)) / 3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") + 0.0142 * getSMEFTCoeffEW("CHD") + 0.0084 * getSMEFTCoeffEW("CHWB")
                + 0.0851 * getSMEFTCoeffEW("CuHR", 2, 2) - 0.491 * getSMEFTCoeffEW("CuGR", 2, 2)
                - 0.0103 * 0.5 * (getSMEFTCoeffEW("CHl1R", 0, 0) + getSMEFTCoeffEW("CHl1R", 1, 1) - getSMEFTCoeffEW("CHl3R", 0, 0) - getSMEFTCoeffEW("CHl3R", 1, 1))
                - 0.2943 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                - 0.0233 * 0.5 * (getSMEFTCoeffEW("CHeR", 0, 0) + getSMEFTCoeffEW("CHeR", 1, 1)) - 0.552 * CiHQ1
                - 0.212 * CiHQ3 + 0.131 * CiHu + 0.219 * CiHd
                + 0.219 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggHll_pTV150_250_Nj1()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ggHll_pTV250_Inf(const double sqrt_s) const {
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (getSMEFTCoeffEW("CHq1R", 0, 0) + getSMEFTCoeffEW("CHq1R", 1, 1) + getSMEFTCoeffEW("CHq1R", 2, 2)) / 3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") + 0.050 * getSMEFTCoeffEW("CHD") + 0.0091 * getSMEFTCoeffEW("CHWB")
                + 0.163 * getSMEFTCoeffEW("CuHR", 2, 2) - 0.680 * getSMEFTCoeffEW("CuGR", 2, 2)
                - 0.0108 * 0.5 * (getSMEFTCoeffEW("CHl1R", 0, 0) + getSMEFTCoeffEW("CHl1R", 1, 1) - getSMEFTCoeffEW("CHl3R", 0, 0) - getSMEFTCoeffEW("CHl3R", 1, 1))
                - 0.2968 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1)) - 0.0240 * 0.5 * (getSMEFTCoeffEW("CHeR", 0, 0) + getSMEFTCoeffEW("CHeR", 1, 1))
                - 0.352 * CiHQ1 - 0.171 * CiHQ3 + 0.020 * CiHu
                + 0.177 * CiHd + 0.221 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggHll_pTV250_Inf()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}



const double NPSMEFTd6General::STXS12_qqHqq_VH_veto_Nj01(const double sqrt_s) const 
{
    
    //NOT PROPERLY IMPLEMENTED, RETURNING A NaN
    return std::numeric_limits<double>::quiet_NaN();
    
    double STXSb = 1.0;
    
    if (sqrt_s == 13.0) {

        
        
        STXSb += cWsch * (
                (0.) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_VH_veto_Nj01()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}



const double NPSMEFTd6General::STXS12_qqHqq_Nj0(const double sqrt_s) const {
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    //double CiHQ1;    
    double CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    //CiHQ1 = (getSMEFTCoeffEW("CHq1R",0,0) + getSMEFTCoeffEW("CHq1R",1,1) + getSMEFTCoeffEW("CHq1R",2,2))/3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.011 * getSMEFTCoeffEW("CHD") + 0.32 * getSMEFTCoeffEW("CHW") + 0.008 * getSMEFTCoeffEW("CHB")
                + 0.048 * getSMEFTCoeffEW("CHWB") - 0.36 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.46 * CiHQ3 + 0.027 * CiHu - 0.0125 * CiHd
                + 0.18 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_Nj0()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHqq_Nj1(const double sqrt_s) const {
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (getSMEFTCoeffEW("CHq1R", 0, 0) + getSMEFTCoeffEW("CHq1R", 1, 1) + getSMEFTCoeffEW("CHq1R", 2, 2)) / 3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.0111 * getSMEFTCoeffEW("CHD") + 0.187 * getSMEFTCoeffEW("CHW") + 0.0063 * getSMEFTCoeffEW("CHB")
                + 0.047 * getSMEFTCoeffEW("CHWB") - 0.368 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.003 * CiHQ1 + 0.39 * CiHQ3 + 0.0278 * CiHu
                - 0.0113 * CiHd + 0.183 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_Nj1()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHqq_mjj0_60_Nj2(const double sqrt_s) const {
    
    //NOT PROPERLY IMPLEMENTED, RETURNING A NaN
    return std::numeric_limits<double>::quiet_NaN();
    
    
    
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    //double CiHQ1;    
    double CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    //CiHQ1 = (getSMEFTCoeffEW("CHq1R",0,0) + getSMEFTCoeffEW("CHq1R",1,1) + getSMEFTCoeffEW("CHq1R",2,2))/3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.011 * getSMEFTCoeffEW("CHD") + 0.38 * getSMEFTCoeffEW("CHW") + 0.012 * getSMEFTCoeffEW("CHB")
                + 0.060 * getSMEFTCoeffEW("CHWB") - 0.36 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.94 * CiHQ3 + 0.055 * CiHu - 0.022 * CiHd
                + 0.178 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj0_60_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHqq_mjj60_120_Nj2(const double sqrt_s) const {
    
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        
        STXSb += cWsch * ( 
	( (0.12112) * getSMEFTCoeffEW("CHbox")
	+ (-0.006618) * getSMEFTCoeffEW("CHD")
	+ (0.7255) * getSMEFTCoeffEW("CHW")
	+ (0.024324) * getSMEFTCoeffEW("CHB")
	+ (0.10661) * getSMEFTCoeffEW("CHWB")
	+ (-0.05202) * getSMEFTCoeffEW("CHq1R", 0,0)
	+ (0.043564) * getSMEFTCoeffEW("CHq1R", 1,1)
	+ (2.002) * getSMEFTCoeffEW("CHq3R", 0,0)
	+ (0.26431) * getSMEFTCoeffEW("CHq3R", 1,1)
	+ (0.14451) * getSMEFTCoeffEW("CHuR", 0,0)
	+ (0.011187) * getSMEFTCoeffEW("CHuR", 1,1)
	+ (-0.05057308) * getSMEFTCoeffEW("CHdR", 0,0)
	+ (-0.01223433) * getSMEFTCoeffEW("CHdR", 1,1)
	+ (-0.1806909) * getSMEFTCoeffEW("CHl3R", 0,0)
	+ (-0.1806909) * getSMEFTCoeffEW("CHl3R", 1,1)
	+ (0.1807) * getSMEFTCoeffEW("CllR", 0,1,1,0) ) * 1000000 
	+ (-0.627) * deltaGwd6()
	+ (-0.319) * deltaGzd6()
	);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj60_120_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHqq_mjj120_350_Nj2(const double sqrt_s) const {
    
    //NOT PROPERLY IMPLEMENTED, RETURNING A NaN
    return std::numeric_limits<double>::quiet_NaN();
    
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (getSMEFTCoeffEW("CHq1R", 0, 0) + getSMEFTCoeffEW("CHq1R", 1, 1) + getSMEFTCoeffEW("CHq1R", 2, 2)) / 3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.0099 * getSMEFTCoeffEW("CHD") - 0.021 * getSMEFTCoeffEW("CHW") + 0.0017 * getSMEFTCoeffEW("CHB")
                + 0.0368 * getSMEFTCoeffEW("CHWB") - 0.363 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                - 0.003 * CiHQ1 - 0.155 * CiHQ3 - 0.0038 * CiHu
                + 0.0022 * CiHd + 0.181 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj120_350_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHqq_mjj350_Inf_pTH200_Inf_Nj2(const double sqrt_s) const //AG:modified
{
    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    /*double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (getSMEFTCoeffEW("CHq1R", 0, 0) + getSMEFTCoeffEW("CHq1R", 1, 1) + getSMEFTCoeffEW("CHq1R", 2, 2)) / 3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;*/

    if (sqrt_s == 13.0) {

        /*STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.0072 * getSMEFTCoeffEW("CHD") + 0.188 * getSMEFTCoeffEW("CHW") - 0.0012 * getSMEFTCoeffEW("CHB")
                + 0.038 * getSMEFTCoeffEW("CHWB") - 0.362 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.047 * CiHQ1 - 1.33 * CiHQ3 - 0.095 * CiHu
                + 0.0314 * CiHd + 0.181 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);*/

        //AG: pTj>30GeV
        STXSb += cWsch * (
                ((0.12125) * getSMEFTCoeffEW("CHbox")
                + (-0.007062) * getSMEFTCoeffEW("CHD")
                + (0.16946) * getSMEFTCoeffEW("CHW")
                + (-0.001466) * getSMEFTCoeffEW("CHB")
                + (0.024549) * getSMEFTCoeffEW("CHWB")
                + (0.09586) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.026874) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-1.622623) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.257163) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.1258851) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.01050939) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.035465) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.0090063) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.181911) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.181911) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.18186) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj350_Inf_pTH200_Inf_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}








const double NPSMEFTd6General::STXS12_qqHqq_mjj350_700_pTH0_200_pTHjj0_25_Nj2(const double sqrt_s) const {
    
    
    //NOT PROPERLY IMPLEMENTED, RETURNING A NaN
    return std::numeric_limits<double>::quiet_NaN();
    
    
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    //double CiHQ1;
    double CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    //CiHQ1 = (getSMEFTCoeffEW("CHq1R",0,0) + getSMEFTCoeffEW("CHq1R",1,1) + getSMEFTCoeffEW("CHq1R",2,2))/3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.0110 * getSMEFTCoeffEW("CHD") - 0.134 * getSMEFTCoeffEW("CHW") - 0.0014 * getSMEFTCoeffEW("CHB")
                + 0.0234 * getSMEFTCoeffEW("CHWB") - 0.368 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                - 0.371 * CiHQ3 - 0.0203 * CiHu
                + 0.0084 * CiHd + 0.184 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj350_700_pTH0_200_pTHjj0_25_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHqq_mjj350_700_pTH0_200_pTHjj25_Inf_Nj2(const double sqrt_s) const {
    
    //NOT PROPERLY IMPLEMENTED, RETURNING A NaN
    return std::numeric_limits<double>::quiet_NaN();
    
    
    
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (getSMEFTCoeffEW("CHq1R", 0, 0) + getSMEFTCoeffEW("CHq1R", 1, 1) + getSMEFTCoeffEW("CHq1R", 2, 2)) / 3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.0101 * getSMEFTCoeffEW("CHD") - 0.143 * getSMEFTCoeffEW("CHW") + 0.027 * getSMEFTCoeffEW("CHWB")
                - 0.358 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1)) + 0.002 * CiHQ1
                - 0.38 * CiHQ3 - 0.0204 * CiHu + 0.0081 * CiHd
                + 0.183 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj350_700_pTH0_200_pTHjj25_Inf_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHqq_mjj700_Inf_pTH0_200_pTHjj0_25_Nj2(const double sqrt_s) const {
    
    
    //NOT PROPERLY IMPLEMENTED, RETURNING A NaN
    return std::numeric_limits<double>::quiet_NaN();
    
    
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (getSMEFTCoeffEW("CHq1R", 0, 0) + getSMEFTCoeffEW("CHq1R", 1, 1) + getSMEFTCoeffEW("CHq1R", 2, 2)) / 3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.0101 * getSMEFTCoeffEW("CHD") - 0.117 * getSMEFTCoeffEW("CHW") - 0.0016 * getSMEFTCoeffEW("CHB")
                + 0.0231 * getSMEFTCoeffEW("CHWB") - 0.365 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.010 * CiHQ1 - 0.364 * CiHQ3 - 0.0216 * CiHu
                + 0.0074 * CiHd + 0.182 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj700_Inf_pTH0_200_pTHjj0_25_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHqq_mjj700_Inf_pTH0_200_pTHjj25_Inf_Nj2(const double sqrt_s) const {
    
    
    //NOT PROPERLY IMPLEMENTED, RETURNING A NaN
    return std::numeric_limits<double>::quiet_NaN();
    
    
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (getSMEFTCoeffEW("CHq1R", 0, 0) + getSMEFTCoeffEW("CHq1R", 1, 1) + getSMEFTCoeffEW("CHq1R", 2, 2)) / 3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.0096 * getSMEFTCoeffEW("CHD") - 0.168 * getSMEFTCoeffEW("CHW") + 0.023 * getSMEFTCoeffEW("CHWB")
                - 0.361 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1)) + 0.015 * CiHQ1
                - 0.442 * CiHQ3 - 0.0282 * CiHu + 0.0091 * CiHd
                + 0.180 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj700_Inf_pTH0_200_pTHjj25_Inf_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHqq_mjj350_700_pTH0_200_Nj2(const double sqrt_s) const //AG:added
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        //pTj>30GeV
        STXSb += cWsch * (
                ((0.12116) * getSMEFTCoeffEW("CHbox")
                + (-0.011205) * getSMEFTCoeffEW("CHD")
                + (-0.133485) * getSMEFTCoeffEW("CHW")
                + (-0.000416) * getSMEFTCoeffEW("CHB")
                + (0.02047) * getSMEFTCoeffEW("CHWB")
                + (0.006534) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.0081187) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.312986) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0850237) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.019281554) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.00320807) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.0068702) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.0027355) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.1818408) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.1818408) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.18165) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj350_700_pTH0_200_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHqq_mjj700_1000_pTH0_200_Nj2(const double sqrt_s) const //AG:added
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        //pTj>30GeV
        STXSb += cWsch * (
                ((0.12117) * getSMEFTCoeffEW("CHbox")
                + (-0.011057) * getSMEFTCoeffEW("CHD")
                + (-0.128786) * getSMEFTCoeffEW("CHW")
                + (-0.00024) * getSMEFTCoeffEW("CHB")
                + (0.020319) * getSMEFTCoeffEW("CHWB")
                + (0.009981) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.0068709) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.325754) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0692495) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0208126) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.002523013) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.0068893) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.0022378) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.1817542) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.1817542) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.18181) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj700_1000_pTH0_200_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHqq_mjj1000_1500_pTH0_200_Nj2(const double sqrt_s) const //AG:added
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        //pTj>30GeV
        STXSb += cWsch * (
                ((0.12096) * getSMEFTCoeffEW("CHbox")
                + (-0.010795) * getSMEFTCoeffEW("CHD")
                + (-0.126544) * getSMEFTCoeffEW("CHW")
                + (-0.000155) * getSMEFTCoeffEW("CHB")
                + (0.020471) * getSMEFTCoeffEW("CHWB")
                + (0.013753) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.0056663) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.334119) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0563833) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.0222351) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.00200624) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.0068001) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.0018158) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.181549) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.181549) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.18153) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj1000_1500_pTH0_200_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHqq_mjj1500_Inf_pTH0_200_Nj2(const double sqrt_s) const //AG:added
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        //pTj>30GeV
        STXSb += cWsch * (
                ((0.12137) * getSMEFTCoeffEW("CHbox")
                + (-0.010058) * getSMEFTCoeffEW("CHD")
                + (-0.126696) * getSMEFTCoeffEW("CHW")
                + (-4.9e-05) * getSMEFTCoeffEW("CHB")
                + (0.021522) * getSMEFTCoeffEW("CHWB")
                + (0.023913) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.0034782) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.346713) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.0398273) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.02563591) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.001467832) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.0064338) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.0012111) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.181736) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.181736) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.18193) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj1500_Inf_pTH0_200_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHqq_mjj350_1000_pTH200_Inf_Nj2(const double sqrt_s) const //AG:added
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        //pTj>30GeV
        STXSb += cWsch * (
                ((0.12119388244615271) * getSMEFTCoeffEW("CHbox")
                + (-0.007520073014376603) * getSMEFTCoeffEW("CHD")
                + (0.20031065061792538) * getSMEFTCoeffEW("CHW")
                + (-0.0017028701729685037) * getSMEFTCoeffEW("CHB")
                + (0.025477338005929776) * getSMEFTCoeffEW("CHWB")
                + (0.05762202703511021) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.034704492909866734) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-1.5262530035586555) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.31670221602330967) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.11035352246217908) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.012911611060134444) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.03570087989045835) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.01138089675090921) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.1816546926779029) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.1816546926779029) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.18178862464555604) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj350_1000_pTH200_Inf_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHqq_mjj1000_Inf_pTH200_Inf_Nj2(const double sqrt_s) const //AG:added
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        //pTj>30GeV
        STXSb += cWsch * (
                ((0.12115277435803268) * getSMEFTCoeffEW("CHbox")
                + (-0.006700175570443445) * getSMEFTCoeffEW("CHD")
                + (0.14503609950278334) * getSMEFTCoeffEW("CHW")
                + (-0.001181392562850623) * getSMEFTCoeffEW("CHB")
                + (0.023797404695001557) * getSMEFTCoeffEW("CHWB")
                + (0.1267974703204301) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (-0.020350888277334663) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-1.7030969805490792) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (-0.2091291453108325) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.13908329182938856) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (-0.008563055128991819) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (0.035275554702358033) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (0.007091459551226658) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.18157625796816287) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.18157625796816287) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.18172255774352347) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj1000_Inf_pTH200_Inf_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHlv_pTV0_75(const double sqrt_s) const //AG:modified
{
    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    /*double CiHQ3; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;*/

    if (sqrt_s == 13.0) {

        /*STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.0304 * getSMEFTCoeffEW("CHD") + 0.813 * getSMEFTCoeffEW("CHW")
                - 0.241 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 1.142 * CiHQ3 + 0.183 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0); */
        // AG:
        STXSb += cWsch * (
                ((0.12114) * getSMEFTCoeffEW("CHbox")
                + (-0.03031269) * getSMEFTCoeffEW("CHD")
                + (0.8155) * getSMEFTCoeffEW("CHW")
                + (0.9523) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.15907) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.1412857) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.14124287) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.18176) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                + (-1.012) * deltaGwd6()
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHlv_pTV0_75()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHlv_pTV75_150(const double sqrt_s) const //AG:modified
{
    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    /*double CiHQ3; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;*/

    if (sqrt_s == 13.0) {

        /*STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.0304 * getSMEFTCoeffEW("CHD") + 0.946 * getSMEFTCoeffEW("CHW")
                - 0.244 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 1.90 * CiHQ3 + 0.183 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);*/
        // AG:
        STXSb += cWsch * (
                ((0.12127) * getSMEFTCoeffEW("CHbox")
                + (-0.03032518) * getSMEFTCoeffEW("CHD")
                + (0.9462) * getSMEFTCoeffEW("CHW")
                + (1.7004) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.22393) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.1410885) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.1408925) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.1819) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                + (-0.996) * deltaGwd6()
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHlv_pTV75_150()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHlv_pTV150_250_Nj0(const double sqrt_s) const //AG:modified
{
    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    /*double CiHQ3; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;*/

    if (sqrt_s == 13.0) {

        /*STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.0312 * getSMEFTCoeffEW("CHD") + 1.06 * getSMEFTCoeffEW("CHW")
                - 0.247 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 4.07 * CiHQ3 + 0.187 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);*/
        // AG: 
        STXSb += cWsch * (
                ((0.12103) * getSMEFTCoeffEW("CHbox")
                + (-0.03027479) * getSMEFTCoeffEW("CHD")
                + (1.0506) * getSMEFTCoeffEW("CHW")
                + (3.6846) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.34645) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.1403732) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.1405017) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.18154) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                + (-1.017) * deltaGwd6()
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHlv_pTV150_250_Nj0()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHlv_pTV150_250_Nj1(const double sqrt_s) const //AG:modified
{
    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    /*double CiHQ3; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;*/

    if (sqrt_s == 13.0) {

        /*STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.0307 * getSMEFTCoeffEW("CHD") + 1.08 * getSMEFTCoeffEW("CHW")
                - 0.239 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 3.58 * CiHQ3 + 0.180 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);*/
        // AG: pTj=>30GeV
        STXSb += cWsch * (
                ((0.12125) * getSMEFTCoeffEW("CHbox")
                + (-0.03035345) * getSMEFTCoeffEW("CHD")
                + (1.0561) * getSMEFTCoeffEW("CHW")
                + (3.2437) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.36816) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.1200448) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.1201971) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.18189) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                + (-1.009) * deltaGwd6()
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHlv_pTV150_250_Nj1()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHlv_pTV250_Inf(const double sqrt_s) const {
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;


    if (sqrt_s == 13.0) {

        STXSb = (0.01127*STXS12_qqHlv_pTV250_400(sqrt_s) + 0.00339*STXS12_qqHlv_pTV400_Inf(sqrt_s))/(0.01127+0.00339);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHlv_pTV250_Inf()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHlv_pTV0_150(const double sqrt_s) const //AG:added
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += cWsch * (
                ((0.12122) * getSMEFTCoeffEW("CHbox")
                + (-0.03033245) * getSMEFTCoeffEW("CHD")
                + (0.86411) * getSMEFTCoeffEW("CHW")
                + (1.2279) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.18313) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.1411777) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.1411553) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.18183) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                + (-1.002) * deltaGwd6()
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHlv_pTV0_150)");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHlv_pTV250_400(const double sqrt_s) const //AG:added
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += cWsch * (
                ((0.12126) * getSMEFTCoeffEW("CHbox")
                + (-0.03028419) * getSMEFTCoeffEW("CHD")
                + (1.1087) * getSMEFTCoeffEW("CHW")
                + (8.462) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.54273) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.1402818) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.1402079) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.18188) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                + (-0.99) * deltaGwd6()
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            STXSb += 0.0;
        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHlv_pTV250_400()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHlv_pTV400_Inf(const double sqrt_s) const //AG:added
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += cWsch * (
                ((0.1213) * getSMEFTCoeffEW("CHbox")
                + (-0.03031894) * getSMEFTCoeffEW("CHD")
                + (1.1361) * getSMEFTCoeffEW("CHW")
                + (25.302) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.9521) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (-0.14003358) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.14005959) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.18197) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                + (-1.005) * deltaGwd6()
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;
        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHlv_pTV400_Inf()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHll_pTV0_75(const double sqrt_s) const //AG:modified
{
    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    /*double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (getSMEFTCoeffEW("CHq1R", 0, 0) + getSMEFTCoeffEW("CHq1R", 1, 1) + getSMEFTCoeffEW("CHq1R", 2, 2)) / 3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;*/

    if (sqrt_s == 13.0) {

        /*STXSb += (0.12 * getSMEFTCoeffEW("CHbox") + 0.0129 * getSMEFTCoeffEW("CHD") + 0.665 * getSMEFTCoeffEW("CHW") + 0.0835 * getSMEFTCoeffEW("CHB")
                + 0.303 * getSMEFTCoeffEW("CHWB") - 0.0362 * 0.5 * (getSMEFTCoeffEW("CHl1R", 0, 0) + getSMEFTCoeffEW("CHl1R", 1, 1) - getSMEFTCoeffEW("CHl3R", 0, 0) - getSMEFTCoeffEW("CHl3R", 1, 1))
                - 0.2772 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1)) - 0.0359 * 0.5 * (getSMEFTCoeffEW("CHeR", 0, 0) + getSMEFTCoeffEW("CHeR", 1, 1))
                + 0.029 * CiHQ1 + 1.27 * CiHQ3 + 0.245 * CiHu - 0.1064 * CiHd
                + 0.183 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);*/
        // AG: 
        STXSb += cWsch * (
                ((0.12122) * getSMEFTCoeffEW("CHbox")
                + (0.01275) * getSMEFTCoeffEW("CHD")
                + (0.66498) * getSMEFTCoeffEW("CHW")
                + (0.07923) * getSMEFTCoeffEW("CHB")
                + (0.29801) * getSMEFTCoeffEW("CHWB")
                + (-0.05107) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.08713) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (0.9403) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.17685) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.20932) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (0.018933) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.0776056) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (-0.0230333) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.011958) * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.011973) * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.011982) * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.1402374) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.1403242) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.041685) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.0117029) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (-0.0115373) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.0116341) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.18182) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                + (-1.164) * deltaGzd6()
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHll_pTV0_75()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHll_pTV75_150(const double sqrt_s) const //AG:modified
{
    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    /*double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (getSMEFTCoeffEW("CHq1R", 0, 0) + getSMEFTCoeffEW("CHq1R", 1, 1) + getSMEFTCoeffEW("CHq1R", 2, 2)) / 3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;*/

    if (sqrt_s == 13.0) {

        /*STXSb += (0.12 * getSMEFTCoeffEW("CHbox") + 0.0128 * getSMEFTCoeffEW("CHD") + 0.771 * getSMEFTCoeffEW("CHW") + 0.092 * getSMEFTCoeffEW("CHB")
                + 0.341 * getSMEFTCoeffEW("CHWB") - 0.0360 * 0.5 * (getSMEFTCoeffEW("CHl1R", 0, 0) + getSMEFTCoeffEW("CHl1R", 1, 1) - getSMEFTCoeffEW("CHl3R", 0, 0) - getSMEFTCoeffEW("CHl3R", 1, 1))
                - 0.274 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1)) - 0.0362 * 0.5 * (getSMEFTCoeffEW("CHeR", 0, 0) + getSMEFTCoeffEW("CHeR", 1, 1))
                + 0.01 * CiHQ1 + 1.80 * CiHQ3 + 0.403 * CiHu - 0.166 * CiHd
                + 0.182 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);*/
        // AG: 
        STXSb += cWsch * (
                ((0.1071) * getSMEFTCoeffEW("CHbox")
                + (0.01084) * getSMEFTCoeffEW("CHD")
                + (0.7) * getSMEFTCoeffEW("CHW")
                + (0.07851) * getSMEFTCoeffEW("CHB")
                + (0.3063) * getSMEFTCoeffEW("CHWB")
                + (-0.093) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.113) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (1.53) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.2248) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.3302) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (0.02362) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.1143) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (-0.0288097) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.011924) * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.011969) * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.1403624) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.14009461) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.041736) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.0066) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (-0.00815) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (0) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.18191) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                + (-1.166) * deltaGzd6()
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHll_pTV75_150()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHll_pTV150_250_Nj0(const double sqrt_s) const //AG:modified
{
    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    /*double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (getSMEFTCoeffEW("CHq1R", 0, 0) + getSMEFTCoeffEW("CHq1R", 1, 1) + getSMEFTCoeffEW("CHq1R", 2, 2)) / 3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;*/

    if (sqrt_s == 13.0) {

        /*STXSb += (0.12 * getSMEFTCoeffEW("CHbox") + 0.013 * getSMEFTCoeffEW("CHD") + 0.86 * getSMEFTCoeffEW("CHW") + 0.103 * getSMEFTCoeffEW("CHB")
                + 0.366 * getSMEFTCoeffEW("CHWB") - 0.035 * 0.5 * (getSMEFTCoeffEW("CHl1R", 0, 0) + getSMEFTCoeffEW("CHl1R", 1, 1) - getSMEFTCoeffEW("CHl3R", 0, 0) - getSMEFTCoeffEW("CHl3R", 1, 1))
                - 0.267 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1)) - 0.0358 * 0.5 * (getSMEFTCoeffEW("CHeR", 0, 0) + getSMEFTCoeffEW("CHeR", 1, 1))
                - 0.12 * CiHQ1 + 3.63 * CiHQ3 + 0.87 * CiHu - 0.323 * CiHd
                + 0.177 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);*/
        // AG: 
        STXSb += cWsch * (
                ((0.12131) * getSMEFTCoeffEW("CHbox")
                + (0.01327) * getSMEFTCoeffEW("CHD")
                + (0.9015) * getSMEFTCoeffEW("CHW")
                + (0.0923) * getSMEFTCoeffEW("CHB")
                + (0.37402) * getSMEFTCoeffEW("CHWB")
                + (-0.3625) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.20275) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (3.4124) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.38616) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.79679) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (0.038688) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.266298) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (-0.05133963) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.011931) * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.011941) * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.011982) * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.14015811) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.1400332) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.04169) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.00795995) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (-0.007957808) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.00793949) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.18198) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                + (-1.17) * deltaGzd6()
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHll_pTV150_250_Nj0()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHll_pTV150_250_Nj1(const double sqrt_s) const //AG:modified
{
    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    /*double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (getSMEFTCoeffEW("CHq1R", 0, 0) + getSMEFTCoeffEW("CHq1R", 1, 1) + getSMEFTCoeffEW("CHq1R", 2, 2)) / 3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;*/

    if (sqrt_s == 13.0) {

        /*STXSb += (0.12 * getSMEFTCoeffEW("CHbox") + 0.013 * getSMEFTCoeffEW("CHD") + 0.85 * getSMEFTCoeffEW("CHW") + 0.102 * getSMEFTCoeffEW("CHB")
                + 0.373 * getSMEFTCoeffEW("CHWB") - 0.036 * 0.5 * (getSMEFTCoeffEW("CHl1R", 0, 0) + getSMEFTCoeffEW("CHl1R", 1, 1) - getSMEFTCoeffEW("CHl3R", 0, 0) - getSMEFTCoeffEW("CHl3R", 1, 1))
                - 0.266 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1)) - 0.0367 * 0.5 * (getSMEFTCoeffEW("CHeR", 0, 0) + getSMEFTCoeffEW("CHeR", 1, 1))
                - 0.10 * CiHQ1 + 3.19 * CiHQ3 + 0.77 * CiHu - 0.282 * CiHd
                + 0.177 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);*/
        //AG: pTj=>30GeV
        STXSb += cWsch * (
                ((0.12186) * getSMEFTCoeffEW("CHbox")
                + (0.0117) * getSMEFTCoeffEW("CHD")
                + (0.8996) * getSMEFTCoeffEW("CHW")
                + (0.09276) * getSMEFTCoeffEW("CHB")
                + (0.37312) * getSMEFTCoeffEW("CHWB")
                + (-0.3902) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.16551) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (3.0189) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.38783) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.72034) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (0.047152) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.230024) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (-0.048349) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.019699) * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.019614) * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.141473) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.1415195) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.041872) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.008903) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (-0.0089573) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.0089657) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.18278) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                + (-1.113) * deltaGzd6()
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHll_pTV150_250_Nj1()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHll_pTV250_Inf(const double sqrt_s) const {
    
    double STXSb = (0.003784*STXS12_qqHll_pTV250_400(sqrt_s)+0.0007538*STXS12_qqHll_pTV400_Inf(sqrt_s))/(0.003784+0.0007538);

    
    
    /*
    // To be fixed together with the UFO file when going beyond U(2)
    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (getSMEFTCoeffEW("CHq1R", 0, 0) + getSMEFTCoeffEW("CHq1R", 1, 1) + getSMEFTCoeffEW("CHq1R", 2, 2)) / 3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * getSMEFTCoeffEW("CHbox") + 0.010 * getSMEFTCoeffEW("CHD") + 0.88 * getSMEFTCoeffEW("CHW") + 0.135 * getSMEFTCoeffEW("CHB")
                + 0.41 * getSMEFTCoeffEW("CHWB") - 0.037 * 0.5 * (getSMEFTCoeffEW("CHl1R", 0, 0) + getSMEFTCoeffEW("CHl1R", 1, 1) - getSMEFTCoeffEW("CHl3R", 0, 0) - getSMEFTCoeffEW("CHl3R", 1, 1))
                - 0.271 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1)) - 0.036 * 0.5 * (getSMEFTCoeffEW("CHeR", 0, 0) + getSMEFTCoeffEW("CHeR", 1, 1))
                - 1.12 * CiHQ1 + 9.9 * CiHQ3 + 2.51 * CiHu - 0.81 * CiHd
                + 0.181 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHll_pTV250_Inf()");

     
    */
    
    
    
    
    
    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
     
     
    
    
    
    
    
    
}


const double NPSMEFTd6General::STXS12_qqHll_pTV0_150(const double sqrt_s) const //AG:added
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += cWsch * (
                ((0.12123) * getSMEFTCoeffEW("CHbox")
                + (0.012881) * getSMEFTCoeffEW("CHD")
                + (0.70945) * getSMEFTCoeffEW("CHW")
                + (0.08197) * getSMEFTCoeffEW("CHB")
                + (0.31278) * getSMEFTCoeffEW("CHWB")
                + (-0.07723) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.10149) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (1.1939) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.20331) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.26871) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (0.021453) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.0973464) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (-0.02656685) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.011957) * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.011952) * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.011971) * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.13992658) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.13999665) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.041673) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.01157) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (-0.01147) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.011664) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.18184) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                + (-1.158) * deltaGzd6()
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            STXSb += 0.0;
        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHll_pTV0_150()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHll_pTV250_400(const double sqrt_s) const //AG:added
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += cWsch * (
                ((0.12128) * getSMEFTCoeffEW("CHbox")
                + (0.013624) * getSMEFTCoeffEW("CHD")
                + (0.9689) * getSMEFTCoeffEW("CHW")
                + (0.09471) * getSMEFTCoeffEW("CHB")
                + (0.395) * getSMEFTCoeffEW("CHWB")
                + (-1.023) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.32931) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (7.7452) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.61719) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (1.8529) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (0.060759) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-0.586475) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (-0.0825726) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.011971) * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.011947) * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.01199) * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.1402367) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.1402747) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.041712) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.00793968) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (-0.00794877) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.00792663) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.18192) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                + (-1.173) * deltaGzd6()
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            STXSb += 0.0;
        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHll_pTV250_400()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_qqHll_pTV400_Inf(const double sqrt_s) const //AG:added
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += cWsch * (
                ((0.12137) * getSMEFTCoeffEW("CHbox")
                + (0.011638) * getSMEFTCoeffEW("CHD")
                + (1.0294) * getSMEFTCoeffEW("CHW")
                + (0.09718) * getSMEFTCoeffEW("CHB")
                + (0.41079) * getSMEFTCoeffEW("CHWB")
                + (-3.4338) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.54859) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (21.293) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (1.0603) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (5.2254) * getSMEFTCoeffEW("CHuR", 0, 0)
                + (0.108) * getSMEFTCoeffEW("CHuR", 1, 1)
                + (-1.557636) * getSMEFTCoeffEW("CHdR", 0, 0)
                + (-0.1402551) * getSMEFTCoeffEW("CHdR", 1, 1)
                + (-0.021029) * getSMEFTCoeffEW("CHl1R", 0, 0)
                + (-0.021045) * getSMEFTCoeffEW("CHl1R", 1, 1)
                + (-0.021123) * getSMEFTCoeffEW("CHl1R", 2, 2)
                + (-0.14045) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.1405169) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.041324) * getSMEFTCoeffEW("CHl3R", 2, 2)
                + (-0.00540608) * getSMEFTCoeffEW("CHeR", 0, 0)
                + (-0.00540827) * getSMEFTCoeffEW("CHeR", 1, 1)
                + (-0.0053773) * getSMEFTCoeffEW("CHeR", 2, 2)
                + (0.18206) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                + (-1.144) * deltaGzd6()
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;
        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHll_pTV400_Inf()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ttH_pTH0_60(const double sqrt_s) const //AG:modified
{
    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    /*double CiHQ3; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;*/

    if (sqrt_s == 13.0) {

        /*STXSb += (-0.021 * getSMEFTCoeffEW("CG") + 0.12 * getSMEFTCoeffEW("CHbox") - 0.0301 * getSMEFTCoeffEW("CHD") + 0.411 * getSMEFTCoeffEW("CHG")
                - 0.121 * getSMEFTCoeffEW("CuHR", 2, 2) + 0.764 * getSMEFTCoeffEW("CuGR", 2, 2) + 0.004 * getSMEFTCoeffEW("CuWR", 2, 2)
                + 0.0015 * getSMEFTCoeffEW("CuBR", 2, 2) - 0.121 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.0031 * CiHQ3
                + 0.0612 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                //+ 0.0154 * Ciqq1 + 0.121 * Ciqq11 
                //+ 0.0142 * Ciqq3 + 0.299 * Ciqq31 
                //+ 0.0088 * Ciuu + 0.128 * Ciuu1 
                //- 0.0015 * Ciud1 + 0.0213 * Ciud8 
                //+ 0.0056 * Ciqu1 + 0.082 * Ciqu8 
                //- 0.001 * Ciqd1 + 0.0215 * Ciqd8
                ) * (1000000.0);*/
        // AG: 
        STXSb += cWsch * (
                ((0.12138) * getSMEFTCoeffEW("CHbox")
                + (-0.03041037) * getSMEFTCoeffEW("CHD")
                + (0.00057116) * getSMEFTCoeffEW("CHW")
                + (0.00014153) * getSMEFTCoeffEW("CHB")
                + (-0.000531127) * getSMEFTCoeffEW("CHWB")
                + (-9.889e-05) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (1.2627e-05) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.000339881) * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.00038671) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (2.9689e-05) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.00033949) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.41274) * getSMEFTCoeffEW("CHG")
                + (-0.1225944) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (-0.776767) * getSMEFTCoeffEW("CuGR", 2, 2)
                + (0.00435) * getSMEFTCoeffEW("CG")
                + (-0.0047023) * getSMEFTCoeffEW("CuWR", 2, 2)
                + (-0.00153602) * getSMEFTCoeffEW("CuBR", 2, 2)
                + (0.007596) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2)
                + (0.12404) * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0)
                + (-0.00063485) * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2)
                + (0.0041376) * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1)
                + (0.024355) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                + (0.27065) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                + (0.0016752) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2)
                + (0.024707) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1)
                + (0.008176) * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2)
                + (0.12146) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                + (0.00026666) * getSMEFTCoeffEW("CuuR", 1, 1, 2, 2)
                + (0.0040529) * getSMEFTCoeffEW("CuuR", 1, 2, 2, 1)
                + (-0.001302936) * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                + (-0.000180091) * getSMEFTCoeffEW("Cud1R", 2, 2, 1, 1)
                + (0.018975) * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                + (0.0026805) * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1)
                + (0.0030841) * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                + (0.0028183) * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                + (-0.00011935) * getSMEFTCoeffEW("Cqu1R", 1, 1, 2, 2)
                + (9.671e-05) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1)
                + (0.048705) * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                + (0.029737) * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0)
                + (0.0036627) * getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2)
                + (0.0009909) * getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1)
                + (-0.000901344) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                + (-0.000130598) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1)
                + (0.018966) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                + (0.0026786) * getSMEFTCoeffEW("Cqd8R", 2, 2, 1, 1)
                + (-0.0608986) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0608986) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.060896) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ttH_pTH0_60()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ttH_pTH60_120(const double sqrt_s) const //AG:modified
{
    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    /*double CiHQ3; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;*/

    if (sqrt_s == 13.0) {

        /*STXSb += (-0.061 * getSMEFTCoeffEW("CG") + 0.12 * getSMEFTCoeffEW("CHbox") - 0.0286 * getSMEFTCoeffEW("CHD") + 0.450 * getSMEFTCoeffEW("CHG")
                - 0.1149 * getSMEFTCoeffEW("CuHR", 2, 2) + 0.790 * getSMEFTCoeffEW("CuGR", 2, 2) + 0.005 * getSMEFTCoeffEW("CuWR", 2, 2)
                + 0.0017 * getSMEFTCoeffEW("CuBR", 2, 2) - 0.1151 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.0032 * CiHQ3
                + 0.0574 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                //+ 0.0183 * Ciqq1 + 0.138 * Ciqq11 
                //+ 0.0175 * Ciqq3 + 0.340 * Ciqq31 
                //+ 0.0104 * Ciuu + 0.147 * Ciuu1 
                //- 0.0017 * Ciud1 + 0.0244 * Ciud8 
                //+ 0.0066 * Ciqu1 + 0.0968 * Ciqu8 
                //- 0.001 * Ciqd1 + 0.0243 * Ciqd8
                ) * (1000000.0);*/
        // AG: 
        STXSb += cWsch * (
                ((0.12137) * getSMEFTCoeffEW("CHbox")
                + (-0.03041016) * getSMEFTCoeffEW("CHD")
                + (0.00073702) * getSMEFTCoeffEW("CHW")
                + (0.00018385) * getSMEFTCoeffEW("CHB")
                + (-0.000620406) * getSMEFTCoeffEW("CHWB")
                + (-0.00015089) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (2.3128e-05) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.000399286) * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.0006773) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (5.0356e-05) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.00039923) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.48136) * getSMEFTCoeffEW("CHG")
                + (0.03963) * getSMEFTCoeffEW("CG")
                + (-0.00571315) * getSMEFTCoeffEW("CuWR", 2, 2)
                + (-0.00189) * getSMEFTCoeffEW("CuBR", 2, 2)
                + (0.009791) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2)
                + (0.15791) * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0)
                + (-0.00076589) * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2)
                + (0.0048919) * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1)
                + (0.031236) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                + (0.34185) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                + (0.0020056) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2)
                + (0.029204) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1)
                + (0.010484) * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2)
                + (0.15461) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                + (0.00031756) * getSMEFTCoeffEW("CuuR", 1, 1, 2, 2)
                + (0.0047899) * getSMEFTCoeffEW("CuuR", 1, 2, 2, 1)
                + (-0.001652491) * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                + (-0.0002149805) * getSMEFTCoeffEW("Cud1R", 2, 2, 1, 1)
                + (0.023897) * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                + (0.0031647) * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1)
                + (0.0039242) * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                + (0.0035367) * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                + (-0.0001347) * getSMEFTCoeffEW("Cqu1R", 1, 1, 2, 2)
                + (0.00011278) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1)
                + (0.061685) * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                + (0.037794) * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0)
                + (0.0043275) * getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2)
                + (0.0011707) * getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1)
                + (-0.00112222) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                + (-0.000152545) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1)
                + (0.023878) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                + (0.0031642) * getSMEFTCoeffEW("Cqd8R", 2, 2, 1, 1)
                + (-0.0608954) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0608954) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.060897) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ttH_pTH60_120()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ttH_pTH120_200(const double sqrt_s) const //AG:modified
{
    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    /*double CiHQ3; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;*/

    if (sqrt_s == 13.0) {

        /*STXSb += (-0.152 * getSMEFTCoeffEW("CG") + 0.12 * getSMEFTCoeffEW("CHbox") - 0.0282 * getSMEFTCoeffEW("CHD") + 0.553 * getSMEFTCoeffEW("CHG")
                + 0.0013 * getSMEFTCoeffEW("CHW") - 0.113 * getSMEFTCoeffEW("CuHR", 2, 2) + 0.890 * getSMEFTCoeffEW("CuGR", 2, 2)
                + 0.007 * getSMEFTCoeffEW("CuWR", 2, 2) + 0.002 * getSMEFTCoeffEW("CuBR", 2, 2)
                - 0.114 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1))
                + 0.0045 * CiHQ3 + 0.0569 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                //+ 0.0282 * Ciqq1 + 0.202 * Ciqq11 
                //+ 0.0275 * Ciqq3 + 0.493 * Ciqq31 
                //+ 0.0156 * Ciuu + 0.217 * Ciuu1 
                //- 0.0025 * Ciud1 + 0.0347 * Ciud8 
                //+ 0.0097 * Ciqu1 + 0.138 * Ciqu8 
                //- 0.0016 * Ciqd1 + 0.0345 * Ciqd8
                ) * (1000000.0);*/
        // AG: 
        STXSb += cWsch * (
                ((0.12143) * getSMEFTCoeffEW("CHbox")
                + (-0.030489) * getSMEFTCoeffEW("CHD")
                + (0.0011161) * getSMEFTCoeffEW("CHW")
                + (0.00027979) * getSMEFTCoeffEW("CHB")
                + (-0.00080248) * getSMEFTCoeffEW("CHWB")
                + (-0.0003474) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (6.353e-05) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.000517856) * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.0018597) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.00012826) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.00051778) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.59632) * getSMEFTCoeffEW("CHG")
                + (-0.1226997) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (-0.952237) * getSMEFTCoeffEW("CuGR", 2, 2)
                + (0.11918) * getSMEFTCoeffEW("CG")
                + (-0.00794352) * getSMEFTCoeffEW("CuWR", 2, 2)
                + (-0.00267574) * getSMEFTCoeffEW("CuBR", 2, 2)
                + (0.015284) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2)
                + (0.2389) * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0)
                + (-0.0010437) * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2)
                + (0.0064995) * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1)
                + (0.048067) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                + (0.51215) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                + (0.0027253) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2)
                + (0.038576) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1)
                + (0.016124) * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2)
                + (0.23377) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                + (0.00042951) * getSMEFTCoeffEW("CuuR", 1, 1, 2, 2)
                + (0.0063635) * getSMEFTCoeffEW("CuuR", 1, 2, 2, 1)
                + (-0.002501944) * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                + (-0.00028836) * getSMEFTCoeffEW("Cud1R", 2, 2, 1, 1)
                + (0.035499) * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                + (0.0041847) * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1)
                + (0.005906) * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                + (0.0052058) * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                + (-0.00015687) * getSMEFTCoeffEW("Cqu1R", 1, 1, 2, 2)
                + (0.00014599) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1)
                + (0.09268) * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                + (0.057085) * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0)
                + (0.0057247) * getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2)
                + (0.0015548) * getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1)
                + (-0.00162258) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                + (-0.000196522) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1)
                + (0.035455) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                + (0.0041763) * getSMEFTCoeffEW("Cqd8R", 2, 2, 1, 1)
                + (-0.0610094) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0610094) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.060995) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ttH_pTH120_200()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ttH_pTH200_300(const double sqrt_s) const //AG:modified
{
    double STXSb = 1.0;

    // To be fixed together with the UFO file when going beyond U(2)
    /*double CiHQ1, CiHQ3; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (getSMEFTCoeffEW("CHq1R", 0, 0) + getSMEFTCoeffEW("CHq1R", 1, 1) + getSMEFTCoeffEW("CHq1R", 2, 2)) / 3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;*/

    if (sqrt_s == 13.0) {

        /*STXSb += (-0.311 * getSMEFTCoeffEW("CG") + 0.12 * getSMEFTCoeffEW("CHbox") - 0.0277 * getSMEFTCoeffEW("CHD") + 0.68 * getSMEFTCoeffEW("CHG")
                + 0.002 * getSMEFTCoeffEW("CHW") - 0.001 * getSMEFTCoeffEW("CHWB") - 0.112 * getSMEFTCoeffEW("CuHR", 2, 2)
                + 0.97 * getSMEFTCoeffEW("CuGR", 2, 2) + 0.0105 * getSMEFTCoeffEW("CuWR", 2, 2) + 0.003 * getSMEFTCoeffEW("CuBR", 2, 2)
                - 0.114 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1)) - 0.0015 * CiHQ1
                + 0.0091 * CiHQ3 + 0.0569 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                //+ 0.0493 * Ciqq1 + 0.336 * Ciqq11 
                //+ 0.0484 * Ciqq3 + 0.82 * Ciqq31 
                //+ 0.0268 * Ciuu + 0.358 * Ciuu1 
                //- 0.0042 * Ciud1 + 0.0545 * Ciud8 
                //+ 0.0159 * Ciqu1 + 0.228 * Ciqu8 
                //- 0.0025 * Ciqd1 + 0.0541 * Ciqd8
                ) * (1000000.0);*/
        // AG: 
        STXSb += cWsch * (
                ((0.1215) * getSMEFTCoeffEW("CHbox")
                + (-0.03053419) * getSMEFTCoeffEW("CHD")
                + (0.0017669) * getSMEFTCoeffEW("CHW")
                + (0.00044617) * getSMEFTCoeffEW("CHB")
                + (-0.001069327) * getSMEFTCoeffEW("CHWB")
                + (-0.0010712) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.00019776) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.000682555) * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.0063625) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.00038586) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0006827) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.699) * getSMEFTCoeffEW("CHG")
                + (-0.122786) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (-1.018646) * getSMEFTCoeffEW("CuGR", 2, 2)
                + (0.23561) * getSMEFTCoeffEW("CG")
                + (-0.01157907) * getSMEFTCoeffEW("CuWR", 2, 2)
                + (-0.00400075) * getSMEFTCoeffEW("CuBR", 2, 2)
                + (0.026362) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2)
                + (0.39604) * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0)
                + (-0.0014893) * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2)
                + (0.009094) * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1)
                + (0.08184) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                + (0.8361) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                + (0.0039269) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2)
                + (0.053073) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1)
                + (0.027433) * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2)
                + (0.38713) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                + (0.00061782) * getSMEFTCoeffEW("CuuR", 1, 1, 2, 2)
                + (0.008897) * getSMEFTCoeffEW("CuuR", 1, 2, 2, 1)
                + (-0.00415657) * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                + (-0.000406717) * getSMEFTCoeffEW("Cud1R", 2, 2, 1, 1)
                + (0.057429) * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                + (0.0057328) * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1)
                + (0.009662) * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                + (0.008247) * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                + (-0.00016591) * getSMEFTCoeffEW("Cqu1R", 1, 1, 2, 2)
                + (0.00019516) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1)
                + (0.15174) * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                + (0.09449) * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0)
                + (0.007903) * getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2)
                + (0.0021725) * getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1)
                + (-0.002515173) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                + (-0.000258378) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1)
                + (0.057392) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                + (0.0057293) * getSMEFTCoeffEW("Cqd8R", 2, 2, 1, 1)
                + (-0.0611484) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0611484) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.061133) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ttH_pTH200_300()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ttH_pTH300_Inf(const double sqrt_s) const {
    // VM: This is an old version of the function. IT'S NOT USED ANYMORE!!!
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (getSMEFTCoeffEW("CHq1R", 0, 0) + getSMEFTCoeffEW("CHq1R", 1, 1) + getSMEFTCoeffEW("CHq1R", 2, 2)) / 3.0;
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;
    CiHu = (getSMEFTCoeffEW("CHuR", 0, 0) + getSMEFTCoeffEW("CHuR", 1, 1) + getSMEFTCoeffEW("CHuR", 2, 2)) / 3.0;
    CiHd = (getSMEFTCoeffEW("CHdR", 0, 0) + getSMEFTCoeffEW("CHdR", 1, 1) + getSMEFTCoeffEW("CHdR", 2, 2)) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (-0.58 * getSMEFTCoeffEW("CG") + 0.12 * getSMEFTCoeffEW("CHbox") - 0.0276 * getSMEFTCoeffEW("CHD") + 0.84 * getSMEFTCoeffEW("CHG")
                + 0.003 * getSMEFTCoeffEW("CHW") - 0.001 * getSMEFTCoeffEW("CHWB") - 0.110 * getSMEFTCoeffEW("CuHR", 2, 2)
                + 1.04 * getSMEFTCoeffEW("CuGR", 2, 2) + 0.0186 * getSMEFTCoeffEW("CuWR", 2, 2) + 0.0068 * getSMEFTCoeffEW("CuBR", 2, 2)
                - 0.112 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1)) - 0.0105 * CiHQ1
                + 0.0503 * CiHQ3 + 0.0110 * CiHu - 0.0032 * CiHd
                + 0.056 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                //+ 0.120 * Ciqq1 + 0.75 * Ciqq11 
                //+ 0.122 * Ciqq3 + 1.70 * Ciqq31 
                //+ 0.064 * Ciuu + 0.78 * Ciuu1 
                //- 0.0091 * Ciud1 + 0.110 * Ciud8 
                //+ 0.0344 * Ciqu1 + 0.497 * Ciqu8 
                //- 0.0045 * Ciqd1 + 0.111 * Ciqd8
                ) * (1000000.0);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ttH_pTH300_Inf()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ttH_pTH300_450(const double sqrt_s) const //AG:added
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += cWsch * (
                ((0.12144) * getSMEFTCoeffEW("CHbox")
                + (-0.0304974) * getSMEFTCoeffEW("CHD")
                + (0.0026863) * getSMEFTCoeffEW("CHW")
                + (0.0006807) * getSMEFTCoeffEW("CHB")
                + (-0.001390866) * getSMEFTCoeffEW("CHWB")
                + (-0.003736) * getSMEFTCoeffEW("CHq1R", 0, 0)
                + (0.0005801) * getSMEFTCoeffEW("CHq1R", 1, 1)
                + (-0.0008496083) * getSMEFTCoeffEW("CHq1R", 2, 2)
                + (0.022385) * getSMEFTCoeffEW("CHq3R", 0, 0)
                + (0.0011312) * getSMEFTCoeffEW("CHq3R", 1, 1)
                + (0.0008529) * getSMEFTCoeffEW("CHq3R", 2, 2)
                + (0.732) * getSMEFTCoeffEW("CHG")
                + (-0.1225144) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (-1.0107) * getSMEFTCoeffEW("CuGR", 2, 2)
                + (0.32789) * getSMEFTCoeffEW("CG")
                + (-0.01679391) * getSMEFTCoeffEW("CuWR", 2, 2)
                + (-0.00592538) * getSMEFTCoeffEW("CuBR", 2, 2)
                + (0.04717) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2)
                + (0.67332) * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0)
                + (-0.002097) * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2)
                + (0.01284) * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1)
                + (0.14412) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                + (1.3958) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                + (0.005691) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2)
                + (0.072025) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1)
                + (0.048185) * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2)
                + (0.65757) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                + (0.0009062) * getSMEFTCoeffEW("CuuR", 1, 1, 2, 2)
                + (0.012541) * getSMEFTCoeffEW("CuuR", 1, 2, 2, 1)
                + (-0.0071052) * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                + (-0.000570256) * getSMEFTCoeffEW("Cud1R", 2, 2, 1, 1)
                + (0.09471) * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                + (0.007746) * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1)
                + (0.015989) * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                + (0.013192) * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                + (-0.00012464) * getSMEFTCoeffEW("Cqu1R", 1, 1, 2, 2)
                + (0.00025769) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1)
                + (0.25508) * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                + (0.16044) * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0)
                + (0.010784) * getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2)
                + (0.003061) * getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1)
                + (-0.003910363) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                + (-0.0003286955) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1)
                + (0.09472) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                + (0.007745) * getSMEFTCoeffEW("Cqd8R", 2, 2, 1, 1)
                + (-0.0612235) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0612235) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.061249) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ttH_pTH300_450()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_ttH_pTH450_Inf(const double sqrt_s) const //AG:added
{
    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += cWsch * (
                ((0.12111) * getSMEFTCoeffEW("CHbox")
                + (-0.030308) * getSMEFTCoeffEW("CHD")
                + (0.0044801) * getSMEFTCoeffEW("CHW")
                + (0.0011466) * getSMEFTCoeffEW("CHB")
                + (-0.00194247) * getSMEFTCoeffEW("CHWB")
                + (-0.1218236) * getSMEFTCoeffEW("CuHR", 2, 2)
                + (-1.07104) * getSMEFTCoeffEW("CuGR", 2, 2)
                + (0.33119) * getSMEFTCoeffEW("CG")
                + (-0.0285223) * getSMEFTCoeffEW("CuWR", 2, 2)
                + (-0.0104832) * getSMEFTCoeffEW("CuBR", 2, 2)
                + (0.11537) * getSMEFTCoeffEW("Cqq1R", 0, 0, 2, 2)
                + (1.4881) * getSMEFTCoeffEW("Cqq1R", 0, 2, 2, 0)
                + (-0.0030909) * getSMEFTCoeffEW("Cqq1R", 1, 1, 2, 2)
                + (0.023079) * getSMEFTCoeffEW("Cqq1R", 1, 2, 2, 1)
                + (0.33421) * getSMEFTCoeffEW("Cqq3R", 0, 0, 2, 2)
                + (2.9818) * getSMEFTCoeffEW("Cqq3R", 0, 2, 2, 0)
                + (0.010023) * getSMEFTCoeffEW("Cqq3R", 1, 1, 2, 2)
                + (0.11364) * getSMEFTCoeffEW("Cqq3R", 1, 2, 2, 1)
                + (0.11257) * getSMEFTCoeffEW("CuuR", 0, 0, 2, 2)
                + (1.4506) * getSMEFTCoeffEW("CuuR", 0, 2, 2, 0)
                + (0.0017341) * getSMEFTCoeffEW("CuuR", 1, 1, 2, 2)
                + (0.022496) * getSMEFTCoeffEW("CuuR", 1, 2, 2, 1)
                + (-0.015613057) * getSMEFTCoeffEW("Cud1R", 2, 2, 0, 0)
                + (-0.000929212) * getSMEFTCoeffEW("Cud1R", 2, 2, 1, 1)
                + (0.19582) * getSMEFTCoeffEW("Cud8R", 2, 2, 0, 0)
                + (0.01189) * getSMEFTCoeffEW("Cud8R", 2, 2, 1, 1)
                + (0.033516) * getSMEFTCoeffEW("Cqu1R", 0, 0, 2, 2)
                + (0.026074) * getSMEFTCoeffEW("Cqu1R", 2, 2, 0, 0)
                + (0.000103) * getSMEFTCoeffEW("Cqu1R", 1, 1, 2, 2)
                + (0.00040951) * getSMEFTCoeffEW("Cqu1R", 2, 2, 1, 1)
                + (0.54906) * getSMEFTCoeffEW("Cqu8R", 0, 0, 2, 2)
                + (0.3534) * getSMEFTCoeffEW("Cqu8R", 2, 2, 0, 0)
                + (0.017338) * getSMEFTCoeffEW("Cqu8R", 1, 1, 2, 2)
                + (0.0054804) * getSMEFTCoeffEW("Cqu8R", 2, 2, 1, 1)
                + (-0.00728397) * getSMEFTCoeffEW("Cqd1R", 2, 2, 0, 0)
                + (-0.000451772) * getSMEFTCoeffEW("Cqd1R", 2, 2, 1, 1)
                + (0.19585) * getSMEFTCoeffEW("Cqd8R", 2, 2, 0, 0)
                + (0.011884) * getSMEFTCoeffEW("Cqd8R", 2, 2, 1, 1)
                + (-0.0613195) * getSMEFTCoeffEW("CHl3R", 0, 0)
                + (-0.0613195) * getSMEFTCoeffEW("CHl3R", 1, 1)
                + (0.06135) * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)) * 1000000
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ttH_pTH450_Inf()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

const double NPSMEFTd6General::STXS12_tH(const double sqrt_s) const //AG:modified
{
    // To be fixed together with the UFO file when going beyond U(2)
    double STXSb = 1.0;

    /*double CiHQ3; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ3 = (getSMEFTCoeffEW("CHq3R", 0, 0) + getSMEFTCoeffEW("CHq3R", 1, 1) + getSMEFTCoeffEW("CHq3R", 2, 2)) / 3.0;*/

    if (sqrt_s == 13.0) {

        /*STXSb += (0.12 * getSMEFTCoeffEW("CHbox") - 0.0272 * getSMEFTCoeffEW("CHD") + 0.254 * getSMEFTCoeffEW("CHG") + 0.1808 * getSMEFTCoeffEW("CHW")
                - 0.0764 * getSMEFTCoeffEW("CuHR", 2, 2) + 0.119 * getSMEFTCoeffEW("CuGR", 2, 2) + 0.170 * getSMEFTCoeffEW("CuWR", 2, 2)
                - 0.2679 * 0.5 * (getSMEFTCoeffEW("CHl3R", 0, 0) + getSMEFTCoeffEW("CHl3R", 1, 1)) + 0.319 * CiHQ3
                + 0.1341 * getSMEFTCoeffEW("CllR", 0, 1, 1, 0)
                //+ 0.418 * Ciqq3
                ) * (1000000.0);*/

        //AG:begin
        return mutH(13.0);
        //AG:end
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_tH()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}


///////////////////////////////////////////////////////////////////////////////

const double NPSMEFTd6General::kappamueff() const {
    return sqrt(GammaHmumuRatio());
}

const double NPSMEFTd6General::kappataueff() const {
    return sqrt(GammaHtautauRatio());
}

const double NPSMEFTd6General::kappaceff() const {
    return sqrt(GammaHccRatio());
}

const double NPSMEFTd6General::kappaseff() const {
    return sqrt(GammaHssRatio());
}

const double NPSMEFTd6General::kappabeff() const {
    return sqrt(GammaHbbRatio());
}

const double NPSMEFTd6General::kappaGeff() const {
    return sqrt(GammaHggRatio());
}

const double NPSMEFTd6General::kappaZeff() const {
    return sqrt(GammaHZZRatio());
}

const double NPSMEFTd6General::kappaWeff() const {
    return sqrt(GammaHWWRatio());
}

const double NPSMEFTd6General::kappaZ4feff() const {
    return sqrt(GammaH4fNCRatio());
}

const double NPSMEFTd6General::kappaW4feff() const {
    return sqrt(GammaH4fCCRatio());
}

const double NPSMEFTd6General::kappaAeff() const {
    return sqrt(GammaHgagaRatio());
}

const double NPSMEFTd6General::kappaZAeff() const {
    return sqrt(GammaHZgaRatio());
}


/////////////Basic interactions of the so-called Higgs basis////////////////

const double NPSMEFTd6General::deltayt_HB(const double mu) const {
    double mf = mtpole;
    double d_h_mu, d_GF_mu;
    double ciHB;
    
    d_h_mu = (-getSMEFTCoeff("CHD", mu) / 4.0 + getSMEFTCoeff("CHbox", mu) ) * v2;
    d_GF_mu = ((getSMEFTCoeff("CHl3R", 0, 0, mu) + getSMEFTCoeff("CHl3R", 1, 1, mu) - 0.5 * (getSMEFTCoeff("CllR", 0, 1, 1, 0, mu) + getSMEFTCoeff("CllR", 1, 0, 0, 1, mu))) * v2);

    ciHB = -(v() / mf / sqrt(2.0)) * getSMEFTCoeff("CuHR", 2, 2, mu) * v2 + d_h_mu - 0.5 * d_GF_mu;

    return ciHB;
}

const double NPSMEFTd6General::deltayb_HB(const double mu) const {
    double mf = (quarks[BOTTOM].getMass());
    double d_h_mu, d_GF_mu;
    double ciHB;
    
    d_h_mu = (-getSMEFTCoeff("CHD", mu) / 4.0 + getSMEFTCoeff("CHbox", mu) ) * v2;
    d_GF_mu = ((getSMEFTCoeff("CHl3R", 0, 0, mu) + getSMEFTCoeff("CHl3R", 1, 1, mu) - 0.5 * (getSMEFTCoeff("CllR", 0, 1, 1, 0, mu) + getSMEFTCoeff("CllR", 1, 0, 0, 1, mu))) * v2);

    ciHB = -(v() / mf / sqrt(2.0)) * getSMEFTCoeff("CdHR", 2, 2, mu) * v2 + d_h_mu - 0.5 * d_GF_mu;

    return ciHB;
}

const double NPSMEFTd6General::deltaytau_HB(const double mu) const {
    double mf = (leptons[TAU].getMass());
    double d_h_mu, d_GF_mu;
    double ciHB;
    
    d_h_mu = (-getSMEFTCoeff("CHD", mu) / 4.0 + getSMEFTCoeff("CHbox", mu) ) * v2;
    d_GF_mu = ((getSMEFTCoeff("CHl3R", 0, 0, mu) + getSMEFTCoeff("CHl3R", 1, 1, mu) - 0.5 * (getSMEFTCoeff("CllR", 0, 1, 1, 0, mu) + getSMEFTCoeff("CllR", 1, 0, 0, 1, mu))) * v2);

    ciHB = -(v() / mf / sqrt(2.0)) * getSMEFTCoeff("CeHR", 2, 2, mu) * v2 + d_h_mu - 0.5 * d_GF_mu;

    return ciHB;
}

const double NPSMEFTd6General::deltayc_HB(const double mu) const {
    double mf = (quarks[CHARM].getMass());
    double d_h_mu, d_GF_mu;
    double ciHB;
    
    d_h_mu = (-getSMEFTCoeff("CHD", mu) / 4.0 + getSMEFTCoeff("CHbox", mu) ) * v2;
    d_GF_mu = ((getSMEFTCoeff("CHl3R", 0, 0, mu) + getSMEFTCoeff("CHl3R", 1, 1, mu) - 0.5 * (getSMEFTCoeff("CllR", 0, 1, 1, 0, mu) + getSMEFTCoeff("CllR", 1, 0, 0, 1, mu))) * v2);

    ciHB = -(v() / mf / sqrt(2.0)) * getSMEFTCoeff("CuHR", 1, 1, mu) * v2 + d_h_mu - 0.5 * d_GF_mu;

    return ciHB;
}

const double NPSMEFTd6General::deltays_HB(const double mu) const {
    double mf = (quarks[STRANGE].getMass());
    double d_h_mu, d_GF_mu;
    double ciHB;
    
    d_h_mu = (-getSMEFTCoeff("CHD", mu) / 4.0 + getSMEFTCoeff("CHbox", mu) ) * v2;
    d_GF_mu = ((getSMEFTCoeff("CHl3R", 0, 0, mu) + getSMEFTCoeff("CHl3R", 1, 1, mu) - 0.5 * (getSMEFTCoeff("CllR", 0, 1, 1, 0, mu) + getSMEFTCoeff("CllR", 1, 0, 0, 1, mu))) * v2);

    ciHB = -(v() / mf / sqrt(2.0)) * getSMEFTCoeff("CdHR", 1, 1, mu) * v2 + d_h_mu - 0.5 * d_GF_mu;

    return ciHB;
}

const double NPSMEFTd6General::deltaymu_HB(const double mu) const {
    double mf = (leptons[MU].getMass());
    double d_h_mu, d_GF_mu;
    double ciHB;

    d_h_mu = (-getSMEFTCoeff("CHD", mu) / 4.0 + getSMEFTCoeff("CHbox", mu) ) * v2;
    d_GF_mu = ((getSMEFTCoeff("CHl3R", 0, 0, mu) + getSMEFTCoeff("CHl3R", 1, 1, mu) - 0.5 * (getSMEFTCoeff("CllR", 0, 1, 1, 0, mu) + getSMEFTCoeff("CllR", 1, 0, 0, 1, mu))) * v2);

    ciHB = -(v() / mf / sqrt(2.0)) * getSMEFTCoeff("CeHR", 1, 1, mu) * v2 + d_h_mu - 0.5 * d_GF_mu;

    return ciHB;
}

const double NPSMEFTd6General::deltacZ_HB(const double mu) const {
    double d_h_mu, d_GF_mu;
    double ciHB;
    
    d_h_mu = (-getSMEFTCoeff("CHD", mu) / 4.0 + getSMEFTCoeff("CHbox", mu) ) * v2;
    d_GF_mu = ((getSMEFTCoeff("CHl3R", 0, 0, mu) + getSMEFTCoeff("CHl3R", 1, 1, mu) - 0.5 * (getSMEFTCoeff("CllR", 0, 1, 1, 0, mu) + getSMEFTCoeff("CllR", 1, 0, 0, 1, mu))) * v2);

    ciHB = d_h_mu - (3.0 / 2.0) * d_GF_mu;

    return ciHB;
}

const double NPSMEFTd6General::cZBox_HB(const double mu) const {
    double d_GF_mu;
    double ciHB;
    
    d_GF_mu = ((getSMEFTCoeff("CHl3R", 0, 0, mu) + getSMEFTCoeff("CHl3R", 1, 1, mu) - 0.5 * (getSMEFTCoeff("CllR", 0, 1, 1, 0, mu) + getSMEFTCoeff("CllR", 1, 0, 0, 1, mu))) * v2);

    ciHB = (sW2_tree / eeMz2)*(d_GF_mu + 0.5 * getSMEFTCoeff("CHD", mu) * v2);

    return ciHB;
}

const double NPSMEFTd6General::cZZ_HB(const double mu) const {
    double ciHB;

    ciHB = (4.0 * sW2_tree * cW2_tree / eeMz2)*(cW2_tree * getSMEFTCoeff("CHW", mu) + sW2_tree * getSMEFTCoeff("CHB", mu) + sW_tree * cW_tree * getSMEFTCoeff("CHWB", mu)) * v2;

    return ciHB;
}

const double NPSMEFTd6General::cZga_HB(const double mu) const {
    double ciHB;

    ciHB = (sW2_tree * cW2_tree / eeMz2)*(4.0 * getSMEFTCoeff("CHW", mu) - 4.0 * getSMEFTCoeff("CHB", mu) - (2.0 * (cW2_tree - sW2_tree) / sW_tree / cW_tree) * getSMEFTCoeff("CHWB", mu)) * v2;

    return ciHB;
}

const double NPSMEFTd6General::cgaga_HB(const double mu) const {
    double ciHB;

    ciHB = (4.0 / eeMz2)*(sW2_tree * getSMEFTCoeff("CHW", mu) + cW2_tree * getSMEFTCoeff("CHB", mu) - sW_tree * cW_tree * getSMEFTCoeff("CHWB", mu)) * v2;

    return ciHB;
}

const double NPSMEFTd6General::cgg_HB(const double mu) const {
    double ciHB;

    ciHB = (1.0 / (M_PI * AlsMz)) * getSMEFTCoeff("CHG", mu) * v2;

    return ciHB;
}

const double NPSMEFTd6General::cggEff_HB(const double mu) const {
    double ciHB;

    double m_t = mtpole;
    double m_b = quarks[BOTTOM].getMass();
    double m_c = quarks[CHARM].getMass();

    double At = deltayt_HB(mu) * AH_f(4.0 * m_t * m_t / mHl / mHl).real();
    double Ab = deltayb_HB(mu) * AH_f(4.0 * m_b * m_b / mHl / mHl).real();
    double Ac = deltayc_HB(mu) * AH_f(4.0 * m_c * m_c / mHl / mHl).real();

    ciHB = cgg_HB(mu) + (1.0 / 16.0 / M_PI / M_PI) * (At + Ab + Ac);

    return ciHB;
}

const double NPSMEFTd6General::lambz_HB(const double mu) const {
    double ciHB;

    ciHB = -(3.0 / 2.0)*(eeMz / sW_tree) * getSMEFTCoeff("CW", mu) * v2;

    return ciHB;
}

/////////////Combinations of Warsaw basis coefficients constrained by EWPO////////////////
//// Flavour properties to be checked ////////////////////////////////////////////////////

const double NPSMEFTd6General::CEWHL111() const {
    return getSMEFTCoeffEW("CHl1R", 0, 0) + (1.0 / 4.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHL122() const {
    return getSMEFTCoeffEW("CHl1R", 1, 1) + (1.0 / 4.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHL133() const {
    return getSMEFTCoeffEW("CHl1R", 2, 2) + (1.0 / 4.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHL311() const {
    return getSMEFTCoeffEW("CHl3R", 0, 0) + (1.0 / 4.0) * (cW2_tree / sW2_tree) * getSMEFTCoeffEW("CHD") + (cW_tree / sW_tree) * getSMEFTCoeffEW("CHWB");
}

const double NPSMEFTd6General::CEWHL322() const {
    return getSMEFTCoeffEW("CHl3R", 1, 1) + (1.0 / 4.0) * (cW2_tree / sW2_tree) * getSMEFTCoeffEW("CHD") + (cW_tree / sW_tree) * getSMEFTCoeffEW("CHWB");
}

const double NPSMEFTd6General::CEWHL333() const {
    return getSMEFTCoeffEW("CHl3R", 2, 2) + (1.0 / 4.0) * (cW2_tree / sW2_tree) * getSMEFTCoeffEW("CHD") + (cW_tree / sW_tree) * getSMEFTCoeffEW("CHWB");
}

const double NPSMEFTd6General::CEWHQ111() const {
    return getSMEFTCoeffEW("CHq1R", 0, 0) - (1.0 / 12.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHQ122() const {
    return getSMEFTCoeffEW("CHq1R", 1, 1) - (1.0 / 12.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHQ133() const {
    return getSMEFTCoeffEW("CHq1R", 2, 2) - (1.0 / 12.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHQ311() const {
    return getSMEFTCoeffEW("CHq3R", 0, 0) + (1.0 / 4.0) * (cW2_tree / sW2_tree) * getSMEFTCoeffEW("CHD") + (cW_tree / sW_tree) * getSMEFTCoeffEW("CHWB");
}

const double NPSMEFTd6General::CEWHQ322() const {
    return getSMEFTCoeffEW("CHq3R", 1, 1) + (1.0 / 4.0) * (cW2_tree / sW2_tree) * getSMEFTCoeffEW("CHD") + (cW_tree / sW_tree) * getSMEFTCoeffEW("CHWB");
}

const double NPSMEFTd6General::CEWHQ333() const {
    return getSMEFTCoeffEW("CHq3R", 2, 2) + (1.0 / 4.0) * (cW2_tree / sW2_tree) * getSMEFTCoeffEW("CHD") + (cW_tree / sW_tree) * getSMEFTCoeffEW("CHWB");
}

const double NPSMEFTd6General::CEWHQd33() const {
    return 0.5 * (CEWHQ133() + CEWHQ333());
}

const double NPSMEFTd6General::CEWHQu33() const {
    return 0.5 * (CEWHQ133() - CEWHQ333());
}

const double NPSMEFTd6General::CEWHe11() const {
    return getSMEFTCoeffEW("CHeR", 0, 0) + (1.0 / 2.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHe22() const {
    return getSMEFTCoeffEW("CHeR", 1, 1) + (1.0 / 2.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHe33() const {
    return getSMEFTCoeffEW("CHeR", 2, 2) + (1.0 / 2.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHu11() const {
    return getSMEFTCoeffEW("CHuR", 0, 0) - (1.0 / 3.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHu22() const {
    return getSMEFTCoeffEW("CHuR", 1, 1) - (1.0 / 3.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHu33() const {
    return getSMEFTCoeffEW("CHuR", 2, 2) - (1.0 / 3.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHd11() const {
    return getSMEFTCoeffEW("CHdR", 0, 0) + (1.0 / 6.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHd22() const {
    return getSMEFTCoeffEW("CHdR", 1, 1) + (1.0 / 6.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHd33() const {
    return getSMEFTCoeffEW("CHdR", 2, 2) + (1.0 / 6.0) * getSMEFTCoeffEW("CHD");
}

//-----  The same, in the quark mass basis  ----------

const double NPSMEFTd6General::CEWHQ1uu() const {
    return CHq1EWuu - (1.0 / 12.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHQ1cc() const {
    return CHq1EWcc - (1.0 / 12.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHQ1tt() const {
    return CHq1EWtt - (1.0 / 12.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHQ1dd() const {
    return CHq1EWdd - (1.0 / 12.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHQ1ss() const {
    return CHq1EWss - (1.0 / 12.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHQ1bb() const {
    return CHq1EWbb - (1.0 / 12.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHQ3uu() const {
    return CHq3EWuu + (1.0 / 4.0) * (cW2_tree / sW2_tree) * getSMEFTCoeffEW("CHD") + (cW_tree / sW_tree) * getSMEFTCoeffEW("CHWB");
}

const double NPSMEFTd6General::CEWHQ3cc() const {
    return CHq3EWcc + (1.0 / 4.0) * (cW2_tree / sW2_tree) * getSMEFTCoeffEW("CHD") + (cW_tree / sW_tree) * getSMEFTCoeffEW("CHWB");
}

const double NPSMEFTd6General::CEWHQ3tt() const {
    return CHq3EWtt + (1.0 / 4.0) * (cW2_tree / sW2_tree) * getSMEFTCoeffEW("CHD") + (cW_tree / sW_tree) * getSMEFTCoeffEW("CHWB");
}

const double NPSMEFTd6General::CEWHQ3dd() const {
    return CHq3EWdd + (1.0 / 4.0) * (cW2_tree / sW2_tree) * getSMEFTCoeffEW("CHD") + (cW_tree / sW_tree) * getSMEFTCoeffEW("CHWB");
}

const double NPSMEFTd6General::CEWHQ3ss() const {
    return CHq3EWss + (1.0 / 4.0) * (cW2_tree / sW2_tree) * getSMEFTCoeffEW("CHD") + (cW_tree / sW_tree) * getSMEFTCoeffEW("CHWB");
}

const double NPSMEFTd6General::CEWHQ3bb() const {
    return CHq3EWbb + (1.0 / 4.0) * (cW2_tree / sW2_tree) * getSMEFTCoeffEW("CHD") + (cW_tree / sW_tree) * getSMEFTCoeffEW("CHWB");
}


const double NPSMEFTd6General::CEWHuuu() const {
    return CHuEWuu - (1.0 / 3.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHucc() const {
    return CHuEWcc - (1.0 / 3.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHutt() const {
    return CHuEWtt - (1.0 / 3.0) * getSMEFTCoeffEW("CHD");
}


const double NPSMEFTd6General::CEWHddd() const {
    return CHdEWdd + (1.0 / 6.0) * getSMEFTCoeffEW("CHD");
}

const double NPSMEFTd6General::CEWHdss() const {
    return CHdEWss + (1.0 / 6.0) * getSMEFTCoeffEW("CHD");
}


const double NPSMEFTd6General::CEWHdbb() const {
    return CHdEWbb + (1.0 / 6.0) * getSMEFTCoeffEW("CHD");
}


///////////Collider observables: LHC dilepton events////////////////////////

const double NPSMEFTd6General::NevLHCppee13(const int i_bin) const {
    // HighPT parameterization: Same operators in the UP and DOWN bases
    double Civect[49] = {
        1., getSMEFTCoeffEW("Clq1R", 0, 0, 0, 0), getSMEFTCoeffEW("Clq1R", 0, 0, 1, 1), getSMEFTCoeffEW("Clq1R", 0, 0, 2, 2), getSMEFTCoeffEW("Clq3R", 0, 0, 0, 0), getSMEFTCoeffEW("Clq3R", 0, 0, 1, 1), getSMEFTCoeffEW("Clq3R", 0, 0, 2, 2), getSMEFTCoeffEW("CqeR", 0, 0, 0, 0), getSMEFTCoeffEW("CqeR", 1, 1, 0, 0), getSMEFTCoeffEW("CqeR", 2, 2, 0, 0), getSMEFTCoeffEW("CluR", 0, 0, 0, 0), getSMEFTCoeffEW("CluR", 0, 0, 1, 1), getSMEFTCoeffEW("CldR", 0, 0, 0, 0), getSMEFTCoeffEW("CldR", 0, 0, 1, 1), getSMEFTCoeffEW("CldR", 0, 0, 2, 2), getSMEFTCoeffEW("CeuR", 0, 0, 0, 0), getSMEFTCoeffEW("CeuR", 0, 0, 1, 1), getSMEFTCoeffEW("CedR", 0, 0, 0, 0), getSMEFTCoeffEW("CedR", 0, 0, 1, 1), getSMEFTCoeffEW("CedR", 0, 0, 2, 2), getSMEFTCoeffEW("CHl1R", 0, 0), getSMEFTCoeffEW("CHl3R", 0, 0), getSMEFTCoeffEW("CHeR", 0, 0), getSMEFTCoeffEW("CHq1R", 0, 0), getSMEFTCoeffEW("CHq1R", 1, 1), getSMEFTCoeffEW("CHq1R", 2, 2), getSMEFTCoeffEW("CHq3R", 0, 0), getSMEFTCoeffEW("CHq3R", 1, 1), getSMEFTCoeffEW("CHq3R", 2, 2), getSMEFTCoeffEW("CHuR", 0, 0), getSMEFTCoeffEW("CHuR", 1, 1), getSMEFTCoeffEW("CHdR", 0, 0), getSMEFTCoeffEW("CHdR", 1, 1), getSMEFTCoeffEW("CHdR", 2, 2), getSMEFTCoeffEW("Clq1R", 0, 0, 0, 1), getSMEFTCoeffEW("Clq1R", 0, 0, 0, 2), getSMEFTCoeffEW("Clq1R", 0, 0, 1, 2), getSMEFTCoeffEW("Clq3R", 0, 0, 0, 1), getSMEFTCoeffEW("Clq3R", 0, 0, 0, 2), getSMEFTCoeffEW("Clq3R", 0, 0, 1, 2), getSMEFTCoeffEW("CqeR", 0, 1, 0, 0), getSMEFTCoeffEW("CqeR", 0, 2, 0, 0), getSMEFTCoeffEW("CqeR", 1, 2, 0, 0), getSMEFTCoeffEW("CHq1R", 0, 1), getSMEFTCoeffEW("CHq1R", 0, 2), getSMEFTCoeffEW("CHq1R", 1, 2), getSMEFTCoeffEW("CHq3R", 0, 1), getSMEFTCoeffEW("CHq3R", 0, 2), getSMEFTCoeffEW("CHq3R", 1, 2)
    };

    // UP Basis
    // HighPT parameterization in the basis aligned with diagonal up sector (i.e. d_i = V d_m to pass to mass eigenstate basis)
        double NevCiU[47][49] = {
            {51384., -1773672408., 935827281., 322616868., 9214700536., 2689094332., 322616868., -1648224837., -636336896., -96300386., -1581273652., -258268033., 648984080., 280968221., 56751944., -3793764076., -612422966., 1559597218., 684481456., 132219112., 1461058961., 1461058961., -492814138., -26709280., 134781829., 37999940., 891683195., 283271948., 37999940., 153288970., 24786137., -63447390., -28009746., -5397106., 930558415., -15574669., 114766296., 930558415., -15574669., 114766296., -288130832., 4787395., -35359871., 108981609., -1769292., 13156097., 108981609., -1769292., 13156097.},
            {36944., -1619517626., 786463255., 276281189., 8399104218., 2289342193., 276281189., -1432551096., -550103221., -82580184., -1473790463., -234226473., 608530445., 248283556., 47770624., -3502904607., -527071397., 1425383247., 586341631., 112378841., 1060950722., 1060950722., -350803782., -23792812., 94714052., 25491152., 659718593., 192295687., 25491152., 113920113., 16007431., -46743544., -18853593., -3567938., 903162071., -12193033., 96268968., 903162071., -12193033., 96268968., -253565094., 3777541., -28859319., 85082625., -1135343., 9000896., 85082625., -1135343., 9000896.},
            {26488., -1455252063., 653831573., 217675777., 7255555181., 1819193551., 217675777., -1298456865., -420469815., -60312999., -1318490741., -175896474., 559858934., 207121597., 40564016., -3052922520., -409822655., 1263996306., 475662042., 90595008., 740645690., 740645690., -230095308., -22786173., 62842787., 16676226., 461457359., 127160571., 16676226., 79982287., 10391157., -31621993., -12334313., -2278417., 811347485., -9137116., 77101631., 811347485., -9137116., 77101631., -234528720., 2765266., -22936350., 60637022., -717460., 5941216., 60637022., -717460., 5941216.},
            {19618.8, -1319630813., 557011555., 179583245., 6235399887., 1550660676., 179583245., -1158900913., -343246787., -46811808., -1214891759., -162051798., 513789147., 182354662., 35072677., -2669387344., -354202395., 1100288250., 405050511., 75793857., 528677820., 528677820., -158640894., -14368980., 41396116., 11060983., 332410144., 85950147., 11060983., 56346217., 7241392., -22833219., -8079246., -1523800., 684745949., -7939162., 66261549., 684745949., -7939162., 66261549., -185943629., 2054592., -17470713., 46500199., -432013., 3945288., 46500199., -432013., 3945288.},
            {14662.8, -1149604854., 449511216., 147611883., 5448286879., 1258452321., 147611883., -1016053816., -274289186., -41470338., -1070746846., -129151843., 449406322., 154604094., 28085301., -2333966645., -288157502., 960347677., 334000104., 62188930., 385561189., 385561189., -113090707., -13579919., 31206066., 8054452., 242211297., 61582444., 8054452., 41665323., 4809842., -16352488., -5844295., -1111956., 631736061., -5735921., 52911868., 631736061., -5735921., 52911868., -165228344., 1498254., -13823590., 33124775., -321402., 2881069., 33124775., -321402., 2881069.},
            {11160.6, -1093724119., 387013523., 120809041., 4851194976., 1074309927., 120809041., -944829664., -233285862., -29452138., -1015515023., -114659400., 385669514., 135521314., 23994227., -2135396134., -244837205., 831002486., 286288177., 50953686., 290550112., 290550112., -80976550., -13442291., 22131950., 5460927., 183224340., 44384244., 5460927., 31543511., 3539643., -12072779., -4134609., -749755., 559904532., -4826450., 45577126., 559904532., -4826450., 45577126., -149391327., 1139749., -11396756., 25180888., -222925., 2080170., 25180888., -222925., 2080170.},
            {8716.2, -1006630165., 336775666., 100665706., 4251881707., 902050295., 100665706., -807437768., -201535472., -24603858., -880221968., -94540599., 329295619., 108950186., 20139071., -1887900887., -202423895., 717374946., 237260953., 42622441., 222793010., 222793010., -62104413., -11709242., 16644937., 3986058., 142111130., 32739958., 3986058., 24623343., 2553366., -9265724., -3048657., -538269., 489256483., -3992893., 38668546., 489256483., -3992893., 38668546., -134895651., 998378., -10134607., 19755562., -157421., 1541754., 19755562., -157421., 1541754.},
            {6782., -918811858., 282636287., 84897927., 3853221162., 758357122., 84897927., -720687633., -166914403., -21650127., -815296013., -80853738., 310296833., 96071914., 16601718., -1709729518., -170692380., 651193189., 202485518., 35743777., 170894661., 170894661., -47204365., -9175213., 12244350., 2942297., 109711902., 24325269., 2942297., 19048252., 1910155., -7080868., -2264319., -397175., 461698074., -2912962., 32066993., 461698074., -2912962., 32066993., -105891538., 817262., -8125608., 15597997., -108338., 1134782., 15597997., -108338., 1134782.},
            {5385.6, -874871603., 250288003., 71697801., 3453707990., 657148499., 71697801., -640195137., -141231236., -18047802., -739102718., -69681040., 278155973., 85432321., 14482847., -1559873468., -146396486., 580792464., 177078138., 30625113., 135883527., 135883527., -36527360., -7812013., 9757899., 2200080., 87691739., 18613770., 2200080., 14929499., 1405212., -5703389., -1753617., -300017., 407560293., -2531571., 28105860., 407560293., -2531571., 28105860., -100729054., 587896., -6749522., 12559912., -81388.8, 883684., 12559912., -81388.8, 883684.},
            {4250.2, -821222240., 220109482., 59891098., 3091379330., 558466022., 59891098., -608094203., -125527583., -14206269., -683198362., -58031801., 238178047., 70803357., 12534794., -1411299958., -122069952., 506493941., 150107624., 25847661., 104964401., 104964401., -27569121., -5380585., 7100980., 1670911., 67680670., 14098144., 1670911., 11464777., 1108239., -4366188., -1286472., -224236., 363712094., -2076389., 24139709., 363712094., -2076389., 24139709., -91927042., 564104., -6307085., 10022195., -54872.5, 652968., 10022195., -54872.5, 652968.},
            {3399.8, -700268314., 186236342., 51726203., 2746136716., 486218213., 51726203., -494365199., -102260387., -11711469., -585263490., -52661058., 221246210., 64613269., 10509064., -1242584623., -108977239., 459944576., 131147066., 21861896., 85316126., 85316126., -22515776., -5089172., 5806013., 1248938., 55530572., 11142339., 1248938., 9505702., 843397., -3579905., -1022180., -167920., 334897153., -1613839., 20685113., 334897153., -1613839., 20685113., -80702915., 358803., -4829670., 8167039., -43905.4, 528097., 8167039., -43905.4, 528097.},
            {2743.8, -633413596., 166567691., 43454546., 2474258627., 427538431., 43454546., -499744296., -92190828., -10433872., -551257686., -46512638., 196725305., 55264855., 9029796., -1120982812., -94376804., 413760026., 113637629., 18711856., 68520314., 68520314., -18677402., -4669809., 4442168., 984930., 45301745., 8604243., 984930., 7913318., 655720., -2890595., -785358., -132826., 304007822., -1390916., 18398750., 304007822., -1390916., 18398750., -77961973., 260756., -4221196., 6726525., -29622.4, 401060., 6726525., -29622.4, 401060.},
            {2204., -610048651., 153394145., 37706510., 2263524709., 371281715., 37706510., -432354463., -83507189., -8579688., -488682251., -37900141., 176588928., 46050567., 8038124., -1027512496., -78625739., 372321140., 98330135., 16343230., 56315725., 56315725., -14256364., -3908066., 3649889., 762760., 36942244., 6876281., 762760., 6288045., 503270., -2339872., -627835., -102052., 275249104., -1180385., 16251063., 275249104., -1180385., 16251063., -69865701., 306518., -4162614., 5488404., -23873.6, 325773., 5488404., -23873.6, 325773.},
            {1833.9, -566104843., 122750757., 31523935., 2048989368., 317351622., 31523935., -386596385., -72410277., -8014668., -453292864., -34196940., 163387454., 41558271., 6475595., -941455988., -70140964., 336808312., 85332112., 13592522., 46009106., 46009106., -11865869., -3848703., 2888246., 592438., 30473902., 5470359., 592438., 5423451., 403121., -1850887., -495257., -79823.4, 254273757., -789431., 13454970., 254273757., -789431., 13454970., -58832185., 252080., -3472479., 4454163., -18336.8, 259040., 4454163., -18336.8, 259040.},
            {1598.3, -509877156., 111833845., 27578438., 1845191585., 283179401., 27578438., -344810256., -58673954., -6616667., -406409331., -29811490., 149859834., 36883968., 5632850., -848642696., -61453952., 306625803., 74685715., 11768133., 38971163., 38971163., -9446207., -2865284., 2348134., 480500., 25772809., 4391895., 480500., 4387775., 320384., -1614866., -390380., -63715.2, 229284492., -710668., 12128052., 229284492., -710668., 12128052., -56609691., 108651., -2647662., 3942308., -11709.1, 205868., 3942308., -11709.1, 205868.},
            {1268.16, -472267555., 103805828., 23924983., 1690465438., 254769526., 23924983., -314774221., -56163731., -5848985., -379182647., -27256351., 139390407., 32749775., 4996022., -782605135., -54798664., 280781261., 67636280., 10347309., 32070544., 32070544., -8253637., -2637801., 1925766., 377045., 21487306., 3607733., 377045., 3774921., 262237., -1332735., -321806., -50588.2, 209611480., -649844., 11090555., 209611480., -649844., 11090555., -46937284., 176952., -2645869., 3246994., -9798.34, 170394., 3246994., -9798.34, 170394.},
            {1067.72, -423582571., 94401461., 21097246., 1538175761., 224331550., 21097246., -278887882., -47699372., -4978102., -340024207., -22586727., 127079243., 28758040., 4496975., -707919155., -46900273., 255730024., 59464943., 9181597., 27098579., 27098579., -6911214., -2310429., 1602326., 305213., 18234489., 2953890., 305213., 3219798., 210640., -1114698., -265515., -40962.7, 194063421., -513341., 9811105., 194063421., -513341., 9811105., -42240495., 147494., -2320579., 2771948., -7299.32, 139960., 2771948., -7299.32, 139960.},
            {893.48, -393401905., 79775501., 18270972., 1416344406., 197559200., 18270972., -257907267., -40874670., -4299186., -312238589., -19838237., 114926051., 26105128., 3914484., -651301829., -42061777., 233294121., 52465023., 7970687., 22813219., 22813219., -6006672., -1760802., 1323275., 243593., 15500396., 2432913., 243593., 2743191., 175572., -970275., -213758., -32280.2, 181809591., -335996., 8441406., 181809591., -335996., 8441406., -40513540., 89032.4, -1954192., 2434361., -4854.31, 114876., 2434361., -4854.31, 114876.},
            {741.54, -385448284., 72478741., 16328915., 1305811680., 175000437., 16328915., -263689075., -38871074., -3797197., -301994222., -18141205., 100265391., 21927106., 3458697., -611507092., -37067325., 209234477., 45545261., 7070422., 19346329., 19346329., -4750569., -1628492., 1112808., 199746., 13023951., 2033807., 199746., 2258727., 142877., -802110., -180526., -26503.7, 164076591., -283526., 7516025., 164076591., -283526., 7516025., -41290737., 60822.7, -1837318., 2011404., -4375.92, 96815.5, 2011404., -4375.92, 96815.5},
            {640.8, -348534770., 66485933., 14010568., 1199343790., 157167102., 14010568., -232153760., -32315511., -3132695., -275624150., -15810955., 95575139., 21034525., 3054769., -560329457., -32689956., 194716130., 41891654., 6130635., 16758537., 16758537., -4172582., -1495393., 949033., 164008., 11372759., 1711612., 164008., 1996038., 118164., -700319., -152764., -21559.2, 152925994., -227821., 6818136., 152925994., -227821., 6818136., -35831687., 35488.5, -1504867., 1759729., -3267.17, 81805.5, 1759729., -3267.17, 81805.5},
            {779.76, -470352942., 87031494., 18043921., 1599902474., 207131114., 18043921., -300646087., -44663299., -4237910., -364275576., -21269265., 129254075., 26152013., 3797305., -747364569., -43546858., 260181740., 53900336., 7793341., 20356093., 20356093., -4938926., -1812602., 1113461., 193609., 13806903., 2021370., 193609., 2430815., 141287., -837735., -175213., -26026., 203701021., -283530., 8979482., 203701021., -283530., 8979482., -45086760., 91566.9, -2136727., 2160297., -3091.56, 95665.3, 2160297., -3091.56, 95665.3},
            {629.76, -430282540., 75067849., 15235743., 1419725107., 176423590., 15235743., -273626756., -36886051., -3484618., -326937027., -18360546., 110031057., 23307904., 3215877., -669373758., -36765054., 226173487., 46405939., 6570100., 16345477., 16345477., -3879601., -1670801., 860990., 146571., 11129324., 1561406., 146571., 1970177., 109091., -660718., -135417., -19569.2, 179942134., -195330., 7647032., 179942134., -195330., 7647032., -44101453., 1395.45, -1633196., 1715691., -2035.97, 73811.2, 1715691., -2035.97, 73811.2},
            {513.69, -387202859., 66118629., 12644651., 1303551211., 152209936., 12644651., -237803329., -30867038., -3062866., -299066898., -15040824., 106909959., 19526522., 2642482., -609296171., -30944634., 210621654., 39337631., 5461922., 13193700., 13193700., -3346535., -1274836., 681687., 111664., 9137436., 1219683., 111664., 1628064., 83416.9, -556749., -105317., -14714.7, 170204992., -57742.8, 6576585., 170204992., -57742.8, 6576585., -33045476., 40587.8, -1428362., 1453586., -726.639, 57371.8, 1453586., -726.639, 57371.8},
            {412.77, -352947719., 56635618., 10662215., 1147830363., 130932548., 10662215., -227176792., -29014201., -2395956., -266041229., -13552534., 87716514., 16558653., 2329574., -541905488., -27144024., 181724622., 33769112., 4670883., 10685202., 10685202., -2807198., -1092897., 541322., 86239.1, 7476677., 964342., 86239.1, 1365277., 65260.5, -449183., -82953.9, -11372.4, 148087376., -36667.2, 5652085., 148087376., -36667.2, 5652085., -36764392., -1793.66, -1347041., 1189478., -277.695, 45310.6, 1189478., -277.695, 45310.6},
            {330.15, -323739291., 50109923., 8934459., 1020707641., 113429442., 8934459., -203156672., -23502933., -2147081., -244449443., -11337632., 79725320., 14910340., 1895523., -489876054., -22966242., 161500371., 29613174., 3884616., 8863313., 8863313., -2172616., -908213., 435291., 65994.6, 6165354., 765761., 65994.6, 1100176., 50968.8, -371678., -64657.5, -8715.83, 130071092., -29422.1, 4950766., 130071092., -29422.1, 4950766., -31237605., -19254.3, -1052235., 989035., 82.0681, 36059.6, 989035., 82.0681, 36059.6},
            {266.91, -292072487., 43048578., 7552099., 924352669., 97883298., 7552099., -179908990., -20901811., -1688768., -219132316., -9935568., 71912219., 12088775., 1647811., -440038693., -19905577., 144917744., 24683628., 3303391., 7247191., 7247191., -1749290., -786634., 351941., 51894., 5042274., 616955., 51894., 899760., 41032.5, -298730., -53368.6, -6889.89, 119810051., 39094.5, 4217560., 119810051., 39094.5, 4217560., -26110518., -335.398, -961584., 801438., 75.9369, 29173.8, 801438., 75.9369, 29173.8},
            {243.474, -254669646., 38670168., 6492932., 821169543., 85328943., 6492932., -150751859., -17362688., -1488114., -192394902., -8223420., 67157391., 11102041., 1369404., -391457324., -16912718., 132056407., 22082483., 2797444., 6016051., 6016051., -1445931., -653598., 284407., 41242.4, 4201063., 495709., 41242.4, 748824., 33008.1, -250146., -41749.1, -5452.02, 107899055., 53487.6, 3703865., 107899055., 53487.6, 3703865., -22277682., -1850.43, -812219., 674788., 307.792, 23301.2, 674788., 307.792, 23301.2},
            {186.687, -228917627., 33485648., 5453160., 738546114., 75156257., 5453160., -135905729., -16522698., -1223647., -169794792., -7502215., 58625232., 9012214., 1199132., -349849934., -15131832., 117667649., 18699410., 2395116., 5002456., 5002456., -1202751., -568184., 229950., 32693.2, 3504636., 402746., 32693.2, 633222., 26939.4, -205248., -33600.9, -4365.23, 97776196., 71172.6, 3239215., 97776196., 71172.6, 3239215., -21307835., -280.581, -784956., 561746., 362.898, 18846.5, 561746., 362.898, 18846.5},
            {159.942, -222524310., 29630461., 4759232., 677153721., 65964096., 4759232., -142400658., -13822445., -1056993., -168669082., -6630308., 49851943., 8554217., 1018871., -329262935., -13227302., 103152806., 16851381., 2058560., 4208493., 4208493., -998776., -478362., 187383., 25515.5, 2957503., 326111., 25515.5, 530843., 21519.2, -173282., -26917.7, -3380.4, 87546706., 75095.4, 2841486., 87546706., 75095.4, 2841486., -21077689., -32876.8, -607408., 479301., 480.774, 15195.8, 479301., 480.774, 15195.8},
            {134.403, -200546265., 26504568., 4090799., 616307705., 57509491., 4090799., -121482826., -12206511., -938076., -152052968., -5612937., 47958254., 7095858., 872150., -300291133., -11304274., 95917325., 14375317., 1771938., 3529275., 3529275., -874552., -407163., 157639., 20788.4, 2502808., 270580., 20788.4, 453520., 17365.5, -148677., -22456.5, -2752.53, 80892907., 98729.3, 2473656., 80892907., 98729.3, 2473656., -17359914., -14913.1, -563342., 406583., 452.703, 12658.8, 406583., 452.703, 12658.8},
            {180.095, -289303496., 37940486., 5594290., 894716932., 82281501., 5594290., -176692692., -17425230., -1181009., -218052205., -7910220., 70050982., 10119945., 1223877., -431490093., -16055642., 139710837., 20489473., 2432770., 4752272., 4752272., -1112761., -558273., 204442., 25581.2, 3355186., 349795., 25581.2, 601624., 22598.9, -196584., -28669.4, -3357.78, 118308475., 159264., 3541260., 118308475., 159264., 3541260., -24971363., -19610.9, -820206., 546851., 743.342, 16331.8, 546851., 743.342, 16331.8},
            {136.905, -256467423., 30773000., 4360929., 762112850., 66092931., 4360929., -148160420., -14474652., -1033579., -183732571., -6425079., 58517213., 8079518., 930456., -370249720., -12819415., 117621557., 16344460., 1896394., 3604704., 3604704., -868599., -474318., 149805., 18271., 2570801., 254968., 18271., 474102., 16290.9, -147178., -20730., -2405.2, 99676225., 163654., 2831084., 99676225., 163654., 2831084., -22762001., -35574.5, -655774., 412504., 649.919, 11858., 412504., 649.919, 11858.},
            {105.805, -218025635., 25430584., 3433728., 649418640., 55547346., 3433728., -123700195., -12311498., -767773., -154289936., -5609635., 49001847., 6643784., 751433., -314275517., -11043220., 99390285., 13510921., 1502250., 2777177., 2777177., -678385., -353074., 113609., 13093.1, 1989135., 193089., 13093.1, 365742., 12352.4, -115273., -15546.2, -1741.85, 85444677., 151782., 2367709., 85444677., 151782., 2367709., -19518360., -31308.7, -558363., 324150., 580.877, 8955.9, 324150., 580.877, 8955.9},
            {79.795, -197449865., 21581311., 2761963., 563450145., 45663664., 2761963., -112164759., -9877226., -634664., -136782391., -4331793., 40828381., 5576207., 583275., -276224446., -8770853., 84283135., 11185580., 1189421., 2169985., 2169985., -500146., -284386., 85779.9, 9484.29, 1546655., 144259., 9484.29, 283507., 8994.15, -87743.8, -11440., -1244.56, 72848012., 141010., 1958662., 72848012., 141010., 1958662., -18190712., -43909.2, -444009., 251697., 504.495, 6677.67, 251697., 504.495, 6677.67},
            {64.215, -166549696., 18255215., 2206138., 486524332., 38040887., 2206138., -91905587., -8143852., -466278., -116250558., -3654531., 36720921., 4595998., 492353., -236982849., -7202013., 74079827., 9176974., 968985., 1723620., 1723620., -399037., -232055., 65423., 7070.33, 1236912., 108586., 7070.33, 225484., 6714.79, -70963., -8436.81, -927.805, 64294912., 144990., 1622436., 64294912., 144990., 1622436., -14711352., -35741.3, -357969., 202592., 485.506, 4963.26, 202592., 485.506, 4963.26},
            {52.115, -145074458., 15143153., 1803457., 421050387., 31469082., 1803457., -78499645., -6850375., -426023., -102410507., -3009457., 32806578., 3647361., 380132., -205956927., -5943106., 64309129., 7437690., 778243., 1336108., 1336108., -328946., -181898., 50802.4, 5247., 968761., 84342.2, 5247., 179727., 5169.06, -55745.6, -6670.57, -689.603, 55927624., 142972., 1323963., 55927624., 142972., 1323963., -11084432., -18758.4, -312029., 158914., 386.792, 3862.75, 158914., 386.792, 3862.75},
            {41.3115, -130865650., 12846380., 1462387., 366077480., 27116104., 1462387., -68755434., -5937866., -333968., -87624709., -2664297., 27111029., 3196612., 315178., -179508493., -5224231., 54621840., 6424898., 635620., 1068308., 1068308., -253790., -152807., 39446.8, 3817.45, 772244., 65678.2, 3817.45, 144233., 4008.12, -43230.6, -5081.29, -508.712, 47609232., 118315., 1144796., 47609232., 118315., 1144796., -10898143., -27370.8, -260561., 125409., 312.231, 3012.63, 125409., 312.231, 3012.63},
            {39.357, -137554725., 12973060., 1396130., 378342558., 26981057., 1396130., -75474659., -5741987., -312971., -93938123., -2499325., 27211945., 3135594., 300148., -187568224., -5063758., 55480835., 6308531., 604514., 1008231., 1008231., -243860., -148720., 36151.9, 3360.69, 733514., 60039.2, 3360.69, 137882., 3716.7, -41053., -4598.29, -440.58, 48970897., 129114., 1139215., 48970897., 129114., 1139215., -11511733., -33039.6, -253860., 119140., 321.569, 2732.92, 119140., 321.569, 2732.92},
            {30.5148, -116949666., 10827859., 1106249., 322848219., 21895127., 1106249., -63818610., -4630390., -253404., -80055726., -1995277., 24289941., 2594417., 236784., -160248917., -4028057., 48538493., 5135761., 479051., 783867., 783867., -181550., -117091., 27239.1, 2442.02, 568338., 44735., 2442.02, 106372., 2741.48, -31500.5, -3364.26, -321.332, 42226773., 123487., 919364., 42226773., 123487., 919364., -9929432., -31910.3, -201271., 92481.1, 268.317, 2024.54, 92481.1, 268.317, 2024.54},
            {23.7774, -105933477., 8975583., 866772., 279032193., 18362209., 866772., -58295822., -3981042., -194735., -71980495., -1714974., 19992132., 2136448., 186252., -140809063., -3417432., 40443544., 4259834., 375024., 614602., 614602., -137151., -97615.6, 20610.1, 1735.4, 444815., 33755.1, 1735.4, 83452.4, 2035.34, -24220.1, -2522.16, -226.799, 35542033., 104546., 770781., 35542033., 104546., 770781., -8523668., -27444.8, -172546., 71404., 214.347, 1526.1, 71404., 214.347, 1526.1},
            {19.1136, -86730596., 7598310., 695333., 236945698., 15514923., 695333., -44672211., -3242375., -147515., -57625736., -1400864., 17385201., 1729524., 156174., -117478311., -2866670., 34975434., 3491618., 305999., 488455., 488455., -112897., -74497.6, 16105.2, 1281.52, 355921., 26426.8, 1281.52, 66561.4, 1577.29, -19753.3, -1929.47, -167.388, 30992240., 95951.5, 647345., 30992240., 95951.5, 647345., -7123977., -23126.5, -143260., 58250.9, 187.152, 1181.38, 58250.9, 187.152, 1181.38},
            {15.0264, -75834089., 6282257., 563237., 204462881., 12822988., 563237., -38321902., -2718188., -132625., -50136665., -1210209., 14951908., 1450888., 118274., -101702637., -2392869., 29856844., 2885302., 242015., 380064., 380064., -89827.1, -59919.3, 12305., 941.566, 278603., 20146.1, 941.566, 52342.1, 1218.38, -15436.6, -1476.06, -122.87, 26705975., 88541.8, 527437., 26705975., 88541.8, 527437., -5811658., -19044.5, -115923., 45410.5, 150.579, 896.751, 45410.5, 150.579, 896.751},
            {23.3364, -132896249., 10639656., 862000., 355503600., 21297730., 862000., -69299517., -4483783., -193414., -89296533., -1935067., 26152829., 2409983., 187866., -177818639., -3877794., 51942538., 4765849., 375269., 584777., 584777., -135541., -95899.4, 18422.7, 1315.52, 428478., 30011.9, 1315.52, 81232.8, 1791.19, -23339., -2162.91, -172.639, 46492516., 162752., 873706., 46492516., 162752., 873706., -10052444., -34227.8, -193894., 69285.1, 236.373, 1334.01, 69285.1, 236.373, 1334.01},
            {15.3507, -105981672., 7863175., 588444., 275869672., 15874537., 588444., -53448324., -3397617., -129465., -69332431., -1454114., 19768330., 1694017., 127722., -139151276., -2912582., 39640608., 3414927., 254813., 389366., 389366., -87948.8, -63749.7, 11931.9, 758.81, 285076., 19181.1, 758.81, 53712.8, 1120.9, -15495.5, -1366.37, -98.4376, 35636931., 129493., 645202., 35636931., 129493., 645202., -8088297., -29688.1, -144897., 46381.1, 166.69, 849.311, 46381.1, 166.69, 849.311},
            {9.96809, -84036018., 5781255., 387369., 212854204., 11787461., 387369., -41182526., -2543949., -89372.4, -53814948., -1092426., 14914488., 1240942., 83083.5, -108117199., -2186003., 29994682., 2500136., 167385., 254314., 254314., -59006., -44663.3, 7383.4, 432.127, 187653., 12077.8, 432.127, 36002.6, 732.346, -10067.7, -842.835, -56.0747, 27126791., 101578., 475609., 27126791., 101578., 475609., -6176689., -23175.6, -108050., 30120.9, 113.191, 526.015, 30120.9, 113.191, 526.015},
            {8.67456, -89084137., 5745986., 343183., 223038108., 11803335., 343183., -43577462., -2529851., -77333.9, -56838397., -1093710., 15558907., 1215974., 73377.1, -113566370., -2199881., 31199393., 2441970., 147421., 219829., 219829., -50760.8, -39712.9, 6102.86, 312.812, 162667., 9990.59, 312.812, 31326.8, 600.263, -8665.75, -672.257, -40.4824, 28383807., 111907., 468554., 28383807., 111907., 468554., -6367555., -24801.2, -106691., 26056.5, 102.83, 429.626, 26056.5, 102.83, 429.626},
            {8.69962, -151961550., 7719036., 340626., 346049107., 17176633., 340626., -66129155., -3646354., -75549.1, -89995895., -1723087., 22689517., 1708295., 72147.3, -180972810., -3442295., 45316645., 3416200., 144430., 212695., 212695., -48731., -44575.1, 5372.63, 212.049, 158101., 9130.55, 212.049, 31446.9, 580.859, -7983.89, -595.902, -27.2156, 41255285., 165005., 669107., 41255285., 165005., 669107., -9175334., -36481.6, -149935., 24145.4, 97.3067, 387.768, 24145.4, 97.3067, 387.768}
        };

    // DOWN Basis
    // HighPT parameterization in the basis aligned with diagonal down sector (i.e. u_i = V^dagger u_m to pass to mass eigenstate basis)
        double NevCiD[47][49] = {  
            {51384. , -1444807122., 586172241., 317065517., 9090744743., 2812466805., 320944425., -1659309790., -622900214., -95377391., -1581273652., -258268033., 648984080., 280968221., 56751944., -3793764076., -612422966., 1559597218., 684481456., 132219112., 1460402965., 1460402965., -492060810., 4167292., 101819909., 37418424., 884812816., 289751729., 37746044., 153288970., 24786137., -63447390., -28009746., -5397106., 2026103928., -67855436., 91111034., -2026103928., 67855436., -91111034., 184767341., -6184540., 8392822., 168909194., -5652826., 7694784., -168909194., 5652826., -7694784.},  
            {36944. , -1310936770., 459464828., 271546891., 8289972320., 2398189691., 274915808., -1442769911., -538022367., -81859455., -1473790463., -234226473., 608530445., 248283556., 47770624., -3502904607., -527071397., 1425383247., 586341631., 112378841., 1060509678., 1060509678., -350277895., -21808.5, 69457979., 25096648., 654740283., 197011038., 25317811., 113920113., 16007431., -46743544., -18853593., -3567938., 1868323605., -62769189., 79162139., -1868323605., 62769189., -79162139., 159054164., -5249789., 9041600., 128553041., -4329064., 5198495., -128553041., 4329064., -5198495.},  
            {26488. , -1180299246., 363490588., 213905659., 7160150679., 1914547518., 216587077., -1304904441., -412564769., -59740972., -1318490741., -175896474., 559858934., 207121597., 40564016., -3052922520., -409822655., 1263996306., 475662042., 90595008., 740369344., 740369344., -229745231., -5774031., 44816209., 16415246., 457857276., 130597442., 16563492., 79982287., 10391157., -31621993., -12334313., -2278417., 1655504856., -55908337., 63054236., -1655504856., 55908337., -63054236., 174250788., -5896896., 6336543., 92133808., -3112402., 3486217., -92133808., 3112402., -3486217.},  
            {19618.8 , -1082835999., 307039725., 176374517., 6150110323., 1636024007., 178670203., -1158158978., -343124776., -46421694., -1214891759., -162051798., 513789147., 182354662., 35072677., -2669387344., -354202395., 1100288250., 405050511., 75793857., 528506564., 528506564., -158395247., -1795841., 28111652., 10885201., 330145941., 88108043., 10988725., 56346217., 7241392., -22833219., -8079246., -1523800., 1439604076., -48651417., 53989831., -1439604076., 48651417., -53989831., 190612146., -6443009., 7117380., 66310334., -2243070., 2435059., -66310334., 2243070., -2435059.},  
            {14662.8 , -937431229., 226139222., 145000384., 5376195597., 1330738959., 146902127., -1014569963., -275074735., -41143592., -1070746846., -129151843., 449406322., 154604094., 28085301., -2333966645., -288157502., 960347677., 334000104., 62188930., 385433006., 385433006., -112914732., -4374157., 21484927., 7927966., 240346506., 63370592., 7999967., 41665323., 4809842., -16352488., -5844295., -1111956., 1270153260., -43042594., 44746666., -1270153260., 43042594., -44746666., 176836716., -6020778., 5538595., 49458667., -1677994., 1694518., -49458667., 1677994., -1694518.},  
            {11160.6 , -902491867., 185966559., 118581190., 4784184788., 1141645456., 120221832., -941510470., -236166847., -29224771., -1015515023., -114659400., 385669514., 135521314., 23994227., -2135396134., -244837205., 831002486., 286288177., 50953686., 290471393., 290471393., -80847086., -6365641., 14673159., 5370163., 181733366., 45827056., 5423589., 31543511., 3539643., -12072779., -4134609., -749755., 1153592047., -39175010., 38619212., -1153592047., 39175010., -38619212., 177822598., -6047482., 5737779., 38269017., -1300536., 1257787., -38269017., 1300536., -1257787.},  
            {8716.2 , -837036295., 158706908., 98789954., 4190884994., 963412046., 100166382., -806242836., -202282898., -24396908., -880221968., -94540599., 329295619., 108950186., 20139071., -1887900887., -202423895., 717374946., 237260953., 42622441., 222739082., 222739082., -62005880., -6132570., 10777425., 3919064., 140920298., 33897198., 3958556., 24623343., 2553366., -9265724., -3048657., -538269., 1029776131., -35054204., 32417078., -1029776131., 35054204., -32417078., 144507467., -4916683., 4608880., 30219467., -1029547., 930269., -30219467., 1029547., -930269.},  
            {6782. , -761914570., 118252377., 83316271., 3798969682., 813031150., 84500056., -715896882., -171455076., -21489141., -815296013., -80853738., 310296833., 96071914., 16601718., -1709729518., -170692380., 651193189., 202485518., 35743777., 170858224., 170858224., -47129255., -4817835., 7665621., 2892547., 108820495., 25193064., 2922440., 19048252., 1910155., -7080868., -2264319., -397175., 942699355., -32162639., 27895876., -942699355., 32162640., -27895876., 147734328., -5044945., 4258770., 23435385., -799117., 704340., -23435385., 799117., -704340.},  
            {5385.6 , -733170167., 101949639., 70324804., 3402631171., 708687842., 71355372., -637023624., -144180971., -17917175., -739102718., -69681040., 278155973., 85432321., 14482847., -1559873468., -146396486., 580792464., 177078138., 30625113., 135859627., 135859627., -36464276., -4286121., 6057871., 2162044., 86958127., 19329518., 2184570., 14929499., 1405212., -5703389., -1753617., -300017., 860515979., -29406347., 24296388., -860515979., 29406347., -24296388., 128326701., -4382462., 3692818., 19012601., -649948., 531124., -19012601., 649948., -531124.},  
            {4250.2 , -692892577., 85935522., 58720550., 3043964636., 606364470., 59600541., -603855116., -129594976., -14088866., -683198362., -58031801., 238178047., 70803357., 12534794., -1411299958., -122069952., 506493941., 150107624., 25847661., 104946107., 104946107., -27522833., -2641963., 4228903., 1642155., 67172014., 14593568., 1659778., 11464777., 1108239., -4366188., -1286472., -224236., 784284047., -26857705., 20760170., -784284047., 26857705., -20760170., 129055212., -4427321., 3223800., 14495939., -495119., 415399., -14495939., 495119., -415399.},  
            {3399.8 , -585634597., 66446773., 50709527., 2706064986., 526714024., 51488067., -492213057., -104267104., -11626544., -585263490., -52661058., 221246210., 64613269., 10509064., -1242584623., -108977239., 459944576., 131147066., 21861896., 85303107., 85303107., -22478269., -2821308., 3430126., 1226278., 55080319., 11582899., 1240077., 9505702., 843397., -3579905., -1022180., -167920., 690407814., -23639231., 18365858., -690407814., 23639231., -18365858., 99452465., -3397274., 2840074., 12130609., -415232., 325488., -12130609., 415232., -325488.},  
            {2743.8 , -529568896., 58115575., 42563051., 2438119769., 464072494., 43248373., -496254644., -95606410., -10366057., -551257686., -46512638., 196725305., 55264855., 9029796., -1120982812., -94376804., 413760026., 113637629., 18711856., 68512531., 68512531., -18647662., -2794367., 2480126., 967351., 44924501., 8975227., 978311., 7913318., 655720., -2890595., -785358., -132826., 624644847., -21405681., 16171521., -624644847., 21405681., -16171521., 108700803., -3724783., 2819983., 10051877., -344529., 258636., -10051877., 344529., -258636.},  
            {2204. , -514075924., 53268666., 36927875., 2228870050., 406338385., 37520514., -430025768., -85719289., -8507012., -488682251., -37900141., 176588928., 46050567., 8038124., -1027512496., -78625739., 372321140., 98330135., 16343230., 56310738., 56310738., -14230917., -2371555., 2043254., 748741., 36628318., 7185224., 757391., 6288045., 503270., -2339872., -627835., -102052., 582740129., -20014124., 13996322., -582740129., 20014124., -13996322., 90223876., -3096630., 2218407., 8255808., -283302., 204237., -8255807., 283302., -204237.},  
            {1833.9 , -478221079., 31169764., 30857142., 2017808604., 348969039., 31390009., -383629998., -75310375., -7955896., -453292864., -34196940., 163387454., 41558271., 6475595., -941455988., -70140964., 336808312., 85332112., 13592522., 46005425., 46005425., -11847112., -2571846., 1554187., 581260., 30189482., 5751919., 588302., 5423451., 403121., -1850887., -495257., -79823.4, 531133051., -18248624., 12586689., -531133051., 18248624., -12586689., 84941547., -2915510., 2084147., 6964860., -239245., 166342., -6964860., 239245., -166342.},  
            {1598.3 , -430598853., 29235475., 26984059., 1817046052., 311715866., 27457096., -342764003., -60671246., -6575030., -406409331., -29811490., 149859834., 36883968., 5632850., -848642696., -61453952., 306625803., 74685715., 11768133., 38969063., 38969063., -9429479., -1771505., 1206771., 471540., 25558271., 4603853., 477222., 4387775., 320384., -1614866., -390380., -63715.2, 479179714., -16470952., 11175596., -479179715., 16470952., -11175596., 74631503., -2561934., 1823744., 5835675., -200666., 134270., -5835675., 200666., -134270.},  
            {1268.16 , -399405752., 27918666., 23390798., 1664352408., 281245757., 23814005., -312019070., -58888702., -5808148., -379182647., -27256351., 139390407., 32749775., 4996022., -782605135., -54798664., 280781261., 67636280., 10347309., 32069180., 32069180., -8240228., -1723626., 972109., 369696., 21297322., 3796028., 374414., 3774921., 262237., -1332735., -321806., -50588.2, 441449984., -15186036., 10001905., -441449984., 15186037., -10001905., 71255748., -2446498., 1730319., 4924782., -169418., 111488., -4924782., 169418., -111488.},  
            {1067.72 , -356866951., 24957752., 20626344., 1514758426., 248073233., 20997946., -276483271., -50071699., -4940240., -340024207., -22586727., 127079243., 28758040., 4496975., -707919155., -46900273., 255730024., 59464943., 9181597., 27097733., 27097733., -6900083., -1529001., 787746., 299192., 18071517., 3115650., 303068., 3219798., 210640., -1114698., -265515., -40962.7, 401967619., -13840921., 8786270., -401967619., 13840921., -8786270., 63449097., -2184338., 1396694., 4211701., -145038., 91642., -4211701., 145038., -91642.},  
            {893.48 , -331478889., 15370287., 17855701., 1395013186., 219217833., 18194866., -255836231., -42920758., -4268047., -312238589., -19838237., 114926051., 26105128., 3914484., -651301829., -42061777., 233294121., 52465023., 7970687., 22811965., 22811965., -5997903., -1091690., 626269., 238662., 15374737., 2557433., 241873., 2743191., 175572., -970275., -213758., -32280.2, 371276993., -12788023., 8020529., -371276993., 12788023., -8020529., 58791081., -2026601., 1229846., 3544234., -122101., 75936.4, -3544234., 122101., -75936.4},  
            {741.54 , -328036836., 12799940., 15958084., 1285036491., 196111045., 16261808., -261402473., -41147482., -3770551., -301994222., -18141205., 100265391., 21927106., 3458697., -611507092., -37067325., 209234477., 45545261., 7070422., 19346234., 19346234., -4742431., -1066147., 527053., 195619., 12910580., 2146417., 198307., 2258727., 142877., -802110., -180526., -26503.7, 348628854., -12021985., 7186935., -348628854., 12021985., -7186935., 61508805., -2122219., 1239240., 3013182., -103845., 63604.5, -3013182., 103845., -63604.5},  
            {640.8 , -295598037., 11479901., 13678606., 1180562584., 176251577., 13951062., -229936979., -34534860., -3112120., -275624150., -15810955., 95575139., 21034525., 3054769., -560329457., -32689956., 194716130., 41891654., 6130635., 16758709., 16758709., -4165646., -1001045., 434456., 160534., 11271329., 1812565., 162814., 1996038., 118164., -700319., -152764., -21559.2, 319765076., -11032485., 6448991., -319765076., 11032485., -6448991., 55458825., -1915070., 1078317., 2656424., -91635.5, 53969., -2656424., 91635.5, -53969.},  
            {779.76 , -399611853., 13538583., 17606452., 1574662198., 232789236., 17968780., -297630339., -47677101., -4207452., -364275576., -21269265., 129254075., 26152013., 3797305., -747364569., -43546858., 260181740., 53900336., 7793341., 20356232., 20356232., -4930988., -1209307., 485794., 189505., 13686136., 2141684., 192242., 2430815., 141287., -837735., -175213., -26026., 427939546., -14766892., 8576997., -427939546., 14766892., -8576997., 71770264., -2476657., 1436406., 3228292., -111395., 64784.2, -3228292., 111395., -64784.2},  
            {629.76 , -367143739., 9510296., 14861297., 1396790896., 199753419., 15174620., -271357066., -39160849., -3464909., -326937027., -18360546., 110031057., 23307904., 3215877., -669373758., -36765054., 226173487., 46405939., 6570100., 16346447., 16346447., -3873066., -1181358., 352112., 143388., 11023188., 1667578., 145554., 1970177., 109091., -660718., -135417., -19569.2, 383724133., -13252164., 7420740., -383724133., 13252164., -7420740., 64211769., -2214921., 1307357., 2655160., -91699.3, 51308.7, -2655160., 91699.3, -51308.7},  
            {513.69 , -328677973., 5406153., 12321602., 1283080628., 173045207., 12596491., -234642477., -34059469., -3044781., -299066898., -15040824., 106909959., 19526522., 2642482., -609296171., -30944634., 210621654., 39337631., 5461922., 13194448., 13194448., -3341345., -869321., 260431., 109186., 9056865., 1300255., 110893., 1628064., 83416.9, -556749., -105317., -14714.7, 352129701., -12173057., 6514772., -352129701., 12173057., -6514772., 61082120., -2112480., 1108428., 2166824., -74892.4, 40439.6, -2166824., 74892.4, -40439.6},  
            {412.77 , -301278024., 3049147., 10383303., 1129273020., 149832182., 10623587., -225244275., -30951418., -2379826., -266041229., -13552534., 87716514., 16558653., 2329574., -541905488., -27144024., 181724622., 33769112., 4670883., 10685821., 10685821., -2803247., -759380., 195036., 84278.6, 7409129., 1032016., 85648.5, 1365277., 65260.5, -449183., -82953.9, -11372.4, 313030071., -10825276., 5696107., -313030071., 10825276., -5696107., 53884303., -1862485., 1003915., 1787698., -61824.8, 32475.3, -1787698., 61824.8, -32475.3},  
            {330.15 , -277658536., 2334125., 8692060., 1003712357., 130743615., 8901638., -200959553., -25722858., -2135516., -244449443., -11337632., 79725320., 14910340., 1895523., -489876054., -22966242., 161500371., 29613174., 3884616., 8864093., 8864093., -2169211., -631606., 148253., 64440.1, 6109962., 821310., 65538., 1100176., 50968.8, -371678., -64657.5, -8715.83, 281134588., -9728181., 4970468., -281134588., 9728181., -4970468., 50735447., -1756268., 880948., 1479727., -51208.3, 26042., -1479727., 51208.3, -26042.},  
            {266.91 , -250073535., -469366., 7342447., 909157249., 113374442., 7527766., -177635987., -23203827., -1679048., -219132316., -9935568., 71912219., 12088775., 1647811., -440038693., -19905577., 144917744., 24683628., 3303391., 7248036., 7248036., -1746413., -560028., 116833., 50640., 4994929., 664501., 51531.9, 899760., 41032.5, -298730., -53368.6, -6889.89, 254903968., -8824995., 4396853., -254903968., 8824995., -4396853., 46288085., -1602509., 799014., 1220962., -42266.7, 21161.1, -1220962., 42266.7, -21161.1},  
            {243.474 , -217259565., -83584.9, 6310359., 807902082., 98852143., 6471037., -148924243., -19210270., -1478894., -192394902., -8223420., 67157391., 11102041., 1369404., -391457324., -16912718., 132056407., 22082483., 2797444., 6016786., 6016786., -1443596., -463788., 87574.5, 40234.6, 4162232., 534736., 40961., 748824., 33008.1, -250146., -41749.1, -5452.02, 225848100., -7822403., 3813582., -225848100., 7822403., -3813582., 38494260., -1333768., 637911., 1018960., -35291., 17239.5, -1018960., 35291., -17239.5},  
            {186.687 , -195182856., -1451953., 5292579., 726693769., 87243191., 5436567., -134562111., -17875207., -1214812., -169794792., -7502215., 58625232., 9012214., 1199132., -349849934., -15131832., 117667649., 18699410., 2395116., 5003101., 5003101., -1200894., -409307., 65248.9, 31873.5, 3471467., 436134., 32475., 633222., 26939.4, -205248., -33600.9, -4365.23, 203160428., -7037123., 3417653., -203160428., 7037123., -3417653., 33219613., -1149691., 582840., 855841., -29649.6, 14280.2, -855841., 29649.6, -14280.2},  
            {159.942 , -191468843., -2519316., 4616784., 665693482., 77659402., 4746446., -140557011., -15697543., -1052618., -168669082., -6630308., 49851943., 8554217., 1018871., -329262935., -13227302., 103152806., 16851381., 2058560., 4209119., 4209119., -997192., -343531., 47684.1, 24852.7, 2929965., 353857., 25347.8, 530843., 21519.2, -173282., -26917.7, -3380.4, 189457310., -6566862., 3079435., -189457310., 6566863., -3079435., 37462959., -1299407., 587179., 723543., -25079.1, 11759.1, -723543., 25079.1, -11759.1},  
            {134.403 , -172139309., -2889986., 3966307., 606012265., 68018316., 4080554., -119796749., -13919287., -933106., -152052968., -5612937., 47958254., 7095858., 872150., -300291133., -11304274., 95917325., 14375317., 1771938., 3529819., 3529819., -873219., -292777., 39151.3, 20238.5, 2479447., 294125., 20649.8, 453520., 17365.5, -148677., -22456.5, -2752.53, 172452040., -5981029., 2714892., -172452040., 5981029., -2714892., 32337467., -1122132., 494480., 613798., -21283.4, 9773.22, -613798., 21283.4, -9773.22},  
            {180.095 , -247992875., -4799362., 5416522., 879898414., 97409781., 5581071., -174164800., -19994514., -1174260., -218052205., -7910220., 70050982., 10119945., 1223877., -431490093., -16055642., 139710837., 20489473., 2432770., 4753108., 4753108., -1110959., -404255., 44968.3, 24870.7, 3323623., 381647., 25412.5, 601624., 22598.9, -196584., -28669.4, -3357.78, 250099203., -8675094., 3910681., -250099203., 8675094., -3910681., 47428366., -1646350., 711690., 826900., -28684.5, 12876.5, -826900., 28684.5, -12876.5},  
            {136.905 , -221089747., -5809800., 4216699., 749060790., 79427308., 4353303., -146423872., -16237347., -1028247., -183732571., -6425079., 58517213., 8079518., 930456., -370249720., -12819415., 117621557., 16344460., 1896394., 3605432., 3605432., -867290., -355721., 27066.6, 17749.1, 2544592., 281481., 18156.7, 474102., 16290.9, -147178., -20730., -2405.2, 215774589., -7489592., 3248819., -215774589., 7489592., -3248819., 38188895., -1325067., 586755., 645168., -22394.7, 9695.07, -645168., 22394.7, -9695.07},  
            {105.805 , -187834363., -5784648., 3312802., 638368042., 66840833., 3429203., -122371501., -13659457., -763599., -154289936., -5609635., 49001847., 6643784., 751433., -314275517., -11043220., 99390285., 13510921., 1502250., 2777731., 2777731., -677383., -261041., 18387.7, 12700., 1969716., 212735., 13011., 365742., 12352.4, -115273., -15546.2, -1741.85, 183749896., -6377939., 2768297., -183749896., 6377939., -2768297., 31321845., -1086135., 497452., 496552., -17238.6, 7399.63, -496552., 17238.6, -7399.63},  
            {79.795 , -171141860., -5607567., 2661358., 553463325., 55873779., 2759369., -111002071., -11057734., -631514., -136782391., -4331793., 40828381., 5576207., 583275., -276224446., -8770853., 84283135., 11185580., 1189421., 2170454., 2170454., -499374., -212532., 11465.6, 9189.74, 1531196., 159917., 9426.52, 283507., 8994.15, -87743.8, -11440., -1244.56, 161694092., -5616590., 2332870., -161694092., 5616590., -2332870., 28522621., -990894., 408206., 388987., -13510.9, 5635.39, -388987., 13510.9, -5635.39},  
            {64.215 , -143747065., -5303105., 2122415., 478130562., 46623984., 2204987., -90914459., -9152102., -464397., -116250558., -3654531., 36720921., 4595998., 492353., -236982849., -7202013., 74079827., 9176974., 968985., 1724048., 1724048., -398403., -174233., 5654.51, 6847.67, 1224496., 121177., 7031.05, 225484., 6714.79, -70963., -8436.81, -927.805, 138974999., -4829009., 1966166., -138974999., 4829009., -1966166., 23522880., -816560., 352331., 312893., -10874.6, 4367.72, -312893., 10874.6, -4367.72},  
            {52.115 , -125263654., -5317033., 1733759., 413776336., 38910448., 1803891., -77331305., -8041050., -424285., -102410507., -3009457., 32806578., 3647361., 380132., -205956927., -5943106., 64309129., 7437690., 778243., 1336435., 1336435., -328466., -136573., 3955.47, 5074.41, 959054., 94188.6, 5217.58, 179727., 5169.06, -55745.6, -6670.57, -689.603, 120653571., -4193868., 1670668., -120653571., 4193868., -1670668., 21471040., -745957., 306324., 245152., -8520.75, 3410.25, -245152., 8520.75, -3410.25},  
            {41.3115 , -113640720., -4942568., 1402061., 359524282., 33821995., 1463516., -67983438., -6723780., -332721., -87624709., -2664297., 27111029., 3196612., 315178., -179508493., -5224231., 54621840., 6424898., 635620., 1068584., 1068584., -253419., -116612., 2043.67, 3682.77, 764160., 73887.6, 3796.58, 144233., 4008.12, -43230.6, -5081.29, -508.712, 105922877., -3681945., 1464011., -105922877., 3681945., -1464011., 17762390., -616783., 261401., 197246., -6857., 2711.69, -197246., 6857., -2711.69},  
            {39.357 , -119702523., -5458809., 1335701., 371468798., 34016753., 1398087., -74492683., -6743600., -312082., -93938123., -2499325., 27211945., 3135594., 300148., -187568224., -5063758., 55480835., 6308531., 604514., 1008510., 1008510., -243510., -114221., 513.127, 3237.23, 725726., 67955.7, 3343.8, 137882., 3716.7, -41053., -4598.29, -440.58, 110140115., -3829981., 1486921., -110140115., 3829981., -1486921., 20245443., -704206., 268488., 188365., -6550.27, 2540.01, -188365., 6550.27, -2540.01},  
            {30.5148 , -101653767., -4959015., 1056910., 317021080., 27860850., 1108561., -63019092., -5446178., -252839., -80055726., -1995277., 24289941., 2594417., 236784., -160248917., -4028057., 48538493., 5135761., 479051., 784092., 784092., -181282., -90268.2, -460.946, 2349.75, 562252., 50924.7, 2430.69, 106372., 2741.48, -31500.5, -3364.26, -321.332, 94085701., -3273272., 1231862., -94085700., 3273272., -1231862., 17041550., -592990., 220465., 146579., -5099.08, 1929.98, -146579., 5099.08, -1929.98},  
            {23.7774 , -92696059., -4684656., 824936., 273764842., 23756895., 869620., -57436702., -4859175., -194653., -71980495., -1714974., 19992132., 2136448., 186252., -140809063., -3417432., 40443544., 4259834., 375024., 614799., 614799., -136936., -76570.3, -1118.28, 1665.32, 439782., 38879.7, 1728.14, 83452.4, 2035.34, -24220.1, -2522.16, -226.799, 82421606., -2868011., 1065989., -82421606., 2868011., -1065989., 16167792., -562779., 204430., 116153., -4041.9, 1498.7, -116153., 4041.9, -1498.7},  
            {19.1136 , -75476507., -4014257., 660275., 232642352., 19922432., 697887., -44149658., -3775335., -147125., -57625736., -1400864., 17385201., 1729524., 156174., -117478311., -2866670., 34975434., 3491618., 305999., 488609., 488609., -112727., -57615.7, -1320.98, 1227., 352105., 30313.7, 1276.65, 66561.4, 1577.29, -19753.3, -1929.47, -167.388, 69294113., -2411172., 897273., -69294113., 2411172., -897273., 11772206., -409651., 151866., 92191.3, -3208.27, 1184.77, -92191.3, 3208.27, -1184.77},  
            {15.0264 , -66094643., -3764787., 534001., 200713931., 16664023., 566021., -37806679., -3244639., -132547., -50136665., -1210209., 14951908., 1450888., 118274., -101702637., -2392869., 29856844., 2885302., 242015., 380192., 380192., -89691.4, -46679.5, -1359.12, 899.854, 275549., 23257.8, 938.423, 52342.1, 1218.38, -15436.6, -1476.06, -122.87, 60076489., -2090995., 764155., -60076489., 2090995., -764155., 10396156., -361672., 136441., 72568.8, -2525.9, 920.507, -72568.8, 2525.9, -920.507},  
            {23.3364 , -115910872., -6877338., 813105., 348948807., 28015089., 867602., -68248989., -5558238., -193603., -89296533., -1935067., 26152829., 2409983., 187866., -177818639., -3877794., 51942538., 4765849., 375269., 584980., 584980., -135340., -75494.5, -2631.96, 1253.09, 423616., 34969.8, 1311.85, 81232.8, 1791.19, -23339., -2162.91, -172.639, 104841902., -3650395., 1301310., -104841902., 3650395., -1301310., 19400876., -675581., 238865., 112533., -3917.92, 1403.13, -112533., 3917.92, -1403.13},  
            {15.3507 , -92773121., -5755966., 551614., 270657219., 21218166., 593659., -52706775., -4156104., -129706., -69332431., -1454114., 19768330., 1694017., 127722., -139151276., -2912582., 39640608., 3414927., 254813., 389506., 389506., -87813.5, -50130.7, -2116.65, 718.913, 281863., 22458.5, 757.2, 53712.8, 1120.9, -15495.5, -1366.37, -98.4376, 82040455., -2857063., 1004281., -82040455., 2857063., -1004281., 14688135., -511482., 180615., 74960.1, -2610.61, 914.591, -74960.1, 2610.61, -914.591},  
            {9.96809 , -73825551., -4744643., 359736., 208731004., 16015780., 392036., -40595717., -3144411., -89659.6, -53814948., -1092426., 14914488., 1240942., 83083.5, -108117199., -2186003., 29994682., 2500136., 167385., 254413., 254413., -58919., -35675.5, -1885.58, 406.781, 185424., 14354.2, 432.046, 36002.6, 732.346, -10067.7, -842.835, -56.0747, 63835569., -2223472., 771734., -63835569., 2223472., -771734., 11399731., -397035., 138606., 49952.4, -1739.92, 603.657, -49952.4, 1739.92, -603.657},  
            {8.67456 , -78357876., -5309066., 315260., 218682268., 16271730., 348766., -42912674., -3210608., -77835.2, -56838397., -1093710., 15558907., 1215974., 73377.1, -113566370., -2199881., 31199393., 2441970., 147421., 219920., 219920., -50685.7, -31898.2, -1954.04, 291.749, 160700., 12001., 313.404, 31326.8, 600.263, -8665.75, -672.257, -40.4824, 67167166., -2339972., 800828., -67167166., 2339972., -800828., 12285326., -428039., 145444., 43559.8, -1517.61, 517.627, -43559.8, 1517.61, -517.627},  
            {8.69962 , -135294037., -9455802., 298667., 338641660., 24780323., 351765., -65007011., -4796819., -76879.5, -89995895., -1723087., 22689517., 1708295., 72147.3, -180972810., -3442295., 45316645., 3416200., 144430., 212797., 212797., -48659.8, -36964., -2472.37, 192.341, 155909., 11374., 213.791, 31446.9, 580.859, -7983.89, -595.902, -27.2156, 107215001., -3735527., 1269303., -107215001., 3735527., -1269303., 19166383., -667718., 228538., 43653.4, -1521.11, 512.849, -43653.4, 1521.11, -512.849}  
        };

    double Nev;
    int NCi = 49;

    Nev = 0.;

    if (i_bin < 48) {
        switch(flavBas){ 
            case 1:    // UP Basis
                for (int iCi = 0; iCi < NCi; ++iCi) {

                    Nev = Nev + NevCiU[i_bin - 1][iCi] * Civect[iCi];
                }
            break;
            case 2:    // DOWN Basis
                for (int iCi = 0; iCi < NCi; ++iCi) {

                    Nev = Nev + NevCiD[i_bin - 1][iCi] * Civect[iCi];
                }
            break;                
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::NevLHCppee13");

    if (Nev < 0) return std::numeric_limits<double>::quiet_NaN();

    return Nev;
}

const double NPSMEFTd6General::NevLHCppmumu13(const int i_bin) const {
    // HighPT parameterization: Same operators in the UP and DOWN bases
    double Civect[49] = {
        1., getSMEFTCoeffEW("Clq1R", 1, 1, 0, 0), getSMEFTCoeffEW("Clq1R", 1, 1, 1, 1), getSMEFTCoeffEW("Clq1R", 1, 1, 2, 2), getSMEFTCoeffEW("Clq3R", 1, 1, 0, 0), getSMEFTCoeffEW("Clq3R", 1, 1, 1, 1), getSMEFTCoeffEW("Clq3R", 1, 1, 2, 2), getSMEFTCoeffEW("CqeR", 0, 0, 1, 1), getSMEFTCoeffEW("CqeR", 1, 1, 1, 1), getSMEFTCoeffEW("CqeR", 2, 2, 1, 1), getSMEFTCoeffEW("CluR", 1, 1, 0, 0), getSMEFTCoeffEW("CluR", 1, 1, 1, 1), getSMEFTCoeffEW("CldR", 1, 1, 0, 0), getSMEFTCoeffEW("CldR", 1, 1, 1, 1), getSMEFTCoeffEW("CldR", 1, 1, 2, 2), getSMEFTCoeffEW("CeuR", 1, 1, 0, 0), getSMEFTCoeffEW("CeuR", 1, 1, 1, 1), getSMEFTCoeffEW("CedR", 1, 1, 0, 0), getSMEFTCoeffEW("CedR", 1, 1, 1, 1), getSMEFTCoeffEW("CedR", 1, 1, 2, 2), getSMEFTCoeffEW("CHl1R", 1, 1), getSMEFTCoeffEW("CHl3R", 1, 1), getSMEFTCoeffEW("CHeR", 1, 1), getSMEFTCoeffEW("CHq1R", 0, 0), getSMEFTCoeffEW("CHq1R", 1, 1), getSMEFTCoeffEW("CHq1R", 2, 2), getSMEFTCoeffEW("CHq3R", 0, 0), getSMEFTCoeffEW("CHq3R", 1, 1), getSMEFTCoeffEW("CHq3R", 2, 2), getSMEFTCoeffEW("CHuR", 0, 0), getSMEFTCoeffEW("CHuR", 1, 1), getSMEFTCoeffEW("CHdR", 0, 0), getSMEFTCoeffEW("CHdR", 1, 1), getSMEFTCoeffEW("CHdR", 2, 2), getSMEFTCoeffEW("Clq1R", 1, 1, 0, 1), getSMEFTCoeffEW("Clq1R", 1, 1, 0, 2), getSMEFTCoeffEW("Clq1R", 1, 1, 1, 2), getSMEFTCoeffEW("Clq3R", 1, 1, 0, 1), getSMEFTCoeffEW("Clq3R", 1, 1, 0, 2), getSMEFTCoeffEW("Clq3R", 1, 1, 1, 2), getSMEFTCoeffEW("CqeR", 0, 1, 1, 1), getSMEFTCoeffEW("CqeR", 0, 2, 1, 1), getSMEFTCoeffEW("CqeR", 1, 2, 1, 1), getSMEFTCoeffEW("CHq1R", 0, 1), getSMEFTCoeffEW("CHq1R", 0, 2), getSMEFTCoeffEW("CHq1R", 1, 2), getSMEFTCoeffEW("CHq3R", 0, 1), getSMEFTCoeffEW("CHq3R", 0, 2), getSMEFTCoeffEW("CHq3R", 1, 2)
    };

    // UP Basis
    // HighPT parameterization in the basis aligned with diagonal up sector (i.e. d_i = V d_m to pass to mass eigenstate basis)
        double NevCiU[30][49] = {
            {50469.3, -2455705527., 1210268016., 408999570., 12532565881., 3428126579., 408999570., -2355726982., -779882822., -125076470., -2331496127., -329089366., 875403726., 381196134., 68890561., -5287724141., -773151841., 2099010106., 886558617., 165038982., 1773556055., 1773556055., -579579512., -31101077., 158839620., 43298718., 1091247718., 328803778., 43298718., 184941916., 28170064., -77688709., -32243103., -6093025., 1326163100., -18817876., 146100006., 1326163100., -18817876., 146100006., -406443742., 5134465., -41489810., 139604241., -1972053., 15333215., 139604241., -1972053., 15333215.},
            {41839.9, -2499665073., 1046971289., 362292138., 11998117967., 3046700998., 362292138., -2053204215., -723928069., -104410465., -2177688563., -317450815., 904803379., 342007056., 64096972., -5075352889., -703787731., 2042051782., 786722511., 148041709., 1387251557., 1387251557., -446575596., -43028855., 116451786., 31681459., 869986196., 240657374., 31681459., 150498363., 20275618., -60535332., -23083331., -4447683., 1317942088., -15311055., 127662726., 1317942088., -15311055., 127662726., -353235645., 4730156., -37457489., 114571321., -1337882., 11133282., 114571321., -1337882., 11133282.},
            {32989., -2504921416., 991353877., 327128902., 11281382228., 2724043660., 327128902., -2097270479., -606405673., -84511401., -2182561814., -272993235., 863585825., 329212069., 62263449., -4853072138., -614395332., 1918416343., 724909760., 136170912., 1075876696., 1075876696., -321205871., -43510519., 85851254., 22924718., 674073674., 176474005., 22924718., 116601487., 14751409., -45351431., -16847751., -3199168., 1234125580., -13594439., 115706536., 1234125580., -13594439., 115706536., -350424961., 3650952., -31783092., 89793604., -939558., 8162815., 89793604., -939558., 8162815.},
            {26921.1, -2335818717., 864559422., 280623875., 10399368471., 2415875796., 280623875., -2001046394., -546838932., -75783310., -2106597074., -249438816., 799671823., 283226535., 54324162., -4562158209., -550401443., 1773473342., 630187877., 118520093., 830972755., 830972755., -233346486., -24106279., 65626371., 16693177., 518973280., 130990792., 16693177., 87394116., 10300201., -35011563., -12464649., -2303773., 1166344096., -11469061., 102240824., 1166344096., -11469061., 102240824., -337272517., 2979463., -27823798., 72726950., -665011., 6116181., 72726950., -665011., 6116181.},
            {21531.6, -2316372167., 767462392., 248117100., 9818700927., 2148309391., 248117100., -1782364481., -485657216., -63139659., -1968613492., -234343459., 789323916., 267264144., 48871640., -4309001780., -494481908., 1680099167., 571558557., 104821023., 628482528., 628482528., -179541882., -29117545., 47835897., 12125476., 398260330., 96149380., 12125476., 68455264., 7772493., -26333080., -9100387., -1672645., 1118410998., -9507969., 90337915., 1118410998., -9507969., 90337915., -291624964., 2509431., -23715418., 54903623., -474334., 4474235., 54903623., -474334., 4474235.},
            {16912.7, -2189595017., 711687963., 209897696., 9092497837., 1887942761., 209897696., -1763587870., -414970899., -56075968., -1929282528., -195165791., 711326448., 236458134., 40294615., -4069561208., -419940692., 1535310526., 504367542., 88136700., 486117382., 486117382., -137950995., -23278249., 35480226., 8563581., 312397989., 70460047., 8563581., 53866253., 5577618., -20679844., -6540145., -1156583., 1049329662., -8204323., 81077880., 1049329662., -8204323., 81077880., -286975866., 1893868., -20358366., 44667266., -317711., 3288176., 44667266., -317711., 3288176.},
            {13098.5, -2083433864., 614579700., 181700269., 8472152136., 1649761206., 181700269., -1539062353., -368743759., -43993098., -1787689310., -178006097., 682639496., 202255429., 36487017., -3797818035., -371874164., 1428030126., 433626895., 76985027., 370661446., 370661446., -105809028., -20353734., 26688902., 6293243., 240453247., 52165124., 6293243., 42020725., 4032645., -15673826., -4852332., -851572., 1005704094., -6370650., 69988543., 1005704094., -6370650., 69988543., -235070628., 1822457., -18088127., 34441856., -227421., 2444780., 34441856., -227421., 2444780.},
            {10333.8, -2017621754., 540041545., 153650723., 7882362955., 1413745089., 153650723., -1467682871., -300382841., -34802662., -1666106621., -147235511., 624227484., 185780898., 32380881., -3543060866., -313829381., 1316738869., 381220756., 66192912., 287134235., 287134235., -75201781., -18236259., 19260831., 4470421., 186141245., 37607936., 4470421., 32413165., 2908594., -11746554., -3419242., -603894., 953659326., -4803408., 59971396., 953659326., -4803408., 59971396., -243996835., 1099723., -14680608., 27075434., -145747., 1751150., 27075434., -145747., 1751150.},
            {7769.34, -1820804677., 482352598., 126771948., 7119447791., 1232709093., 126771948., -1334248955., -271031096., -30221856., -1535896253., -130396196., 567832205., 158026778., 26506048., -3222480412., -270753476., 1189858592., 329218058., 54712430., 218895157., 218895157., -59359669., -14297867., 14606541., 3119734., 144212578., 27770265., 3119734., 25187570., 2093580., -9191804., -2575008., -420629., 873829430., -4027018., 53032092., 873829430., -4027018., 53032092., -213554139., 1020077., -13148412., 21345465., -101826., 1313354., 21345465., -101826., 1313354.},
            {6219.57, -1830670544., 425759470., 106223696., 6650359375., 1062271455., 106223696., -1283516203., -221991617., -25069017., -1499102608., -110485201., 517137601., 137146294., 22159029., -3064021776., -229793530., 1076982651., 281940249., 45730028., 166894633., 166894633., -43685607., -13123261., 10562897., 2191574., 110735659., 19923530., 2191574., 19522788., 1452307., -6883274., -1808801., -293487., 812397941., -3084221., 45897876., 812397941., -3084221., 45897876., -190824430., 671887., -10507681., 16368135., -65335.6, 941251., 16368135., -65335.6, 941251.},
            {4759.3, -1733477468., 358662216., 87910316., 6029219183., 897935378., 87910316., -1165273570., -196306631., -21426803., -1382478781., -96352178., 487443780., 115056961., 18519460., -2811122057., -195202789., 987217008., 237028587., 38189558., 127824527., 127824527., -33010514., -10991338., 7699686., 1541511., 85588517., 14431030., 1541511., 15256992., 1054427., -5231650., -1286319., -205291., 741069401., -2156887., 38473655., 741069401., -2156887., 38473655., -169019817., 561429., -9133436., 12793504., -40323.5, 680191., 12793504., -40323.5, 680191.},
            {3379.58, -1528521580., 313383775., 71830209., 5399079481., 766847792., 71830209., -1009449997., -163018441., -16886505., -1205696411., -79525298., 431554448., 101276669., 14955762., -2496722620., -163759240., 881990673., 204633368., 30868611., 97008650., 97008650., -24527424., -8090572., 5751235., 1062552., 65269679., 10491839., 1062552., 11470680., 738990., -4016809., -944640., -141385., 680395906., -1538364., 33043968., 680395906., -1538364., 33043968., -157210714., 363534., -7676534., 9981884., -25562.3, 500313., 9981884., -25562.3, 500313.},
            {2662.33, -1451606502., 273316200., 58903919., 4885800405., 647869314., 58903919., -938247308., -140463167., -13719120., -1112566994., -66361741., 379125023., 82181651., 12554076., -2289660411., -135517158., 782812172., 169391026., 25589840., 73600365., 73600365., -18241679., -6666795., 4103656., 739596., 49906120., 7489315., 739596., 8809191., 531660., -3039754., -660000., -98399.3, 612773517., -1067375., 28117825., 612773517., -1067375., 28117825., -149204344., 214032., -6609290., 7716666., -13416.2, 353961., 7716666., -13416.2, 353961.},
            {1926.39, -1325049355., 232354378., 47289544., 4375223164., 547794395., 47289544., -834781184., -115738866., -11001011., -1015244041., -55825454., 337942656., 69938432., 10051794., -2066920704., -114021994., 691740995., 142509172., 20508015., 55377819., 55377819., -13391192., -5605693., 2940598., 504884., 37790782., 5317713., 504884., 6706149., 370432., -2262785., -462890., -67123.3, 553523375., -645928., 23756537., 553523375., -645928., 23756537., -125842773., 146235., -5397368., 5834311., -6986.3, 251315., 5834311., -6986.3, 251315.},
            {1417.98, -1213575947., 194881326., 37970172., 3906350507., 451671670., 37970172., -739517285., -95248296., -8756879., -905018888., -45573758., 303407993., 58319928., 8189937., -1854726912., -92974677., 617712015., 117385021., 16575209., 41689592., 41689592., -10263352., -4437192., 2100668., 344099., 28825489., 3762105., 344099., 5200163., 260201., -1704683., -323252., -45668.2, 498950360., -206751., 19472116., 498950360., -206751., 19472116., -116339384., 18027.3, -4383672., 4517261., -1939.32, 176641., 4517261., -1939.32, 176641.},
            {1048.48, -1115469071., 166076751., 29955069., 3484193166., 375248569., 29955069., -670395098., -80161204., -6874376., -818946065., -37095895., 269404519., 47287889., 6418066., -1663384475., -75532706., 545299307., 96169094., 13018350., 30990064., 30990064., -7501153., -3327215., 1504396., 233763., 21527475., 2660888., 233763., 3862992., 179178., -1276190., -225672., -31100.1, 445592022., 38796.3, 16236163., 445592022., 38796.3, 16236163., -101671335., -4130.15, -3729086., 3422283., 295.026, 124707., 3422283., 295.026, 124707.},
            {781.922, -988462183., 139065012., 23653665., 3048913076., 310208001., 23653665., -593451813., -64556729., -5365571., -732115538., -30716573., 234983401., 39351188., 5101764., -1468479765., -62192569., 473780883., 79001638., 10299931., 22893074., 22893074., -5453891., -2616356., 1066759., 154574., 15982254., 1868156., 154574., 2887678., 124130., -932496., -157245., -20416.2, 392868392., 212509., 13393779., 392868392., 212509., 13393779., -87737342., -56792.5, -2942529., 2543483., 1190.46, 87673.4, 2543483., 1190.46, 87673.4},
            {553.886, -880426549., 113653427., 18369162., 2651795884., 253447480., 18369162., -501796076., -54746567., -4126140., -628322821., -25325673., 203389630., 31628364., 3988444., -1281438357., -50732743., 409982235., 63767022., 8015439., 16968716., 16968716., -4064005., -2112596., 751666., 103267., 11962875., 1300667., 103267., 2188175., 85180.6, -689399., -108128., -13722., 342415395., 343644., 10854785., 342415395., 343644., 10854785., -78012277., -74123.4, -2494800., 1901444., 1818.79, 60739.5, 1901444., 1818.79, 60739.5},
            {403.303, -792765839., 95320521., 13962341., 2309256013., 206555610., 13962341., -451911066., -44149972., -3234699., -561161610., -20188682., 173738056., 25485903., 3001607., -1127845630., -40475932., 350979304., 51405915., 6080007., 12394747., 12394747., -2940008., -1609765., 527728., 67025.9, 8785058., 902605., 67025.9, 1610038., 58132.8, -502465., -73910.1, -8801.24, 296169958., 390774., 8906317., 296169958., 390774., 8906317., -68354126., -101781., -1995275., 1400844., 1844.06, 42146., 1400844., 1844.06, 42146.},
            {292.15, -676432122., 78060893., 10702791., 1980106989., 167643387., 10702791., -383194766., -36158625., -2360751., -480275483., -16132398., 150943206., 20151820., 2344500., -966268932., -32508679., 302727258., 40943225., 4678670., 8983408., 8983408., -2138614., -1216335., 364803., 43842.6, 6411471., 621242., 43842.6, 1184296., 39853.1, -364271., -50232.3, -5792.58, 257973987., 453921., 7170494., 257973987., 453921., 7170494., -57745911., -90136.2, -1664726., 1026339., 1758.33, 28772.4, 1026339., 1758.33, 28772.4},
            {206.536, -591082632., 63619597., 8009538., 1678967010., 133453725., 8009538., -321004045., -27823614., -1798692., -408664346., -12597480., 127263965., 16366566., 1738453., -823619673., -25391213., 253293606., 32622293., 3490150., 6501859., 6501859., -1543137., -908992., 254286., 28054.7, 4667871., 425314., 28054.7, 865537., 26493., -263934., -33936., -3696.12, 217213896., 444091., 5717850., 217213896., 444091., 5717850., -47512278., -96454., -1254165., 750847., 1553.79, 19667.2, 750847., 1553.79, 19667.2},
            {148.227, -506903117., 50901559., 5946175., 1420020198., 105351854., 5946175., -283381858., -22167691., -1373001., -353236216., -9814888., 104860498., 12486971., 1275574., -701451368., -19792995., 211342932., 25053874., 2582488., 4645581., 4645581., -1085574., -675203., 172623., 17674., 3347379., 287424., 17674., 621436., 17794.2, -187762., -22442.9, -2325.22, 184552251., 452375., 4469707., 184552251., 452375., 4469707., -41877980., -108923., -981628., 539401., 1300.24, 13177.3, 539401., 1300.24, 13177.3},
            {105.5, -427445840., 40440746., 4342665., 1183877932., 83388563., 4342665., -224388798., -17106370., -1020694., -291262785., -7772432., 87961943., 9933760., 927071., -586185837., -15585864., 175236757., 19631184., 1884370., 3297527., 3297527., -777759., -489150., 117086., 11179.9, 2391732., 193483., 11179.9, 447960., 11882.4, -133452., -14714.1, -1471.11, 154252606., 421838., 3509816., 154252606., 421838., 3509816., -33116050., -93221.4, -739545., 388193., 1073.97, 8768.13, 388193., 1073.97, 8768.13},
            {71.9138, -364302942., 31747235., 3160516., 981918286., 64690314., 3160516., -193382510., -13947078., -693447., -246895792., -5946223., 73188977., 7391747., 691080., -490446003., -11981525., 144957730., 14911744., 1376858., 2300032., 2300032., -523671., -361241., 79089.2, 6823.79, 1666428., 129399., 6823.79, 312836., 7737.54, -90987.4, -9832.2, -898.831, 127082893., 385160., 2696911., 127082893., 385160., 2696911., -27726744., -76017.5, -630042., 267417., 769.192, 5889.2, 267417., 769.192, 5889.2},
            {49.5856, -296510745., 24928875., 2278935., 792069919., 50614195., 2278935., -146302059., -10682534., -510343., -192330402., -4657315., 57994158., 5685571., 492086., -393572978., -9336496., 115527019., 11434576., 987873., 1589101., 1589101., -367574., -247444., 52428.6, 4206.62, 1158596., 85547.1, 4206.62, 217694., 5137.36, -63910., -6274.69, -552.853, 102415798., 323403., 2106366., 102415798., 323403., 2106366., -22455667., -69847.2, -467339., 188530., 604.112, 3831.81, 188530., 604.112, 3831.81},
            {35.7306, -240868351., 19081850., 1576509., 637090311., 38402561., 1576509., -125321286., -8112505., -341683., -160761644., -3467242., 45269845., 4240997., 346685., -320388705., -7016091., 91513847., 8497942., 686993., 1086351., 1086351., -255522., -182764., 34222.3, 2488.31, 797990., 55910.9, 2488.31, 152047., 3366.49, -43411.9, -4074.59, -324.299, 82596973., 283945., 1579097., 82596973., 283945., 1579097., -18703122., -65387.9, -351925., 128037., 432.748, 2486.24, 128037., 432.748, 2486.24},
            {22.9439, -193780420., 14343747., 1078977., 502452533., 29059545., 1078977., -95553663., -6210482., -242382., -125675071., -2704391., 36220003., 3153655., 232505., -253182155., -5362577., 72070894., 6317534., 466552., 732484., 732484., -169801., -124152., 22317.9, 1475.42, 538529., 36198.6, 1475.42, 102598., 2150.75, -29164.7, -2568.28, -191.334, 64682506., 232685., 1183254., 64682506., 232685., 1183254., -14145058., -49650.3, -265159., 86772.2, 310.288, 1596.96, 86772.2, 310.288, 1596.96},
            {16.5921, -152404098., 10627309., 729589., 389993743., 21590076., 729589., -76964242., -4656232., -167893., -98978377., -1988038., 27313580., 2310943., 154629., -197505488., -3984772., 55154621., 4612297., 313303., 489622., 489622., -112405., -88824.7, 14184.3, 859.342, 360896., 23068.4, 859.342, 69808.5, 1372.86, -19020.6, -1603.9, -111.915, 50077457., 189453., 867922., 50077457., 189453., 867922., -11484443., -43936.1, -196507., 57257.7, 213.719, 1007.38, 57257.7, 213.719, 1007.38},
            {16.0609, -210124472., 13270015., 791791., 515221197., 27012665., 791791., -99604520., -5768892., -174373., -131707121., -2516296., 35318922., 2795967., 170652., -263867882., -5005153., 70858136., 5611586., 340692., 516545., 516545., -118065., -96246.9, 14271.9, 756.436, 381808., 23354.7, 756.436, 73998.4, 1404.53, -20040.6, -1577.23, -98.2598, 64571570., 251913., 1079779., 64571570., 251913., 1079779., -14367746., -55836.9, -241386., 60455.8, 236.796, 1006.05, 60455.8, 236.796, 1006.05},
            {10.0817, -201515559., 10134870., 454012., 454529971., 22334801., 454012., -89049921., -4742780., -100469., -119988578., -2220782., 29431993., 2228793., 96725.8, -238952666., -4438111., 58989029., 4453216., 193151., 291846., 291846., -65861.6, -61803.5, 7334.6, 294.229, 216579., 12402.6, 294.229, 43068.2, 783.315, -10864.9, -811.299, -37.5894, 53777025., 215105., 872084., 53777025., 215105., 872084., -12104002., -48803.3, -194274., 32927.4, 133.104, 526.693, 32927.4, 133.104, 526.693}
        };

    // DOWN Basis
    // HighPT parameterization in the basis aligned with diagonal down sector (i.e. u_i = V^dagger u_m to pass to mass eigenstate basis)
        double NevCiD[30][49] = {  
            {50469.3 , -1996121564., 723166577., 401914764., 12365686064., 3594524397., 406901325., -2364183289., -768795505., -123994515., -2331496127., -329089366., 875403726., 381196134., 68890561., -5287724141., -773151841., 2099010106., 886558617., 165038982., 1772810831., 1772810831., -578675221., 7662461., 117585148., 42625381., 1083297762., 336299047., 43005597., 184941916., 28170064., -77688709., -32243103., -6093025., 2801796195., -94193041., 117183321., -2801796195., 94193042., -117183321., 325798153., -11021214., 11952015., 208949098., -7016687., 8933699., -208949098., 7016687., -8933699.},  
            {41839.9 , -2047212132., 568943556., 355978649., 11837221972., 3207731704., 360546909., -2062571118., -712320319., -103513976., -2177688563., -317450815., 904803379., 342007056., 64096972., -5075352889., -703787731., 2042051782., 786722511., 148041709., 1386756126., 1386756126., -445899930., -10999766., 82506989., 31187422., 863301130., 247040573., 31472081., 150498363., 20275618., -60535332., -23083331., -4447683., 2742103971., -92483292., 107402057., -2742103971., 92483292., -107402057., 265445892., -8842451., 13101447., 173067494., -5840558., 6693102., -173067494., 5840558., -6693102.},  
            {32989. , -2072427712., 535257537., 321457449., 11122055974., 2883703042., 325505472., -2098145018., -603822972., -83768895., -2182561814., -272993235., 863585825., 329212069., 62263449., -4853072138., -614395332., 1918416343., 724909760., 136170912., 1075542137., 1075542137., -320702079., -18176444., 59065904., 22562228., 668625308., 181718284., 22773693., 116601487., 14751409., -45351431., -16847751., -3199168., 2644664831., -89537619., 95230733., -2644664831., 89537618., -95230733., 338918299., -11511113., 11303546., 137560460., -4656373., 4974595., -137560460., 4656373., -4974595.},  
            {26921.1 , -1931988442., 439302445., 275605005., 10254001128., 2561777897., 279258039., -2000990976., -545466712., -75153702., -2106597074., -249438816., 799671823., 283226535., 54324162., -4562158209., -550401443., 1773473342., 630187877., 118520093., 830709306., 830709306., -232960684., -4312930., 44733172., 16425356., 515306549., 134491803., 16579751., 87394116., 10300201., -35011563., -12464649., -2303773., 2453856553., -83175598., 85957193., -2453856553., 83175599., -85957193., 334665927., -11366851., 11157652., 104815957., -3554392., 3633287., -104815957., 3554392., -3633287.},  
            {21531.6 , -1928173561., 359465168., 243640929., 9678640487., 2289202617., 246951160., -1780414532., -486543999., -62649537., -1968613492., -234343459., 789323916., 267264144., 48871640., -4309001780., -494481908., 1680099167., 571558557., 104821023., 628320138., 628320138., -179250921., -13717169., 31605448., 11928331., 395040142., 99265136., 12044355., 68455264., 7772493., -26333080., -9100387., -1672645., 2359628808., -80174440., 77928712., -2359628808., 80174440., -77928712., 306613641., -10364300., 11442791., 83172203., -2826612., 2731543., -83172203., 2826612., -2731543.},  
            {16912.7 , -1824809291., 328912396., 205967489., 8960699301., 2020606679., 208856562., -1758115536., -419598795., -55646862., -1929282528., -195165791., 711326448., 236458134., 40294615., -4069561208., -419940692., 1535310526., 504367542., 88136700., 486003919., 486003919., -137735110., -10928487., 22496369., 8419630., 309971996., 72812893., 8505558., 53866253., 5577618., -20679844., -6540145., -1156583., 2217407913., -75553087., 68057836., -2217407913., 75553087., -68057836., 333597682., -11385983., 9762999., 65978366., -2248095., 2024219., -65978366., 2248095., -2024219.},  
            {13098.5 , -1737675508., 252418932., 178258732., 8349988448., 1772965479., 180847258., -1531344103., -375857156., -43648175., -1787689310., -178006097., 682639496., 202255429., 36487017., -3797818035., -371874164., 1428030126., 433626895., 76985027., 370582757., 370582757., -105646883., -10742650., 16596487., 6186538., 238497807., 54069907., 6250318., 42020725., 4032645., -15673826., -4852332., -851572., 2088979749., -71303993., 61006257., -2088979749., 71303993., -61006257., 302054202., -10286805., 9393405., 51636627., -1762729., 1503214., -51636628., 1762729., -1503214.},  
            {10333.8 , -1689589174., 197143913., 150689683., 7766604190., 1530703806., 152947096., -1462059290., -305501689., -34528400., -1666106621., -147235511., 624227484., 185780898., 32380881., -3543060866., -313829381., 1316738869., 381220756., 66192912., 287086863., 287086863., -75082360., -10650826., 11311908., 4393400., 184580689., 39137590., 4440546., 32413165., 2908594., -11746554., -3419242., -603894., 1980598143., -67791894., 53246749., -1980598143., 67791894., -53246749., 292707673., -10023907., 7743854., 40819727., -1396586., 1111910., -40819727., 1396586., -1111910.},  
            {7769.34 , -1522138705., 170418366., 124199103., 7015383576., 1337895503., 126169935., -1327280371., -277620779., -29987963., -1535896253., -130396196., 567832205., 158026778., 26506048., -3222480412., -270753476., 1189858592., 329218058., 54712430., 218864865., 218864865., -59266196., -8347610., 8379494., 3063143., 143015331., 28945441., 3097840., 25187570., 2093580., -9191804., -2575008., -420629., 1797089303., -61584451., 46505899., -1797089303., 61584451., -46505899., 274424750., -9395020., 7328327., 31893140., -1093212., 818826., -31893140., 1093212., -818826.},  
            {6219.57 , -1547208762., 130190814., 103993757., 6547956229., 1165990721., 105731368., -1271810721., -233572885., -24895954., -1499102608., -110485201., 517137601., 137146294., 22159029., -3064021776., -229793530., 1076982651., 281940249., 45730028., 166880959., 166880959., -43615146., -8483625., 5715258., 2150867., 109743326., 20904089., 2176357., 19522788., 1452307., -6883274., -1808801., -293487., 1721334026., -59131303., 41040618., -1721334026., 59131303., -41040618., 294145290., -10118233., 6675954., 25124501., -862955., 602017., -25124501., 862955., -602017.},  
            {4759.3 , -1473140807., 87560190., 86016342., 5934174551., 994369376., 87530837., -1153496155., -208038219., -21286848., -1382478781., -96352178., 487443780., 115056961., 18519460., -2811122057., -195202789., 987217008., 237028587., 38189558., 127817472., 127817472., -32959447., -7354668., 3905453., 1512019., 84804812., 15208462., 1530900., 15256992., 1054427., -5231650., -1286319., -205291., 1585063575., -54531574., 35794394., -1585063575., 54531574., -35794394., 273146343., -9394437., 6235129., 19715795., -678249., 446234., -19715795., 678249., -446234.},  
            {3379.58 , -1293314239., 68665412., 70215840., 5315726254., 851452885., 71518690., -1001206684., -171177983., -16768848., -1205696411., -79525298., 431554448., 101276669., 14955762., -2496722620., -163759240., 881990673., 204633368., 30868611., 97005372., 97005372., -24487645., -5288659., 2830976., 1041217., 64695060., 11061899., 1054906., 11470680., 738990., -4016809., -944640., -141385., 1420655746., -48927315., 30808127., -1420655746., 48927315., -30808127., 229997962., -7918633., 5048657., 15057613., -518698., 323737., -15057613., 518698., -323737.},  
            {2662.33 , -1236459733., 49710328., 57531987., 4807482288., 727452170., 58653242., -930705386., -147951664., -13623079., -1112566994., -66361741., 379125023., 82181651., 12554076., -2289660411., -135517158., 782812172., 169391026., 25589840., 73600772., 73600772., -18212255., -4496460., 1844578., 724349., 49458881., 7934741., 734432., 8809191., 531660., -3039754., -660000., -98399.3, 1308477866., -45138842., 26537868., -1308477865., 45138842., -26537868., 215855173., -7443152., 4457563., 11671299., -402550., 238618., -11671299., 402550., -238618.},  
            {1926.39 , -1130691474., 30529346., 46127647., 4304530931., 619700677., 47098567., -826147186., -124403194., -10929232., -1015244041., -55825454., 337942656., 69938432., 10051794., -2066920704., -114021994., 691740995., 142509172., 20508015., 55380827., 55380827., -13368991., -3944441., 1213295., 494037., 37432959., 5675502., 501386., 6706149., 370432., -2262785., -462890., -67123.3, 1181646296., -40803152., 22993232., -1181646296., 40803152., -22993232., 202323072., -6986923., 3923375., 9001288., -310866., 174054., -9001288., 310866., -174054.},  
            {1417.98 , -1038096784., 12856090., 37005918., 3842417844., 516775184., 37831479., -732551900., -102241582., -8701678., -905018888., -45573758., 303407993., 58319928., 8189937., -1854726912., -92974677., 617712015., 117385021., 16575209., 41692683., 41692683., -10247538., -3154384., 768451., 336422., 28552559., 4035739., 341773., 5200163., 260201., -1704683., -323252., -45668.2, 1067175691., -36899225., 19568208., -1067175691., 36899225., -19568208., 178060074., -6155138., 3303245., 6934639., -239788., 126849., -6934639., 239788., -126849.},  
            {1048.48 , -957548873., 2407602., 29149495., 3425937217., 434623078., 29853438., -662968199., -87654915., -6831198., -818946065., -37095895., 269404519., 47287889., 6418066., -1663384475., -75532706., 545299307., 96169094., 13018350., 30993109., 30993109., -7489331., -2361095., 501877., 228341., 21326798., 2862355., 232190., 3862992., 179178., -1276190., -225672., -31100.1, 963465761., -33352692., 16700382., -963465761., 33352692., -16700382., 167547109., -5800469., 2893871., 5200412., -179977., 91313., -5200412., 179977., -91313.},  
            {781.922 , -849317294., -5050851., 22985324., 2997676109., 362464214., 23581377., -586082801., -72024802., -5336404., -732115538., -30716573., 234983401., 39351188., 5101764., -1468479765., -62192569., 473780883., 79001638., 10299931., 22895976., 22895976., -5445310., -1893631., 317367., 150766., 15828623., 2022752., 153535., 2887678., 124130., -932496., -157245., -20416.2, 848425373., -29392981., 14149842., -848425373., 29392981., -14149842., 153167292., -5308271., 2507407., 3905505., -135279., 65714.2, -3905504., 135279., -65714.2},  
            {553.886 , -758568602., -12475081., 17819967., 2606588189., 299595222., 18324027., -496390833., -60216507., -4102473., -628322821., -25325673., 203389630., 31628364., 3988444., -1281438357., -50732743., 409982235., 63767022., 8015439., 16971516., 16971516., -4057729., -1566712., 186133., 100605., 11842615., 1422018., 102599., 2188175., 85180.6, -689399., -108128., -13722., 744455287., -25809062., 11973503., -744455287., 25809062., -11973503., 125997723., -4365030., 2102716., 2968335., -102922., 47383.6, -2968335., 102922., -47383.6},  
            {403.303 , -685954937., -15164013., 13511331., 2268763475., 247915546., 13933785., -446385170., -49761781., -3218549., -561161610., -20188682., 173738056., 25485903., 3001607., -1127845630., -40475932., 350979304., 51405915., 6080007., 12397143., 12397143., -2935431., -1206177., 109885., 65178.1, 8695143., 993488., 66597.5, 1610038., 58132.8, -502465., -73910.1, -8801.24, 656320999., -22774464., 10044029., -656320999., 22774464., -10044029., 117447657., -4075174., 1804293., 2198853., -76296.8, 33744.4, -2198852., 76296.8, -33744.4},  
            {292.15 , -584319578., -17169823., 10335816., 1945782266., 202721614., 10687649., -378400453., -41030162., -2348155., -480275483., -16132398., 150943206., 20151820., 2344500., -966268932., -32508679., 302727258., 40943225., 4678670., 8985371., 8985371., -2135347., -919846., 58031.7, 42568.2, 6344877., 688669., 43577.1, 1184296., 39853.1, -364271., -50232.3, -5792.58, 563314651., -19557363., 8369623., -563314651., 19557363., -8369623., 100343242., -3483784., 1490119., 1617635., -56163.1, 24000., -1617635., 56163.1, -24000.},  
            {206.536 , -512556048., -17523558., 7714671., 1649110412., 163981795., 8003547., -316683870., -32222982., -1791187., -408664346., -12597480., 127263965., 16366566., 1738453., -823619673., -25391213., 253293606., 32622293., 3490150., 6503422., 6503422., -1540794., -691725., 29621.7, 27181.1, 4618845., 475020., 27889.9, 865537., 26493., -263934., -33936., -3696.12, 482836438., -16775373., 6877602., -482836438., 16775373., -6877602., 85916598., -2985147., 1221019., 1186309., -41217.3, 16874.5, -1186309., 41217.3, -16874.5},  
            {148.227 , -440097214., -18093174., 5711383., 1394580425., 131379203., 5948131., -279437210., -26190955., -1368840., -353236216., -9814888., 104860498., 12486971., 1275574., -701451368., -19792995., 211342932., 25053874., 2582488., 4646836., 4646836., -1083899., -518498., 10670.6, 17082.1, 3311572., 323782., 17578.4, 621436., 17794.2, -187762., -22442.9, -2325.22, 410915306., -14285249., 5640773., -410915306., 14285249., -5640773., 76957884., -2676398., 1031944., 857564., -29810.7, 11821.7, -857564., 29810.7, -11821.7},  
            {105.5 , -371519906., -17295548., 4155729., 1162535425., 105234549., 4349172., -221234718., -20326309., -1018637., -291262785., -7772432., 87961943., 9933760., 927071., -586185837., -15585864., 175236757., 19631184., 1884370., 3298452., 3298452., -776615., -376549., 774.432, 10780.8, 2366166., 219475., 11125.9, 447960., 11882.4, -133452., -14714.1, -1471.11, 344182003., -11969925., 4611318., -344182003., 11969925., -4611318., 61172678., -2127188., 826168., 615448., -21404.7, 8228.65, -615448., 21404.7, -8228.65},  
            {71.9138 , -317700841., -16342542., 3013621., 963815382., 83229790., 3170087., -190451053., -16940580., -691879., -246895792., -5946223., 73188977., 7391747., 691080., -490446003., -11981525., 144957730., 14911744., 1376858., 2300753., 2300753., -522860., -282548., -2172.16, 6555.67, 1647698., 148461., 6792.54, 312836., 7737.54, -90987.4, -9832.2, -898.831, 288201589., -10028292., 3732579., -288201589., 10028292., -3732579., 53801228., -1872622., 683327., 433935., -15098., 5650.21, -433935., 15098., -5650.21},  
            {49.5856 , -258840576., -13936204., 2163574., 777369997., 65672302., 2288425., -144407037., -12617051., -509391., -192330402., -4657315., 57994158., 5685571., 492086., -393572978., -9336496., 115527019., 11434576., 987873., 1589607., 1589607., -367025., -192479., -4307.67, 4029.53, 1145916., 98462.2, 4190.69, 217694., 5137.36, -63910., -6274.69, -552.853, 233254927., -8118061., 2979297., -233254927., 8118061., -2979297., 39313992., -1367709., 515662., 301291., -10486., 3845.8, -301291., 10486., -3845.8},  
            {35.7306 , -210449454., -12290742., 1488191., 625201060., 50586486., 1586440., -123533607., -9940232., -341849., -160761644., -3467242., 45269845., 4240997., 346685., -320388705., -7016091., 91513847., 8497942., 686993., 1086741., 1086741., -255142., -144775., -4977.64, 2371.61, 788723., 65362.3, 2481.54, 152047., 3366.49, -43411.9, -4074.59, -324.299, 188430678., -6560509., 2345863., -188430678., 6560509., -2345863., 34610958., -1205334., 423547., 210470., -7327.65, 2624.85, -210470., 7327.65, -2624.85},  
            {22.9439 , -169733168., -10451855., 1011559., 492918117., 38833748., 1088410., -94167379., -7628607., -242827., -125675071., -2704391., 36220003., 3153655., 232505., -253182155., -5362577., 72070894., 6317534., 466552., 732753., 732753., -169549., -98432.5, -4213.22, 1399.76, 532278., 42577.4, 1472.69, 102598., 2150.75, -29164.7, -2568.28, -191.334, 149561215., -5208284., 1835551., -149561215., 5208284., -1835551., 26482738., -921959., 331629., 142381., -4958.48, 1741.95, -142381., 4958.48, -1741.95},  
            {16.5921 , -133691688., -8662928., 679058., 382519021., 29255254., 738049., -75850209., -5796406., -168508., -98978377., -1988038., 27313580., 2310943., 154629., -197505488., -3984772., 55154621., 4612297., 313303., 489816., 489816., -112240., -71538.9, -3642.03, 810.603, 356459., 27601.5, 859.155, 69808.5, 1372.86, -19020.6, -1603.9, -111.915, 116625389., -4062226., 1409490., -116625389., 4062226., -1409490., 21400533., -745458., 257478., 96743.4, -3370.07, 1160.26, -96743.4, 3370.07, -1160.26},  
            {16.0609 , -185345289., -12268245., 727404., 504933898., 37565525., 804684., -98044610., -7366681., -175676., -131707121., -2516296., 35318922., 2795967., 170652., -263867882., -5005153., 70858136., 5611586., 340692., 516762., 516762., -117890., -77907.7, -4635.84, 706.891, 377037., 28232.4, 757.869, 73998.4, 1404.53, -20040.6, -1577.23, -98.2598, 156164255., -5441048., 1847407., -156164255., 5441048., -1847406., 28254215., -984316., 336993., 102918., -3585.81, 1218.61, -102918., 3585.81, -1218.61},  
            {10.0817 , -179616307., -12430213., 399143., 444701364., 32423625., 468637., -87476898., -6355780., -102387., -119988578., -2220782., 29431993., 2228793., 96725.8, -238952666., -4438111., 58989029., 4453216., 193151., 291988., 291988., -65763.1, -51373.6, -3415.48, 267.356, 213540., 15513.9, 296.654, 43068.2, 783.315, -10864.9, -811.299, -37.5894, 141294692., -4923372., 1661518., -141294692., 4923372., -1661518., 26109500., -909821., 305978., 59980.2, -2090.18, 700.592, -59980.2, 2090.18, -700.592}  
        };

    double Nev;
    int NCi = 49;

    Nev = 0.;

    if (i_bin < 31) {
        switch(flavBas){ 
            case 1:    // UP Basis
                for (int iCi = 0; iCi < NCi; ++iCi) {

                    Nev = Nev + NevCiU[i_bin - 1][iCi] * Civect[iCi];
                }
            break;
            case 2:    // DOWN Basis
                for (int iCi = 0; iCi < NCi; ++iCi) {

                    Nev = Nev + NevCiD[i_bin - 1][iCi] * Civect[iCi];
                }
            break;                
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::NevLHCppmumu13");

    if (Nev < 0) return std::numeric_limits<double>::quiet_NaN();

    return Nev;
}

const double NPSMEFTd6General::NevLHCpptautau13(const int i_bin) const {
    // HighPT parameterization: Same operators in the UP and DOWN bases
    double Civect[49] = {
        1., getSMEFTCoeffEW("Clq1R", 2, 2, 0, 0), getSMEFTCoeffEW("Clq1R", 2, 2, 1, 1), getSMEFTCoeffEW("Clq1R", 2, 2, 2, 2), getSMEFTCoeffEW("Clq3R", 2, 2, 0, 0), getSMEFTCoeffEW("Clq3R", 2, 2, 1, 1), getSMEFTCoeffEW("Clq3R", 2, 2, 2, 2), getSMEFTCoeffEW("CqeR", 0, 0, 2, 2), getSMEFTCoeffEW("CqeR", 1, 1, 2, 2), getSMEFTCoeffEW("CqeR", 2, 2, 2, 2), getSMEFTCoeffEW("CluR", 2, 2, 0, 0), getSMEFTCoeffEW("CluR", 2, 2, 1, 1), getSMEFTCoeffEW("CldR", 2, 2, 0, 0), getSMEFTCoeffEW("CldR", 2, 2, 1, 1), getSMEFTCoeffEW("CldR", 2, 2, 2, 2), getSMEFTCoeffEW("CeuR", 2, 2, 0, 0), getSMEFTCoeffEW("CeuR", 2, 2, 1, 1), getSMEFTCoeffEW("CedR", 2, 2, 0, 0), getSMEFTCoeffEW("CedR", 2, 2, 1, 1), getSMEFTCoeffEW("CedR", 2, 2, 2, 2), getSMEFTCoeffEW("CHl1R", 2, 2), getSMEFTCoeffEW("CHl3R", 2, 2), getSMEFTCoeffEW("CHeR", 2, 2), getSMEFTCoeffEW("CHq1R", 0, 0), getSMEFTCoeffEW("CHq1R", 1, 1), getSMEFTCoeffEW("CHq1R", 2, 2), getSMEFTCoeffEW("CHq3R", 0, 0), getSMEFTCoeffEW("CHq3R", 1, 1), getSMEFTCoeffEW("CHq3R", 2, 2), getSMEFTCoeffEW("CHuR", 0, 0), getSMEFTCoeffEW("CHuR", 1, 1), getSMEFTCoeffEW("CHdR", 0, 0), getSMEFTCoeffEW("CHdR", 1, 1), getSMEFTCoeffEW("CHdR", 2, 2), getSMEFTCoeffEW("Clq1R", 2, 2, 0, 1), getSMEFTCoeffEW("Clq1R", 2, 2, 0, 2), getSMEFTCoeffEW("Clq1R", 2, 2, 1, 2), getSMEFTCoeffEW("Clq3R", 2, 2, 0, 1), getSMEFTCoeffEW("Clq3R", 2, 2, 0, 2), getSMEFTCoeffEW("Clq3R", 2, 2, 1, 2), getSMEFTCoeffEW("CqeR", 0, 1, 2, 2), getSMEFTCoeffEW("CqeR", 0, 2, 2, 2), getSMEFTCoeffEW("CqeR", 1, 2, 2, 2), getSMEFTCoeffEW("CHq1R", 0, 1), getSMEFTCoeffEW("CHq1R", 0, 2), getSMEFTCoeffEW("CHq1R", 1, 2), getSMEFTCoeffEW("CHq3R", 0, 1), getSMEFTCoeffEW("CHq3R", 0, 2), getSMEFTCoeffEW("CHq3R", 1, 2)
    };

    // UP Basis
    // HighPT parameterization in the basis aligned with diagonal up sector (i.e. d_i = V d_m to pass to mass eigenstate basis)

        double NevCiU[14][49] = {
            {1125.2, -589725., 39124.3, 32481.8, 1549379., 248588., 32481.8, 430190., -58249.1, 3495.36, -49918., -14487.8, 132927., 37499.8, 7432.79, -717796., -67128.3, 204513., 77383.6, 12166.4, 93859.2, 93859.2, -82897.4, -28712.7, 40072., 935.545, 52892.1, 49708.4, 935.545, 19149.5, 2698.16, -1421.78, -8108.76, -198.096, 163849., -349.289, 7820.12, 163849., -349.289, 7820.12, 64670.6, 1740.63, -6654.99, -15995.8, -834.79, 3742.85, -15995.8, -834.79, 3742.85},
            {1498.3, -55671282., 17252023., 3816440., 209037018., 45265331., 3816440., -33315414., -8470826., -682249., -42592090., -4164577., 20204223., 5597203., 892377., -93294867., -9822211., 37595581., 11978128., 1694617., 12339567., 12339567., -3586627., -766285., 1071646., 219117., 7629398., 2147678., 219117., 1286451., 185539., -507713., -210440., -30447.1, 22152789., -243392., 2077382., 22152789., -243392., 2077382., -4020266., 67897.3, -500276., 888525., -14358.6, 107080., 888525., -14358.6, 107080.},
            {1434.54, -451638528., 116826141., 23333812., 1693299459., 297855080., 23333812., -326941463., -68747259., -6255862., -362558980., -30877074., 130383527., 36476632., 4578364., -765696527., -64998418., 278396536., 78775395., 9887489., 73134117., 73134117., -20434999., -4018471., 5324281., 925210., 47898979., 9912767., 925210., 8389152., 739169., -3079316., -931216., -129605., 201651853., -1172464., 13511929., 201651853., -1172464., 13511929., -52606276., 316372., -3579208., 6984478., -45686.8, 494166., 6984478., -45686.8, 494166.},
            {1495.3, -478265522., 117604930., 20687731., 1776398385., 280309365., 20687731., -351502499., -62050878., -4664863., -394579306., -28365226., 136304230., 35992075., 4387055., -813288423., -58746677., 290218723., 75163445., 8914806., 53871585., 53871585., -16356509., -4604138., 3667990., 597134., 36580756., 6828758., 597134., 6838229., 505737., -2286826., -646920., -81679.4, 219509776., -926938., 12902183., 219509776., -926938., 12902183., -56908339., 209400., -3185599., 5237679., -28422.9, 340425., 5237679., -28422.9, 340425.},
            {1276.9, -393858908., 80331940., 13100697., 1355090445., 188817688., 13100697., -248332828., -39277915., -2725312., -302255519., -19211118., 106422411., 24478113., 2893914., -630726875., -39419827., 218252707., 49966681., 5716350., 29415524., 29415524., -7771497., -1952773., 1805785., 255241., 19929206., 3271348., 255241., 3418344., 222116., -1295612., -293079., -34099.5, 168757183., -465648., 8641161., 168757183., -465648., 8641161., -39488065., 95979.1, -1955162., 3145366., -8984.47, 162625., 3145366., -8984.47, 162625.},
            {656.11, -311199643., 57889630., 8377473., 1021151616., 130080642., 8377473., -191506402., -27507427., -1892248., -233414446., -12444398., 78972710., 16798222., 1838521., -480406311., -25923258., 161339391., 34502898., 3673947., 16902140., 16902140., -4312627., -1361148., 1002634., 148605., 11482131., 1781863., 148605., 1985325., 122339., -724692., -157912., -20660.1, 127279729., -255886., 6024890., 127279729., -255886., 6024890., -28850929., 65102.8, -1402579., 1788930., -4238.78, 87961.3, 1788930., -4238.78, 87961.3},
            {353.42, -251219099., 40116427., 5446991., 782785024., 91249999., 5446991., -151296939., -18920978., -1390196., -183356039., -9161795., 59791459., 11933059., 1089897., -375629717., -18478809., 122732064., 23848371., 2311339., 10354404., 10354404., -2385330., -1091732., 593192., 80859.4, 6989719., 1020424., 80859.4, 1247718., 66614.1, -407600., -91142.6, -10667.7, 97584271., -110597., 4176379., 97584271., -110597., 4176379., -24902070., -10051.3, -866924., 1044700., -2470., 51350.5, 1044700., -2470., 51350.5},
            {327.85, -359976747., 51077383., 6280852., 1093895801., 112805774., 6280852., -209304951., -23364451., -1515747., -261539655., -11058320., 83394044., 14905896., 1325378., -525475158., -22369164., 167342190., 29526210., 2717348., 10638471., 10638471., -2598650., -1179739., 530932., 59617.5, 7412570., 928548., 59617.5, 1328154., 61007.1, -443297., -79988.4, -7888.79, 138996789., 3181.44, 5116527., 138996789., 3181.44, 5116527., -28954857., 9812.86, -1119885., 1163928., -552.961, 45842.9, 1163928., -552.961, 45842.9},
            {123.3, -228213577., 29818389., 3073128., 658493661., 62191756., 3073128., -130599357., -12983324., -651599., -164458929., -5774965., 51356958., 7984421., 659882., -323842018., -11744302., 100836172., 16089741., 1319674., 4743547., 4743547., -1078413., -623880., 213472., 21235.2, 3322080., 365508., 21235.2, 606793., 23991.1, -187216., -30965., -2811.82, 82483185., 33083.5, 2875363., 82483185., 33083.5, 2875363., -17262380., 2062.1, -648431., 516748., 218.374, 17952.5, 516748., 218.374, 17952.5},
            {61.49, -145757557., 16949854., 1590573., 416092386., 35048802., 1590573., -78886417., -7534435., -376693., -100849643., -3172652., 31431725., 4372489., 330371., -203490631., -6522863., 62558804., 8845314., 679482., 2219321., 2219321., -528140., -312066., 97127.9, 8341.16, 1579043., 161078., 8341.16, 293658., 9941.59, -88749.4, -13454.9, -1099.74, 53238672., 73685.6, 1584755., 53238672., 73685.6, 1584755., -11174959., -7169.7, -375670., 245977., 213.847, 7977.86, 245977., 213.847, 7977.86},
            {33.42, -94607353., 9387356., 849831., 254583495., 20159589., 849831., -53867502., -4620903., -206957., -64805815., -1958859., 17808068., 2483536., 173807., -127647352., -3909109., 36982690., 4994150., 361206., 1120848., 1120848., -269872., -160094., 45501.3, 3536.81, 804893., 76307.7, 3536.81, 150762., 4950.11, -45112.8, -6163.42, -451.903, 31803589., 54442.8, 892724., 31803589., 54442.8, 892724., -8224524., -16959., -215924., 127525., 193.94, 3705.93, 127525., 193.94, 3705.93},
            {17.43, -58482736., 5875513., 473243., 162113782., 12026512., 473243., -33883147., -2494236., -115548., -40665146., -1095321., 10584136., 1490190., 94953.7, -80563464., -2226866., 22934027., 2914822., 199193., 596252., 596252., -143146., -95652.3, 22565.3, 1643.1, 432064., 36972.1, 1643.1, 83500.9, 2271.2, -23288.8, -2921.21, -214.412, 20903976., 46468., 531427., 20903976., 46468., 531427., -5486925., -18183.9, -108405., 67512.5, 138.259, 1777.5, 67512.5, 138.259, 1777.5},
            {11.97, -45465112., 4806910., 352602., 134077235., 9787476., 352602., -24596228., -2075529., -76424.6, -31012786., -935270., 9230964., 1106770., 77983.4, -64434599., -1811480., 19518288., 2242645., 153827., 400933., 400933., -90043.7, -62138.8, 14429.1, 943.179, 288566., 23870.2, 943.179, 54480., 1470.48, -15549.2, -1839.54, -121.841, 18048314., 46065.3, 428046., 18048314., 46065.3, 428046., -4156463., -12370.1, -89436., 45872.8, 108.277, 1133.61, 45872.8, 108.277, 1133.61},
            {10.65, -81713440., 6151352., 339634., 206691696., 11427748., 339634., -37562016., -2309820., -82281.2, -50867921., -942106., 14377053., 1312748., 74363.2, -104251949., -1913026., 28790859., 2576756., 149005., 365427., 365427., -89244.7, -61017.5, 11954.1, 616.592, 270514., 18500.6, 616.592, 52131.2, 995.032, -14668.1, -1383.45, -81.0821, 26187934., 92621.6, 487473., 26187934., 92621.6, 487473., -5608532., -20446.4, -101213., 43657.2, 146.1, 855.717, 43657.2, 146.1, 855.717}
        };

    // DOWN Basis
    // HighPT parameterization in the basis aligned with diagonal down sector (i.e. u_i = V^dagger u_m to pass to mass eigenstate basis)
        double NevCiD[14][49] = {  
            {1125.2 , -524038., -29411.2, 31936.1, 1520225., 278427., 32460.2, 420039., -47418.2, 3674.6, -49918., -14487.8, 132927., 37499.8, 7432.79, -717796., -67128.3, 204513., 77383.6, 12166.4, 93664.4, 93664.4, -82807.7, -28805., 39938.3, 840.747, 49265.3, 53249., 863.621, 19149.5, 2698.16, -1421.78, -8108.76, -198.096, 423404., -14452.8, 12350., -423404., 14452.8, -12350., -156172., 5420.61, -2355.45, 15790.8, -535.844, 538.369, -15790.8, 535.844, -538.369},  
            {1498.3 , -47401816., 8564620., 3724112., 205676348., 48651717., 3792625., -32942268., -8830233., -672726., -42592090., -4164577., 20204223., 5597203., 892377., -93294867., -9822211., 37595581., 11978128., 1694617., 12336526., 12336526., -3579941., -488626., 777145., 214791., 7547705., 2227171., 217293., 1286451., 185539., -507713., -210440., -30447.1, 51935092., -1768763., 1613783., -51935092., 1768763., -1613783., 7285611., -250402., 170611., 1605985., -54330.7, 58846., -1605985., 54330.7, -58846.},  
            {1434.54 , -380910974., 42939325., 22724321., 1667455270., 323995598., 23198921., -325402923., -70172842., -6193271., -362558980., -30877074., 130383527., 36476632., 4578364., -765696527., -64998418., 278396536., 78775395., 9887489., 73118701., 73118701., -20404901., -2078243., 3290241., 905413., 47512215., 10289988., 917263., 8389152., 739169., -3079316., -931216., -129605., 430935467., -14765821., 11198677., -430935467., 14765821., -11198677., 65970599., -2260561., 1711762., 10385189., -355452., 279507., -10385189., 355452., -279507.},  
            {1495.3 , -402345966., 38476681., 20112886., 1749406161., 307641633., 20563414., -349348982., -64136893., -4616778., -394579306., -28365226., 136304230., 35992075., 4387055., -813288423., -58746677., 290218723., 75163445., 8914806., 53865118., 53865118., -16335222., -3085931., 2080512., 583443., 36228698., 7176940., 592004., 6838229., 505737., -2286826., -646920., -81679.4, 459044308., -15781338., 10644557., -459044308., 15781338., -10644557., 75818481., -2607648., 1730924., 8343662., -286490., 202149., -8343662., 286490., -202149.},  
            {1276.9 , -334663475., 18768667., 12710141., 1333557461., 210681864., 13028550., -246438309., -41152588., -2699561., -302255519., -19211118., 106422411., 24478113., 2893914., -630726875., -39419827., 218252707., 49966681., 5716350., 29414118., 29414118., -7758732., -1099558., 916391., 248769., 19777880., 3420591., 252942., 3418344., 222116., -1295612., -293079., -34099.5, 359978371., -12408792., 7532874., -359978371., 12408792., -7532874., 56212165., -1936031., 1216887., 4480074., -154232., 98669.8, -4480074., 154232., -98669.8},  
            {656.11 , -265972346., 10917214., 8106800., 1004349455., 147162119., 8331042., -189566537., -29446624., -1873755., -233414446., -12444398., 78972710., 16798222., 1838521., -480406311., -25923258., 161339391., 34502898., 3673947., 16901889., 16901889., -4305510., -864627., 485565., 145041., 11384944., 1878269., 147349., 1985325., 122339., -724692., -157912., -20660.1, 276529847., -9551618., 5311470., -276529847., 9551618., -5311470., 46012094., -1590152., 862980., 2647305., -91287.4, 54605.1, -2647305., 91287.4, -54605.1},  
            {353.42 , -216120328., 3706872., 5255681., 769496048., 104784471., 5421135., -150080184., -20142493., -1381052., -183356039., -9161795., 59791459., 11933059., 1089897., -375629717., -18478809., 122732064., 23848371., 2311339., 10354599., 10354599., -2381407., -786731., 275877., 78803.2, 6917937., 1092140., 80144.6, 1247718., 66614.1, -407600., -91142.6, -10667.7, 215683235., -7458907., 3922232., -215683235., 7458907., -3922232., 35686945., -1232951., 678383., 1679648., -58036.3, 31782.1, -1679648., 58036.3, -31782.1},  
            {327.85 , -310152978., -530987., 6041885., 1075167452., 131906921., 6256699., -206309899., -26403664., -1505631., -261539655., -11058320., 83394044., 14905896., 1325378., -525475158., -22369164., 167342190., 29526210., 2717348., 10639752., 10639752., -2594403., -847865., 186521., 57763., 7340969., 1000462., 59090., 1328154., 61007.1, -443297., -79988.4, -7888.79, 305499048., -10583577., 5099460., -305499048., 10583577., -5099460., 55549378., -1925071., 911477., 1798272., -62239., 31477.8, -1798272., 62239., -31477.8},  
            {123.3 , -197945331., -1506158., 2939967., 646684771., 74244138., 3061736., -128480356., -15138389., -646551., -164458929., -5774965., 51356958., 7984421., 659882., -323842018., -11744302., 100836172., 16089741., 1319674., 4744421., 4744421., -1076642., -472637., 56768.9, 20498.7, 3286479., 401458., 21054.5, 606793., 23991.1, -187216., -30965., -2811.82, 187481304., -6504597., 2894642., -187481304., 6504597., -2894642., 36085667., -1253147., 528507., 832563., -28871.1, 13207.2, -832563., 28871.1, -13207.2},  
            {61.49 , -126403442., -3058065., 1514668., 408662398., 42641265., 1587594., -77751068., -8687967., -373652., -100849643., -3172652., 31431725., 4372489., 330371., -203490631., -6522863., 62558804., 8845314., 679482., 2219790., 2219790., -527327., -239532., 22040.5, 8015.95, 1561578., 178745., 8266.72, 293658., 9941.59, -88749.4, -13454.9, -1099.74, 119325636., -4144316., 1735526., -119325636., 4144316., -1735526., 21259105., -738706., 300545., 400967., -13920.6, 5965.41, -400967., 13920.6, -5965.41},  
            {33.42 , -82709498., -2906739., 805539., 249810807., 25041911., 850028., -53193864., -5306592., -205812., -64805815., -1958859., 17808068., 2483536., 173807., -127647352., -3909109., 36982690., 4994150., 361206., 1121102., 1121102., -269484., -122803., 6927.59, 3382.86, 796168., 85151.4, 3507.63, 150762., 4950.11, -45112.8, -6163.42, -451.903, 74265822., -2580192., 1059174., -74265822., 2580192., -1059174., 14212399., -493901., 199645., 205005., -7120.57, 2969.4, -205005., 7120.57, -2969.4},  
            {17.43 , -50857833., -1998948., 446763., 159174099., 15034232., 473721., -33506395., -2878468., -115277., -40665146., -1095321., 10584136., 1490190., 94953.7, -80563464., -2226866., 22934027., 2914822., 199193., 596408., 596408., -142957., -75443.4, 1679.92, 1567.41, 426985., 42134., 1631.36, 83500.9, 2271.2, -23288.8, -2921.21, -214.412, 47060227., -1636171., 642390., -47060227., 1636171., -642390., 8838514., -307455., 116698., 112646., -3916.99, 1524.17, -112646., 3916.99, -1524.17},  
            {11.97 , -39142083., -1721726., 331288., 131800500., 12117016., 353184., -24372868., -2303013., -76209.3, -31012786., -935270., 9230964., 1106770., 77983.4, -64434599., -1811480., 19518288., 2242645., 153827., 401047., 401047., -89910.1, -48591.1, 432.482, 894.554, 285301., 27190.3, 936.821, 54480., 1470.48, -15549.2, -1839.54, -121.841, 38307721., -1331913., 521788., -38307721., 1331913., -521788., 6143525., -213215., 93193.9, 74890.8, -2604.38, 1007.48, -74890.8, 2604.38, -1007.48},  
            {10.65 , -71799379., -4068916., 312868., 202653421., 15566654., 343266., -37020806., -2863314., -82412.8, -50867921., -942106., 14377053., 1312748., 74363.2, -104251949., -1913026., 28790859., 2576756., 149005., 365551., 365551., -89122.5, -48113.4, -1358.44, 578.314, 267404., 21671.4, 614.101, 52131.2, 995.032, -14668.1, -1383.45, -81.0821, 62133855., -2165190., 726875., -62133855., 2165190., -726875., 10424797., -363227., 123129., 71319.3, -2484.43, 855.222, -71319.3, 2484.43, -855.222}  
        };

    double Nev;
    int NCi = 49;

    Nev = 0.;

    if (i_bin < 15) {
        switch(flavBas){ 
            case 1:    // UP Basis
                for (int iCi = 0; iCi < NCi; ++iCi) {

                    Nev = Nev + NevCiU[i_bin - 1][iCi] * Civect[iCi];
                }
            break;
            case 2:    // DOWN Basis
                for (int iCi = 0; iCi < NCi; ++iCi) {

                    Nev = Nev + NevCiD[i_bin - 1][iCi] * Civect[iCi];
                }
            break;                
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::NevLHCpptautau13");

    if (Nev < 0) return std::numeric_limits<double>::quiet_NaN();

    return Nev;
}

///////////Collider observables: LHC mono-lepton events////////////////////////

const double NPSMEFTd6General::NevLHCppenu13(const int i_bin) const {
    
    // UP Basis
    // HighPT parameterization in the basis aligned with diagonal up sector (i.e. d_i = V d_m to pass to mass eigenstate basis)
        double CivectU[12] = {
            1., getSMEFTCoeffEW("Clq3R", 0, 0, 0, 0), getSMEFTCoeffEW("Clq3R", 0, 0, 1, 1), getSMEFTCoeffEW("CHl3R", 0, 0), getSMEFTCoeffEW("CHq3R", 0, 0), getSMEFTCoeffEW("CHq3R", 1, 1), getSMEFTCoeffEW("Clq3R", 0, 0, 0, 1), getSMEFTCoeffEW("Clq3R", 0, 0, 0, 2), getSMEFTCoeffEW("Clq3R", 0, 0, 1, 2), getSMEFTCoeffEW("CHq3R", 0, 1), getSMEFTCoeffEW("CHq3R", 0, 2), getSMEFTCoeffEW("CHq3R", 1, 2)
        };

        double NevCiU[24][12] = {
            {9931.68, 15815028888., 1910124774., 505246116., 447917862., 57328254., 1857694407., -33812057., 44929051., 52387836., -970482., 1346390.},
            {7583.35, 16567720994., 1932085859., 464253341., 413494731., 50758610., 1929437499., -34359364., 44906017., 49548944., -806704., 1174188.},
            {5800.02, 15523921817., 1752254293., 376898762., 336973129., 39925633., 1797356805., -32081956., 41431116., 39082953., -730123., 932933.},
            {4428.07, 14077711519., 1470299057., 299906041., 270340902., 29565139., 1648848592., -29337116., 34567274., 31742458., -571088., 678590.},
            {3421.25, 12929825334., 1245010617., 235220311., 213471878., 21748433., 1547343005., -25658692., 28232174., 25893105., -403019., 502959.},
            {2550.01, 11846675327., 1056081109., 182877411., 166692513., 16184898., 1455119897., -22450699., 24585033., 19901885., -335187., 379164.},
            {1923.29, 10304365745., 920387399., 140869755., 128711152., 12158603., 1259371050., -19957209., 21993045., 15890255., -246042., 280608.},
            {1519.35, 9053033569., 771764561., 111756780., 102712373., 9044407., 1137356977., -16717788., 18381197., 12861584., -191990., 214066.},
            {1136.43, 8123259191., 625372428., 84498890., 77943657., 6555233., 1047346356., -14261159., 14655264., 9463084., -159992., 154382.},
            {870.566, 6981750196., 526929021., 66528774., 61728417., 4800357., 880587511., -12939111., 12646791., 7869298., -112227., 116528.},
            {679.211, 6195044683., 444441521., 50862492., 47404449., 3458043., 797336165., -11454340., 10739289., 6214331., -82266.6, 82367.4},
            {492.385, 5413470224., 364824947., 37837415., 35312796., 2524619., 711170386., -9410081., 8817461., 4573888., -62625.8, 61049.2},
            {369.398, 4634981814., 296582265., 29384640., 27595732., 1788907., 615758376., -7713875., 7252618., 3652649., -46646.4, 43414.1},
            {273.215, 4018112977., 242727058., 21738274., 20457762., 1280512., 537048593., -6896369., 5972913., 2709294., -35127., 30912.},
            {203.491, 3461281349., 198453348., 16358627., 15438014., 920613., 472945171., -5559458., 4912856., 2097996., -25379.4, 22541.2},
            {150.006, 2898124241., 157403677., 12175150., 11529132., 646018., 396300816., -4706104., 3907108., 1571732., -19266.6, 15874.3},
            {110.416, 2449892489., 128684394., 9083899., 8620924., 462974., 341300541., -3846295., 3238715., 1210238., -13043.4, 11668.9},
            {80.4744, 2087360820., 102890079., 6636922., 6314526., 322397., 295849758., -3120783., 2604615., 876227., -10109.5, 8133.51},
            {57.7052, 1712274827., 80401256., 4876459., 4653078., 223382., 243907892., -2611606., 2033494., 663490., -7019.5, 5591.28},
            {41.6386, 1417751397., 64031444., 3526560., 3370317., 156244., 205966853., -2068981., 1626841., 485332., -4926.44, 3961.24},
            {29.6198, 1173734889., 50461002., 2529655., 2422781., 106873., 172601831., -1670923., 1304600., 351873., -3559.51, 2740.9},
            {20.9425, 944808741., 39891834., 1813546., 1739746., 73799.8, 138689443., -1379836., 1032094., 253107., -2642.3, 1887.38},
            {24.4031, 1361179026., 54067101., 2160074., 2075835., 84238.4, 205814193., -1862048., 1410461., 304422., -3143.6, 2193.47},
            {18.6359, 1768316587., 68704168., 1772744., 1706878., 65865.9, 269574506., -2751113., 1867446., 261456., -2485.17, 1768.29}
        };

        int NCiU = 12;

    // DOWN Basis
    // HighPT parameterization in the basis aligned with diagonal down sector (i.e. u_i = V^dagger u_m to pass to mass eigenstate basis)
        double CivectD[14] = {
            1. , getSMEFTCoeffEW("Clq3R",0,0,0,0), getSMEFTCoeffEW("Clq3R",0,0,1,1), getSMEFTCoeffEW("Clq3R",0,0,2,2), getSMEFTCoeffEW("CHl3R",0,0), getSMEFTCoeffEW("CHq3R",0,0), getSMEFTCoeffEW("CHq3R",1,1), getSMEFTCoeffEW("CHq3R",2,2), getSMEFTCoeffEW("Clq3R",0,0,0,1), getSMEFTCoeffEW("Clq3R",0,0,0,2), getSMEFTCoeffEW("Clq3R",0,0,1,2), getSMEFTCoeffEW("CHq3R",0,1), getSMEFTCoeffEW("CHq3R",0,2), getSMEFTCoeffEW("CHq3R",1,2) }; 
  
        double NevCiD[24][14] = {  
            {9931.68 , 15518684615., 2204903365., 1565682., 505246116., 439638474., 65560832., 46810.8, -4423998758., 113227850., -127365148., -124084976., 3158772., -3796623.},  
            {7583.35 , 16250131627., 2248046488., 1628738., 464253341., 406002350., 58208272., 42718.8, -4679667361., 121081020., -130485398., -114429396., 2982751., -3397207.},  
            {5800.02 , 15221095930., 2053622503., 1457677., 376898762., 330510338., 46355261., 33163.4, -4419753117., 114913787., -118412979., -95049713., 2430984., -2681307.},  
            {4428.07 , 13801240800., 1745535619., 1234159., 299906041., 265116274., 34764491., 25275.4, -4043050686., 104785609., -100353791., -76987112., 1980089., -2016940.},  
            {3421.25 , 12677784685., 1495953090., 1098176., 235220311., 209446972., 25754629., 18709.9, -3729997821., 97420125., -86823702., -60747482., 1601110., -1492621.},  
            {2550.01 , 11619663946., 1282182912., 909579., 182877411., 163439759., 19423910., 13741.7, -3421026872., 90157277., -73580052., -48070215., 1254210., -1115161.},  
            {1923.29 , 10105617332., 1118368746., 767066., 140869755., 126297057., 14562238., 10459.4, -2980536126., 78349065., -63565490., -36795773., 964419., -839611.},  
            {1519.35 , 8883332908., 940818969., 646253., 111756780., 100792291., 10956897., 7592.68, -2606947232., 68915663., -53448118., -29489296., 777102., -624474.},  
            {1136.43 , 7973464675., 774629099., 537846., 84498890., 76405920., 8087418., 5551.52, -2344558102., 62375958., -44046333., -22780053., 591050., -458673.},  
            {870.566 , 6848179344., 660056954., 442918., 66528774., 60572964., 5951859., 3950.02, -2037321649., 53906896., -37134207., -17875583., 473957., -334232.},  
            {679.211 , 6078856030., 560262667., 367508., 50862492., 46543058., 4316524., 2910.2, -1803556300., 47573219., -31292013., -13674025., 363908., -243166.},  
            {492.385 , 5313910856., 464080042., 304273., 37837415., 34656400., 3178913., 2101.3, -1573373763., 41917806., -25888141., -10258320., 272779., -177931.},  
            {369.398 , 4550444621., 380873127., 246332., 29384640., 27090637., 2292508., 1494.85, -1347861975., 36190101., -21142893., -8026871., 214906., -127584.},  
            {273.215 , 3944809497., 315831821., 198718., 21738274., 20081322., 1655874., 1077.76, -1171881558., 31245271., -17373585., -5969347., 159290., -91988.},  
            {203.491 , 3399860158., 259712492., 162047., 16358627., 15163351., 1194519., 756.985, -1004873713., 27040812., -14246035., -4476659., 119947., -65849.1},  
            {150.006 , 2846319999., 209079178., 128741., 12175150., 11322998., 851622., 529.547, -844944078., 22695788., -11405461., -3356929., 89638.7, -46608.1},  
            {110.416 , 2407258206., 171215939., 102738., 9083899., 8473436., 610094., 368.729, -710531501., 19142052., -9274724., -2487533., 67354.6, -33144.5},  
            {80.4744 , 2051801664., 138367345., 81890.1, 6636922., 6203408., 433257., 257.38, -603807270., 16360308., -7458233., -1838556., 49404.1, -23379.4},  
            {57.7052 , 1683170544., 109441871., 63668.2, 4876459., 4574383., 301897., 179.266, -495966871., 13375075., -5863489., -1345026., 36318., -16270.6},  
            {41.6386 , 1394404210., 87328557., 50073.9, 3526560., 3314077., 212360., 123.568, -408166065., 11046594., -4658560., -972396., 26363., -11378.8},  
            {29.6198 , 1154734067., 69423423., 38401.2, 2529655., 2382732., 146840., 82.5648, -337160561., 9145083., -3666572., -698723., 18898.1, -7790.25},  
            {20.9425 , 929422712., 55247659., 30204.1, 1813546., 1710934., 102555., 56.6908, -271942552., 7346296., -2906669., -502639., 13505.8, -5408.27},  
            {24.4031 , 1340156362., 75050040., 39725.6, 2160074., 2041794., 118217., 62.67, -387885416., 10523405., -3914305., -599244., 16089.8, -6163.37},  
            {18.6359 , 1741410385., 95566541., 43829.4, 1772744., 1681157., 91542.7, 43.9867, -502607857., 13296742., -4814702., -484220., 12954.8, -4661.81}  
        }; 

        int NCiD = 14;

    double Nev;
    Nev = 0.;

    if (i_bin < 25) {
        switch(flavBas){ 
            case 1:    // UP Basis
                for (int iCi = 0; iCi < NCiU; ++iCi) {

                    Nev = Nev + NevCiU[i_bin - 1][iCi] * CivectU[iCi];
                }
            break;
            case 2:    // DOWN Basis
                for (int iCi = 0; iCi < NCiD; ++iCi) {

                    Nev = Nev + NevCiD[i_bin - 1][iCi] * CivectD[iCi];
                }
            break;                
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::NevLHCppenu13");

    if (Nev < 0) return std::numeric_limits<double>::quiet_NaN();

    return Nev;
}

const double NPSMEFTd6General::NevLHCppmunu13(const int i_bin) const {
    
    // UP Basis
    // HighPT parameterization in the basis aligned with diagonal up sector (i.e. d_i = V d_m to pass to mass eigenstate basis)
        double CivectU[12] = {
            1., getSMEFTCoeffEW("Clq3R", 1, 1, 0, 0), getSMEFTCoeffEW("Clq3R", 1, 1, 1, 1), getSMEFTCoeffEW("CHl3R", 1, 1), getSMEFTCoeffEW("CHq3R", 0, 0), getSMEFTCoeffEW("CHq3R", 1, 1), getSMEFTCoeffEW("Clq3R", 1, 1, 0, 1), getSMEFTCoeffEW("Clq3R", 1, 1, 0, 2), getSMEFTCoeffEW("Clq3R", 1, 1, 1, 2), getSMEFTCoeffEW("CHq3R", 0, 1), getSMEFTCoeffEW("CHq3R", 0, 2), getSMEFTCoeffEW("CHq3R", 1, 2)
        };

        double NevCiU[20][12] = {
            {7748.92, 20588332522., 2366182989., 584995531., 521127530., 63868001., 2460246281., -41130627., 55918835., 61859868., -1099543., 1490609.},
            {5576.07, 20034218371., 2145203082., 497543083., 447472101., 50070982., 2439871511., -38684591., 50193483., 53846285., -915549., 1164230.},
            {3924.96, 17877044017., 1803372645., 367711952., 332164195., 35547757., 2193810085., -34642595., 42211080., 39849081., -662184., 824546.},
            {2830.93, 15568970082., 1467154363., 274326598., 250295582., 24031017., 1914104006., -31669037., 34259849., 30163981., -509564., 549913.},
            {2013.49, 13725044835., 1194240341., 201521130., 184591511., 16929618., 1705307007., -26075960., 27913433., 23198350., -341972., 390530.},
            {1427.01, 11699455027., 975903602., 143919218., 132417270., 11501948., 1486732950., -22078849., 23283435., 16749046., -248115., 270540.},
            {1039.97, 9832003312., 759600646., 104167100., 96203800., 7963300., 1244462010., -18602527., 17782231., 11965991., -182798., 190792.},
            {734.462, 8380509459., 612433867., 75258437., 70007950., 5250487., 1092533454., -15024256., 14784120., 9158713., -121891., 123750.},
            {513.706, 7103431597., 482000268., 54826144., 51283162., 3542981., 944394865., -12423803., 11551153., 6866578., -87124.5, 84238.9},
            {332.277, 5966107413., 374410187., 38435285., 36081053., 2354233., 811133418., -9983313., 9078005., 4768612., -62763.7, 56758.6},
            {229.247, 4879795956., 291973890., 26582378., 25020203., 1562176., 663066937., -8350033., 7141032., 3352071., -42854.4, 37962.6},
            {156.863, 3998375424., 226306523., 18851981., 17826174., 1025807., 562033239., -6156001., 5579983., 2469682., -28292.3, 24891.5},
            {107.248, 3220227852., 171667664., 12960201., 12301077., 659125., 452342136., -4976972., 4285557., 1714074., -20205.5, 16094.9},
            {73.1981, 2599657960., 130095095., 8768292., 8333952., 434340., 371314900., -3993890., 3267245., 1157999., -13568.1, 10856.2},
            {49.7791, 2062727976., 97055234., 5909140., 5632951., 276189., 300242314., -2985751., 2455743., 804820., -8601.34, 6983.64},
            {33.7055, 1574911862., 71922826., 3936616., 3760392., 176224., 229700925., -2312545., 1838558., 552271., -5307.08, 4478.01},
            {22.7254, 1214204034., 52701791., 2587311., 2475663., 111648., 179645672., -1752726., 1357172., 368021., -3616.83, 2838.93},
            {15.2696, 918746377., 38329436., 1668815., 1599260., 69555.1, 138971044., -1273597., 994369., 236030., -2230.3, 1804.09},
            {17.0517, 1161444399., 47159662., 1740935., 1672146., 68788.9, 177372650., -1635743., 1241533., 252730., -2239.59, 1782.64},
            {13.3855, 1041576190., 41524298., 1022645., 983728., 38916.9, 160859541., -1604139., 1139929., 152630., -1359.78, 1049.79}
        };
        
        int NCiU = 12;

    // DOWN Basis
    // HighPT parameterization in the basis aligned with diagonal down sector (i.e. u_i = V^dagger u_m to pass to mass eigenstate basis)
        double CivectD[14] = {  
            1. , getSMEFTCoeffEW("Clq3R",1,1,0,0), getSMEFTCoeffEW("Clq3R",1,1,1,1), getSMEFTCoeffEW("Clq3R",1,1,2,2), getSMEFTCoeffEW("CHl3R",1,1), getSMEFTCoeffEW("CHq3R",0,0), getSMEFTCoeffEW("CHq3R",1,1), getSMEFTCoeffEW("CHq3R",2,2), getSMEFTCoeffEW("Clq3R",1,1,0,1), getSMEFTCoeffEW("Clq3R",1,1,0,2), getSMEFTCoeffEW("Clq3R",1,1,1,2), getSMEFTCoeffEW("CHq3R",0,1), getSMEFTCoeffEW("CHq3R",0,2), getSMEFTCoeffEW("CHq3R",1,2) }; 
  
        double NevCiD[20][14] = {  
            {7748.92 , 20205626996., 2746938517., 1949998., 584995531., 511551087., 73391730., 52714.4, -5774347252., 150276202., -158531533., -144788489., 3704583., -4253855.},  
            {5576.07 , 19663902341., 2513719700., 1799412., 497543083., 439167779., 58333422., 41881.7, -5646662491., 147758527., -145206027., -125759193., 3244089., -3374577.},  
            {3924.96 , 17544643212., 2134257880., 1515571., 367711952., 325891148., 41790636., 30169.1, -5072298702., 132580518., -122829546., -94171341., 2451111., -2418856.},  
            {2830.93 , 15275028792., 1759863705., 1231948., 274326598., 245459188., 28846572., 20838.7, -4459607846., 115231068., -100668340., -72046138., 1866763., -1665209.},  
            {2013.49 , 13464824605., 1453439786., 1020785., 201521130., 181193351., 20313199., 14579.8, -3958772098., 104041147., -83089769., -52625301., 1384753., -1170263.},  
            {1427.01 , 11482764418., 1191786098., 808114., 143919218., 129970676., 13938852., 9689.97, -3363252608., 88234841., -67403859., -37935971., 996347., -794575.},  
            {1039.97 , 9645751246., 945201679., 651033., 104167100., 94362029., 9798420., 6651.62, -2857399924., 75024199., -53571970., -27915521., 735287., -554060.},  
            {734.462 , 8226949143., 765488439., 505745., 75258437., 68738985., 6514983., 4469.06, -2422360441., 64116487., -42852264., -20147720., 535415., -368830.},  
            {513.706 , 6975415891., 609614442., 401531., 54826144., 50372786., 4450380., 2977.6, -2053021132., 54423476., -34043467., -14750441., 392564., -249806.},  
            {332.277 , 5860982178., 479227333., 308090., 38435285., 35419846., 3013468., 1971.58, -1721535571., 45895579., -26545882., -10494702., 279183., -167756.},  
            {229.247 , 4793008214., 378523853., 237780., 26582378., 24568062., 2013023., 1292.94, -1414671879., 37576237., -20803396., -7267671., 193527., -111401.},  
            {156.863 , 3930715535., 293783341., 183071., 18851981., 17517472., 1333658., 851.116, -1147978870., 30922568., -16104781., -5143080., 138096., -73562.4},  
            {107.248 , 3165131572., 226626167., 137778., 12960201., 12087748., 871915., 538.337, -929490110., 25050517., -12320226., -3561577., 94926., -47565.5},  
            {73.1981 , 2556096148., 173554377., 102530., 8768292., 8188084., 579860., 347.909, -748577292., 20127364., -9350206., -2421259., 64775.8, -31370.9},  
            {49.7791 , 2029082533., 130624731., 75946.2, 5909140., 5538328., 370596., 216.656, -591625736., 16019575., -7000916., -1624293., 43740.2, -19901.6},  
            {33.7055 , 1549214486., 97564912., 55289.4, 3936616., 3700099., 236380., 136.722, -452252333., 12213772., -5189693., -1074428., 29159.5, -12651.3},  
            {22.7254 , 1194812914., 72053187., 39723., 2587311., 2436720., 150507., 84.356, -347583402., 9386059., -3801758., -705292., 18963.6, -7979.94},  
            {15.2696 , 904661565., 52386153., 28095.6, 1668815., 1573598., 95163.9, 52.8871, -260953672., 7058677., -2743930., -458270., 12461.3, -5029.85},  
            {17.0517 , 1143943932., 64627044., 33084.7, 1740935., 1646418., 94465.4, 51.4782, -328938425., 8854000., -3345029., -475544., 12941.9, -4962.75},  
            {13.3855 , 1026235932., 56839151., 25404.6, 1022645., 969379., 53240.2, 25.7363, -293719255., 7756756., -2850605., -276901., 7450.2, -2717.13}  
        }; 

        int NCiD = 14;

    double Nev;
    Nev = 0.;

    if (i_bin < 21) {
        switch(flavBas){ 
            case 1:    // UP Basis
                for (int iCi = 0; iCi < NCiU; ++iCi) {

                    Nev = Nev + NevCiU[i_bin - 1][iCi] * CivectU[iCi];
                }
            break;
            case 2:    // DOWN Basis
                for (int iCi = 0; iCi < NCiD; ++iCi) {

                    Nev = Nev + NevCiD[i_bin - 1][iCi] * CivectD[iCi];
                }
            break;                
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::NevLHCppmunu13");

    if (Nev < 0) return std::numeric_limits<double>::quiet_NaN();

    return Nev;
}

const double NPSMEFTd6General::NevLHCpptaunu13(const int i_bin) const {
    
    // UP Basis
    // HighPT parameterization in the basis aligned with diagonal up sector (i.e. d_i = V d_m to pass to mass eigenstate basis)
        double CivectU[12] = {
            1., getSMEFTCoeffEW("Clq3R", 2, 2, 0, 0), getSMEFTCoeffEW("Clq3R", 2, 2, 1, 1), getSMEFTCoeffEW("CHl3R", 2, 2), getSMEFTCoeffEW("CHq3R", 0, 0), getSMEFTCoeffEW("CHq3R", 1, 1), getSMEFTCoeffEW("Clq3R", 2, 2, 0, 1), getSMEFTCoeffEW("Clq3R", 2, 2, 0, 2), getSMEFTCoeffEW("Clq3R", 2, 2, 1, 2), getSMEFTCoeffEW("CHq3R", 0, 1), getSMEFTCoeffEW("CHq3R", 0, 2), getSMEFTCoeffEW("CHq3R", 1, 2)
        };

        double NevCiU[10][12] = {
            {3018.15, 9905184949., 908069072., 178721805., 162451504., 16270302., 1242657236., -19403426., 21667249., 21583813., -269839., 385219.},
            {1007.49, 5597695960., 443986407., 67186978., 61715815., 5471163., 734922492., -10307332., 10781785., 8170223., -107454., 132702.},
            {403.793, 3249515112., 225946533., 28075243., 26093547., 1981696., 442032213., -5657386., 5469358., 3392312., -47936.6, 47878.7},
            {184.418, 1985442921., 122880143., 12807340., 12014742., 792598., 274815333., -3183015., 3005778., 1613367., -23213.8, 18469.3},
            {93.503, 1242160602., 72188084., 6587836., 6213967., 373868., 171347436., -2119232., 1797142., 860570., -9862.1, 8975.36},
            {48.663, 825246054., 43199341., 3366703., 3180791., 185912., 119717201., -1231694., 1075513., 439027., -5263.05, 4769.15},
            {25.996, 526179994., 26699820., 1838326., 1745657., 92669.4, 73892672., -872498., 682061., 242290., -2988.07, 2297.89},
            {14.632, 354813334., 16546887., 1099775., 1048005., 51770.3, 50305533., -579087., 417797., 151191., -1599.12, 1274.97},
            {8.236, 249497492., 11224212., 611624., 582750., 28873.7, 37767811., -333736., 288527., 76816.1, -1236.83, 739.17},
            {14.844, 599549145., 24999894., 1007639., 966122., 41516.6, 90694238., -855662., 654650., 143709., -1389.05, 1065.56}
        };

        int NCiU = 12;
    
    // DOWN Basis
    // HighPT parameterization in the basis aligned with diagonal down sector (i.e. u_i = V^dagger u_m to pass to mass eigenstate basis)
        double CivectD[14] = {
            1. , getSMEFTCoeffEW("Clq3R",2,2,0,0), getSMEFTCoeffEW("Clq3R",2,2,1,1), getSMEFTCoeffEW("Clq3R",2,2,2,2), getSMEFTCoeffEW("CHl3R",2,2), getSMEFTCoeffEW("CHq3R",0,0), getSMEFTCoeffEW("CHq3R",1,1), getSMEFTCoeffEW("CHq3R",2,2), getSMEFTCoeffEW("Clq3R",2,2,0,1), getSMEFTCoeffEW("Clq3R",2,2,0,2), getSMEFTCoeffEW("Clq3R",2,2,1,2), getSMEFTCoeffEW("CHq3R",0,1), getSMEFTCoeffEW("CHq3R",0,2), getSMEFTCoeffEW("CHq3R",1,2) }; 
  
        double NevCiD[10][14] = {  
            {3018.15 , 9722345573., 1090165779., 742669., 178721805., 159786245., 18922262., 13299., -2826031094., 73536081., -61876909., -44663256., 1188015., -1087359.},  
            {1007.49 , 5498026483., 543300516., 355368., 67186978., 60660888., 6521723., 4367.74, -1598066576., 41916424., -30408640., -17305508., 457843., -368499.},  
            {403.793 , 3193423426., 281856440., 181780., 28075243., 25617146., 2456478., 1618.51, -927794640., 24478426., -15669698., -7517966., 197891., -137564.},  
            {184.418 , 1951441322., 156782119., 99623.1, 12807340., 11800580., 1006100., 659.644, -569274025., 15251550., -8659328., -3468089., 89462.5, -56023.2},  
            {93.503 , 1220522251., 93769678., 56756.5, 6587836., 6107109., 480414., 311.855, -358744660., 9509228., -5101836., -1785984., 47921.2, -26673.2},  
            {48.663 , 811918247., 56493310., 33837.9, 3366703., 3125492., 241069., 141.673, -235141360., 6327193., -3061179., -917926., 24516.2, -13019.4},  
            {25.996 , 517104794., 35754619., 20401.8, 1838326., 1715130., 123123., 73.5309, -152488848., 4057522., -1908976., -506670., 13410., -6655.9},  
            {14.632 , 348724839., 22622486., 12896.3, 1099775., 1030739., 68995.2, 41.3184, -103036162., 2744847., -1204777., -300729., 8072.53, -3733.55},  
            {8.236 , 245720056., 14993291., 8356.61, 611624., 571563., 40038.7, 21.5097, -70482160., 1916568., -795170., -173703., 4431.22, -2097.79},  
            {14.844 , 590358323., 34172863., 17852.8, 1007639., 950840., 56767.3, 31.2578, -170292643., 4583584., -1778353., -276060., 7448.82, -2993.5}  
        }; 

        int NCiD = 14;

    double Nev;
    Nev = 0.;

    if (i_bin < 11) {
        switch(flavBas){ 
            case 1:    // UP Basis
                for (int iCi = 0; iCi < NCiU; ++iCi) {

                    Nev = Nev + NevCiU[i_bin - 1][iCi] * CivectU[iCi];
                }
            break;
            case 2:    // DOWN Basis
                for (int iCi = 0; iCi < NCiD; ++iCi) {

                    Nev = Nev + NevCiD[i_bin - 1][iCi] * CivectD[iCi];
                }
            break;                
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::NevLHCpptaunu13");

    if (Nev < 0) return std::numeric_limits<double>::quiet_NaN();

    return Nev;
}


////////////////////////////Auxiliary observables//////////////////////////////

const double NPSMEFTd6General::AuxObs_NP1() const {
    // To be used for some temporary observable

    // HL-LHC HH muRF=2*MH
    double CHG = 0.0, CH = 0.0, CDH = 0.0, CHD = 0.0, CuHR33 = 0.0, CtGR = 0.0; 
    double CHl3R11 = 0.0, CHl3R22 = 0.0, Cll1221 = 0.0; 
    double muRG = 250.;
 
//  Wilson coefficients definitions 
    CHG = getSMEFTCoeff("CHG",muRG); 
    CH = getSMEFTCoeff("CH",muRG); 
    CDH = (-getSMEFTCoeff("CHbox",muRG)); 
    CHD = getSMEFTCoeff("CHD",muRG); 
    CuHR33 = getSMEFTCoeff("CuHR",2,2,muRG); 
    CtGR = (getSMEFTCoeff("CuGR",2,2,muRG) / g3_tree); 
    CHl3R11 = getSMEFTCoeff("CHl3R",0,0,muRG); 
    CHl3R22 = getSMEFTCoeff("CHl3R",1,1,muRG); 
    Cll1221 = getSMEFTCoeff("CllR",0,1,1,0,muRG); 
    
    double delmuIncl;
    
    delmuIncl = -27325989. * CHG 
            +360727. * CH 
            -197642. * CDH 
            +49037.9 * CHD 
            +232474. * CuHR33 
            -1940437. * CtGR 
            -121226. * CHl3R11 
            -121348. * CHl3R22 
            +121165. * Cll1221 
            ;
    
    double delmuMHHlt350;
    
    delmuMHHlt350 = -92829715. * CHG 
                +1019431. * CH 
                -486652. * CDH 
                +122169. * CHD 
                +326258. * CuHR33 
                -5775160. * CtGR 
                -121052. * CHl3R11 
                -121289. * CHl3R22 
                +120714. * Cll1221 
                ;
    
    double Chi2Tot;

    Chi2Tot = delmuIncl*delmuIncl/0.0447847 + 2.0 * delmuMHHlt350*delmuMHHlt350*(1./25.6353 + 1./13.4848) ;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

const double NPSMEFTd6General::AuxObs_NP2() const {
    // To be used for some temporary observable
    
    // FCC-hh
    
    double CHG = 0.0, CH = 0.0, CDH = 0.0, CHD = 0.0, CuHR33 = 0.0, CtGR = 0.0;
    double CHl3R11 = 0.0, CHl3R22 = 0.0, Cll1221 = 0.0; 
    double muRG = 250.;
 
//  Wilson coefficients definitions 
    CHG = getSMEFTCoeff("CHG",muRG); 
    CH = getSMEFTCoeff("CH",muRG); 
    CDH = (-getSMEFTCoeff("CHbox",muRG)); 
    CHD = getSMEFTCoeff("CHD",muRG); 
    CuHR33 = getSMEFTCoeff("CuHR",2,2,muRG); 
    CtGR = (getSMEFTCoeff("CuGR",2,2,muRG) / g3_tree); 
    CHl3R11 = getSMEFTCoeff("CHl3R",0,0,muRG); 
    CHl3R22 = getSMEFTCoeff("CHl3R",1,1,muRG); 
    Cll1221 = getSMEFTCoeff("CllR",0,1,1,0,muRG); 
    
    double delmuIncl;
    
    delmuIncl = -19700296. * CHG 
                +325025. * CH 
                -194386. * CDH 
                +48143.5 * CHD 
                +246078. * CuHR33 
                -1463484. * CtGR 
                -121072. * CHl3R11 
                -121297. * CHl3R22 
                +121307. * Cll1221 
                ;
    
    double delmuMHHlt350, delmuMHHgt350;
    
    delmuMHHlt350 = -91293350. * CHG 
                +999898. * CH 
                -477797. * CDH 
                +118355. * CHD 
                +321241. * CuHR33 
                -5690015. * CtGR 
                -121604. * CHl3R11 
                -121740. * CHl3R22 
                +120802. * Cll1221 
            ;
            
    delmuMHHgt350 = -14355998. * CHG 
                +274798. * CH 
                -173321. * CDH 
                +43168.9 * CHD 
                +240838. * CuHR33 
                -1150642. * CtGR 
                -121085. * CHl3R11 
                -121327. * CHl3R22 
                +121841. * Cll1221 
                ;
    
    double delBRHbbRatio, delBRHgagaRatio, delBRHtataRatio;
    
    delBRHbbRatio = deltaGammaHbbRatio1() - dGammaHTotR1;
            
    delBRHgagaRatio = deltaGammaHgagaRatio1() - dGammaHTotR1;
    
    delBRHtataRatio = deltaGammaHtautauRatio1() - dGammaHTotR1;

    double Chi2Tot;

    Chi2Tot = (delmuIncl + delBRHbbRatio + delBRHtataRatio) * (delmuIncl + delBRHbbRatio + delBRHtataRatio) / 0.0018;

    Chi2Tot = Chi2Tot + (delmuMHHlt350 + delBRHbbRatio + delBRHgagaRatio) * (delmuMHHlt350 + delBRHbbRatio + delBRHgagaRatio) / 0.00889893;

    Chi2Tot = Chi2Tot + (delmuMHHgt350 + delBRHbbRatio + delBRHgagaRatio) * (delmuMHHgt350 + delBRHbbRatio + delBRHgagaRatio) / 0.00124085;
    
    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

const double NPSMEFTd6General::AuxObs_NP3() const {
    // To be used for some temporary observable
    // LHeC DIS
    double Civect[17] = {getSMEFTCoeffEW("CHD"), getSMEFTCoeffEW("CHWB"), getSMEFTCoeffEW("CHq1R",0,0), getSMEFTCoeffEW("CHq3R",0,0), getSMEFTCoeffEW("CHuR",0,0), getSMEFTCoeffEW("CHdR",0,0), getSMEFTCoeffEW("CHl1R",0,0), getSMEFTCoeffEW("CHl3R",0,0), getSMEFTCoeffEW("CHeR",0,0), getSMEFTCoeffEW("CllR",0,1,1,0), getSMEFTCoeffEW("CeuR",0,0,0,0), getSMEFTCoeffEW("CedR",0,0,0,0), getSMEFTCoeffEW("Clq1R",0,0,0,0), getSMEFTCoeffEW("Clq3R",0,0,0,0), getSMEFTCoeffEW("CluR",0,0,0,0), getSMEFTCoeffEW("CldR",0,0,0,0), getSMEFTCoeffEW("CqeR",0,0,0,0)};
    double iCovij[17][17] = {
            {574.0638251129245, 2086.8859213128426, 179.67313012745643, -553.2356004528382, 384.40910766884855, -137.7301980916587, -660.0891402277283, 1636.1661602239667, -200.48990043564837, -1148.1276502258486, 9249.097672314332, -2533.605834822913, -2448.256549458859, 8587.961214295183, -1344.9261432181002, 549.2938683882774, 1605.6615928614585},
            {2086.8859213128426, 7971.124470815304, 760.7137403506038, -1901.4976909105878, 1595.377118079949, -552.1283981267119, -2309.6558845474456, 6037.887800703909, -977.4552381353508, -4173.771842625684, 41232.943427648715, -11586.445240116036, -10977.210286993428, 33113.79831460843, -4739.459086821214, 1801.3713158275655, 7603.148558874032},
            {179.67313012745643, 760.7137403506038, 139.12608403834264, -148.43319183312636, 181.20941322945842, -53.05169908070999, -175.50839943318948, 543.1841210766466, -124.19702620598974, -359.3462602549138, 4507.514327990226, -1297.9653411106062, -3229.3181595584597, 6447.410748302838, -962.1528397155163, 177.4756516715403, 916.5390287687104},
            {-553.2356004528381, -1901.4976909105878, -148.43319183312636, 572.6758698398044, -329.5164768009504, 130.06921084309045, 653.5379629629173, -1559.4044388484479, 111.1490452706976, 1106.4712009056766, -6150.66894110742, 1653.0150798867217, 1686.91909200005, -7511.453960459206, 1406.3313111003959, -598.6865734148971, -996.8611053212478},
            {384.40910766884855, 1595.377118079949, 181.2094132294584, -329.51647680095033, 390.9545528929132, -138.77793895789816, -380.2440178283321, 1157.392412847081, -241.16637316222236, -768.8182153376987, 9483.47998199156, -2759.944837240568, -2417.6876480010137, 6073.372024349074, -933.8651490565654, 296.93098993809906, 1949.5708016817591},
            {-137.7301980916587, -552.1283981267119, -53.05169908070998, 130.06921084309045, -138.7779389578982, 68.82595934169092, 134.3401296312828, -416.58066273536593, 65.06275911062741, 275.46039618331884, -1439.4779447127028, 703.7058572497059, 57.25266265399996, -749.6236065235722, 166.59524337904847, -91.92248410184222, -467.8640291862968},
            {-660.0891402277283, -2309.6558845474456, -175.5083994331895, 653.5379629629173, -380.2440178283321, 134.3401296312828, 788.2878520228938, -1852.0687088880081, 183.58774310445895, 1320.1782804554553, -9449.049294188231, 2468.9494558384245, 2409.7935894066295, -9656.919687893787, 1513.9647097823383, -663.7180880482035, -1480.345872051347},
            {1636.166160223967, 6037.88780070391, 543.1841210766466, -1559.4044388484479, 1157.392412847081, -416.58066273536593, -1852.068708888008, 4692.5959320078655, -618.3718586381118, -3272.3323204479343, 27547.3413950691, -7665.473883453224, -7383.232608428794, 24694.92516928694, -3865.739863090074, 1533.4573855049014, 4942.300499394484},
            {-200.4899004356484, -977.4552381353509, -124.19702620598974, 111.14904527069757, -241.1663731622224, 65.06275911062741, 183.58774310445895, -618.3718586381118, 245.87530878841923, 400.9798008712952, -8953.321528943017, 2571.415376972333, 2306.435578168173, -4528.608468466815, 281.33915555141635, -47.06586822126902, -1765.9888527736584},
            {-1148.1276502258486, -4173.771842625684, -359.34626025491383, 1106.4712009056768, -768.8182153376987, 275.46039618331884, 1320.178280455455, -3272.3323204479343, 400.9798008712952, 2296.2553004516963, -18498.195344628664, 5067.211669645824, 4896.513098917716, -17175.922428590366, 2689.852286436206, -1098.587736776557, -3211.323185722918},
            {9249.097672314332, 41232.943427648715, 4507.514327990226, -6150.66894110742, 9483.479981991562, -1439.477944712703, -9449.049294188231, 27547.3413950691, -8953.321528943015, -18498.195344628664, 779072.367796347, -161579.006115226, -53822.17555494952, 105567.92849574378, 16666.347453948314, -3205.702648191244, 105436.33652729167},
            {-2533.605834822913, -11586.445240116034, -1297.9653411106065, 1653.0150798867217, -2759.944837240568, 703.7058572497059, 2468.9494558384245, -7665.473883453224, 2571.4153769723334, 5067.211669645824, -161579.00611522602, 40687.69896898189, 13600.720088757369, -24833.42395982396, -3303.353821420953, 838.8827730716149, -25872.558596607785},
            {-2448.256549458859, -10977.21028699343, -3229.3181595584597, 1686.9190920000485, -2417.6876480010137, 57.25266265399986, 2409.7935894066286, -7383.232608428793, 2306.435578168173, 4896.513098917715, -53822.175554949514, 13600.720088757369, 388381.97175848973, -681649.2559885613, 77522.61182103699, -12460.88549461666, 15555.90890314401},
            {8587.961214295183, 33113.79831460843, 6447.410748302838, -7511.4539604592055, 6073.372024349074, -749.6236065235722, -9656.919687893786, 24694.92516928694, -4528.608468466815, -17175.922428590366, 105567.92849574378, -24833.423959823962, -681649.2559885613, 1332099.4240989813, -161268.56729257246, 34726.35425678763, -30315.576885311817},
            {-1344.9261432181, -4739.4590868212135, -962.1528397155163, 1406.3313111003959, -933.8651490565654, 166.5952433790485, 1513.964709782338, -3865.739863090074, 281.33915555141624, 2689.8522864362067, 16666.34745394832, -3303.353821420953, 77522.61182103699, -161268.56729257246, 54764.477575891506, -11252.516897570044, 19691.184161458095},
            {549.2938683882774, 1801.3713158275655, 177.47565167154028, -598.6865734148971, 296.93098993809906, -91.92248410184222, -663.7180880482035, 1533.4573855049014, -47.06586822126902, -1098.587736776557, -3205.7026481912444, 838.882773071615, -12460.88549461666, 34726.35425678763, -11252.516897570045, 2955.716196822878, -3637.6774556600926},
            {1605.6615928614585, 7603.148558874033, 916.5390287687104, -996.8611053212476, 1949.5708016817591, -467.8640291862968, -1480.345872051347, 4942.300499394484, -1765.9888527736587, -3211.323185722918, 105436.33652729167, -25872.55859660778, 15555.908903144007, -30315.576885311817, 19691.184161458095, -3637.6774556600926, 34036.726874757165}};

    
    double Chi2Tot;

    Chi2Tot = 0.0;
    
    for (int i = 0; i < 17; i++) {
        for (int j = 0; j < 17; j++) {
            Chi2Tot += Civect[i] * iCovij[i][j] * Civect[j];
        }
    }
    
    // Just in case...
    if (Chi2Tot < 0) return std::numeric_limits<double>::quiet_NaN();
    
    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

const double NPSMEFTd6General::AuxObs_NP4() const {
    // To be used for some temporary observable
    
    // 10 TeV Muon Collider: VBF & HH

    
    double CHq111b2, CHq122b2, CHq133b2, CHq311b2, CHq322b2, CHq333b2, CHu11b2;
    double CHu22b2, CHu33b2, CHd11b2, CHd22b2, CHd33b2, CuH33b2, CuW33b2, CuB33b2;
    double CHl111b2, CHl133b2, CHl311b2, CHl333b2, CHe11b2, CHe33b2;
    double muRb2 = 365.;  

    double CHq111b3, CHq122b3, CHq133b3, CHq311b3, CHq322b3, CHq333b3, CHu11b3;
    double CHu22b3, CHu33b3, CHd11b3, CHd22b3, CHd33b3, CuH33b3, CuW33b3, CuB33b3;
    double CHl111b3, CHl133b3, CHl311b3, CHl333b3, CHe11b3, CHe33b3;
    double muRb3 = 500.;  

    double CHq111b4, CHq122b4, CHq133b4, CHq311b4, CHq322b4, CHq333b4, CHu11b4;
    double CHu22b4, CHu33b4, CHd11b4, CHd22b4, CHd33b4, CuH33b4, CuW33b4, CuB33b4;
    double CHl111b4, CHl133b4, CHl311b4, CHl333b4, CHe11b4, CHe33b4;
    double muRb4 = 1000.;  

    double CHq111b5, CHq122b5, CHq133b5, CHq311b5, CHq322b5, CHq333b5, CHu11b5;
    double CHu22b5, CHu33b5, CHd11b5, CHd22b5, CHd33b5, CuH33b5, CuW33b5, CuB33b5;
    double CHl111b5, CHl133b5, CHl311b5, CHl333b5, CHe11b5, CHe33b5;
    double muRb5 = 1500.;  

    double CHq111b6, CHq122b6, CHq133b6, CHq311b6, CHq322b6, CHq333b6, CHu11b6;
    double CHu22b6, CHu33b6, CHd11b6, CHd22b6, CHd33b6, CuH33b6, CuW33b6, CuB33b6;
    double CHl111b6, CHl133b6, CHl311b6, CHl333b6, CHe11b6, CHe33b6;
    double muRb6 = 3000.;  

    double CHq111b7, CHq122b7, CHq133b7, CHq311b7, CHq322b7, CHq333b7, CHu11b7;
    double CHu22b7, CHu33b7, CHd11b7, CHd22b7, CHd33b7, CuH33b7, CuW33b7, CuB33b7;
    double CHl111b7, CHl133b7, CHl311b7, CHl333b7, CHe11b7, CHe33b7;
    //double muRb7 = 10000.;  

    double CHq111bi, CHq122bi, CHq133bi, CHq311bi, CHq322bi, CHq333bi, CHu11bi;
    double CHu22bi, CHu33bi, CHd11bi, CHd22bi, CHd33bi, CuW33bi, CuB33bi, CHl111bi;
    double CHl133bi, CHl311bi, CHl333bi, CHe11bi, CHe33bi;
    double muRbi = 500.; 
    
    double CHb1, CHboxb1, CHDb1, CHWb1, CHBb1, CHWBb1;
    double muRHHb1 = 250.;      
    double CHb2, CHboxb2, CHDb2, CHWb2, CHBb2, CHWBb2;
    double muRHHb2 = 500.;
    double CHb3, CHboxb3, CHDb3, CHWb3, CHBb3, CHWBb3;
    double muRHHb3 = 1000.;  
    double CHb4, CHboxb4, CHDb4, CHWb4, CHBb4, CHWBb4;
    double muRHHb4 = 1500.; 
    double CHb5, CHboxb5, CHDb5, CHWb5, CHBb5, CHWBb5;
    double muRHHb5 = 5000.;  
    double CHb6, CHboxb6, CHDb6, CHWb6, CHBb6, CHWBb6;
    //double muRHHb6; 

    double chi2VBFff, chi2VBFffH, chi2HH, Chi2Tot;

    chi2VBFff = 0.0;
    chi2VBFffH = 0.0;
    chi2HH = 0.0;
    Chi2Tot = 0.0;
    
    // ff Bin 2
    CHq111b2 = getSMEFTCoeff("CHq1R", 0,0, muRb2);
    CHq122b2 = getSMEFTCoeff("CHq1R", 1,1, muRb2);
    CHq133b2 = getSMEFTCoeff("CHq1R", 2,2, muRb2);
    CHq311b2 = getSMEFTCoeff("CHq3R", 0,0, muRb2);
    CHq322b2 = getSMEFTCoeff("CHq3R", 1,1, muRb2);
    CHq333b2 = getSMEFTCoeff("CHq3R", 2,2, muRb2);
    CHu11b2 = getSMEFTCoeff("CHuR", 0,0, muRb2);
    CHu22b2 = getSMEFTCoeff("CHuR", 1,1, muRb2);
    CHu33b2 = getSMEFTCoeff("CHuR", 2,2, muRb2);
    CHd11b2 = getSMEFTCoeff("CHdR", 0,0, muRb2);
    CHd22b2 = getSMEFTCoeff("CHdR", 1,1, muRb2);
    CHd33b2 = getSMEFTCoeff("CHdR", 2,2, muRb2);
    CuH33b2 = getSMEFTCoeff("CuHR", 2,2, muRb2);
    CuW33b2 = getSMEFTCoeff("CuWR", 2,2, muRb2);
    CuB33b2 = getSMEFTCoeff("CuBR", 2,2, muRb2);
    CHl111b2 = getSMEFTCoeff("CHl1R", 0,0, muRb2);
    CHl133b2 = getSMEFTCoeff("CHl1R", 2,2, muRb2);
    CHl311b2 = getSMEFTCoeff("CHl3R", 0,0, muRb2);
    CHl333b2 = getSMEFTCoeff("CHl3R", 2,2, muRb2);
    CHe11b2 = getSMEFTCoeff("CHeR", 0,0, muRb2);
    CHe33b2 = getSMEFTCoeff("CHeR", 2,2, muRb2);      
    
    chi2VBFff = 2090013419192. * CHq111b2 * CHq111b2 -5341278337407. * CHq111b2 * CHq122b2 -461275890118. * CHq111b2 * CHq133b2 -42429032623811. * CHq111b2 * CHq311b2  
       -20943451100008. * CHq111b2 * CHq322b2 +2449987704. * CHq111b2 * CHq333b2 -4488025951049. * CHq111b2 * CHu11b2 -766443833577. * CHq111b2 * CHu22b2  
       +1264489818588. * CHq111b2 * CHd11b2 +1264489818239. * CHq111b2 * CHd22b2 +13977926044. * CHq111b2 * CHd33b2 +4934415147. * CHq111b2 * CuW33b2  
       +28107938936485. * CHq122b2 * CHq122b2 -6416728678093. * CHq122b2 * CHq133b2 +85193051357850. * CHq122b2 * CHq311b2 +4251858559720. * CHq122b2 * CHq322b2  
       -1560747656373. * CHq122b2 * CHq333b2 +5667128793020. * CHq122b2 * CHu11b2 -5253817591922. * CHq122b2 * CHu22b2 -1375479262044. * CHq122b2 * CHd11b2  
       -1375479262044. * CHq122b2 * CHd22b2 +174528606358. * CHq122b2 * CHd33b2 +597935504875. * CHq122b2 * CuW33b2 +869371953052365. * CHq133b2 * CHq133b2  
       +4760611150575. * CHq133b2 * CHq311b2 +17322023370615. * CHq133b2 * CHq322b2 -756723024223036. * CHq133b2 * CHq333b2 +534533890505. * CHq133b2 * CHu11b2  
       +2963019573080. * CHq133b2 * CHu22b2 +3052843211667. * CHq133b2 * CHu33b2 -158889432801. * CHq133b2 * CHd11b2 -158889432801. * CHq133b2 * CHd22b2  
       -38841679667405. * CHq133b2 * CHd33b2 +15805169681086. * CHq133b2 * CuH33b2 -758189974810072. * CHq133b2 * CuW33b2 -1716445630386984. * CHq133b2 * CuB33b2  
       +761352465694952. * CHq311b2 * CHq311b2 +250905256617921. * CHq311b2 * CHq322b2 +432479442303. * CHq311b2 * CHq333b2 +44127293162819. * CHq311b2 * CHu11b2  
       +7537387618076. * CHq311b2 * CHu22b2 -12333859973868. * CHq311b2 * CHd11b2 -12333859829958. * CHq311b2 * CHd22b2 -135514814885. * CHq311b2 * CHd33b2  
       -222262310756. * CHq311b2 * CuW33b2 +375670036021465. * CHq322b2 * CHq322b2 +1447504702989. * CHq322b2 * CHq333b2 +23272637451826. * CHq322b2 * CHu11b2  
       +15692351065246. * CHq322b2 * CHu22b2 -6456074114507. * CHq322b2 * CHd11b2 -6456074188507. * CHq322b2 * CHd22b2 -491065439108. * CHq322b2 * CHd33b2  
       -779142696307. * CHq322b2 * CuW33b2 +994955659917508. * CHq333b2 * CHq333b2 -10578686914. * CHq333b2 * CHu11b2 -38939248795. * CHq333b2 * CHu22b2  
       +55207348275883. * CHq333b2 * CHu33b2 +7841209419. * CHq333b2 * CHd11b2 +7841209419. * CHq333b2 * CHd22b2 +2067693466791. * CHq333b2 * CHd33b2  
       -33343309373761. * CHq333b2 * CuH33b2 +2209778354175723. * CHq333b2 * CuW33b2 +2862227572647596. * CHq333b2 * CuB33b2 +2501524763983. * CHu11b2 * CHu11b2  
       +854352969248. * CHu11b2 * CHu22b2 -1447415602965. * CHu11b2 * CHd11b2 -1447415602965. * CHu11b2 * CHd22b2 -15969894442. * CHu11b2 * CHd33b2  
       -5146189019. * CHu11b2 * CuW33b2 +1184390643642. * CHu22b2 * CHu22b2 -247149855202. * CHu22b2 * CHd11b2 -247149855202. * CHu22b2 * CHd22b2  
       -87632064100. * CHu22b2 * CHd33b2 -37231781529. * CHu22b2 * CuW33b2 +13789077557930. * CHu33b2 * CHu33b2 -38383715451. * CHu33b2 * CHd33b2  
       +2788294496590. * CHu33b2 * CuH33b2 +189122390018204. * CHu33b2 * CuW33b2 +106474533089941. * CHu33b2 * CuB33b2 +214972377066. * CHd11b2 * CHd11b2  
       +429944754132. * CHd11b2 * CHd22b2 +4733953098. * CHd11b2 * CHd33b2 +373746233. * CHd11b2 * CuW33b2 +214972377066. * CHd22b2 * CHd22b2  
       +4733953098. * CHd22b2 * CHd33b2 +373746233. * CHd22b2 * CuW33b2 +573115911350. * CHd33b2 * CHd33b2 -546680669112. * CHd33b2 * CuW33b2  
       +158698419360. * CHd33b2 * CuB33b2 +730950218457. * CuH33b2 * CuH33b2 -20360415907248. * CuH33b2 * CuW33b2 -51682179247321. * CuH33b2 * CuB33b2  
       +1837668335728672. * CuW33b2 * CuW33b2 +3688757345954333. * CuW33b2 * CuB33b2 +4314567351156510. * CuB33b2 * CuB33b2 +37538051629395. * CHl111b2 * CHl111b2  
       +144629401400661. * CHl111b2 * CHl311b2 -33302739418296. * CHl111b2 * CHe11b2 +9384512907349. * CHl133b2 * CHl133b2 +36157350350165. * CHl133b2 * CHl333b2  
       -8325684854574. * CHl133b2 * CHe33b2 +139929807371371. * CHl311b2 * CHl311b2 -63558113228924. * CHl311b2 * CHe11b2 +34982451842843. * CHl333b2 * CHl333b2  
       -15889528307231. * CHl333b2 * CHe33b2 +8014526359750. * CHe11b2 * CHe11b2 +2003631589938. * CHe33b2 * CHe33b2;  


    // ff Bin 3
    CHq111b3 = getSMEFTCoeff("CHq1R", 0,0, muRb3);
    CHq122b3 = getSMEFTCoeff("CHq1R", 1,1, muRb3);
    CHq133b3 = getSMEFTCoeff("CHq1R", 2,2, muRb3);
    CHq311b3 = getSMEFTCoeff("CHq3R", 0,0, muRb3);
    CHq322b3 = getSMEFTCoeff("CHq3R", 1,1, muRb3);
    CHq333b3 = getSMEFTCoeff("CHq3R", 2,2, muRb3);
    CHu11b3 = getSMEFTCoeff("CHuR", 0,0, muRb3);
    CHu22b3 = getSMEFTCoeff("CHuR", 1,1, muRb3);
    CHu33b3 = getSMEFTCoeff("CHuR", 2,2, muRb3);
    CHd11b3 = getSMEFTCoeff("CHdR", 0,0, muRb3);
    CHd22b3 = getSMEFTCoeff("CHdR", 1,1, muRb3);
    CHd33b3 = getSMEFTCoeff("CHdR", 2,2, muRb3);
    CuH33b3 = getSMEFTCoeff("CuHR", 2,2, muRb3);
    CuW33b3 = getSMEFTCoeff("CuWR", 2,2, muRb3);
    CuB33b3 = getSMEFTCoeff("CuBR", 2,2, muRb3);
    CHl111b3 = getSMEFTCoeff("CHl1R", 0,0, muRb3);
    CHl133b3 = getSMEFTCoeff("CHl1R", 2,2, muRb3);
    CHl311b3 = getSMEFTCoeff("CHl3R", 0,0, muRb3);
    CHl333b3 = getSMEFTCoeff("CHl3R", 2,2, muRb3);
    CHe11b3 = getSMEFTCoeff("CHeR", 0,0, muRb3);
    CHe33b3 = getSMEFTCoeff("CHeR", 2,2, muRb3);
    
    chi2VBFff = chi2VBFff
       +1058908174539. * CHq111b3 * CHq111b3 -3521261496012. * CHq111b3 * CHq122b3 -468854900649. * CHq111b3 * CHq133b3 -40689274592126. * CHq111b3 * CHq311b3  
       -16238517941508. * CHq111b3 * CHq322b3 +138851266623. * CHq111b3 * CHq333b3 -3135294210209. * CHq111b3 * CHu11b3 -535549486253. * CHq111b3 * CHu22b3  
       +927062654760. * CHq111b3 * CHd11b3 +927062652911. * CHq111b3 * CHd22b3 +9852920785. * CHq111b3 * CHd33b3 -81100136130. * CHq111b3 * CuW33b3  
       +21421659900094. * CHq122b3 * CHq122b3 -4386189454272. * CHq122b3 * CHq133b3 +62254405257714. * CHq122b3 * CHq311b3 +4294900081552. * CHq122b3 * CHq322b3  
       -937168148889. * CHq122b3 * CHq333b3 +2874690910559. * CHq122b3 * CHu11b3 -3693011934745. * CHq122b3 * CHu22b3 -152342969978. * CHq122b3 * CHd11b3  
       -152342969978. * CHq122b3 * CHd22b3 +74825273604. * CHq122b3 * CHd33b3 -917231249023. * CHq122b3 * CuW33b3 +2058147746880290. * CHq133b3 * CHq133b3  
       +9191493876676. * CHq133b3 * CHq311b3 +29153696461514. * CHq133b3 * CHq322b3 -2548523188824099. * CHq133b3 * CHq333b3 +1182278746635. * CHq133b3 * CHu11b3  
       +5631621945499. * CHq133b3 * CHu22b3 +216958413854505. * CHq133b3 * CHu33b3 -419270710542. * CHq133b3 * CHd11b3 -419270710542. * CHq133b3 * CHd22b3  
       -78135540327547. * CHq133b3 * CHd33b3 +30029317937724. * CHq133b3 * CuH33b3 -250083373398174. * CHq133b3 * CuW33b3 -1842484400838084. * CHq133b3 * CuB33b3  
       +770189865686011. * CHq311b3 * CHq311b3 +305430106199788. * CHq311b3 * CHq322b3 -2886596698989. * CHq311b3 * CHq333b3 +57045629370464. * CHq311b3 * CHu11b3  
       +9743305518568. * CHq311b3 * CHu22b3 -17807613741862. * CHq311b3 * CHd11b3 -17807613598316. * CHq311b3 * CHd22b3 -188494750878. * CHq311b3 * CHd33b3  
       +1325549102027. * CHq311b3 * CuW33b3 +373498385093148. * CHq322b3 * CHq322b3 -8736276883418. * CHq322b3 * CHq333b3 +30899925285468. * CHq322b3 * CHu11b3  
       +19797193959754. * CHq322b3 * CHu22b3 -9521007145810. * CHq322b3 * CHd11b3 -9521007218850. * CHq322b3 * CHd22b3 -593743068683. * CHq322b3 * CHd33b3  
       +4232627338271. * CHq322b3 * CuW33b3 +1692252645469286. * CHq333b3 * CHq333b3 -481767039698. * CHq333b3 * CHu11b3 -2192874841716. * CHq333b3 * CHu22b3  
       -457206745090838. * CHq333b3 * CHu33b3 +189666196021. * CHq333b3 * CHd11b3 +189666196021. * CHq333b3 * CHd22b3 +34729546805259. * CHq333b3 * CHd33b3  
       -67994046397404. * CHq333b3 * CuH33b3 +2053491821791336. * CHq333b3 * CuW33b3 +4139045816576888. * CHq333b3 * CuB33b3 +3493703790223. * CHu11b3 * CHu11b3  
       +1193149983564. * CHu11b3 * CHu22b3 -2381286176483. * CHu11b3 * CHd11b3 -2381286176483. * CHu11b3 * CHd22b3 -25129028613. * CHu11b3 * CHd33b3  
       +163061951725. * CHu11b3 * CuW33b3 +1636149181089. * CHu22b3 * CHu22b3 -406564065714. * CHu22b3 * CHd11b3 -406564065714. * CHu22b3 * CHd22b3  
       -118739855433. * CHu22b3 * CHd33b3 +787478826860. * CHu22b3 * CuW33b3 +70860849065163. * CHu33b3 * CHu33b3 -32811071269. * CHu33b3 * CHd33b3  
       +13271916095717. * CHu33b3 * CuH33b3 -242289007778565. * CHu33b3 * CuW33b3 -865325626015208. * CHu33b3 * CuB33b3 +427644817016. * CHd11b3 * CHd11b3  
       +855289634031. * CHd11b3 * CHd22b3 +9006086379. * CHd11b3 * CHd33b3 -54158196863. * CHd11b3 * CuW33b3 +427644817016. * CHd22b3 * CHd22b3  
       +9006086379. * CHd22b3 * CHd33b3 -54158196863. * CHd22b3 * CuW33b3 +833503649090. * CHd33b3 * CHd33b3 -10551428528494. * CHd33b3 * CuW33b3  
       +16976099482. * CHd33b3 * CuB33b3 +2094853934564. * CuH33b3 * CuH33b3 -19467945545263. * CuH33b3 * CuW33b3 -96160292196538. * CuH33b3 * CuB33b3  
       +2035805022735495. * CuW33b3 * CuW33b3 +4061390375089886. * CuW33b3 * CuB33b3 +4611164501296152. * CuB33b3 * CuB33b3 +32596176745919. * CHl111b3 * CHl111b3  
       +135662722962536. * CHl111b3 * CHl311b3 -32240541593344. * CHl111b3 * CHe11b3 +8149044186480. * CHl133b3 * CHl133b3 +33915680740634. * CHl133b3 * CHl333b3  
       -8060135398336. * CHl133b3 * CHe33b3 +144480809571772. * CHl311b3 * CHl311b3 -69688890594653. * CHl311b3 * CHe11b3 +36120202392943. * CHl333b3 * CHl333b3  
       -17422222648663. * CHl333b3 * CHe33b3 +9114043785311. * CHe11b3 * CHe11b3 +2278510946328. * CHe33b3 * CHe33b3;  

    
    // ff Bin 4
    CHq111b4 = getSMEFTCoeff("CHq1R", 0,0, muRb4);
    CHq122b4 = getSMEFTCoeff("CHq1R", 1,1, muRb4);
    CHq133b4 = getSMEFTCoeff("CHq1R", 2,2, muRb4);
    CHq311b4 = getSMEFTCoeff("CHq3R", 0,0, muRb4);
    CHq322b4 = getSMEFTCoeff("CHq3R", 1,1, muRb4);
    CHq333b4 = getSMEFTCoeff("CHq3R", 2,2, muRb4);
    CHu11b4 = getSMEFTCoeff("CHuR", 0,0, muRb4);
    CHu22b4 = getSMEFTCoeff("CHuR", 1,1, muRb4);
    CHu33b4 = getSMEFTCoeff("CHuR", 2,2, muRb4);
    CHd11b4 = getSMEFTCoeff("CHdR", 0,0, muRb4);
    CHd22b4 = getSMEFTCoeff("CHdR", 1,1, muRb4);
    CHd33b4 = getSMEFTCoeff("CHdR", 2,2, muRb4);
    CuH33b4 = getSMEFTCoeff("CuHR", 2,2, muRb4);
    CuW33b4 = getSMEFTCoeff("CuWR", 2,2, muRb4);
    CuB33b4 = getSMEFTCoeff("CuBR", 2,2, muRb4);
    CHl111b4 = getSMEFTCoeff("CHl1R", 0,0, muRb4);
    CHl133b4 = getSMEFTCoeff("CHl1R", 2,2, muRb4);
    CHl311b4 = getSMEFTCoeff("CHl3R", 0,0, muRb4);
    CHl333b4 = getSMEFTCoeff("CHl3R", 2,2, muRb4);
    CHe11b4 = getSMEFTCoeff("CHeR", 0,0, muRb4);
    CHe33b4 = getSMEFTCoeff("CHeR", 2,2, muRb4);
    
    chi2VBFff = chi2VBFff 
       +455889292570. * CHq111b4 * CHq111b4 -1334855495401. * CHq111b4 * CHq122b4 +214546863417. * CHq111b4 * CHq133b4 -13532624257529. * CHq111b4 * CHq311b4  
       +1792232837575. * CHq111b4 * CHq322b4 -180845248974. * CHq111b4 * CHq333b4 +737519478536. * CHq111b4 * CHu11b4 +125821371546. * CHq111b4 * CHu22b4  
       -373955821029. * CHq111b4 * CHd11b4 -373955823254. * CHq111b4 * CHd22b4 -3888213909. * CHq111b4 * CHd33b4 +5865086486. * CHq111b4 * CuW33b4  
       +15613118521214. * CHq122b4 * CHq122b4 +4444843012519. * CHq122b4 * CHq133b4 +7572177010259. * CHq122b4 * CHq311b4 +3070440104333. * CHq122b4 * CHq322b4  
       -5442175259430. * CHq122b4 * CHq333b4 -3573170124937. * CHq122b4 * CHu11b4 +755536910376. * CHq122b4 * CHu22b4 +2257075779487. * CHq122b4 * CHd11b4  
       +2257075779487. * CHq122b4 * CHd22b4 -96025958489. * CHq122b4 * CHd33b4 -683254303985. * CHq122b4 * CuW33b4 +3502919583751272. * CHq133b4 * CHq133b4  
       +12652811768219. * CHq133b4 * CHq311b4 +35604951179619. * CHq133b4 * CHq322b4 -5353457069099670. * CHq133b4 * CHq333b4 +1873367374792. * CHq133b4 * CHu11b4  
       +7970780133280. * CHq133b4 * CHu22b4 +213539245710854. * CHq133b4 * CHu33b4 -788782323157. * CHq133b4 * CHd11b4 -788782323157. * CHq133b4 * CHd22b4  
       -120224496724911. * CHq133b4 * CHd33b4 +10101154391792. * CHq133b4 * CuH33b4 +694215250062511. * CHq133b4 * CuW33b4 -550594671375670. * CHq133b4 * CuB33b4  
       +601494153680630. * CHq311b4 * CHq311b4 +260153504797937. * CHq311b4 * CHq322b4 -8210144468904. * CHq311b4 * CHq333b4 +53621764926293. * CHq311b4 * CHu11b4  
       +9158394984601. * CHq311b4 * CHu22b4 -20444417979865. * CHq311b4 * CHd11b4 -20444417911854. * CHq311b4 * CHd22b4 -213087741416. * CHq311b4 * CHd33b4  
       +2040087222929. * CHq311b4 * CuW33b4 +289578421369944. * CHq322b4 * CHq322b4 -22556007339950. * CHq322b4 * CHq333b4 +30000336259722. * CHq322b4 * CHu11b4  
       +18171866817788. * CHq322b4 * CHu22b4 -11272641198327. * CHq322b4 * CHd11b4 -11272641232237. * CHq322b4 * CHd22b4 -594862557251. * CHq322b4 * CHd33b4  
       +6036400141773. * CHq322b4 * CuW33b4 +2590277423470912. * CHq333b4 * CHq333b4 -1343978729498. * CHq333b4 * CHu11b4 -5588191353494. * CHq333b4 * CHu22b4  
       -775720042533583. * CHq333b4 * CHu33b4 +586719270747. * CHq333b4 * CHd11b4 +586719270747. * CHq333b4 * CHd22b4 +88783087558127. * CHq333b4 * CHd33b4  
       -27473110242849. * CHq333b4 * CuH33b4 -140796582496232. * CHq333b4 * CuW33b4 +1778453380721843. * CHq333b4 * CuB33b4 +3802412280834. * CHu11b4 * CHu11b4  
       +1298553706865. * CHu11b4 * CHu22b4 -3134128771035. * CHu11b4 * CHd11b4 -3134128771035. * CHu11b4 * CHd22b4 -32643224208. * CHu11b4 * CHd33b4  
       +234140968102. * CHu11b4 * CuW33b4 +1774788217651. * CHu22b4 * CHu22b4 -535101652105. * CHu22b4 * CHd11b4 -535101652105. * CHu22b4 * CHd22b4  
       -137800170469. * CHu22b4 * CHd33b4 +1071652101485. * CHu22b4 * CuW33b4 +287953408721324. * CHu33b4 * CHu33b4 -14110935900. * CHu33b4 * CHd33b4  
       +11111254410465. * CHu33b4 * CuH33b4 -436182940558187. * CHu33b4 * CuW33b4 -1188885588588568. * CHu33b4 * CuB33b4 +667769592754. * CHd11b4 * CHd11b4  
       +1335539185507. * CHd11b4 * CHd22b4 +13906118821. * CHd11b4 * CHd33b4 -86119157123. * CHd11b4 * CuW33b4 +667769592754. * CHd22b4 * CHd22b4  
       +13906118821. * CHd22b4 * CHd33b4 -86119157123. * CHd22b4 * CuW33b4 +1056190173216. * CHd33b4 * CHd33b4 -13678245828293. * CHd33b4 * CuW33b4  
       -20762289574. * CHd33b4 * CuB33b4 +676190921288. * CuH33b4 * CuH33b4 +3985641726656. * CuH33b4 * CuW33b4 -34375234907125. * CuH33b4 * CuB33b4  
       +910523784939663. * CuW33b4 * CuW33b4 +1227647167565384. * CuW33b4 * CuB33b4 +1601176764373209. * CuB33b4 * CuB33b4 +15628657212625. * CHl111b4 * CHl111b4  
       +71670706272746. * CHl111b4 * CHl311b4 -14559435715543. * CHl111b4 * CHe11b4 +3907164303156. * CHl133b4 * CHl133b4 +17917676568187. * CHl133b4 * CHl333b4  
       -3639858928886. * CHl133b4 * CHe33b4 +98012619656588. * CHl311b4 * CHl311b4 -44890109273831. * CHl311b4 * CHe11b4 +24503154914147. * CHl333b4 * CHl333b4  
       -11222527318458. * CHl333b4 * CHe33b4 +5669758730694. * CHe11b4 * CHe11b4 +1417439682673. * CHe33b4 * CHe33b4;  

    
    // ff Bin 5
    CHq111b5 = getSMEFTCoeff("CHq1R", 0,0, muRb5);
    CHq122b5 = getSMEFTCoeff("CHq1R", 1,1, muRb5);
    CHq133b5 = getSMEFTCoeff("CHq1R", 2,2, muRb5);
    CHq311b5 = getSMEFTCoeff("CHq3R", 0,0, muRb5);
    CHq322b5 = getSMEFTCoeff("CHq3R", 1,1, muRb5);
    CHq333b5 = getSMEFTCoeff("CHq3R", 2,2, muRb5);
    CHu11b5 = getSMEFTCoeff("CHuR", 0,0, muRb5);
    CHu22b5 = getSMEFTCoeff("CHuR", 1,1, muRb5);
    CHu33b5 = getSMEFTCoeff("CHuR", 2,2, muRb5);
    CHd11b5 = getSMEFTCoeff("CHdR", 0,0, muRb5);
    CHd22b5 = getSMEFTCoeff("CHdR", 1,1, muRb5);
    CHd33b5 = getSMEFTCoeff("CHdR", 2,2, muRb5);
    CuH33b5 = getSMEFTCoeff("CuHR", 2,2, muRb5);
    CuW33b5 = getSMEFTCoeff("CuWR", 2,2, muRb5);
    CuB33b5 = getSMEFTCoeff("CuBR", 2,2, muRb5);
    CHl111b5 = getSMEFTCoeff("CHl1R", 0,0, muRb5);
    CHl133b5 = getSMEFTCoeff("CHl1R", 2,2, muRb5);
    CHl311b5 = getSMEFTCoeff("CHl3R", 0,0, muRb5);
    CHl333b5 = getSMEFTCoeff("CHl3R", 2,2, muRb5);
    CHe11b5 = getSMEFTCoeff("CHeR", 0,0, muRb5);
    CHe33b5 = getSMEFTCoeff("CHeR", 2,2, muRb5);
    
    chi2VBFff = chi2VBFff 
       +1217872409963. * CHq111b5 * CHq111b5 -3357779837436. * CHq111b5 * CHq122b5 +932623059880. * CHq111b5 * CHq133b5 +2853618958310. * CHq111b5 * CHq311b5  
       +11114114606831. * CHq111b5 * CHq322b5 -806940321240. * CHq111b5 * CHq333b5 +3099380520618. * CHq111b5 * CHu11b5 +529264386165. * CHq111b5 * CHu22b5  
       -1419422987009. * CHq111b5 * CHd11b5 -1419422988276. * CHq111b5 * CHd22b5 -14754371527. * CHq111b5 * CHd33b5 +63236438040. * CHq111b5 * CuW33b5  
       +17171328931954. * CHq122b5 * CHq122b5 +14080279766079. * CHq122b5 * CHq133b5 -37790816616402. * CHq122b5 * CHq311b5 -3578727862091. * CHq122b5 * CHq322b5  
       -13278280167145. * CHq122b5 * CHq333b5 -9278002451265. * CHq122b5 * CHu11b5 +4525323263647. * CHq122b5 * CHu22b5 +4609512855625. * CHq122b5 * CHd11b5  
       +4609512855625. * CHq122b5 * CHd22b5 -233818961333. * CHq122b5 * CHd33b5 +162737942285. * CHq122b5 * CuW33b5 +4848448027183027. * CHq133b5 * CHq133b5  
       +14367253275496. * CHq133b5 * CHq311b5 +37795421391691. * CHq133b5 * CHq322b5 -8498223721003460. * CHq133b5 * CHq333b5 +2430853568587. * CHq133b5 * CHu11b5  
       +9843257166209. * CHq133b5 * CHu22b5 +75550380755056. * CHq133b5 * CHu33b5 -1121644830147. * CHq133b5 * CHd11b5 -1121644830147. * CHq133b5 * CHd22b5  
       -153748314848671. * CHq133b5 * CHd33b5 +2069100988797. * CHq133b5 * CuH33b5 +649311584580458. * CHq133b5 * CuW33b5 -96589954197021. * CHq133b5 * CuB33b5  
       +448697291695898. * CHq311b5 * CHq311b5 +200363418200778. * CHq311b5 * CHq322b5 -11993526599928. * CHq311b5 * CHq333b5 +48542123611921. * CHq311b5 * CHu11b5  
       +8291283157024. * CHq311b5 * CHu22b5 -21430886540200. * CHq311b5 * CHd11b5 -21430886518977. * CHq311b5 * CHd22b5 -222759314651. * CHq311b5 * CHd33b5  
       +1338045020412. * CHq311b5 * CuW33b5 +216264217065348. * CHq322b5 * CHq322b5 -31324379379210. * CHq322b5 * CHq333b5 +27689442447353. * CHq322b5 * CHu11b5  
       +16341461936649. * CHq322b5 * CHu22b5 -12082717030727. * CHq322b5 * CHd11b5 -12082717041013. * CHq322b5 * CHd22b5 -583988676204. * CHq322b5 * CHd33b5  
       +3693431533169. * CHq322b5 * CuW33b5 +4224553353785656. * CHq333b5 * CHq333b5 -2120777545216. * CHq333b5 * CHu11b5 -8500190252198. * CHq333b5 * CHu22b5  
       -638649161466832. * CHq333b5 * CHu33b5 +988969335636. * CHq333b5 * CHd11b5 +988969335636. * CHq333b5 * CHd22b5 +135087112869495. * CHq333b5 * CHd33b5  
       -6968623302747. * CHq333b5 * CuH33b5 -777982206632074. * CHq333b5 * CuW33b5 +479126658349757. * CHq333b5 * CuB33b5 +4043786891093. * CHu11b5 * CHu11b5  
       +1381114449682. * CHu11b5 * CHu22b5 -3714941438813. * CHu11b5 * CHd11b5 -3714941438813. * CHu11b5 * CHd22b5 -38604296069. * CHu11b5 * CHd33b5  
       +158039963507. * CHu11b5 * CuW33b5 +1928937193330. * CHu22b5 * CHu22b5 -634358267942. * CHu22b5 * CHd11b5 -634358267942. * CHu22b5 * CHd22b5  
       -155517895914. * CHu22b5 * CHd33b5 +709435840035. * CHu22b5 * CuW33b5 +522308010025027. * CHu33b5 * CHu33b5 -4109308664. * CHu33b5 * CHd33b5  
       +5203452012111. * CHu33b5 * CuH33b5 -306474582917886. * CHu33b5 * CuW33b5 -828888129122901. * CHu33b5 * CuB33b5 +862189088490. * CHd11b5 * CHd11b5  
       +1724378176980. * CHd11b5 * CHd22b5 +17919946871. * CHd11b5 * CHd33b5 -64724610914. * CHd11b5 * CuW33b5 +862189088490. * CHd22b5 * CHd22b5  
       +17919946871. * CHd22b5 * CHd33b5 -64724610914. * CHd22b5 * CuW33b5 +1227288967366. * CHd33b5 * CHd33b5 -9285947651420. * CHd33b5 * CuW33b5  
       -7629151487. * CHd33b5 * CuB33b5 +125776750361. * CuH33b5 * CuH33b5 +3852086343456. * CuH33b5 * CuW33b5 -7922050627186. * CuH33b5 * CuB33b5  
       +366071878145917. * CuW33b5 * CuW33b5 +251169155958374. * CuW33b5 * CuB33b5 +433294555627933. * CuB33b5 * CuB33b5 +6669794351161. * CHl111b5 * CHl111b5  
       +22489213091307. * CHl111b5 * CHl311b5 -2188545046850. * CHl111b5 * CHe11b5 +1667448587790. * CHl133b5 * CHl133b5 +5622303272827. * CHl133b5 * CHl333b5  
       -547136261713. * CHl133b5 * CHe33b5 +56179850784755. * CHl311b5 * CHl311b5 -24980785928207. * CHl311b5 * CHe11b5 +14044962696189. * CHl333b5 * CHl333b5  
       -6245196482052. * CHl333b5 * CHe33b5 +3268267535663. * CHe11b5 * CHe11b5 +817066883916. * CHe33b5 * CHe33b5;  

    
    // ff Bin 6
    CHq111b6 = getSMEFTCoeff("CHq1R", 0,0, muRb6);
    CHq122b6 = getSMEFTCoeff("CHq1R", 1,1, muRb6);
    CHq133b6 = getSMEFTCoeff("CHq1R", 2,2, muRb6);
    CHq311b6 = getSMEFTCoeff("CHq3R", 0,0, muRb6);
    CHq322b6 = getSMEFTCoeff("CHq3R", 1,1, muRb6);
    CHq333b6 = getSMEFTCoeff("CHq3R", 2,2, muRb6);
    CHu11b6 = getSMEFTCoeff("CHuR", 0,0, muRb6);
    CHu22b6 = getSMEFTCoeff("CHuR", 1,1, muRb6);
    CHu33b6 = getSMEFTCoeff("CHuR", 2,2, muRb6);
    CHd11b6 = getSMEFTCoeff("CHdR", 0,0, muRb6);
    CHd22b6 = getSMEFTCoeff("CHdR", 1,1, muRb6);
    CHd33b6 = getSMEFTCoeff("CHdR", 2,2, muRb6);
    CuH33b6 = getSMEFTCoeff("CuHR", 2,2, muRb6);
    CuW33b6 = getSMEFTCoeff("CuWR", 2,2, muRb6);
    CuB33b6 = getSMEFTCoeff("CuBR", 2,2, muRb6);
    CHl111b6 = getSMEFTCoeff("CHl1R", 0,0, muRb6);
    CHl133b6 = getSMEFTCoeff("CHl1R", 2,2, muRb6);
    CHl311b6 = getSMEFTCoeff("CHl3R", 0,0, muRb6);
    CHl333b6 = getSMEFTCoeff("CHl3R", 2,2, muRb6);
    CHe11b6 = getSMEFTCoeff("CHeR", 0,0, muRb6);
    CHe33b6 = getSMEFTCoeff("CHeR", 2,2, muRb6);
    
    chi2VBFff = chi2VBFff 
       +1372807251203. * CHq111b6 * CHq111b6 -4015310528122. * CHq111b6 * CHq122b6 +983894311446. * CHq111b6 * CHq133b6 +6908465722124. * CHq111b6 * CHq311b6  
       +10059971271824. * CHq111b6 * CHq322b6 -917248789965. * CHq111b6 * CHq333b6 +3001170262101. * CHq111b6 * CHu11b6 +512652012839. * CHq111b6 * CHu22b6  
       -1436224967618. * CHq111b6 * CHd11b6 -1436224967979. * CHq111b6 * CHd22b6 -14855485957. * CHq111b6 * CHd33b6 +32217228026. * CHq111b6 * CuW33b6  
       +15476271854624. * CHq122b6 * CHq122b6 +15837982738157. * CHq122b6 * CHq133b6 -42429233683862. * CHq122b6 * CHq311b6 -4613662929516. * CHq122b6 * CHq322b6  
       -15223431889996. * CHq122b6 * CHq333b6 -8816316294665. * CHq122b6 * CHu11b6 +5050857120847. * CHq122b6 * CHu22b6 +4339653743888. * CHq122b6 * CHd11b6  
       +4339653743888. * CHq122b6 * CHd22b6 -243772911715. * CHq122b6 * CHd33b6 +239881843274. * CHq122b6 * CuW33b6 +4533606084479704. * CHq133b6 * CHq133b6  
       +11065463459095. * CHq133b6 * CHq311b6 +29984320097675. * CHq133b6 * CHq322b6 -8521190529058390. * CHq133b6 * CHq333b6 +2021087478376. * CHq133b6 * CHu11b6  
       +8579538105998. * CHq133b6 * CHu22b6 -23929544729478. * CHq133b6 * CHu33b6 -974117431670. * CHq133b6 * CHd11b6 -974117431670. * CHq133b6 * CHd22b6  
       -137632853850047. * CHq133b6 * CHd33b6 +264015434561. * CHq133b6 * CuH33b6 +262365672207689. * CHq133b6 * CuW33b6 +93440092832. * CHq133b6 * CuB33b6  
       +261020836501941. * CHq311b6 * CHq311b6 +121336098426532. * CHq311b6 * CHq322b6 -10202366323077. * CHq311b6 * CHq333b6 +33877925425218. * CHq311b6 * CHu11b6  
       +5788049759045. * CHq311b6 * CHu22b6 -16028150718139. * CHq311b6 * CHd11b6 -16028150714665. * CHq311b6 * CHd22b6 -165797193188. * CHq311b6 * CHd33b6  
       +442616835789. * CHq311b6 * CuW33b6 +126035458127045. * CHq322b6 * CHq322b6 -27667951685137. * CHq322b6 * CHq333b6 +19266240637931. * CHq322b6 * CHu11b6  
       +11860428071571. * CHq322b6 * CHu22b6 -9039404179961. * CHq322b6 * CHd11b6 -9039404181566. * CHq322b6 * CHd22b6 -449499763752. * CHq322b6 * CHd33b6  
       +1178526755305. * CHq322b6 * CuW33b6 +4483713717134442. * CHq333b6 * CHq333b6 -1905725962106. * CHq333b6 * CHu11b6 -8045182415970. * CHq333b6 * CHu22b6  
       -343539078808011. * CHq333b6 * CHu33b6 +922105776397. * CHq333b6 * CHd11b6 +922105776397. * CHq333b6 * CHd22b6 +130024666425771. * CHq333b6 * CHd33b6  
       -1189938884100. * CHq333b6 * CuH33b6 -497918788573357. * CHq333b6 * CuW33b6 +71440525382864. * CHq333b6 * CuB33b6 +3083055900466. * CHu11b6 * CHu11b6  
       +1053292252813. * CHu11b6 * CHu22b6 -2969583844425. * CHu11b6 * CHd11b6 -2969583844425. * CHu11b6 * CHd22b6 -30720546541. * CHu11b6 * CHd33b6  
       +54753353929. * CHu11b6 * CuW33b6 +1566028361892. * CHu22b6 * CHu22b6 -507241408833. * CHu22b6 * CHd11b6 -507241408833. * CHu22b6 * CHd22b6  
       -129942736646. * CHu22b6 * CHd33b6 +257516602378. * CHu22b6 * CuW33b6 +566500974149998. * CHu33b6 * CHu33b6 -633707532. * CHu33b6 * CHd33b6  
       +1830200591431. * CHu33b6 * CuH33b6 -140531981338028. * CHu33b6 * CuW33b6 -399043065190446. * CHu33b6 * CuB33b6 +717499359982. * CHd11b6 * CHd11b6  
       +1434998719964. * CHd11b6 * CHd22b6 +14844913499. * CHd11b6 * CHd33b6 -24107546662. * CHd11b6 * CuW33b6 +717499359982. * CHd22b6 * CHd22b6  
       +14844913499. * CHd22b6 * CHd33b6 -24107546662. * CHd22b6 * CuW33b6 +1047759164667. * CHd33b6 * CHd33b6 -3467927048421. * CHd33b6 * CuW33b6  
       -1456819736. * CHd33b6 * CuB33b6 +14772031134. * CuH33b6 * CuH33b6 +869122764745. * CuH33b6 * CuW33b6 -1384851697982. * CuH33b6 * CuB33b6  
       +118991854309607. * CuW33b6 * CuW33b6 +46816444182315. * CuW33b6 * CuB33b6 +102712119277198. * CuB33b6 * CuB33b6 +3741563227824. * CHl111b6 * CHl111b6  
       +1295711816125. * CHl111b6 * CHl311b6 +2026222486915. * CHl111b6 * CHe11b6 +935390806956. * CHl133b6 * CHl133b6 +323927954031. * CHl133b6 * CHl333b6  
       +506555621729. * CHl133b6 * CHe33b6 +27847029272052. * CHl311b6 * CHl311b6 -12375171703898. * CHl311b6 * CHe11b6 +6961757318013. * CHl333b6 * CHl333b6  
       -3093792925975. * CHl333b6 * CHe33b6 +1742626867603. * CHe11b6 * CHe11b6 +435656716901. * CHe33b6 * CHe33b6;  

    
    // ff Bin 7
    //CHq111b7 = getSMEFTCoeff("CHq1R", 0,0, muRb7);
    //CHq122b7 = getSMEFTCoeff("CHq1R", 1,1, muRb7);
    //CHq133b7 = getSMEFTCoeff("CHq1R", 2,2, muRb7);
    //CHq311b7 = getSMEFTCoeff("CHq3R", 0,0, muRb7);
    //CHq322b7 = getSMEFTCoeff("CHq3R", 1,1, muRb7);
    //CHq333b7 = getSMEFTCoeff("CHq3R", 2,2, muRb7);
    //CHu11b7 = getSMEFTCoeff("CHuR", 0,0, muRb7);
    //CHu22b7 = getSMEFTCoeff("CHuR", 1,1, muRb7);
    //CHu33b7 = getSMEFTCoeff("CHuR", 2,2, muRb7);
    //CHd11b7 = getSMEFTCoeff("CHdR", 0,0, muRb7);
    //CHd22b7 = getSMEFTCoeff("CHdR", 1,1, muRb7);
    //CHd33b7 = getSMEFTCoeff("CHdR", 2,2, muRb7);
    //CuH33b7 = getSMEFTCoeff("CuHR", 2,2, muRb7);
    //CuW33b7 = getSMEFTCoeff("CuWR", 2,2, muRb7);
    //CuB33b7 = getSMEFTCoeff("CuBR", 2,2, muRb7);
    //CHl111b7 = getSMEFTCoeff("CHl1R", 0,0, muRb7);
    //CHl133b7 = getSMEFTCoeff("CHl1R", 2,2, muRb7);
    //CHl311b7 = getSMEFTCoeff("CHl3R", 0,0, muRb7);
    //CHl333b7 = getSMEFTCoeff("CHl3R", 2,2, muRb7);
    //CHe11b7 = getSMEFTCoeff("CHeR", 0,0, muRb7);
    //CHe33b7 = getSMEFTCoeff("CHeR", 2,2, muRb7);
    
    CHq111b7 = CHq1_11r_LNP / LambdaNP2;  
    CHq122b7 = CHq1_22r_LNP / LambdaNP2;  
    CHq133b7 = CHq1_33r_LNP / LambdaNP2;  
    CHq311b7 = CHq3_11r_LNP / LambdaNP2;  
    CHq322b7 = CHq3_22r_LNP / LambdaNP2;  
    CHq333b7 = CHq3_33r_LNP / LambdaNP2;  
    CHu11b7 = CHu_11r_LNP / LambdaNP2;  
    CHu22b7 = CHu_22r_LNP / LambdaNP2;  
    CHu33b7 = CHu_33r_LNP / LambdaNP2;  
    CHd11b7 = CHd_11r_LNP / LambdaNP2;  
    CHd22b7 = CHd_22r_LNP / LambdaNP2;  
    CHd33b7 = CHd_33r_LNP / LambdaNP2;  
    CuH33b7 = CuH_33r_LNP / LambdaNP2;  
    CuW33b7 = CuW_33r_LNP / LambdaNP2;  
    CuB33b7 = CuB_33r_LNP / LambdaNP2;  
    CHl111b7 = CHl1_11r_LNP / LambdaNP2;  
    CHl133b7 = CHl1_33r_LNP / LambdaNP2;  
    CHl311b7 = CHl3_11r_LNP / LambdaNP2;  
    CHl333b7 = CHl3_33r_LNP / LambdaNP2;  
    CHe11b7 = CHe_11r_LNP / LambdaNP2;  
    CHe33b7 = CHe_33r_LNP / LambdaNP2;  
    
    chi2VBFff = chi2VBFff 
       +294369703280. * CHq111b7 * CHq111b7 -696497790456. * CHq111b7 * CHq122b7 +155018877233. * CHq111b7 * CHq133b7 +270028852604. * CHq111b7 * CHq311b7  
       +1506539230154. * CHq111b7 * CHq322b7 -149963985224. * CHq111b7 * CHq333b7 +461220362135. * CHq111b7 * CHu11b7 +78816992300. * CHq111b7 * CHu22b7  
       -223555633839. * CHq111b7 * CHd11b7 -223555633863. * CHq111b7 * CHd22b7 -2341151036. * CHq111b7 * CHd33b7 +1737600657. * CHq111b7 * CuW33b7  
       +2902972586577. * CHq122b7 * CHq122b7 +3470296288844. * CHq122b7 * CHq133b7 -8076489991986. * CHq122b7 * CHq311b7 -1013553480359. * CHq122b7 * CHq322b7  
       -3414318273934. * CHq122b7 * CHq333b7 -1592733881252. * CHq122b7 * CHu11b7 +1000736437166. * CHq122b7 * CHu22b7 +780455954819. * CHq122b7 * CHd11b7  
       +780455954819. * CHq122b7 * CHd22b7 -52919133080. * CHq122b7 * CHd33b7 +24143957594. * CHq122b7 * CuW33b7 +995304019100460. * CHq133b7 * CHq133b7  
       +1917428826591. * CHq133b7 * CHq311b7 +5807250758619. * CHq133b7 * CHq322b7 -1928899725876307. * CHq133b7 * CHq333b7 +347745310351. * CHq133b7 * CHu11b7  
       +1744541324892. * CHq133b7 * CHu22b7 -14396791926484. * CHq133b7 * CHu33b7 -168373055072. * CHq133b7 * CHd11b7 -168373055072. * CHq133b7 * CHd22b7  
       -30137559623724. * CHq133b7 * CHd33b7 +10412142817. * CHq133b7 * CuH33b7 +21703034532628. * CHq133b7 * CuW33b7 +1589793547543. * CHq133b7 * CuB33b7  
       +40969674015225. * CHq311b7 * CHq311b7 +21595980320609. * CHq311b7 * CHq322b7 -1817598090531. * CHq311b7 * CHq333b7 +5730101953211. * CHq311b7 * CHu11b7  
       +979523162853. * CHq311b7 * CHu22b7 -2727352225676. * CHq311b7 * CHd11b7 -2727352225549. * CHq311b7 * CHd22b7 -28584826563. * CHq311b7 * CHd33b7  
       +32159180060. * CHq311b7 * CuW33b7 +19973052528247. * CHq322b7 * CHq322b7 -5547699409137. * CHq322b7 * CHq333b7 +3345183239063. * CHq322b7 * CHu11b7  
       +2113331954800. * CHq322b7 * CHu22b7 -1577201830875. * CHq322b7 * CHd11b7 -1577201830928. * CHq322b7 * CHd22b7 -86986447595. * CHq322b7 * CHd33b7  
       +85621867321. * CHq322b7 * CuW33b7 +1048577382783022. * CHq333b7 * CHq333b7 -337119910821. * CHq333b7 * CHu11b7 -1686204956551. * CHq333b7 * CHu22b7  
       -55484335241447. * CHq333b7 * CHu33b7 +163785068588. * CHq333b7 * CHd11b7 +163785068588. * CHq333b7 * CHd22b7 +29357340698560. * CHq333b7 * CHd33b7  
       -69579858494. * CHq333b7 * CuH33b7 -76014528332299. * CHq333b7 * CuW33b7 +4473647586666. * CHq333b7 * CuB33b7 +517792100468. * CHu11b7 * CHu11b7  
       +176986199882. * CHu11b7 * CHu22b7 -501083940719. * CHu11b7 * CHd11b7 -501083940719. * CHu11b7 * CHd22b7 -5253919414. * CHu11b7 * CHd33b7  
       +3796920592. * CHu11b7 * CuW33b7 +290299036231. * CHu22b7 * CHu22b7 -85633055934. * CHu22b7 * CHd11b7 -85633055934. * CHu22b7 * CHd22b7  
       -26313510180. * CHu22b7 * CHd33b7 +20397758417. * CHu22b7 * CuW33b7 +153423125927670. * CHu33b7 * CHu33b7 -24624566. * CHu33b7 * CHd33b7  
       +219748997929. * CHu33b7 * CuH33b7 -31551369413849. * CHu33b7 * CuW33b7 -71116009358628. * CHu33b7 * CuB33b7 +121578040441. * CHd11b7 * CHd11b7  
       +243156080883. * CHd11b7 * CHd22b7 +2549542431. * CHd11b7 * CHd33b7 -1684207680. * CHd11b7 * CuW33b7 +121578040441. * CHd22b7 * CHd22b7  
       +2549542431. * CHd22b7 * CHd33b7 -1684207680. * CHd22b7 * CuW33b7 +228692981477. * CHd33b7 * CHd33b7 -288505731000. * CHd33b7 * CuW33b7  
       -136502839. * CHd33b7 * CuB33b7 +552928313. * CuH33b7 * CuH33b7 -20490050930. * CuH33b7 * CuW33b7 -120441329524. * CuH33b7 * CuB33b7  
       +16422787455965. * CuW33b7 * CuW33b7 +5144247180731. * CuW33b7 * CuB33b7 +14704582376602. * CuB33b7 * CuB33b7 +656161092260. * CHl111b7 * CHl111b7  
       -104000375670. * CHl111b7 * CHl311b7 +480719869087. * CHl111b7 * CHe11b7 +164040273065. * CHl133b7 * CHl133b7 -26000093918. * CHl133b7 * CHl333b7  
       +120179967272. * CHl133b7 * CHe33b7 +5551757140943. * CHl311b7 * CHl311b7 -2238763910187. * CHl311b7 * CHe11b7 +1387939285236. * CHl333b7 * CHl333b7  
       -559690977547. * CHl333b7 * CHe33b7 +307797738286. * CHe11b7 * CHe11b7 +76949434572. * CHe33b7 * CHe33b7;  

    
    // ffH Bin 1  
    CHq111bi = getSMEFTCoeff("CHq1R", 0,0, muRbi);
    CHq122bi = getSMEFTCoeff("CHq1R", 1,1, muRbi);
    CHq133bi = getSMEFTCoeff("CHq1R", 2,2, muRbi);
    CHq311bi = getSMEFTCoeff("CHq3R", 0,0, muRbi);
    CHq322bi = getSMEFTCoeff("CHq3R", 1,1, muRbi);
    CHq333bi = getSMEFTCoeff("CHq3R", 2,2, muRbi);
    CHu11bi = getSMEFTCoeff("CHuR", 0,0, muRbi);
    CHu22bi = getSMEFTCoeff("CHuR", 1,1, muRbi);
    CHu33bi = getSMEFTCoeff("CHuR", 2,2, muRbi);
    CHd11bi = getSMEFTCoeff("CHdR", 0,0, muRbi);
    CHd22bi = getSMEFTCoeff("CHdR", 1,1, muRbi);
    CHd33bi = getSMEFTCoeff("CHdR", 2,2, muRbi);
    CuW33bi = getSMEFTCoeff("CuWR", 2,2, muRbi);
    CuB33bi = getSMEFTCoeff("CuBR", 2,2, muRbi);
    CHl111bi = getSMEFTCoeff("CHl1R", 0,0, muRbi);
    CHl133bi = getSMEFTCoeff("CHl1R", 2,2, muRbi);
    CHl311bi = getSMEFTCoeff("CHl3R", 0,0, muRbi);
    CHl333bi = getSMEFTCoeff("CHl3R", 2,2, muRbi);
    CHe11bi = getSMEFTCoeff("CHeR", 0,0, muRbi);
    CHe33bi = getSMEFTCoeff("CHeR", 2,2, muRbi);
    
    chi2VBFffH = 6817949880551. * CHq111bi * CHq111bi -12567937638303. * CHq111bi * CHq122bi +287551704845. * CHq111bi * CHq133bi -38967551431310. * CHq111bi * CHq311bi  
       -23072683219235. * CHq111bi * CHq322bi -1509367129100. * CHq111bi * CHq333bi -7594507553545. * CHq111bi * CHu11bi -1300397759527. * CHq111bi * CHu22bi  
       +13922952200. * CHq111bi * CHd11bi +13922950071. * CHq111bi * CHd22bi +526610448. * CHq111bi * CHd33bi -308091410888. * CHq111bi * CuW33bi  
       +32871617720141. * CHq122bi * CHq122bi +2249578948451. * CHq122bi * CHq133bi +44438022666829. * CHq122bi * CHq311bi -28253233618422. * CHq122bi * CHq322bi  
       -11808104288387. * CHq122bi * CHq333bi +7164554219373. * CHq122bi * CHu11bi -11873582888581. * CHq122bi * CHu22bi -13134720056. * CHq122bi * CHd11bi  
       -13134720056. * CHq122bi * CHd22bi +4119787005. * CHq122bi * CHd33bi -2410265494713. * CHq122bi * CuW33bi +18689191053579. * CHq133bi * CHq133bi  
       -1016732382473. * CHq133bi * CHq311bi -2837956859095. * CHq133bi * CHq322bi -195820278083335. * CHq133bi * CHq333bi -163923456618. * CHq133bi * CHu11bi  
       -640909590332. * CHq133bi * CHu22bi -2496663300. * CHq133bi * CHu33bi +300519564. * CHq133bi * CHd11bi +300519564. * CHq133bi * CHd22bi  
       +68452869741. * CHq133bi * CHd33bi -40240002356821. * CHq133bi * CuW33bi +42436297798. * CHq133bi * CuB33bi +188800342303186. * CHq311bi * CHq311bi  
       +81580960169323. * CHq311bi * CHq322bi +5336857376751. * CHq311bi * CHq333bi +26852846387405. * CHq311bi * CHu11bi +4597978345916. * CHq311bi * CHu22bi  
       -49229053681. * CHq311bi * CHd11bi -49229108915. * CHq311bi * CHd22bi -1862002158. * CHq311bi * CHd33bi +1089357179716. * CHq311bi * CuW33bi  
       +101863582681209. * CHq322bi * CHq322bi +14896516782043. * CHq322bi * CHq333bi +13152952749132. * CHq322bi * CHu11bi +14412390258712. * CHq322bi * CHu22bi  
       -24113203275. * CHq322bi * CHd11bi -24113173706. * CHq322bi * CHd22bi -5197318279. * CHq322bi * CHd33bi +3040671009866. * CHq322bi * CuW33bi  
       +550795126795118. * CHq333bi * CHq333bi +860438915644. * CHq333bi * CHu11bi +3364152783913. * CHq333bi * CHu22bi -484481718379. * CHq333bi * CHu33bi  
       -1577435795. * CHq333bi * CHd11bi -1577435795. * CHq333bi * CHd22bi -358689558948. * CHq333bi * CHd33bi +172608517466608. * CHq333bi * CuW33bi  
       +8234835061859. * CHq333bi * CuB33bi +2164685356609. * CHu11bi * CHu11bi +741312578325. * CHu11bi * CHu22bi -7937000767. * CHu11bi * CHd11bi  
       -7937000767. * CHu11bi * CHd22bi -300202723. * CHu11bi * CHd33bi +175632445144. * CHu11bi * CuW33bi +1655873584737. * CHu22bi * CHu22bi  
       -1359042432. * CHu22bi * CHd11bi -1359042432. * CHu22bi * CHd22bi -1173735647. * CHu22bi * CHd33bi +686689512218. * CHu22bi * CuW33bi  
       +1634960571. * CHu33bi * CHu33bi -4084314. * CHu33bi * CHd33bi +253743730905. * CHu33bi * CuW33bi -55579519810. * CHu33bi * CuB33bi  
       +7275420. * CHd11bi * CHd11bi +14550840. * CHd11bi * CHd22bi +550359. * CHd11bi * CHd33bi -321985560. * CHd11bi * CuW33bi  
       +7275420. * CHd22bi * CHd22bi +550359. * CHd22bi * CHd33bi -321985560. * CHd22bi * CuW33bi +62680590. * CHd33bi * CHd33bi  
       -73656030340. * CHd33bi * CuW33bi +69421916. * CHd33bi * CuB33bi +31298549281233. * CuW33bi * CuW33bi -4312934198989. * CuW33bi * CuB33bi  
       +472348244615. * CuB33bi * CuB33bi +104272858799933. * CHl111bi * CHl111bi +487753266159797. * CHl111bi * CHl311bi -134626905405389. * CHl111bi * CHe11bi  
       +26068214699983. * CHl133bi * CHl133bi +121938316539949. * CHl133bi * CHl333bi -33656726351347. * CHl133bi * CHe33bi +570386319574328. * CHl311bi * CHl311bi  
       -314869629451968. * CHl311bi * CHe11bi +142596579893582. * CHl333bi * CHl333bi -78717407362992. * CHl333bi * CHe33bi +43454269566462. * CHe11bi * CHe11bi  
       +10863567391615. * CHe33bi * CHe33bi;  

    
    

    // HH Bin 1 
    CHb1 = getSMEFTCoeff("CH", muRHHb1);
    CHboxb1 = getSMEFTCoeff("CHbox", muRHHb1);
    CHDb1 = getSMEFTCoeff("CHD", muRHHb1);
    CHWb1 = getSMEFTCoeff("CHW", muRHHb1);
    CHBb1 = getSMEFTCoeff("CHB", muRHHb1);
    CHWBb1 = getSMEFTCoeff("CHWB", muRHHb1);
    
    chi2HH = 118165977458513. * CHb1 * CHb1 -112874594207147. * CHb1 * CHboxb1 -11078584708245. * CHb1 * CHDb1 -156199444732549. * CHb1 * CHWb1  
       -2404014030613. * CHb1 * CHBb1 -79076509272106. * CHb1 * CHWBb1 +28022543231349. * CHboxb1 * CHboxb1 +3390032286892. * CHboxb1 * CHDb1  
       +57616233017713. * CHboxb1 * CHWb1 +1551545337524. * CHboxb1 * CHBb1 +34028714844898. * CHboxb1 * CHWBb1 +1544971314701. * CHDb1 * CHDb1  
       +30123517069660. * CHDb1 * CHWb1 +252769376909. * CHDb1 * CHBb1 +7872068464974. * CHDb1 * CHWBb1 +186476178316787. * CHWb1 * CHWb1  
       -1100135119455. * CHWb1 * CHBb1 +102522447295442. * CHWb1 * CHWBb1 +1465935210410. * CHBb1 * CHBb1 -2279500536730. * CHBb1 * CHWBb1  
       +20227757952077. * CHWBb1 * CHWBb1;  

    
    // HH Bin 2
    CHb2 = getSMEFTCoeff("CH", muRHHb2);
    CHboxb2 = getSMEFTCoeff("CHbox", muRHHb2);
    CHDb2 = getSMEFTCoeff("CHD", muRHHb2);
    CHWb2 = getSMEFTCoeff("CHW", muRHHb2);
    CHBb2 = getSMEFTCoeff("CHB", muRHHb2);
    CHWBb2 = getSMEFTCoeff("CHWB", muRHHb2);
    
    chi2HH = chi2HH 
       +91575645365889. * CHb2 * CHb2 -221204361471886. * CHb2 * CHboxb2 -12563677800979. * CHb2 * CHDb2 -244405167457642. * CHb2 * CHWb2  
       -2226826342420. * CHb2 * CHBb2 -121357619060721. * CHb2 * CHWBb2 +140916034034566. * CHboxb2 * CHboxb2 +7915948573787. * CHboxb2 * CHDb2  
       +297725383454597. * CHboxb2 * CHWb2 +3222869930336. * CHboxb2 * CHBb2 +138440417541372. * CHboxb2 * CHWBb2 +5784853971503. * CHDb2 * CHDb2  
       +36819081144263. * CHDb2 * CHWb2 +1452596276780. * CHDb2 * CHBb2 +12567183750854. * CHDb2 * CHWBb2 +1322999940308448. * CHWb2 * CHWb2  
       -9297919494763. * CHWb2 * CHBb2 +293479076084277. * CHWb2 * CHWBb2 +7327832399711. * CHBb2 * CHBb2 -14576298457020. * CHBb2 * CHWBb2  
       +70781044041105. * CHWBb2 * CHWBb2;  

    
    // HH Bin 3
    CHb3 = getSMEFTCoeff("CH", muRHHb3);
    CHboxb3 = getSMEFTCoeff("CHbox", muRHHb3);
    CHDb3 = getSMEFTCoeff("CHD", muRHHb3);
    CHWb3 = getSMEFTCoeff("CHW", muRHHb3);
    CHBb3 = getSMEFTCoeff("CHB", muRHHb3);
    CHWBb3 = getSMEFTCoeff("CHWB", muRHHb3);
    
    chi2HH = chi2HH 
       +26015146307188. * CHb3 * CHb3 -202698515930908. * CHb3 * CHboxb3 +13895939836631. * CHb3 * CHDb3 -207915153178508. * CHb3 * CHWb3  
       -332481274671. * CHb3 * CHBb3 -53025389504051. * CHb3 * CHWBb3 +411861363922390. * CHboxb3 * CHboxb3 -72370368390323. * CHboxb3 * CHDb3  
       +919090494393210. * CHboxb3 * CHWb3 +1707365404087. * CHboxb3 * CHBb3 +187643353126638. * CHboxb3 * CHWBb3 +23722606102543. * CHDb3 * CHDb3  
       -100854845957511. * CHDb3 * CHWb3 +815787495242. * CHDb3 * CHBb3 +7829969406974. * CHDb3 * CHWBb3 +2660443707821698. * CHWb3 * CHWb3  
       -69947352018199. * CHWb3 * CHBb3 +417940116367513. * CHWb3 * CHWBb3 +17241574897318. * CHBb3 * CHBb3 -64962559019291. * CHBb3 * CHWBb3  
       +121995883600331. * CHWBb3 * CHWBb3;  

    
    // HH Bin 4
    CHb4 = getSMEFTCoeff("CH", muRHHb4);
    CHboxb4 = getSMEFTCoeff("CHbox", muRHHb4);
    CHDb4 = getSMEFTCoeff("CHD", muRHHb4);
    CHWb4 = getSMEFTCoeff("CHW", muRHHb4);
    CHBb4 = getSMEFTCoeff("CHB", muRHHb4);
    CHWBb4 = getSMEFTCoeff("CHWB", muRHHb4);
    
    chi2HH = chi2HH 
       +9451117713019. * CHb4 * CHb4 -260690931739110. * CHb4 * CHboxb4 +34708120381048. * CHb4 * CHDb4 -212940397663174. * CHb4 * CHWb4  
       +6876084835623. * CHb4 * CHBb4 -30788052136047. * CHb4 * CHWBb4 +1953666745640275. * CHboxb4 * CHboxb4 -551442469588307. * CHboxb4 * CHDb4  
       +4047204377593191. * CHboxb4 * CHWb4 -114382322360607. * CHboxb4 * CHBb4 +447562420219516. * CHboxb4 * CHWBb4 +139770577949259. * CHDb4 * CHDb4  
       -683016671725151. * CHDb4 * CHWb4 -63667471575078. * CHDb4 * CHBb4 +58443268873809. * CHDb4 * CHWBb4 +3629814650799597. * CHWb4 * CHWb4  
       -122929778196240. * CHWb4 * CHBb4 +450903715527618. * CHWb4 * CHWBb4 +23912412400726. * CHBb4 * CHBb4 -89578191803957. * CHBb4 * CHWBb4  
       +105621142132986. * CHWBb4 * CHWBb4;  

    
    // HH Bin 5
    CHb5 = getSMEFTCoeff("CH", muRHHb5);
    CHboxb5 = getSMEFTCoeff("CHbox", muRHHb5);
    CHDb5 = getSMEFTCoeff("CHD", muRHHb5);
    CHWb5 = getSMEFTCoeff("CHW", muRHHb5);
    CHBb5 = getSMEFTCoeff("CHB", muRHHb5);
    CHWBb5 = getSMEFTCoeff("CHWB", muRHHb5);
    
    chi2HH = chi2HH 
       +705607342194. * CHb5 * CHb5 -80747860550323. * CHb5 * CHboxb5 +13021061002777. * CHb5 * CHDb5 -14910159867350. * CHb5 * CHWb5  
       +10059686618707. * CHb5 * CHBb5 -5864634965609. * CHb5 * CHWBb5 +2337706350584608. * CHboxb5 * CHboxb5 -763823034647606. * CHboxb5 * CHDb5  
       +962092572057422. * CHboxb5 * CHWb5 -589002683021236. * CHboxb5 * CHBb5 +338254633777719. * CHboxb5 * CHWBb5 +182258233223567. * CHDb5 * CHDb5  
       -65766725150961. * CHDb5 * CHWb5 -306231848822921. * CHDb5 * CHBb5 +98975104784975. * CHDb5 * CHWBb5 +270985626184706. * CHWb5 * CHWb5  
       -351791686262777. * CHWb5 * CHBb5 +160019261392405. * CHWb5 * CHWBb5 +429234662709473. * CHBb5 * CHBb5 -346681935159680. * CHBb5 * CHWBb5  
       +75349226435208. * CHWBb5 * CHWBb5;  

    
    // HH Bin 6
    //CHb6 = getSMEFTCoeff("CH", muRHHb6);
    //CHboxb6 = getSMEFTCoeff("CHbox", muRHHb6);
    //CHDb6 = getSMEFTCoeff("CHD", muRHHb6);
    //CHWb6 = getSMEFTCoeff("CHW", muRHHb6);
    //CHBb6 = getSMEFTCoeff("CHB", muRHHb6);
    //CHWBb6 = getSMEFTCoeff("CHWB", muRHHb6);
    CHb6 = CH_LNP / LambdaNP2;
    CHboxb6 = CHbox_LNP / LambdaNP2;
    CHDb6 = CHD_LNP / LambdaNP2;
    CHWb6 = CHW_LNP / LambdaNP2;
    CHBb6 = CHB_LNP / LambdaNP2;
    CHWBb6 = CHWB_LNP / LambdaNP2;
    
    chi2HH = chi2HH 
       +9177954857. * CHb6 * CHb6 -3216858850171. * CHb6 * CHboxb6 +246848086650. * CHb6 * CHDb6 +1229849825682. * CHb6 * CHWb6  
       +3159805787911. * CHb6 * CHBb6 +242284352469. * CHb6 * CHWBb6 +281975296211758. * CHboxb6 * CHboxb6 -42023222703119. * CHboxb6 * CHDb6  
       -217918844776361. * CHboxb6 * CHWb6 -561353750051645. * CHboxb6 * CHBb6 -43566635624818. * CHboxb6 * CHWBb6 +29341426951665. * CHDb6 * CHDb6  
       +31227929228244. * CHDb6 * CHWb6 -286895411620354. * CHDb6 * CHBb6 -26843595060122. * CHDb6 * CHWBb6 +70927657730780. * CHWb6 * CHWb6  
       +139061569134458. * CHWb6 * CHBb6 -7655498908838. * CHWb6 * CHWBb6 +1264737327287913. * CHBb6 * CHBb6 +182554279772962. * CHBb6 * CHWBb6  
       +44569557918105. * CHWBb6 * CHWBb6;  
    
    // Add all
    Chi2Tot = chi2VBFff + chi2VBFffH + chi2HH;  

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

const double NPSMEFTd6General::AuxObs_NP5() const {
    // To be used for some temporary observable
    
    // 10 TeV Muon Collider: mu+ mu- -> ff, VV
    
    double Cee1122MuC10, Cle1122MuC10, Cle2211MuC10, Cll1122MuC10, Cll1221MuC10;
    double Cee2222MuC10, Cle2222MuC10, Cll2222MuC10, Cee2332MuC10, Cee2233MuC10;
    double Cle3322MuC10, Cle2233MuC10, Cll2332MuC10, Cll2233MuC10, Ced2211MuC10;
    double Cld2211MuC10, Clq12211MuC10, Clq32211MuC10, Cqe1122MuC10, Ceu2211MuC10;
    double Clu2211MuC10, Ced2222MuC10, Cld2222MuC10, Clq12222MuC10, Clq32222MuC10;
    double Cqe2222MuC10, Ceu2222MuC10, Clu2222MuC10, Ced2233MuC10, Cld2233MuC10;
    double Clq12233MuC10, Clq32233MuC10, Cqe3322MuC10, Ceu2233MuC10, Clu2233MuC10;
    double CHl122MuC10, CHl322MuC10, CHe22MuC10;  
    
    double Chi2Tot;

    // Wilson coefficients (evaluated at the UV scale, to be set to 10 TeV. => Change later for general scales)
    
    Cee1122MuC10 = Cee_1122r_LNP / LambdaNP2;  
    Cle1122MuC10 = Cle_1122r_LNP / LambdaNP2;  
    Cle2211MuC10 = Cle_2211r_LNP / LambdaNP2;  
    Cll1122MuC10 = Cll_1122r_LNP / LambdaNP2;  
    Cll1221MuC10 = Cll_1221r_LNP / LambdaNP2;  
    Cee2222MuC10 = Cee_2222r_LNP / LambdaNP2;  
    Cle2222MuC10 = Cle_2222r_LNP / LambdaNP2;  
    Cll2222MuC10 = Cll_2222r_LNP / LambdaNP2;  
    Cee2332MuC10 = Cee_2233r_LNP / LambdaNP2;  
    Cee2233MuC10 = Cee_2233r_LNP / LambdaNP2;  
    Cle3322MuC10 = Cle_3322r_LNP / LambdaNP2;  
    Cle2233MuC10 = Cle_2233r_LNP / LambdaNP2;  
    Cll2332MuC10 = Cll_2332r_LNP / LambdaNP2;  
    Cll2233MuC10 = Cll_2233r_LNP / LambdaNP2;  
    Ced2211MuC10 = Ced_2211r_LNP / LambdaNP2;  
    Cld2211MuC10 = Cld_2211r_LNP / LambdaNP2;  
    Clq12211MuC10 = Clq1_2211r_LNP / LambdaNP2;  
    Clq32211MuC10 = Clq3_2211r_LNP / LambdaNP2;  
    Cqe1122MuC10 = Cqe_1122r_LNP / LambdaNP2;  
    Ceu2211MuC10 = Ceu_2211r_LNP / LambdaNP2;  
    Clu2211MuC10 = Clu_2211r_LNP / LambdaNP2;  
    Ced2222MuC10 = Ced_2222r_LNP / LambdaNP2;  
    Cld2222MuC10 = Cld_2222r_LNP / LambdaNP2;  
    Clq12222MuC10 = Clq1_2222r_LNP / LambdaNP2;  
    Clq32222MuC10 = Clq3_2222r_LNP / LambdaNP2;  
    Cqe2222MuC10 = Cqe_2222r_LNP / LambdaNP2;  
    Ceu2222MuC10 = Ceu_2222r_LNP / LambdaNP2;  
    Clu2222MuC10 = Clu_2222r_LNP / LambdaNP2;  
    Ced2233MuC10 = Ced_2233r_LNP / LambdaNP2;  
    Cld2233MuC10 = Cld_2233r_LNP / LambdaNP2;  
    Clq12233MuC10 = Clq1_2233r_LNP / LambdaNP2;  
    Clq32233MuC10 = Clq3_2233r_LNP / LambdaNP2;  
    Cqe3322MuC10 = Cqe_3322r_LNP / LambdaNP2;  
    Ceu2233MuC10 = Ceu_2233r_LNP / LambdaNP2;  
    Clu2233MuC10 = Clu_2233r_LNP / LambdaNP2;  
    CHl122MuC10 = CHl1_22r_LNP / LambdaNP2;  
    CHl322MuC10 = CHl3_22r_LNP / LambdaNP2;  
    CHe22MuC10 = CHe_22r_LNP / LambdaNP2;  
    
    // chi2

    Chi2Tot = +73524576948723140000000. * Cee1122MuC10 * Cee1122MuC10 +6642670191968999000000. * Cee1122MuC10 * Cle1122MuC10 +6642670191968999000000. * Cee1122MuC10 * Cle2211MuC10 +44522686534321820000000. * Cee1122MuC10 * Cll1122MuC10  
       +46944598353323950000000. * Cee1122MuC10 * Cll1221MuC10 +3812654247228890000000. * Cle1122MuC10 * Cle1122MuC10 +3999382033587465000000. * Cle1122MuC10 * Cle2211MuC10 +2457482569536366000000. * Cle1122MuC10 * Cll1122MuC10  
       +4291151206029856000000. * Cle1122MuC10 * Cll1221MuC10 +1999691016793733000000. * Cle2211MuC10 * Cle2211MuC10 +2019262102291706000000. * Cle2211MuC10 * Cll1122MuC10 +2142280360221846000000. * Cle2211MuC10 * Cll1221MuC10  
       +7124105085728859000000. * Cll1122MuC10 * Cll1122MuC10 +17876471435346280000000. * Cll1122MuC10 * Cll1221MuC10 +16335828654457100000000. * Cll1221MuC10 * Cll1221MuC10 +38541838236068540000000. * Cee2222MuC10 * Cee2222MuC10  
       +37908793915629720000000. * Cee2222MuC10 * Cle2222MuC10 +47841678597226060000000. * Cee2222MuC10 * Cll2222MuC10 +17671807564841080000000. * Cle2222MuC10 * Cle2222MuC10 +28497647293748130000000. * Cle2222MuC10 * Cll2222MuC10  
       +19949560553721740000000. * Cll2222MuC10 * Cll2222MuC10 +4595286059295196000000. * Cee2332MuC10 * Cee2332MuC10 +9190572118590390000000. * Cee2332MuC10 * Cee2233MuC10 +830333773996125000000. * Cee2332MuC10 * Cle3322MuC10  
       +830333773996125000000. * Cee2332MuC10 * Cle2233MuC10 +5868074794165494000000. * Cee2332MuC10 * Cll2332MuC10 +5565335816790226000000. * Cee2332MuC10 * Cll2233MuC10 +4595286059295196000000. * Cee2233MuC10 * Cee2233MuC10  
       +830333773996125000000. * Cee2233MuC10 * Cle3322MuC10 +830333773996125000000. * Cee2233MuC10 * Cle2233MuC10 +5868074794165494000000. * Cee2233MuC10 * Cll2332MuC10 +5565335816790226000000. * Cee2233MuC10 * Cll2233MuC10  
       +1406404369416012000000. * Cle3322MuC10 * Cle3322MuC10 +999845508396866000000. * Cle3322MuC10 * Cle2233MuC10 +1610005512959467000000. * Cle3322MuC10 * Cll2332MuC10 +723925759195256700000. * Cle3322MuC10 * Cll2233MuC10  
       +499922754198433200000. * Cle2233MuC10 * Cle2233MuC10 +535570090055461300000. * Cle2233MuC10 * Cll2332MuC10 +504815525572926500000. * Cle2233MuC10 * Cll2233MuC10 +6252414174479264000000. * Cll2332MuC10 * Cll2332MuC10  
       +5353547229131181000000. * Cll2332MuC10 * Cll2233MuC10 +1871207366459745000000. * Cll2233MuC10 * Cll2233MuC10 +1294359760268132000000. * Ced2211MuC10 * Ced2211MuC10 +1010392006482535000000. * Ced2211MuC10 * Cld2211MuC10  
       -790483729626908700000. * Ced2211MuC10 * Clq12211MuC10 +8176393898408930000000. * Ced2211MuC10 * Clq32211MuC10 -2018862504818717000000. * Ced2211MuC10 * Cqe1122MuC10 -4991718871380371000000. * Ced2211MuC10 * Ceu2211MuC10  
       -1949114451359496000000. * Ced2211MuC10 * Clu2211MuC10 +2588719520536264000000. * Ced2211MuC10 * Ced2222MuC10 +1010392006482535000000. * Ced2211MuC10 * Cld2222MuC10 +2225887953092579000000. * Ced2211MuC10 * Clq12222MuC10  
       +3607824745165904000000. * Ced2211MuC10 * Clq32222MuC10 -1108263625193560000000. * Ced2211MuC10 * Cqe2222MuC10 -821939746895468000000. * Ced2211MuC10 * Ceu2222MuC10 -347717442831409200000. * Ced2211MuC10 * Clu2222MuC10  
       +27636255471895560000. * Ced2211MuC10 * Ced2233MuC10 +12528986071437570000. * Ced2211MuC10 * Cld2233MuC10 +30037306447584660000. * Ced2211MuC10 * Clq12233MuC10 +32096224598813900000. * Ced2211MuC10 * Clq32233MuC10  
       -11694882851576820000. * Ced2211MuC10 * Cqe3322MuC10 +197751383473432700000. * Cld2211MuC10 * Cld2211MuC10 -317893385703884900000. * Cld2211MuC10 * Clq12211MuC10 +3395269716523406000000. * Cld2211MuC10 * Clq32211MuC10  
       -809279747229804000000. * Cld2211MuC10 * Cqe1122MuC10 -1955240197787925000000. * Cld2211MuC10 * Ceu2211MuC10 -765712123342312500000. * Cld2211MuC10 * Clu2211MuC10 +1010392006482535000000. * Cld2211MuC10 * Ced2222MuC10  
       +395502766946865400000. * Cld2211MuC10 * Cld2222MuC10 +875521742948338000000. * Cld2211MuC10 * Clq12222MuC10 +1440709228627022000000. * Cld2211MuC10 * Clq32222MuC10 -436982980123549900000. * Cld2211MuC10 * Cqe2222MuC10  
       -322053622561625500000. * Cld2211MuC10 * Ceu2222MuC10 -136595952813623100000. * Cld2211MuC10 * Clu2222MuC10 +10791696138864870000. * Cld2211MuC10 * Ced2233MuC10 +4911004257049436000. * Cld2211MuC10 * Cld2233MuC10  
       +11828605375461840000. * Cld2211MuC10 * Clq12233MuC10 +12838229489424050000. * Cld2211MuC10 * Clq32233MuC10 -4620485325334033000. * Cld2211MuC10 * Cqe3322MuC10 +159106722621599100000. * Clq12211MuC10 * Clq12211MuC10  
       -4170556979126568000000. * Clq12211MuC10 * Clq32211MuC10 +791313112570255100000. * Clq12211MuC10 * Cqe1122MuC10 +1581237760639480000000. * Clq12211MuC10 * Ceu2211MuC10 +635891080928076200000. * Clq12211MuC10 * Clu2211MuC10  
       -790483729626908700000. * Clq12211MuC10 * Ced2222MuC10 -317893385703884900000. * Clq12211MuC10 * Cld2222MuC10 -735039977535541500000. * Clq12211MuC10 * Clq12222MuC10 -1368819037127281000000. * Clq12211MuC10 * Clq32222MuC10  
       +374697923776019400000. * Clq12211MuC10 * Cqe2222MuC10 +261208550032557500000. * Clq12211MuC10 * Ceu2222MuC10 +113398045076669200000. * Clq12211MuC10 * Clu2222MuC10 -8480840482032600000. * Clq12211MuC10 * Ced2233MuC10  
       -3997069636462752000. * Clq12211MuC10 * Cld2233MuC10 -10032695743737810000. * Clq12211MuC10 * Clq12233MuC10 -12351979586245490000. * Clq12211MuC10 * Clq32233MuC10 +4029879450880564000. * Clq12211MuC10 * Cqe3322MuC10  
       +31144898238357800000000. * Clq32211MuC10 * Clq32211MuC10 -10185426446469450000000. * Clq32211MuC10 * Cqe1122MuC10 -17007544789276830000000. * Clq32211MuC10 * Ceu2211MuC10 -7043210678639046000000. * Clq32211MuC10 * Clu2211MuC10  
       +8176393898408930000000. * Clq32211MuC10 * Ced2222MuC10 +3395269716523406000000. * Clq32211MuC10 * Cld2222MuC10 +8236199786321540000000. * Clq32211MuC10 * Clq12222MuC10 +17215002784377160000000. * Clq32211MuC10 * Clq32222MuC10  
       -4290824892366443000000. * Clq32211MuC10 * Cqe2222MuC10 -2818792580008775000000. * Clq32211MuC10 * Ceu2222MuC10 -1255546096738981000000. * Clq32211MuC10 * Clu2222MuC10 +88201427971817800000. * Clq32211MuC10 * Ced2233MuC10  
       +43303268736518350000. * Clq32211MuC10 * Cld2233MuC10 +113620134531330900000. * Clq32211MuC10 * Clq12233MuC10 +156952774527913100000. * Clq32211MuC10 * Clq32233MuC10 -46932224009066080000. * Clq32211MuC10 * Cqe3322MuC10  
       +986152426900895000000. * Cqe1122MuC10 * Cqe1122MuC10 +4022551563301174000000. * Cqe1122MuC10 * Ceu2211MuC10 +1612704049416842000000. * Cqe1122MuC10 * Clu2211MuC10 -2018862504818717000000. * Cqe1122MuC10 * Ced2222MuC10  
       -809279747229804000000. * Cqe1122MuC10 * Cld2222MuC10 -1861851997986506000000. * Cqe1122MuC10 * Clq12222MuC10 -3421532848502544000000. * Cqe1122MuC10 * Clq32222MuC10 +946861895156335000000. * Cqe1122MuC10 * Cqe2222MuC10  
       +664269503881851100000. * Cqe1122MuC10 * Ceu2222MuC10 +287603786979563200000. * Cqe1122MuC10 * Clu2222MuC10 -21648043808443760000. * Cqe1122MuC10 * Ced2233MuC10 -10160671140797650000. * Cqe1122MuC10 * Cld2233MuC10  
       -25383494786350380000. * Cqe1122MuC10 * Clq12233MuC10 -30836185992353450000. * Cqe1122MuC10 * Clq32233MuC10 +10164422489221900000. * Cqe1122MuC10 * Cqe3322MuC10 +4833789854142672000000. * Ceu2211MuC10 * Ceu2211MuC10  
       +3788590528158795000000. * Ceu2211MuC10 * Clu2211MuC10 -4991718871380371000000. * Ceu2211MuC10 * Ced2222MuC10 -1955240197787925000000. * Ceu2211MuC10 * Cld2222MuC10 -4333134181170656000000. * Ceu2211MuC10 * Clq12222MuC10  
       -7154935729324535000000. * Ceu2211MuC10 * Clq32222MuC10 +2163925359273474000000. * Ceu2211MuC10 * Cqe2222MuC10 +1592493718973334000000. * Ceu2211MuC10 * Ceu2222MuC10 +675843447709627600000. * Ceu2211MuC10 * Clu2222MuC10  
       -53320913164673740000. * Ceu2211MuC10 * Ced2233MuC10 -24286122646121870000. * Ceu2211MuC10 * Cld2233MuC10 -58557904900706070000. * Ceu2211MuC10 * Clq12233MuC10 -63781794283577450000. * Ceu2211MuC10 * Clq32233MuC10  
       +22890978550650530000. * Ceu2211MuC10 * Cqe3322MuC10 +744557355249806100000. * Clu2211MuC10 * Clu2211MuC10 -1949114451359496000000. * Clu2211MuC10 * Ced2222MuC10 -765712123342312500000. * Clu2211MuC10 * Cld2222MuC10  
       -1705259549590711000000. * Clu2211MuC10 * Clq12222MuC10 -2857988968458995000000. * Clu2211MuC10 * Clq32222MuC10 +853666848513635000000. * Clu2211MuC10 * Cqe2222MuC10 +624277433638344700000. * Clu2211MuC10 * Ceu2222MuC10  
       +265631554095932200000. * Clu2211MuC10 * Clu2222MuC10 -20830269138268920000. * Clu2211MuC10 * Ced2233MuC10 -9524151177712180000. * Clu2211MuC10 * Cld2233MuC10 -23071911926207800000. * Clu2211MuC10 * Clq12233MuC10  
       -25517986919997670000. * Clu2211MuC10 * Clq32233MuC10 +9048488290708760000. * Clu2211MuC10 * Cqe3322MuC10 +1294359760268132000000. * Ced2222MuC10 * Ced2222MuC10 +1010392006482535000000. * Ced2222MuC10 * Cld2222MuC10  
       +2225887953092579000000. * Ced2222MuC10 * Clq12222MuC10 +3607824745165904000000. * Ced2222MuC10 * Clq32222MuC10 -1108263625193560000000. * Ced2222MuC10 * Cqe2222MuC10 -821939746895468000000. * Ced2222MuC10 * Ceu2222MuC10  
       -347717442831409200000. * Ced2222MuC10 * Clu2222MuC10 +27636255471895560000. * Ced2222MuC10 * Ced2233MuC10 +12528986071437570000. * Ced2222MuC10 * Cld2233MuC10 +30037306447584660000. * Ced2222MuC10 * Clq12233MuC10  
       +32096224598813900000. * Ced2222MuC10 * Clq32233MuC10 -11694882851576820000. * Ced2222MuC10 * Cqe3322MuC10 +197751383473432700000. * Cld2222MuC10 * Cld2222MuC10 +875521742948338000000. * Cld2222MuC10 * Clq12222MuC10  
       +1440709228627022000000. * Cld2222MuC10 * Clq32222MuC10 -436982980123549900000. * Cld2222MuC10 * Cqe2222MuC10 -322053622561625500000. * Cld2222MuC10 * Ceu2222MuC10 -136595952813623100000. * Cld2222MuC10 * Clu2222MuC10  
       +10791696138864870000. * Cld2222MuC10 * Ced2233MuC10 +4911004257049436000. * Cld2222MuC10 * Cld2233MuC10 +11828605375461840000. * Cld2222MuC10 * Clq12233MuC10 +12838229489424050000. * Cld2222MuC10 * Clq32233MuC10  
       -4620485325334033000. * Cld2222MuC10 * Cqe3322MuC10 +2620318315168391000000. * Clq12222MuC10 * Clq12222MuC10 -1300524593800131000000. * Clq12222MuC10 * Clq32222MuC10 -476090300197830800000. * Clq12222MuC10 * Cqe2222MuC10  
       +3649927202551329000000. * Clq12222MuC10 * Ceu2222MuC10 +576655470983807600000. * Clq12222MuC10 * Clu2222MuC10 -252804189697480600000. * Clq12222MuC10 * Ced2233MuC10 -47615368152333830000. * Clq12222MuC10 * Cld2233MuC10  
       -292057244283918300000. * Clq12222MuC10 * Clq12233MuC10 -346687216964580200000. * Clq12222MuC10 * Clq32233MuC10 +47451245692796020000. * Clq12222MuC10 * Cqe3322MuC10 +16536113781167990000000. * Clq32222MuC10 * Clq32222MuC10  
       -3844690221645399000000. * Clq32222MuC10 * Cqe2222MuC10 -6040563466431732000000. * Clq32222MuC10 * Ceu2222MuC10 -1516268262402070000000. * Clq32222MuC10 * Clu2222MuC10 +336724355890536300000. * Clq32222MuC10 * Ced2233MuC10  
       +82718403195849200000. * Clq32222MuC10 * Cld2233MuC10 +403497506010782100000. * Clq32222MuC10 * Clq12233MuC10 +506261997351578400000. * Clq32222MuC10 * Clq32233MuC10 -84417283145703600000. * Clq32222MuC10 * Cqe3322MuC10  
       +1835826368032564000000. * Cqe2222MuC10 * Cqe2222MuC10 +941844557664745000000. * Cqe2222MuC10 * Ceu2222MuC10 +2081382358378539000000. * Cqe2222MuC10 * Clu2222MuC10 -50906862250607150000. * Cqe2222MuC10 * Ced2233MuC10  
       -133969968108675900000. * Cqe2222MuC10 * Cld2233MuC10 -58853556002876800000. * Cqe2222MuC10 * Clq12233MuC10 -69942018006362830000. * Cqe2222MuC10 * Clq32233MuC10 +134128172443963500000. * Cqe2222MuC10 * Cqe3322MuC10  
       +3109075412535904000000. * Ceu2222MuC10 * Ceu2222MuC10 +1296361162396157000000. * Ceu2222MuC10 * Clu2222MuC10 -392886436552951800000. * Ceu2222MuC10 * Ced2233MuC10 -84183261609994200000. * Ceu2222MuC10 * Cld2233MuC10  
       -441682248282156400000. * Ceu2222MuC10 * Clq12233MuC10 -501308119754854900000. * Ceu2222MuC10 * Clq32233MuC10 +81296455937950200000. * Ceu2222MuC10 * Cqe3322MuC10 +1961942334596719000000. * Clu2222MuC10 * Clu2222MuC10  
       -83721524523137200000. * Clu2222MuC10 * Ced2233MuC10 -262349361368538700000. * Clu2222MuC10 * Cld2233MuC10 -95988496604086200000. * Clu2222MuC10 * Clq12233MuC10 -112563772053251800000. * Clu2222MuC10 * Clq32233MuC10  
       +259053648447054300000. * Clu2222MuC10 * Cqe3322MuC10 +4313511969718390000000. * Ced2233MuC10 * Ced2233MuC10 +1874446416486167000000. * Ced2233MuC10 * Cld2233MuC10 +9520427961040210000000. * Ced2233MuC10 * Clq12233MuC10  
       +10461045238836690000000. * Ced2233MuC10 * Clq32233MuC10 -1780093915979784000000. * Ced2233MuC10 * Cqe3322MuC10 +2968914898506404000000. * Cld2233MuC10 * Cld2233MuC10 +2108087609229658000000. * Cld2233MuC10 * Clq12233MuC10  
       +2394295835420813000000. * Cld2233MuC10 * Clq32233MuC10 -5766535039422040000000. * Cld2233MuC10 * Cqe3322MuC10 +8711607711049590000000. * Clq12233MuC10 * Clq12233MuC10 +4089875309339703000000. * Clq12233MuC10 * Clq32233MuC10  
       -1038268596618630000000. * Clq12233MuC10 * Cqe3322MuC10 +8746239809179180000000. * Clq12233MuC10 * Ceu2233MuC10 +1910710050478164000000. * Clq12233MuC10 * Clu2233MuC10 +25777244291445130000000. * Clq32233MuC10 * Clq32233MuC10  
       -5525675317895872000000. * Clq32233MuC10 * Cqe3322MuC10 -9757431885308120000000. * Clq32233MuC10 * Ceu2233MuC10 -2179530738756734000000. * Clq32233MuC10 * Clu2233MuC10 +5181745341471425000000. * Cqe3322MuC10 * Cqe3322MuC10  
       +1269826682729251000000. * Cqe3322MuC10 * Ceu2233MuC10 +3976835756238039000000. * Cqe3322MuC10 * Clu2233MuC10 +5962168756835449000000. * Ceu2233MuC10 * Ceu2233MuC10 +2573084353204568000000. * Ceu2233MuC10 * Clu2233MuC10  
       +3992982610051034000000. * Clu2233MuC10 * Clu2233MuC10 +674703173734897500000. * CHl122MuC10 * CHl122MuC10 -191580164045033200000. * CHl122MuC10 * CHl322MuC10 -266365562835282500000. * CHl122MuC10 * CHe22MuC10  
       +1070402581892601000000. * CHl322MuC10 * CHl322MuC10 -1672345478625057000000. * CHl322MuC10 * CHe22MuC10 +770298020556746300000. * CHe22MuC10 * CHe22MuC10;  

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

const double NPSMEFTd6General::AuxObs_NP6() const {
    // FCC-hh 84 TeV high-E observables, except NC and CC DY

    double Chi2Tot;

    Chi2Tot = chi2FCChh4Top() + chi2FCChhHtt() + chi2FCChhZtt() +chi2FCChhtt() + chi2FCChhtb()
            + chi2FCChhHW() + chi2FCChhWW()
            + chi2FCChhjj() + chi2FCChhbbcc();

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

const double NPSMEFTd6General::AuxObs_NP7() const {
    // FCC-hh 84 TeV high-E observables: NC and CC DY

    double Chi2Tot;

    Chi2Tot = chi2FCChhee() + chi2FCChhmumu() + chi2FCChhtata() 
            + chi2FCChhenu() + chi2FCChhmunu() + chi2FCChhtanu();

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

const double NPSMEFTd6General::AuxObs_NP8() const {
    // To be used for some temporary observable

    double Chi2Tot;

    Chi2Tot = 0.0;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

const double NPSMEFTd6General::AuxObs_NP9() const {
    // To be used for some temporary observable

    double Chi2Tot;

    Chi2Tot = 0.0;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

const double NPSMEFTd6General::AuxObs_NP10() const {
    // To be used for some temporary observable
    
    double Chi2Tot;

    //  Contributions from the different bins    
    double Bin1, Bin2, Bin3, Bin4, Bin5, Bin6;
    double Chi2Bin1, Chi2Bin2, Chi2Bin3, Chi2Bin4, Chi2Bin5, Chi2Bin6;

    // Bin 1
    Bin1 = 0.;

    // Exclude points with negative values of BinX
    if (Bin1 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin1 = 0.0;

    // Bin 2
    Bin2 = 0.;

    // Exclude points with negative values of BinX
    if (Bin2 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin2 = 0.0;

    // Bin 3
    Bin3 = 0.;

    // Exclude points with negative values of BinX
    if (Bin3 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin3 = 0.0;
    
    // Bin 4
    Bin4 = 0.;

    // Exclude points with negative values of BinX
    if (Bin4 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin4 = 0.0;
    
    // Bin 5
    Bin5 = 0.;

    // Exclude points with negative values of BinX
    if (Bin5 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin5 = 0.0;
    
    // Bin 6
    Bin6 = 0.;

    // Exclude points with negative values of BinX
    if (Bin6 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin6 = 0.0;
    
    
    // The total contributions to the log-likelihood/chi-square
    Chi2Tot = Chi2Bin1 + Chi2Bin2 + Chi2Bin3 + Chi2Bin4 + Chi2Bin5 + Chi2Bin6;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);

}

const double NPSMEFTd6General::AuxObs_NP11() const {
    // To be used for some temporary observable
    
    double Chi2Tot;

    //  Contributions from the different bins    
    double Bin1, Bin2, Bin3, Bin4, Bin5, Bin6;
    double Chi2Bin1, Chi2Bin2, Chi2Bin3, Chi2Bin4, Chi2Bin5, Chi2Bin6;

    // Bin 1
    Bin1 = 0.;

    // Exclude points with negative values of BinX
    if (Bin1 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin1 = 0.0;

    // Bin 2
    Bin2 = 0.;

    // Exclude points with negative values of BinX
    if (Bin2 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin2 = 0.0;

    // Bin 3
    Bin3 = 0.;

    // Exclude points with negative values of BinX
    if (Bin3 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin3 = 0.0;
    
    // Bin 4
    Bin4 = 0.;

    // Exclude points with negative values of BinX
    if (Bin4 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin4 = 0.0;
    
    // Bin 5
    Bin5 = 0.;

    // Exclude points with negative values of BinX
    if (Bin5 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin5 = 0.0;
    
    // Bin 6
    Bin6 = 0.;

    // Exclude points with negative values of BinX
    if (Bin6 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin6 = 0.0;
    
    
    // The total contributions to the log-likelihood/chi-square
    Chi2Tot = Chi2Bin1 + Chi2Bin2 + Chi2Bin3 + Chi2Bin4 + Chi2Bin5 + Chi2Bin6;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);

}

const double NPSMEFTd6General::AuxObs_NP12() const {
    // To be used for some temporary observable
    
    double Chi2Tot;

    //  Contributions from the different bins    
    double Bin1, Bin2, Bin3, Bin4, Bin5, Bin6;
    double Chi2Bin1, Chi2Bin2, Chi2Bin3, Chi2Bin4, Chi2Bin5, Chi2Bin6;

    // Bin 1
    Bin1 = 0.;

    // Exclude points with negative values of BinX
    if (Bin1 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin1 = 0.0;

    // Bin 2
    Bin2 = 0.;

    // Exclude points with negative values of BinX
    if (Bin2 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin2 = 0.0;

    // Bin 3
    Bin3 = 0.;

    // Exclude points with negative values of BinX
    if (Bin3 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin3 = 0.0;
    
    // Bin 4
    Bin4 = 0.;

    // Exclude points with negative values of BinX
    if (Bin4 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin4 = 0.0;
    
    // Bin 5
    Bin5 = 0.;

    // Exclude points with negative values of BinX
    if (Bin5 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin5 = 0.0;
    
    // Bin 6
    Bin6 = 0.;

    // Exclude points with negative values of BinX
    if (Bin6 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin6 = 0.0;
    
    
    // The total contributions to the log-likelihood/chi-square
    Chi2Tot = Chi2Bin1 + Chi2Bin2 + Chi2Bin3 + Chi2Bin4 + Chi2Bin5 + Chi2Bin6;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);

}

const double NPSMEFTd6General::AuxObs_NP13() const {
    // To be used for some temporary observable
    
    double Chi2Tot;

    //  Contributions from the different bins    
    double Bin1, Bin2, Bin3, Bin4, Bin5, Bin6;
    double Chi2Bin1, Chi2Bin2, Chi2Bin3, Chi2Bin4, Chi2Bin5, Chi2Bin6;

    // Bin 1
    Bin1 = 0.;

    // Exclude points with negative values of BinX
    if (Bin1 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin1 = 0.0;

    // Bin 2
    Bin2 = 0.;

    // Exclude points with negative values of BinX
    if (Bin2 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin2 = 0.0;

    // Bin 3
    Bin3 = 0.;

    // Exclude points with negative values of BinX
    if (Bin3 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin3 = 0.0;
    
    // Bin 4
    Bin4 = 0.;

    // Exclude points with negative values of BinX
    if (Bin4 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin4 = 0.0;
    
    // Bin 5
    Bin5 = 0.;

    // Exclude points with negative values of BinX
    if (Bin5 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin5 = 0.0;
    
    // Bin 6
    Bin6 = 0.;

    // Exclude points with negative values of BinX
    if (Bin6 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin6 = 0.0;
    
    
    // The total contributions to the log-likelihood/chi-square
    Chi2Tot = Chi2Bin1 + Chi2Bin2 + Chi2Bin3 + Chi2Bin4 + Chi2Bin5 + Chi2Bin6;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);

}

const double NPSMEFTd6General::AuxObs_NP14() const {
    // To be used for some temporary observable
    
    double Chi2Tot;

    //  Contributions from the different bins    
    double Bin1, Bin2, Bin3, Bin4, Bin5, Bin6;
    double Chi2Bin1, Chi2Bin2, Chi2Bin3, Chi2Bin4, Chi2Bin5, Chi2Bin6;

    // Bin 1
    Bin1 = 0.;

    // Exclude points with negative values of BinX
    if (Bin1 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin1 = 0.0;

    // Bin 2
    Bin2 = 0.;

    // Exclude points with negative values of BinX
    if (Bin2 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin2 = 0.0;

    // Bin 3
    Bin3 = 0.;

    // Exclude points with negative values of BinX
    if (Bin3 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin3 = 0.0;
    
    // Bin 4
    Bin4 = 0.;

    // Exclude points with negative values of BinX
    if (Bin4 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin4 = 0.0;
    
    // Bin 5
    Bin5 = 0.;

    // Exclude points with negative values of BinX
    if (Bin5 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin5 = 0.0;
    
    // Bin 6
    Bin6 = 0.;

    // Exclude points with negative values of BinX
    if (Bin6 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin6 = 0.0;
    
    
    // The total contributions to the log-likelihood/chi-square
    Chi2Tot = Chi2Bin1 + Chi2Bin2 + Chi2Bin3 + Chi2Bin4 + Chi2Bin5 + Chi2Bin6;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);

}

const double NPSMEFTd6General::AuxObs_NP15() const {
    // To be used for some temporary observable
    
    double Chi2Tot;

    //  Contributions from the different bins    
    double Bin1, Bin2, Bin3, Bin4, Bin5, Bin6;
    double Chi2Bin1, Chi2Bin2, Chi2Bin3, Chi2Bin4, Chi2Bin5, Chi2Bin6;

    // Bin 1
    Bin1 = 0.;

    // Exclude points with negative values of BinX
    if (Bin1 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin1 = 0.0;

    // Bin 2
    Bin2 = 0.;

    // Exclude points with negative values of BinX
    if (Bin2 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin2 = 0.0;

    // Bin 3
    Bin3 = 0.;

    // Exclude points with negative values of BinX
    if (Bin3 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin3 = 0.0;
    
    // Bin 4
    Bin4 = 0.;

    // Exclude points with negative values of BinX
    if (Bin4 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin4 = 0.0;
    
    // Bin 5
    Bin5 = 0.;

    // Exclude points with negative values of BinX
    if (Bin5 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin5 = 0.0;
    
    // Bin 6
    Bin6 = 0.;

    // Exclude points with negative values of BinX
    if (Bin6 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin6 = 0.0;
    
    
    // The total contributions to the log-likelihood/chi-square
    Chi2Tot = Chi2Bin1 + Chi2Bin2 + Chi2Bin3 + Chi2Bin4 + Chi2Bin5 + Chi2Bin6;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);

}

const double NPSMEFTd6General::AuxObs_NP16() const {
    // To be used for some temporary observable
    
    double Chi2Tot;

    //  Contributions from the different bins    
    double Bin1, Bin2, Bin3, Bin4, Bin5, Bin6;
    double Chi2Bin1, Chi2Bin2, Chi2Bin3, Chi2Bin4, Chi2Bin5, Chi2Bin6;

    // Bin 1
    Bin1 = 0.;

    // Exclude points with negative values of BinX
    if (Bin1 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin1 = 0.0;

    // Bin 2
    Bin2 = 0.;

    // Exclude points with negative values of BinX
    if (Bin2 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin2 = 0.0;

    // Bin 3
    Bin3 = 0.;

    // Exclude points with negative values of BinX
    if (Bin3 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin3 = 0.0;
    
    // Bin 4
    Bin4 = 0.;

    // Exclude points with negative values of BinX
    if (Bin4 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin4 = 0.0;
    
    // Bin 5
    Bin5 = 0.;

    // Exclude points with negative values of BinX
    if (Bin5 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin5 = 0.0;
    
    // Bin 6
    Bin6 = 0.;

    // Exclude points with negative values of BinX
    if (Bin6 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin6 = 0.0;
    
    
    // The total contributions to the log-likelihood/chi-square
    Chi2Tot = Chi2Bin1 + Chi2Bin2 + Chi2Bin3 + Chi2Bin4 + Chi2Bin5 + Chi2Bin6;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);

}

const double NPSMEFTd6General::AuxObs_NP17() const {
    // To be used for some temporary observable
    
    double Chi2Tot;

    //  Contributions from the different bins    
    double Bin1, Bin2, Bin3, Bin4, Bin5, Bin6;
    double Chi2Bin1, Chi2Bin2, Chi2Bin3, Chi2Bin4, Chi2Bin5, Chi2Bin6;

    // Bin 1
    Bin1 = 0.;

    // Exclude points with negative values of BinX
    if (Bin1 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin1 = 0.0;

    // Bin 2
    Bin2 = 0.;

    // Exclude points with negative values of BinX
    if (Bin2 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin2 = 0.0;

    // Bin 3
    Bin3 = 0.;

    // Exclude points with negative values of BinX
    if (Bin3 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin3 = 0.0;
    
    // Bin 4
    Bin4 = 0.;

    // Exclude points with negative values of BinX
    if (Bin4 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin4 = 0.0;
    
    // Bin 5
    Bin5 = 0.;

    // Exclude points with negative values of BinX
    if (Bin5 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin5 = 0.0;
    
    // Bin 6
    Bin6 = 0.;

    // Exclude points with negative values of BinX
    if (Bin6 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin6 = 0.0;
    
    
    // The total contributions to the log-likelihood/chi-square
    Chi2Tot = Chi2Bin1 + Chi2Bin2 + Chi2Bin3 + Chi2Bin4 + Chi2Bin5 + Chi2Bin6;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);

}

const double NPSMEFTd6General::AuxObs_NP18() const {
    // To be used for some temporary observable
    
    double Chi2Tot;

    //  Contributions from the different bins    
    double Bin1, Bin2, Bin3, Bin4, Bin5, Bin6;
    double Chi2Bin1, Chi2Bin2, Chi2Bin3, Chi2Bin4, Chi2Bin5, Chi2Bin6;

    // Bin 1
    Bin1 = 0.;

    // Exclude points with negative values of BinX
    if (Bin1 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin1 = 0.0;

    // Bin 2
    Bin2 = 0.;

    // Exclude points with negative values of BinX
    if (Bin2 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin2 = 0.0;

    // Bin 3
    Bin3 = 0.;

    // Exclude points with negative values of BinX
    if (Bin3 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin3 = 0.0;
    
    // Bin 4
    Bin4 = 0.;

    // Exclude points with negative values of BinX
    if (Bin4 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin4 = 0.0;
    
    // Bin 5
    Bin5 = 0.;

    // Exclude points with negative values of BinX
    if (Bin5 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin5 = 0.0;
    
    // Bin 6
    Bin6 = 0.;

    // Exclude points with negative values of BinX
    if (Bin6 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin6 = 0.0;
    
    
    // The total contributions to the log-likelihood/chi-square
    Chi2Tot = Chi2Bin1 + Chi2Bin2 + Chi2Bin3 + Chi2Bin4 + Chi2Bin5 + Chi2Bin6;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);

}

const double NPSMEFTd6General::AuxObs_NP19() const {
     // To be used for some temporary observable
    
    double Chi2Tot;

    //  Contributions from the different bins    
    double Bin1, Bin2, Bin3, Bin4, Bin5, Bin6;
    double Chi2Bin1, Chi2Bin2, Chi2Bin3, Chi2Bin4, Chi2Bin5, Chi2Bin6;

    // Bin 1
    Bin1 = 0.;

    // Exclude points with negative values of BinX
    if (Bin1 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin1 = 0.0;

    // Bin 2
    Bin2 = 0.;

    // Exclude points with negative values of BinX
    if (Bin2 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin2 = 0.0;

    // Bin 3
    Bin3 = 0.;

    // Exclude points with negative values of BinX
    if (Bin3 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin3 = 0.0;
    
    // Bin 4
    Bin4 = 0.;

    // Exclude points with negative values of BinX
    if (Bin4 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin4 = 0.0;
    
    // Bin 5
    Bin5 = 0.;

    // Exclude points with negative values of BinX
    if (Bin5 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin5 = 0.0;
    
    // Bin 6
    Bin6 = 0.;

    // Exclude points with negative values of BinX
    if (Bin6 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin6 = 0.0;
    
    
    // The total contributions to the log-likelihood/chi-square
    Chi2Tot = Chi2Bin1 + Chi2Bin2 + Chi2Bin3 + Chi2Bin4 + Chi2Bin5 + Chi2Bin6;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);

}

const double NPSMEFTd6General::AuxObs_NP20() const {
    // To be used for some temporary observable
    
    double Chi2Tot;

    //  Contributions from the different bins    
    double Bin1, Bin2, Bin3, Bin4, Bin5, Bin6;
    double Chi2Bin1, Chi2Bin2, Chi2Bin3, Chi2Bin4, Chi2Bin5, Chi2Bin6;

    // Bin 1
    Bin1 = 0.;

    // Exclude points with negative values of BinX
    if (Bin1 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin1 = 0.0;

    // Bin 2
    Bin2 = 0.;

    // Exclude points with negative values of BinX
    if (Bin2 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin2 = 0.0;

    // Bin 3
    Bin3 = 0.;

    // Exclude points with negative values of BinX
    if (Bin3 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin3 = 0.0;
    
    // Bin 4
    Bin4 = 0.;

    // Exclude points with negative values of BinX
    if (Bin4 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin4 = 0.0;
    
    // Bin 5
    Bin5 = 0.;

    // Exclude points with negative values of BinX
    if (Bin5 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin5 = 0.0;
    
    // Bin 6
    Bin6 = 0.;

    // Exclude points with negative values of BinX
    if (Bin6 < 0) return std::numeric_limits<double>::quiet_NaN();

    Chi2Bin6 = 0.0;
    
    
    // The total contributions to the log-likelihood/chi-square
    Chi2Tot = Chi2Bin1 + Chi2Bin2 + Chi2Bin3 + Chi2Bin4 + Chi2Bin5 + Chi2Bin6;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);

}

const double NPSMEFTd6General::AuxObs_NP21() const {
    // To be used for some temporary observable

    // Muon Collider CH, C6 using diHiggs M_{HH} invariant distribution at energy: 3000 GeV
    double C6par, CHpar, C6par2, CHpar2;
    double Chi2Tot;

    // C6 v2, getSMEFTCoeffEW("CH") v2, in the notation of 2012.11555 as function of the Warsaw WC
    C6par = (-2 * v2 * getSMEFTCoeffEW("CH") / mHl / mHl) * v2;
    CHpar = (-2.0 * getSMEFTCoeffEW("CHbox")) * v2;

    C6par2 = C6par*C6par;
    CHpar2 = CHpar*CHpar;

    //Chi2Tot = 0.0; 

    //if (FlagQuadraticTerms) {

    //  Full chi square

    Chi2Tot = (5.127032998959654 * pow(1. * C6par2 + C6par * (-0.9046361401291156 - 3.160612259276141 * CHpar) + CHpar * (1.4943175205469572 + 3.4987548133070216 * CHpar), 2))
            / (0.4665231049459758 - 0.9046361401291156 * C6par + 1. * C6par2 + 1.4943175205469572 * CHpar - 3.160612259276141 * C6par * CHpar + 3.4987548133070216 * CHpar2)

            +(3.8240160713265476 * pow(1. * C6par2 + C6par * (-0.7068429909035657 - 4.529410356278686 * CHpar) + CHpar * (1.6460931966048826 + 6.212867668302641 * CHpar), 2))
            / (0.262033783826448 - 0.7068429909035657 * C6par + 1. * C6par2 + 1.6460931966048826 * CHpar - 4.529410356278686 * C6par * CHpar + 6.212867668302641 * CHpar2)

            +(0.9569666572585168 * pow(1. * C6par2 + C6par * (-0.8811004415807353 - 6.4350041910598765 * CHpar) + CHpar * (2.920157858804367 + 9.935394583932345 * CHpar), 2))
            / (0.48389118130810876 - 0.8811004415807353 * C6par + 1. * C6par2 + 2.920157858804367 * CHpar - 6.4350041910598765 * C6par * CHpar + 9.935394583932345 * CHpar2)

            +(0.5040979907607566 * pow(1. * C6par2 + C6par * (-4.0368563913001125 - 2.7217670900218875 * CHpar) + CHpar * (5.59639944620888 + 10.367826272055057 * CHpar), 2))
            / (10.356262676995112 - 4.0368563913001125 * C6par + 1. * C6par2 + 5.59639944620888 * CHpar - 2.7217670900218875 * C6par * CHpar + 10.367826272055057 * CHpar2)

            +(3.460963680000871 * pow(1. * C6par2 + C6par * (-1.7371086227288517 - 4.968101131225101 * CHpar) + CHpar * (5.029364134904506 + 12.279932043237457 * CHpar), 2))
            / (2.6070269148526557 - 1.7371086227288517 * C6par + 1. * C6par2 + 5.029364134904506 * CHpar - 4.968101131225101 * C6par * CHpar + 12.279932043237457 * CHpar2)

            +(10.16925886603548 * pow(1. * C6par2 + C6par * (-1.2083942566612897 - 17.59578848524835 * CHpar) + CHpar * (13.84638209179682 + 146.76790379566108 * CHpar), 2))
            / (1.3814785330740036 - 1.2083942566612897 * C6par + 1. * C6par2 + 13.84638209179682 * CHpar - 17.59578848524835 * C6par * CHpar + 146.76790379566108 * CHpar2);
    //}

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);

}

const double NPSMEFTd6General::AuxObs_NP22() const {
    // To be used for some temporary observable

    // Muon Collider CH, C6 using diHiggs M_{HH} invariant distribution at energy: 10000 GeV
    double C6par, CHpar, C6par2, CHpar2;
    double Chi2Tot;

    // C6 v2, getSMEFTCoeffEW("CH") v2, in the notation of 2012.11555 as function of the Warsaw WC
    C6par = (-2 * v2 * getSMEFTCoeffEW("CH") / mHl / mHl) * v2;
    CHpar = (-2.0 * getSMEFTCoeffEW("CHbox")) * v2;

    C6par2 = C6par*C6par;
    CHpar2 = CHpar*CHpar;

    //Chi2Tot = 0.0; 

    //if (FlagQuadraticTerms) {

    //  Full chi square

    Chi2Tot = (571.4871835024893 * pow(1. * C6par2 + C6par * (-0.9787185826575221 - 5.193831432488647 * CHpar) + CHpar * (3.0674615767955578 + 10.591622934621405 * CHpar), 2))
            / (0.8501719090063755 - 0.9787185826575221 * C6par + 1. * C6par2 + 3.0674615767955578 * CHpar - 5.193831432488647 * C6par * CHpar + 10.591622934621405 * CHpar2)

            +(1.511128114971615 * pow(1. * C6par2 + C6par * (-1.2911703709918352 - 9.439077589411124 * CHpar) + CHpar * (7.742006029582707 + 24.15741462072724 * CHpar), 2))
            / (1.0820876087868914 - 1.2911703709918352 * C6par + 1. * C6par2 + 7.742006029582707 * CHpar - 9.439077589411124 * C6par * CHpar + 24.15741462072724 * CHpar2)

            +(17.415132210246643 * pow(1. * C6par2 + C6par * (-0.9426311765101452 - 12.02751732743764 * CHpar) + CHpar * (6.014890971256063 + 42.84032267422174 * CHpar), 2))
            / (0.6631618979282716 - 0.9426311765101452 * C6par + 1. * C6par2 + 6.014890971256063 * CHpar - 12.02751732743764 * C6par * CHpar + 42.84032267422174 * CHpar2)

            +(6.944583304323103 * pow(1. * C6par2 + C6par * (-5.605076514786612 - 13.252038744875035 * CHpar) + CHpar * (48.34152435283824 + 121.88758552653347 * CHpar), 2))
            / (25.260881616043218 - 5.605076514786612 * C6par + 1. * C6par2 + 48.34152435283824 * CHpar - 13.252038744875035 * C6par * CHpar + 121.88758552653347 * CHpar2)

            +(46.448610091340626 * pow(1. * C6par2 + C6par * (-1.2424251681131542 - 29.069979810624 * CHpar) + CHpar * (20.05311500484323 + 244.02853953273825 * CHpar), 2))
            / (1.021577814150124 - 1.2424251681131542 * C6par + 1. * C6par2 + 20.05311500484323 * CHpar - 29.069979810624 * C6par * CHpar + 244.02853953273825 * CHpar2)

            +(0.5697696171204448 * pow(1. * C6par2 + C6par * (-1.618811231931265 - 48.52495426623116 * CHpar) + CHpar * (33.85929443804542 + 548.5965053951562 * CHpar), 2))
            / (2.3283968809253617 - 1.618811231931265 * C6par + 1. * C6par2 + 33.85929443804542 * CHpar - 48.52495426623116 * C6par * CHpar + 548.5965053951562 * CHpar2)

            +(0.16515061365809997 * pow(1. * C6par2 + C6par * (-8.53845097380669 - 36.0850764145878 * CHpar) + CHpar * (264.5920285845332 + 746.011160256333 * CHpar), 2))
            / (102.43592556954773 - 8.53845097380669 * C6par + 1. * C6par2 + 264.5920285845332 * CHpar - 36.0850764145878 * C6par * CHpar + 746.011160256333 * CHpar2)

            +(2.956195984479989 * pow(1. * C6par2 + C6par * (-3.780066837776757 - 72.47419413608488 * CHpar) + CHpar * (176.93458387556797 + 1683.271612372297 * CHpar), 2))
            / (10.551295181010284 - 3.780066837776757 * C6par + 1. * C6par2 + 176.93458387556797 * CHpar - 72.47419413608488 * C6par * CHpar + 1683.271612372297 * CHpar2)

            +(17.483420030138998 * pow(1. * C6par2 + C6par * (-1.6021946315041684 - 148.43576718278595 * CHpar) + CHpar * (140.6006415722798 + 10716.660108216498 * CHpar), 2))
            / (1.8226825772967126 - 1.6021946315041684 * C6par + 1. * C6par2 + 140.6006415722798 * CHpar - 148.43576718278595 * C6par * CHpar + 10716.660108216498 * CHpar2);
    //}

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);

}

const double NPSMEFTd6General::AuxObs_NP23() const {
    // LHC FB asymmetry in Drell Yan. We use the results in Eq. (4.11) from
    // arXiv: 2103.12074 [hep-ph] to construct the linear SMEFT chi square

    double xpEFT, ypEFT, zpEFT, tpEFT;
    double Chi2Tot;

    double dgZuL, dgZuR, dgZdL, dgZdR;

    dgZuL = deltaGL_f(quarks[UP]);
    dgZuR = deltaGR_f(quarks[UP]);
    dgZdL = deltaGL_f(quarks[DOWN]);
    dgZdR = deltaGR_f(quarks[DOWN]);

    xpEFT = 0.21 * dgZuL + 0.19 * dgZuR + 0.46 * dgZdL + 0.84 * dgZdR;
    ypEFT = 0.03 * dgZuL - 0.07 * dgZuR - 0.87 * dgZdL + 0.49 * dgZdR;
    zpEFT = 0.83 * dgZuL - 0.54 * dgZuR + 0.02 * dgZdL - 0.10 * dgZdR;
    tpEFT = 0.51 * dgZuL + 0.82 * dgZuR - 0.17 * dgZdL - 0.22 * dgZdR;

    // Substract the central values
    xpEFT = xpEFT + 10.;
    xpEFT = xpEFT - 0.5;
    xpEFT = xpEFT - 0.04;
    xpEFT = xpEFT + 0.001;


    // Add the different (uncorrelated) contributions to the chi square
    Chi2Tot = xpEFT * xpEFT / 4. / 4. + ypEFT * ypEFT / 0.4 / 0.4
            + zpEFT * zpEFT / 0.06 / 0.06 + tpEFT * tpEFT / 0.005 / 0.005;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);

}

const double NPSMEFTd6General::AuxObs_NP24() const {
    // To be used for some temporary observable
    return 0.0;
}

const double NPSMEFTd6General::AuxObs_NP25() const {
    // To be used for some temporary observable
    return 0.0;
}

const double NPSMEFTd6General::AuxObs_NP26() const {
    // To be used for some temporary observable
    return 0.0;
}

const double NPSMEFTd6General::AuxObs_NP27() const {
    // To be used for some temporary observable
    return 0.0;
}

const double NPSMEFTd6General::AuxObs_NP28() const {
    // To be used for some temporary observable
    return 0.0;
}

const double NPSMEFTd6General::AuxObs_NP29() const {
    // To be used for some temporary observable
    return 0.0;
}

const double NPSMEFTd6General::AuxObs_NP30() const {
    // To be used for some temporary observable
    return 0.0;
}

///////////////////////////////////////////////////////////////////////////////
// e+ e- -> f f observables away from the Z pole
///////////////////////////////////////////////////////////////////////////////

const double NPSMEFTd6General::CeeLL_e(const double mu) const {
    return 2.0 * (getSMEFTCoeff("CllR", 0, 0, 0, 0, mu));
}

const double NPSMEFTd6General::CeeLL_mu(const double mu) const {
    return 2.0 * (getSMEFTCoeff("CllR", 0, 0, 1, 1, mu) + getSMEFTCoeff("CllR", 0, 1, 1, 0, mu));
}

const double NPSMEFTd6General::CeeLL_tau(const double mu) const {
    return 2.0 * (getSMEFTCoeff("CllR", 0, 0, 2, 2, mu) + getSMEFTCoeff("CllR", 0, 2, 2, 0, mu));
}

const double NPSMEFTd6General::CeeLL_up(const double mu) const {
    return (getSMEFTCoeff("Clq1R", 0, 0, 0, 0, mu) - getSMEFTCoeff("Clq3R", 0, 0, 0, 0, mu));
}

const double NPSMEFTd6General::CeeLL_charm(const double mu) const {
    return (getSMEFTCoeff("Clq1R", 0, 0, 1, 1, mu) - getSMEFTCoeff("Clq3R", 0, 0, 1, 1, mu));
}

const double NPSMEFTd6General::CeeLL_top(const double mu) const {
    return (getSMEFTCoeff("Clq1R", 0, 0, 2, 2, mu) - getSMEFTCoeff("Clq3R", 0, 0, 2, 2, mu));
}

const double NPSMEFTd6General::CeeLL_down(const double mu) const {
    return (getSMEFTCoeff("Clq1R", 0, 0, 0, 0, mu) + getSMEFTCoeff("Clq3R", 0, 0, 0, 0, mu));
}

const double NPSMEFTd6General::CeeLL_strange(const double mu) const {
    return (getSMEFTCoeff("Clq1R", 0, 0, 1, 1, mu) + getSMEFTCoeff("Clq3R", 0, 0, 1, 1, mu));
}

const double NPSMEFTd6General::CeeLL_bottom(const double mu) const {
    return (getSMEFTCoeff("Clq1R", 0, 0, 2, 2, mu) + getSMEFTCoeff("Clq3R", 0, 0, 2, 2, mu));
}

const double NPSMEFTd6General::CeeLR_e(const double mu) const {
    return (getSMEFTCoeff("CleR", 0, 0, 0, 0, mu));
}

const double NPSMEFTd6General::CeeLR_mu(const double mu) const {
    return (getSMEFTCoeff("CleR", 0, 0, 1, 1, mu));
}

const double NPSMEFTd6General::CeeLR_tau(const double mu) const {
    return (getSMEFTCoeff("CleR", 0, 0, 2, 2, mu));
}

const double NPSMEFTd6General::CeeLR_up(const double mu) const {
    return (getSMEFTCoeff("CluR", 0, 0, 0, 0, mu));
}

const double NPSMEFTd6General::CeeLR_charm(const double mu) const {
    return (getSMEFTCoeff("CluR", 0, 0, 1, 1, mu));
}

const double NPSMEFTd6General::CeeLR_top(const double mu) const {
    return (getSMEFTCoeff("CluR", 0, 0, 2, 2, mu));
}

const double NPSMEFTd6General::CeeLR_down(const double mu) const {
    return (getSMEFTCoeff("CldR", 0, 0, 0, 0, mu));
}

const double NPSMEFTd6General::CeeLR_strange(const double mu) const {
    return (getSMEFTCoeff("CldR", 0, 0, 1, 1, mu));
}

const double NPSMEFTd6General::CeeLR_bottom(const double mu) const {
    return (getSMEFTCoeff("CldR", 0, 0, 2, 2, mu));
}

const double NPSMEFTd6General::CeeRL_e(const double mu) const {
    // Same as LR by definition
    return CeeLR_e(mu);
}

const double NPSMEFTd6General::CeeRL_mu(const double mu) const {
    return (getSMEFTCoeff("CleR", 1, 1, 0, 0, mu));
}

const double NPSMEFTd6General::CeeRL_tau(const double mu) const {
    return (getSMEFTCoeff("CleR", 2, 2, 0, 0, mu));
}

const double NPSMEFTd6General::CeeRL_up(const double mu) const {
    return (getSMEFTCoeff("CqeR", 0, 0, 0, 0, mu));
}

const double NPSMEFTd6General::CeeRL_charm(const double mu) const {
    return (getSMEFTCoeff("CqeR", 1, 1, 0, 0, mu));
}

const double NPSMEFTd6General::CeeRL_top(const double mu) const {
    return (getSMEFTCoeff("CqeR", 2, 2, 0, 0, mu));
}

const double NPSMEFTd6General::CeeRL_down(const double mu) const {
    return (getSMEFTCoeff("CqeR", 0, 0, 0, 0, mu));
}

const double NPSMEFTd6General::CeeRL_strange(const double mu) const {
    return (getSMEFTCoeff("CqeR", 1, 1, 0, 0, mu));
}

const double NPSMEFTd6General::CeeRL_bottom(const double mu) const {
    return (getSMEFTCoeff("CqeR", 2, 2, 0, 0, mu));
}

const double NPSMEFTd6General::CeeRR_e(const double mu) const {
    return 2.0 * (getSMEFTCoeff("CeeR", 0, 0, 0, 0, mu));
}

const double NPSMEFTd6General::CeeRR_mu(const double mu) const {
    return 4.0 * (getSMEFTCoeff("CeeR", 0, 0, 1, 1, mu));
}

const double NPSMEFTd6General::CeeRR_tau(const double mu) const {
    return 4.0 * (getSMEFTCoeff("CeeR", 0, 0, 2, 2, mu));
}

const double NPSMEFTd6General::CeeRR_up(const double mu) const {
    return (getSMEFTCoeff("CeuR", 0, 0, 0, 0, mu));
}

const double NPSMEFTd6General::CeeRR_charm(const double mu) const {
    return (getSMEFTCoeff("CeuR", 0, 0, 1, 1, mu));
}

const double NPSMEFTd6General::CeeRR_top(const double mu) const {
    return (getSMEFTCoeff("CeuR", 0, 0, 2, 2, mu));
}

const double NPSMEFTd6General::CeeRR_down(const double mu) const {
    return (getSMEFTCoeff("CedR", 0, 0, 0, 0, mu));
}

const double NPSMEFTd6General::CeeRR_strange(const double mu) const {
    return (getSMEFTCoeff("CedR", 0, 0, 1, 1, mu));
}

const double NPSMEFTd6General::CeeRR_bottom(const double mu) const {
    return (getSMEFTCoeff("CedR", 0, 0, 2, 2, mu));
}

const double NPSMEFTd6General::deltaMLR2_f(const Particle f, const double s) const {
    // Definitions      
    double Qf, geSM, gfSM, deltage, deltagf, deltaGammaZ, is2c2;

    double muRG;
    
    // Four-fermion contribution
    double Aeeff;

    // Propagator
    gslpp::complex propZ, propZc;

    // Correction to amplitude
    gslpp::complex deltaM2a, deltaM2b, deltaM2;

    // -------------------------------------------
    
    muRG = sqrt(s);

    geSM = gZlL;
    deltage = deltaGL_f_mu(leptons[ELECTRON], muRG);

    is2c2 = 1. / sW2_tree / cW2_tree;

    switch(f.getIndex()){
    //if (f.is("ELECTRON")) {
        case 1:
        Aeeff = CeeLR_e(muRG);
        Qf = leptons[ELECTRON].getCharge();
        gfSM = gZlR;
        deltagf = deltaGR_f_mu(leptons[ELECTRON], muRG);
        break;
    //} else if (f.is("MU")) {
        case 3:
        Aeeff = CeeLR_mu(muRG);
        Qf = leptons[ELECTRON].getCharge();
        gfSM = gZlR;
        deltagf = deltaGR_f_mu(leptons[MU], muRG);
        break;
    //} else if (f.is("TAU")) {
        case 5:
        Aeeff = CeeLR_tau(muRG);
        Qf = leptons[ELECTRON].getCharge();
        gfSM = gZlR;
        deltagf = deltaGR_f_mu(leptons[TAU], muRG);
        break;
    //} else if (f.is("UP")) {
        case 6:
        Aeeff = CeeLR_up(muRG);
        Qf = quarks[UP].getCharge();
        gfSM = gZuR;
        deltagf = deltaGR_f_mu(quarks[UP], muRG);
        break;
    //} else if (f.is("CHARM")) {
        case 8:
        Aeeff = CeeLR_charm(muRG);
        Qf = quarks[UP].getCharge();
        gfSM = gZuR;
        deltagf = deltaGR_f_mu(quarks[CHARM], muRG);
        break;
    //} else if (f.is("DOWN")) {
        case 7:
        Aeeff = CeeLR_down(muRG);
        Qf = quarks[DOWN].getCharge();
        gfSM = gZdR;
        deltagf = deltaGR_f_mu(quarks[DOWN], muRG);
        break;
    //} else if (f.is("STRANGE")) {
        case 9:
        Aeeff = CeeLR_strange(muRG);
        Qf = quarks[DOWN].getCharge();
        gfSM = gZdR;
        deltagf = deltaGR_f_mu(quarks[STRANGE], muRG);
        break;
    //} else if (f.is("BOTTOM")) {
        case 11:
        Aeeff = CeeLR_bottom(muRG);
        Qf = quarks[DOWN].getCharge();
        gfSM = gZdR;
        deltagf = deltaGR_f_mu(quarks[BOTTOM], muRG);
        break;
    //} else
        default:
        throw std::runtime_error("NPSMEFTd6General::deltaMLR2_f(): wrong argument");
    }

    // Add the remaining factors that enter with the four-fermion operator
    Aeeff = Aeeff * s / (4. * M_PI * trueSM.alphaMz());

    deltaGammaZ = deltaGamma_Z();

    // -------------------------------------------

    propZ = s / (s - Mz * Mz - Mz * trueSM.Gamma_Z() * (gslpp::complex::i()));

    propZc = propZ.conjugate();

    deltaM2a = (-Qf + is2c2 * geSM * gfSM * propZ);

    deltaM2b = -Qf * delta_em + Aeeff
            + is2c2 * (geSM * deltagf + gfSM * deltage) * propZc
            - (gslpp::complex::i()) * is2c2 * geSM * gfSM * Mz * deltaGammaZ * propZc * propZc / s;

    deltaM2 = deltaM2a * deltaM2b;

    return 2.0 * deltaM2.real();

}

const double NPSMEFTd6General::deltaMRL2_f(const Particle f, const double s) const {
    // Definitions      
    double Qf, geSM, gfSM, deltage, deltagf, deltaGammaZ, is2c2;
    
    double muRG;

    // Four-fermion contribution
    double Aeeff;

    // Propagator
    gslpp::complex propZ, propZc;

    // Correction to amplitude
    gslpp::complex deltaM2a, deltaM2b, deltaM2;

    // -------------------------------------------
    
    muRG = sqrt(s);

    geSM = gZlR;
    deltage = deltaGR_f_mu(leptons[ELECTRON], muRG);

    is2c2 = 1. / sW2_tree / cW2_tree;

    switch(f.getIndex()){
    //if (f.is("ELECTRON")) {
        case 1:
        Aeeff = CeeRL_e(muRG);
        Qf = leptons[ELECTRON].getCharge();
        gfSM = gZlL;
        deltagf = deltaGL_f_mu(leptons[ELECTRON], muRG);
        break;
    //} else if (f.is("MU")) {
        case 3:
        Aeeff = CeeRL_mu(muRG);
        Qf = leptons[ELECTRON].getCharge();
        gfSM = gZlL;
        deltagf = deltaGL_f_mu(leptons[MU], muRG);
        break;
    //} else if (f.is("TAU")) {
        case 5:
        Aeeff = CeeRL_tau(muRG);
        Qf = leptons[ELECTRON].getCharge();
        gfSM = gZlL;
        deltagf = deltaGL_f_mu(leptons[TAU], muRG);
        break;
    //} else if (f.is("UP")) {
        case 6:
        Aeeff = CeeRL_up(muRG);
        Qf = quarks[UP].getCharge();
        gfSM = gZuL;
        deltagf = deltaGL_f_mu(quarks[UP], muRG);
        break;
    //} else if (f.is("CHARM")) {
        case 8:
        Aeeff = CeeRL_charm(muRG);
        Qf = quarks[UP].getCharge();
        gfSM = gZuL;
        deltagf = deltaGL_f_mu(quarks[CHARM], muRG);
        break;
    //} else if (f.is("DOWN")) {
        case 7:
        Aeeff = CeeRL_down(muRG);
        Qf = quarks[DOWN].getCharge();
        gfSM = gZdL;
        deltagf = deltaGL_f_mu(quarks[DOWN], muRG);
        break;
    //} else if (f.is("STRANGE")) {
        case 9:
        Aeeff = CeeRL_strange(muRG);
        Qf = quarks[DOWN].getCharge();
        gfSM = gZdL;
        deltagf = deltaGL_f_mu(quarks[STRANGE], muRG);
        break;
    //} else if (f.is("BOTTOM")) {
        case 11:
        Aeeff = CeeRL_bottom(muRG);
        Qf = quarks[DOWN].getCharge();
        gfSM = gZdL;
        deltagf = deltaGL_f_mu(quarks[BOTTOM], muRG);
        break;
    //} else
        default:
        throw std::runtime_error("NPSMEFTd6General::deltaMRL2_f(): wrong argument");
    }

    // Add the remaining factors that enter with the four-fermion operator
    Aeeff = Aeeff * s / (4. * M_PI * trueSM.alphaMz());

    deltaGammaZ = deltaGamma_Z();

    // -------------------------------------------

    propZ = s / (s - Mz * Mz - Mz * trueSM.Gamma_Z() * (gslpp::complex::i()));

    propZc = propZ.conjugate();

    deltaM2a = (-Qf + is2c2 * geSM * gfSM * propZ);

    deltaM2b = -Qf * delta_em + Aeeff
            + is2c2 * (geSM * deltagf + gfSM * deltage) * propZc
            - (gslpp::complex::i()) * is2c2 * geSM * gfSM * Mz * deltaGammaZ * propZc * propZc / s;

    deltaM2 = deltaM2a * deltaM2b;

    return 2.0 * deltaM2.real();

}

const double NPSMEFTd6General::deltaMLR2t_e(const double s, const double t) const {
    // Definitions      
    double Qf, geSM, gfSM, deltage, deltagf, is2c2;
    
    // RG scale of the process
    double muRG;

    // Four-fermion contribution
    double Aeeff;

    // t-channel propagator
    double propZ;

    // Correction to amplitude
    double deltaM2a, deltaM2b, deltaM2;

    // -------------------------------------------
    
    muRG = sqrt(s);

    geSM = gZlL;
    deltage = deltaGL_f_mu(leptons[ELECTRON], muRG);

    is2c2 = 1. / sW2_tree / cW2_tree;

    Aeeff = CeeLR_e(muRG);
    Qf = leptons[ELECTRON].getCharge();
    gfSM = gZlR;
    deltagf = deltaGR_f_mu(leptons[ELECTRON], muRG);

    // Add the remaining factors that enter with the four-fermion operator
    Aeeff = Aeeff * t / (4. * M_PI * trueSM.alphaMz());

    // -------------------------------------------

    propZ = t / (t - Mz * Mz);

    deltaM2a = (-Qf + is2c2 * geSM * gfSM * propZ);

    deltaM2b = -Qf * delta_em + Aeeff
            + is2c2 * (geSM * deltagf + gfSM * deltage) * propZ;

    deltaM2 = deltaM2a * deltaM2b;

    return 2.0 * deltaM2;

}

const double NPSMEFTd6General::deltaMRL2t_e(const double s, const double t) const {
    return deltaMLR2t_e(s, t);
}

const double NPSMEFTd6General::deltaMLL2_f(const Particle f, const double s, const double t) const {
    // Definitions      
    double Qf, geSM, gfSM, deltage, deltagf, deltaGammaZ, is2c2;
    
    // RG scale of the process
    double muRG;

    // Four-fermion contribution
    double Aeeff;

    // Propagator
    gslpp::complex propZ, propZc;
    double propZt;

    // Correction to amplitude
    gslpp::complex deltaM2a, deltaM2b, deltaM2;

    // -------------------------------------------
    
    muRG = sqrt(s);

    geSM = gZlL;
    deltage = deltaGL_f_mu(leptons[ELECTRON], muRG);

    is2c2 = 1. / sW2_tree / cW2_tree;

    switch(f.getIndex()){
    //if (f.is("ELECTRON")) {
        case 1:
        Aeeff = 2.0 * CeeLL_e(muRG);
        Qf = leptons[ELECTRON].getCharge();
        gfSM = gZlL;
        deltagf = deltaGL_f_mu(leptons[ELECTRON], muRG);
        break;
    //} else if (f.is("MU")) {
        case 3:
        Aeeff = CeeLL_mu(muRG);
        Qf = leptons[ELECTRON].getCharge();
        gfSM = gZlL;
        deltagf = deltaGL_f_mu(leptons[MU], muRG);
        break;
    //} else if (f.is("TAU")) {
        case 5:
        Aeeff = CeeLL_tau(muRG);
        Qf = leptons[ELECTRON].getCharge();
        gfSM = gZlL;
        deltagf = deltaGL_f_mu(leptons[TAU], muRG);
        break;
    //} else if (f.is("UP")) {
        case 6:
        Aeeff = CeeLL_up(muRG);
        Qf = quarks[UP].getCharge();
        gfSM = gZuL;
        deltagf = deltaGL_f_mu(quarks[UP], muRG);
        break;
    //} else if (f.is("CHARM")) {
        case 8:
        Aeeff = CeeLL_charm(muRG);
        Qf = quarks[UP].getCharge();
        gfSM = gZuL;
        deltagf = deltaGL_f_mu(quarks[CHARM], muRG);
        break;
    //} else if (f.is("DOWN")) {
        case 7:
        Aeeff = CeeLL_down(muRG);
        Qf = quarks[DOWN].getCharge();
        gfSM = gZdL;
        deltagf = deltaGL_f_mu(quarks[DOWN], muRG);
        break;
    //} else if (f.is("STRANGE")) {
        case 9:
        Aeeff = CeeLL_strange(muRG);
        Qf = quarks[DOWN].getCharge();
        gfSM = gZdL;
        deltagf = deltaGL_f_mu(quarks[STRANGE], muRG);
        break;
    //} else if (f.is("BOTTOM")) {
        case 11:
        Aeeff = CeeLL_bottom(muRG);
        Qf = quarks[DOWN].getCharge();
        gfSM = gZdL;
        deltagf = deltaGL_f_mu(quarks[BOTTOM], muRG);
        break;
        default:
        throw std::runtime_error("NPSMEFTd6General::deltaMLL2_f(): wrong argument");
    }

    // Add the remaining factors that enter with the four-fermion operator
    Aeeff = Aeeff * s / (4. * M_PI * trueSM.alphaMz());

    deltaGammaZ = deltaGamma_Z();

    // -------------------------------------------

    propZ = s / (s - Mz * Mz - Mz * trueSM.Gamma_Z() * (gslpp::complex::i()));

    propZc = propZ.conjugate();

    propZt = s / (t - Mz * Mz);

    deltaM2a = (-Qf + is2c2 * geSM * gfSM * propZ);

    deltaM2b = -Qf * delta_em + Aeeff
            + is2c2 * (geSM * deltagf + gfSM * deltage) * propZc
            - (gslpp::complex::i()) * is2c2 * geSM * gfSM * Mz * deltaGammaZ * propZc * propZc / s;

    // Add t-channel contributions for f=e
    if (f.is("ELECTRON")) {
        deltaM2a = deltaM2a + is2c2 * geSM * gfSM * propZt + s / t;
        deltaM2b = deltaM2b + is2c2 * (geSM * deltagf + gfSM * deltage) * propZt;
    }

    deltaM2 = deltaM2a * deltaM2b;

    return 2.0 * deltaM2.real();

}

const double NPSMEFTd6General::deltaMRR2_f(const Particle f, const double s, const double t) const {
    // Definitions      
    double Qf, geSM, gfSM, deltage, deltagf, deltaGammaZ, is2c2;
    
    // RG scale of the process
    double muRG;

    // Four-fermion contribution
    double Aeeff;

    // Propagator
    gslpp::complex propZ, propZc;
    double propZt;

    // Correction to amplitude
    gslpp::complex deltaM2a, deltaM2b, deltaM2;

    // -------------------------------------------
    
    muRG = sqrt(s);

    geSM = gZlR;
    deltage = deltaGR_f_mu(leptons[ELECTRON], muRG);

    is2c2 = 1. / sW2_tree / cW2_tree;

    switch(f.getIndex()){
    //if (f.is("ELECTRON")) {
        case 1:
        Aeeff = 2.0 * CeeRR_e(muRG);
        Qf = leptons[ELECTRON].getCharge();
        gfSM = gZlR;
        deltagf = deltaGR_f_mu(leptons[ELECTRON], muRG);
        break;
    //} else if (f.is("MU")) {
        case 3:
        Aeeff = CeeRR_mu(muRG);
        Qf = leptons[ELECTRON].getCharge();
        gfSM = gZlR;
        deltagf = deltaGR_f_mu(leptons[MU], muRG);
        break;
    //} else if (f.is("TAU")) {
        case 5:
        Aeeff = CeeRR_tau(muRG);
        Qf = leptons[ELECTRON].getCharge();
        gfSM = gZlR;
        deltagf = deltaGR_f_mu(leptons[TAU], muRG);
        break;
    //} else if (f.is("UP")) {
        case 6:
        Aeeff = CeeRR_up(muRG);
        Qf = quarks[UP].getCharge();
        gfSM = gZuR;
        deltagf = deltaGR_f_mu(quarks[UP], muRG);
        break;
    //} else if (f.is("CHARM")) {
        case 8:
        Aeeff = CeeRR_charm(muRG);
        Qf = quarks[UP].getCharge();
        gfSM = gZuR;
        deltagf = deltaGR_f_mu(quarks[CHARM], muRG);
        break;
    //} else if (f.is("DOWN")) {
        case 7:
        Aeeff = CeeRR_down(muRG);
        Qf = quarks[DOWN].getCharge();
        gfSM = gZdR;
        deltagf = deltaGR_f_mu(quarks[DOWN], muRG);
        break;
    //} else if (f.is("STRANGE")) {
        case 9:
        Aeeff = CeeRR_strange(muRG);
        Qf = quarks[DOWN].getCharge();
        gfSM = gZdR;
        deltagf = deltaGR_f_mu(quarks[STRANGE], muRG);
        break;
    //} else if (f.is("BOTTOM")) {
        case 11:
        Aeeff = CeeRR_bottom(muRG);
        Qf = quarks[DOWN].getCharge();
        gfSM = gZdR;
        deltagf = deltaGR_f_mu(quarks[BOTTOM], muRG);
        break;
        default:
        throw std::runtime_error("NPSMEFTd6General::deltaMRR2_f(): wrong argument");
    }

    // Add the remaining factors that enter with the four-fermion operator
    Aeeff = Aeeff * s / (4. * M_PI * trueSM.alphaMz());

    deltaGammaZ = deltaGamma_Z();

    // -------------------------------------------

    propZ = s / (s - Mz * Mz - Mz * trueSM.Gamma_Z() * (gslpp::complex::i()));

    propZc = propZ.conjugate();

    propZt = s / (t - Mz * Mz);

    deltaM2a = (-Qf + is2c2 * geSM * gfSM * propZ);

    deltaM2b = -Qf * delta_em + Aeeff
            + is2c2 * (geSM * deltagf + gfSM * deltage) * propZc
            - (gslpp::complex::i()) * is2c2 * geSM * gfSM * Mz * deltaGammaZ * propZc * propZc / s;

    // Add t-channel contributions for f=e
    //if (f.is("ELECTRON")) {
    if ( f.getIndex() == 1 ) {
        deltaM2a = deltaM2a + is2c2 * geSM * gfSM * propZt + s / t;
        deltaM2b = deltaM2b + is2c2 * (geSM * deltagf + gfSM * deltage) * propZt;
    }

    deltaM2 = deltaM2a * deltaM2b;

    return 2.0 * deltaM2.real();

}

//  Some simple functions for cos \theta integrals 

const double NPSMEFTd6General::tovers2(const double cosmin, const double cosmax) const {
    return 0.25 * (cosmax * (1.0 - cosmax * (1.0 - cosmax / 3.0)) - cosmin * (1.0 - cosmin * (1.0 - cosmin / 3.0)));
}

const double NPSMEFTd6General::uovers2(const double cosmin, const double cosmax) const {
    return 0.25 * (cosmax * (1.0 + cosmax * (1.0 + cosmax / 3.0)) - cosmin * (1.0 + cosmin * (1.0 + cosmin / 3.0)));
}

const double NPSMEFTd6General::delta_Dsigma_f(const Particle f, const double pol_e, const double pol_p, const double s, const double cos) const {
    double sumM2, dsigma;
    double topb = 0.3894e+9;

    double t, u;

    double Nf;
    
    double pLH, pRH; //Polarization factors, minus the 1/4 average
    double pLLH, pRRH; 
    
    pLH = (1.0 - pol_e) * (1.0 + pol_p);
    pRH = (1.0 + pol_e) * (1.0 - pol_p);
    
    pLLH = (1.0 - pol_e) * (1.0 - pol_p);
    pRRH = (1.0 + pol_e) * (1.0 + pol_p);

    //if (f.is("LEPTON")) {
    if ( f.getIndex() < 6 ) {
        Nf = 1.0;
    } else {
        Nf = 3.0;
    }

    // Values of t and u, assuming massless final state fermions
    t = -0.5 * s * (1.0 - cos);
    u = -0.5 * s * (1.0 + cos);

    sumM2 = (pLH * deltaMLR2_f(f, s) + pRH * deltaMRL2_f(f, s)) * t * t / s / s
            + (pLH * deltaMLL2_f(f, s, t) + pRH * deltaMRR2_f(f, s, t)) * u * u / s / s;

    // Add t-channel contributions for f=e
    //if (f.is("ELECTRON")) {
    if ( f.getIndex() == 1 ) {
        sumM2 = sumM2 + (pLLH * deltaMLR2t_e(s,t) + pRRH * deltaMRL2t_e(s,t)) * s * s / t / t;
    }

    dsigma = Nf * 0.5 * M_PI * (trueSM.alphaMz())*(trueSM.alphaMz()) * sumM2 / s;

    return topb * dsigma;
}

const double NPSMEFTd6General::delta_sigma_f(const Particle f, const double pol_e, const double pol_p, const double s, const double cosmin, const double cosmax) const {
    //  Only valid for f=/=e (MLL2, MRR2 do not depend on t for f=/=e. Simply enter t=1 as argument)
    double sumM2, dsigma;
    double tdumm = 1.;
    double topb = 0.3894e+9;

    double Nf;
    
    double pLH, pRH; //Polarization factors, minus the 1/4 average
    
    pLH = (1.0 - pol_e) * (1.0 + pol_p);
    pRH = (1.0 + pol_e) * (1.0 - pol_p);

    //if (f.is("LEPTON")) {
    if ( f.getIndex() < 6 ) {
        Nf = 1.0;
    } else {
        Nf = 3.0;
    }

    sumM2 = (pLH * deltaMLR2_f(f, s) + pRH * deltaMRL2_f(f, s)) * tovers2(cosmin, cosmax)
            + (pLH * deltaMLL2_f(f, s, tdumm) + pRH * deltaMRR2_f(f, s, tdumm)) * uovers2(cosmin, cosmax);

    dsigma = Nf * 0.5 * M_PI * (trueSM.alphaMz())*(trueSM.alphaMz()) * sumM2 / s;

    return topb * dsigma;
}

const double NPSMEFTd6General::delta_sigma_had(const double pol_e, const double pol_p, const double s, const double cosmin, const double cosmax) const {
    double dsigma;

    dsigma = delta_sigma_f(quarks[UP], pol_e, pol_p, s, cosmin, cosmax) + delta_sigma_f(quarks[DOWN], pol_e, pol_p, s, cosmin, cosmax)
            + delta_sigma_f(quarks[CHARM], pol_e, pol_p, s, cosmin, cosmax) + delta_sigma_f(quarks[STRANGE], pol_e, pol_p, s, cosmin, cosmax)
            + delta_sigma_f(quarks[BOTTOM], pol_e, pol_p, s, cosmin, cosmax);

    return dsigma;
}

const double NPSMEFTd6General::delta_sigmaTot_f(const Particle f, const double pol_e, const double pol_p, const double s) const {
    return delta_sigma_f(f, pol_e, pol_p, s, -1., 1.);
}

const double NPSMEFTd6General::delta_AFB_f(const Particle f, const double pol_e, const double pol_p, const double s) const {
    //  Only valid for f=/=e (MLL2, MRR2 do not depend on t for f=/=e. Simply enter t=1 as argument)
    double tdumm = 1.;

    // Definitions      
    double Qf, geLSM, gfLSM, geRSM, gfRSM, is2c2, GZ, Mz2s;

    //double MXX2SM, MXY2SM, M2SM;
    
    double MLR2SM, MRL2SM, MLL2SM, MRR2SM, numdA, dendA;

    double dAFB;
    
    double pLH, pRH; //Polarization factors, minus the 1/4 average
    
    pLH = (1.0 - pol_e) * (1.0 + pol_p);
    pRH = (1.0 + pol_e) * (1.0 - pol_p);

    // -------------------------------------------

    geLSM = gZlL;
    geRSM = gZlR;

    is2c2 = 1. / sW2_tree / cW2_tree;

    GZ = trueSM.Gamma_Z();

    Mz2s = Mz * Mz - s;

    switch(f.getIndex()){
    //if (f.is("MU")) {
        case 3:
        Qf = leptons[ELECTRON].getCharge();
        gfLSM = gZlL;
        gfRSM = gZlR;
        break;
    //} else if (f.is("TAU")) {
        case 5:
        Qf = leptons[ELECTRON].getCharge();
        gfLSM = gZlL;
        gfRSM = gZlR;
        break;
    //} else if (f.is("UP")) {
        case 6:
        Qf = quarks[UP].getCharge();
        gfLSM = gZuL;
        gfRSM = gZuR;
        break;
    //} else if (f.is("CHARM")) {
        case 8:
        Qf = quarks[UP].getCharge();
        gfLSM = gZuL;
        gfRSM = gZuR;
        break;
    //} else if (f.is("DOWN")) {
        case 7:
        Qf = quarks[DOWN].getCharge();
        gfLSM = gZdL;
        gfRSM = gZdR;
        break;
    //} else if (f.is("STRANGE")) {
        case 9:
        Qf = quarks[DOWN].getCharge();
        gfLSM = gZdL;
        gfRSM = gZdR;
        break;
    //} else if (f.is("BOTTOM")) {
        case 11:
        Qf = quarks[DOWN].getCharge();
        gfLSM = gZdL;
        gfRSM = gZdR;
        break;
        default:            
        throw std::runtime_error("NPSMEFTd6General::delta_AFB_f(): wrong argument");
    }

    // Sum of LL and RR SM amplitudes
    //MXX2SM = 2.0 * Qf * Qf
    //        + (is2c2 * is2c2 * (geLSM * geLSM * gfLSM * gfLSM + geRSM * geRSM * gfRSM * gfRSM) * s * s
    //        + 2.0 * Qf * is2c2 * (geLSM * gfLSM + geRSM * gfRSM) * Mz2s * s) / (Mz2s * Mz2s + Mz * Mz * GZ * GZ);


    // Sum of LR and RL SM amplitudes
    //MXY2SM = 2.0 * Qf * Qf
    //        + (is2c2 * is2c2 * (geLSM * geLSM * gfRSM * gfRSM + geRSM * geRSM * gfLSM * gfLSM) * s * s
    //        + 2.0 * Qf * is2c2 * (geLSM * gfRSM + geRSM * gfLSM) * Mz2s * s) / (Mz2s * Mz2s + Mz * Mz * GZ * GZ);

    // Full SM amplitude
    //M2SM = MXX2SM + MXY2SM;
    
    // LR, RL, LL and RR SM squared amplitudes
    MLR2SM = Qf * Qf
            + (is2c2 * is2c2 * (geLSM * geLSM * gfRSM * gfRSM) * s * s
            + 2.0 * Qf * is2c2 * (geLSM * gfRSM) * Mz2s * s) / (Mz2s * Mz2s + Mz * Mz * GZ * GZ);
    
    MRL2SM = Qf * Qf
            + (is2c2 * is2c2 * (geRSM * geRSM * gfLSM * gfLSM) * s * s
            + 2.0 * Qf * is2c2 * (geRSM * gfLSM) * Mz2s * s) / (Mz2s * Mz2s + Mz * Mz * GZ * GZ); 
    
    MLL2SM = Qf * Qf
            + (is2c2 * is2c2 * (geLSM * geLSM * gfLSM * gfLSM) * s * s
            + 2.0 * Qf * is2c2 * (geLSM * gfLSM) * Mz2s * s) / (Mz2s * Mz2s + Mz * Mz * GZ * GZ); 
    
    MRR2SM = Qf * Qf
            + (is2c2 * is2c2 * (geRSM * geRSM * gfRSM * gfRSM) * s * s
            + 2.0 * Qf * is2c2 * (geRSM * gfRSM) * Mz2s * s) / (Mz2s * Mz2s + Mz * Mz * GZ * GZ); 
    
    numdA = 3.0 * ( -( MRR2SM * pRH + MLL2SM * pLH ) * ( pLH * deltaMLR2_f(f, s) + pRH * deltaMRL2_f(f, s) ) 
            + ( MRL2SM * pRH + MLR2SM * pLH ) * ( pLH * deltaMLL2_f(f, s, tdumm) + pRH * deltaMRR2_f(f, s, tdumm) ) );
            
    dendA = ((MRL2SM + MRR2SM) * pRH + (MLL2SM + MLR2SM) * pLH);
    
    dendA = 2.0 * dendA * dendA;
    
    // Asymmetry correction 
    //dAFB = -MXX2SM * (deltaMLR2_f(f, s) + deltaMRL2_f(f, s))
    //        + MXY2SM * (deltaMLL2_f(f, s, tdumm) + deltaMRR2_f(f, s, tdumm));

    //dAFB = 3.0 * dAFB / 2.0 / M2SM / M2SM;
    
    dAFB = numdA/dendA;

    return dAFB;
}

//  Expressions for f=e   

//  Integrals of the corrections to the squared amplitudes x (t/s)^2, (s/t)^2, (u/s)^2 in [t0, t1]  
const double NPSMEFTd6General::intDMLL2eus2(const double s, const double t0, const double t1) const {
    
    double intM2;
    double aEM, sw2cw2;
    double gLeSM;
    double deltagLe;
    double Aeeee;
    double GammaZSM, deltaGammaZ;
    double Mz2, Mz4, s2;
    // RG scale of the process
    double muRG;
    
    muRG = sqrt(s);
    
    aEM = trueSM.alphaMz();
    sw2cw2 = sW2_tree * cW2_tree;
    Aeeee = CeeLL_e(muRG);
    gLeSM = gZlL;
    deltagLe = deltaGL_f_mu(leptons[ELECTRON], muRG);
    GammaZSM = trueSM.Gamma_Z();
    deltaGammaZ = deltaGamma_Z();
    Mz2 = Mz * Mz;
    Mz4 = Mz2 * Mz2;
    s2 = s * s;

    intM2 = (1.0/(3.0*s2))*((2.0*gLeSM*gLeSM*gLeSM*Mz2*s2*GammaZSM*(gLeSM*(Mz4 + s2 - Mz2*(2.0*s + GammaZSM*GammaZSM))*deltaGammaZ + 2.0*GammaZSM*(Mz4 + s2 + Mz2*(-2.0*s + GammaZSM*GammaZSM))*deltagLe))/(sw2cw2*sw2cw2 * pow(Mz4 + s2 + Mz2*(-2.0*s + GammaZSM*GammaZSM),3.0)) + 
            2.0*(1.0 - (gLeSM*gLeSM*(Mz2 - s)*s)/(sw2cw2*((Mz2 - s)*(Mz2 - s) + Mz2*GammaZSM*GammaZSM)))*(delta_em + (s*Aeeee)/(2.0*M_PI*aEM) + (2.0*gLeSM*(Mz2 - s)*s*(gLeSM*Mz2*GammaZSM*deltaGammaZ - (Mz4 + s2 + Mz2*(-2.0*s + GammaZSM*GammaZSM))*deltagLe))/(sw2cw2*pow(Mz4 + s2 + Mz2*(-2.0*s + GammaZSM*GammaZSM),2.0))))*(pow(s + t1 ,3.0) - pow(s + t0,3.0)) +
            ((2.0*delta_em + (4.0*gLeSM*gLeSM*Mz2*(Mz2 - s)*s*GammaZSM*deltaGammaZ)/(sw2cw2*pow(Mz4 + s2 + Mz2*(-2.0*s + GammaZSM*GammaZSM),2.0)) + (s*Aeeee)/(M_PI*aEM) - (4.0*gLeSM*(Mz2 - s)*s*deltagLe)/(sw2cw2*(Mz4 + s2 + Mz2*(-2.0*s + GammaZSM*GammaZSM))))/s)*(2*s*( t1 - t0) + (t1*t1 - t0*t0)/2.0 + s2*log(t1/t0)) +           
            (gLeSM *(gLeSM*(2.0*sw2cw2*delta_em + (4.0*gLeSM*gLeSM*Mz2*(Mz2 - s)*s*GammaZSM*deltaGammaZ)/pow(Mz4 + s2 + Mz2*(-2.0*s + GammaZSM*GammaZSM),2.0) + (s*sw2cw2*Aeeee)/(M_PI*aEM)) + 4.0*(sw2cw2 + (2.0*gLeSM*gLeSM*s*(-Mz2 + s))/(Mz4 + s2 + Mz2*(-2.0*s + GammaZSM*GammaZSM)))*deltagLe))/(s*sw2cw2*sw2cw2)*((1.0/2.0)*( t1*(2.0*Mz2 + 4.0*s + t1) - t0*(2.0*Mz2 + 4.0*s + t0)) + pow(Mz2 + s,2.0)*log((-Mz2 + t1)/(-Mz2 + t0))) +
            (4.0*gLeSM*deltagLe)/(Mz2*sw2cw2) * (Mz2*(t1 - t0) - s2*log(t1/t0) + pow(Mz2 + s,2.0)*log((-Mz2 + t1)/(-Mz2 + t0))) +
            (4.0*gLeSM*gLeSM*gLeSM*deltagLe)/(sw2cw2*sw2cw2)*(((Mz2 + s)*(Mz2 + s)/(Mz2 - t1) - (Mz2 + s)*(Mz2 + s)/(Mz2 - t0) + t1 - t0 + 2.0*(Mz2 + s)*log((-Mz2 + t1)/(-Mz2 + t0))));

    return intM2;
}

const double NPSMEFTd6General::intDMRR2eus2(const double s, const double t0, const double t1) const {
    
    double intM2;
    double aEM, sw2cw2;
    double gReSM;
    double deltagRe;
    double Aeeee;
    double GammaZSM, deltaGammaZ;
    double Mz2, Mz4, s2;
    // RG scale of the process
    double muRG;
    
    muRG = sqrt(s);
    
    aEM = trueSM.alphaMz();
    sw2cw2 = sW2_tree * cW2_tree;
    Aeeee = CeeRR_e(muRG);
    gReSM = gZlR;
    deltagRe = deltaGR_f_mu(leptons[ELECTRON], muRG);
    GammaZSM = trueSM.Gamma_Z();
    deltaGammaZ = deltaGamma_Z();
    Mz2 = Mz * Mz;
    Mz4 = Mz2 * Mz2;
    s2 = s * s;

    intM2 = (1.0/(3.0*s2))*((2.0*gReSM*gReSM*gReSM*Mz2*s2*GammaZSM*(gReSM*(Mz4 + s2 - Mz2*(2.0*s + GammaZSM*GammaZSM))*deltaGammaZ + 2.0*GammaZSM*(Mz4 + s2 + Mz2*(-2.0*s + GammaZSM*GammaZSM))*deltagRe))/(sw2cw2*sw2cw2 * pow(Mz4 + s2 + Mz2*(-2.0*s + GammaZSM*GammaZSM),3.0)) + 
            2.0*(1.0 - (gReSM*gReSM*(Mz2 - s)*s)/(sw2cw2*((Mz2 - s)*(Mz2 - s) + Mz2*GammaZSM*GammaZSM)))*(delta_em + (s*Aeeee)/(2.0*M_PI*aEM) + (2.0*gReSM*(Mz2 - s)*s*(gReSM*Mz2*GammaZSM*deltaGammaZ - (Mz4 + s2 + Mz2*(-2.0*s + GammaZSM*GammaZSM))*deltagRe))/(sw2cw2*pow(Mz4 + s2 + Mz2*(-2.0*s + GammaZSM*GammaZSM),2.0))))*(pow(s + t1 ,3.0) - pow(s + t0,3.0)) +
            ((2.0*delta_em + (4.0*gReSM*gReSM*Mz2*(Mz2 - s)*s*GammaZSM*deltaGammaZ)/(sw2cw2*pow(Mz4 + s2 + Mz2*(-2.0*s + GammaZSM*GammaZSM),2.0)) + (s*Aeeee)/(M_PI*aEM) - (4.0*gReSM*(Mz2 - s)*s*deltagRe)/(sw2cw2*(Mz4 + s2 + Mz2*(-2.0*s + GammaZSM*GammaZSM))))/s)*(2*s*( t1 - t0) + (t1*t1 - t0*t0)/2.0 + s2*log(t1/t0)) +           
            (gReSM *(gReSM*(2.0*sw2cw2*delta_em + (4.0*gReSM*gReSM*Mz2*(Mz2 - s)*s*GammaZSM*deltaGammaZ)/pow(Mz4 + s2 + Mz2*(-2.0*s + GammaZSM*GammaZSM),2.0) + (s*sw2cw2*Aeeee)/(M_PI*aEM)) + 4.0*(sw2cw2 + (2.0*gReSM*gReSM*s*(-Mz2 + s))/(Mz4 + s2 + Mz2*(-2.0*s + GammaZSM*GammaZSM)))*deltagRe))/(s*sw2cw2*sw2cw2)*((1.0/2.0)*( t1*(2.0*Mz2 + 4.0*s + t1) - t0*(2.0*Mz2 + 4.0*s + t0)) + pow(Mz2 + s,2.0)*log((-Mz2 + t1)/(-Mz2 + t0))) +
            (4.0*gReSM*deltagRe)/(Mz2*sw2cw2) * (Mz2*(t1 - t0) - s2*log(t1/t0) + pow(Mz2 + s,2.0)*log((-Mz2 + t1)/(-Mz2 + t0))) +
            (4.0*gReSM*gReSM*gReSM*deltagRe)/(sw2cw2*sw2cw2)*(((Mz2 + s)*(Mz2 + s)/(Mz2 - t1) - (Mz2 + s)*(Mz2 + s)/(Mz2 - t0) + t1 - t0 + 2.0*(Mz2 + s)*log((-Mz2 + t1)/(-Mz2 + t0))));

    return intM2;
}

const double NPSMEFTd6General::intDMLR2ets2(const double s, const double t0, const double t1) const {
    
    double intM2;
    
    intM2 = deltaMLR2_f(leptons[ELECTRON], s) * (t1*t1*t1 - t0*t0*t0)/3.0/s/s;
    
    return intM2;
}

const double NPSMEFTd6General::intDMRL2ets2(const double s, const double t0, const double t1) const {

    double intM2;
    
    intM2 = deltaMRL2_f(leptons[ELECTRON], s) * (t1*t1*t1 - t0*t0*t0)/3.0/s/s;
    
    return intM2;
}

const double NPSMEFTd6General::intDMLR2etildest2(const double s, const double t0, const double t1) const {

    double intM2;
    double aEM, sw2cw2;
    double gLeSM, gReSM;
    double deltagLe, deltagRe;
    double Aeeee;
    double s2;
    // RG scale of the process
    double muRG;
    
    muRG = sqrt(s);
    
    aEM = trueSM.alphaMz();
    sw2cw2 = sW2_tree * cW2_tree;
    Aeeee = CeeLR_e(muRG);
    gLeSM = gZlL;
    gReSM = gZlR;
    deltagLe = deltaGL_f_mu(leptons[ELECTRON], muRG);
    deltagRe = deltaGR_f_mu(leptons[ELECTRON], muRG);
    s2 = s*s;
    
    intM2 = -2.0 * s2*delta_em *(1/t1 - 1/t0) -
            (2.0 * s2*(gReSM * deltagLe + gLeSM*(gReSM*delta_em + deltagRe)))/(Mz * Mz * sw2cw2)*(log(t1/t0) - log( (-Mz * Mz + t1)/(-Mz * Mz + t0) ) ) +
            (s2*Aeeee)/(2.0 * M_PI * aEM )* log(t1/t0) +
            (gLeSM*gReSM*(s2)*Aeeee )/(2.0 * M_PI * sw2cw2 * aEM) * log( (Mz * Mz - t1)/(Mz * Mz - t0) ) +
            ((2.0 *gLeSM*gReSM*s2*(gReSM*deltagLe +  gLeSM*deltagRe))/ sw2cw2/ sw2cw2) *(1.0/ (Mz * Mz - t1) - 1.0/ (Mz * Mz - t0));

    return intM2;
}

const double NPSMEFTd6General::intDMRL2etildest2(const double s, const double t0, const double t1) const {
    
    double intM2;
    double aEM, sw2cw2;
    double gLeSM, gReSM;
    double deltagLe, deltagRe;
    double Aeeee;
    double s2;
    // RG scale of the process
    double muRG;
    
    muRG = sqrt(s);
    
    aEM = trueSM.alphaMz();
    sw2cw2 = sW2_tree * cW2_tree;
    Aeeee = CeeRL_e(muRG);
    gLeSM = gZlL;
    gReSM = gZlR;
    deltagLe = deltaGL_f_mu(leptons[ELECTRON], muRG);
    deltagRe = deltaGR_f_mu(leptons[ELECTRON], muRG);
    s2 = s*s;
    
    intM2 = -2.0 * s2*delta_em *(1/t1 - 1/t0) -
            (2.0 * s2*(gReSM * deltagLe + gLeSM*(gReSM*delta_em + deltagRe)))/(Mz * Mz * sw2cw2)*(log(t1/t0) - log( (-Mz * Mz + t1)/(-Mz * Mz + t0) ) ) +
            (s2*Aeeee)/(2.0 * M_PI * aEM )* log(t1/t0) +
            (gLeSM*gReSM*(s2)*Aeeee )/(2.0 * M_PI * sw2cw2 * aEM) * log( (Mz * Mz - t1)/(Mz * Mz - t0) ) +
            ((2.0 *gLeSM*gReSM*s2*(gReSM*deltagLe +  gLeSM*deltagRe))/ sw2cw2/ sw2cw2) *(1.0/ (Mz * Mz - t1) - 1.0/ (Mz * Mz - t0));

    return intM2;
}

//  Absolute corrections to the differential cross section integrated in [cos \theta_{min},cos \theta_{max}] 
const double NPSMEFTd6General::delta_sigma_ee(const double pol_e, const double pol_p, const double s, const double cosmin, const double cosmax) const {

    double sumM2, dsigma;
    double topb = 0.3894e+9; 
    double t0, t1, lambdaK;
    
    double pLH, pRH; //Polarization factors, minus the 1/4 average
    double pLLH, pRRH; 
    
    pLH = (1.0 - pol_e) * (1.0 + pol_p);
    pRH = (1.0 + pol_e) * (1.0 - pol_p);
    
    pLLH = (1.0 - pol_e) * (1.0 - pol_p);
    pRRH = (1.0 + pol_e) * (1.0 + pol_p);
    
    // t values for cosmin and cosmax
    t0 = 0.5 * s * ( -1.0 + cosmin );
    t1 = 0.5 * s * ( -1.0 + cosmax );
    
    // Kähllén function of (s,0,0)
    lambdaK = s*s;
    
    // Sum of the integrals of the amplitudes squared x (t/s)^2, (s/t)^2, (u/s)^2 
    sumM2 = pLH * intDMLL2eus2(s, t0, t1) + pRH * intDMRR2eus2(s, t0, t1) +
            pLH * intDMLR2ets2(s, t0, t1) + pRH * intDMRL2ets2(s, t0, t1) + 
            pLLH * intDMLR2etildest2(s, t0, t1) + pRRH * intDMRL2etildest2(s, t0, t1);   
    
    // Build the cross section
    dsigma = M_PI * (trueSM.alphaMz())*(trueSM.alphaMz()) * sumM2 / s / sqrt(lambdaK);
    
    return topb * dsigma;
}

//  Absolute corrections to the total cross section 
const double NPSMEFTd6General::delta_sigmaTot_ee(const double pol_e, const double pol_p, const double s) const {
    double coscut = 0.90; // As in LEP2
    return delta_sigma_ee(pol_e, pol_p, s, -coscut, coscut);
}

//  Absolute corrections to the FB asymmetry 
const double NPSMEFTd6General::delta_AFB_ee(const double pol_e, const double pol_p, const double s) const {

    double coscut = 0.90; // As in LEP2  
    double xsSMF, xsSMB, xsSM;
    double dxsF, dxsB, dxs;
    double dAFB;
    
    // SM cross sections
    xsSM = trueSM.eeffsigmaEbin(pol_e, pol_p, s, -coscut, coscut);
    xsSMF = trueSM.eeffsigmaEbin(pol_e, pol_p, s, 0.0, coscut);
    xsSMB = trueSM.eeffsigmaEbin(pol_e, pol_p, s, -coscut, 0.0);
    
    // Corrections to each
    dxs = delta_sigma_ee(pol_e, pol_p, s, -coscut, coscut);
    dxsF = delta_sigma_ee(pol_e, pol_p, s, 0.0, coscut);
    dxsB = delta_sigma_ee(pol_e, pol_p, s, -coscut, 0.0);

    // Correction to asymmetry
    dAFB = (dxsF - dxsB)/xsSM - (xsSMF - xsSMB)*dxs/xsSM/xsSM;
    
    return dAFB;
}


///////////////////////////////////////////////////////////////////////////////
// e+ e- -> f f observables away from the Z pole: END
///////////////////////////////////////////////////////////////////////////////

// EW low-energy observables: Muon g-2

const double NPSMEFTd6General::delta_amuon() const {
    return 0.;
}

// EW low-energy observables: Parity violation

const double NPSMEFTd6General::delta_Qwemoller(const double q2, const double y) const {
    double deltaQ;
    double deltaCe;

    double dCeeVRR1111, dCeeVLL1111; // NP corrections to LEFT operators at low energy 

    dCeeVRR1111 = (getMatching().getCeeVRR(0, 0, 0, 0)).real();
    dCeeVLL1111 = (getMatching().getCeeVLL(0, 0, 0, 0)).real(); //RGE effects very small

    // Modification in terms of the LEFT basis (at low energies)
    deltaCe = (1. / GF / sqrt(2.)) * (dCeeVRR1111 - dCeeVLL1111);

    //double dgLe, dgRe, gLe, gRe;

    //dgLe = deltaGL_f(leptons[ELECTRON]);
    //dgRe = deltaGR_f(leptons[ELECTRON]);

    //gLe = gZlL;
    //gRe = gZlR;

    //deltaQ = trueSM.Qwemoller(q2,y) * ((dgLe - dgRe)/(gLe - gRe) + (dgLe + dgRe)/(gLe + gRe));

    //deltaQ += (getSMEFTCoeffEW("CllR", 0, 0, 0, 0) - getSMEFTCoeffEW("CeeR", 0, 0, 0, 0)) * v2; 

    deltaQ = -2. * deltaCe;

    return deltaQ;
}

const double NPSMEFTd6General::delta_alrmoller(const double q2, const double y) const {
    return 0.;
}

const double NPSMEFTd6General::delta_Qwp() const {
    double deltaQ;
    double deltaC1u, deltaC1d;

    double dCeuVLL1111, dCeuVRR1111, dCeuVLR1111, dCueVLR1111; // NP corrections to LEFT operators at low energy
    double dCedVLL1111, dCedVRR1111, dCedVLR1111, dCdeVLR1111; // NP corrections to LEFT operators at low energy

    dCeuVLL1111 = (getMatching().getCeuVLL(0, 0, 0, 0)).real();
    dCeuVRR1111 = (getMatching().getCeuVRR(0, 0, 0, 0)).real();
    dCeuVLR1111 = (getMatching().getCeuVLR(0, 0, 0, 0)).real();
    dCueVLR1111 = (getMatching().getCueVLR(0, 0, 0, 0)).real(); //RGE effects very small

    dCedVLL1111 = (getMatching().getCedVLL(0, 0, 0, 0)).real();
    dCedVRR1111 = (getMatching().getCedVRR(0, 0, 0, 0)).real();
    dCedVLR1111 = (getMatching().getCedVLR(0, 0, 0, 0)).real();
    dCdeVLR1111 = (getMatching().getCdeVLR(0, 0, 0, 0)).real(); //RGE effects very small

    // Modification in terms of the LEFT basis (at low energies)
    deltaC1u = (1. / GF / 2. / sqrt(2.)) * (-dCeuVLL1111 + dCeuVRR1111 - dCeuVLR1111 + dCueVLR1111);
    deltaC1d = (1. / GF / 2. / sqrt(2.)) * (-dCedVLL1111 + dCedVRR1111 - dCedVLR1111 + dCdeVLR1111);

    // Proton Z=1, N=0
    deltaQ = -2. * (2. * deltaC1u + deltaC1d);

    return deltaQ;
}

const double NPSMEFTd6General::delta_Qwn() const {
    double deltaQ;
    double deltaC1u, deltaC1d;

    double dCeuVLL1111, dCeuVRR1111, dCeuVLR1111, dCueVLR1111; // NP corrections to LEFT operators at low energy
    double dCedVLL1111, dCedVRR1111, dCedVLR1111, dCdeVLR1111; // NP corrections to LEFT operators at low energy

    dCeuVLL1111 = (getMatching().getCeuVLL(0, 0, 0, 0)).real();
    dCeuVRR1111 = (getMatching().getCeuVRR(0, 0, 0, 0)).real();
    dCeuVLR1111 = (getMatching().getCeuVLR(0, 0, 0, 0)).real();
    dCueVLR1111 = (getMatching().getCueVLR(0, 0, 0, 0)).real(); //RGE effects very small

    dCedVLL1111 = (getMatching().getCedVLL(0, 0, 0, 0)).real();
    dCedVRR1111 = (getMatching().getCedVRR(0, 0, 0, 0)).real();
    dCedVLR1111 = (getMatching().getCedVLR(0, 0, 0, 0)).real();
    dCdeVLR1111 = (getMatching().getCdeVLR(0, 0, 0, 0)).real(); //RGE effects very small

    // Modification in terms of the LEFT basis (at low energies)
    deltaC1u = (1. / GF / 2. / sqrt(2.)) * (-dCeuVLL1111 + dCeuVRR1111 - dCeuVLR1111 + dCueVLR1111);
    deltaC1d = (1. / GF / 2. / sqrt(2.)) * (-dCedVLL1111 + dCedVRR1111 - dCedVLR1111 + dCdeVLR1111);

    // Neutron Z=0, N=1
    deltaQ = -2. * (deltaC1u + 2. * deltaC1d);

    return deltaQ;
}

const double NPSMEFTd6General::delta_gLnuN2() const {
    double eLuSM, eLdSM, deLu, deLd;
    double dFCC, Vud;
    double delta;

    // SM vvqq couplings (up to -4GF/sqrt(2))
    eLuSM = 2.0 * gZvL*gZuL;
    eLdSM = 2.0 * gZvL*gZdL;

    // Scattering is with muon neutrinos -> only (22) interfere
    deLu = (-1. / GF / 2. / sqrt(2.)) * (getMatching().getCnuuVLL(1, 1, 0, 0)).real();
    deLd = (-1. / GF / 2. / sqrt(2.)) * (getMatching().getCnudVLL(1, 1, 0, 0)).real();

    Vud = 0.97373; // PDG 2023

    dFCC = 2.0 * (-sqrt(2.0) / 4 / GF) * ((getMatching().getCnueduVLL(1, 1, 0, 0)) / Vud).real();

    delta = 2.0 * (eLuSM * deLu + eLdSM * deLd) + (trueSM.gLnuN2())*(-dFCC);

    return delta;
}

const double NPSMEFTd6General::delta_gRnuN2() const {
    double eRuSM, eRdSM, deRu, deRd;
    double dFCC, Vud;
    double delta;

    // SM vvqq couplings (up to -4GF/sqrt(2))
    eRuSM = 2.0 * gZvL*gZuR;
    eRdSM = 2.0 * gZvL*gZdR;

    // Scattering is with muon neutrinos -> only (22) interfere
    deRu = (-1. / GF / 2. / sqrt(2.)) * (getMatching().getCnuuVLR(1, 1, 0, 0)).real();
    deRd = (-1. / GF / 2. / sqrt(2.)) * (getMatching().getCnudVLR(1, 1, 0, 0)).real();

    Vud = 0.97373; // PDG 2023

    dFCC = 2.0 * (-sqrt(2.0) / 4 / GF) * ((getMatching().getCnueduVLL(1, 1, 0, 0)) / Vud).real();

    delta = 2.0 * (eRuSM * deRu + eRdSM * deRd) + (trueSM.gRnuN2())*(-dFCC);

    return delta;
}

const double NPSMEFTd6General::delta_gVnue() const {
    double dCnueVLL2211, dCnueVLR2211, delta;

    dCnueVLL2211 = (getMatching().getCnueVLL(1, 1, 0, 0)).real();
    dCnueVLR2211 = (getMatching().getCnueVLR(1, 1, 0, 0)).real();

    // Modification in terms of the LEFT basis (at low energies)        
    delta = (-1. / GF / 2. / sqrt(2.)) * (dCnueVLL2211 + dCnueVLR2211);

    return delta;
}

const double NPSMEFTd6General::delta_gAnue() const {
    double dCnueVLL2211, dCnueVLR2211, delta;

    dCnueVLL2211 = (getMatching().getCnueVLL(1, 1, 0, 0)).real();
    dCnueVLR2211 = (getMatching().getCnueVLR(1, 1, 0, 0)).real();

    // Modification in terms of the LEFT basis (at low energies)        
    delta = (-1. / GF / 2. / sqrt(2.)) * (dCnueVLL2211 - dCnueVLR2211);

    return delta;
}

////////////////////////////////////////////////////////////////////////     
// Lepton decays

// Lepton Flavor universality tests in Tau decays: 

const double NPSMEFTd6General::delta_TauLFU_gmuge() const {
    double dCnueVLL3223, dCnueVLL3113, delta;

    dCnueVLL3223 = (getMatching().getCnueVLL(2, 1, 1, 2)).real();
    dCnueVLL3113 = (getMatching().getCnueVLR(2, 0, 0, 2)).real();

    // Modification in terms of the LEFT basis (at low energies)        
    delta = (-1. / GF / 2. / sqrt(2.)) * (dCnueVLL3223 - dCnueVLL3113);

    return (trueSM.TauLFU_gmuge())*delta;
}

const double NPSMEFTd6General::delta_TauLFU_gtaugmu() const {
    double dCnueVLL3113, dCnueVLL2112, delta;

    dCnueVLL3113 = (getMatching().getCnueVLL(2, 0, 0, 2)).real();
    dCnueVLL2112 = (getMatching().getCnueVLR(1, 0, 0, 1)).real();

    // Modification in terms of the LEFT basis (at low energies)        
    delta = (-1. / GF / 2. / sqrt(2.)) * (dCnueVLL3113 - dCnueVLL2112);

    return (trueSM.TauLFU_gtaugmu())*delta;
}

const double NPSMEFTd6General::delta_TauLFU_gtauge() const {
    double dCnueVLL3223, dCnueVLL2112, delta;

    dCnueVLL3223 = (getMatching().getCnueVLL(2, 1, 1, 2)).real();
    dCnueVLL2112 = (getMatching().getCnueVLR(1, 0, 0, 1)).real();

    // Modification in terms of the LEFT basis (at low energies)        
    delta = (-1. / GF / 2. / sqrt(2.)) * (dCnueVLL3223 - dCnueVLL2112);

    return (trueSM.TauLFU_gtauge())*delta;
}

const double NPSMEFTd6General::delta_TauLFU_gtaugmuPi() const {
    // Follow Eqs. A.1, A.2 in 2311.00020 
    double dCnueduVLL3311, dCnueduVLL2211;
    double dCnueduSRL3311, dCnueduSRL2211;
    double Vud, mPi, chitauPi, chimuPi, etaS;
    double delta;

    Vud = 0.97373; // PDG 2023
    mPi = 0.13957039; // From PDG 2024 in GeV

    chitauPi = mPi * mPi / (leptons[TAU].getMass()) / (quarks[DOWN].getMass() + quarks[UP].getMass());
    chimuPi = chitauPi * (leptons[TAU].getMass()) / (leptons[MU].getMass());

    etaS = 1.57;

    // Vector operators
    dCnueduVLL3311 = ((getMatching().getCnueduVLL(2, 2, 0, 0)) / Vud).real();
    dCnueduVLL2211 = ((getMatching().getCnueduVLL(1, 1, 0, 0)) / Vud).real();

    // Scalar operators
    dCnueduSRL3311 = etaS * ((getMatching().getCnueduSRL(2, 2, 0, 0)) / Vud).real();
    dCnueduSRL2211 = etaS * ((getMatching().getCnueduSRL(1, 1, 0, 0)) / Vud).real();

    // Modification in terms of the LEFT basis (at low energies)        
    delta = (-1. / GF / 2. / sqrt(2.)) * (dCnueduVLL3311 - dCnueduVLL2211 + chitauPi * dCnueduSRL3311 - chimuPi * dCnueduSRL2211);

    return delta;
}

const double NPSMEFTd6General::delta_TauLFU_gtaugmuK() const {
    // Follow Eqs. A.1, A.2 in 2311.00020 
    double dCnueduVLL3321, dCnueduVLL2221;
    double dCnueduSRL3321, dCnueduSRL2221;
    double Vus, mK, chitauK, chimuK, etaS;
    double delta;

    Vus = 0.2243; // PDG 2023
    mK = 0.493677; // From PDG 2024 in GeV

    chitauK = mK * mK / (leptons[TAU].getMass()) / (quarks[STRANGE].getMass() + quarks[UP].getMass());
    chimuK = chitauK * (leptons[TAU].getMass()) / (leptons[MU].getMass());

    etaS = 1.57;

    // Vector operators
    dCnueduVLL3321 = ((getMatching().getCnueduVLL(2, 2, 1, 0)) / Vus).real();
    dCnueduVLL2221 = ((getMatching().getCnueduVLL(1, 1, 1, 0)) / Vus).real();

    // Scalar operators
    dCnueduSRL3321 = etaS * ((getMatching().getCnueduSRL(2, 2, 1, 0)) / Vus).real();
    dCnueduSRL2221 = etaS * ((getMatching().getCnueduSRL(1, 1, 1, 0)) / Vus).real();

    // Modification in terms of the LEFT basis (at low energies)        
    delta = (-1. / GF / 2. / sqrt(2.)) * (dCnueduVLL3321 - dCnueduVLL2221 + chitauK * dCnueduSRL3321 - chimuK * dCnueduSRL2221);

    return delta;
}

// Top Wilson coefficients in the notation of LHC Top WG arXiv: 1802.07237
// In units of TeV^-2

// In the same order as Table 1 (Not all implemented. Some extra WC are placed next to similar in kind)

const double NPSMEFTd6General::cQQ1_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    comb = 2.0 * getSMEFTCoeff("Cqq1R", 2, 2, 2, 2, mu) - (2.0/3.0) * getSMEFTCoeff("Cqq3R", 2, 2, 2, 2, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cQQ8_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    comb = 8.0 * getSMEFTCoeff("Cqq3R", 2, 2, 2, 2, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::ctt1_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    comb = getSMEFTCoeff("CuuR", 2, 2, 2, 2, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cQt1_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    comb = getSMEFTCoeff("Cqu1R", 2, 2, 2, 2, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cQt8_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    comb = getSMEFTCoeff("Cqu8R", 2, 2, 2, 2, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cQq31_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // LHC Top WG uses U(2)^3 for quarks. Here take i=0 (1st family)
    comb = getSMEFTCoeff("Cqq3R", 0, 0, 2, 2, mu) + (1.0/6.0) * ( getSMEFTCoeff("Cqq1R", 0, 2, 2, 0, mu) - getSMEFTCoeff("Cqq3R", 0, 2, 2, 0, mu) );
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cQq38_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // LHC Top WG uses U(2)^3 for quarks. Here take i=0 (1st family)
    comb = getSMEFTCoeff("Cqq1R", 0, 2, 2, 0, mu) - getSMEFTCoeff("Cqq3R", 0, 2, 2, 0, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cQq11_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // LHC Top WG uses U(2)^3 for quarks. Here take i=0 (1st family)
    comb = getSMEFTCoeff("Cqq1R", 0, 0, 2, 2, mu) + (1.0/6.0) * getSMEFTCoeff("Cqq1R", 0, 2, 2, 0, mu) + 0.5 * getSMEFTCoeff("Cqq3R", 0, 2, 2, 0, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cQq18_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // LHC Top WG uses U(2)^3 for quarks. Here take i=0 (1st family)
    comb = getSMEFTCoeff("Cqq1R", 0, 2, 2, 0, mu) + 3.0 * getSMEFTCoeff("Cqq3R", 0, 2, 2, 0, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cQu1_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // LHC Top WG uses U(2)^3 for quarks. Here take i=0 (1st family)
    comb = getSMEFTCoeff("Cqu1R", 2, 2, 0, 0, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cQu8_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // LHC Top WG uses U(2)^3 for quarks. Here take i=0 (1st family)
    comb = getSMEFTCoeff("Cqu8R", 2, 2, 0, 0, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cQd1_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // LHC Top WG uses U(2)^3 for quarks. Here take i=0 (1st family)
    comb = getSMEFTCoeff("Cqd1R", 2, 2, 0, 0, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cQd8_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // LHC Top WG uses U(2)^3 for quarks. Here take i=0 (1st family)
    comb = getSMEFTCoeff("Cqd8R", 2, 2, 0, 0, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::ctq1_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // LHC Top WG uses U(2)^3 for quarks. Here take i=0 (1st family)
    comb = getSMEFTCoeff("Cqu1R", 0, 0, 2, 2, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::ctq8_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // LHC Top WG uses U(2)^3 for quarks. Here take i=0 (1st family)
    comb = getSMEFTCoeff("Cqu8R", 0, 0, 2, 2, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::ctu1_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // LHC Top WG uses U(2)^3 for quarks. Here take i=0 (1st family)
    comb = getSMEFTCoeff("CuuR", 0, 0, 2, 2, mu) + getSMEFTCoeff("CuuR", 0, 2, 2, 0, mu)/3.0;
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::ctu8_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // LHC Top WG uses U(2)^3 for quarks. Here take i=0 (1st family)
    comb = 2.0 * getSMEFTCoeff("CuuR", 0, 2, 2, 0, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::ctd1_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // LHC Top WG uses U(2)^3 for quarks. Here take i=0 (1st family)
    comb = getSMEFTCoeff("Cud1R", 2, 2, 0, 0, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::ctd8_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // LHC Top WG uses U(2)^3 for quarks. Here take i=0 (1st family)
    comb = getSMEFTCoeff("Cud8R", 2, 2, 0, 0, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::ctH_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    comb = getSMEFTCoeff("CuHR", 2, 2, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cHQm_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    comb = getSMEFTCoeff("CHq1R", 2, 2, mu) - getSMEFTCoeff("CHq3R", 2, 2, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cHQp_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    comb = getSMEFTCoeff("CHq1R", 2, 2, mu) + getSMEFTCoeff("CHq3R", 2, 2, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cHQ3_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    comb = getSMEFTCoeff("CHq3R", 2, 2, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cHt_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    comb = getSMEFTCoeff("CHuR", 2, 2, mu);

    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cHb_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    comb = getSMEFTCoeff("CHdR", 2, 2, mu);

    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cHtb_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    comb = getSMEFTCoeff("CHudR", 2, 2, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::ctW_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    comb = getSMEFTCoeff("CuWR", 2, 2, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::IctW_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    comb = getSMEFTCoeff("CuWI", 2, 2, mu);;
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::ctZ_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    comb = - sW_tree * getSMEFTCoeff("CuBR", 2, 2, mu) + cW_tree * getSMEFTCoeff("CuWR", 2, 2, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::IctZ_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    comb = - sW_tree * getSMEFTCoeff("CuBI", 2, 2, mu) + cW_tree * getSMEFTCoeff("CuWI", 2, 2, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::ctG_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    comb = getSMEFTCoeff("CuGR", 2, 2, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cbW_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    comb = getSMEFTCoeff("CdWR", 2, 2, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cQlM_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // Take first family for leptons
    comb = getSMEFTCoeff("Clq1R", 0, 0, 2, 2, mu) - getSMEFTCoeff("Clq3R", 0, 0, 2, 2, mu);
 
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cQlP_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // Take first family for leptons
    comb = getSMEFTCoeff("Clq1R", 0, 0, 2, 2, mu) + getSMEFTCoeff("Clq3R", 0, 0, 2, 2, mu);
 
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cQl3_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // Take first family for leptons
    comb = getSMEFTCoeff("Clq3R", 0, 0, 2, 2, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cQe_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // Take first family for leptons
    comb = getSMEFTCoeff("CqeR", 2, 2, 0, 0, mu);
   
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::ctl_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // Take first family for leptons
    comb = getSMEFTCoeff("CluR", 0, 0, 2, 2, mu);
   
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::cte_TWG(const double mu) const {

    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // Take first family for leptons
    comb = getSMEFTCoeff("CeuR", 0, 0, 2, 2, mu);
    
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::ctlS_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // Take first family for leptons
    comb = getSMEFTCoeff("Clequ1R", 0, 0, 2, 2, mu);
  
    return (toTeVm2 * comb);
}

const double NPSMEFTd6General::ctlT_TWG(const double mu) const {
    
    double comb;
    double toTeVm2 = 1000000.; ///< To change C/Lambda^2 from GeV to TeV
    
    // Take first family for leptons
    comb = getSMEFTCoeff("Clequ3R", 0, 0, 2, 2, mu);
  
    return (toTeVm2 * comb);
}


// FCC-hh 84 TeV likelihoods (chi2FCChhXX)

const double NPSMEFTd6General::chi2FCChh4Top() const
{
    double dchi2Tot = 0.0;

    double sigmaSMHT_Bin1a0 = 0.0, sigmaHT_Bin1a0 = 0.0; 
 
        sigmaSMHT_Bin1a0 = 0.; //Only NP contribution 
 
        sigmaHT_Bin1a0 = sigmaSMHT_Bin1a0 
                +94757.9 * getSMEFTCoeff("CG", 550.) 
                -18393.4 * getSMEFTCoeff("CuHR",2,2, 550.) 
                -323815. * getSMEFTCoeff("CuGR",2,2, 550.) 
                +87456.3 * getSMEFTCoeff("Cqq1R",2,2,2,2, 550.) 
                +88937.6 * getSMEFTCoeff("Cqq3R",2,2,2,2, 550.) 
                +86719.8 * getSMEFTCoeff("CuuR",2,2,2,2, 550.) 
                -48353.8 * getSMEFTCoeff("Cqu1R",2,2,2,2, 550.) 
                -2674.09 * getSMEFTCoeff("Cqq1R",0,0,2,2, 550.) 
                +6252.44 * getSMEFTCoeff("Cqq1R",0,2,2,0, 550.) 
                -418.116 * getSMEFTCoeff("Cqq1R",1,1,2,2, 550.) 
                +635.16 * getSMEFTCoeff("Cqq1R",1,2,2,1, 550.) 
                -955.898 * getSMEFTCoeff("Cqq3R",0,0,2,2, 550.) 
                +15013.1 * getSMEFTCoeff("Cqq3R",0,2,2,0, 550.) 
                +132.3 * getSMEFTCoeff("Cqq3R",1,1,2,2, 550.) 
                +2309.88 * getSMEFTCoeff("Cqq3R",1,2,2,1, 550.) 
                -1204.85 * getSMEFTCoeff("CuuR",0,0,2,2, 550.) 
                -143.523 * getSMEFTCoeff("CuuR",1,1,2,2, 550.) 
                +6591.85 * getSMEFTCoeff("CuuR",0,2,2,0, 550.) 
                +666.431 * getSMEFTCoeff("CuuR",1,2,2,1, 550.) 
                -392.884 * getSMEFTCoeff("Cud1R",2,2,0,0, 550.) 
                -84.6328 * getSMEFTCoeff("Cud1R",2,2,1,1, 550.) 
                +1956.37 * getSMEFTCoeff("Cud8R",2,2,0,0, 550.) 
                +191.023 * getSMEFTCoeff("Cud8R",2,2,1,1, 550.) 
                -1475.36 * getSMEFTCoeff("Cqu1R",0,0,2,2, 550.) 
                -149.283 * getSMEFTCoeff("Cqu1R",1,1,2,2, 550.) 
                -727.816 * getSMEFTCoeff("Cqu1R",2,2,0,0, 550.) 
                -105.279 * getSMEFTCoeff("Cqu1R",2,2,1,1, 550.) 
                +3360.71 * getSMEFTCoeff("Cqu8R",0,0,2,2, 550.) 
                +441.723 * getSMEFTCoeff("Cqu8R",1,1,2,2, 550.) 
                +2439.45 * getSMEFTCoeff("Cqu8R",2,2,0,0, 550.) 
                +319.072 * getSMEFTCoeff("Cqu8R",2,2,1,1, 550.) 
                -1093.7 * getSMEFTCoeff("Cqd1R",2,2,0,0, 550.) 
                -111.668 * getSMEFTCoeff("Cqd1R",2,2,1,1, 550.) 
                +1427.23 * getSMEFTCoeff("Cqd8R",2,2,0,0, 550.) 
                +317.441 * getSMEFTCoeff("Cqd8R",2,2,1,1, 550.) 
                ;
 
        dchi2Tot += sigmaHT_Bin1a0 * sigmaHT_Bin1a0/0.147/0.147; 
 
 
//----------------------------------------------------------- 
    double sigmaSMHT_Bin2a0 = 0.0, sigmaHT_Bin2a0 = 0.0; 
 
        sigmaSMHT_Bin2a0 = 0.; //Only NP contribution 
 
        sigmaHT_Bin2a0 = sigmaSMHT_Bin2a0 
                -42282.4 * getSMEFTCoeff("CG", 550.) 
                -15432.9 * getSMEFTCoeff("CuHR",2,2, 550.) 
                -358947. * getSMEFTCoeff("CuGR",2,2, 550.) 
                +75426.3 * getSMEFTCoeff("Cqq1R",2,2,2,2, 550.) 
                +75794.7 * getSMEFTCoeff("Cqq3R",2,2,2,2, 550.) 
                +75498.3 * getSMEFTCoeff("CuuR",2,2,2,2, 550.) 
                -28825.2 * getSMEFTCoeff("Cqu1R",2,2,2,2, 550.) 
                +1854.25 * getSMEFTCoeff("Cqu8R",2,2,2,2, 550.) 
                -3816.99 * getSMEFTCoeff("Cqq1R",0,0,2,2, 550.) 
                +7210.1 * getSMEFTCoeff("Cqq1R",0,2,2,0, 550.) 
                -567.613 * getSMEFTCoeff("Cqq1R",1,1,2,2, 550.) 
                +622.658 * getSMEFTCoeff("Cqq1R",1,2,2,1, 550.) 
                -547.804 * getSMEFTCoeff("Cqq3R",0,0,2,2, 550.) 
                +18546.3 * getSMEFTCoeff("Cqq3R",0,2,2,0, 550.) 
                +2694.31 * getSMEFTCoeff("Cqq3R",1,2,2,1, 550.) 
                -2603.07 * getSMEFTCoeff("CuuR",0,0,2,2, 550.) 
                -227.707 * getSMEFTCoeff("CuuR",1,1,2,2, 550.) 
                +7301.71 * getSMEFTCoeff("CuuR",0,2,2,0, 550.) 
                +788.675 * getSMEFTCoeff("CuuR",1,2,2,1, 550.) 
                -1081.43 * getSMEFTCoeff("Cud1R",2,2,0,0, 550.) 
                -158.905 * getSMEFTCoeff("Cud1R",2,2,1,1, 550.) 
                +1855.74 * getSMEFTCoeff("Cud8R",2,2,0,0, 550.) 
                +227.651 * getSMEFTCoeff("Cud8R",2,2,1,1, 550.) 
                -2028.37 * getSMEFTCoeff("Cqu1R",0,0,2,2, 550.) 
                -279.981 * getSMEFTCoeff("Cqu1R",1,1,2,2, 550.) 
                -1474.78 * getSMEFTCoeff("Cqu1R",2,2,0,0, 550.) 
                -95.1098 * getSMEFTCoeff("Cqu1R",2,2,1,1, 550.) 
                +3864.6 * getSMEFTCoeff("Cqu8R",0,0,2,2, 550.) 
                +529.557 * getSMEFTCoeff("Cqu8R",1,1,2,2, 550.) 
                +1708.22 * getSMEFTCoeff("Cqu8R",2,2,0,0, 550.) 
                +215.861 * getSMEFTCoeff("Cqu8R",2,2,1,1, 550.) 
                -850.369 * getSMEFTCoeff("Cqd1R",2,2,0,0, 550.) 
                -171.591 * getSMEFTCoeff("Cqd1R",2,2,1,1, 550.) 
                +2239.76 * getSMEFTCoeff("Cqd8R",2,2,0,0, 550.) 
                +267.003 * getSMEFTCoeff("Cqd8R",2,2,1,1, 550.) 
                ;
 
        dchi2Tot += sigmaHT_Bin2a0 * sigmaHT_Bin2a0/0.106/0.106; 
 
 
//----------------------------------------------------------- 
    double sigmaSMHT_Bin3a0 = 0.0, sigmaHT_Bin3a0 = 0.0; 
 
        sigmaSMHT_Bin3a0 = 0.; //Only NP contribution 
 
        sigmaHT_Bin3a0 = sigmaSMHT_Bin3a0 
                -246907. * getSMEFTCoeff("CG", 1000.) 
                -11956.6 * getSMEFTCoeff("CuHR",2,2, 1000.) 
                -379980. * getSMEFTCoeff("CuGR",2,2, 1000.) 
                +68653.9 * getSMEFTCoeff("Cqq1R",2,2,2,2, 1000.) 
                +69558.9 * getSMEFTCoeff("Cqq3R",2,2,2,2, 1000.) 
                +68885.7 * getSMEFTCoeff("CuuR",2,2,2,2, 1000.) 
                -13558.2 * getSMEFTCoeff("Cqu1R",2,2,2,2, 1000.) 
                +910.327 * getSMEFTCoeff("Cqu8R",2,2,2,2, 1000.) 
                -4673.3 * getSMEFTCoeff("Cqq1R",0,0,2,2, 1000.) 
                +13341. * getSMEFTCoeff("Cqq1R",0,2,2,0, 1000.) 
                -675.693 * getSMEFTCoeff("Cqq1R",1,1,2,2, 1000.) 
                +996.831 * getSMEFTCoeff("Cqq1R",1,2,2,1, 1000.) 
                -571.697 * getSMEFTCoeff("Cqq3R",0,0,2,2, 1000.) 
                +29495.4 * getSMEFTCoeff("Cqq3R",0,2,2,0, 1000.) 
                +143.664 * getSMEFTCoeff("Cqq3R",1,1,2,2, 1000.) 
                +3862.7 * getSMEFTCoeff("Cqq3R",1,2,2,1, 1000.) 
                -2994.2 * getSMEFTCoeff("CuuR",0,0,2,2, 1000.) 
                -187.856 * getSMEFTCoeff("CuuR",1,1,2,2, 1000.) 
                +12707.9 * getSMEFTCoeff("CuuR",0,2,2,0, 1000.) 
                +1029.43 * getSMEFTCoeff("CuuR",1,2,2,1, 1000.) 
                -470.61 * getSMEFTCoeff("Cud1R",2,2,0,0, 1000.) 
                -148.373 * getSMEFTCoeff("Cud1R",2,2,1,1, 1000.) 
                +2484.74 * getSMEFTCoeff("Cud8R",2,2,0,0, 1000.) 
                +342.026 * getSMEFTCoeff("Cud8R",2,2,1,1, 1000.) 
                -1735.76 * getSMEFTCoeff("Cqu1R",0,0,2,2, 1000.) 
                -183.45 * getSMEFTCoeff("Cqu1R",1,1,2,2, 1000.) 
                -343.826 * getSMEFTCoeff("Cqu1R",2,2,0,0, 1000.) 
                +6847.74 * getSMEFTCoeff("Cqu8R",0,0,2,2, 1000.) 
                +717.451 * getSMEFTCoeff("Cqu8R",1,1,2,2, 1000.) 
                +3886.43 * getSMEFTCoeff("Cqu8R",2,2,0,0, 1000.) 
                +357.063 * getSMEFTCoeff("Cqu8R",2,2,1,1, 1000.) 
                -734.299 * getSMEFTCoeff("Cqd1R",2,2,0,0, 1000.) 
                -168.159 * getSMEFTCoeff("Cqd1R",2,2,1,1, 1000.) 
                +3037.5 * getSMEFTCoeff("Cqd8R",2,2,0,0, 1000.) 
                +392.081 * getSMEFTCoeff("Cqd8R",2,2,1,1, 1000.) 
                ;
 
        dchi2Tot += sigmaHT_Bin3a0 * sigmaHT_Bin3a0/0.08/0.08; 
 
 
//----------------------------------------------------------- 
    double sigmaSMHT_Bin4a0 = 0.0, sigmaHT_Bin4a0 = 0.0; 
 
        sigmaSMHT_Bin4a0 = 0.; //Only NP contribution 
 
        sigmaHT_Bin4a0 = sigmaSMHT_Bin4a0 
                -580892. * getSMEFTCoeff("CG", 1500.) 
                -9503.76 * getSMEFTCoeff("CuHR",2,2, 1500.) 
                -388435. * getSMEFTCoeff("CuGR",2,2, 1500.) 
                +58764.9 * getSMEFTCoeff("Cqq1R",2,2,2,2, 1500.) 
                +61502.4 * getSMEFTCoeff("Cqq3R",2,2,2,2, 1500.) 
                +60910.9 * getSMEFTCoeff("CuuR",2,2,2,2, 1500.) 
                -3118.05 * getSMEFTCoeff("Cqu1R",2,2,2,2, 1500.) 
                -9141.28 * getSMEFTCoeff("Cqu8R",2,2,2,2, 1500.) 
                -10798.5 * getSMEFTCoeff("Cqq1R",0,0,2,2, 1500.) 
                +23434.7 * getSMEFTCoeff("Cqq1R",0,2,2,0, 1500.) 
                -1023.23 * getSMEFTCoeff("Cqq1R",1,1,2,2, 1500.) 
                +1735.79 * getSMEFTCoeff("Cqq1R",1,2,2,1, 1500.) 
                -3414.22 * getSMEFTCoeff("Cqq3R",0,0,2,2, 1500.) 
                +55561.5 * getSMEFTCoeff("Cqq3R",0,2,2,0, 1500.) 
                +6139.43 * getSMEFTCoeff("Cqq3R",1,2,2,1, 1500.) 
                -6493.6 * getSMEFTCoeff("CuuR",0,0,2,2, 1500.) 
                -462.097 * getSMEFTCoeff("CuuR",1,1,2,2, 1500.) 
                +22942.5 * getSMEFTCoeff("CuuR",0,2,2,0, 1500.) 
                +1716. * getSMEFTCoeff("CuuR",1,2,2,1, 1500.) 
                -3777.28 * getSMEFTCoeff("Cud1R",2,2,0,0, 1500.) 
                -437.439 * getSMEFTCoeff("Cud1R",2,2,1,1, 1500.) 
                +3939.59 * getSMEFTCoeff("Cud8R",2,2,0,0, 1500.) 
                +616.219 * getSMEFTCoeff("Cud8R",2,2,1,1, 1500.) 
                -1376.11 * getSMEFTCoeff("Cqu1R",0,0,2,2, 1500.) 
                -178.53 * getSMEFTCoeff("Cqu1R",1,1,2,2, 1500.) 
                -2144.47 * getSMEFTCoeff("Cqu1R",2,2,0,0, 1500.) 
                -112.462 * getSMEFTCoeff("Cqu1R",2,2,1,1, 1500.) 
                +13966.3 * getSMEFTCoeff("Cqu8R",0,0,2,2, 1500.) 
                +1218.24 * getSMEFTCoeff("Cqu8R",1,1,2,2, 1500.) 
                +7668.53 * getSMEFTCoeff("Cqu8R",2,2,0,0, 1500.) 
                +580.451 * getSMEFTCoeff("Cqu8R",2,2,1,1, 1500.) 
                -1425.45 * getSMEFTCoeff("Cqd1R",2,2,0,0, 1500.) 
                -105.279 * getSMEFTCoeff("Cqd1R",2,2,1,1, 1500.) 
                +4386.83 * getSMEFTCoeff("Cqd8R",2,2,0,0, 1500.) 
                +702.354 * getSMEFTCoeff("Cqd8R",2,2,1,1, 1500.) 
                ;
 
        dchi2Tot += sigmaHT_Bin4a0 * sigmaHT_Bin4a0/0.106/0.106; 
 
 
//----------------------------------------------------------- 
    double sigmaSMHT_Bin5a0 = 0.0, sigmaHT_Bin5a0 = 0.0; 
 
        sigmaSMHT_Bin5a0 = 0.; //Only NP contribution 
 
        sigmaHT_Bin5a0 = sigmaSMHT_Bin5a0 
                -976697. * getSMEFTCoeff("CG", 1500.) 
                -11968.1 * getSMEFTCoeff("CuHR",2,2, 1500.) 
                -377470. * getSMEFTCoeff("CuGR",2,2, 1500.) 
                +49580. * getSMEFTCoeff("Cqq1R",2,2,2,2, 1500.) 
                +51572.4 * getSMEFTCoeff("Cqq3R",2,2,2,2, 1500.) 
                +49905.9 * getSMEFTCoeff("CuuR",2,2,2,2, 1500.) 
                -134.735 * getSMEFTCoeff("Cqu1R",2,2,2,2, 1500.) 
                -25412.3 * getSMEFTCoeff("Cqu8R",2,2,2,2, 1500.) 
                -19273.8 * getSMEFTCoeff("Cqq1R",0,0,2,2, 1500.) 
                +44134.4 * getSMEFTCoeff("Cqq1R",0,2,2,0, 1500.) 
                -1658.95 * getSMEFTCoeff("Cqq1R",1,1,2,2, 1500.) 
                +2573.57 * getSMEFTCoeff("Cqq1R",1,2,2,1, 1500.) 
                -3293.39 * getSMEFTCoeff("Cqq3R",0,0,2,2, 1500.) 
                +102204. * getSMEFTCoeff("Cqq3R",0,2,2,0, 1500.) 
                +310.297 * getSMEFTCoeff("Cqq3R",1,1,2,2, 1500.) 
                +9860.96 * getSMEFTCoeff("Cqq3R",1,2,2,1, 1500.) 
                -11689.3 * getSMEFTCoeff("CuuR",0,0,2,2, 1500.) 
                -635.038 * getSMEFTCoeff("CuuR",1,1,2,2, 1500.) 
                +44306.8 * getSMEFTCoeff("CuuR",0,2,2,0, 1500.) 
                +2589.26 * getSMEFTCoeff("CuuR",1,2,2,1, 1500.) 
                -4599.57 * getSMEFTCoeff("Cud1R",2,2,0,0, 1500.) 
                -496.244 * getSMEFTCoeff("Cud1R",2,2,1,1, 1500.) 
                +8253.89 * getSMEFTCoeff("Cud8R",2,2,0,0, 1500.) 
                +1024.53 * getSMEFTCoeff("Cud8R",2,2,1,1, 1500.) 
                -1176.72 * getSMEFTCoeff("Cqu1R",0,0,2,2, 1500.) 
                -211.051 * getSMEFTCoeff("Cqu1R",1,1,2,2, 1500.) 
                -1715.88 * getSMEFTCoeff("Cqu1R",2,2,0,0, 1500.) 
                -80.7701 * getSMEFTCoeff("Cqu1R",2,2,1,1, 1500.) 
                +25965.1 * getSMEFTCoeff("Cqu8R",0,0,2,2, 1500.) 
                +2146.74 * getSMEFTCoeff("Cqu8R",1,1,2,2, 1500.) 
                +15962.4 * getSMEFTCoeff("Cqu8R",2,2,0,0, 1500.) 
                +941.244 * getSMEFTCoeff("Cqu8R",2,2,1,1, 1500.) 
                -1572.67 * getSMEFTCoeff("Cqd1R",2,2,0,0, 1500.) 
                -224.38 * getSMEFTCoeff("Cqd1R",2,2,1,1, 1500.) 
                +9354.26 * getSMEFTCoeff("Cqd8R",2,2,0,0, 1500.) 
                +1124.82 * getSMEFTCoeff("Cqd8R",2,2,1,1, 1500.) 
                ;
 
        dchi2Tot += sigmaHT_Bin5a0 * sigmaHT_Bin5a0/0.189/0.189; 
 
 
//----------------------------------------------------------- 
    double sigmaSMHT_Bin6a0 = 0.0, sigmaHT_Bin6a0 = 0.0; 
 
        sigmaSMHT_Bin6a0 = 0.; //Only NP contribution 
 
        sigmaHT_Bin6a0 = sigmaSMHT_Bin6a0 
                -1508581. * getSMEFTCoeff("CG", 3000.) 
                -10170. * getSMEFTCoeff("CuHR",2,2, 3000.) 
                -350859. * getSMEFTCoeff("CuGR",2,2, 3000.) 
                +24799.6 * getSMEFTCoeff("Cqq1R",2,2,2,2, 3000.) 
                +34526.8 * getSMEFTCoeff("Cqq3R",2,2,2,2, 3000.) 
                +26880.3 * getSMEFTCoeff("CuuR",2,2,2,2, 3000.) 
                -1941.29 * getSMEFTCoeff("Cqu1R",2,2,2,2, 3000.) 
                -51971.2 * getSMEFTCoeff("Cqu8R",2,2,2,2, 3000.) 
                -35561.3 * getSMEFTCoeff("Cqq1R",0,0,2,2, 3000.) 
                +86032.1 * getSMEFTCoeff("Cqq1R",0,2,2,0, 3000.) 
                -2629.82 * getSMEFTCoeff("Cqq1R",1,1,2,2, 3000.) 
                +4328.05 * getSMEFTCoeff("Cqq1R",1,2,2,1, 3000.) 
                -8708.08 * getSMEFTCoeff("Cqq3R",0,0,2,2, 3000.) 
                +191217. * getSMEFTCoeff("Cqq3R",0,2,2,0, 3000.) 
                +309.045 * getSMEFTCoeff("Cqq3R",1,1,2,2, 3000.) 
                +16206.6 * getSMEFTCoeff("Cqq3R",1,2,2,1, 3000.) 
                -23381.8 * getSMEFTCoeff("CuuR",0,0,2,2, 3000.) 
                -1004.54 * getSMEFTCoeff("CuuR",1,1,2,2, 3000.) 
                +84766.6 * getSMEFTCoeff("CuuR",0,2,2,0, 3000.) 
                +4096.92 * getSMEFTCoeff("CuuR",1,2,2,1, 3000.) 
                -6363.72 * getSMEFTCoeff("Cud1R",2,2,0,0, 3000.) 
                -722.16 * getSMEFTCoeff("Cud1R",2,2,1,1, 3000.) 
                +15358.8 * getSMEFTCoeff("Cud8R",2,2,0,0, 3000.) 
                +1635.73 * getSMEFTCoeff("Cud8R",2,2,1,1, 3000.) 
                -267.798 * getSMEFTCoeff("Cqu1R",0,0,2,2, 3000.) 
                -147.765 * getSMEFTCoeff("Cqu1R",1,1,2,2, 3000.) 
                +570.077 * getSMEFTCoeff("Cqu1R",2,2,0,0, 3000.) 
                +48721.5 * getSMEFTCoeff("Cqu8R",0,0,2,2, 3000.) 
                +3421.58 * getSMEFTCoeff("Cqu8R",1,1,2,2, 3000.) 
                +30178.4 * getSMEFTCoeff("Cqu8R",2,2,0,0, 3000.) 
                +1414.71 * getSMEFTCoeff("Cqu8R",2,2,1,1, 3000.) 
                +365.268 * getSMEFTCoeff("Cqd1R",2,2,0,0, 3000.) 
                -169.521 * getSMEFTCoeff("Cqd1R",2,2,1,1, 3000.) 
                +18918. * getSMEFTCoeff("Cqd8R",2,2,0,0, 3000.) 
                +2077.7 * getSMEFTCoeff("Cqd8R",2,2,1,1, 3000.) 
                -79.2853 * getSMEFTCoeff("Cqd1R",2,2,2,2, 3000.) 
                ;
 
        dchi2Tot += sigmaHT_Bin6a0 * sigmaHT_Bin6a0/0.343/0.343; 
 
 
//----------------------------------------------------------- 
    double sigmaSMHT_Bin7a0 = 0.0, sigmaHT_Bin7a0 = 0.0; 
 
        sigmaSMHT_Bin7a0 = 0.; //Only NP contribution 
 
        sigmaHT_Bin7a0 = sigmaSMHT_Bin7a0 
                -2351782. * getSMEFTCoeff("CG", 3000.) 
                -8541.03 * getSMEFTCoeff("CuHR",2,2, 3000.) 
                -297402. * getSMEFTCoeff("CuGR",2,2, 3000.) 
                -15326.8 * getSMEFTCoeff("Cqq1R",2,2,2,2, 3000.) 
                -6195.36 * getSMEFTCoeff("Cqq3R",2,2,2,2, 3000.) 
                -13417.4 * getSMEFTCoeff("CuuR",2,2,2,2, 3000.) 
                -9679.7 * getSMEFTCoeff("Cqu1R",2,2,2,2, 3000.) 
                -104400. * getSMEFTCoeff("Cqu8R",2,2,2,2, 3000.) 
                -74855.1 * getSMEFTCoeff("Cqq1R",0,0,2,2, 3000.) 
                +188240. * getSMEFTCoeff("Cqq1R",0,2,2,0, 3000.) 
                -4393.34 * getSMEFTCoeff("Cqq1R",1,1,2,2, 3000.) 
                +7772.48 * getSMEFTCoeff("Cqq1R",1,2,2,1, 3000.) 
                -17769.5 * getSMEFTCoeff("Cqq3R",0,0,2,2, 3000.) 
                +419672. * getSMEFTCoeff("Cqq3R",0,2,2,0, 3000.) 
                +853.742 * getSMEFTCoeff("Cqq3R",1,1,2,2, 3000.) 
                +29979.5 * getSMEFTCoeff("Cqq3R",1,2,2,1, 3000.) 
                -45968.8 * getSMEFTCoeff("CuuR",0,0,2,2, 3000.) 
                -1830.3 * getSMEFTCoeff("CuuR",1,1,2,2, 3000.) 
                +187873. * getSMEFTCoeff("CuuR",0,2,2,0, 3000.) 
                +7744.84 * getSMEFTCoeff("CuuR",1,2,2,1, 3000.) 
                -13304. * getSMEFTCoeff("Cud1R",2,2,0,0, 3000.) 
                -1230.38 * getSMEFTCoeff("Cud1R",2,2,1,1, 3000.) 
                +31693.8 * getSMEFTCoeff("Cud8R",2,2,0,0, 3000.) 
                +3017.41 * getSMEFTCoeff("Cud8R",2,2,1,1, 3000.) 
                +5677.7 * getSMEFTCoeff("Cqu1R",0,0,2,2, 3000.) 
                +2956.74 * getSMEFTCoeff("Cqu1R",2,2,0,0, 3000.) 
                +105753. * getSMEFTCoeff("Cqu8R",0,0,2,2, 3000.) 
                +6355.45 * getSMEFTCoeff("Cqu8R",1,1,2,2, 3000.) 
                +65887.4 * getSMEFTCoeff("Cqu8R",2,2,0,0, 3000.) 
                +2626.3 * getSMEFTCoeff("Cqu8R",2,2,1,1, 3000.) 
                +1590.4 * getSMEFTCoeff("Cqd1R",2,2,0,0, 3000.) 
                +39238. * getSMEFTCoeff("Cqd8R",2,2,0,0, 3000.) 
                +3833.44 * getSMEFTCoeff("Cqd8R",2,2,1,1, 3000.) 
                ;
 
        dchi2Tot += sigmaHT_Bin7a0 * sigmaHT_Bin7a0/0.765/0.765; 
 
 
//----------------------------------------------------------- 
 
    return dchi2Tot; 
 
}

const double NPSMEFTd6General::chi2FCChhHtt() const
{
    double dchi2Tot = 0.0;

    double sigmaSMpTH_Bin1a0 = 0.0, sigmapTH_Bin1a0 = 0.0; 
 
        sigmaSMpTH_Bin1a0 = 0.; //Only NP contribution 
 
        sigmapTH_Bin1a0 = sigmaSMpTH_Bin1a0 
                -43345. * getSMEFTCoeff("CG", 80.) 
                -122357. * getSMEFTCoeff("CuHR",2,2, 80.) 
                -175.956 * getSMEFTCoeff("CHq3R",0,0, 80.) 
                +117.213 * getSMEFTCoeff("CHuR",0,0, 80.) 
                +2577.29 * getSMEFTCoeff("CHq3R",2,2, 80.) 
                +332.773 * getSMEFTCoeff("CHuR",2,2, 80.) 
                -840292. * getSMEFTCoeff("CuGR",2,2, 80.) 
                +211.683 * getSMEFTCoeff("Cqq1R",0,0,2,2, 80.) 
                +28067.3 * getSMEFTCoeff("Cqq1R",0,2,2,0, 80.) 
                +3997. * getSMEFTCoeff("Cqq1R",1,2,2,1, 80.) 
                +173.873 * getSMEFTCoeff("Cqq3R",0,0,2,2, 80.) 
                +69410.2 * getSMEFTCoeff("Cqq3R",0,2,2,0, 80.) 
                +14309.5 * getSMEFTCoeff("Cqq3R",1,2,2,1, 80.) 
                -197.348 * getSMEFTCoeff("CuuR",0,0,2,2, 80.) 
                +28281.5 * getSMEFTCoeff("CuuR",0,2,2,0, 80.) 
                +3934.37 * getSMEFTCoeff("CuuR",1,2,2,1, 80.) 
                +282.523 * getSMEFTCoeff("Cud1R",2,2,0,0, 80.) 
                +5036.56 * getSMEFTCoeff("Cud8R",2,2,0,0, 80.) 
                +1236.41 * getSMEFTCoeff("Cud8R",2,2,1,1, 80.) 
                +134.822 * getSMEFTCoeff("Cqu1R",2,2,0,0, 80.) 
                +12641.8 * getSMEFTCoeff("Cqu8R",0,0,2,2, 80.) 
                +2425.02 * getSMEFTCoeff("Cqu8R",1,1,2,2, 80.) 
                +6472.76 * getSMEFTCoeff("Cqu8R",2,2,0,0, 80.) 
                +1003.22 * getSMEFTCoeff("Cqu8R",2,2,1,1, 80.) 
                +217.865 * getSMEFTCoeff("Cqd1R",2,2,0,0, 80.) 
                +5320.63 * getSMEFTCoeff("Cqd8R",2,2,0,0, 80.) 
                +1242.61 * getSMEFTCoeff("Cqd8R",2,2,1,1, 80.) 
                -60189.9 * getSMEFTCoeff("CHl3R",0,0, 80.) 
                -61437.9 * getSMEFTCoeff("CHl3R",1,1, 80.) 
                +61724.9 * getSMEFTCoeff("CllR",0,1,1,0, 80.) 
                -1536.15 * getSMEFTCoeff("Cqq1R",2,2,2,2, 80.) 
                -3595.81 * getSMEFTCoeff("Cqq3R",2,2,2,2, 80.) 
                +544.21 * getSMEFTCoeff("Cud8R",2,2,2,2, 80.) 
                -520.292 * getSMEFTCoeff("Cqu1R",2,2,2,2, 80.) 
                -200.207 * getSMEFTCoeff("Cqu8R",2,2,2,2, 80.) 
                +551.445 * getSMEFTCoeff("Cqd8R",2,2,2,2, 80.) 
                ;
 
        dchi2Tot += sigmapTH_Bin1a0 * sigmapTH_Bin1a0/0.025/0.025; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTH_Bin2a0 = 0.0, sigmapTH_Bin2a0 = 0.0; 
 
        sigmaSMpTH_Bin2a0 = 0.; //Only NP contribution 
 
        sigmapTH_Bin2a0 = sigmaSMpTH_Bin2a0 
                -10364. * getSMEFTCoeff("CG", 80.) 
                -123822. * getSMEFTCoeff("CuHR",2,2, 80.) 
                -338.518 * getSMEFTCoeff("CHq1R",0,0, 80.) 
                -118.522 * getSMEFTCoeff("CHuR",0,0, 80.) 
                -110.388 * getSMEFTCoeff("CHq3R",1,1, 80.) 
                -132.106 * getSMEFTCoeff("CHuR",1,1, 80.) 
                -274.468 * getSMEFTCoeff("CHq1R",2,2, 80.) 
                +2843.86 * getSMEFTCoeff("CHq3R",2,2, 80.) 
                -158.112 * getSMEFTCoeff("CHuR",2,2, 80.) 
                -916846. * getSMEFTCoeff("CuGR",2,2, 80.) 
                +35636.7 * getSMEFTCoeff("Cqq1R",0,2,2,0, 80.) 
                +4779.03 * getSMEFTCoeff("Cqq1R",1,2,2,1, 80.) 
                -226.553 * getSMEFTCoeff("Cqq3R",0,0,2,2, 80.) 
                +88475.2 * getSMEFTCoeff("Cqq3R",0,2,2,0, 80.) 
                +17402.1 * getSMEFTCoeff("Cqq3R",1,2,2,1, 80.) 
                -143.73 * getSMEFTCoeff("CuuR",0,0,2,2, 80.) 
                +35357. * getSMEFTCoeff("CuuR",0,2,2,0, 80.) 
                +4785.22 * getSMEFTCoeff("CuuR",1,2,2,1, 80.) 
                +5544.6 * getSMEFTCoeff("Cud8R",2,2,0,0, 80.) 
                +1461.88 * getSMEFTCoeff("Cud8R",2,2,1,1, 80.) 
                +15077.2 * getSMEFTCoeff("Cqu8R",0,0,2,2, 80.) 
                +2792.66 * getSMEFTCoeff("Cqu8R",1,1,2,2, 80.) 
                +8271.66 * getSMEFTCoeff("Cqu8R",2,2,0,0, 80.) 
                +1155.11 * getSMEFTCoeff("Cqu8R",2,2,1,1, 80.) 
                -373.818 * getSMEFTCoeff("Cqd1R",2,2,0,0, 80.) 
                +5698.42 * getSMEFTCoeff("Cqd8R",2,2,0,0, 80.) 
                +1642.42 * getSMEFTCoeff("Cqd8R",2,2,1,1, 80.) 
                -60885.4 * getSMEFTCoeff("CHl3R",0,0, 80.) 
                -61337.6 * getSMEFTCoeff("CHl3R",1,1, 80.) 
                +61602.5 * getSMEFTCoeff("CllR",0,1,1,0, 80.) 
                -1865.46 * getSMEFTCoeff("Cqq1R",2,2,2,2, 80.) 
                -3946.74 * getSMEFTCoeff("Cqq3R",2,2,2,2, 80.) 
                +647.795 * getSMEFTCoeff("Cud8R",2,2,2,2, 80.) 
                -638.491 * getSMEFTCoeff("Cqu1R",2,2,2,2, 80.) 
                -295.543 * getSMEFTCoeff("Cqu8R",2,2,2,2, 80.) 
                +615.761 * getSMEFTCoeff("Cqd8R",2,2,2,2, 80.) 
                ;
 
        dchi2Tot += sigmapTH_Bin2a0 * sigmapTH_Bin2a0/0.024/0.024; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTH_Bin3a0 = 0.0, sigmapTH_Bin3a0 = 0.0; 
 
        sigmaSMpTH_Bin3a0 = 0.; //Only NP contribution 
 
        sigmapTH_Bin3a0 = sigmaSMpTH_Bin3a0 
                +77384.7 * getSMEFTCoeff("CG", 125.) 
                -120958. * getSMEFTCoeff("CuHR",2,2, 125.) 
                +441.162 * getSMEFTCoeff("CHq1R",0,0, 125.) 
                +434.756 * getSMEFTCoeff("CHq3R",0,0, 125.) 
                +216.547 * getSMEFTCoeff("CHuR",0,0, 125.) 
                +252.549 * getSMEFTCoeff("CHdR",0,0, 125.) 
                +398.313 * getSMEFTCoeff("CHq1R",2,2, 125.) 
                +3047.48 * getSMEFTCoeff("CHq3R",2,2, 125.) 
                +186.818 * getSMEFTCoeff("CHuR",2,2, 125.) 
                -1004388. * getSMEFTCoeff("CuGR",2,2, 125.) 
                +190.926 * getSMEFTCoeff("Cqq1R",0,0,2,2, 125.) 
                +57027.7 * getSMEFTCoeff("Cqq1R",0,2,2,0, 125.) 
                +7065.51 * getSMEFTCoeff("Cqq1R",1,2,2,1, 125.) 
                +136646. * getSMEFTCoeff("Cqq3R",0,2,2,0, 125.) 
                +25044. * getSMEFTCoeff("Cqq3R",1,2,2,1, 125.) 
                +261.973 * getSMEFTCoeff("CuuR",0,0,2,2, 125.) 
                +139.717 * getSMEFTCoeff("CuuR",1,1,2,2, 125.) 
                +57362.6 * getSMEFTCoeff("CuuR",0,2,2,0, 125.) 
                +7026.67 * getSMEFTCoeff("CuuR",1,2,2,1, 125.) 
                +287.69 * getSMEFTCoeff("Cud1R",2,2,0,0, 125.) 
                +10901.7 * getSMEFTCoeff("Cud8R",2,2,0,0, 125.) 
                +2417.88 * getSMEFTCoeff("Cud8R",2,2,1,1, 125.) 
                +174.88 * getSMEFTCoeff("Cqu1R",0,0,2,2, 125.) 
                +128.685 * getSMEFTCoeff("Cqu1R",1,1,2,2, 125.) 
                +561.535 * getSMEFTCoeff("Cqu1R",2,2,0,0, 125.) 
                +134.101 * getSMEFTCoeff("Cqu1R",2,2,1,1, 125.) 
                +25560.3 * getSMEFTCoeff("Cqu8R",0,0,2,2, 125.) 
                +4071.95 * getSMEFTCoeff("Cqu8R",1,1,2,2, 125.) 
                +15234.5 * getSMEFTCoeff("Cqu8R",2,2,0,0, 125.) 
                +1819.77 * getSMEFTCoeff("Cqu8R",2,2,1,1, 125.) 
                +484.378 * getSMEFTCoeff("Cqd1R",2,2,0,0, 125.) 
                +10116.8 * getSMEFTCoeff("Cqd8R",2,2,0,0, 125.) 
                +2527.77 * getSMEFTCoeff("Cqd8R",2,2,1,1, 125.) 
                -59503.6 * getSMEFTCoeff("CHl3R",0,0, 125.) 
                -59552.8 * getSMEFTCoeff("CHl3R",1,1, 125.) 
                +62130.6 * getSMEFTCoeff("CllR",0,1,1,0, 125.) 
                -2335.75 * getSMEFTCoeff("Cqq1R",2,2,2,2, 125.) 
                -4344. * getSMEFTCoeff("Cqq3R",2,2,2,2, 125.) 
                +1001.69 * getSMEFTCoeff("Cud8R",2,2,2,2, 125.) 
                -832.696 * getSMEFTCoeff("Cqu1R",2,2,2,2, 125.) 
                -241.46 * getSMEFTCoeff("Cqu8R",2,2,2,2, 125.) 
                +990.926 * getSMEFTCoeff("Cqd8R",2,2,2,2, 125.) 
                ;
 
        dchi2Tot += sigmapTH_Bin3a0 * sigmapTH_Bin3a0/0.0231/0.0231; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTH_Bin4a0 = 0.0, sigmapTH_Bin4a0 = 0.0; 
 
        sigmaSMpTH_Bin4a0 = 0.; //Only NP contribution 
 
        sigmapTH_Bin4a0 = sigmaSMpTH_Bin4a0 
                +191972. * getSMEFTCoeff("CG", 240.) 
                -123012. * getSMEFTCoeff("CuHR",2,2, 240.) 
                +258.983 * getSMEFTCoeff("CHq3R",0,0, 240.) 
                +172.402 * getSMEFTCoeff("CHuR",0,0, 240.) 
                +2388.4 * getSMEFTCoeff("CHq3R",2,2, 240.) 
                +327.041 * getSMEFTCoeff("CHuR",2,2, 240.) 
                -975461. * getSMEFTCoeff("CuGR",2,2, 240.) 
                -211.704 * getSMEFTCoeff("Cqq1R",0,0,2,2, 240.) 
                +91009.8 * getSMEFTCoeff("Cqq1R",0,2,2,0, 240.) 
                +10017. * getSMEFTCoeff("Cqq1R",1,2,2,1, 240.) 
                +146.579 * getSMEFTCoeff("Cqq3R",0,0,2,2, 240.) 
                +216905. * getSMEFTCoeff("Cqq3R",0,2,2,0, 240.) 
                +36577.5 * getSMEFTCoeff("Cqq3R",1,2,2,1, 240.) 
                +91549.5 * getSMEFTCoeff("CuuR",0,2,2,0, 240.) 
                +10047.9 * getSMEFTCoeff("CuuR",1,2,2,1, 240.) 
                +15450.8 * getSMEFTCoeff("Cud8R",2,2,0,0, 240.) 
                +3400.75 * getSMEFTCoeff("Cud8R",2,2,1,1, 240.) 
                +39320.7 * getSMEFTCoeff("Cqu8R",0,0,2,2, 240.) 
                +5868.1 * getSMEFTCoeff("Cqu8R",1,1,2,2, 240.) 
                +23974. * getSMEFTCoeff("Cqu8R",2,2,0,0, 240.) 
                +2491.18 * getSMEFTCoeff("Cqu8R",2,2,1,1, 240.) 
                +16009.8 * getSMEFTCoeff("Cqd8R",2,2,0,0, 240.) 
                +3239.64 * getSMEFTCoeff("Cqd8R",2,2,1,1, 240.) 
                -62097.9 * getSMEFTCoeff("CHl3R",0,0, 240.) 
                -61869.3 * getSMEFTCoeff("CHl3R",1,1, 240.) 
                +61303.3 * getSMEFTCoeff("CllR",0,1,1,0, 240.) 
                -3095.12 * getSMEFTCoeff("Cqq1R",2,2,2,2, 240.) 
                -4796.71 * getSMEFTCoeff("Cqq3R",2,2,2,2, 240.) 
                +1359.74 * getSMEFTCoeff("Cud8R",2,2,2,2, 240.) 
                -1333.04 * getSMEFTCoeff("Cqu1R",2,2,2,2, 240.) 
                -383.319 * getSMEFTCoeff("Cqu8R",2,2,2,2, 240.) 
                +1345.36 * getSMEFTCoeff("Cqd8R",2,2,2,2, 240.) 
                ;
 
        dchi2Tot += sigmapTH_Bin4a0 * sigmapTH_Bin4a0/0.0227/0.0227; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTH_Bin5a0 = 0.0, sigmapTH_Bin5a0 = 0.0; 
 
        sigmaSMpTH_Bin5a0 = 0.; //Only NP contribution 
 
        sigmapTH_Bin5a0 = sigmaSMpTH_Bin5a0 
                +255516. * getSMEFTCoeff("CG", 365.) 
                -120942. * getSMEFTCoeff("CuHR",2,2, 365.) 
                +227.398 * getSMEFTCoeff("CHuR",0,0, 365.) 
                +115.802 * getSMEFTCoeff("CHq1R",2,2, 365.) 
                +1134.06 * getSMEFTCoeff("CHq3R",2,2, 365.) 
                +207.967 * getSMEFTCoeff("CHuR",2,2, 365.) 
                -774837. * getSMEFTCoeff("CuGR",2,2, 365.) 
                -142.761 * getSMEFTCoeff("Cqq1R",0,0,2,2, 365.) 
                +151535. * getSMEFTCoeff("Cqq1R",0,2,2,0, 365.) 
                +14193.4 * getSMEFTCoeff("Cqq1R",1,2,2,1, 365.) 
                +223.358 * getSMEFTCoeff("Cqq3R",0,0,2,2, 365.) 
                +353183. * getSMEFTCoeff("Cqq3R",0,2,2,0, 365.) 
                +52405.6 * getSMEFTCoeff("Cqq3R",1,2,2,1, 365.) 
                +151326. * getSMEFTCoeff("CuuR",0,2,2,0, 365.) 
                +14244.2 * getSMEFTCoeff("CuuR",1,2,2,1, 365.) 
                +24720.8 * getSMEFTCoeff("Cud8R",2,2,0,0, 365.) 
                +4742.6 * getSMEFTCoeff("Cud8R",2,2,1,1, 365.) 
                -170.164 * getSMEFTCoeff("Cqu1R",0,0,2,2, 365.) 
                +311.896 * getSMEFTCoeff("Cqu1R",2,2,0,0, 365.) 
                +63813.3 * getSMEFTCoeff("Cqu8R",0,0,2,2, 365.) 
                +8432.27 * getSMEFTCoeff("Cqu8R",1,1,2,2, 365.) 
                +38423.5 * getSMEFTCoeff("Cqu8R",2,2,0,0, 365.) 
                +3567.6 * getSMEFTCoeff("Cqu8R",2,2,1,1, 365.) 
                +257.491 * getSMEFTCoeff("Cqd1R",2,2,0,0, 365.) 
                +26761.1 * getSMEFTCoeff("Cqd8R",2,2,0,0, 365.) 
                +4787.32 * getSMEFTCoeff("Cqd8R",2,2,1,1, 365.) 
                -59260.6 * getSMEFTCoeff("CHl3R",0,0, 365.) 
                -61218.1 * getSMEFTCoeff("CHl3R",1,1, 365.) 
                +61585.3 * getSMEFTCoeff("CllR",0,1,1,0, 365.) 
                -4046.41 * getSMEFTCoeff("Cqq1R",2,2,2,2, 365.) 
                -5153.28 * getSMEFTCoeff("Cqq3R",2,2,2,2, 365.) 
                +1902.35 * getSMEFTCoeff("Cud8R",2,2,2,2, 365.) 
                -1787.31 * getSMEFTCoeff("Cqu1R",2,2,2,2, 365.) 
                -513.613 * getSMEFTCoeff("Cqu8R",2,2,2,2, 365.) 
                +1855.66 * getSMEFTCoeff("Cqd8R",2,2,2,2, 365.) 
                ;
 
        dchi2Tot += sigmapTH_Bin5a0 * sigmapTH_Bin5a0/0.023/0.023; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTH_Bin6a0 = 0.0, sigmapTH_Bin6a0 = 0.0; 
 
        sigmaSMpTH_Bin6a0 = 0.; //Only NP contribution 
 
        sigmapTH_Bin6a0 = sigmaSMpTH_Bin6a0 
                +203356. * getSMEFTCoeff("CG", 550.) 
                -121059. * getSMEFTCoeff("CuHR",2,2, 550.) 
                -485.891 * getSMEFTCoeff("CHq3R",2,2, 550.) 
                +233.977 * getSMEFTCoeff("CHuR",2,2, 550.) 
                -520257. * getSMEFTCoeff("CuGR",2,2, 550.) 
                +252833. * getSMEFTCoeff("Cqq1R",0,2,2,0, 550.) 
                +20407.7 * getSMEFTCoeff("Cqq1R",1,2,2,1, 550.) 
                +587056. * getSMEFTCoeff("Cqq3R",0,2,2,0, 550.) 
                +75277.2 * getSMEFTCoeff("Cqq3R",1,2,2,1, 550.) 
                +149.136 * getSMEFTCoeff("CuuR",0,0,2,2, 550.) 
                +255293. * getSMEFTCoeff("CuuR",0,2,2,0, 550.) 
                +20353.2 * getSMEFTCoeff("CuuR",1,2,2,1, 550.) 
                +309.821 * getSMEFTCoeff("Cud1R",2,2,0,0, 550.) 
                +41480. * getSMEFTCoeff("Cud8R",2,2,0,0, 550.) 
                +6866.86 * getSMEFTCoeff("Cud8R",2,2,1,1, 550.) 
                -116.694 * getSMEFTCoeff("Cqu1R",0,0,2,2, 550.) 
                +201.396 * getSMEFTCoeff("Cqu1R",2,2,0,0, 550.) 
                +105234. * getSMEFTCoeff("Cqu8R",0,0,2,2, 550.) 
                +12066.6 * getSMEFTCoeff("Cqu8R",1,1,2,2, 550.) 
                +63201. * getSMEFTCoeff("Cqu8R",2,2,0,0, 550.) 
                +5141.25 * getSMEFTCoeff("Cqu8R",2,2,1,1, 550.) 
                +252.903 * getSMEFTCoeff("Cqd1R",2,2,0,0, 550.) 
                +41766.5 * getSMEFTCoeff("Cqd8R",2,2,0,0, 550.) 
                +6890.86 * getSMEFTCoeff("Cqd8R",2,2,1,1, 550.) 
                -58976.9 * getSMEFTCoeff("CHl3R",0,0, 550.) 
                -61380.7 * getSMEFTCoeff("CHl3R",1,1, 550.) 
                +61147.1 * getSMEFTCoeff("CllR",0,1,1,0, 550.) 
                -5343.81 * getSMEFTCoeff("Cqq1R",2,2,2,2, 550.) 
                -5719.86 * getSMEFTCoeff("Cqq3R",2,2,2,2, 550.) 
                +2663.6 * getSMEFTCoeff("Cud8R",2,2,2,2, 550.) 
                -2525.46 * getSMEFTCoeff("Cqu1R",2,2,2,2, 550.) 
                -723.906 * getSMEFTCoeff("Cqu8R",2,2,2,2, 550.) 
                +2602.76 * getSMEFTCoeff("Cqd8R",2,2,2,2, 550.) 
                ;
 
        dchi2Tot += sigmapTH_Bin6a0 * sigmapTH_Bin6a0/0.0261/0.0261; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTH_Bin7a0 = 0.0, sigmapTH_Bin7a0 = 0.0; 
 
        sigmaSMpTH_Bin7a0 = 0.; //Only NP contribution 
 
        sigmapTH_Bin7a0 = sigmaSMpTH_Bin7a0 
                +55737.5 * getSMEFTCoeff("CG", 550.) 
                -123218. * getSMEFTCoeff("CuHR",2,2, 550.) 
                -294.839 * getSMEFTCoeff("CHq1R",0,0, 550.) 
                -2752.38 * getSMEFTCoeff("CHq3R",2,2, 550.) 
                -242.009 * getSMEFTCoeff("CHuR",2,2, 550.) 
                -318452. * getSMEFTCoeff("CuGR",2,2, 550.) 
                -327.336 * getSMEFTCoeff("Cqq1R",0,0,2,2, 550.) 
                +420669. * getSMEFTCoeff("Cqq1R",0,2,2,0, 550.) 
                +28839.4 * getSMEFTCoeff("Cqq1R",1,2,2,1, 550.) 
                -225.029 * getSMEFTCoeff("Cqq3R",0,0,2,2, 550.) 
                +963096. * getSMEFTCoeff("Cqq3R",0,2,2,0, 550.) 
                +108027. * getSMEFTCoeff("Cqq3R",1,2,2,1, 550.) 
                -271.377 * getSMEFTCoeff("CuuR",0,0,2,2, 550.) 
                +421633. * getSMEFTCoeff("CuuR",0,2,2,0, 550.) 
                +29185.1 * getSMEFTCoeff("CuuR",1,2,2,1, 550.) 
                +67018. * getSMEFTCoeff("Cud8R",2,2,0,0, 550.) 
                +9837.98 * getSMEFTCoeff("Cud8R",2,2,1,1, 550.) 
                +171564. * getSMEFTCoeff("Cqu8R",0,0,2,2, 550.) 
                +17175.4 * getSMEFTCoeff("Cqu8R",1,1,2,2, 550.) 
                +104720. * getSMEFTCoeff("Cqu8R",2,2,0,0, 550.) 
                +7244.19 * getSMEFTCoeff("Cqu8R",2,2,1,1, 550.) 
                +67831.8 * getSMEFTCoeff("Cqd8R",2,2,0,0, 550.) 
                +9859.54 * getSMEFTCoeff("Cqd8R",2,2,1,1, 550.) 
                -60838. * getSMEFTCoeff("CHl3R",0,0, 550.) 
                -59966.8 * getSMEFTCoeff("CHl3R",1,1, 550.) 
                +60776.8 * getSMEFTCoeff("CllR",0,1,1,0, 550.) 
                -7378.8 * getSMEFTCoeff("Cqq1R",2,2,2,2, 550.) 
                -6914.29 * getSMEFTCoeff("Cqq3R",2,2,2,2, 550.) 
                +3679.44 * getSMEFTCoeff("Cud8R",2,2,2,2, 550.) 
                -3592.8 * getSMEFTCoeff("Cqu1R",2,2,2,2, 550.) 
                -1042.06 * getSMEFTCoeff("Cqu8R",2,2,2,2, 550.) 
                +3664.37 * getSMEFTCoeff("Cqd8R",2,2,2,2, 550.) 
                ;
 
        dchi2Tot += sigmapTH_Bin7a0 * sigmapTH_Bin7a0/0.0311/0.0311; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTH_Bin8a0 = 0.0, sigmapTH_Bin8a0 = 0.0; 
 
        sigmaSMpTH_Bin8a0 = 0.; //Only NP contribution 
 
        sigmapTH_Bin8a0 = sigmaSMpTH_Bin8a0 
                -472443. * getSMEFTCoeff("CG", 1000.) 
                -121162. * getSMEFTCoeff("CuHR",2,2, 1000.) 
                -254.543 * getSMEFTCoeff("CHuR",0,0, 1000.) 
                -7161.9 * getSMEFTCoeff("CHq3R",2,2, 1000.) 
                -229.553 * getSMEFTCoeff("CHuR",2,2, 1000.) 
                -42258.8 * getSMEFTCoeff("CuGR",2,2, 1000.) 
                -367.083 * getSMEFTCoeff("Cqq1R",0,0,2,2, 1000.) 
                +1298534. * getSMEFTCoeff("Cqq1R",0,2,2,0, 1000.) 
                +60601.7 * getSMEFTCoeff("Cqq1R",1,2,2,1, 1000.) 
                +2898698. * getSMEFTCoeff("Cqq3R",0,2,2,0, 1000.) 
                +232388. * getSMEFTCoeff("Cqq3R",1,2,2,1, 1000.) 
                +1300402. * getSMEFTCoeff("CuuR",0,2,2,0, 1000.) 
                +60710.8 * getSMEFTCoeff("CuuR",1,2,2,1, 1000.) 
                +199470. * getSMEFTCoeff("Cud8R",2,2,0,0, 1000.) 
                +21629.1 * getSMEFTCoeff("Cud8R",2,2,1,1, 1000.) 
                +307.495 * getSMEFTCoeff("Cqu1R",0,0,2,2, 1000.) 
                -171.864 * getSMEFTCoeff("Cqu1R",2,2,0,0, 1000.) 
                +524187. * getSMEFTCoeff("Cqu8R",0,0,2,2, 1000.) 
                +36550.5 * getSMEFTCoeff("Cqu8R",1,1,2,2, 1000.) 
                +323956. * getSMEFTCoeff("Cqu8R",2,2,0,0, 1000.) 
                +15116.2 * getSMEFTCoeff("Cqu8R",2,2,1,1, 1000.) 
                +220.434 * getSMEFTCoeff("Cqd1R",2,2,0,0, 1000.) 
                +199469. * getSMEFTCoeff("Cqd8R",2,2,0,0, 1000.) 
                +21713.8 * getSMEFTCoeff("Cqd8R",2,2,1,1, 1000.) 
                -60569.2 * getSMEFTCoeff("CHl3R",0,0, 1000.) 
                -61646.4 * getSMEFTCoeff("CHl3R",1,1, 1000.) 
                +60909.4 * getSMEFTCoeff("CllR",0,1,1,0, 1000.) 
                -14265. * getSMEFTCoeff("Cqq1R",2,2,2,2, 1000.) 
                -11804.6 * getSMEFTCoeff("Cqq3R",2,2,2,2, 1000.) 
                +7506.66 * getSMEFTCoeff("Cud8R",2,2,2,2, 1000.) 
                -7511.84 * getSMEFTCoeff("Cqu1R",2,2,2,2, 1000.) 
                -2451.46 * getSMEFTCoeff("Cqu8R",2,2,2,2, 1000.) 
                +7525.76 * getSMEFTCoeff("Cqd8R",2,2,2,2, 1000.) 
                ;
 
        dchi2Tot += sigmapTH_Bin8a0 * sigmapTH_Bin8a0/0.0489/0.0489; 
 
 
//----------------------------------------------------------- 
 
    return dchi2Tot; 
 
}



const double NPSMEFTd6General::chi2FCChhZtt() const
{
    double dchi2Tot = 0.0;

    double sigmaSMpTZ_Bin1a0 = 0.0, sigmapTZ_Bin1a0 = 0.0; 
 
        sigmaSMpTZ_Bin1a0 = 0.; //Only NP contribution 
 
        sigmapTZ_Bin1a0 = sigmaSMpTZ_Bin1a0 
                -269145. * getSMEFTCoeff("CG", 100.) 
                +2080.72 * getSMEFTCoeff("CHq1R",0,0, 100.) 
                +11217.6 * getSMEFTCoeff("CHq3R",0,0, 100.) 
                +1276.43 * getSMEFTCoeff("CHuR",0,0, 100.) 
                -1854.26 * getSMEFTCoeff("CHdR",0,0, 100.) 
                +1027.54 * getSMEFTCoeff("CHq1R",1,1, 100.) 
                +2320.34 * getSMEFTCoeff("CHq3R",1,1, 100.) 
                +229.545 * getSMEFTCoeff("CHuR",1,1, 100.) 
                -463.214 * getSMEFTCoeff("CHdR",1,1, 100.) 
                -126725. * getSMEFTCoeff("CHq1R",2,2, 100.) 
                +128406. * getSMEFTCoeff("CHq3R",2,2, 100.) 
                +67351.7 * getSMEFTCoeff("CHuR",2,2, 100.) 
                -311031. * getSMEFTCoeff("CuGR",2,2, 100.) 
                +285.746 * getSMEFTCoeff("Cqq1R",0,0,2,2, 100.) 
                +44961.5 * getSMEFTCoeff("Cqq1R",0,2,2,0, 100.) 
                +5093.2 * getSMEFTCoeff("Cqq1R",1,2,2,1, 100.) 
                +98.1295 * getSMEFTCoeff("Cqq3R",0,0,2,2, 100.) 
                +250097. * getSMEFTCoeff("Cqq3R",0,2,2,0, 100.) 
                +49234. * getSMEFTCoeff("Cqq3R",1,2,2,1, 100.) 
                +300.125 * getSMEFTCoeff("CuuR",0,0,2,2, 100.) 
                +12468.8 * getSMEFTCoeff("CuuR",0,2,2,0, 100.) 
                +1538.24 * getSMEFTCoeff("CuuR",1,2,2,1, 100.) 
                +512.187 * getSMEFTCoeff("Cud1R",2,2,0,0, 100.) 
                +3735.49 * getSMEFTCoeff("Cud8R",2,2,0,0, 100.) 
                +839.885 * getSMEFTCoeff("Cud8R",2,2,1,1, 100.) 
                +388.534 * getSMEFTCoeff("Cqu1R",0,0,2,2, 100.) 
                +270.232 * getSMEFTCoeff("Cqu1R",2,2,0,0, 100.) 
                +30489.2 * getSMEFTCoeff("Cqu8R",0,0,2,2, 100.) 
                +5636.73 * getSMEFTCoeff("Cqu8R",1,1,2,2, 100.) 
                +6560.32 * getSMEFTCoeff("Cqu8R",2,2,0,0, 100.) 
                +732.439 * getSMEFTCoeff("Cqu8R",2,2,1,1, 100.) 
                +188.252 * getSMEFTCoeff("Cqd1R",2,2,0,0, 100.) 
                +7277.99 * getSMEFTCoeff("Cqd8R",2,2,0,0, 100.) 
                +1491.77 * getSMEFTCoeff("Cqd8R",2,2,1,1, 100.) 
                -59566.1 * getSMEFTCoeff("CHl3R",0,0, 100.) 
                -59929.9 * getSMEFTCoeff("CHl3R",1,1, 100.) 
                +60925.3 * getSMEFTCoeff("CllR",0,1,1,0, 100.) 
                -205.833 * getSMEFTCoeff("CHdR",2,2, 100.) 
                +18068.6 * getSMEFTCoeff("Cqq3R",2,2,2,2, 100.) 
                +428.576 * getSMEFTCoeff("Cud8R",2,2,2,2, 100.) 
                +1799.74 * getSMEFTCoeff("Cqu8R",2,2,2,2, 100.) 
                +632.096 * getSMEFTCoeff("Cqd8R",2,2,2,2, 100.) 
                ;
 
        dchi2Tot += sigmapTZ_Bin1a0 * sigmapTZ_Bin1a0/0.03188/0.03188; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTZ_Bin2a0 = 0.0, sigmapTZ_Bin2a0 = 0.0; 
 
        sigmaSMpTZ_Bin2a0 = 0.; //Only NP contribution 
 
        sigmapTZ_Bin2a0 = sigmaSMpTZ_Bin2a0 
                -366910. * getSMEFTCoeff("CG", 125.) 
                +588.843 * getSMEFTCoeff("CHq1R",0,0, 125.) 
                +6150.52 * getSMEFTCoeff("CHq3R",0,0, 125.) 
                +713.391 * getSMEFTCoeff("CHuR",0,0, 125.) 
                -1256.66 * getSMEFTCoeff("CHdR",0,0, 125.) 
                +457.427 * getSMEFTCoeff("CHq1R",1,1, 125.) 
                +1190.24 * getSMEFTCoeff("CHq3R",1,1, 125.) 
                +124.676 * getSMEFTCoeff("CHuR",1,1, 125.) 
                -260.095 * getSMEFTCoeff("CHdR",1,1, 125.) 
                -128225. * getSMEFTCoeff("CHq1R",2,2, 125.) 
                +128872. * getSMEFTCoeff("CHq3R",2,2, 125.) 
                +81820.2 * getSMEFTCoeff("CHuR",2,2, 125.) 
                -329068. * getSMEFTCoeff("CuGR",2,2, 125.) 
                +42566.4 * getSMEFTCoeff("Cqq1R",0,2,2,0, 125.) 
                +4305.46 * getSMEFTCoeff("Cqq1R",1,2,2,1, 125.) 
                -225.775 * getSMEFTCoeff("Cqq3R",0,0,2,2, 125.) 
                +205854. * getSMEFTCoeff("Cqq3R",0,2,2,0, 125.) 
                +37105.1 * getSMEFTCoeff("Cqq3R",1,2,2,1, 125.) 
                +202.608 * getSMEFTCoeff("CuuR",0,0,2,2, 125.) 
                +17042.7 * getSMEFTCoeff("CuuR",0,2,2,0, 125.) 
                +1745.77 * getSMEFTCoeff("CuuR",1,2,2,1, 125.) 
                +3769.99 * getSMEFTCoeff("Cud8R",2,2,0,0, 125.) 
                +852.984 * getSMEFTCoeff("Cud8R",2,2,1,1, 125.) 
                +152.485 * getSMEFTCoeff("Cqu1R",0,0,2,2, 125.) 
                +214.642 * getSMEFTCoeff("Cqu1R",2,2,0,0, 125.) 
                +23736.5 * getSMEFTCoeff("Cqu8R",0,0,2,2, 125.) 
                +3976.85 * getSMEFTCoeff("Cqu8R",1,1,2,2, 125.) 
                +6417.76 * getSMEFTCoeff("Cqu8R",2,2,0,0, 125.) 
                +728.204 * getSMEFTCoeff("Cqu8R",2,2,1,1, 125.) 
                +6953.24 * getSMEFTCoeff("Cqd8R",2,2,0,0, 125.) 
                +1391.26 * getSMEFTCoeff("Cqd8R",2,2,1,1, 125.) 
                -61063.5 * getSMEFTCoeff("CHl3R",0,0, 125.) 
                -60731.5 * getSMEFTCoeff("CHl3R",1,1, 125.) 
                +61218.6 * getSMEFTCoeff("CllR",0,1,1,0, 125.) 
                -105.913 * getSMEFTCoeff("CHdR",2,2, 125.) 
                +13037.3 * getSMEFTCoeff("Cqq3R",2,2,2,2, 125.) 
                +360.155 * getSMEFTCoeff("Cud8R",2,2,2,2, 125.) 
                +1259.41 * getSMEFTCoeff("Cqu8R",2,2,2,2, 125.) 
                +567.738 * getSMEFTCoeff("Cqd8R",2,2,2,2, 125.) 
                ;
 
        dchi2Tot += sigmapTZ_Bin2a0 * sigmapTZ_Bin2a0/0.03107/0.03107; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTZ_Bin3a0 = 0.0, sigmapTZ_Bin3a0 = 0.0; 
 
        sigmaSMpTZ_Bin3a0 = 0.; //Only NP contribution 
 
        sigmapTZ_Bin3a0 = sigmaSMpTZ_Bin3a0 
                -493167. * getSMEFTCoeff("CG", 240.) 
                +124.112 * getSMEFTCoeff("CHq1R",0,0, 240.) 
                +4405.53 * getSMEFTCoeff("CHq3R",0,0, 240.) 
                +741.306 * getSMEFTCoeff("CHuR",0,0, 240.) 
                -589.589 * getSMEFTCoeff("CHdR",0,0, 240.) 
                +234.475 * getSMEFTCoeff("CHq1R",1,1, 240.) 
                +766.296 * getSMEFTCoeff("CHq3R",1,1, 240.) 
                -144.433 * getSMEFTCoeff("CHdR",1,1, 240.) 
                -127859. * getSMEFTCoeff("CHq1R",2,2, 240.) 
                +127728. * getSMEFTCoeff("CHq3R",2,2, 240.) 
                +90035.7 * getSMEFTCoeff("CHuR",2,2, 240.) 
                -343660. * getSMEFTCoeff("CuGR",2,2, 240.) 
                +52983.9 * getSMEFTCoeff("Cqq1R",0,2,2,0, 240.) 
                +4678.96 * getSMEFTCoeff("Cqq1R",1,2,2,1, 240.) 
                -477.124 * getSMEFTCoeff("Cqq3R",0,0,2,2, 240.) 
                +223204. * getSMEFTCoeff("Cqq3R",0,2,2,0, 240.) 
                +35196. * getSMEFTCoeff("Cqq3R",1,2,2,1, 240.) 
                +23582.7 * getSMEFTCoeff("CuuR",0,2,2,0, 240.) 
                +2444.14 * getSMEFTCoeff("CuuR",1,2,2,1, 240.) 
                -170.655 * getSMEFTCoeff("Cud1R",2,2,0,0, 240.) 
                +3548.04 * getSMEFTCoeff("Cud8R",2,2,0,0, 240.) 
                +782.141 * getSMEFTCoeff("Cud8R",2,2,1,1, 240.) 
                -186.58 * getSMEFTCoeff("Cqu1R",1,1,2,2, 240.) 
                -252.827 * getSMEFTCoeff("Cqu1R",2,2,0,0, 240.) 
                +25382.1 * getSMEFTCoeff("Cqu8R",0,0,2,2, 240.) 
                +3708.29 * getSMEFTCoeff("Cqu8R",1,1,2,2, 240.) 
                +9948.97 * getSMEFTCoeff("Cqu8R",2,2,0,0, 240.) 
                +970.584 * getSMEFTCoeff("Cqu8R",2,2,1,1, 240.) 
                -404.699 * getSMEFTCoeff("Cqd1R",2,2,0,0, 240.) 
                +8771.16 * getSMEFTCoeff("Cqd8R",2,2,0,0, 240.) 
                +1691.29 * getSMEFTCoeff("Cqd8R",2,2,1,1, 240.) 
                -60918.7 * getSMEFTCoeff("CHl3R",0,0, 240.) 
                -61568.2 * getSMEFTCoeff("CHl3R",1,1, 240.) 
                +60993.2 * getSMEFTCoeff("CllR",0,1,1,0, 240.) 
                +12169.4 * getSMEFTCoeff("Cqq3R",2,2,2,2, 240.) 
                +422.073 * getSMEFTCoeff("Cud8R",2,2,2,2, 240.) 
                +1113.08 * getSMEFTCoeff("Cqu8R",2,2,2,2, 240.) 
                +666.612 * getSMEFTCoeff("Cqd8R",2,2,2,2, 240.) 
                ;
 
        dchi2Tot += sigmapTZ_Bin3a0 * sigmapTZ_Bin3a0/0.02971/0.02971; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTZ_Bin4a0 = 0.0, sigmapTZ_Bin4a0 = 0.0; 
 
        sigmaSMpTZ_Bin4a0 = 0.; //Only NP contribution 
 
        sigmapTZ_Bin4a0 = sigmaSMpTZ_Bin4a0 
                -636066. * getSMEFTCoeff("CG", 365.) 
                +344.015 * getSMEFTCoeff("CHq1R",0,0, 365.) 
                +4432.83 * getSMEFTCoeff("CHq3R",0,0, 365.) 
                +1087.56 * getSMEFTCoeff("CHuR",0,0, 365.) 
                -188.864 * getSMEFTCoeff("CHdR",0,0, 365.) 
                +287.083 * getSMEFTCoeff("CHq1R",1,1, 365.) 
                +657.433 * getSMEFTCoeff("CHq3R",1,1, 365.) 
                +149.946 * getSMEFTCoeff("CHuR",1,1, 365.) 
                -127196. * getSMEFTCoeff("CHq1R",2,2, 365.) 
                +128229. * getSMEFTCoeff("CHq3R",2,2, 365.) 
                +93151.8 * getSMEFTCoeff("CHuR",2,2, 365.) 
                -358538. * getSMEFTCoeff("CuGR",2,2, 365.) 
                +609.77 * getSMEFTCoeff("Cqq1R",0,0,2,2, 365.) 
                +78581.7 * getSMEFTCoeff("Cqq1R",0,2,2,0, 365.) 
                +117.378 * getSMEFTCoeff("Cqq1R",1,1,2,2, 365.) 
                +6588.67 * getSMEFTCoeff("Cqq1R",1,2,2,1, 365.) 
                +498.232 * getSMEFTCoeff("Cqq3R",0,0,2,2, 365.) 
                +296926. * getSMEFTCoeff("Cqq3R",0,2,2,0, 365.) 
                +42594.1 * getSMEFTCoeff("Cqq3R",1,2,2,1, 365.) 
                +491.776 * getSMEFTCoeff("CuuR",0,0,2,2, 365.) 
                +41762.8 * getSMEFTCoeff("CuuR",0,2,2,0, 365.) 
                +3623.17 * getSMEFTCoeff("CuuR",1,2,2,1, 365.) 
                +562.222 * getSMEFTCoeff("Cud1R",2,2,0,0, 365.) 
                +8284.78 * getSMEFTCoeff("Cud8R",2,2,0,0, 365.) 
                +1422.73 * getSMEFTCoeff("Cud8R",2,2,1,1, 365.) 
                +406.346 * getSMEFTCoeff("Cqu1R",0,0,2,2, 365.) 
                +34860.4 * getSMEFTCoeff("Cqu8R",0,0,2,2, 365.) 
                +4675.45 * getSMEFTCoeff("Cqu8R",1,1,2,2, 365.) 
                +17810.2 * getSMEFTCoeff("Cqu8R",2,2,0,0, 365.) 
                +1414.42 * getSMEFTCoeff("Cqu8R",2,2,1,1, 365.) 
                +14559.8 * getSMEFTCoeff("Cqd8R",2,2,0,0, 365.) 
                +2405.41 * getSMEFTCoeff("Cqd8R",2,2,1,1, 365.) 
                -58566.6 * getSMEFTCoeff("CHl3R",0,0, 365.) 
                -57942.6 * getSMEFTCoeff("CHl3R",1,1, 365.) 
                +61721.4 * getSMEFTCoeff("CllR",0,1,1,0, 365.) 
                +13978.9 * getSMEFTCoeff("Cqq3R",2,2,2,2, 365.) 
                +601.947 * getSMEFTCoeff("Cud8R",2,2,2,2, 365.) 
                +1258.07 * getSMEFTCoeff("Cqu8R",2,2,2,2, 365.) 
                +955.48 * getSMEFTCoeff("Cqd8R",2,2,2,2, 365.) 
                ;
 
        dchi2Tot += sigmapTZ_Bin4a0 * sigmapTZ_Bin4a0/0.02989/0.02989; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTZ_Bin5a0 = 0.0, sigmapTZ_Bin5a0 = 0.0; 
 
        sigmaSMpTZ_Bin5a0 = 0.; //Only NP contribution 
 
        sigmapTZ_Bin5a0 = sigmaSMpTZ_Bin5a0 
                -798294. * getSMEFTCoeff("CG", 365.) 
                -721.951 * getSMEFTCoeff("CHq1R",0,0, 365.) 
                +4037.01 * getSMEFTCoeff("CHq3R",0,0, 365.) 
                +557.169 * getSMEFTCoeff("CHuR",0,0, 365.) 
                -1035.22 * getSMEFTCoeff("CHdR",0,0, 365.) 
                +142.26 * getSMEFTCoeff("CHq1R",1,1, 365.) 
                +439.738 * getSMEFTCoeff("CHq3R",1,1, 365.) 
                -188.842 * getSMEFTCoeff("CHdR",1,1, 365.) 
                -126729. * getSMEFTCoeff("CHq1R",2,2, 365.) 
                +126258. * getSMEFTCoeff("CHq3R",2,2, 365.) 
                +93682.8 * getSMEFTCoeff("CHuR",2,2, 365.) 
                -368805. * getSMEFTCoeff("CuGR",2,2, 365.) 
                -367.92 * getSMEFTCoeff("Cqq1R",0,0,2,2, 365.) 
                +115509. * getSMEFTCoeff("Cqq1R",0,2,2,0, 365.) 
                +8944.31 * getSMEFTCoeff("Cqq1R",1,2,2,1, 365.) 
                -432.96 * getSMEFTCoeff("Cqq3R",0,0,2,2, 365.) 
                +411791. * getSMEFTCoeff("Cqq3R",0,2,2,0, 365.) 
                +53998.2 * getSMEFTCoeff("Cqq3R",1,2,2,1, 365.) 
                -351.415 * getSMEFTCoeff("CuuR",0,0,2,2, 365.) 
                +64259.7 * getSMEFTCoeff("CuuR",0,2,2,0, 365.) 
                +5028.14 * getSMEFTCoeff("CuuR",1,2,2,1, 365.) 
                +11370.6 * getSMEFTCoeff("Cud8R",2,2,0,0, 365.) 
                +1800.96 * getSMEFTCoeff("Cud8R",2,2,1,1, 365.) 
                +113.616 * getSMEFTCoeff("Cqu1R",0,0,2,2, 365.) 
                -604.009 * getSMEFTCoeff("Cqu1R",2,2,0,0, 365.) 
                +48271.1 * getSMEFTCoeff("Cqu8R",0,0,2,2, 365.) 
                +5828.68 * getSMEFTCoeff("Cqu8R",1,1,2,2, 365.) 
                +23200.1 * getSMEFTCoeff("Cqu8R",2,2,0,0, 365.) 
                +1848.04 * getSMEFTCoeff("Cqu8R",2,2,1,1, 365.) 
                -281.148 * getSMEFTCoeff("Cqd1R",2,2,0,0, 365.) 
                +19326.7 * getSMEFTCoeff("Cqd8R",2,2,0,0, 365.) 
                +2799.62 * getSMEFTCoeff("Cqd8R",2,2,1,1, 365.) 
                -60228.3 * getSMEFTCoeff("CHl3R",0,0, 365.) 
                -61686. * getSMEFTCoeff("CHl3R",1,1, 365.) 
                +61046.9 * getSMEFTCoeff("CllR",0,1,1,0, 365.) 
                +17296.3 * getSMEFTCoeff("Cqq3R",2,2,2,2, 365.) 
                +753.436 * getSMEFTCoeff("Cud8R",2,2,2,2, 365.) 
                +1455.17 * getSMEFTCoeff("Cqu8R",2,2,2,2, 365.) 
                +1098.62 * getSMEFTCoeff("Cqd8R",2,2,2,2, 365.) 
                ;
 
        dchi2Tot += sigmapTZ_Bin5a0 * sigmapTZ_Bin5a0/0.03077/0.03077; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTZ_Bin6a0 = 0.0, sigmapTZ_Bin6a0 = 0.0; 
 
        sigmaSMpTZ_Bin6a0 = 0.; //Only NP contribution 
 
        sigmapTZ_Bin6a0 = sigmaSMpTZ_Bin6a0 
                -1002548. * getSMEFTCoeff("CG", 550.) 
                -205.967 * getSMEFTCoeff("CHq1R",0,0, 550.) 
                +4858.96 * getSMEFTCoeff("CHq3R",0,0, 550.) 
                +882.666 * getSMEFTCoeff("CHuR",0,0, 550.) 
                -502.35 * getSMEFTCoeff("CHdR",0,0, 550.) 
                +234.393 * getSMEFTCoeff("CHq1R",1,1, 550.) 
                +684.82 * getSMEFTCoeff("CHq3R",1,1, 550.) 
                -126028. * getSMEFTCoeff("CHq1R",2,2, 550.) 
                +125808. * getSMEFTCoeff("CHq3R",2,2, 550.) 
                +93559.4 * getSMEFTCoeff("CHuR",2,2, 550.) 
                -373828. * getSMEFTCoeff("CuGR",2,2, 550.) 
                +301.438 * getSMEFTCoeff("Cqq1R",0,0,2,2, 550.) 
                +183431. * getSMEFTCoeff("Cqq1R",0,2,2,0, 550.) 
                +12519.5 * getSMEFTCoeff("Cqq1R",1,2,2,1, 550.) 
                +619542. * getSMEFTCoeff("Cqq3R",0,2,2,0, 550.) 
                +73884.6 * getSMEFTCoeff("Cqq3R",1,2,2,1, 550.) 
                +106009. * getSMEFTCoeff("CuuR",0,2,2,0, 550.) 
                +7918.64 * getSMEFTCoeff("CuuR",1,2,2,1, 550.) 
                +18928.2 * getSMEFTCoeff("Cud8R",2,2,0,0, 550.) 
                +2800.13 * getSMEFTCoeff("Cud8R",2,2,1,1, 550.) 
                -110.184 * getSMEFTCoeff("Cqu1R",2,2,0,0, 550.) 
                +73866.4 * getSMEFTCoeff("Cqu8R",0,0,2,2, 550.) 
                +7974.81 * getSMEFTCoeff("Cqu8R",1,1,2,2, 550.) 
                +40360.9 * getSMEFTCoeff("Cqu8R",2,2,0,0, 550.) 
                +2848.83 * getSMEFTCoeff("Cqu8R",2,2,1,1, 550.) 
                -127.89 * getSMEFTCoeff("Cqd1R",2,2,0,0, 550.) 
                +30210. * getSMEFTCoeff("Cqd8R",2,2,0,0, 550.) 
                +4316.48 * getSMEFTCoeff("Cqd8R",2,2,1,1, 550.) 
                -60275.3 * getSMEFTCoeff("CHl3R",0,0, 550.) 
                -59911.4 * getSMEFTCoeff("CHl3R",1,1, 550.) 
                +61225.6 * getSMEFTCoeff("CllR",0,1,1,0, 550.) 
                +22994.9 * getSMEFTCoeff("Cqq3R",2,2,2,2, 550.) 
                +1107.68 * getSMEFTCoeff("Cud8R",2,2,2,2, 550.) 
                +2114.19 * getSMEFTCoeff("Cqu8R",2,2,2,2, 550.) 
                +1597.65 * getSMEFTCoeff("Cqd8R",2,2,2,2, 550.) 
                ;
 
        dchi2Tot += sigmapTZ_Bin6a0 * sigmapTZ_Bin6a0/0.03065/0.03065; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTZ_Bin7a0 = 0.0, sigmapTZ_Bin7a0 = 0.0; 
 
        sigmaSMpTZ_Bin7a0 = 0.; //Only NP contribution 
 
        sigmapTZ_Bin7a0 = sigmaSMpTZ_Bin7a0 
                -1288062. * getSMEFTCoeff("CG", 550.) 
                +5661.04 * getSMEFTCoeff("CHq3R",0,0, 550.) 
                +777.098 * getSMEFTCoeff("CHuR",0,0, 550.) 
                -871.268 * getSMEFTCoeff("CHdR",0,0, 550.) 
                +203.443 * getSMEFTCoeff("CHq1R",1,1, 550.) 
                +596.723 * getSMEFTCoeff("CHq3R",1,1, 550.) 
                -152.373 * getSMEFTCoeff("CHdR",1,1, 550.) 
                -125040. * getSMEFTCoeff("CHq1R",2,2, 550.) 
                +124842. * getSMEFTCoeff("CHq3R",2,2, 550.) 
                +93954.7 * getSMEFTCoeff("CHuR",2,2, 550.) 
                -371081. * getSMEFTCoeff("CuGR",2,2, 550.) 
                +309660. * getSMEFTCoeff("Cqq1R",0,2,2,0, 550.) 
                +18705.3 * getSMEFTCoeff("Cqq1R",1,2,2,1, 550.) 
                -264.105 * getSMEFTCoeff("Cqq3R",0,0,2,2, 550.) 
                +987418. * getSMEFTCoeff("Cqq3R",0,2,2,0, 550.) 
                +105839. * getSMEFTCoeff("Cqq3R",1,2,2,1, 550.) 
                -243.479 * getSMEFTCoeff("CuuR",0,0,2,2, 550.) 
                +186685. * getSMEFTCoeff("CuuR",0,2,2,0, 550.) 
                +12142.9 * getSMEFTCoeff("CuuR",1,2,2,1, 550.) 
                -178.168 * getSMEFTCoeff("Cud1R",2,2,0,0, 550.) 
                +30504.9 * getSMEFTCoeff("Cud8R",2,2,0,0, 550.) 
                +4351.12 * getSMEFTCoeff("Cud8R",2,2,1,1, 550.) 
                -334.142 * getSMEFTCoeff("Cqu1R",0,0,2,2, 550.) 
                -173.226 * getSMEFTCoeff("Cqu1R",2,2,0,0, 550.) 
                +118380. * getSMEFTCoeff("Cqu8R",0,0,2,2, 550.) 
                +11475.4 * getSMEFTCoeff("Cqu8R",1,1,2,2, 550.) 
                +67974.2 * getSMEFTCoeff("Cqu8R",2,2,0,0, 550.) 
                +4137.41 * getSMEFTCoeff("Cqu8R",2,2,1,1, 550.) 
                +50502.1 * getSMEFTCoeff("Cqd8R",2,2,0,0, 550.) 
                +6561.82 * getSMEFTCoeff("Cqd8R",2,2,1,1, 550.) 
                -60819.6 * getSMEFTCoeff("CHl3R",0,0, 550.) 
                -59366.5 * getSMEFTCoeff("CHl3R",1,1, 550.) 
                +59729.8 * getSMEFTCoeff("CllR",0,1,1,0, 550.) 
                +31925.4 * getSMEFTCoeff("Cqq3R",2,2,2,2, 550.) 
                +1602.47 * getSMEFTCoeff("Cud8R",2,2,2,2, 550.) 
                +2803.8 * getSMEFTCoeff("Cqu8R",2,2,2,2, 550.) 
                +2478.36 * getSMEFTCoeff("Cqd8R",2,2,2,2, 550.) 
                ;
 
        dchi2Tot += sigmapTZ_Bin7a0 * sigmapTZ_Bin7a0/0.03407/0.03407; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTZ_Bin8a0 = 0.0, sigmapTZ_Bin8a0 = 0.0; 
 
        sigmaSMpTZ_Bin8a0 = 0.; //Only NP contribution 
 
        sigmapTZ_Bin8a0 = sigmaSMpTZ_Bin8a0 
                -1630199. * getSMEFTCoeff("CG", 550.) 
                -587.49 * getSMEFTCoeff("CHq1R",0,0, 550.) 
                +6995.9 * getSMEFTCoeff("CHq3R",0,0, 550.) 
                +1751.23 * getSMEFTCoeff("CHuR",0,0, 550.) 
                -382.203 * getSMEFTCoeff("CHdR",0,0, 550.) 
                +240.831 * getSMEFTCoeff("CHq1R",1,1, 550.) 
                +802.708 * getSMEFTCoeff("CHq3R",1,1, 550.) 
                +150.875 * getSMEFTCoeff("CHuR",1,1, 550.) 
                -123807. * getSMEFTCoeff("CHq1R",2,2, 550.) 
                +124746. * getSMEFTCoeff("CHq3R",2,2, 550.) 
                +93456.1 * getSMEFTCoeff("CHuR",2,2, 550.) 
                -358720. * getSMEFTCoeff("CuGR",2,2, 550.) 
                +210.711 * getSMEFTCoeff("Cqq1R",0,0,2,2, 550.) 
                +507420. * getSMEFTCoeff("Cqq1R",0,2,2,0, 550.) 
                +195.896 * getSMEFTCoeff("Cqq1R",1,1,2,2, 550.) 
                +27514. * getSMEFTCoeff("Cqq1R",1,2,2,1, 550.) 
                +263.269 * getSMEFTCoeff("Cqq3R",0,0,2,2, 550.) 
                +1573336. * getSMEFTCoeff("Cqq3R",0,2,2,0, 550.) 
                +152351. * getSMEFTCoeff("Cqq3R",1,2,2,1, 550.) 
                +320280. * getSMEFTCoeff("CuuR",0,2,2,0, 550.) 
                +18504.3 * getSMEFTCoeff("CuuR",1,2,2,1, 550.) 
                +239.899 * getSMEFTCoeff("Cud1R",2,2,0,0, 550.) 
                +52669. * getSMEFTCoeff("Cud8R",2,2,0,0, 550.) 
                +6646.4 * getSMEFTCoeff("Cud8R",2,2,1,1, 550.) 
                +379.431 * getSMEFTCoeff("Cqu1R",0,0,2,2, 550.) 
                +192957. * getSMEFTCoeff("Cqu8R",0,0,2,2, 550.) 
                +16941.6 * getSMEFTCoeff("Cqu8R",1,1,2,2, 550.) 
                +117224. * getSMEFTCoeff("Cqu8R",2,2,0,0, 550.) 
                +6438.77 * getSMEFTCoeff("Cqu8R",2,2,1,1, 550.) 
                +146.332 * getSMEFTCoeff("Cqd1R",2,2,0,0, 550.) 
                +82556.4 * getSMEFTCoeff("Cqd8R",2,2,0,0, 550.) 
                +10020.1 * getSMEFTCoeff("Cqd8R",2,2,1,1, 550.) 
                -59765.5 * getSMEFTCoeff("CHl3R",0,0, 550.) 
                -56893. * getSMEFTCoeff("CHl3R",1,1, 550.) 
                +62968.9 * getSMEFTCoeff("CllR",0,1,1,0, 550.) 
                +44367.6 * getSMEFTCoeff("Cqq3R",2,2,2,2, 550.) 
                +2488.93 * getSMEFTCoeff("Cud8R",2,2,2,2, 550.) 
                +3982.06 * getSMEFTCoeff("Cqu8R",2,2,2,2, 550.) 
                +3651.48 * getSMEFTCoeff("Cqd8R",2,2,2,2, 550.) 
                ;
 
        dchi2Tot += sigmapTZ_Bin8a0 * sigmapTZ_Bin8a0/0.03959/0.03959; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTZ_Bin9a0 = 0.0, sigmapTZ_Bin9a0 = 0.0; 
 
        sigmaSMpTZ_Bin9a0 = 0.; //Only NP contribution 
 
        sigmapTZ_Bin9a0 = sigmaSMpTZ_Bin9a0 
                -2146962. * getSMEFTCoeff("CG", 1000.) 
                -421.396 * getSMEFTCoeff("CHq1R",0,0, 1000.) 
                +8430.37 * getSMEFTCoeff("CHq3R",0,0, 1000.) 
                +2060.39 * getSMEFTCoeff("CHuR",0,0, 1000.) 
                -331.255 * getSMEFTCoeff("CHdR",0,0, 1000.) 
                +245.679 * getSMEFTCoeff("CHq1R",1,1, 1000.) 
                +741.679 * getSMEFTCoeff("CHq3R",1,1, 1000.) 
                +275.936 * getSMEFTCoeff("CHuR",1,1, 1000.) 
                -122273. * getSMEFTCoeff("CHq1R",2,2, 1000.) 
                +122686. * getSMEFTCoeff("CHq3R",2,2, 1000.) 
                +93077.2 * getSMEFTCoeff("CHuR",2,2, 1000.) 
                -337679. * getSMEFTCoeff("CuGR",2,2, 1000.) 
                +285.082 * getSMEFTCoeff("Cqq1R",0,0,2,2, 1000.) 
                +917269. * getSMEFTCoeff("Cqq1R",0,2,2,0, 1000.) 
                +43267.9 * getSMEFTCoeff("Cqq1R",1,2,2,1, 1000.) 
                +170.232 * getSMEFTCoeff("Cqq3R",0,0,2,2, 1000.) 
                +2721463. * getSMEFTCoeff("Cqq3R",0,2,2,0, 1000.) 
                +232508. * getSMEFTCoeff("Cqq3R",1,2,2,1, 1000.) 
                +593363. * getSMEFTCoeff("CuuR",0,2,2,0, 1000.) 
                +29689.5 * getSMEFTCoeff("CuuR",1,2,2,1, 1000.) 
                +95968.1 * getSMEFTCoeff("Cud8R",2,2,0,0, 1000.) 
                +10787.5 * getSMEFTCoeff("Cud8R",2,2,1,1, 1000.) 
                +533.753 * getSMEFTCoeff("Cqu1R",0,0,2,2, 1000.) 
                +297.093 * getSMEFTCoeff("Cqu1R",2,2,0,0, 1000.) 
                +336823. * getSMEFTCoeff("Cqu8R",0,0,2,2, 1000.) 
                +25747.3 * getSMEFTCoeff("Cqu8R",1,1,2,2, 1000.) 
                +213308. * getSMEFTCoeff("Cqu8R",2,2,0,0, 1000.) 
                +10099.7 * getSMEFTCoeff("Cqu8R",2,2,1,1, 1000.) 
                +147398. * getSMEFTCoeff("Cqd8R",2,2,0,0, 1000.) 
                +15848.8 * getSMEFTCoeff("Cqd8R",2,2,1,1, 1000.) 
                -58883.2 * getSMEFTCoeff("CHl3R",0,0, 1000.) 
                -59627.3 * getSMEFTCoeff("CHl3R",1,1, 1000.) 
                +61347.7 * getSMEFTCoeff("CllR",0,1,1,0, 1000.) 
                +65306.2 * getSMEFTCoeff("Cqq3R",2,2,2,2, 1000.) 
                +3876.17 * getSMEFTCoeff("Cud8R",2,2,2,2, 1000.) 
                +5792.02 * getSMEFTCoeff("Cqu8R",2,2,2,2, 1000.) 
                +5577.93 * getSMEFTCoeff("Cqd8R",2,2,2,2, 1000.) 
                ;
 
        dchi2Tot += sigmapTZ_Bin9a0 * sigmapTZ_Bin9a0/0.04928/0.04928; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTZ_Bin10a0 = 0.0, sigmapTZ_Bin10a0 = 0.0; 
 
        sigmaSMpTZ_Bin10a0 = 0.; //Only NP contribution 
 
        sigmapTZ_Bin10a0 = sigmaSMpTZ_Bin10a0 
                -3021439. * getSMEFTCoeff("CG", 1500.) 
                -472.42 * getSMEFTCoeff("CHq1R",0,0, 1500.) 
                +10902.9 * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +2993.32 * getSMEFTCoeff("CHuR",0,0, 1500.) 
                -622.528 * getSMEFTCoeff("CHdR",0,0, 1500.) 
                +330.676 * getSMEFTCoeff("CHq1R",1,1, 1500.) 
                +919.856 * getSMEFTCoeff("CHq3R",1,1, 1500.) 
                +216.542 * getSMEFTCoeff("CHuR",1,1, 1500.) 
                -119786. * getSMEFTCoeff("CHq1R",2,2, 1500.) 
                +120405. * getSMEFTCoeff("CHq3R",2,2, 1500.) 
                +91515.4 * getSMEFTCoeff("CHuR",2,2, 1500.) 
                -317406. * getSMEFTCoeff("CuGR",2,2, 1500.) 
                +1895972. * getSMEFTCoeff("Cqq1R",0,2,2,0, 1500.) 
                +73802.3 * getSMEFTCoeff("Cqq1R",1,2,2,1, 1500.) 
                +298.286 * getSMEFTCoeff("Cqq3R",0,0,2,2, 1500.) 
                +5402184. * getSMEFTCoeff("Cqq3R",0,2,2,0, 1500.) 
                +392201. * getSMEFTCoeff("Cqq3R",1,2,2,1, 1500.) 
                +125.564 * getSMEFTCoeff("CuuR",1,1,2,2, 1500.) 
                +1274238. * getSMEFTCoeff("CuuR",0,2,2,0, 1500.) 
                +52583.7 * getSMEFTCoeff("CuuR",1,2,2,1, 1500.) 
                +394.546 * getSMEFTCoeff("Cud1R",2,2,0,0, 1500.) 
                -122.94 * getSMEFTCoeff("Cud1R",2,2,1,1, 1500.) 
                +201532. * getSMEFTCoeff("Cud8R",2,2,0,0, 1500.) 
                +19487.2 * getSMEFTCoeff("Cud8R",2,2,1,1, 1500.) 
                +302.697 * getSMEFTCoeff("Cqu1R",0,0,2,2, 1500.) 
                +171.399 * getSMEFTCoeff("Cqu1R",1,1,2,2, 1500.) 
                +681779. * getSMEFTCoeff("Cqu8R",0,0,2,2, 1500.) 
                +43506. * getSMEFTCoeff("Cqu8R",1,1,2,2, 1500.) 
                +449033. * getSMEFTCoeff("Cqu8R",2,2,0,0, 1500.) 
                +17650.5 * getSMEFTCoeff("Cqu8R",2,2,1,1, 1500.) 
                +666.506 * getSMEFTCoeff("Cqd1R",2,2,0,0, 1500.) 
                +300968. * getSMEFTCoeff("Cqd8R",2,2,0,0, 1500.) 
                +27789.2 * getSMEFTCoeff("Cqd8R",2,2,1,1, 1500.) 
                -58729.3 * getSMEFTCoeff("CHl3R",0,0, 1500.) 
                -59250.6 * getSMEFTCoeff("CHl3R",1,1, 1500.) 
                +61314.6 * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                +104581. * getSMEFTCoeff("Cqq3R",2,2,2,2, 1500.) 
                +6541.49 * getSMEFTCoeff("Cud8R",2,2,2,2, 1500.) 
                +9504.92 * getSMEFTCoeff("Cqu8R",2,2,2,2, 1500.) 
                +9251.04 * getSMEFTCoeff("Cqd8R",2,2,2,2, 1500.) 
                ;
 
        dchi2Tot += sigmapTZ_Bin10a0 * sigmapTZ_Bin10a0/0.07801/0.07801; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTZ_Bin11a0 = 0.0, sigmapTZ_Bin11a0 = 0.0; 
 
        sigmaSMpTZ_Bin11a0 = 0.; //Only NP contribution 
 
        sigmapTZ_Bin11a0 = sigmaSMpTZ_Bin11a0 
                -4491790. * getSMEFTCoeff("CG", 1500.) 
                -1163.33 * getSMEFTCoeff("CHq1R",0,0, 1500.) 
                +14783.4 * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +3531.75 * getSMEFTCoeff("CHuR",0,0, 1500.) 
                -1123.68 * getSMEFTCoeff("CHdR",0,0, 1500.) 
                +421.868 * getSMEFTCoeff("CHq1R",1,1, 1500.) 
                +971.281 * getSMEFTCoeff("CHq3R",1,1, 1500.) 
                +205.014 * getSMEFTCoeff("CHuR",1,1, 1500.) 
                -115815. * getSMEFTCoeff("CHq1R",2,2, 1500.) 
                +116263. * getSMEFTCoeff("CHq3R",2,2, 1500.) 
                +89518.1 * getSMEFTCoeff("CHuR",2,2, 1500.) 
                -348498. * getSMEFTCoeff("CuGR",2,2, 1500.) 
                +4441122. * getSMEFTCoeff("Cqq1R",0,2,2,0, 1500.) 
                +137852. * getSMEFTCoeff("Cqq1R",1,2,2,1, 1500.) 
                +426.939 * getSMEFTCoeff("Cqq3R",0,0,2,2, 1500.) 
                +12096087. * getSMEFTCoeff("Cqq3R",0,2,2,0, 1500.) 
                +721159. * getSMEFTCoeff("Cqq3R",1,2,2,1, 1500.) 
                +3094535. * getSMEFTCoeff("CuuR",0,2,2,0, 1500.) 
                +100364. * getSMEFTCoeff("CuuR",1,2,2,1, 1500.) 
                +244.87 * getSMEFTCoeff("Cud1R",2,2,0,0, 1500.) 
                +479691. * getSMEFTCoeff("Cud8R",2,2,0,0, 1500.) 
                +38154.7 * getSMEFTCoeff("Cud8R",2,2,1,1, 1500.) 
                +290.759 * getSMEFTCoeff("Cqu1R",0,0,2,2, 1500.) 
                +189.586 * getSMEFTCoeff("Cqu1R",2,2,0,0, 1500.) 
                +1568589. * getSMEFTCoeff("Cqu8R",0,0,2,2, 1500.) 
                +81148.3 * getSMEFTCoeff("Cqu8R",1,1,2,2, 1500.) 
                +1064323. * getSMEFTCoeff("Cqu8R",2,2,0,0, 1500.) 
                +33087.8 * getSMEFTCoeff("Cqu8R",2,2,1,1, 1500.) 
                +242.741 * getSMEFTCoeff("Cqd1R",2,2,0,0, 1500.) 
                +690277. * getSMEFTCoeff("Cqd8R",2,2,0,0, 1500.) 
                +53422.3 * getSMEFTCoeff("Cqd8R",2,2,1,1, 1500.) 
                -59606.4 * getSMEFTCoeff("CHl3R",0,0, 1500.) 
                -58023. * getSMEFTCoeff("CHl3R",1,1, 1500.) 
                +61870.9 * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                +178964. * getSMEFTCoeff("Cqq3R",2,2,2,2, 1500.) 
                +11959.9 * getSMEFTCoeff("Cud8R",2,2,2,2, 1500.) 
                +16428.9 * getSMEFTCoeff("Cqu8R",2,2,2,2, 1500.) 
                +16529.3 * getSMEFTCoeff("Cqd8R",2,2,2,2, 1500.) 
                ;
 
        dchi2Tot += sigmapTZ_Bin11a0 * sigmapTZ_Bin11a0/0.17988/0.17988; 
 
 
//----------------------------------------------------------- 
 
    return dchi2Tot; 
 
}




const double NPSMEFTd6General::chi2FCChhtt() const
{
    double dchi2Tot = 0.0;

    double sigmaSMMx_Bin1a0 = 0.0, sigmaMx_Bin1a0 = 0.0; 
 
        sigmaSMMx_Bin1a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin1a0 = sigmaSMMx_Bin1a0 
                -49146.1 * getSMEFTCoeff("CG", 1000.) 
                -347238. * getSMEFTCoeff("CuGR",2,2, 1000.) 
                +92520.6 * getSMEFTCoeff("Cqq1R",0,2,2,0, 1000.) 
                +10148.6 * getSMEFTCoeff("Cqq1R",1,2,2,1, 1000.) 
                +74.0686 * getSMEFTCoeff("Cqq3R",0,0,2,2, 1000.) 
                +218710. * getSMEFTCoeff("Cqq3R",0,2,2,0, 1000.) 
                +36758.4 * getSMEFTCoeff("Cqq3R",1,2,2,1, 1000.) 
                -106.138 * getSMEFTCoeff("CuuR",0,0,2,2, 1000.) 
                +92896. * getSMEFTCoeff("CuuR",0,2,2,0, 1000.) 
                +10221.9 * getSMEFTCoeff("CuuR",1,2,2,1, 1000.) 
                +16044.9 * getSMEFTCoeff("Cud8R",2,2,0,0, 1000.) 
                +3419.59 * getSMEFTCoeff("Cud8R",2,2,1,1, 1000.) 
                +118.083 * getSMEFTCoeff("Cqu1R",0,0,2,2, 1000.) 
                +104.212 * getSMEFTCoeff("Cqu1R",2,2,0,0, 1000.) 
                +39338.7 * getSMEFTCoeff("Cqu8R",0,0,2,2, 1000.) 
                +5865.93 * getSMEFTCoeff("Cqu8R",1,1,2,2, 1000.) 
                +22593.6 * getSMEFTCoeff("Cqu8R",2,2,0,0, 1000.) 
                +2542.13 * getSMEFTCoeff("Cqu8R",2,2,1,1, 1000.) 
                +128.279 * getSMEFTCoeff("Cqd1R",2,2,0,0, 1000.) 
                +15724.8 * getSMEFTCoeff("Cqd8R",2,2,0,0, 1000.) 
                +3309.45 * getSMEFTCoeff("Cqd8R",2,2,1,1, 1000.) 
                +11026.7 * getSMEFTCoeff("Cqq3R",2,2,2,2, 1000.) 
                +1400.08 * getSMEFTCoeff("Cud8R",2,2,2,2, 1000.) 
                +1413.14 * getSMEFTCoeff("Cqu8R",2,2,2,2, 1000.) 
                +1420.08 * getSMEFTCoeff("Cqd8R",2,2,2,2, 1000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin1a0 * sigmaMx_Bin1a0/0.042/0.042; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin2a0 = 0.0, sigmaMx_Bin2a0 = 0.0; 
 
        sigmaSMMx_Bin2a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin2a0 = sigmaSMMx_Bin2a0 
                -99811.5 * getSMEFTCoeff("CG", 1500.) 
                -324579. * getSMEFTCoeff("CuGR",2,2, 1500.) 
                -97.0577 * getSMEFTCoeff("Cqq1R",0,0,2,2, 1500.) 
                +139201. * getSMEFTCoeff("Cqq1R",0,2,2,0, 1500.) 
                +13244.4 * getSMEFTCoeff("Cqq1R",1,2,2,1, 1500.) 
                +325383. * getSMEFTCoeff("Cqq3R",0,2,2,0, 1500.) 
                +48366.7 * getSMEFTCoeff("Cqq3R",1,2,2,1, 1500.) 
                -42.1888 * getSMEFTCoeff("CuuR",0,0,2,2, 1500.) 
                +139146. * getSMEFTCoeff("CuuR",0,2,2,0, 1500.) 
                +13243.9 * getSMEFTCoeff("CuuR",1,2,2,1, 1500.) 
                +23442.3 * getSMEFTCoeff("Cud8R",2,2,0,0, 1500.) 
                +4425.78 * getSMEFTCoeff("Cud8R",2,2,1,1, 1500.) 
                -40.7952 * getSMEFTCoeff("Cqu1R",0,0,2,2, 1500.) 
                +39.2605 * getSMEFTCoeff("Cqu1R",2,2,0,0, 1500.) 
                +57955.6 * getSMEFTCoeff("Cqu8R",0,0,2,2, 1500.) 
                +7651.87 * getSMEFTCoeff("Cqu8R",1,1,2,2, 1500.) 
                +34776. * getSMEFTCoeff("Cqu8R",2,2,0,0, 1500.) 
                +3318.15 * getSMEFTCoeff("Cqu8R",2,2,1,1, 1500.) 
                +23412.3 * getSMEFTCoeff("Cqd8R",2,2,0,0, 1500.) 
                +4433.25 * getSMEFTCoeff("Cqd8R",2,2,1,1, 1500.) 
                +14108. * getSMEFTCoeff("Cqq3R",2,2,2,2, 1500.) 
                +1721.93 * getSMEFTCoeff("Cud8R",2,2,2,2, 1500.) 
                +1766.7 * getSMEFTCoeff("Cqu8R",2,2,2,2, 1500.) 
                +1784.55 * getSMEFTCoeff("Cqd8R",2,2,2,2, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin2a0 * sigmaMx_Bin2a0/0.042/0.042; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin3a0 = 0.0, sigmaMx_Bin3a0 = 0.0; 
 
        sigmaSMMx_Bin3a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin3a0 = sigmaSMMx_Bin3a0 
                -125668. * getSMEFTCoeff("CG", 1500.) 
                -307664. * getSMEFTCoeff("CuGR",2,2, 1500.) 
                +210138. * getSMEFTCoeff("Cqq1R",0,2,2,0, 1500.) 
                +17320.9 * getSMEFTCoeff("Cqq1R",1,2,2,1, 1500.) 
                -62.0455 * getSMEFTCoeff("Cqq3R",0,0,2,2, 1500.) 
                +486638. * getSMEFTCoeff("Cqq3R",0,2,2,0, 1500.) 
                +63916.6 * getSMEFTCoeff("Cqq3R",1,2,2,1, 1500.) 
                +210364. * getSMEFTCoeff("CuuR",0,2,2,0, 1500.) 
                +17357.2 * getSMEFTCoeff("CuuR",1,2,2,1, 1500.) 
                +34753.6 * getSMEFTCoeff("Cud8R",2,2,0,0, 1500.) 
                +5801.69 * getSMEFTCoeff("Cud8R",2,2,1,1, 1500.) 
                -76.2501 * getSMEFTCoeff("Cqu1R",0,0,2,2, 1500.) 
                -101.97 * getSMEFTCoeff("Cqu1R",2,2,0,0, 1500.) 
                +86828.1 * getSMEFTCoeff("Cqu8R",0,0,2,2, 1500.) 
                +10135.9 * getSMEFTCoeff("Cqu8R",1,1,2,2, 1500.) 
                +52542.9 * getSMEFTCoeff("Cqu8R",2,2,0,0, 1500.) 
                +4348. * getSMEFTCoeff("Cqu8R",2,2,1,1, 1500.) 
                -53.7846 * getSMEFTCoeff("Cqd1R",2,2,0,0, 1500.) 
                +34503.2 * getSMEFTCoeff("Cqd8R",2,2,0,0, 1500.) 
                +5874.32 * getSMEFTCoeff("Cqd8R",2,2,1,1, 1500.) 
                +18131.4 * getSMEFTCoeff("Cqq3R",2,2,2,2, 1500.) 
                +2240.09 * getSMEFTCoeff("Cud8R",2,2,2,2, 1500.) 
                +2262.83 * getSMEFTCoeff("Cqu8R",2,2,2,2, 1500.) 
                +2275.36 * getSMEFTCoeff("Cqd8R",2,2,2,2, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin3a0 * sigmaMx_Bin3a0/0.042/0.042; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin4a0 = 0.0, sigmaMx_Bin4a0 = 0.0; 
 
        sigmaSMMx_Bin4a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin4a0 = sigmaSMMx_Bin4a0 
                -141736. * getSMEFTCoeff("CG", 1500.) 
                -293435. * getSMEFTCoeff("CuGR",2,2, 1500.) 
                -46.7706 * getSMEFTCoeff("Cqq1R",0,0,2,2, 1500.) 
                +341378. * getSMEFTCoeff("Cqq1R",0,2,2,0, 1500.) 
                +23681.2 * getSMEFTCoeff("Cqq1R",1,2,2,1, 1500.) 
                -77.9921 * getSMEFTCoeff("Cqq3R",0,0,2,2, 1500.) 
                +782297. * getSMEFTCoeff("Cqq3R",0,2,2,0, 1500.) 
                +88177.9 * getSMEFTCoeff("Cqq3R",1,2,2,1, 1500.) 
                -75.8623 * getSMEFTCoeff("CuuR",0,0,2,2, 1500.) 
                +341233. * getSMEFTCoeff("CuuR",0,2,2,0, 1500.) 
                +23645.2 * getSMEFTCoeff("CuuR",1,2,2,1, 1500.) 
                -63.8464 * getSMEFTCoeff("Cud1R",2,2,0,0, 1500.) 
                +54854.1 * getSMEFTCoeff("Cud8R",2,2,0,0, 1500.) 
                +8044.99 * getSMEFTCoeff("Cud8R",2,2,1,1, 1500.) 
                -73.7201 * getSMEFTCoeff("Cqu1R",0,0,2,2, 1500.) 
                -77.5858 * getSMEFTCoeff("Cqu1R",2,2,0,0, 1500.) 
                -24.0009 * getSMEFTCoeff("Cqu1R",2,2,1,1, 1500.) 
                +139959. * getSMEFTCoeff("Cqu8R",0,0,2,2, 1500.) 
                +13950. * getSMEFTCoeff("Cqu8R",1,1,2,2, 1500.) 
                +85528.1 * getSMEFTCoeff("Cqu8R",2,2,0,0, 1500.) 
                +5915.69 * getSMEFTCoeff("Cqu8R",2,2,1,1, 1500.) 
                -80.9345 * getSMEFTCoeff("Cqd1R",2,2,0,0, 1500.) 
                +54982.1 * getSMEFTCoeff("Cqd8R",2,2,0,0, 1500.) 
                +8084.69 * getSMEFTCoeff("Cqd8R",2,2,1,1, 1500.) 
                +24224.6 * getSMEFTCoeff("Cqq3R",2,2,2,2, 1500.) 
                +2992.83 * getSMEFTCoeff("Cud8R",2,2,2,2, 1500.) 
                +3032.52 * getSMEFTCoeff("Cqu8R",2,2,2,2, 1500.) 
                +3015.78 * getSMEFTCoeff("Cqd8R",2,2,2,2, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin4a0 * sigmaMx_Bin4a0/0.042/0.042; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin5a0 = 0.0, sigmaMx_Bin5a0 = 0.0; 
 
        sigmaSMMx_Bin5a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin5a0 = sigmaSMMx_Bin5a0 
                -153268. * getSMEFTCoeff("CG", 3000.) 
                -279520. * getSMEFTCoeff("CuGR",2,2, 3000.) 
                +648317. * getSMEFTCoeff("Cqq1R",0,2,2,0, 3000.) 
                +35786.2 * getSMEFTCoeff("Cqq1R",1,2,2,1, 3000.) 
                +1465769. * getSMEFTCoeff("Cqq3R",0,2,2,0, 3000.) 
                +135770. * getSMEFTCoeff("Cqq3R",1,2,2,1, 3000.) 
                +648885. * getSMEFTCoeff("CuuR",0,2,2,0, 3000.) 
                +35855. * getSMEFTCoeff("CuuR",1,2,2,1, 3000.) 
                +102155. * getSMEFTCoeff("Cud8R",2,2,0,0, 3000.) 
                +12557.2 * getSMEFTCoeff("Cud8R",2,2,1,1, 3000.) 
                +49.808 * getSMEFTCoeff("Cqu1R",0,0,2,2, 3000.) 
                +264213. * getSMEFTCoeff("Cqu8R",0,0,2,2, 3000.) 
                +21476.6 * getSMEFTCoeff("Cqu8R",1,1,2,2, 3000.) 
                +162317. * getSMEFTCoeff("Cqu8R",2,2,0,0, 3000.) 
                +8926.43 * getSMEFTCoeff("Cqu8R",2,2,1,1, 3000.) 
                +102278. * getSMEFTCoeff("Cqd8R",2,2,0,0, 3000.) 
                +12499. * getSMEFTCoeff("Cqd8R",2,2,1,1, 3000.) 
                +35644.8 * getSMEFTCoeff("Cqq3R",2,2,2,2, 3000.) 
                +4486.71 * getSMEFTCoeff("Cud8R",2,2,2,2, 3000.) 
                +4442.76 * getSMEFTCoeff("Cqu8R",2,2,2,2, 3000.) 
                +4441.57 * getSMEFTCoeff("Cqd8R",2,2,2,2, 3000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin5a0 * sigmaMx_Bin5a0/0.042/0.042; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin6a0 = 0.0, sigmaMx_Bin6a0 = 0.0; 
 
        sigmaSMMx_Bin6a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin6a0 = sigmaSMMx_Bin6a0 
                -159857. * getSMEFTCoeff("CG", 3000.) 
                -271665. * getSMEFTCoeff("CuGR",2,2, 3000.) 
                +182.491 * getSMEFTCoeff("Cqq1R",0,0,2,2, 3000.) 
                +1178943. * getSMEFTCoeff("Cqq1R",0,2,2,0, 3000.) 
                +52791.2 * getSMEFTCoeff("Cqq1R",1,2,2,1, 3000.) 
                +80.7494 * getSMEFTCoeff("Cqq3R",0,0,2,2, 3000.) 
                +2639571. * getSMEFTCoeff("Cqq3R",0,2,2,0, 3000.) 
                +202937. * getSMEFTCoeff("Cqq3R",1,2,2,1, 3000.) 
                +104.472 * getSMEFTCoeff("CuuR",0,0,2,2, 3000.) 
                +1180326. * getSMEFTCoeff("CuuR",0,2,2,0, 3000.) 
                +52610.7 * getSMEFTCoeff("CuuR",1,2,2,1, 3000.) 
                +182556. * getSMEFTCoeff("Cud8R",2,2,0,0, 3000.) 
                +18825.6 * getSMEFTCoeff("Cud8R",2,2,1,1, 3000.) 
                +95.1785 * getSMEFTCoeff("Cqu1R",0,0,2,2, 3000.) 
                +204.949 * getSMEFTCoeff("Cqu1R",2,2,0,0, 3000.) 
                +477852. * getSMEFTCoeff("Cqu8R",0,0,2,2, 3000.) 
                +31960.9 * getSMEFTCoeff("Cqu8R",1,1,2,2, 3000.) 
                +295099. * getSMEFTCoeff("Cqu8R",2,2,0,0, 3000.) 
                +13197.5 * getSMEFTCoeff("Cqu8R",2,2,1,1, 3000.) 
                +182615. * getSMEFTCoeff("Cqd8R",2,2,0,0, 3000.) 
                +18803. * getSMEFTCoeff("Cqd8R",2,2,1,1, 3000.) 
                +50824.1 * getSMEFTCoeff("Cqq3R",2,2,2,2, 3000.) 
                +6356.04 * getSMEFTCoeff("Cud8R",2,2,2,2, 3000.) 
                +6339.59 * getSMEFTCoeff("Cqu8R",2,2,2,2, 3000.) 
                +6400.37 * getSMEFTCoeff("Cqd8R",2,2,2,2, 3000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin6a0 * sigmaMx_Bin6a0/0.042/0.042; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin7a0 = 0.0, sigmaMx_Bin7a0 = 0.0; 
 
        sigmaSMMx_Bin7a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin7a0 = sigmaSMMx_Bin7a0 
                -162570. * getSMEFTCoeff("CG", 5000.) 
                -266789. * getSMEFTCoeff("CuGR",2,2, 5000.) 
                +96.7866 * getSMEFTCoeff("Cqq1R",0,0,2,2, 5000.) 
                +1927136. * getSMEFTCoeff("Cqq1R",0,2,2,0, 5000.) 
                +71984.3 * getSMEFTCoeff("Cqq1R",1,2,2,1, 5000.) 
                +105.855 * getSMEFTCoeff("Cqq3R",0,0,2,2, 5000.) 
                +4284591. * getSMEFTCoeff("Cqq3R",0,2,2,0, 5000.) 
                +282082. * getSMEFTCoeff("Cqq3R",1,2,2,1, 5000.) 
                +1925681. * getSMEFTCoeff("CuuR",0,2,2,0, 5000.) 
                +72051.5 * getSMEFTCoeff("CuuR",1,2,2,1, 5000.) 
                +62.3371 * getSMEFTCoeff("Cud1R",2,2,0,0, 5000.) 
                +294213. * getSMEFTCoeff("Cud8R",2,2,0,0, 5000.) 
                +26320.4 * getSMEFTCoeff("Cud8R",2,2,1,1, 5000.) 
                +67.3189 * getSMEFTCoeff("Cqu1R",0,0,2,2, 5000.) 
                +45.2742 * getSMEFTCoeff("Cqu1R",2,2,0,0, 5000.) 
                +776319. * getSMEFTCoeff("Cqu8R",0,0,2,2, 5000.) 
                +44286.2 * getSMEFTCoeff("Cqu8R",1,1,2,2, 5000.) 
                +481869. * getSMEFTCoeff("Cqu8R",2,2,0,0, 5000.) 
                +18014.3 * getSMEFTCoeff("Cqu8R",2,2,1,1, 5000.) 
                +294608. * getSMEFTCoeff("Cqd8R",2,2,0,0, 5000.) 
                +26251.2 * getSMEFTCoeff("Cqd8R",2,2,1,1, 5000.) 
                +67576.5 * getSMEFTCoeff("Cqq3R",2,2,2,2, 5000.) 
                +8455.51 * getSMEFTCoeff("Cud8R",2,2,2,2, 5000.) 
                +8452.26 * getSMEFTCoeff("Cqu8R",2,2,2,2, 5000.) 
                +8462.31 * getSMEFTCoeff("Cqd8R",2,2,2,2, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin7a0 * sigmaMx_Bin7a0/0.042/0.042; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin8a0 = 0.0, sigmaMx_Bin8a0 = 0.0; 
 
        sigmaSMMx_Bin8a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin8a0 = sigmaSMMx_Bin8a0 
                -164714. * getSMEFTCoeff("CG", 5000.) 
                -263585. * getSMEFTCoeff("CuGR",2,2, 5000.) 
                +49.4001 * getSMEFTCoeff("Cqq1R",0,0,2,2, 5000.) 
                +3315978. * getSMEFTCoeff("Cqq1R",0,2,2,0, 5000.) 
                +100934. * getSMEFTCoeff("Cqq1R",1,2,2,1, 5000.) 
                +7311815. * getSMEFTCoeff("Cqq3R",0,2,2,0, 5000.) 
                +403668. * getSMEFTCoeff("Cqq3R",1,2,2,1, 5000.) 
                +3314283. * getSMEFTCoeff("CuuR",0,2,2,0, 5000.) 
                +101078. * getSMEFTCoeff("CuuR",1,2,2,1, 5000.) 
                +499585. * getSMEFTCoeff("Cud8R",2,2,0,0, 5000.) 
                +37841.4 * getSMEFTCoeff("Cud8R",2,2,1,1, 5000.) 
                +78.0719 * getSMEFTCoeff("Cqu1R",0,0,2,2, 5000.) 
                +1328390. * getSMEFTCoeff("Cqu8R",0,0,2,2, 5000.) 
                +63053.3 * getSMEFTCoeff("Cqu8R",1,1,2,2, 5000.) 
                +827998. * getSMEFTCoeff("Cqu8R",2,2,0,0, 5000.) 
                +25222.8 * getSMEFTCoeff("Cqu8R",2,2,1,1, 5000.) 
                +42.3619 * getSMEFTCoeff("Cqd1R",2,2,0,0, 5000.) 
                +499811. * getSMEFTCoeff("Cqd8R",2,2,0,0, 5000.) 
                +37797.8 * getSMEFTCoeff("Cqd8R",2,2,1,1, 5000.) 
                +91391.7 * getSMEFTCoeff("Cqq3R",2,2,2,2, 5000.) 
                +11428.6 * getSMEFTCoeff("Cud8R",2,2,2,2, 5000.) 
                +11441.1 * getSMEFTCoeff("Cqu8R",2,2,2,2, 5000.) 
                +11421.9 * getSMEFTCoeff("Cqd8R",2,2,2,2, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin8a0 * sigmaMx_Bin8a0/0.042/0.042; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin9a0 = 0.0, sigmaMx_Bin9a0 = 0.0; 
 
        sigmaSMMx_Bin9a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin9a0 = sigmaSMMx_Bin9a0 
                -167592. * getSMEFTCoeff("CG", 5000.) 
                -261183. * getSMEFTCoeff("CuGR",2,2, 5000.) 
                -49.7514 * getSMEFTCoeff("Cqq1R",0,0,2,2, 5000.) 
                +6481126. * getSMEFTCoeff("Cqq1R",0,2,2,0, 5000.) 
                +153199. * getSMEFTCoeff("Cqq1R",1,2,2,1, 5000.) 
                +135.834 * getSMEFTCoeff("Cqq3R",0,0,2,2, 5000.) 
                +14130712. * getSMEFTCoeff("Cqq3R",0,2,2,0, 5000.) 
                +630644. * getSMEFTCoeff("Cqq3R",1,2,2,1, 5000.) 
                +6482823. * getSMEFTCoeff("CuuR",0,2,2,0, 5000.) 
                +153227. * getSMEFTCoeff("CuuR",1,2,2,1, 5000.) 
                +956376. * getSMEFTCoeff("Cud8R",2,2,0,0, 5000.) 
                +59708.7 * getSMEFTCoeff("Cud8R",2,2,1,1, 5000.) 
                +2576258. * getSMEFTCoeff("Cqu8R",0,0,2,2, 5000.) 
                +98013.1 * getSMEFTCoeff("Cqu8R",1,1,2,2, 5000.) 
                +1619076. * getSMEFTCoeff("Cqu8R",2,2,0,0, 5000.) 
                +38300.1 * getSMEFTCoeff("Cqu8R",2,2,1,1, 5000.) 
                +73.1333 * getSMEFTCoeff("Cqd1R",2,2,0,0, 5000.) 
                +956929. * getSMEFTCoeff("Cqd8R",2,2,0,0, 5000.) 
                +59622.1 * getSMEFTCoeff("Cqd8R",2,2,1,1, 5000.) 
                +131751. * getSMEFTCoeff("Cqq3R",2,2,2,2, 5000.) 
                +16489.3 * getSMEFTCoeff("Cud8R",2,2,2,2, 5000.) 
                +16476.3 * getSMEFTCoeff("Cqu8R",2,2,2,2, 5000.) 
                +16491. * getSMEFTCoeff("Cqd8R",2,2,2,2, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin9a0 * sigmaMx_Bin9a0/0.042/0.042; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin10a0 = 0.0, sigmaMx_Bin10a0 = 0.0; 
 
        sigmaSMMx_Bin10a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin10a0 = sigmaSMMx_Bin10a0 
                -168324. * getSMEFTCoeff("CG", 10000.) 
                -258504. * getSMEFTCoeff("CuGR",2,2, 10000.) 
                -54.085 * getSMEFTCoeff("Cqq1R",0,0,2,2, 10000.) 
                +13314254. * getSMEFTCoeff("Cqq1R",0,2,2,0, 10000.) 
                +234539. * getSMEFTCoeff("Cqq1R",1,2,2,1, 10000.) 
                +28454310. * getSMEFTCoeff("Cqq3R",0,2,2,0, 10000.) 
                +1009354. * getSMEFTCoeff("Cqq3R",1,2,2,1, 10000.) 
                +13311606. * getSMEFTCoeff("CuuR",0,2,2,0, 10000.) 
                +234605. * getSMEFTCoeff("CuuR",1,2,2,1, 10000.) 
                +1892086. * getSMEFTCoeff("Cud8R",2,2,0,0, 10000.) 
                +96881.8 * getSMEFTCoeff("Cud8R",2,2,1,1, 10000.) 
                +55.2644 * getSMEFTCoeff("Cqu1R",2,2,0,0, 10000.) 
                +5220890. * getSMEFTCoeff("Cqu8R",0,0,2,2, 10000.) 
                +155412. * getSMEFTCoeff("Cqu8R",1,1,2,2, 10000.) 
                +3328601. * getSMEFTCoeff("Cqu8R",2,2,0,0, 10000.) 
                +58568. * getSMEFTCoeff("Cqu8R",2,2,1,1, 10000.) 
                +1892228. * getSMEFTCoeff("Cqd8R",2,2,0,0, 10000.) 
                +96758. * getSMEFTCoeff("Cqd8R",2,2,1,1, 10000.) 
                +188187. * getSMEFTCoeff("Cqq3R",2,2,2,2, 10000.) 
                +23522.3 * getSMEFTCoeff("Cud8R",2,2,2,2, 10000.) 
                +23530.3 * getSMEFTCoeff("Cqu8R",2,2,2,2, 10000.) 
                +23515.5 * getSMEFTCoeff("Cqd8R",2,2,2,2, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin10a0 * sigmaMx_Bin10a0/0.042/0.042; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin11a0 = 0.0, sigmaMx_Bin11a0 = 0.0; 
 
        sigmaSMMx_Bin11a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin11a0 = sigmaSMMx_Bin11a0 
                -167657. * getSMEFTCoeff("CG", 10000.) 
                -258319. * getSMEFTCoeff("CuGR",2,2, 10000.) 
                -103.077 * getSMEFTCoeff("Cqq1R",0,0,2,2, 10000.) 
                +37458649. * getSMEFTCoeff("Cqq1R",0,2,2,0, 10000.) 
                +423545. * getSMEFTCoeff("Cqq1R",1,2,2,1, 10000.) 
                +76262592. * getSMEFTCoeff("Cqq3R",0,2,2,0, 10000.) 
                +2013173. * getSMEFTCoeff("Cqq3R",1,2,2,1, 10000.) 
                +37473507. * getSMEFTCoeff("CuuR",0,2,2,0, 10000.) 
                +423469. * getSMEFTCoeff("CuuR",1,2,2,1, 10000.) 
                +4846211. * getSMEFTCoeff("Cud8R",2,2,0,0, 10000.) 
                +198474. * getSMEFTCoeff("Cud8R",2,2,1,1, 10000.) 
                +14218064. * getSMEFTCoeff("Cqu8R",0,0,2,2, 10000.) 
                +304712. * getSMEFTCoeff("Cqu8R",1,1,2,2, 10000.) 
                +9364333. * getSMEFTCoeff("Cqu8R",2,2,0,0, 10000.) 
                +105748. * getSMEFTCoeff("Cqu8R",2,2,1,1, 10000.) 
                +4849211. * getSMEFTCoeff("Cqd8R",2,2,0,0, 10000.) 
                +198778. * getSMEFTCoeff("Cqd8R",2,2,1,1, 10000.) 
                +299131. * getSMEFTCoeff("Cqq3R",2,2,2,2, 10000.) 
                +37371.6 * getSMEFTCoeff("Cud8R",2,2,2,2, 10000.) 
                +37361.2 * getSMEFTCoeff("Cqu8R",2,2,2,2, 10000.) 
                +37358.8 * getSMEFTCoeff("Cqd8R",2,2,2,2, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin11a0 * sigmaMx_Bin11a0/0.042/0.042; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin12a0 = 0.0, sigmaMx_Bin12a0 = 0.0; 
 
        sigmaSMMx_Bin12a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin12a0 = sigmaSMMx_Bin12a0 
                -167057. * getSMEFTCoeff("CG", 10000.) 
                -257952. * getSMEFTCoeff("CuGR",2,2, 10000.) 
                +98660688. * getSMEFTCoeff("Cqq1R",0,2,2,0, 10000.) 
                +665550. * getSMEFTCoeff("Cqq1R",1,2,2,1, 10000.) 
                +185858238. * getSMEFTCoeff("Cqq3R",0,2,2,0, 10000.) 
                +3857431. * getSMEFTCoeff("Cqq3R",1,2,2,1, 10000.) 
                +98682351. * getSMEFTCoeff("CuuR",0,2,2,0, 10000.) 
                +665513. * getSMEFTCoeff("CuuR",1,2,2,1, 10000.) 
                +10901526. * getSMEFTCoeff("Cud8R",2,2,0,0, 10000.) 
                +398904. * getSMEFTCoeff("Cud8R",2,2,1,1, 10000.) 
                +109.44 * getSMEFTCoeff("Cqu1R",2,2,0,0, 10000.) 
                +35563703. * getSMEFTCoeff("Cqu8R",0,0,2,2, 10000.) 
                +565416. * getSMEFTCoeff("Cqu8R",1,1,2,2, 10000.) 
                +24655834. * getSMEFTCoeff("Cqu8R",2,2,0,0, 10000.) 
                +165849. * getSMEFTCoeff("Cqu8R",2,2,1,1, 10000.) 
                +10890659. * getSMEFTCoeff("Cqd8R",2,2,0,0, 10000.) 
                +398790. * getSMEFTCoeff("Cqd8R",2,2,1,1, 10000.) 
                +405314. * getSMEFTCoeff("Cqq3R",2,2,2,2, 10000.) 
                +50395.2 * getSMEFTCoeff("Cud8R",2,2,2,2, 10000.) 
                +50430.6 * getSMEFTCoeff("Cqu8R",2,2,2,2, 10000.) 
                +50426.1 * getSMEFTCoeff("Cqd8R",2,2,2,2, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin12a0 * sigmaMx_Bin12a0/0.048/0.048; 
 
 
//----------------------------------------------------------- 
 
    return dchi2Tot; 
 
}






const double NPSMEFTd6General::chi2FCChhtb() const
{
    double dchi2Tot = 0.0;

    double sigmaSMMx_Bin1a0 = 0.0, sigmaMx_Bin1a0 = 0.0; 
 
        sigmaSMMx_Bin1a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin1a0 = sigmaSMMx_Bin1a0 
                -147.768 * getSMEFTCoeff("CHWB", 1000.) 
                -121264. * getSMEFTCoeff("CHl3R",0,0, 1000.) 
                -121208. * getSMEFTCoeff("CHl3R",1,1, 1000.) 
                +121124. * getSMEFTCoeff("CllR",0,1,1,0, 1000.) 
                +105457. * getSMEFTCoeff("CHq3R",0,0, 1000.) 
                +15846.3 * getSMEFTCoeff("CHq3R",1,1, 1000.) 
                +121169. * getSMEFTCoeff("CHq3R",2,2, 1000.) 
                +7288302. * getSMEFTCoeff("Cqq1R",0,2,2,0, 1000.) 
                +1086052. * getSMEFTCoeff("Cqq1R",1,2,2,1, 1000.) 
                +43690511. * getSMEFTCoeff("Cqq3R",0,0,2,2, 1000.) 
                -7288977. * getSMEFTCoeff("Cqq3R",0,2,2,0, 1000.) 
                +6515282. * getSMEFTCoeff("Cqq3R",1,1,2,2, 1000.) 
                -1086309. * getSMEFTCoeff("Cqq3R",1,2,2,1, 1000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin1a0 * sigmaMx_Bin1a0/0.034/0.034; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin2a0 = 0.0, sigmaMx_Bin2a0 = 0.0; 
 
        sigmaSMMx_Bin2a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin2a0 = sigmaSMMx_Bin2a0 
                +161.601 * getSMEFTCoeff("CHD", 1500.) 
                -121270. * getSMEFTCoeff("CHl3R",0,0, 1500.) 
                -121262. * getSMEFTCoeff("CHl3R",1,1, 1500.) 
                +121164. * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                +107415. * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +13844.9 * getSMEFTCoeff("CHq3R",1,1, 1500.) 
                +121350. * getSMEFTCoeff("CHq3R",2,2, 1500.) 
                +13621866. * getSMEFTCoeff("Cqq1R",0,2,2,0, 1500.) 
                +1743275. * getSMEFTCoeff("Cqq1R",1,2,2,1, 1500.) 
                +81725539. * getSMEFTCoeff("Cqq3R",0,0,2,2, 1500.) 
                -13616620. * getSMEFTCoeff("Cqq3R",0,2,2,0, 1500.) 
                +10464637. * getSMEFTCoeff("Cqq3R",1,1,2,2, 1500.) 
                -1743331. * getSMEFTCoeff("Cqq3R",1,2,2,1, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin2a0 * sigmaMx_Bin2a0/0.035/0.035; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin3a0 = 0.0, sigmaMx_Bin3a0 = 0.0; 
 
        sigmaSMMx_Bin3a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin3a0 = sigmaSMMx_Bin3a0 
                +93.633 * getSMEFTCoeff("CHD", 1500.) 
                +143.793 * getSMEFTCoeff("CHWB", 1500.) 
                -121228. * getSMEFTCoeff("CHl3R",0,0, 1500.) 
                -121191. * getSMEFTCoeff("CHl3R",1,1, 1500.) 
                +121532. * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                +109136. * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +12299.4 * getSMEFTCoeff("CHq3R",1,1, 1500.) 
                +121382. * getSMEFTCoeff("CHq3R",2,2, 1500.) 
                +147.138 * getSMEFTCoeff("Cqq1R",0,0,2,2, 1500.) 
                +21913430. * getSMEFTCoeff("Cqq1R",0,2,2,0, 1500.) 
                +2464463. * getSMEFTCoeff("Cqq1R",1,2,2,1, 1500.) 
                +131494757. * getSMEFTCoeff("Cqq3R",0,0,2,2, 1500.) 
                -21907798. * getSMEFTCoeff("Cqq3R",0,2,2,0, 1500.) 
                +14779956. * getSMEFTCoeff("Cqq3R",1,1,2,2, 1500.) 
                -2462136. * getSMEFTCoeff("Cqq3R",1,2,2,1, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin3a0 * sigmaMx_Bin3a0/0.037/0.037; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin4a0 = 0.0, sigmaMx_Bin4a0 = 0.0; 
 
        sigmaSMMx_Bin4a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin4a0 = sigmaSMMx_Bin4a0 
                -121292. * getSMEFTCoeff("CHl3R",0,0, 1500.) 
                -121292. * getSMEFTCoeff("CHl3R",1,1, 1500.) 
                +121181. * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                +110645. * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +10677.7 * getSMEFTCoeff("CHq3R",1,1, 1500.) 
                +121165. * getSMEFTCoeff("CHq3R",2,2, 1500.) 
                +36195717. * getSMEFTCoeff("Cqq1R",0,2,2,0, 1500.) 
                +3483149. * getSMEFTCoeff("Cqq1R",1,2,2,1, 1500.) 
                +217135392. * getSMEFTCoeff("Cqq3R",0,0,2,2, 1500.) 
                -36170939. * getSMEFTCoeff("Cqq3R",0,2,2,0, 1500.) 
                +20891447. * getSMEFTCoeff("Cqq3R",1,1,2,2, 1500.) 
                -3482777. * getSMEFTCoeff("Cqq3R",1,2,2,1, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin4a0 * sigmaMx_Bin4a0/0.039/0.039; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin5a0 = 0.0, sigmaMx_Bin5a0 = 0.0; 
 
        sigmaSMMx_Bin5a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin5a0 = sigmaSMMx_Bin5a0 
                +111.75 * getSMEFTCoeff("CHD", 3000.) 
                +175.607 * getSMEFTCoeff("CHWB", 3000.) 
                -121165. * getSMEFTCoeff("CHl3R",0,0, 3000.) 
                -121212. * getSMEFTCoeff("CHl3R",1,1, 3000.) 
                +121711. * getSMEFTCoeff("CllR",0,1,1,0, 3000.) 
                +112676. * getSMEFTCoeff("CHq3R",0,0, 3000.) 
                +8860.15 * getSMEFTCoeff("CHq3R",1,1, 3000.) 
                +121536. * getSMEFTCoeff("CHq3R",2,2, 3000.) 
                +143.678 * getSMEFTCoeff("Cqq1R",0,0,2,2, 3000.) 
                +67229757. * getSMEFTCoeff("Cqq1R",0,2,2,0, 3000.) 
                +5246536. * getSMEFTCoeff("Cqq1R",1,2,2,1, 3000.) 
                +403423883. * getSMEFTCoeff("Cqq3R",0,0,2,2, 3000.) 
                -67235441. * getSMEFTCoeff("Cqq3R",0,2,2,0, 3000.) 
                +31498132. * getSMEFTCoeff("Cqq3R",1,1,2,2, 3000.) 
                -5245562. * getSMEFTCoeff("Cqq3R",1,2,2,1, 3000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin5a0 * sigmaMx_Bin5a0/0.045/0.045; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin6a0 = 0.0, sigmaMx_Bin6a0 = 0.0; 
 
        sigmaSMMx_Bin6a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin6a0 = sigmaSMMx_Bin6a0 
                -121188. * getSMEFTCoeff("CHl3R",0,0, 3000.) 
                -121221. * getSMEFTCoeff("CHl3R",1,1, 3000.) 
                +121324. * getSMEFTCoeff("CllR",0,1,1,0, 3000.) 
                +114080. * getSMEFTCoeff("CHq3R",0,0, 3000.) 
                +7304.79 * getSMEFTCoeff("CHq3R",1,1, 3000.) 
                +121291. * getSMEFTCoeff("CHq3R",2,2, 3000.) 
                -124.891 * getSMEFTCoeff("Cqq1R",0,0,2,2, 3000.) 
                +114966160. * getSMEFTCoeff("Cqq1R",0,2,2,0, 3000.) 
                +7349951. * getSMEFTCoeff("Cqq1R",1,2,2,1, 3000.) 
                +689743527. * getSMEFTCoeff("Cqq3R",0,0,2,2, 3000.) 
                -114937185. * getSMEFTCoeff("Cqq3R",0,2,2,0, 3000.) 
                +44039379. * getSMEFTCoeff("Cqq3R",1,1,2,2, 3000.) 
                -7352753. * getSMEFTCoeff("Cqq3R",1,2,2,1, 3000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin6a0 * sigmaMx_Bin6a0/0.053/0.053; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin7a0 = 0.0, sigmaMx_Bin7a0 = 0.0; 
 
        sigmaSMMx_Bin7a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin7a0 = sigmaSMMx_Bin7a0 
                +88.8034 * getSMEFTCoeff("CHD", 5000.) 
                +118.404 * getSMEFTCoeff("CHWB", 5000.) 
                -121208. * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -121144. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                +121453. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                +115148. * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +6245.84 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +121350. * getSMEFTCoeff("CHq3R",2,2, 5000.) 
                +162.806 * getSMEFTCoeff("Cqq1R",0,0,2,2, 5000.) 
                +175201465. * getSMEFTCoeff("Cqq1R",0,2,2,0, 5000.) 
                +9457881. * getSMEFTCoeff("Cqq1R",1,2,2,1, 5000.) 
                +1051897980. * getSMEFTCoeff("Cqq3R",0,0,2,2, 5000.) 
                -175261052. * getSMEFTCoeff("Cqq3R",0,2,2,0, 5000.) 
                +56728658. * getSMEFTCoeff("Cqq3R",1,1,2,2, 5000.) 
                -9457607. * getSMEFTCoeff("Cqq3R",1,2,2,1, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin7a0 * sigmaMx_Bin7a0/0.061/0.061; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin8a0 = 0.0, sigmaMx_Bin8a0 = 0.0; 
 
        sigmaSMMx_Bin8a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin8a0 = sigmaSMMx_Bin8a0 
                +152.164 * getSMEFTCoeff("CHD", 5000.) 
                -121203. * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -121196. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                +121113. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                +116167. * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +5224.68 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +121303. * getSMEFTCoeff("CHq3R",2,2, 5000.) 
                +111.745 * getSMEFTCoeff("Cqq1R",0,0,2,2, 5000.) 
                +275477603. * getSMEFTCoeff("Cqq1R",0,2,2,0, 5000.) 
                +12208678. * getSMEFTCoeff("Cqq1R",1,2,2,1, 5000.) 
                +1652462863. * getSMEFTCoeff("Cqq3R",0,0,2,2, 5000.) 
                -275425868. * getSMEFTCoeff("Cqq3R",0,2,2,0, 5000.) 
                +73238160. * getSMEFTCoeff("Cqq3R",1,1,2,2, 5000.) 
                -12211198. * getSMEFTCoeff("Cqq3R",1,2,2,1, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin8a0 * sigmaMx_Bin8a0/0.09/0.09; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin9a0 = 0.0, sigmaMx_Bin9a0 = 0.0; 
 
        sigmaSMMx_Bin9a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin9a0 = sigmaSMMx_Bin9a0 
                -121195. * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -121250. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                +121190. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                +116779. * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +4093.79 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +121074. * getSMEFTCoeff("CHq3R",2,2, 5000.) 
                +469404075. * getSMEFTCoeff("Cqq1R",0,2,2,0, 5000.) 
                +16358803. * getSMEFTCoeff("Cqq1R",1,2,2,1, 5000.) 
                +2816732539. * getSMEFTCoeff("Cqq3R",0,0,2,2, 5000.) 
                -469189045. * getSMEFTCoeff("Cqq3R",0,2,2,0, 5000.) 
                +98061666. * getSMEFTCoeff("Cqq3R",1,1,2,2, 5000.) 
                -16356698. * getSMEFTCoeff("Cqq3R",1,2,2,1, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin9a0 * sigmaMx_Bin9a0/0.141/0.141; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin10a0 = 0.0, sigmaMx_Bin10a0 = 0.0; 
 
        sigmaSMMx_Bin10a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin10a0 = sigmaSMMx_Bin10a0 
                -244.679 * getSMEFTCoeff("CHD", 10000.) 
                -177.555 * getSMEFTCoeff("CHWB", 10000.) 
                -121335. * getSMEFTCoeff("CHl3R",0,0, 10000.) 
                -121218. * getSMEFTCoeff("CHl3R",1,1, 10000.) 
                +120962. * getSMEFTCoeff("CllR",0,1,1,0, 10000.) 
                +117931. * getSMEFTCoeff("CHq3R",0,0, 10000.) 
                +3170. * getSMEFTCoeff("CHq3R",1,1, 10000.) 
                +120832. * getSMEFTCoeff("CHq3R",2,2, 10000.) 
                +818737704. * getSMEFTCoeff("Cqq1R",0,2,2,0, 10000.) 
                +21799490. * getSMEFTCoeff("Cqq1R",1,2,2,1, 10000.) 
                +4915894667. * getSMEFTCoeff("Cqq3R",0,0,2,2, 10000.) 
                -819765641. * getSMEFTCoeff("Cqq3R",0,2,2,0, 10000.) 
                +130766534. * getSMEFTCoeff("Cqq3R",1,1,2,2, 10000.) 
                -21790684. * getSMEFTCoeff("Cqq3R",1,2,2,1, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin10a0 * sigmaMx_Bin10a0/0.115/0.115; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin11a0 = 0.0, sigmaMx_Bin11a0 = 0.0; 
 
        sigmaSMMx_Bin11a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin11a0 = sigmaSMMx_Bin11a0 
                +144.446 * getSMEFTCoeff("CHD", 10000.) 
                -121234. * getSMEFTCoeff("CHl3R",0,0, 10000.) 
                -121137. * getSMEFTCoeff("CHl3R",1,1, 10000.) 
                +121678. * getSMEFTCoeff("CllR",0,1,1,0, 10000.) 
                +119363. * getSMEFTCoeff("CHq3R",0,0, 10000.) 
                +2312.28 * getSMEFTCoeff("CHq3R",1,1, 10000.) 
                +121334. * getSMEFTCoeff("CHq3R",2,2, 10000.) 
                +151.324 * getSMEFTCoeff("Cqq1R",0,0,2,2, 10000.) 
                +1719827513. * getSMEFTCoeff("Cqq1R",0,2,2,0, 10000.) 
                +31882248. * getSMEFTCoeff("Cqq1R",1,2,2,1, 10000.) 
                +10328815247. * getSMEFTCoeff("Cqq3R",0,0,2,2, 10000.) 
                -1721626115. * getSMEFTCoeff("Cqq3R",0,2,2,0, 10000.) 
                +191466680. * getSMEFTCoeff("Cqq3R",1,1,2,2, 10000.) 
                -31928941. * getSMEFTCoeff("Cqq3R",1,2,2,1, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin11a0 * sigmaMx_Bin11a0/0.36/0.36; 
 
 
//----------------------------------------------------------- 
 
    return dchi2Tot; 
 
}









const double NPSMEFTd6General::chi2FCChhHW() const
{
    double dchi2Tot = 0.0;

    double sigmaSMpTH_Bin1a0 = 0.0, sigmapTH_Bin1a0 = 0.0; 
 
        sigmaSMpTH_Bin1a0 = 0.; //Only NP contribution 
 
        sigmapTH_Bin1a0 = sigmaSMpTH_Bin1a0 
                +825935. * getSMEFTCoeff("CHW", 80.) 
                -31177.2 * getSMEFTCoeff("CHD", 80.) 
                +120632. * getSMEFTCoeff("CHbox", 80.) 
                -121373. * getSMEFTCoeff("CHl3R",0,0, 80.) 
                -122044. * getSMEFTCoeff("CHl3R",1,1, 80.) 
                +120442. * getSMEFTCoeff("CllR",0,1,1,0, 80.) 
                +871101. * getSMEFTCoeff("CHq3R",0,0, 80.) 
                +272549. * getSMEFTCoeff("CHq3R",1,1, 80.) 
                ;
 
        dchi2Tot += sigmapTH_Bin1a0 * sigmapTH_Bin1a0/0.028/0.028; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTH_Bin2a0 = 0.0, sigmapTH_Bin2a0 = 0.0; 
 
        sigmaSMpTH_Bin2a0 = 0.; //Only NP contribution 
 
        sigmapTH_Bin2a0 = sigmaSMpTH_Bin2a0 
                +952699. * getSMEFTCoeff("CHW", 125.) 
                -30326. * getSMEFTCoeff("CHD", 125.) 
                +121144. * getSMEFTCoeff("CHbox", 125.) 
                -121838. * getSMEFTCoeff("CHl3R",0,0, 125.) 
                -121700. * getSMEFTCoeff("CHl3R",1,1, 125.) 
                +120614. * getSMEFTCoeff("CllR",0,1,1,0, 125.) 
                +1549374. * getSMEFTCoeff("CHq3R",0,0, 125.) 
                +438492. * getSMEFTCoeff("CHq3R",1,1, 125.) 
                ;
 
        dchi2Tot += sigmapTH_Bin2a0 * sigmapTH_Bin2a0/0.0268/0.0268; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTH_Bin3a0 = 0.0, sigmapTH_Bin3a0 = 0.0; 
 
        sigmaSMpTH_Bin3a0 = 0.; //Only NP contribution 
 
        sigmapTH_Bin3a0 = sigmaSMpTH_Bin3a0 
                +1052877. * getSMEFTCoeff("CHW", 240.) 
                -30446. * getSMEFTCoeff("CHD", 240.) 
                +121012. * getSMEFTCoeff("CHbox", 240.) 
                -121781. * getSMEFTCoeff("CHl3R",0,0, 240.) 
                -121321. * getSMEFTCoeff("CHl3R",1,1, 240.) 
                +120885. * getSMEFTCoeff("CllR",0,1,1,0, 240.) 
                +3354452. * getSMEFTCoeff("CHq3R",0,0, 240.) 
                +823967. * getSMEFTCoeff("CHq3R",1,1, 240.) 
                ;
 
        dchi2Tot += sigmapTH_Bin3a0 * sigmapTH_Bin3a0/0.0252/0.0252; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTH_Bin4a0 = 0.0, sigmapTH_Bin4a0 = 0.0; 
 
        sigmaSMpTH_Bin4a0 = 0.; //Only NP contribution 
 
        sigmapTH_Bin4a0 = sigmaSMpTH_Bin4a0 
                +1103692. * getSMEFTCoeff("CHW", 365.) 
                -30291.4 * getSMEFTCoeff("CHD", 365.) 
                +120544. * getSMEFTCoeff("CHbox", 365.) 
                -121094. * getSMEFTCoeff("CHl3R",0,0, 365.) 
                -121804. * getSMEFTCoeff("CHl3R",1,1, 365.) 
                +121320. * getSMEFTCoeff("CllR",0,1,1,0, 365.) 
                +7734609. * getSMEFTCoeff("CHq3R",0,0, 365.) 
                +1608098. * getSMEFTCoeff("CHq3R",1,1, 365.) 
                ;
 
        dchi2Tot += sigmapTH_Bin4a0 * sigmapTH_Bin4a0/0.0329/0.0329; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTH_Bin5a0 = 0.0, sigmapTH_Bin5a0 = 0.0; 
 
        sigmaSMpTH_Bin5a0 = 0.; //Only NP contribution 
 
        sigmapTH_Bin5a0 = sigmaSMpTH_Bin5a0 
                +1122075. * getSMEFTCoeff("CHW", 550.) 
                -30383.7 * getSMEFTCoeff("CHD", 550.) 
                +120914. * getSMEFTCoeff("CHbox", 550.) 
                -121403. * getSMEFTCoeff("CHl3R",0,0, 550.) 
                -121937. * getSMEFTCoeff("CHl3R",1,1, 550.) 
                +122160. * getSMEFTCoeff("CllR",0,1,1,0, 550.) 
                +17932075. * getSMEFTCoeff("CHq3R",0,0, 550.) 
                +3115786. * getSMEFTCoeff("CHq3R",1,1, 550.) 
                ;
 
        dchi2Tot += sigmapTH_Bin5a0 * sigmapTH_Bin5a0/0.0519/0.0519; 
 
 
//----------------------------------------------------------- 
    double sigmaSMpTH_Bin6a0 = 0.0, sigmapTH_Bin6a0 = 0.0; 
 
        sigmaSMpTH_Bin6a0 = 0.; //Only NP contribution 
 
        sigmapTH_Bin6a0 = sigmaSMpTH_Bin6a0 
                +1118903. * getSMEFTCoeff("CHW", 1000.) 
                -30139. * getSMEFTCoeff("CHD", 1000.) 
                +120609. * getSMEFTCoeff("CHbox", 1000.) 
                -120545. * getSMEFTCoeff("CHl3R",0,0, 1000.) 
                -121340. * getSMEFTCoeff("CHl3R",1,1, 1000.) 
                +121674. * getSMEFTCoeff("CllR",0,1,1,0, 1000.) 
                +63346560. * getSMEFTCoeff("CHq3R",0,0, 1000.) 
                +7533940. * getSMEFTCoeff("CHq3R",1,1, 1000.) 
                ;
 
        dchi2Tot += sigmapTH_Bin6a0 * sigmapTH_Bin6a0/0.0813/0.0813; 
 
 
//----------------------------------------------------------- 
 
    return dchi2Tot; 
 
}






const double NPSMEFTd6General::chi2FCChhee() const
{
    double dchi2Tot = 0.0;

    double sigmaSMMx_Bin1a0 = 0.0, sigmaMx_Bin1a0 = 0.0; 
 
        sigmaSMMx_Bin1a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin1a0 = sigmaSMMx_Bin1a0 
                -97243.9 * getSMEFTCoeff("CHD", 1500.) 
                -224494. * getSMEFTCoeff("CHWB", 1500.) 
                +68160.2 * getSMEFTCoeff("CHl1R",0,0, 1500.) 
                -53071.3 * getSMEFTCoeff("CHl3R",0,0, 1500.) 
                -121155. * getSMEFTCoeff("CHl3R",1,1, 1500.) 
                -14006.5 * getSMEFTCoeff("CHeR",0,0, 1500.) 
                -7753.22 * getSMEFTCoeff("CHq1R",0,0, 1500.) 
                +1994.53 * getSMEFTCoeff("CHq1R",1,1, 1500.) 
                +47352.4 * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +6451.1 * getSMEFTCoeff("CHq3R",1,1, 1500.) 
                +6820.81 * getSMEFTCoeff("CHuR",0,0, 1500.) 
                +245.892 * getSMEFTCoeff("CHuR",1,1, 1500.) 
                -2539.73 * getSMEFTCoeff("CHdR",0,0, 1500.) 
                -664.844 * getSMEFTCoeff("CHdR",1,1, 1500.) 
                +121382. * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                -16512970. * getSMEFTCoeff("Clq1R",0,0,0,0, 1500.) 
                +1068334. * getSMEFTCoeff("Clq1R",0,0,1,1, 1500.) 
                +52226003. * getSMEFTCoeff("Clq3R",0,0,0,0, 1500.) 
                +6758647. * getSMEFTCoeff("Clq3R",0,0,1,1, 1500.) 
                -24046985. * getSMEFTCoeff("CeuR",0,0,0,0, 1500.) 
                -1988406. * getSMEFTCoeff("CeuR",0,0,1,1, 1500.) 
                +7896534. * getSMEFTCoeff("CedR",0,0,0,0, 1500.) 
                +1320819. * getSMEFTCoeff("CedR",0,0,1,1, 1500.) 
                -12006504. * getSMEFTCoeff("CluR",0,0,0,0, 1500.) 
                -992334. * getSMEFTCoeff("CluR",0,0,1,1, 1500.) 
                +3943772. * getSMEFTCoeff("CldR",0,0,0,0, 1500.) 
                +659974. * getSMEFTCoeff("CldR",0,0,1,1, 1500.) 
                -9780758. * getSMEFTCoeff("CqeR",0,0,0,0, 1500.) 
                -1327510. * getSMEFTCoeff("CqeR",1,1,0,0, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin1a0 * sigmaMx_Bin1a0/0.016/0.016; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin2a0 = 0.0, sigmaMx_Bin2a0 = 0.0; 
 
        sigmaSMMx_Bin2a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin2a0 = sigmaSMMx_Bin2a0 
                -97431.3 * getSMEFTCoeff("CHD", 1500.) 
                -225557. * getSMEFTCoeff("CHWB", 1500.) 
                +68230.9 * getSMEFTCoeff("CHl1R",0,0, 1500.) 
                -52888.6 * getSMEFTCoeff("CHl3R",0,0, 1500.) 
                -120971. * getSMEFTCoeff("CHl3R",1,1, 1500.) 
                -13485.7 * getSMEFTCoeff("CHeR",0,0, 1500.) 
                -8144.46 * getSMEFTCoeff("CHq1R",0,0, 1500.) 
                +2169.65 * getSMEFTCoeff("CHq1R",1,1, 1500.) 
                +48465.2 * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +6263.02 * getSMEFTCoeff("CHq3R",1,1, 1500.) 
                +7414.12 * getSMEFTCoeff("CHuR",0,0, 1500.) 
                +817.106 * getSMEFTCoeff("CHuR",1,1, 1500.) 
                -1685.66 * getSMEFTCoeff("CHdR",0,0, 1500.) 
                -35.3178 * getSMEFTCoeff("CHdR",1,1, 1500.) 
                +121349. * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                -26004523. * getSMEFTCoeff("Clq1R",0,0,0,0, 1500.) 
                +1644928. * getSMEFTCoeff("Clq1R",0,0,1,1, 1500.) 
                +79690894. * getSMEFTCoeff("Clq3R",0,0,0,0, 1500.) 
                +9126861. * getSMEFTCoeff("Clq3R",0,0,1,1, 1500.) 
                -36979870. * getSMEFTCoeff("CeuR",0,0,0,0, 1500.) 
                -2617646. * getSMEFTCoeff("CeuR",0,0,1,1, 1500.) 
                +11892407. * getSMEFTCoeff("CedR",0,0,0,0, 1500.) 
                +1764025. * getSMEFTCoeff("CedR",0,0,1,1, 1500.) 
                -18470041. * getSMEFTCoeff("CluR",0,0,0,0, 1500.) 
                -1307847. * getSMEFTCoeff("CluR",0,0,1,1, 1500.) 
                +5945870. * getSMEFTCoeff("CldR",0,0,0,0, 1500.) 
                +881947. * getSMEFTCoeff("CldR",0,0,1,1, 1500.) 
                -14924181. * getSMEFTCoeff("CqeR",0,0,0,0, 1500.) 
                -1798475. * getSMEFTCoeff("CqeR",1,1,0,0, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin2a0 * sigmaMx_Bin2a0/0.018/0.018; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin3a0 = 0.0, sigmaMx_Bin3a0 = 0.0; 
 
        sigmaSMMx_Bin3a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin3a0 = sigmaSMMx_Bin3a0 
                -98062.8 * getSMEFTCoeff("CHD", 3000.) 
                -226952. * getSMEFTCoeff("CHWB", 3000.) 
                +67360.1 * getSMEFTCoeff("CHl1R",0,0, 3000.) 
                -53914.6 * getSMEFTCoeff("CHl3R",0,0, 3000.) 
                -121006. * getSMEFTCoeff("CHl3R",1,1, 3000.) 
                -13980.9 * getSMEFTCoeff("CHeR",0,0, 3000.) 
                -9274.66 * getSMEFTCoeff("CHq1R",0,0, 3000.) 
                +1556.94 * getSMEFTCoeff("CHq1R",1,1, 3000.) 
                +48020. * getSMEFTCoeff("CHq3R",0,0, 3000.) 
                +4867.43 * getSMEFTCoeff("CHq3R",1,1, 3000.) 
                +7147.53 * getSMEFTCoeff("CHuR",0,0, 3000.) 
                -67.0061 * getSMEFTCoeff("CHuR",1,1, 3000.) 
                -2191.61 * getSMEFTCoeff("CHdR",0,0, 3000.) 
                -280.035 * getSMEFTCoeff("CHdR",1,1, 3000.) 
                +120868. * getSMEFTCoeff("CllR",0,1,1,0, 3000.) 
                -42247777. * getSMEFTCoeff("Clq1R",0,0,0,0, 3000.) 
                +2606472. * getSMEFTCoeff("Clq1R",0,0,1,1, 3000.) 
                +125977827. * getSMEFTCoeff("Clq3R",0,0,0,0, 3000.) 
                +12555813. * getSMEFTCoeff("Clq3R",0,0,1,1, 3000.) 
                -58848080. * getSMEFTCoeff("CeuR",0,0,0,0, 3000.) 
                -3477668. * getSMEFTCoeff("CeuR",0,0,1,1, 3000.) 
                +18556311. * getSMEFTCoeff("CedR",0,0,0,0, 3000.) 
                +2384597. * getSMEFTCoeff("CedR",0,0,1,1, 3000.) 
                -29411798. * getSMEFTCoeff("CluR",0,0,0,0, 3000.) 
                -1738284. * getSMEFTCoeff("CluR",0,0,1,1, 3000.) 
                +9276242. * getSMEFTCoeff("CldR",0,0,0,0, 3000.) 
                +1191679. * getSMEFTCoeff("CldR",0,0,1,1, 3000.) 
                -23571246. * getSMEFTCoeff("CqeR",0,0,0,0, 3000.) 
                -2478389. * getSMEFTCoeff("CqeR",1,1,0,0, 3000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin3a0 * sigmaMx_Bin3a0/0.018/0.018; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin4a0 = 0.0, sigmaMx_Bin4a0 = 0.0; 
 
        sigmaSMMx_Bin4a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin4a0 = sigmaSMMx_Bin4a0 
                -98707.6 * getSMEFTCoeff("CHD", 3000.) 
                -227449. * getSMEFTCoeff("CHWB", 3000.) 
                +67415.5 * getSMEFTCoeff("CHl1R",0,0, 3000.) 
                -53947.8 * getSMEFTCoeff("CHl3R",0,0, 3000.) 
                -120712. * getSMEFTCoeff("CHl3R",1,1, 3000.) 
                -13834.7 * getSMEFTCoeff("CHeR",0,0, 3000.) 
                -9431.73 * getSMEFTCoeff("CHq1R",0,0, 3000.) 
                +1736.57 * getSMEFTCoeff("CHq1R",1,1, 3000.) 
                +48817.1 * getSMEFTCoeff("CHq3R",0,0, 3000.) 
                +4507.41 * getSMEFTCoeff("CHq3R",1,1, 3000.) 
                +7618.35 * getSMEFTCoeff("CHuR",0,0, 3000.) 
                +157.79 * getSMEFTCoeff("CHuR",1,1, 3000.) 
                -2213. * getSMEFTCoeff("CHdR",0,0, 3000.) 
                -325.428 * getSMEFTCoeff("CHdR",1,1, 3000.) 
                +121122. * getSMEFTCoeff("CllR",0,1,1,0, 3000.) 
                -74171980. * getSMEFTCoeff("Clq1R",0,0,0,0, 3000.) 
                +4457012. * getSMEFTCoeff("Clq1R",0,0,1,1, 3000.) 
                +215110061. * getSMEFTCoeff("Clq3R",0,0,0,0, 3000.) 
                +18190400. * getSMEFTCoeff("Clq3R",0,0,1,1, 3000.) 
                -101246802. * getSMEFTCoeff("CeuR",0,0,0,0, 3000.) 
                -4802433. * getSMEFTCoeff("CeuR",0,0,1,1, 3000.) 
                +31289550. * getSMEFTCoeff("CedR",0,0,0,0, 3000.) 
                +3371080. * getSMEFTCoeff("CedR",0,0,1,1, 3000.) 
                -50630837. * getSMEFTCoeff("CluR",0,0,0,0, 3000.) 
                -2402130. * getSMEFTCoeff("CluR",0,0,1,1, 3000.) 
                +15636777. * getSMEFTCoeff("CldR",0,0,0,0, 3000.) 
                +1685268. * getSMEFTCoeff("CldR",0,0,1,1, 3000.) 
                -40235433. * getSMEFTCoeff("CqeR",0,0,0,0, 3000.) 
                -3603419. * getSMEFTCoeff("CqeR",1,1,0,0, 3000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin4a0 * sigmaMx_Bin4a0/0.024/0.024; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin5a0 = 0.0, sigmaMx_Bin5a0 = 0.0; 
 
        sigmaSMMx_Bin5a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin5a0 = sigmaSMMx_Bin5a0 
                -98921.6 * getSMEFTCoeff("CHD", 5000.) 
                -228610. * getSMEFTCoeff("CHWB", 5000.) 
                +67326.1 * getSMEFTCoeff("CHl1R",0,0, 5000.) 
                -54409.2 * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -120832. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                -13825.3 * getSMEFTCoeff("CHeR",0,0, 5000.) 
                -9935.28 * getSMEFTCoeff("CHq1R",0,0, 5000.) 
                +1541.2 * getSMEFTCoeff("CHq1R",1,1, 5000.) 
                +49061.7 * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +3704.34 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +7576.15 * getSMEFTCoeff("CHuR",0,0, 5000.) 
                -89.8022 * getSMEFTCoeff("CHuR",1,1, 5000.) 
                -2416.16 * getSMEFTCoeff("CHdR",0,0, 5000.) 
                -124.388 * getSMEFTCoeff("CHdR",1,1, 5000.) 
                +121232. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                -115112421. * getSMEFTCoeff("Clq1R",0,0,0,0, 5000.) 
                +6775448. * getSMEFTCoeff("Clq1R",0,0,1,1, 5000.) 
                +327497246. * getSMEFTCoeff("Clq3R",0,0,0,0, 5000.) 
                +24270920. * getSMEFTCoeff("Clq3R",0,0,1,1, 5000.) 
                -154916017. * getSMEFTCoeff("CeuR",0,0,0,0, 5000.) 
                -6117874. * getSMEFTCoeff("CeuR",0,0,1,1, 5000.) 
                +47187152. * getSMEFTCoeff("CedR",0,0,0,0, 5000.) 
                +4389694. * getSMEFTCoeff("CedR",0,0,1,1, 5000.) 
                -77458421. * getSMEFTCoeff("CluR",0,0,0,0, 5000.) 
                -3060690. * getSMEFTCoeff("CluR",0,0,1,1, 5000.) 
                +23592827. * getSMEFTCoeff("CldR",0,0,0,0, 5000.) 
                +2194638. * getSMEFTCoeff("CldR",0,0,1,1, 5000.) 
                -61234314. * getSMEFTCoeff("CqeR",0,0,0,0, 5000.) 
                -4822872. * getSMEFTCoeff("CqeR",1,1,0,0, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin5a0 * sigmaMx_Bin5a0/0.035/0.035; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin6a0 = 0.0, sigmaMx_Bin6a0 = 0.0; 
 
        sigmaSMMx_Bin6a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin6a0 = sigmaSMMx_Bin6a0 
                -99174.4 * getSMEFTCoeff("CHD", 5000.) 
                -229078. * getSMEFTCoeff("CHWB", 5000.) 
                +67086.3 * getSMEFTCoeff("CHl1R",0,0, 5000.) 
                -54290.7 * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -120971. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                -13556.3 * getSMEFTCoeff("CHeR",0,0, 5000.) 
                -10027.9 * getSMEFTCoeff("CHq1R",0,0, 5000.) 
                +1665.28 * getSMEFTCoeff("CHq1R",1,1, 5000.) 
                +49622.2 * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +3337.55 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +7620.7 * getSMEFTCoeff("CHuR",0,0, 5000.) 
                -66.0873 * getSMEFTCoeff("CHuR",1,1, 5000.) 
                -2056.13 * getSMEFTCoeff("CHdR",0,0, 5000.) 
                -205.831 * getSMEFTCoeff("CHdR",1,1, 5000.) 
                +121935. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                -165357045. * getSMEFTCoeff("Clq1R",0,0,0,0, 5000.) 
                +9560132. * getSMEFTCoeff("Clq1R",0,0,1,1, 5000.) 
                +462918764. * getSMEFTCoeff("Clq3R",0,0,0,0, 5000.) 
                +30752480. * getSMEFTCoeff("Clq3R",0,0,1,1, 5000.) 
                -219834237. * getSMEFTCoeff("CeuR",0,0,0,0, 5000.) 
                -7416469. * getSMEFTCoeff("CeuR",0,0,1,1, 5000.) 
                +66220661. * getSMEFTCoeff("CedR",0,0,0,0, 5000.) 
                +5428941. * getSMEFTCoeff("CedR",0,0,1,1, 5000.) 
                -109945836. * getSMEFTCoeff("CluR",0,0,0,0, 5000.) 
                -3707916. * getSMEFTCoeff("CluR",0,0,1,1, 5000.) 
                +33104822. * getSMEFTCoeff("CldR",0,0,0,0, 5000.) 
                +2715948. * getSMEFTCoeff("CldR",0,0,1,1, 5000.) 
                -86507797. * getSMEFTCoeff("CqeR",0,0,0,0, 5000.) 
                -6129870. * getSMEFTCoeff("CqeR",1,1,0,0, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin6a0 * sigmaMx_Bin6a0/0.05/0.05; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin7a0 = 0.0, sigmaMx_Bin7a0 = 0.0; 
 
        sigmaSMMx_Bin7a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin7a0 = sigmaSMMx_Bin7a0 
                -99614.4 * getSMEFTCoeff("CHD", 5000.) 
                -229696. * getSMEFTCoeff("CHWB", 5000.) 
                +66424.9 * getSMEFTCoeff("CHl1R",0,0, 5000.) 
                -54581.4 * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -121183. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                -13639. * getSMEFTCoeff("CHeR",0,0, 5000.) 
                -10719. * getSMEFTCoeff("CHq1R",0,0, 5000.) 
                +1388.78 * getSMEFTCoeff("CHq1R",1,1, 5000.) 
                +49101.3 * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +2685.5 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +7396.94 * getSMEFTCoeff("CHuR",0,0, 5000.) 
                -187.903 * getSMEFTCoeff("CHuR",1,1, 5000.) 
                -2401.12 * getSMEFTCoeff("CHdR",0,0, 5000.) 
                -430.348 * getSMEFTCoeff("CHdR",1,1, 5000.) 
                +121527. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                -224838017. * getSMEFTCoeff("Clq1R",0,0,0,0, 5000.) 
                +12758607. * getSMEFTCoeff("Clq1R",0,0,1,1, 5000.) 
                +621668490. * getSMEFTCoeff("Clq3R",0,0,0,0, 5000.) 
                +37584429. * getSMEFTCoeff("Clq3R",0,0,1,1, 5000.) 
                -296119823. * getSMEFTCoeff("CeuR",0,0,0,0, 5000.) 
                -8684011. * getSMEFTCoeff("CeuR",0,0,1,1, 5000.) 
                +88235244. * getSMEFTCoeff("CedR",0,0,0,0, 5000.) 
                +6488458. * getSMEFTCoeff("CedR",0,0,1,1, 5000.) 
                -148116395. * getSMEFTCoeff("CluR",0,0,0,0, 5000.) 
                -4343738. * getSMEFTCoeff("CluR",0,0,1,1, 5000.) 
                +44110429. * getSMEFTCoeff("CldR",0,0,0,0, 5000.) 
                +3246640. * getSMEFTCoeff("CldR",0,0,1,1, 5000.) 
                -116097164. * getSMEFTCoeff("CqeR",0,0,0,0, 5000.) 
                -7514893. * getSMEFTCoeff("CqeR",1,1,0,0, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin7a0 * sigmaMx_Bin7a0/0.073/0.073; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin8a0 = 0.0, sigmaMx_Bin8a0 = 0.0; 
 
        sigmaSMMx_Bin8a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin8a0 = sigmaSMMx_Bin8a0 
                -99724.4 * getSMEFTCoeff("CHD", 5000.) 
                -230422. * getSMEFTCoeff("CHWB", 5000.) 
                +66703.7 * getSMEFTCoeff("CHl1R",0,0, 5000.) 
                -54824.9 * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -120962. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                -13457.4 * getSMEFTCoeff("CHeR",0,0, 5000.) 
                -10579.1 * getSMEFTCoeff("CHq1R",0,0, 5000.) 
                +1345.24 * getSMEFTCoeff("CHq1R",1,1, 5000.) 
                +49965.1 * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +3605. * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +7888.22 * getSMEFTCoeff("CHuR",0,0, 5000.) 
                +354.862 * getSMEFTCoeff("CHuR",1,1, 5000.) 
                -1842.3 * getSMEFTCoeff("CHdR",0,0, 5000.) 
                -42.285 * getSMEFTCoeff("CHdR",1,1, 5000.) 
                +122024. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                -322382967. * getSMEFTCoeff("Clq1R",0,0,0,0, 5000.) 
                +17844141. * getSMEFTCoeff("Clq1R",0,0,1,1, 5000.) 
                +874171560. * getSMEFTCoeff("Clq3R",0,0,0,0, 5000.) 
                +47408294. * getSMEFTCoeff("Clq3R",0,0,1,1, 5000.) 
                -418491496. * getSMEFTCoeff("CeuR",0,0,0,0, 5000.) 
                -10345114. * getSMEFTCoeff("CeuR",0,0,1,1, 5000.) 
                +122816082. * getSMEFTCoeff("CedR",0,0,0,0, 5000.) 
                +7949074. * getSMEFTCoeff("CedR",0,0,1,1, 5000.) 
                -209389627. * getSMEFTCoeff("CluR",0,0,0,0, 5000.) 
                -5171526. * getSMEFTCoeff("CluR",0,0,1,1, 5000.) 
                +61414928. * getSMEFTCoeff("CldR",0,0,0,0, 5000.) 
                +3975783. * getSMEFTCoeff("CldR",0,0,1,1, 5000.) 
                -163177024. * getSMEFTCoeff("CqeR",0,0,0,0, 5000.) 
                -9508995. * getSMEFTCoeff("CqeR",1,1,0,0, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin8a0 * sigmaMx_Bin8a0/0.095/0.095; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin9a0 = 0.0, sigmaMx_Bin9a0 = 0.0; 
 
        sigmaSMMx_Bin9a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin9a0 = sigmaSMMx_Bin9a0 
                -100510. * getSMEFTCoeff("CHD", 10000.) 
                -231517. * getSMEFTCoeff("CHWB", 10000.) 
                +65608.5 * getSMEFTCoeff("CHl1R",0,0, 10000.) 
                -55345.1 * getSMEFTCoeff("CHl3R",0,0, 10000.) 
                -121121. * getSMEFTCoeff("CHl3R",1,1, 10000.) 
                -13849.9 * getSMEFTCoeff("CHeR",0,0, 10000.) 
                -11933.3 * getSMEFTCoeff("CHq1R",0,0, 10000.) 
                +733.784 * getSMEFTCoeff("CHq1R",1,1, 10000.) 
                +49410.4 * getSMEFTCoeff("CHq3R",0,0, 10000.) 
                +2037.46 * getSMEFTCoeff("CHq3R",1,1, 10000.) 
                +7380.19 * getSMEFTCoeff("CHuR",0,0, 10000.) 
                -264.319 * getSMEFTCoeff("CHuR",1,1, 10000.) 
                -2219.15 * getSMEFTCoeff("CHdR",0,0, 10000.) 
                -391.998 * getSMEFTCoeff("CHdR",1,1, 10000.) 
                +121692. * getSMEFTCoeff("CllR",0,1,1,0, 10000.) 
                -520854317. * getSMEFTCoeff("Clq1R",0,0,0,0, 10000.) 
                +27550583. * getSMEFTCoeff("Clq1R",0,0,1,1, 10000.) 
                +1366259680. * getSMEFTCoeff("Clq3R",0,0,0,0, 10000.) 
                +64316523. * getSMEFTCoeff("Clq3R",0,0,1,1, 10000.) 
                -660010778. * getSMEFTCoeff("CeuR",0,0,0,0, 10000.) 
                -12872641. * getSMEFTCoeff("CeuR",0,0,1,1, 10000.) 
                +188267289. * getSMEFTCoeff("CedR",0,0,0,0, 10000.) 
                +10361421. * getSMEFTCoeff("CedR",0,0,1,1, 10000.) 
                -330134709. * getSMEFTCoeff("CluR",0,0,0,0, 10000.) 
                -6435948. * getSMEFTCoeff("CluR",0,0,1,1, 10000.) 
                +94115987. * getSMEFTCoeff("CldR",0,0,0,0, 10000.) 
                +5180936. * getSMEFTCoeff("CldR",0,0,1,1, 10000.) 
                -254724895. * getSMEFTCoeff("CqeR",0,0,0,0, 10000.) 
                -12959975. * getSMEFTCoeff("CqeR",1,1,0,0, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin9a0 * sigmaMx_Bin9a0/0.174/0.174; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin10a0 = 0.0, sigmaMx_Bin10a0 = 0.0; 
 
        sigmaSMMx_Bin10a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin10a0 = sigmaSMMx_Bin10a0 
                -101407. * getSMEFTCoeff("CHD", 10000.) 
                -234221. * getSMEFTCoeff("CHWB", 10000.) 
                +65328.8 * getSMEFTCoeff("CHl1R",0,0, 10000.) 
                -55952.8 * getSMEFTCoeff("CHl3R",0,0, 10000.) 
                -121205. * getSMEFTCoeff("CHl3R",1,1, 10000.) 
                -13344.3 * getSMEFTCoeff("CHeR",0,0, 10000.) 
                -13274.2 * getSMEFTCoeff("CHq1R",0,0, 10000.) 
                +678.518 * getSMEFTCoeff("CHq1R",1,1, 10000.) 
                +49437.5 * getSMEFTCoeff("CHq3R",0,0, 10000.) 
                +2289.93 * getSMEFTCoeff("CHq3R",1,1, 10000.) 
                +7604.6 * getSMEFTCoeff("CHuR",0,0, 10000.) 
                -186.358 * getSMEFTCoeff("CHuR",1,1, 10000.) 
                -2157.98 * getSMEFTCoeff("CHdR",0,0, 10000.) 
                -356.506 * getSMEFTCoeff("CHdR",1,1, 10000.) 
                +121358. * getSMEFTCoeff("CllR",0,1,1,0, 10000.) 
                -981790301. * getSMEFTCoeff("Clq1R",0,0,0,0, 10000.) 
                +46891875. * getSMEFTCoeff("Clq1R",0,0,1,1, 10000.) 
                +2396912570. * getSMEFTCoeff("Clq3R",0,0,0,0, 10000.) 
                +93748581. * getSMEFTCoeff("Clq3R",0,0,1,1, 10000.) 
                -1182027332. * getSMEFTCoeff("CeuR",0,0,0,0, 10000.) 
                -16375829. * getSMEFTCoeff("CeuR",0,0,1,1, 10000.) 
                +315232994. * getSMEFTCoeff("CedR",0,0,0,0, 10000.) 
                +14396262. * getSMEFTCoeff("CedR",0,0,1,1, 10000.) 
                -591320866. * getSMEFTCoeff("CluR",0,0,0,0, 10000.) 
                -8188396. * getSMEFTCoeff("CluR",0,0,1,1, 10000.) 
                +157627105. * getSMEFTCoeff("CldR",0,0,0,0, 10000.) 
                +7202228. * getSMEFTCoeff("CldR",0,0,1,1, 10000.) 
                -445651523. * getSMEFTCoeff("CqeR",0,0,0,0, 10000.) 
                -19010952. * getSMEFTCoeff("CqeR",1,1,0,0, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin10a0 * sigmaMx_Bin10a0/0.441/0.441; 
 
 
//----------------------------------------------------------- 
 
    return dchi2Tot; 
 
}


const double NPSMEFTd6General::chi2FCChhmumu() const
{
    double dchi2Tot = 0.0;

    double sigmaSMMx_Bin1a0 = 0.0, sigmaMx_Bin1a0 = 0.0; 
 
        sigmaSMMx_Bin1a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin1a0 = sigmaSMMx_Bin1a0 
                -97243.9 * getSMEFTCoeff("CHD", 1500.) 
                -224494. * getSMEFTCoeff("CHWB", 1500.) 
                +68160.2 * getSMEFTCoeff("CHl1R",1,1, 1500.) 
                -121228. * getSMEFTCoeff("CHl3R",0,0, 1500.) 
                -52886. * getSMEFTCoeff("CHl3R",1,1, 1500.) 
                -14006.5 * getSMEFTCoeff("CHeR",1,1, 1500.) 
                -7753.22 * getSMEFTCoeff("CHq1R",0,0, 1500.) 
                +1994.53 * getSMEFTCoeff("CHq1R",1,1, 1500.) 
                +47352.4 * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +6451.1 * getSMEFTCoeff("CHq3R",1,1, 1500.) 
                +6820.81 * getSMEFTCoeff("CHuR",0,0, 1500.) 
                +245.892 * getSMEFTCoeff("CHuR",1,1, 1500.) 
                -2539.73 * getSMEFTCoeff("CHdR",0,0, 1500.) 
                -664.844 * getSMEFTCoeff("CHdR",1,1, 1500.) 
                +121382. * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                -16512970. * getSMEFTCoeff("Clq1R",1,1,0,0, 1500.) 
                +1068334. * getSMEFTCoeff("Clq1R",1,1,1,1, 1500.) 
                +52226003. * getSMEFTCoeff("Clq3R",1,1,0,0, 1500.) 
                +6758647. * getSMEFTCoeff("Clq3R",1,1,1,1, 1500.) 
                -24046985. * getSMEFTCoeff("CeuR",1,1,0,0, 1500.) 
                -1988406. * getSMEFTCoeff("CeuR",1,1,1,1, 1500.) 
                +7896534. * getSMEFTCoeff("CedR",1,1,0,0, 1500.) 
                +1320819. * getSMEFTCoeff("CedR",1,1,1,1, 1500.) 
                -12006504. * getSMEFTCoeff("CluR",1,1,0,0, 1500.) 
                -992334. * getSMEFTCoeff("CluR",1,1,1,1, 1500.) 
                +3943772. * getSMEFTCoeff("CldR",1,1,0,0, 1500.) 
                +659974. * getSMEFTCoeff("CldR",1,1,1,1, 1500.) 
                -9780758. * getSMEFTCoeff("CqeR",0,0,1,1, 1500.) 
                -1327510. * getSMEFTCoeff("CqeR",1,1,1,1, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin1a0 * sigmaMx_Bin1a0/0.012/0.012; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin2a0 = 0.0, sigmaMx_Bin2a0 = 0.0; 
 
        sigmaSMMx_Bin2a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin2a0 = sigmaSMMx_Bin2a0 
                -97431.3 * getSMEFTCoeff("CHD", 1500.) 
                -225557. * getSMEFTCoeff("CHWB", 1500.) 
                +68230.9 * getSMEFTCoeff("CHl1R",1,1, 1500.) 
                -120793. * getSMEFTCoeff("CHl3R",0,0, 1500.) 
                -53396.6 * getSMEFTCoeff("CHl3R",1,1, 1500.) 
                -13485.7 * getSMEFTCoeff("CHeR",1,1, 1500.) 
                -8144.46 * getSMEFTCoeff("CHq1R",0,0, 1500.) 
                +2169.65 * getSMEFTCoeff("CHq1R",1,1, 1500.) 
                +48465.2 * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +6263.02 * getSMEFTCoeff("CHq3R",1,1, 1500.) 
                +7414.12 * getSMEFTCoeff("CHuR",0,0, 1500.) 
                +817.106 * getSMEFTCoeff("CHuR",1,1, 1500.) 
                -1685.66 * getSMEFTCoeff("CHdR",0,0, 1500.) 
                -35.3178 * getSMEFTCoeff("CHdR",1,1, 1500.) 
                +121349. * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                -26004523. * getSMEFTCoeff("Clq1R",1,1,0,0, 1500.) 
                +1644928. * getSMEFTCoeff("Clq1R",1,1,1,1, 1500.) 
                +79690894. * getSMEFTCoeff("Clq3R",1,1,0,0, 1500.) 
                +9126861. * getSMEFTCoeff("Clq3R",1,1,1,1, 1500.) 
                -36979870. * getSMEFTCoeff("CeuR",1,1,0,0, 1500.) 
                -2617646. * getSMEFTCoeff("CeuR",1,1,1,1, 1500.) 
                +11892407. * getSMEFTCoeff("CedR",1,1,0,0, 1500.) 
                +1764025. * getSMEFTCoeff("CedR",1,1,1,1, 1500.) 
                -18470041. * getSMEFTCoeff("CluR",1,1,0,0, 1500.) 
                -1307847. * getSMEFTCoeff("CluR",1,1,1,1, 1500.) 
                +5945870. * getSMEFTCoeff("CldR",1,1,0,0, 1500.) 
                +881947. * getSMEFTCoeff("CldR",1,1,1,1, 1500.) 
                -14924181. * getSMEFTCoeff("CqeR",0,0,1,1, 1500.) 
                -1798475. * getSMEFTCoeff("CqeR",1,1,1,1, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin2a0 * sigmaMx_Bin2a0/0.013/0.013; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin3a0 = 0.0, sigmaMx_Bin3a0 = 0.0; 
 
        sigmaSMMx_Bin3a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin3a0 = sigmaSMMx_Bin3a0 
                -98062.8 * getSMEFTCoeff("CHD", 3000.) 
                -226952. * getSMEFTCoeff("CHWB", 3000.) 
                +67360.1 * getSMEFTCoeff("CHl1R",1,1, 3000.) 
                -121126. * getSMEFTCoeff("CHl3R",0,0, 3000.) 
                -53503.1 * getSMEFTCoeff("CHl3R",1,1, 3000.) 
                -13980.9 * getSMEFTCoeff("CHeR",1,1, 3000.) 
                -9274.66 * getSMEFTCoeff("CHq1R",0,0, 3000.) 
                +1556.94 * getSMEFTCoeff("CHq1R",1,1, 3000.) 
                +48020. * getSMEFTCoeff("CHq3R",0,0, 3000.) 
                +4867.43 * getSMEFTCoeff("CHq3R",1,1, 3000.) 
                +7147.53 * getSMEFTCoeff("CHuR",0,0, 3000.) 
                -67.0061 * getSMEFTCoeff("CHuR",1,1, 3000.) 
                -2191.61 * getSMEFTCoeff("CHdR",0,0, 3000.) 
                -280.035 * getSMEFTCoeff("CHdR",1,1, 3000.) 
                +120868. * getSMEFTCoeff("CllR",0,1,1,0, 3000.) 
                -42247777. * getSMEFTCoeff("Clq1R",1,1,0,0, 3000.) 
                +2606472. * getSMEFTCoeff("Clq1R",1,1,1,1, 3000.) 
                +125977827. * getSMEFTCoeff("Clq3R",1,1,0,0, 3000.) 
                +12555813. * getSMEFTCoeff("Clq3R",1,1,1,1, 3000.) 
                -58848080. * getSMEFTCoeff("CeuR",1,1,0,0, 3000.) 
                -3477668. * getSMEFTCoeff("CeuR",1,1,1,1, 3000.) 
                +18556311. * getSMEFTCoeff("CedR",1,1,0,0, 3000.) 
                +2384597. * getSMEFTCoeff("CedR",1,1,1,1, 3000.) 
                -29411798. * getSMEFTCoeff("CluR",1,1,0,0, 3000.) 
                -1738284. * getSMEFTCoeff("CluR",1,1,1,1, 3000.) 
                +9276242. * getSMEFTCoeff("CldR",1,1,0,0, 3000.) 
                +1191679. * getSMEFTCoeff("CldR",1,1,1,1, 3000.) 
                -23571246. * getSMEFTCoeff("CqeR",0,0,1,1, 3000.) 
                -2478389. * getSMEFTCoeff("CqeR",1,1,1,1, 3000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin3a0 * sigmaMx_Bin3a0/0.014/0.014; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin4a0 = 0.0, sigmaMx_Bin4a0 = 0.0; 
 
        sigmaSMMx_Bin4a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin4a0 = sigmaSMMx_Bin4a0 
                -98707.6 * getSMEFTCoeff("CHD", 3000.) 
                -227449. * getSMEFTCoeff("CHWB", 3000.) 
                +67415.5 * getSMEFTCoeff("CHl1R",1,1, 3000.) 
                -120962. * getSMEFTCoeff("CHl3R",0,0, 3000.) 
                -53801.3 * getSMEFTCoeff("CHl3R",1,1, 3000.) 
                -13834.7 * getSMEFTCoeff("CHeR",1,1, 3000.) 
                -9431.73 * getSMEFTCoeff("CHq1R",0,0, 3000.) 
                +1736.57 * getSMEFTCoeff("CHq1R",1,1, 3000.) 
                +48817.1 * getSMEFTCoeff("CHq3R",0,0, 3000.) 
                +4507.41 * getSMEFTCoeff("CHq3R",1,1, 3000.) 
                +7618.35 * getSMEFTCoeff("CHuR",0,0, 3000.) 
                +157.79 * getSMEFTCoeff("CHuR",1,1, 3000.) 
                -2213. * getSMEFTCoeff("CHdR",0,0, 3000.) 
                -325.428 * getSMEFTCoeff("CHdR",1,1, 3000.) 
                +121122. * getSMEFTCoeff("CllR",0,1,1,0, 3000.) 
                -74171980. * getSMEFTCoeff("Clq1R",1,1,0,0, 3000.) 
                +4457012. * getSMEFTCoeff("Clq1R",1,1,1,1, 3000.) 
                +215110061. * getSMEFTCoeff("Clq3R",1,1,0,0, 3000.) 
                +18190400. * getSMEFTCoeff("Clq3R",1,1,1,1, 3000.) 
                -101246802. * getSMEFTCoeff("CeuR",1,1,0,0, 3000.) 
                -4802433. * getSMEFTCoeff("CeuR",1,1,1,1, 3000.) 
                +31289550. * getSMEFTCoeff("CedR",1,1,0,0, 3000.) 
                +3371080. * getSMEFTCoeff("CedR",1,1,1,1, 3000.) 
                -50630837. * getSMEFTCoeff("CluR",1,1,0,0, 3000.) 
                -2402130. * getSMEFTCoeff("CluR",1,1,1,1, 3000.) 
                +15636777. * getSMEFTCoeff("CldR",1,1,0,0, 3000.) 
                +1685268. * getSMEFTCoeff("CldR",1,1,1,1, 3000.) 
                -40235433. * getSMEFTCoeff("CqeR",0,0,1,1, 3000.) 
                -3603419. * getSMEFTCoeff("CqeR",1,1,1,1, 3000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin4a0 * sigmaMx_Bin4a0/0.019/0.019; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin5a0 = 0.0, sigmaMx_Bin5a0 = 0.0; 
 
        sigmaSMMx_Bin5a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin5a0 = sigmaSMMx_Bin5a0 
                -98921.6 * getSMEFTCoeff("CHD", 5000.) 
                -228610. * getSMEFTCoeff("CHWB", 5000.) 
                +67326.1 * getSMEFTCoeff("CHl1R",1,1, 5000.) 
                -121032. * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -54063.9 * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                -13825.3 * getSMEFTCoeff("CHeR",1,1, 5000.) 
                -9935.28 * getSMEFTCoeff("CHq1R",0,0, 5000.) 
                +1541.2 * getSMEFTCoeff("CHq1R",1,1, 5000.) 
                +49061.7 * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +3704.34 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +7576.15 * getSMEFTCoeff("CHuR",0,0, 5000.) 
                -89.8022 * getSMEFTCoeff("CHuR",1,1, 5000.) 
                -2416.16 * getSMEFTCoeff("CHdR",0,0, 5000.) 
                -124.388 * getSMEFTCoeff("CHdR",1,1, 5000.) 
                +121232. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                -115112421. * getSMEFTCoeff("Clq1R",1,1,0,0, 5000.) 
                +6775448. * getSMEFTCoeff("Clq1R",1,1,1,1, 5000.) 
                +327497246. * getSMEFTCoeff("Clq3R",1,1,0,0, 5000.) 
                +24270920. * getSMEFTCoeff("Clq3R",1,1,1,1, 5000.) 
                -154916017. * getSMEFTCoeff("CeuR",1,1,0,0, 5000.) 
                -6117874. * getSMEFTCoeff("CeuR",1,1,1,1, 5000.) 
                +47187152. * getSMEFTCoeff("CedR",1,1,0,0, 5000.) 
                +4389694. * getSMEFTCoeff("CedR",1,1,1,1, 5000.) 
                -77458421. * getSMEFTCoeff("CluR",1,1,0,0, 5000.) 
                -3060690. * getSMEFTCoeff("CluR",1,1,1,1, 5000.) 
                +23592827. * getSMEFTCoeff("CldR",1,1,0,0, 5000.) 
                +2194638. * getSMEFTCoeff("CldR",1,1,1,1, 5000.) 
                -61234314. * getSMEFTCoeff("CqeR",0,0,1,1, 5000.) 
                -4822872. * getSMEFTCoeff("CqeR",1,1,1,1, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin5a0 * sigmaMx_Bin5a0/0.027/0.027; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin6a0 = 0.0, sigmaMx_Bin6a0 = 0.0; 
 
        sigmaSMMx_Bin6a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin6a0 = sigmaSMMx_Bin6a0 
                -99174.4 * getSMEFTCoeff("CHD", 5000.) 
                -229078. * getSMEFTCoeff("CHWB", 5000.) 
                +67086.3 * getSMEFTCoeff("CHl1R",1,1, 5000.) 
                -120870. * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -54429. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                -13556.3 * getSMEFTCoeff("CHeR",1,1, 5000.) 
                -10027.9 * getSMEFTCoeff("CHq1R",0,0, 5000.) 
                +1665.28 * getSMEFTCoeff("CHq1R",1,1, 5000.) 
                +49622.2 * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +3337.55 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +7620.7 * getSMEFTCoeff("CHuR",0,0, 5000.) 
                -66.0873 * getSMEFTCoeff("CHuR",1,1, 5000.) 
                -2056.13 * getSMEFTCoeff("CHdR",0,0, 5000.) 
                -205.831 * getSMEFTCoeff("CHdR",1,1, 5000.) 
                +121935. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                -165357045. * getSMEFTCoeff("Clq1R",1,1,0,0, 5000.) 
                +9560132. * getSMEFTCoeff("Clq1R",1,1,1,1, 5000.) 
                +462918764. * getSMEFTCoeff("Clq3R",1,1,0,0, 5000.) 
                +30752480. * getSMEFTCoeff("Clq3R",1,1,1,1, 5000.) 
                -219834237. * getSMEFTCoeff("CeuR",1,1,0,0, 5000.) 
                -7416469. * getSMEFTCoeff("CeuR",1,1,1,1, 5000.) 
                +66220661. * getSMEFTCoeff("CedR",1,1,0,0, 5000.) 
                +5428941. * getSMEFTCoeff("CedR",1,1,1,1, 5000.) 
                -109945836. * getSMEFTCoeff("CluR",1,1,0,0, 5000.) 
                -3707916. * getSMEFTCoeff("CluR",1,1,1,1, 5000.) 
                +33104822. * getSMEFTCoeff("CldR",1,1,0,0, 5000.) 
                +2715948. * getSMEFTCoeff("CldR",1,1,1,1, 5000.) 
                -86507797. * getSMEFTCoeff("CqeR",0,0,1,1, 5000.) 
                -6129870. * getSMEFTCoeff("CqeR",1,1,1,1, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin6a0 * sigmaMx_Bin6a0/0.04/0.04; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin7a0 = 0.0, sigmaMx_Bin7a0 = 0.0; 
 
        sigmaSMMx_Bin7a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin7a0 = sigmaSMMx_Bin7a0 
                -99614.4 * getSMEFTCoeff("CHD", 5000.) 
                -229696. * getSMEFTCoeff("CHWB", 5000.) 
                +66424.9 * getSMEFTCoeff("CHl1R",1,1, 5000.) 
                -121103. * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -54822.2 * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                -13639. * getSMEFTCoeff("CHeR",1,1, 5000.) 
                -10719. * getSMEFTCoeff("CHq1R",0,0, 5000.) 
                +1388.78 * getSMEFTCoeff("CHq1R",1,1, 5000.) 
                +49101.3 * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +2685.5 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +7396.94 * getSMEFTCoeff("CHuR",0,0, 5000.) 
                -187.903 * getSMEFTCoeff("CHuR",1,1, 5000.) 
                -2401.12 * getSMEFTCoeff("CHdR",0,0, 5000.) 
                -430.348 * getSMEFTCoeff("CHdR",1,1, 5000.) 
                +121527. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                -224838017. * getSMEFTCoeff("Clq1R",1,1,0,0, 5000.) 
                +12758607. * getSMEFTCoeff("Clq1R",1,1,1,1, 5000.) 
                +621668490. * getSMEFTCoeff("Clq3R",1,1,0,0, 5000.) 
                +37584429. * getSMEFTCoeff("Clq3R",1,1,1,1, 5000.) 
                -296119823. * getSMEFTCoeff("CeuR",1,1,0,0, 5000.) 
                -8684011. * getSMEFTCoeff("CeuR",1,1,1,1, 5000.) 
                +88235244. * getSMEFTCoeff("CedR",1,1,0,0, 5000.) 
                +6488458. * getSMEFTCoeff("CedR",1,1,1,1, 5000.) 
                -148116395. * getSMEFTCoeff("CluR",1,1,0,0, 5000.) 
                -4343738. * getSMEFTCoeff("CluR",1,1,1,1, 5000.) 
                +44110429. * getSMEFTCoeff("CldR",1,1,0,0, 5000.) 
                +3246640. * getSMEFTCoeff("CldR",1,1,1,1, 5000.) 
                -116097164. * getSMEFTCoeff("CqeR",0,0,1,1, 5000.) 
                -7514893. * getSMEFTCoeff("CqeR",1,1,1,1, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin7a0 * sigmaMx_Bin7a0/0.058/0.058; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin8a0 = 0.0, sigmaMx_Bin8a0 = 0.0; 
 
        sigmaSMMx_Bin8a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin8a0 = sigmaSMMx_Bin8a0 
                -99724.4 * getSMEFTCoeff("CHD", 5000.) 
                -230422. * getSMEFTCoeff("CHWB", 5000.) 
                +66703.7 * getSMEFTCoeff("CHl1R",1,1, 5000.) 
                -120975. * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -54819.6 * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                -13457.4 * getSMEFTCoeff("CHeR",1,1, 5000.) 
                -10579.1 * getSMEFTCoeff("CHq1R",0,0, 5000.) 
                +1345.24 * getSMEFTCoeff("CHq1R",1,1, 5000.) 
                +49965.1 * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +3605. * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +7888.22 * getSMEFTCoeff("CHuR",0,0, 5000.) 
                +354.862 * getSMEFTCoeff("CHuR",1,1, 5000.) 
                -1842.3 * getSMEFTCoeff("CHdR",0,0, 5000.) 
                -42.285 * getSMEFTCoeff("CHdR",1,1, 5000.) 
                +122024. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                -322382967. * getSMEFTCoeff("Clq1R",1,1,0,0, 5000.) 
                +17844141. * getSMEFTCoeff("Clq1R",1,1,1,1, 5000.) 
                +874171560. * getSMEFTCoeff("Clq3R",1,1,0,0, 5000.) 
                +47408294. * getSMEFTCoeff("Clq3R",1,1,1,1, 5000.) 
                -418491496. * getSMEFTCoeff("CeuR",1,1,0,0, 5000.) 
                -10345114. * getSMEFTCoeff("CeuR",1,1,1,1, 5000.) 
                +122816082. * getSMEFTCoeff("CedR",1,1,0,0, 5000.) 
                +7949074. * getSMEFTCoeff("CedR",1,1,1,1, 5000.) 
                -209389627. * getSMEFTCoeff("CluR",1,1,0,0, 5000.) 
                -5171526. * getSMEFTCoeff("CluR",1,1,1,1, 5000.) 
                +61414928. * getSMEFTCoeff("CldR",1,1,0,0, 5000.) 
                +3975783. * getSMEFTCoeff("CldR",1,1,1,1, 5000.) 
                -163177024. * getSMEFTCoeff("CqeR",0,0,1,1, 5000.) 
                -9508995. * getSMEFTCoeff("CqeR",1,1,1,1, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin8a0 * sigmaMx_Bin8a0/0.07/0.07; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin9a0 = 0.0, sigmaMx_Bin9a0 = 0.0; 
 
        sigmaSMMx_Bin9a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin9a0 = sigmaSMMx_Bin9a0 
                -100510. * getSMEFTCoeff("CHD", 10000.) 
                -231517. * getSMEFTCoeff("CHWB", 10000.) 
                +65608.5 * getSMEFTCoeff("CHl1R",1,1, 10000.) 
                -121177. * getSMEFTCoeff("CHl3R",0,0, 10000.) 
                -55036.2 * getSMEFTCoeff("CHl3R",1,1, 10000.) 
                -13849.9 * getSMEFTCoeff("CHeR",1,1, 10000.) 
                -11933.3 * getSMEFTCoeff("CHq1R",0,0, 10000.) 
                +733.784 * getSMEFTCoeff("CHq1R",1,1, 10000.) 
                +49410.4 * getSMEFTCoeff("CHq3R",0,0, 10000.) 
                +2037.46 * getSMEFTCoeff("CHq3R",1,1, 10000.) 
                +7380.19 * getSMEFTCoeff("CHuR",0,0, 10000.) 
                -264.319 * getSMEFTCoeff("CHuR",1,1, 10000.) 
                -2219.15 * getSMEFTCoeff("CHdR",0,0, 10000.) 
                -391.998 * getSMEFTCoeff("CHdR",1,1, 10000.) 
                +121692. * getSMEFTCoeff("CllR",0,1,1,0, 10000.) 
                -520854317. * getSMEFTCoeff("Clq1R",1,1,0,0, 10000.) 
                +27550583. * getSMEFTCoeff("Clq1R",1,1,1,1, 10000.) 
                +1366259680. * getSMEFTCoeff("Clq3R",1,1,0,0, 10000.) 
                +64316523. * getSMEFTCoeff("Clq3R",1,1,1,1, 10000.) 
                -660010778. * getSMEFTCoeff("CeuR",1,1,0,0, 10000.) 
                -12872641. * getSMEFTCoeff("CeuR",1,1,1,1, 10000.) 
                +188267289. * getSMEFTCoeff("CedR",1,1,0,0, 10000.) 
                +10361421. * getSMEFTCoeff("CedR",1,1,1,1, 10000.) 
                -330134709. * getSMEFTCoeff("CluR",1,1,0,0, 10000.) 
                -6435948. * getSMEFTCoeff("CluR",1,1,1,1, 10000.) 
                +94115987. * getSMEFTCoeff("CldR",1,1,0,0, 10000.) 
                +5180936. * getSMEFTCoeff("CldR",1,1,1,1, 10000.) 
                -254724895. * getSMEFTCoeff("CqeR",0,0,1,1, 10000.) 
                -12959975. * getSMEFTCoeff("CqeR",1,1,1,1, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin9a0 * sigmaMx_Bin9a0/0.126/0.126; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin10a0 = 0.0, sigmaMx_Bin10a0 = 0.0; 
 
        sigmaSMMx_Bin10a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin10a0 = sigmaSMMx_Bin10a0 
                -101407. * getSMEFTCoeff("CHD", 10000.) 
                -234221. * getSMEFTCoeff("CHWB", 10000.) 
                +65328.8 * getSMEFTCoeff("CHl1R",1,1, 10000.) 
                -121130. * getSMEFTCoeff("CHl3R",0,0, 10000.) 
                -55990.7 * getSMEFTCoeff("CHl3R",1,1, 10000.) 
                -13344.3 * getSMEFTCoeff("CHeR",1,1, 10000.) 
                -13274.2 * getSMEFTCoeff("CHq1R",0,0, 10000.) 
                +678.518 * getSMEFTCoeff("CHq1R",1,1, 10000.) 
                +49437.5 * getSMEFTCoeff("CHq3R",0,0, 10000.) 
                +2289.93 * getSMEFTCoeff("CHq3R",1,1, 10000.) 
                +7604.6 * getSMEFTCoeff("CHuR",0,0, 10000.) 
                -186.358 * getSMEFTCoeff("CHuR",1,1, 10000.) 
                -2157.98 * getSMEFTCoeff("CHdR",0,0, 10000.) 
                -356.506 * getSMEFTCoeff("CHdR",1,1, 10000.) 
                +121358. * getSMEFTCoeff("CllR",0,1,1,0, 10000.) 
                -981790301. * getSMEFTCoeff("Clq1R",1,1,0,0, 10000.) 
                +46891875. * getSMEFTCoeff("Clq1R",1,1,1,1, 10000.) 
                +2396912570. * getSMEFTCoeff("Clq3R",1,1,0,0, 10000.) 
                +93748581. * getSMEFTCoeff("Clq3R",1,1,1,1, 10000.) 
                -1182027332. * getSMEFTCoeff("CeuR",1,1,0,0, 10000.) 
                -16375829. * getSMEFTCoeff("CeuR",1,1,1,1, 10000.) 
                +315232994. * getSMEFTCoeff("CedR",1,1,0,0, 10000.) 
                +14396262. * getSMEFTCoeff("CedR",1,1,1,1, 10000.) 
                -591320866. * getSMEFTCoeff("CluR",1,1,0,0, 10000.) 
                -8188396. * getSMEFTCoeff("CluR",1,1,1,1, 10000.) 
                +157627105. * getSMEFTCoeff("CldR",1,1,0,0, 10000.) 
                +7202228. * getSMEFTCoeff("CldR",1,1,1,1, 10000.) 
                -445651523. * getSMEFTCoeff("CqeR",0,0,1,1, 10000.) 
                -19010952. * getSMEFTCoeff("CqeR",1,1,1,1, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin10a0 * sigmaMx_Bin10a0/0.756/0.756; 
 
 
//----------------------------------------------------------- 
 
    return dchi2Tot; 
 
}


const double NPSMEFTd6General::chi2FCChhtata() const
{
    double dchi2Tot = 0.0;

    double sigmaSMMx_Bin1a0 = 0.0, sigmaMx_Bin1a0 = 0.0; 
 
        sigmaSMMx_Bin1a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin1a0 = sigmaSMMx_Bin1a0 
                -96962.2 * getSMEFTCoeff("CHD", 1500.) 
                -224517. * getSMEFTCoeff("CHWB", 1500.) 
                +68034.7 * getSMEFTCoeff("CHl1R",2,2, 1500.) 
                -121061. * getSMEFTCoeff("CHl3R",0,0, 1500.) 
                -121035. * getSMEFTCoeff("CHl3R",1,1, 1500.) 
                +68493.2 * getSMEFTCoeff("CHl3R",2,2, 1500.) 
                -13930.6 * getSMEFTCoeff("CHeR",2,2, 1500.) 
                -8040.19 * getSMEFTCoeff("CHq1R",0,0, 1500.) 
                +2228.7 * getSMEFTCoeff("CHq1R",1,1, 1500.) 
                +47402.5 * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +6425.11 * getSMEFTCoeff("CHq3R",1,1, 1500.) 
                +6959.46 * getSMEFTCoeff("CHuR",0,0, 1500.) 
                +641.927 * getSMEFTCoeff("CHuR",1,1, 1500.) 
                -2220.38 * getSMEFTCoeff("CHdR",0,0, 1500.) 
                -209.139 * getSMEFTCoeff("CHdR",1,1, 1500.) 
                +121424. * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                -16571765. * getSMEFTCoeff("Clq1R",2,2,0,0, 1500.) 
                +1072569. * getSMEFTCoeff("Clq1R",2,2,1,1, 1500.) 
                +52246479. * getSMEFTCoeff("Clq3R",2,2,0,0, 1500.) 
                +6720838. * getSMEFTCoeff("Clq3R",2,2,1,1, 1500.) 
                -24102867. * getSMEFTCoeff("CeuR",2,2,0,0, 1500.) 
                -1977027. * getSMEFTCoeff("CeuR",2,2,1,1, 1500.) 
                +7887534. * getSMEFTCoeff("CedR",2,2,0,0, 1500.) 
                +1314342. * getSMEFTCoeff("CedR",2,2,1,1, 1500.) 
                -12033171. * getSMEFTCoeff("CluR",2,2,0,0, 1500.) 
                -987252. * getSMEFTCoeff("CluR",2,2,1,1, 1500.) 
                +3937619. * getSMEFTCoeff("CldR",2,2,0,0, 1500.) 
                +657145. * getSMEFTCoeff("CldR",2,2,1,1, 1500.) 
                -9787953. * getSMEFTCoeff("CqeR",0,0,2,2, 1500.) 
                -1322464. * getSMEFTCoeff("CqeR",1,1,2,2, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin1a0 * sigmaMx_Bin1a0/0.018/0.018; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin2a0 = 0.0, sigmaMx_Bin2a0 = 0.0; 
 
        sigmaSMMx_Bin2a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin2a0 = sigmaSMMx_Bin2a0 
                -97322.4 * getSMEFTCoeff("CHD", 1500.) 
                -225428. * getSMEFTCoeff("CHWB", 1500.) 
                +68310.5 * getSMEFTCoeff("CHl1R",2,2, 1500.) 
                -120537. * getSMEFTCoeff("CHl3R",0,0, 1500.) 
                -121005. * getSMEFTCoeff("CHl3R",1,1, 1500.) 
                +68405. * getSMEFTCoeff("CHl3R",2,2, 1500.) 
                -13492.1 * getSMEFTCoeff("CHeR",2,2, 1500.) 
                -8350.28 * getSMEFTCoeff("CHq1R",0,0, 1500.) 
                +2631.15 * getSMEFTCoeff("CHq1R",1,1, 1500.) 
                +48442.5 * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +6582.06 * getSMEFTCoeff("CHq3R",1,1, 1500.) 
                +7593.73 * getSMEFTCoeff("CHuR",0,0, 1500.) 
                +1211.63 * getSMEFTCoeff("CHuR",1,1, 1500.) 
                -1838.4 * getSMEFTCoeff("CHdR",0,0, 1500.) 
                +87.8373 * getSMEFTCoeff("CHdR",1,1, 1500.) 
                +121874. * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                -26059353. * getSMEFTCoeff("Clq1R",2,2,0,0, 1500.) 
                +1645007. * getSMEFTCoeff("Clq1R",2,2,1,1, 1500.) 
                +79703109. * getSMEFTCoeff("Clq3R",2,2,0,0, 1500.) 
                +9098413. * getSMEFTCoeff("Clq3R",2,2,1,1, 1500.) 
                -37020530. * getSMEFTCoeff("CeuR",2,2,0,0, 1500.) 
                -2607960. * getSMEFTCoeff("CeuR",2,2,1,1, 1500.) 
                +11884844. * getSMEFTCoeff("CedR",2,2,0,0, 1500.) 
                +1759034. * getSMEFTCoeff("CedR",2,2,1,1, 1500.) 
                -18494542. * getSMEFTCoeff("CluR",2,2,0,0, 1500.) 
                -1302091. * getSMEFTCoeff("CluR",2,2,1,1, 1500.) 
                +5938058. * getSMEFTCoeff("CldR",2,2,0,0, 1500.) 
                +879667. * getSMEFTCoeff("CldR",2,2,1,1, 1500.) 
                -14928979. * getSMEFTCoeff("CqeR",0,0,2,2, 1500.) 
                -1791881. * getSMEFTCoeff("CqeR",1,1,2,2, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin2a0 * sigmaMx_Bin2a0/0.018/0.018; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin3a0 = 0.0, sigmaMx_Bin3a0 = 0.0; 
 
        sigmaSMMx_Bin3a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin3a0 = sigmaSMMx_Bin3a0 
                -98336.1 * getSMEFTCoeff("CHD", 3000.) 
                -226879. * getSMEFTCoeff("CHWB", 3000.) 
                +67292.7 * getSMEFTCoeff("CHl1R",2,2, 3000.) 
                -121280. * getSMEFTCoeff("CHl3R",0,0, 3000.) 
                -120930. * getSMEFTCoeff("CHl3R",1,1, 3000.) 
                +67537.1 * getSMEFTCoeff("CHl3R",2,2, 3000.) 
                -14199.2 * getSMEFTCoeff("CHeR",2,2, 3000.) 
                -9693.63 * getSMEFTCoeff("CHq1R",0,0, 3000.) 
                +1614.97 * getSMEFTCoeff("CHq1R",1,1, 3000.) 
                +48235.2 * getSMEFTCoeff("CHq3R",0,0, 3000.) 
                +5326.15 * getSMEFTCoeff("CHq3R",1,1, 3000.) 
                +6880.01 * getSMEFTCoeff("CHuR",0,0, 3000.) 
                +399.763 * getSMEFTCoeff("CHuR",1,1, 3000.) 
                -2301.82 * getSMEFTCoeff("CHdR",0,0, 3000.) 
                -456.418 * getSMEFTCoeff("CHdR",1,1, 3000.) 
                +121110. * getSMEFTCoeff("CllR",0,1,1,0, 3000.) 
                -42298788. * getSMEFTCoeff("Clq1R",2,2,0,0, 3000.) 
                +2611761. * getSMEFTCoeff("Clq1R",2,2,1,1, 3000.) 
                +125923307. * getSMEFTCoeff("Clq3R",2,2,0,0, 3000.) 
                +12524093. * getSMEFTCoeff("Clq3R",2,2,1,1, 3000.) 
                -58904782. * getSMEFTCoeff("CeuR",2,2,0,0, 3000.) 
                -3469580. * getSMEFTCoeff("CeuR",2,2,1,1, 3000.) 
                +18539910. * getSMEFTCoeff("CedR",2,2,0,0, 3000.) 
                +2379131. * getSMEFTCoeff("CedR",2,2,1,1, 3000.) 
                -29438609. * getSMEFTCoeff("CluR",2,2,0,0, 3000.) 
                -1734015. * getSMEFTCoeff("CluR",2,2,1,1, 3000.) 
                +9264619. * getSMEFTCoeff("CldR",2,2,0,0, 3000.) 
                +1189541. * getSMEFTCoeff("CldR",2,2,1,1, 3000.) 
                -23578486. * getSMEFTCoeff("CqeR",0,0,2,2, 3000.) 
                -2473039. * getSMEFTCoeff("CqeR",1,1,2,2, 3000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin3a0 * sigmaMx_Bin3a0/0.018/0.018; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin4a0 = 0.0, sigmaMx_Bin4a0 = 0.0; 
 
        sigmaSMMx_Bin4a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin4a0 = sigmaSMMx_Bin4a0 
                -98755.8 * getSMEFTCoeff("CHD", 3000.) 
                -227604. * getSMEFTCoeff("CHWB", 3000.) 
                +67241.9 * getSMEFTCoeff("CHl1R",2,2, 3000.) 
                -121044. * getSMEFTCoeff("CHl3R",0,0, 3000.) 
                -120924. * getSMEFTCoeff("CHl3R",1,1, 3000.) 
                +67270. * getSMEFTCoeff("CHl3R",2,2, 3000.) 
                -14021. * getSMEFTCoeff("CHeR",2,2, 3000.) 
                -9955.75 * getSMEFTCoeff("CHq1R",0,0, 3000.) 
                +1705.55 * getSMEFTCoeff("CHq1R",1,1, 3000.) 
                +48710. * getSMEFTCoeff("CHq3R",0,0, 3000.) 
                +4665.62 * getSMEFTCoeff("CHq3R",1,1, 3000.) 
                +7108.56 * getSMEFTCoeff("CHuR",0,0, 3000.) 
                +365.836 * getSMEFTCoeff("CHuR",1,1, 3000.) 
                -2345.22 * getSMEFTCoeff("CHdR",0,0, 3000.) 
                -122.531 * getSMEFTCoeff("CHdR",1,1, 3000.) 
                +121225. * getSMEFTCoeff("CllR",0,1,1,0, 3000.) 
                -74213882. * getSMEFTCoeff("Clq1R",2,2,0,0, 3000.) 
                +4465204. * getSMEFTCoeff("Clq1R",2,2,1,1, 3000.) 
                +214916990. * getSMEFTCoeff("Clq3R",2,2,0,0, 3000.) 
                +18167219. * getSMEFTCoeff("Clq3R",2,2,1,1, 3000.) 
                -101286995. * getSMEFTCoeff("CeuR",2,2,0,0, 3000.) 
                -4797166. * getSMEFTCoeff("CeuR",2,2,1,1, 3000.) 
                +31259003. * getSMEFTCoeff("CedR",2,2,0,0, 3000.) 
                +3365376. * getSMEFTCoeff("CedR",2,2,1,1, 3000.) 
                -50628003. * getSMEFTCoeff("CluR",2,2,0,0, 3000.) 
                -2397377. * getSMEFTCoeff("CluR",2,2,1,1, 3000.) 
                +15625846. * getSMEFTCoeff("CldR",2,2,0,0, 3000.) 
                +1683012. * getSMEFTCoeff("CldR",2,2,1,1, 3000.) 
                -40233754. * getSMEFTCoeff("CqeR",0,0,2,2, 3000.) 
                -3598747. * getSMEFTCoeff("CqeR",1,1,2,2, 3000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin4a0 * sigmaMx_Bin4a0/0.021/0.021; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin5a0 = 0.0, sigmaMx_Bin5a0 = 0.0; 
 
        sigmaSMMx_Bin5a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin5a0 = sigmaSMMx_Bin5a0 
                -98866.9 * getSMEFTCoeff("CHD", 5000.) 
                -228580. * getSMEFTCoeff("CHWB", 5000.) 
                +67203.3 * getSMEFTCoeff("CHl1R",2,2, 5000.) 
                -120919. * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -120756. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                +67058.6 * getSMEFTCoeff("CHl3R",2,2, 5000.) 
                -13624.1 * getSMEFTCoeff("CHeR",2,2, 5000.) 
                -10255. * getSMEFTCoeff("CHq1R",0,0, 5000.) 
                +1813.43 * getSMEFTCoeff("CHq1R",1,1, 5000.) 
                +48935.9 * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +4071.25 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +7338.83 * getSMEFTCoeff("CHuR",0,0, 5000.) 
                +387.246 * getSMEFTCoeff("CHuR",1,1, 5000.) 
                -2164.2 * getSMEFTCoeff("CHdR",0,0, 5000.) 
                +244.992 * getSMEFTCoeff("CHdR",1,1, 5000.) 
                +121699. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                -115153624. * getSMEFTCoeff("Clq1R",2,2,0,0, 5000.) 
                +6786855. * getSMEFTCoeff("Clq1R",2,2,1,1, 5000.) 
                +327247151. * getSMEFTCoeff("Clq3R",2,2,0,0, 5000.) 
                +24255032. * getSMEFTCoeff("Clq3R",2,2,1,1, 5000.) 
                -154972668. * getSMEFTCoeff("CeuR",2,2,0,0, 5000.) 
                -6116680. * getSMEFTCoeff("CeuR",2,2,1,1, 5000.) 
                +47153614. * getSMEFTCoeff("CedR",2,2,0,0, 5000.) 
                +4384880. * getSMEFTCoeff("CedR",2,2,1,1, 5000.) 
                -77453747. * getSMEFTCoeff("CluR",2,2,0,0, 5000.) 
                -3056501. * getSMEFTCoeff("CluR",2,2,1,1, 5000.) 
                +23584196. * getSMEFTCoeff("CldR",2,2,0,0, 5000.) 
                +2193306. * getSMEFTCoeff("CldR",2,2,1,1, 5000.) 
                -61210033. * getSMEFTCoeff("CqeR",0,0,2,2, 5000.) 
                -4821468. * getSMEFTCoeff("CqeR",1,1,2,2, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin5a0 * sigmaMx_Bin5a0/0.023/0.023; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin6a0 = 0.0, sigmaMx_Bin6a0 = 0.0; 
 
        sigmaSMMx_Bin6a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin6a0 = sigmaSMMx_Bin6a0 
                -99060.5 * getSMEFTCoeff("CHD", 5000.) 
                -228971. * getSMEFTCoeff("CHWB", 5000.) 
                +67072. * getSMEFTCoeff("CHl1R",2,2, 5000.) 
                -120789. * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -120940. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                +67100. * getSMEFTCoeff("CHl3R",2,2, 5000.) 
                -13467.5 * getSMEFTCoeff("CHeR",2,2, 5000.) 
                -10467.5 * getSMEFTCoeff("CHq1R",0,0, 5000.) 
                +1943.15 * getSMEFTCoeff("CHq1R",1,1, 5000.) 
                +49118.8 * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +3670.34 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +7157.22 * getSMEFTCoeff("CHuR",0,0, 5000.) 
                +398.247 * getSMEFTCoeff("CHuR",1,1, 5000.) 
                -2222.92 * getSMEFTCoeff("CHdR",0,0, 5000.) 
                +401.744 * getSMEFTCoeff("CHdR",1,1, 5000.) 
                +121495. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                -165237270. * getSMEFTCoeff("Clq1R",2,2,0,0, 5000.) 
                +9555824. * getSMEFTCoeff("Clq1R",2,2,1,1, 5000.) 
                +462689310. * getSMEFTCoeff("Clq3R",2,2,0,0, 5000.) 
                +30738729. * getSMEFTCoeff("Clq3R",2,2,1,1, 5000.) 
                -219959879. * getSMEFTCoeff("CeuR",2,2,0,0, 5000.) 
                -7412700. * getSMEFTCoeff("CeuR",2,2,1,1, 5000.) 
                +66146392. * getSMEFTCoeff("CedR",2,2,0,0, 5000.) 
                +5427466. * getSMEFTCoeff("CedR",2,2,1,1, 5000.) 
                -109976443. * getSMEFTCoeff("CluR",2,2,0,0, 5000.) 
                -3705043. * getSMEFTCoeff("CluR",2,2,1,1, 5000.) 
                +33085712. * getSMEFTCoeff("CldR",2,2,0,0, 5000.) 
                +2714793. * getSMEFTCoeff("CldR",2,2,1,1, 5000.) 
                -86477410. * getSMEFTCoeff("CqeR",0,0,2,2, 5000.) 
                -6126133. * getSMEFTCoeff("CqeR",1,1,2,2, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin6a0 * sigmaMx_Bin6a0/0.031/0.031; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin7a0 = 0.0, sigmaMx_Bin7a0 = 0.0; 
 
        sigmaSMMx_Bin7a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin7a0 = sigmaSMMx_Bin7a0 
                -99750.7 * getSMEFTCoeff("CHD", 5000.) 
                -229630. * getSMEFTCoeff("CHWB", 5000.) 
                +66354.1 * getSMEFTCoeff("CHl1R",2,2, 5000.) 
                -121104. * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -121198. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                +66533.9 * getSMEFTCoeff("CHl3R",2,2, 5000.) 
                -13637. * getSMEFTCoeff("CHeR",2,2, 5000.) 
                -10951.3 * getSMEFTCoeff("CHq1R",0,0, 5000.) 
                +1601.03 * getSMEFTCoeff("CHq1R",1,1, 5000.) 
                +48910.3 * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +3175.24 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +7183.96 * getSMEFTCoeff("CHuR",0,0, 5000.) 
                +103.475 * getSMEFTCoeff("CHuR",1,1, 5000.) 
                -2320.94 * getSMEFTCoeff("CHdR",0,0, 5000.) 
                +260.265 * getSMEFTCoeff("CHdR",1,1, 5000.) 
                +121141. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                -224844863. * getSMEFTCoeff("Clq1R",2,2,0,0, 5000.) 
                +12777805. * getSMEFTCoeff("Clq1R",2,2,1,1, 5000.) 
                +620987209. * getSMEFTCoeff("Clq3R",2,2,0,0, 5000.) 
                +37583030. * getSMEFTCoeff("Clq3R",2,2,1,1, 5000.) 
                -296229449. * getSMEFTCoeff("CeuR",2,2,0,0, 5000.) 
                -8682274. * getSMEFTCoeff("CeuR",2,2,1,1, 5000.) 
                +88177179. * getSMEFTCoeff("CedR",2,2,0,0, 5000.) 
                +6487475. * getSMEFTCoeff("CedR",2,2,1,1, 5000.) 
                -148136168. * getSMEFTCoeff("CluR",2,2,0,0, 5000.) 
                -4341251. * getSMEFTCoeff("CluR",2,2,1,1, 5000.) 
                +44104437. * getSMEFTCoeff("CldR",2,2,0,0, 5000.) 
                +3243190. * getSMEFTCoeff("CldR",2,2,1,1, 5000.) 
                -116063601. * getSMEFTCoeff("CqeR",0,0,2,2, 5000.) 
                -7517040. * getSMEFTCoeff("CqeR",1,1,2,2, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin7a0 * sigmaMx_Bin7a0/0.049/0.049; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin8a0 = 0.0, sigmaMx_Bin8a0 = 0.0; 
 
        sigmaSMMx_Bin8a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin8a0 = sigmaSMMx_Bin8a0 
                -99732.2 * getSMEFTCoeff("CHD", 5000.) 
                -230444. * getSMEFTCoeff("CHWB", 5000.) 
                +66621.2 * getSMEFTCoeff("CHl1R",2,2, 5000.) 
                -121113. * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -121170. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                +66306.9 * getSMEFTCoeff("CHl3R",2,2, 5000.) 
                -13060.2 * getSMEFTCoeff("CHeR",2,2, 5000.) 
                -11396.3 * getSMEFTCoeff("CHq1R",0,0, 5000.) 
                +1524.2 * getSMEFTCoeff("CHq1R",1,1, 5000.) 
                +50125.3 * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +3098.16 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +7670.77 * getSMEFTCoeff("CHuR",0,0, 5000.) 
                +452.782 * getSMEFTCoeff("CHuR",1,1, 5000.) 
                -2106.77 * getSMEFTCoeff("CHdR",0,0, 5000.) 
                +567.637 * getSMEFTCoeff("CHdR",1,1, 5000.) 
                +121980. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                -322337972. * getSMEFTCoeff("Clq1R",2,2,0,0, 5000.) 
                +17854137. * getSMEFTCoeff("Clq1R",2,2,1,1, 5000.) 
                +873616867. * getSMEFTCoeff("Clq3R",2,2,0,0, 5000.) 
                +47402507. * getSMEFTCoeff("Clq3R",2,2,1,1, 5000.) 
                -418523232. * getSMEFTCoeff("CeuR",2,2,0,0, 5000.) 
                -10339786. * getSMEFTCoeff("CeuR",2,2,1,1, 5000.) 
                +122759019. * getSMEFTCoeff("CedR",2,2,0,0, 5000.) 
                +7946696. * getSMEFTCoeff("CedR",2,2,1,1, 5000.) 
                -209436820. * getSMEFTCoeff("CluR",2,2,0,0, 5000.) 
                -5168567. * getSMEFTCoeff("CluR",2,2,1,1, 5000.) 
                +61391124. * getSMEFTCoeff("CldR",2,2,0,0, 5000.) 
                +3973524. * getSMEFTCoeff("CldR",2,2,1,1, 5000.) 
                -163132791. * getSMEFTCoeff("CqeR",0,0,2,2, 5000.) 
                -9512668. * getSMEFTCoeff("CqeR",1,1,2,2, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin8a0 * sigmaMx_Bin8a0/0.108/0.108; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin9a0 = 0.0, sigmaMx_Bin9a0 = 0.0; 
 
        sigmaSMMx_Bin9a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin9a0 = sigmaSMMx_Bin9a0 
                -100464. * getSMEFTCoeff("CHD", 10000.) 
                -231543. * getSMEFTCoeff("CHWB", 10000.) 
                +65730.9 * getSMEFTCoeff("CHl1R",2,2, 10000.) 
                -121169. * getSMEFTCoeff("CHl3R",0,0, 10000.) 
                -121072. * getSMEFTCoeff("CHl3R",1,1, 10000.) 
                +65839.2 * getSMEFTCoeff("CHl3R",2,2, 10000.) 
                -13575.9 * getSMEFTCoeff("CHeR",2,2, 10000.) 
                -12551.6 * getSMEFTCoeff("CHq1R",0,0, 10000.) 
                +1106.57 * getSMEFTCoeff("CHq1R",1,1, 10000.) 
                +48992.5 * getSMEFTCoeff("CHq3R",0,0, 10000.) 
                +2324.25 * getSMEFTCoeff("CHq3R",1,1, 10000.) 
                +7304.73 * getSMEFTCoeff("CHuR",0,0, 10000.) 
                +114.672 * getSMEFTCoeff("CHuR",1,1, 10000.) 
                -2541.19 * getSMEFTCoeff("CHdR",0,0, 10000.) 
                +298.465 * getSMEFTCoeff("CHdR",1,1, 10000.) 
                +121163. * getSMEFTCoeff("CllR",0,1,1,0, 10000.) 
                -520697661. * getSMEFTCoeff("Clq1R",2,2,0,0, 10000.) 
                +27550990. * getSMEFTCoeff("Clq1R",2,2,1,1, 10000.) 
                +1364843148. * getSMEFTCoeff("Clq3R",2,2,0,0, 10000.) 
                +64322721. * getSMEFTCoeff("Clq3R",2,2,1,1, 10000.) 
                -660284807. * getSMEFTCoeff("CeuR",2,2,0,0, 10000.) 
                -12869341. * getSMEFTCoeff("CeuR",2,2,1,1, 10000.) 
                +188213551. * getSMEFTCoeff("CedR",2,2,0,0, 10000.) 
                +10355279. * getSMEFTCoeff("CedR",2,2,1,1, 10000.) 
                -330075941. * getSMEFTCoeff("CluR",2,2,0,0, 10000.) 
                -6435559. * getSMEFTCoeff("CluR",2,2,1,1, 10000.) 
                +94107881. * getSMEFTCoeff("CldR",2,2,0,0, 10000.) 
                +5179181. * getSMEFTCoeff("CldR",2,2,1,1, 10000.) 
                -254633018. * getSMEFTCoeff("CqeR",0,0,2,2, 10000.) 
                -12963849. * getSMEFTCoeff("CqeR",1,1,2,2, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin9a0 * sigmaMx_Bin9a0/0.051/0.051; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin10a0 = 0.0, sigmaMx_Bin10a0 = 0.0; 
 
        sigmaSMMx_Bin10a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin10a0 = sigmaSMMx_Bin10a0 
                -101401. * getSMEFTCoeff("CHD", 10000.) 
                -234214. * getSMEFTCoeff("CHWB", 10000.) 
                +65337.6 * getSMEFTCoeff("CHl1R",2,2, 10000.) 
                -121119. * getSMEFTCoeff("CHl3R",0,0, 10000.) 
                -121197. * getSMEFTCoeff("CHl3R",1,1, 10000.) 
                +65243. * getSMEFTCoeff("CHl3R",2,2, 10000.) 
                -13020.4 * getSMEFTCoeff("CHeR",2,2, 10000.) 
                -13608.4 * getSMEFTCoeff("CHq1R",0,0, 10000.) 
                +1308.16 * getSMEFTCoeff("CHq1R",1,1, 10000.) 
                +49509.4 * getSMEFTCoeff("CHq3R",0,0, 10000.) 
                +2051.19 * getSMEFTCoeff("CHq3R",1,1, 10000.) 
                +7470.58 * getSMEFTCoeff("CHuR",0,0, 10000.) 
                +144.42 * getSMEFTCoeff("CHuR",1,1, 10000.) 
                -2404.4 * getSMEFTCoeff("CHdR",0,0, 10000.) 
                +121111. * getSMEFTCoeff("CllR",0,1,1,0, 10000.) 
                -982611065. * getSMEFTCoeff("Clq1R",2,2,0,0, 10000.) 
                +46975343. * getSMEFTCoeff("Clq1R",2,2,1,1, 10000.) 
                +2394360210. * getSMEFTCoeff("Clq3R",2,2,0,0, 10000.) 
                +93713983. * getSMEFTCoeff("Clq3R",2,2,1,1, 10000.) 
                -1182637040. * getSMEFTCoeff("CeuR",2,2,0,0, 10000.) 
                -16377797. * getSMEFTCoeff("CeuR",2,2,1,1, 10000.) 
                +315191408. * getSMEFTCoeff("CedR",2,2,0,0, 10000.) 
                +14396002. * getSMEFTCoeff("CedR",2,2,1,1, 10000.) 
                -591004198. * getSMEFTCoeff("CluR",2,2,0,0, 10000.) 
                -8189291. * getSMEFTCoeff("CluR",2,2,1,1, 10000.) 
                +157659432. * getSMEFTCoeff("CldR",2,2,0,0, 10000.) 
                +7196261. * getSMEFTCoeff("CldR",2,2,1,1, 10000.) 
                -445406020. * getSMEFTCoeff("CqeR",0,0,2,2, 10000.) 
                -19016833. * getSMEFTCoeff("CqeR",1,1,2,2, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin10a0 * sigmaMx_Bin10a0/0.298/0.298; 
 
 
//----------------------------------------------------------- 
 
    return dchi2Tot; 
 
}


const double NPSMEFTd6General::chi2FCChhenu() const
{
    double dchi2Tot = 0.0;

    double sigmaSMMx_Bin1a0 = 0.0, sigmaMx_Bin1a0 = 0.0; 
 
        sigmaSMMx_Bin1a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin1a0 = sigmaSMMx_Bin1a0 
                +1176.34 * getSMEFTCoeff("CHD", 1500.) 
                +1283.13 * getSMEFTCoeff("CHWB", 1500.) 
                +118.409 * getSMEFTCoeff("CHl3R",0,0, 1500.) 
                -121047. * getSMEFTCoeff("CHl3R",1,1, 1500.) 
                +109268. * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +13635.3 * getSMEFTCoeff("CHq3R",1,1, 1500.) 
                +120432. * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                +95562583. * getSMEFTCoeff("Clq3R",0,0,0,0, 1500.) 
                +11443764. * getSMEFTCoeff("Clq3R",0,0,1,1, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin1a0 * sigmaMx_Bin1a0/0.012/0.012; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin2a0 = 0.0, sigmaMx_Bin2a0 = 0.0; 
 
        sigmaSMMx_Bin2a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin2a0 = sigmaSMMx_Bin2a0 
                -93.2603 * getSMEFTCoeff("CHD", 1500.) 
                -490.918 * getSMEFTCoeff("CHWB", 1500.) 
                -325.287 * getSMEFTCoeff("CHl3R",0,0, 1500.) 
                -120716. * getSMEFTCoeff("CHl3R",1,1, 1500.) 
                +108979. * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +12192.1 * getSMEFTCoeff("CHq3R",1,1, 1500.) 
                +119649. * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                +129932554. * getSMEFTCoeff("Clq3R",0,0,0,0, 1500.) 
                +14246036. * getSMEFTCoeff("Clq3R",0,0,1,1, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin2a0 * sigmaMx_Bin2a0/0.013/0.013; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin3a0 = 0.0, sigmaMx_Bin3a0 = 0.0; 
 
        sigmaSMMx_Bin3a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin3a0 = sigmaSMMx_Bin3a0 
                +1344.55 * getSMEFTCoeff("CHD", 3000.) 
                -911.708 * getSMEFTCoeff("CHWB", 3000.) 
                -104.933 * getSMEFTCoeff("CHl3R",0,0, 3000.) 
                -121407. * getSMEFTCoeff("CHl3R",1,1, 3000.) 
                +111000. * getSMEFTCoeff("CHq3R",0,0, 3000.) 
                +9700.4 * getSMEFTCoeff("CHq3R",1,1, 3000.) 
                +121277. * getSMEFTCoeff("CllR",0,1,1,0, 3000.) 
                +260567340. * getSMEFTCoeff("Clq3R",0,0,0,0, 3000.) 
                +22261564. * getSMEFTCoeff("Clq3R",0,0,1,1, 3000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin3a0 * sigmaMx_Bin3a0/0.014/0.014; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin4a0 = 0.0, sigmaMx_Bin4a0 = 0.0; 
 
        sigmaSMMx_Bin4a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin4a0 = sigmaSMMx_Bin4a0 
                +598.783 * getSMEFTCoeff("CHD", 3000.) 
                +1157.45 * getSMEFTCoeff("CHWB", 3000.) 
                -1078.71 * getSMEFTCoeff("CHl3R",0,0, 3000.) 
                -121995. * getSMEFTCoeff("CHl3R",1,1, 3000.) 
                +112684. * getSMEFTCoeff("CHq3R",0,0, 3000.) 
                +7962.93 * getSMEFTCoeff("CHq3R",1,1, 3000.) 
                +121256. * getSMEFTCoeff("CllR",0,1,1,0, 3000.) 
                +436697857. * getSMEFTCoeff("Clq3R",0,0,0,0, 3000.) 
                +31212071. * getSMEFTCoeff("Clq3R",0,0,1,1, 3000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin4a0 * sigmaMx_Bin4a0/0.019/0.019; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin5a0 = 0.0, sigmaMx_Bin5a0 = 0.0; 
 
        sigmaSMMx_Bin5a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin5a0 = sigmaSMMx_Bin5a0 
                +301.491 * getSMEFTCoeff("CHD", 5000.) 
                +946.195 * getSMEFTCoeff("CHWB", 5000.) 
                -829.128 * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -122308. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                +113961. * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +7021.33 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +120914. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                +648178773. * getSMEFTCoeff("Clq3R",0,0,0,0, 5000.) 
                +40038690. * getSMEFTCoeff("Clq3R",0,0,1,1, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin5a0 * sigmaMx_Bin5a0/0.028/0.028; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin6a0 = 0.0, sigmaMx_Bin6a0 = 0.0; 
 
        sigmaSMMx_Bin6a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin6a0 = sigmaSMMx_Bin6a0 
                +916.787 * getSMEFTCoeff("CHD", 5000.) 
                +1815.31 * getSMEFTCoeff("CHWB", 5000.) 
                -1507.49 * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -122083. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                +114967. * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +5112.52 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +120778. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                +887175206. * getSMEFTCoeff("Clq3R",0,0,0,0, 5000.) 
                +48623109. * getSMEFTCoeff("Clq3R",0,0,1,1, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin6a0 * sigmaMx_Bin6a0/0.041/0.041; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin7a0 = 0.0, sigmaMx_Bin7a0 = 0.0; 
 
        sigmaSMMx_Bin7a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin7a0 = sigmaSMMx_Bin7a0 
                +340.396 * getSMEFTCoeff("CHD", 5000.) 
                +1911.19 * getSMEFTCoeff("CHWB", 5000.) 
                +1245.1 * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -120472. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                +117818. * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +7125.72 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +122431. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                +1142595360. * getSMEFTCoeff("Clq3R",0,0,0,0, 5000.) 
                +56756510. * getSMEFTCoeff("Clq3R",0,0,1,1, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin7a0 * sigmaMx_Bin7a0/0.061/0.061; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin8a0 = 0.0, sigmaMx_Bin8a0 = 0.0; 
 
        sigmaSMMx_Bin8a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin8a0 = sigmaSMMx_Bin8a0 
                +393.017 * getSMEFTCoeff("CHD", 5000.) 
                -331.395 * getSMEFTCoeff("CHWB", 5000.) 
                -212.179 * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -120915. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                +114992. * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +5593.4 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +119736. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                +1464148563. * getSMEFTCoeff("Clq3R",0,0,0,0, 5000.) 
                +65769562. * getSMEFTCoeff("Clq3R",0,0,1,1, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin8a0 * sigmaMx_Bin8a0/0.08/0.08; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin9a0 = 0.0, sigmaMx_Bin9a0 = 0.0; 
 
        sigmaSMMx_Bin9a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin9a0 = sigmaSMMx_Bin9a0 
                +1239.19 * getSMEFTCoeff("CHD", 10000.) 
                -1258.2 * getSMEFTCoeff("CHWB", 10000.) 
                +689.695 * getSMEFTCoeff("CHl3R",0,0, 10000.) 
                -122171. * getSMEFTCoeff("CHl3R",1,1, 10000.) 
                +116060. * getSMEFTCoeff("CHq3R",0,0, 10000.) 
                +3818.58 * getSMEFTCoeff("CHq3R",1,1, 10000.) 
                +120677. * getSMEFTCoeff("CllR",0,1,1,0, 10000.) 
                +2652444430. * getSMEFTCoeff("Clq3R",0,0,0,0, 10000.) 
                +92243084. * getSMEFTCoeff("Clq3R",0,0,1,1, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin9a0 * sigmaMx_Bin9a0/0.15/0.15; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin10a0 = 0.0, sigmaMx_Bin10a0 = 0.0; 
 
        sigmaSMMx_Bin10a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin10a0 = sigmaSMMx_Bin10a0 
                +792.849 * getSMEFTCoeff("CHD", 10000.) 
                -199.759 * getSMEFTCoeff("CHWB", 10000.) 
                -480.565 * getSMEFTCoeff("CHl3R",0,0, 10000.) 
                -121923. * getSMEFTCoeff("CHl3R",1,1, 10000.) 
                +117435. * getSMEFTCoeff("CHq3R",0,0, 10000.) 
                +2906.69 * getSMEFTCoeff("CHq3R",1,1, 10000.) 
                +120515. * getSMEFTCoeff("CllR",0,1,1,0, 10000.) 
                +4516469690. * getSMEFTCoeff("Clq3R",0,0,0,0, 10000.) 
                +125603164. * getSMEFTCoeff("Clq3R",0,0,1,1, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin10a0 * sigmaMx_Bin10a0/0.358/0.358; 
 
 
//----------------------------------------------------------- 
 
    return dchi2Tot; 
 
}



const double NPSMEFTd6General::chi2FCChhmunu() const
{
    double dchi2Tot = 0.0;

    double sigmaSMMx_Bin1a0 = 0.0, sigmaMx_Bin1a0 = 0.0; 
 
        sigmaSMMx_Bin1a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin1a0 = sigmaSMMx_Bin1a0 
                +1176.34 * getSMEFTCoeff("CHD", 1500.) 
                +1283.13 * getSMEFTCoeff("CHWB", 1500.) 
                -121146. * getSMEFTCoeff("CHl3R",0,0, 1500.) 
                +228.604 * getSMEFTCoeff("CHl3R",1,1, 1500.) 
                +109268. * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +13635.3 * getSMEFTCoeff("CHq3R",1,1, 1500.) 
                +120432. * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                +95562583. * getSMEFTCoeff("Clq3R",1,1,0,0, 1500.) 
                +11443764. * getSMEFTCoeff("Clq3R",1,1,1,1, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin1a0 * sigmaMx_Bin1a0/0.011/0.011; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin2a0 = 0.0, sigmaMx_Bin2a0 = 0.0; 
 
        sigmaSMMx_Bin2a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin2a0 = sigmaSMMx_Bin2a0 
                -93.2603 * getSMEFTCoeff("CHD", 1500.) 
                -490.918 * getSMEFTCoeff("CHWB", 1500.) 
                -121534. * getSMEFTCoeff("CHl3R",0,0, 1500.) 
                +609.328 * getSMEFTCoeff("CHl3R",1,1, 1500.) 
                +108979. * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +12192.1 * getSMEFTCoeff("CHq3R",1,1, 1500.) 
                +119649. * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                +129932554. * getSMEFTCoeff("Clq3R",1,1,0,0, 1500.) 
                +14246036. * getSMEFTCoeff("Clq3R",1,1,1,1, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin2a0 * sigmaMx_Bin2a0/0.012/0.012; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin3a0 = 0.0, sigmaMx_Bin3a0 = 0.0; 
 
        sigmaSMMx_Bin3a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin3a0 = sigmaSMMx_Bin3a0 
                +1344.55 * getSMEFTCoeff("CHD", 3000.) 
                -911.708 * getSMEFTCoeff("CHWB", 3000.) 
                -121326. * getSMEFTCoeff("CHl3R",0,0, 3000.) 
                -174.429 * getSMEFTCoeff("CHl3R",1,1, 3000.) 
                +111000. * getSMEFTCoeff("CHq3R",0,0, 3000.) 
                +9700.4 * getSMEFTCoeff("CHq3R",1,1, 3000.) 
                +121277. * getSMEFTCoeff("CllR",0,1,1,0, 3000.) 
                +260567340. * getSMEFTCoeff("Clq3R",1,1,0,0, 3000.) 
                +22261564. * getSMEFTCoeff("Clq3R",1,1,1,1, 3000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin3a0 * sigmaMx_Bin3a0/0.012/0.012; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin4a0 = 0.0, sigmaMx_Bin4a0 = 0.0; 
 
        sigmaSMMx_Bin4a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin4a0 = sigmaSMMx_Bin4a0 
                +598.783 * getSMEFTCoeff("CHD", 3000.) 
                +1157.45 * getSMEFTCoeff("CHWB", 3000.) 
                -122190. * getSMEFTCoeff("CHl3R",0,0, 3000.) 
                -854.194 * getSMEFTCoeff("CHl3R",1,1, 3000.) 
                +112684. * getSMEFTCoeff("CHq3R",0,0, 3000.) 
                +7962.93 * getSMEFTCoeff("CHq3R",1,1, 3000.) 
                +121256. * getSMEFTCoeff("CllR",0,1,1,0, 3000.) 
                +436697857. * getSMEFTCoeff("Clq3R",1,1,0,0, 3000.) 
                +31212071. * getSMEFTCoeff("Clq3R",1,1,1,1, 3000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin4a0 * sigmaMx_Bin4a0/0.016/0.016; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin5a0 = 0.0, sigmaMx_Bin5a0 = 0.0; 
 
        sigmaSMMx_Bin5a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin5a0 = sigmaSMMx_Bin5a0 
                +301.491 * getSMEFTCoeff("CHD", 5000.) 
                +946.195 * getSMEFTCoeff("CHWB", 5000.) 
                -121984. * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -1159.79 * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                +113961. * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +7021.33 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +120914. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                +648178773. * getSMEFTCoeff("Clq3R",1,1,0,0, 5000.) 
                +40038690. * getSMEFTCoeff("Clq3R",1,1,1,1, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin5a0 * sigmaMx_Bin5a0/0.024/0.024; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin6a0 = 0.0, sigmaMx_Bin6a0 = 0.0; 
 
        sigmaSMMx_Bin6a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin6a0 = sigmaSMMx_Bin6a0 
                +916.787 * getSMEFTCoeff("CHD", 5000.) 
                +1815.31 * getSMEFTCoeff("CHWB", 5000.) 
                -122564. * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -943.716 * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                +114967. * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +5112.52 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +120778. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                +887175206. * getSMEFTCoeff("Clq3R",1,1,0,0, 5000.) 
                +48623109. * getSMEFTCoeff("Clq3R",1,1,1,1, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin6a0 * sigmaMx_Bin6a0/0.035/0.035; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin7a0 = 0.0, sigmaMx_Bin7a0 = 0.0; 
 
        sigmaSMMx_Bin7a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin7a0 = sigmaSMMx_Bin7a0 
                +340.396 * getSMEFTCoeff("CHD", 5000.) 
                +1911.19 * getSMEFTCoeff("CHWB", 5000.) 
                -120156. * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                +902.206 * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                +117818. * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +7125.72 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +122431. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                +1142595360. * getSMEFTCoeff("Clq3R",1,1,0,0, 5000.) 
                +56756510. * getSMEFTCoeff("Clq3R",1,1,1,1, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin7a0 * sigmaMx_Bin7a0/0.051/0.051; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin8a0 = 0.0, sigmaMx_Bin8a0 = 0.0; 
 
        sigmaSMMx_Bin8a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin8a0 = sigmaSMMx_Bin8a0 
                +393.017 * getSMEFTCoeff("CHD", 5000.) 
                -331.395 * getSMEFTCoeff("CHWB", 5000.) 
                -121452. * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                +383.312 * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                +114992. * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +5593.4 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +119736. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                +1464148563. * getSMEFTCoeff("Clq3R",1,1,0,0, 5000.) 
                +65769562. * getSMEFTCoeff("Clq3R",1,1,1,1, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin8a0 * sigmaMx_Bin8a0/0.062/0.062; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin9a0 = 0.0, sigmaMx_Bin9a0 = 0.0; 
 
        sigmaSMMx_Bin9a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin9a0 = sigmaSMMx_Bin9a0 
                +1239.19 * getSMEFTCoeff("CHD", 10000.) 
                -1258.2 * getSMEFTCoeff("CHWB", 10000.) 
                -120632. * getSMEFTCoeff("CHl3R",0,0, 10000.) 
                -1033.67 * getSMEFTCoeff("CHl3R",1,1, 10000.) 
                +116060. * getSMEFTCoeff("CHq3R",0,0, 10000.) 
                +3818.58 * getSMEFTCoeff("CHq3R",1,1, 10000.) 
                +120677. * getSMEFTCoeff("CllR",0,1,1,0, 10000.) 
                +2652444430. * getSMEFTCoeff("Clq3R",1,1,0,0, 10000.) 
                +92243084. * getSMEFTCoeff("Clq3R",1,1,1,1, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin9a0 * sigmaMx_Bin9a0/0.103/0.103; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin10a0 = 0.0, sigmaMx_Bin10a0 = 0.0; 
 
        sigmaSMMx_Bin10a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin10a0 = sigmaSMMx_Bin10a0 
                +792.849 * getSMEFTCoeff("CHD", 10000.) 
                -199.759 * getSMEFTCoeff("CHWB", 10000.) 
                -121661. * getSMEFTCoeff("CHl3R",0,0, 10000.) 
                -777.726 * getSMEFTCoeff("CHl3R",1,1, 10000.) 
                +117435. * getSMEFTCoeff("CHq3R",0,0, 10000.) 
                +2906.69 * getSMEFTCoeff("CHq3R",1,1, 10000.) 
                +120515. * getSMEFTCoeff("CllR",0,1,1,0, 10000.) 
                +4516469690. * getSMEFTCoeff("Clq3R",1,1,0,0, 10000.) 
                +125603164. * getSMEFTCoeff("Clq3R",1,1,1,1, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin10a0 * sigmaMx_Bin10a0/0.301/0.301; 
 
 
//----------------------------------------------------------- 
 
    return dchi2Tot; 
 
}


const double NPSMEFTd6General::chi2FCChhtanu() const
{
    double dchi2Tot = 0.0;

    double sigmaSMMx_Bin1a0 = 0.0, sigmaMx_Bin1a0 = 0.0; 
 
        sigmaSMMx_Bin1a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin1a0 = sigmaSMMx_Bin1a0 
                +1129.84 * getSMEFTCoeff("CHD", 1500.) 
                +1314.12 * getSMEFTCoeff("CHWB", 1500.) 
                -121224. * getSMEFTCoeff("CHl3R",0,0, 1500.) 
                -121047. * getSMEFTCoeff("CHl3R",1,1, 1500.) 
                +122469. * getSMEFTCoeff("CHl3R",2,2, 1500.) 
                +108899. * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +12659.2 * getSMEFTCoeff("CHq3R",1,1, 1500.) 
                +121221. * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                +95558049. * getSMEFTCoeff("Clq3R",2,2,0,0, 1500.) 
                +11431295. * getSMEFTCoeff("Clq3R",2,2,1,1, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin1a0 * sigmaMx_Bin1a0/0.015/0.015; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin2a0 = 0.0, sigmaMx_Bin2a0 = 0.0; 
 
        sigmaSMMx_Bin2a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin2a0 = sigmaSMMx_Bin2a0 
                -103.372 * getSMEFTCoeff("CHD", 1500.) 
                -674.314 * getSMEFTCoeff("CHWB", 1500.) 
                -121591. * getSMEFTCoeff("CHl3R",0,0, 1500.) 
                -120814. * getSMEFTCoeff("CHl3R",1,1, 1500.) 
                +120661. * getSMEFTCoeff("CHl3R",2,2, 1500.) 
                +109501. * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +10751.4 * getSMEFTCoeff("CHq3R",1,1, 1500.) 
                +121589. * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                +130021001. * getSMEFTCoeff("Clq3R",2,2,0,0, 1500.) 
                +14229132. * getSMEFTCoeff("Clq3R",2,2,1,1, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin2a0 * sigmaMx_Bin2a0/0.02/0.02; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin3a0 = 0.0, sigmaMx_Bin3a0 = 0.0; 
 
        sigmaSMMx_Bin3a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin3a0 = sigmaSMMx_Bin3a0 
                +1344.03 * getSMEFTCoeff("CHD", 3000.) 
                -916.997 * getSMEFTCoeff("CHWB", 3000.) 
                -121331. * getSMEFTCoeff("CHl3R",0,0, 3000.) 
                -121407. * getSMEFTCoeff("CHl3R",1,1, 3000.) 
                +120821. * getSMEFTCoeff("CHl3R",2,2, 3000.) 
                +110934. * getSMEFTCoeff("CHq3R",0,0, 3000.) 
                +9656.97 * getSMEFTCoeff("CHq3R",1,1, 3000.) 
                +121489. * getSMEFTCoeff("CllR",0,1,1,0, 3000.) 
                +260084968. * getSMEFTCoeff("Clq3R",2,2,0,0, 3000.) 
                +22286875. * getSMEFTCoeff("Clq3R",2,2,1,1, 3000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin3a0 * sigmaMx_Bin3a0/0.021/0.021; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin4a0 = 0.0, sigmaMx_Bin4a0 = 0.0; 
 
        sigmaSMMx_Bin4a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin4a0 = sigmaSMMx_Bin4a0 
                +598.783 * getSMEFTCoeff("CHD", 3000.) 
                +1157.45 * getSMEFTCoeff("CHWB", 3000.) 
                -122190. * getSMEFTCoeff("CHl3R",0,0, 3000.) 
                -121995. * getSMEFTCoeff("CHl3R",1,1, 3000.) 
                +120939. * getSMEFTCoeff("CHl3R",2,2, 3000.) 
                +112486. * getSMEFTCoeff("CHq3R",0,0, 3000.) 
                +8507.85 * getSMEFTCoeff("CHq3R",1,1, 3000.) 
                +122710. * getSMEFTCoeff("CllR",0,1,1,0, 3000.) 
                +435713560. * getSMEFTCoeff("Clq3R",2,2,0,0, 3000.) 
                +31186573. * getSMEFTCoeff("Clq3R",2,2,1,1, 3000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin4a0 * sigmaMx_Bin4a0/0.052/0.052; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin5a0 = 0.0, sigmaMx_Bin5a0 = 0.0; 
 
        sigmaSMMx_Bin5a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin5a0 = sigmaSMMx_Bin5a0 
                +301.491 * getSMEFTCoeff("CHD", 5000.) 
                +946.195 * getSMEFTCoeff("CHWB", 5000.) 
                -121984. * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -122308. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                +121485. * getSMEFTCoeff("CHl3R",2,2, 5000.) 
                +113573. * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +6714.91 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +121506. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                +647978259. * getSMEFTCoeff("Clq3R",2,2,0,0, 5000.) 
                +40051102. * getSMEFTCoeff("Clq3R",2,2,1,1, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin5a0 * sigmaMx_Bin5a0/0.111/0.111; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin6a0 = 0.0, sigmaMx_Bin6a0 = 0.0; 
 
        sigmaSMMx_Bin6a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin6a0 = sigmaSMMx_Bin6a0 
                +916.787 * getSMEFTCoeff("CHD", 5000.) 
                +1815.31 * getSMEFTCoeff("CHWB", 5000.) 
                -122564. * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -122083. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                +121308. * getSMEFTCoeff("CHl3R",2,2, 5000.) 
                +113470. * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +5610.7 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +120351. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                +886363223. * getSMEFTCoeff("Clq3R",2,2,0,0, 5000.) 
                +48573202. * getSMEFTCoeff("Clq3R",2,2,1,1, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin6a0 * sigmaMx_Bin6a0/0.115/0.115; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin7a0 = 0.0, sigmaMx_Bin7a0 = 0.0; 
 
        sigmaSMMx_Bin7a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin7a0 = sigmaSMMx_Bin7a0 
                +340.396 * getSMEFTCoeff("CHD", 5000.) 
                +1911.19 * getSMEFTCoeff("CHWB", 5000.) 
                -120156. * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -120472. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                +123579. * getSMEFTCoeff("CHl3R",2,2, 5000.) 
                +116798. * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +7113.55 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +120160. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                +1145045894. * getSMEFTCoeff("Clq3R",2,2,0,0, 5000.) 
                +56813894. * getSMEFTCoeff("Clq3R",2,2,1,1, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin7a0 * sigmaMx_Bin7a0/0.179/0.179; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin8a0 = 0.0, sigmaMx_Bin8a0 = 0.0; 
 
        sigmaSMMx_Bin8a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin8a0 = sigmaSMMx_Bin8a0 
                +393.017 * getSMEFTCoeff("CHD", 5000.) 
                -331.395 * getSMEFTCoeff("CHWB", 5000.) 
                -121452. * getSMEFTCoeff("CHl3R",0,0, 5000.) 
                -120915. * getSMEFTCoeff("CHl3R",1,1, 5000.) 
                +120392. * getSMEFTCoeff("CHl3R",2,2, 5000.) 
                +116533. * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +3921.85 * getSMEFTCoeff("CHq3R",1,1, 5000.) 
                +120955. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                +1464612761. * getSMEFTCoeff("Clq3R",2,2,0,0, 5000.) 
                +65777348. * getSMEFTCoeff("Clq3R",2,2,1,1, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin8a0 * sigmaMx_Bin8a0/0.307/0.307; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin9a0 = 0.0, sigmaMx_Bin9a0 = 0.0; 
 
        sigmaSMMx_Bin9a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin9a0 = sigmaSMMx_Bin9a0 
                +1239.19 * getSMEFTCoeff("CHD", 10000.) 
                -1258.2 * getSMEFTCoeff("CHWB", 10000.) 
                -120632. * getSMEFTCoeff("CHl3R",0,0, 10000.) 
                -122171. * getSMEFTCoeff("CHl3R",1,1, 10000.) 
                +120411. * getSMEFTCoeff("CHl3R",2,2, 10000.) 
                +117080. * getSMEFTCoeff("CHq3R",0,0, 10000.) 
                +3903.26 * getSMEFTCoeff("CHq3R",1,1, 10000.) 
                +121244. * getSMEFTCoeff("CllR",0,1,1,0, 10000.) 
                +2648049651. * getSMEFTCoeff("Clq3R",2,2,0,0, 10000.) 
                +92207893. * getSMEFTCoeff("Clq3R",2,2,1,1, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin9a0 * sigmaMx_Bin9a0/1.154/1.154; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin10a0 = 0.0, sigmaMx_Bin10a0 = 0.0; 
 
        sigmaSMMx_Bin10a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin10a0 = sigmaSMMx_Bin10a0 
                +792.849 * getSMEFTCoeff("CHD", 10000.) 
                -199.759 * getSMEFTCoeff("CHWB", 10000.) 
                -121661. * getSMEFTCoeff("CHl3R",0,0, 10000.) 
                -121923. * getSMEFTCoeff("CHl3R",1,1, 10000.) 
                +121023. * getSMEFTCoeff("CHl3R",2,2, 10000.) 
                +117292. * getSMEFTCoeff("CHq3R",0,0, 10000.) 
                +2583.14 * getSMEFTCoeff("CHq3R",1,1, 10000.) 
                +120384. * getSMEFTCoeff("CllR",0,1,1,0, 10000.) 
                +4516504894. * getSMEFTCoeff("Clq3R",2,2,0,0, 10000.) 
                +125553808. * getSMEFTCoeff("Clq3R",2,2,1,1, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin10a0 * sigmaMx_Bin10a0/2.549/2.549; 
 
 
//----------------------------------------------------------- 
 
    return dchi2Tot; 
 
}


const double NPSMEFTd6General::chi2FCChhjj() const
{
    double dchi2Tot = 0.0;

    double sigmaSMMx_Bin1a0 = 0.0, sigmaMx_Bin1a0 = 0.0; 
 
        sigmaSMMx_Bin1a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin1a0 = sigmaSMMx_Bin1a0 
                -890.694 * getSMEFTCoeff("CG", 1000.) 
                -9144.58 * getSMEFTCoeff("Cqq1R",0,0,0,0, 1000.) 
                -109.779 * getSMEFTCoeff("Cqq1R",0,0,1,1, 1000.) 
                -3628.55 * getSMEFTCoeff("Cqq1R",0,1,1,0, 1000.) 
                -759.852 * getSMEFTCoeff("Cqq1R",1,1,1,1, 1000.) 
                -27041.8 * getSMEFTCoeff("Cqq3R",0,0,0,0, 1000.) 
                -215.715 * getSMEFTCoeff("Cqq3R",0,0,1,1, 1000.) 
                -13544.3 * getSMEFTCoeff("Cqq3R",0,1,1,0, 1000.) 
                -669.638 * getSMEFTCoeff("Cqq3R",1,1,1,1, 1000.) 
                -5536.87 * getSMEFTCoeff("CuuR",0,0,0,0, 1000.) 
                -281.95 * getSMEFTCoeff("CuuR",0,0,1,1, 1000.) 
                -107.759 * getSMEFTCoeff("CuuR",0,1,1,0, 1000.) 
                -3701.32 * getSMEFTCoeff("CddR",0,0,0,0, 1000.) 
                -3586.39 * getSMEFTCoeff("CddR",0,1,1,0, 1000.) 
                -784.024 * getSMEFTCoeff("CddR",1,1,1,1, 1000.) 
                -80.0339 * getSMEFTCoeff("Cud1R",0,0,0,0, 1000.) 
                -112.615 * getSMEFTCoeff("Cud1R",0,0,1,1, 1000.) 
                -116.089 * getSMEFTCoeff("Cud1R",1,1,0,0, 1000.) 
                -2323.45 * getSMEFTCoeff("Cud8R",0,0,0,0, 1000.) 
                -1398.66 * getSMEFTCoeff("Cud8R",0,0,1,1, 1000.) 
                -97.7505 * getSMEFTCoeff("Cud8R",1,1,0,0, 1000.) 
                -93.8728 * getSMEFTCoeff("Cqu1R",0,0,1,1, 1000.) 
                -221.312 * getSMEFTCoeff("Cqu1R",1,1,0,0, 1000.) 
                -54.386 * getSMEFTCoeff("Cqu1R",1,1,1,1, 1000.) 
                -4775.26 * getSMEFTCoeff("Cqu8R",0,0,0,0, 1000.) 
                -104.874 * getSMEFTCoeff("Cqu8R",0,0,1,1, 1000.) 
                -1398.23 * getSMEFTCoeff("Cqu8R",1,1,0,0, 1000.) 
                -130.097 * getSMEFTCoeff("Cqd1R",0,0,0,0, 1000.) 
                -201.117 * getSMEFTCoeff("Cqd1R",0,0,1,1, 1000.) 
                -108.207 * getSMEFTCoeff("Cqd1R",1,1,0,0, 1000.) 
                -4023.82 * getSMEFTCoeff("Cqd8R",0,0,0,0, 1000.) 
                -2226.22 * getSMEFTCoeff("Cqd8R",0,0,1,1, 1000.) 
                -983.363 * getSMEFTCoeff("Cqd8R",1,1,0,0, 1000.) 
                -401.769 * getSMEFTCoeff("Cqd8R",1,1,1,1, 1000.) 
                +70.1405 * getSMEFTCoeff("Cqq3R",0,2,2,0, 1000.) 
                -43.9352 * getSMEFTCoeff("Cud1R",2,2,0,0, 1000.) 
                -46.5939 * getSMEFTCoeff("Cqd1R",2,2,1,1, 1000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin1a0 * sigmaMx_Bin1a0/0.014/0.014; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin2a0 = 0.0, sigmaMx_Bin2a0 = 0.0; 
 
        sigmaSMMx_Bin2a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin2a0 = sigmaSMMx_Bin2a0 
                -1030.34 * getSMEFTCoeff("CG", 1500.) 
                -13649. * getSMEFTCoeff("Cqq1R",0,0,0,0, 1500.) 
                -48.8212 * getSMEFTCoeff("Cqq1R",0,0,1,1, 1500.) 
                -5008.43 * getSMEFTCoeff("Cqq1R",0,1,1,0, 1500.) 
                -995.27 * getSMEFTCoeff("Cqq1R",1,1,1,1, 1500.) 
                -40651.7 * getSMEFTCoeff("Cqq3R",0,0,0,0, 1500.) 
                -104.636 * getSMEFTCoeff("Cqq3R",0,0,1,1, 1500.) 
                -18929. * getSMEFTCoeff("Cqq3R",0,1,1,0, 1500.) 
                -840.435 * getSMEFTCoeff("Cqq3R",1,1,1,1, 1500.) 
                -8388.46 * getSMEFTCoeff("CuuR",0,0,0,0, 1500.) 
                -114.777 * getSMEFTCoeff("CuuR",0,0,1,1, 1500.) 
                -5313.4 * getSMEFTCoeff("CddR",0,0,0,0, 1500.) 
                -5014.73 * getSMEFTCoeff("CddR",0,1,1,0, 1500.) 
                -974.761 * getSMEFTCoeff("CddR",1,1,1,1, 1500.) 
                -77.7941 * getSMEFTCoeff("Cud1R",0,0,0,0, 1500.) 
                -76.22 * getSMEFTCoeff("Cud1R",0,0,1,1, 1500.) 
                -46.7399 * getSMEFTCoeff("Cud1R",1,1,0,0, 1500.) 
                -3402.95 * getSMEFTCoeff("Cud8R",0,0,0,0, 1500.) 
                -1831.44 * getSMEFTCoeff("Cud8R",0,0,1,1, 1500.) 
                -175.154 * getSMEFTCoeff("Cud8R",1,1,0,0, 1500.) 
                -72.2445 * getSMEFTCoeff("Cqu1R",0,0,0,0, 1500.) 
                -153.3 * getSMEFTCoeff("Cqu1R",0,0,1,1, 1500.) 
                -148.743 * getSMEFTCoeff("Cqu1R",1,1,0,0, 1500.) 
                -29.7946 * getSMEFTCoeff("Cqu1R",1,1,1,1, 1500.) 
                -7276.72 * getSMEFTCoeff("Cqu8R",0,0,0,0, 1500.) 
                -69.1379 * getSMEFTCoeff("Cqu8R",0,0,1,1, 1500.) 
                -1928.44 * getSMEFTCoeff("Cqu8R",1,1,0,0, 1500.) 
                -85.3015 * getSMEFTCoeff("Cqd1R",0,0,0,0, 1500.) 
                -141.13 * getSMEFTCoeff("Cqd1R",0,0,1,1, 1500.) 
                -40.9296 * getSMEFTCoeff("Cqd1R",1,1,0,0, 1500.) 
                -5937.63 * getSMEFTCoeff("Cqd8R",0,0,0,0, 1500.) 
                -3087.16 * getSMEFTCoeff("Cqd8R",0,0,1,1, 1500.) 
                -1311.45 * getSMEFTCoeff("Cqd8R",1,1,0,0, 1500.) 
                -485.705 * getSMEFTCoeff("Cqd8R",1,1,1,1, 1500.) 
                +74.1896 * getSMEFTCoeff("Cqq3R",0,2,2,0, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin2a0 * sigmaMx_Bin2a0/0.014/0.014; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin3a0 = 0.0, sigmaMx_Bin3a0 = 0.0; 
 
        sigmaSMMx_Bin3a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin3a0 = sigmaSMMx_Bin3a0 
                -1818.29 * getSMEFTCoeff("CG", 1500.) 
                -18744.5 * getSMEFTCoeff("Cqq1R",0,0,0,0, 1500.) 
                -6290.79 * getSMEFTCoeff("Cqq1R",0,1,1,0, 1500.) 
                -1145.47 * getSMEFTCoeff("Cqq1R",1,1,1,1, 1500.) 
                -55785.1 * getSMEFTCoeff("Cqq3R",0,0,0,0, 1500.) 
                -44.5407 * getSMEFTCoeff("Cqq3R",0,0,1,1, 1500.) 
                -24360.4 * getSMEFTCoeff("Cqq3R",0,1,1,0, 1500.) 
                -994.551 * getSMEFTCoeff("Cqq3R",1,1,1,1, 1500.) 
                -11662.1 * getSMEFTCoeff("CuuR",0,0,0,0, 1500.) 
                -7144.78 * getSMEFTCoeff("CddR",0,0,0,0, 1500.) 
                +49.8212 * getSMEFTCoeff("CddR",0,0,1,1, 1500.) 
                -6292.42 * getSMEFTCoeff("CddR",0,1,1,0, 1500.) 
                -1140.69 * getSMEFTCoeff("CddR",1,1,1,1, 1500.) 
                -42.9242 * getSMEFTCoeff("Cud1R",0,0,0,0, 1500.) 
                -4513.25 * getSMEFTCoeff("Cud8R",0,0,0,0, 1500.) 
                -2298.43 * getSMEFTCoeff("Cud8R",0,0,1,1, 1500.) 
                +49.1214 * getSMEFTCoeff("Cqu1R",0,0,0,0, 1500.) 
                -9947.45 * getSMEFTCoeff("Cqu8R",0,0,0,0, 1500.) 
                -2335.04 * getSMEFTCoeff("Cqu8R",1,1,0,0, 1500.) 
                -27.7359 * getSMEFTCoeff("Cqd1R",0,0,0,0, 1500.) 
                -41.7542 * getSMEFTCoeff("Cqd1R",1,1,0,0, 1500.) 
                -7892.2 * getSMEFTCoeff("Cqd8R",0,0,0,0, 1500.) 
                -3879.38 * getSMEFTCoeff("Cqd8R",0,0,1,1, 1500.) 
                -1671.67 * getSMEFTCoeff("Cqd8R",1,1,0,0, 1500.) 
                -569.236 * getSMEFTCoeff("Cqd8R",1,1,1,1, 1500.) 
                +27.5835 * getSMEFTCoeff("Cqq1R",0,2,2,0, 1500.) 
                +36.3637 * getSMEFTCoeff("Cqq1R",1,2,2,1, 1500.) 
                +101.359 * getSMEFTCoeff("Cqq3R",0,2,2,0, 1500.) 
                +29.3483 * getSMEFTCoeff("CddR",0,2,2,0, 1500.) 
                +35.6089 * getSMEFTCoeff("CddR",1,2,2,1, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin3a0 * sigmaMx_Bin3a0/0.014/0.014; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin4a0 = 0.0, sigmaMx_Bin4a0 = 0.0; 
 
        sigmaSMMx_Bin4a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin4a0 = sigmaSMMx_Bin4a0 
                -1370. * getSMEFTCoeff("CG", 1500.) 
                -26477. * getSMEFTCoeff("Cqq1R",0,0,0,0, 1500.) 
                -77.2249 * getSMEFTCoeff("Cqq1R",0,0,1,1, 1500.) 
                -7895.02 * getSMEFTCoeff("Cqq1R",0,1,1,0, 1500.) 
                -1332.58 * getSMEFTCoeff("Cqq1R",1,1,1,1, 1500.) 
                -78771.8 * getSMEFTCoeff("Cqq3R",0,0,0,0, 1500.) 
                -58.2757 * getSMEFTCoeff("Cqq3R",0,0,1,1, 1500.) 
                -31695.2 * getSMEFTCoeff("Cqq3R",0,1,1,0, 1500.) 
                -1164.47 * getSMEFTCoeff("Cqq3R",1,1,1,1, 1500.) 
                -16793.3 * getSMEFTCoeff("CuuR",0,0,0,0, 1500.) 
                +66.296 * getSMEFTCoeff("CuuR",0,0,1,1, 1500.) 
                +74.2346 * getSMEFTCoeff("CuuR",0,1,1,0, 1500.) 
                -9743.06 * getSMEFTCoeff("CddR",0,0,0,0, 1500.) 
                -46.0297 * getSMEFTCoeff("CddR",0,0,1,1, 1500.) 
                -7875.89 * getSMEFTCoeff("CddR",0,1,1,0, 1500.) 
                -1297.84 * getSMEFTCoeff("CddR",1,1,1,1, 1500.) 
                -72.4818 * getSMEFTCoeff("Cud1R",1,1,0,0, 1500.) 
                -6413.62 * getSMEFTCoeff("Cud8R",0,0,0,0, 1500.) 
                -2966.86 * getSMEFTCoeff("Cud8R",0,0,1,1, 1500.) 
                +61.2397 * getSMEFTCoeff("Cud8R",1,1,0,0, 1500.) 
                +31.7482 * getSMEFTCoeff("Cud8R",1,1,1,1, 1500.) 
                +64.2394 * getSMEFTCoeff("Cqu1R",0,0,0,0, 1500.) 
                +29.4293 * getSMEFTCoeff("Cqu1R",0,0,1,1, 1500.) 
                +97.0453 * getSMEFTCoeff("Cqu1R",1,1,0,0, 1500.) 
                -13919.1 * getSMEFTCoeff("Cqu8R",0,0,0,0, 1500.) 
                +46.8639 * getSMEFTCoeff("Cqu8R",0,0,1,1, 1500.) 
                -3004.36 * getSMEFTCoeff("Cqu8R",1,1,0,0, 1500.) 
                +36.037 * getSMEFTCoeff("Cqd1R",0,0,0,0, 1500.) 
                +33.4857 * getSMEFTCoeff("Cqd1R",0,0,1,1, 1500.) 
                -10832. * getSMEFTCoeff("Cqd8R",0,0,0,0, 1500.) 
                -4981.19 * getSMEFTCoeff("Cqd8R",0,0,1,1, 1500.) 
                -2025.93 * getSMEFTCoeff("Cqd8R",1,1,0,0, 1500.) 
                -631.147 * getSMEFTCoeff("Cqd8R",1,1,1,1, 1500.) 
                +33.6588 * getSMEFTCoeff("Cqq1R",0,2,2,0, 1500.) 
                +39.1519 * getSMEFTCoeff("Cqq1R",1,2,2,1, 1500.) 
                +101.596 * getSMEFTCoeff("Cqq3R",0,2,2,0, 1500.) 
                +38.6293 * getSMEFTCoeff("CddR",0,2,2,0, 1500.) 
                ;
 
        dchi2Tot += sigmaMx_Bin4a0 * sigmaMx_Bin4a0/0.014/0.014; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin5a0 = 0.0, sigmaMx_Bin5a0 = 0.0; 
 
        sigmaSMMx_Bin5a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin5a0 = sigmaSMMx_Bin5a0 
                -657.643 * getSMEFTCoeff("CG", 3000.) 
                -42838.6 * getSMEFTCoeff("Cqq1R",0,0,0,0, 3000.) 
                +63.4038 * getSMEFTCoeff("Cqq1R",0,0,1,1, 3000.) 
                -10550.6 * getSMEFTCoeff("Cqq1R",0,1,1,0, 3000.) 
                -1518.09 * getSMEFTCoeff("Cqq1R",1,1,1,1, 3000.) 
                -126704. * getSMEFTCoeff("Cqq3R",0,0,0,0, 3000.) 
                -75.2242 * getSMEFTCoeff("Cqq3R",0,0,1,1, 3000.) 
                -43790.1 * getSMEFTCoeff("Cqq3R",0,1,1,0, 3000.) 
                -1389.76 * getSMEFTCoeff("Cqq3R",1,1,1,1, 3000.) 
                -28095.9 * getSMEFTCoeff("CuuR",0,0,0,0, 3000.) 
                +95.6237 * getSMEFTCoeff("CuuR",0,0,1,1, 3000.) 
                +70.6559 * getSMEFTCoeff("CuuR",0,1,1,0, 3000.) 
                -14867.3 * getSMEFTCoeff("CddR",0,0,0,0, 3000.) 
                +144.191 * getSMEFTCoeff("CddR",0,0,1,1, 3000.) 
                -10501.1 * getSMEFTCoeff("CddR",0,1,1,0, 3000.) 
                -1523.41 * getSMEFTCoeff("CddR",1,1,1,1, 3000.) 
                +40.1804 * getSMEFTCoeff("Cud1R",1,1,0,0, 3000.) 
                -10442.3 * getSMEFTCoeff("Cud8R",0,0,0,0, 3000.) 
                -4179.75 * getSMEFTCoeff("Cud8R",0,0,1,1, 3000.) 
                +164.988 * getSMEFTCoeff("Cud8R",1,1,0,0, 3000.) 
                +60.2184 * getSMEFTCoeff("Cqu1R",0,0,0,0, 3000.) 
                +52.054 * getSMEFTCoeff("Cqu1R",0,0,1,1, 3000.) 
                +37.0848 * getSMEFTCoeff("Cqu1R",1,1,0,0, 3000.) 
                -22465.4 * getSMEFTCoeff("Cqu8R",0,0,0,0, 3000.) 
                -4089.11 * getSMEFTCoeff("Cqu8R",1,1,0,0, 3000.) 
                +77.0442 * getSMEFTCoeff("Cqd1R",0,0,0,0, 3000.) 
                +65.3417 * getSMEFTCoeff("Cqd1R",0,0,1,1, 3000.) 
                -72.8357 * getSMEFTCoeff("Cqd1R",1,1,0,0, 3000.) 
                -16859.2 * getSMEFTCoeff("Cqd8R",0,0,0,0, 3000.) 
                -6908.72 * getSMEFTCoeff("Cqd8R",0,0,1,1, 3000.) 
                -2725.52 * getSMEFTCoeff("Cqd8R",1,1,0,0, 3000.) 
                -737.048 * getSMEFTCoeff("Cqd8R",1,1,1,1, 3000.) 
                +35.3407 * getSMEFTCoeff("Cqq1R",0,2,2,0, 3000.) 
                +35.2539 * getSMEFTCoeff("Cqq1R",1,2,2,1, 3000.) 
                +95.6513 * getSMEFTCoeff("Cqq3R",0,2,2,0, 3000.) 
                +36.0891 * getSMEFTCoeff("CddR",0,2,2,0, 3000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin5a0 * sigmaMx_Bin5a0/0.014/0.014; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin6a0 = 0.0, sigmaMx_Bin6a0 = 0.0; 
 
        sigmaSMMx_Bin6a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin6a0 = sigmaSMMx_Bin6a0 
                -690.666 * getSMEFTCoeff("CG", 5000.) 
                -70988.4 * getSMEFTCoeff("Cqq1R",0,0,0,0, 5000.) 
                +49.227 * getSMEFTCoeff("Cqq1R",0,0,1,1, 5000.) 
                -13657.1 * getSMEFTCoeff("Cqq1R",0,1,1,0, 5000.) 
                -1719.24 * getSMEFTCoeff("Cqq1R",1,1,1,1, 5000.) 
                -206777. * getSMEFTCoeff("Cqq3R",0,0,0,0, 5000.) 
                -71.8683 * getSMEFTCoeff("Cqq3R",0,0,1,1, 5000.) 
                -59194.2 * getSMEFTCoeff("Cqq3R",0,1,1,0, 5000.) 
                -1602.72 * getSMEFTCoeff("Cqq3R",1,1,1,1, 5000.) 
                -48214.7 * getSMEFTCoeff("CuuR",0,0,0,0, 5000.) 
                -121.418 * getSMEFTCoeff("CuuR",0,1,1,0, 5000.) 
                -22958.9 * getSMEFTCoeff("CddR",0,0,0,0, 5000.) 
                -148.247 * getSMEFTCoeff("CddR",0,0,1,1, 5000.) 
                -13965. * getSMEFTCoeff("CddR",0,1,1,0, 5000.) 
                -1724.97 * getSMEFTCoeff("CddR",1,1,1,1, 5000.) 
                -100.087 * getSMEFTCoeff("Cud1R",0,0,0,0, 5000.) 
                -191.574 * getSMEFTCoeff("Cud1R",0,0,1,1, 5000.) 
                -72.2475 * getSMEFTCoeff("Cud1R",1,1,0,0, 5000.) 
                -16985.4 * getSMEFTCoeff("Cud8R",0,0,0,0, 5000.) 
                -5792.47 * getSMEFTCoeff("Cud8R",0,0,1,1, 5000.) 
                -35.185 * getSMEFTCoeff("Cud8R",1,1,1,1, 5000.) 
                -126.068 * getSMEFTCoeff("Cqu1R",0,0,0,0, 5000.) 
                -55.2976 * getSMEFTCoeff("Cqu1R",1,1,0,0, 5000.) 
                -36977.7 * getSMEFTCoeff("Cqu8R",0,0,0,0, 5000.) 
                -96.4553 * getSMEFTCoeff("Cqu8R",0,0,1,1, 5000.) 
                -5788.82 * getSMEFTCoeff("Cqu8R",1,1,0,0, 5000.) 
                -76.0228 * getSMEFTCoeff("Cqd1R",0,0,0,0, 5000.) 
                -158.362 * getSMEFTCoeff("Cqd1R",1,1,0,0, 5000.) 
                -31.4492 * getSMEFTCoeff("Cqd1R",1,1,1,1, 5000.) 
                -26479.7 * getSMEFTCoeff("Cqd8R",0,0,0,0, 5000.) 
                -9075.99 * getSMEFTCoeff("Cqd8R",0,0,1,1, 5000.) 
                -3598.88 * getSMEFTCoeff("Cqd8R",1,1,0,0, 5000.) 
                -842.855 * getSMEFTCoeff("Cqd8R",1,1,1,1, 5000.) 
                +53.8085 * getSMEFTCoeff("Cqq3R",0,2,2,0, 5000.) 
                -32.6925 * getSMEFTCoeff("CddR",1,1,2,2, 5000.) 
                -30.7895 * getSMEFTCoeff("Cud8R",2,2,0,0, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin6a0 * sigmaMx_Bin6a0/0.014/0.014; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin7a0 = 0.0, sigmaMx_Bin7a0 = 0.0; 
 
        sigmaSMMx_Bin7a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin7a0 = sigmaSMMx_Bin7a0 
                -527.448 * getSMEFTCoeff("CG", 5000.) 
                -107805. * getSMEFTCoeff("Cqq1R",0,0,0,0, 5000.) 
                -16158.1 * getSMEFTCoeff("Cqq1R",0,1,1,0, 5000.) 
                -1759.96 * getSMEFTCoeff("Cqq1R",1,1,1,1, 5000.) 
                -310084. * getSMEFTCoeff("Cqq3R",0,0,0,0, 5000.) 
                -73102.6 * getSMEFTCoeff("Cqq3R",0,1,1,0, 5000.) 
                -1651.97 * getSMEFTCoeff("Cqq3R",1,1,1,1, 5000.) 
                -75705.9 * getSMEFTCoeff("CuuR",0,0,0,0, 5000.) 
                +78.7685 * getSMEFTCoeff("CuuR",0,1,1,0, 5000.) 
                -32135.1 * getSMEFTCoeff("CddR",0,0,0,0, 5000.) 
                +58.1065 * getSMEFTCoeff("CddR",0,0,1,1, 5000.) 
                -16273.8 * getSMEFTCoeff("CddR",0,1,1,0, 5000.) 
                -1742.73 * getSMEFTCoeff("CddR",1,1,1,1, 5000.) 
                -68.244 * getSMEFTCoeff("Cud1R",0,0,1,1, 5000.) 
                -83.1764 * getSMEFTCoeff("Cud1R",1,1,0,0, 5000.) 
                -25338. * getSMEFTCoeff("Cud8R",0,0,0,0, 5000.) 
                -7158.64 * getSMEFTCoeff("Cud8R",0,0,1,1, 5000.) 
                -60.3992 * getSMEFTCoeff("Cud8R",1,1,0,0, 5000.) 
                -106.009 * getSMEFTCoeff("Cqu1R",0,0,0,0, 5000.) 
                -251.154 * getSMEFTCoeff("Cqu1R",0,0,1,1, 5000.) 
                +43.3554 * getSMEFTCoeff("Cqu1R",1,1,0,0, 5000.) 
                -55907.3 * getSMEFTCoeff("Cqu8R",0,0,0,0, 5000.) 
                -87.5442 * getSMEFTCoeff("Cqu8R",0,0,1,1, 5000.) 
                -7316.96 * getSMEFTCoeff("Cqu8R",1,1,0,0, 5000.) 
                -48.7969 * getSMEFTCoeff("Cqd1R",1,1,0,0, 5000.) 
                -37867.8 * getSMEFTCoeff("Cqd8R",0,0,0,0, 5000.) 
                -11233.9 * getSMEFTCoeff("Cqd8R",0,0,1,1, 5000.) 
                -4001.97 * getSMEFTCoeff("Cqd8R",1,1,0,0, 5000.) 
                -848.392 * getSMEFTCoeff("Cqd8R",1,1,1,1, 5000.) 
                +39.049 * getSMEFTCoeff("Cqq3R",0,2,2,0, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin7a0 * sigmaMx_Bin7a0/0.014/0.014; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin8a0 = 0.0, sigmaMx_Bin8a0 = 0.0; 
 
        sigmaSMMx_Bin8a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin8a0 = sigmaSMMx_Bin8a0 
                -952.453 * getSMEFTCoeff("CG", 5000.) 
                -159403. * getSMEFTCoeff("Cqq1R",0,0,0,0, 5000.) 
                +45.6804 * getSMEFTCoeff("Cqq1R",0,0,1,1, 5000.) 
                -18208.8 * getSMEFTCoeff("Cqq1R",0,1,1,0, 5000.) 
                -1734.8 * getSMEFTCoeff("Cqq1R",1,1,1,1, 5000.) 
                -449952. * getSMEFTCoeff("Cqq3R",0,0,0,0, 5000.) 
                +90.2891 * getSMEFTCoeff("Cqq3R",0,0,1,1, 5000.) 
                -86591.1 * getSMEFTCoeff("Cqq3R",0,1,1,0, 5000.) 
                -1684.65 * getSMEFTCoeff("Cqq3R",1,1,1,1, 5000.) 
                -115869. * getSMEFTCoeff("CuuR",0,0,0,0, 5000.) 
                +79.9841 * getSMEFTCoeff("CuuR",0,0,1,1, 5000.) 
                +95.71 * getSMEFTCoeff("CuuR",0,1,1,0, 5000.) 
                -43426.1 * getSMEFTCoeff("CddR",0,0,0,0, 5000.) 
                -57.6202 * getSMEFTCoeff("CddR",0,0,1,1, 5000.) 
                -18342.1 * getSMEFTCoeff("CddR",0,1,1,0, 5000.) 
                -1704.53 * getSMEFTCoeff("CddR",1,1,1,1, 5000.) 
                +60.2388 * getSMEFTCoeff("Cud1R",0,0,0,0, 5000.) 
                -36423.3 * getSMEFTCoeff("Cud8R",0,0,0,0, 5000.) 
                -8630.2 * getSMEFTCoeff("Cud8R",0,0,1,1, 5000.) 
                -57.8113 * getSMEFTCoeff("Cud8R",1,1,0,0, 5000.) 
                +34.3436 * getSMEFTCoeff("Cud8R",1,1,1,1, 5000.) 
                +62.4532 * getSMEFTCoeff("Cqu1R",1,1,0,0, 5000.) 
                -82616.1 * getSMEFTCoeff("Cqu8R",0,0,0,0, 5000.) 
                -90.316 * getSMEFTCoeff("Cqu8R",0,0,1,1, 5000.) 
                -8660.3 * getSMEFTCoeff("Cqu8R",1,1,0,0, 5000.) 
                +87.1227 * getSMEFTCoeff("Cqd1R",1,1,0,0, 5000.) 
                -52506.6 * getSMEFTCoeff("Cqd8R",0,0,0,0, 5000.) 
                -13296.1 * getSMEFTCoeff("Cqd8R",0,0,1,1, 5000.) 
                -4613.51 * getSMEFTCoeff("Cqd8R",1,1,0,0, 5000.) 
                -833.9 * getSMEFTCoeff("Cqd8R",1,1,1,1, 5000.) 
                +42.7555 * getSMEFTCoeff("CddR",0,2,2,0, 5000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin8a0 * sigmaMx_Bin8a0/0.014/0.014; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin9a0 = 0.0, sigmaMx_Bin9a0 = 0.0; 
 
        sigmaSMMx_Bin9a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin9a0 = sigmaSMMx_Bin9a0 
                +131.097 * getSMEFTCoeff("CG", 10000.) 
                -228881. * getSMEFTCoeff("Cqq1R",0,0,0,0, 10000.) 
                -19944.2 * getSMEFTCoeff("Cqq1R",0,1,1,0, 10000.) 
                -1649.01 * getSMEFTCoeff("Cqq1R",1,1,1,1, 10000.) 
                -633477. * getSMEFTCoeff("Cqq3R",0,0,0,0, 10000.) 
                -98285.2 * getSMEFTCoeff("Cqq3R",0,1,1,0, 10000.) 
                -1598.6 * getSMEFTCoeff("Cqq3R",1,1,1,1, 10000.) 
                -172593. * getSMEFTCoeff("CuuR",0,0,0,0, 10000.) 
                +58.5154 * getSMEFTCoeff("CuuR",0,0,1,1, 10000.) 
                +172.905 * getSMEFTCoeff("CuuR",0,1,1,0, 10000.) 
                +32.281 * getSMEFTCoeff("CuuR",1,1,1,1, 10000.) 
                -56436.7 * getSMEFTCoeff("CddR",0,0,0,0, 10000.) 
                +47.6583 * getSMEFTCoeff("CddR",0,0,1,1, 10000.) 
                -20078.6 * getSMEFTCoeff("CddR",0,1,1,0, 10000.) 
                -1646.88 * getSMEFTCoeff("CddR",1,1,1,1, 10000.) 
                -47.8239 * getSMEFTCoeff("Cud1R",0,0,1,1, 10000.) 
                -50567.6 * getSMEFTCoeff("Cud8R",0,0,0,0, 10000.) 
                -9802.85 * getSMEFTCoeff("Cud8R",0,0,1,1, 10000.) 
                +51.9893 * getSMEFTCoeff("Cud8R",1,1,0,0, 10000.) 
                +118.192 * getSMEFTCoeff("Cqu1R",0,0,0,0, 10000.) 
                +156.355 * getSMEFTCoeff("Cqu1R",0,0,1,1, 10000.) 
                +52.83 * getSMEFTCoeff("Cqu1R",1,1,1,1, 10000.) 
                -119038. * getSMEFTCoeff("Cqu8R",0,0,0,0, 10000.) 
                -93.9273 * getSMEFTCoeff("Cqu8R",0,0,1,1, 10000.) 
                -9807.59 * getSMEFTCoeff("Cqu8R",1,1,0,0, 10000.) 
                +38.6129 * getSMEFTCoeff("Cqu8R",1,1,1,1, 10000.) 
                -92.833 * getSMEFTCoeff("Cqd1R",0,0,1,1, 10000.) 
                +61.8971 * getSMEFTCoeff("Cqd1R",1,1,0,0, 10000.) 
                -70515.4 * getSMEFTCoeff("Cqd8R",0,0,0,0, 10000.) 
                -14877.7 * getSMEFTCoeff("Cqd8R",0,0,1,1, 10000.) 
                -5056.07 * getSMEFTCoeff("Cqd8R",1,1,0,0, 10000.) 
                -770.979 * getSMEFTCoeff("Cqd8R",1,1,1,1, 10000.) 
                +57.4731 * getSMEFTCoeff("Cqq3R",0,2,2,0, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin9a0 * sigmaMx_Bin9a0/0.014/0.014; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin10a0 = 0.0, sigmaMx_Bin10a0 = 0.0; 
 
        sigmaSMMx_Bin10a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin10a0 = sigmaSMMx_Bin10a0 
                +895.31 * getSMEFTCoeff("CG", 10000.) 
                -372378. * getSMEFTCoeff("Cqq1R",0,0,0,0, 10000.) 
                -21465.4 * getSMEFTCoeff("Cqq1R",0,1,1,0, 10000.) 
                -1435.1 * getSMEFTCoeff("Cqq1R",1,1,1,1, 10000.) 
                -988569. * getSMEFTCoeff("Cqq3R",0,0,0,0, 10000.) 
                +105.866 * getSMEFTCoeff("Cqq3R",0,0,1,1, 10000.) 
                -114067. * getSMEFTCoeff("Cqq3R",0,1,1,0, 10000.) 
                -1458.94 * getSMEFTCoeff("Cqq3R",1,1,1,1, 10000.) 
                -295809. * getSMEFTCoeff("CuuR",0,0,0,0, 10000.) 
                -92.1936 * getSMEFTCoeff("CuuR",0,1,1,0, 10000.) 
                -77180.4 * getSMEFTCoeff("CddR",0,0,0,0, 10000.) 
                -21587.4 * getSMEFTCoeff("CddR",0,1,1,0, 10000.) 
                -1509.08 * getSMEFTCoeff("CddR",1,1,1,1, 10000.) 
                -273.902 * getSMEFTCoeff("Cud1R",0,0,0,0, 10000.) 
                -128.661 * getSMEFTCoeff("Cud1R",0,0,1,1, 10000.) 
                -76957.8 * getSMEFTCoeff("Cud8R",0,0,0,0, 10000.) 
                -11521. * getSMEFTCoeff("Cud8R",0,0,1,1, 10000.) 
                +48.6947 * getSMEFTCoeff("Cud8R",1,1,0,0, 10000.) 
                -74.8927 * getSMEFTCoeff("Cqu1R",0,0,0,0, 10000.) 
                -194400. * getSMEFTCoeff("Cqu8R",0,0,0,0, 10000.) 
                -220.835 * getSMEFTCoeff("Cqu8R",0,0,1,1, 10000.) 
                -11492.7 * getSMEFTCoeff("Cqu8R",1,1,0,0, 10000.) 
                +203.061 * getSMEFTCoeff("Cqd1R",0,0,1,1, 10000.) 
                -221.815 * getSMEFTCoeff("Cqd1R",1,1,0,0, 10000.) 
                -103013. * getSMEFTCoeff("Cqd8R",0,0,0,0, 10000.) 
                -16847.2 * getSMEFTCoeff("Cqd8R",0,0,1,1, 10000.) 
                -5382.42 * getSMEFTCoeff("Cqd8R",1,1,0,0, 10000.) 
                -711.675 * getSMEFTCoeff("Cqd8R",1,1,1,1, 10000.) 
                +51.8425 * getSMEFTCoeff("Cqq1R",1,2,2,1, 10000.) 
                -42.3835 * getSMEFTCoeff("Cqd1R",2,2,1,1, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin10a0 * sigmaMx_Bin10a0/0.014/0.014; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin11a0 = 0.0, sigmaMx_Bin11a0 = 0.0; 
 
        sigmaSMMx_Bin11a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin11a0 = sigmaSMMx_Bin11a0 
                +3357.83 * getSMEFTCoeff("CG", 10000.) 
                -749156. * getSMEFTCoeff("Cqq1R",0,0,0,0, 10000.) 
                +222.025 * getSMEFTCoeff("Cqq1R",0,0,1,1, 10000.) 
                -23565.3 * getSMEFTCoeff("Cqq1R",0,1,1,0, 10000.) 
                -1313.27 * getSMEFTCoeff("Cqq1R",1,1,1,1, 10000.) 
                -1847207. * getSMEFTCoeff("Cqq3R",0,0,0,0, 10000.) 
                +461.605 * getSMEFTCoeff("Cqq3R",0,0,1,1, 10000.) 
                -142569. * getSMEFTCoeff("Cqq3R",0,1,1,0, 10000.) 
                -1285.64 * getSMEFTCoeff("Cqq3R",1,1,1,1, 10000.) 
                -634073. * getSMEFTCoeff("CuuR",0,0,0,0, 10000.) 
                -114126. * getSMEFTCoeff("CddR",0,0,0,0, 10000.) 
                +174.705 * getSMEFTCoeff("CddR",0,0,1,1, 10000.) 
                -23690.4 * getSMEFTCoeff("CddR",0,1,1,0, 10000.) 
                -1211.93 * getSMEFTCoeff("CddR",1,1,1,1, 10000.) 
                -288.417 * getSMEFTCoeff("Cud1R",0,0,1,1, 10000.) 
                +190.145 * getSMEFTCoeff("Cud1R",1,1,0,0, 10000.) 
                -137020. * getSMEFTCoeff("Cud8R",0,0,0,0, 10000.) 
                -14494.3 * getSMEFTCoeff("Cud8R",0,0,1,1, 10000.) 
                +213.039 * getSMEFTCoeff("Cud8R",1,1,0,0, 10000.) 
                +88.6778 * getSMEFTCoeff("Cud8R",1,1,1,1, 10000.) 
                +107.979 * getSMEFTCoeff("Cqu1R",0,0,0,0, 10000.) 
                +164.331 * getSMEFTCoeff("Cqu1R",1,1,0,0, 10000.) 
                +82.7577 * getSMEFTCoeff("Cqu1R",1,1,1,1, 10000.) 
                -394306. * getSMEFTCoeff("Cqu8R",0,0,0,0, 10000.) 
                +294.595 * getSMEFTCoeff("Cqu8R",0,0,1,1, 10000.) 
                -14650.4 * getSMEFTCoeff("Cqu8R",1,1,0,0, 10000.) 
                +379.273 * getSMEFTCoeff("Cqd1R",0,0,0,0, 10000.) 
                -171300. * getSMEFTCoeff("Cqd8R",0,0,0,0, 10000.) 
                -20416.9 * getSMEFTCoeff("Cqd8R",0,0,1,1, 10000.) 
                -5936.05 * getSMEFTCoeff("Cqd8R",1,1,0,0, 10000.) 
                -600.189 * getSMEFTCoeff("Cqd8R",1,1,1,1, 10000.) 
                +71.6434 * getSMEFTCoeff("Cqq3R",1,1,2,2, 10000.) 
                +77.4172 * getSMEFTCoeff("CddR",1,2,2,1, 10000.) 
                +65.0114 * getSMEFTCoeff("Cqd8R",1,1,2,2, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin11a0 * sigmaMx_Bin11a0/0.014/0.014; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMx_Bin12a0 = 0.0, sigmaMx_Bin12a0 = 0.0; 
 
        sigmaSMMx_Bin12a0 = 0.; //Only NP contribution 
 
        sigmaMx_Bin12a0 = sigmaSMMx_Bin12a0 
                -1991797. * getSMEFTCoeff("Cqq1R",0,0,0,0, 10000.) 
                -32861.5 * getSMEFTCoeff("Cqq1R",0,1,1,0, 10000.) 
                -4448913. * getSMEFTCoeff("Cqq3R",0,0,0,0, 10000.) 
                -236830. * getSMEFTCoeff("Cqq3R",0,1,1,0, 10000.) 
                -1787040. * getSMEFTCoeff("CuuR",0,0,0,0, 10000.) 
                -202153. * getSMEFTCoeff("CddR",0,0,0,0, 10000.) 
                -33059.1 * getSMEFTCoeff("CddR",0,1,1,0, 10000.) 
                -304968. * getSMEFTCoeff("Cud8R",0,0,0,0, 10000.) 
                -24176.4 * getSMEFTCoeff("Cud8R",0,0,1,1, 10000.) 
                -1043931. * getSMEFTCoeff("Cqu8R",0,0,0,0, 10000.) 
                -23500.9 * getSMEFTCoeff("Cqu8R",1,1,0,0, 10000.) 
                -359893. * getSMEFTCoeff("Cqd8R",0,0,0,0, 10000.) 
                -31996. * getSMEFTCoeff("Cqd8R",0,0,1,1, 10000.) 
                -8218.99 * getSMEFTCoeff("Cqd8R",1,1,0,0, 10000.) 
                ;
 
        dchi2Tot += sigmaMx_Bin12a0 * sigmaMx_Bin12a0/0.014/0.014; 
 
 
//----------------------------------------------------------- 
 
    return dchi2Tot; 
 
}


const double NPSMEFTd6General::chi2FCChhbbcc() const
{
    double dchi2Tot = 0.0;

    double delsigmaMx_Bin1a0bb = 0.0; 
 
        delsigmaMx_Bin1a0bb = 0.0 
                +89.4114 * getSMEFTCoeff("Cqq1R",0,0,2,2, 1000.) 
                +54323.7 * getSMEFTCoeff("Cqq1R",0,2,2,0, 1000.) 
                +11566. * getSMEFTCoeff("Cqq1R",1,2,2,1, 1000.) 
                +213132. * getSMEFTCoeff("Cqq3R",0,2,2,0, 1000.) 
                +29321.5 * getSMEFTCoeff("Cqq3R",1,2,2,1, 1000.) 
                +54323.1 * getSMEFTCoeff("CddR",0,2,2,0, 1000.) 
                +11532. * getSMEFTCoeff("CddR",1,2,2,1, 1000.) 
                -159.428 * getSMEFTCoeff("Cud1R",0,0,2,2, 1000.) 
                +19834.1 * getSMEFTCoeff("Cud8R",0,0,2,2, 1000.) 
                +2262.13 * getSMEFTCoeff("Cud8R",1,1,2,2, 1000.) 
                +19784.5 * getSMEFTCoeff("Cqu8R",2,2,0,0, 1000.) 
                +2218.62 * getSMEFTCoeff("Cqu8R",2,2,1,1, 1000.) 
                +131.118 * getSMEFTCoeff("Cqd1R",0,0,2,2, 1000.) 
                +33347.9 * getSMEFTCoeff("Cqd8R",0,0,2,2, 1000.) 
                +5143.35 * getSMEFTCoeff("Cqd8R",1,1,2,2, 1000.) 
                +13592.1 * getSMEFTCoeff("Cqd8R",2,2,0,0, 1000.) 
                +2856.66 * getSMEFTCoeff("Cqd8R",2,2,1,1, 1000.) 
                -8351.7 * getSMEFTCoeff("Cqq1R",2,2,2,2, 1000.) 
                -8343.83 * getSMEFTCoeff("Cqq3R",2,2,2,2, 1000.) 
                -8381.12 * getSMEFTCoeff("CddR",2,2,2,2, 1000.) 
                -17312.9 * getSMEFTCoeff("Cqd8R",2,2,2,2, 1000.) 
                +1010.69 * getSMEFTCoeff("Cqq1R",0,1,1,0, 1000.) 
                -246.479 * getSMEFTCoeff("Cqq1R",1,1,1,1, 1000.) 
                +2235.23 * getSMEFTCoeff("Cqq3R",0,1,1,0, 1000.) 
                +87.693 * getSMEFTCoeff("Cqq3R",1,1,1,1, 1000.) 
                +1128.18 * getSMEFTCoeff("CuuR",0,1,1,0, 1000.) 
                -222.081 * getSMEFTCoeff("CuuR",1,1,1,1, 1000.) 
                +189.142 * getSMEFTCoeff("Cud8R",1,1,0,0, 1000.) 
                +476.08 * getSMEFTCoeff("Cqu8R",0,0,1,1, 1000.) 
                -414.238 * getSMEFTCoeff("Cqu8R",1,1,1,1, 1000.) 
                +161.447 * getSMEFTCoeff("Cqd8R",1,1,0,0, 1000.) 
                -304.855 * getSMEFTCoeff("Cqq1R",0,0,0,0, 1000.) 
                -901.499 * getSMEFTCoeff("Cqq3R",0,0,0,0, 1000.) 
                -184.584 * getSMEFTCoeff("CuuR",0,0,0,0, 1000.) 
                -123.392 * getSMEFTCoeff("CddR",0,0,0,0, 1000.) 
                -119.56 * getSMEFTCoeff("CddR",0,1,1,0, 1000.) 
                -159.194 * getSMEFTCoeff("Cqu8R",0,0,0,0, 1000.) 
                -134.143 * getSMEFTCoeff("Cqd8R",0,0,0,0, 1000.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin1a0bb * delsigmaMx_Bin1a0bb/0.022/0.022; 
 
    double delsigmaMx_Bin1a0cc = 0.0; 
 
        delsigmaMx_Bin1a0cc = 0.0 
                -237.969 * getSMEFTCoeff("CG", 1000.) 
                +1759.25 * getSMEFTCoeff("Cqq1R",0,2,2,0, 1000.) 
                +365.273 * getSMEFTCoeff("Cqq1R",1,2,2,1, 1000.) 
                +6915.33 * getSMEFTCoeff("Cqq3R",0,2,2,0, 1000.) 
                +7146.09 * getSMEFTCoeff("Cqq3R",1,2,2,1, 1000.) 
                +1761.92 * getSMEFTCoeff("CddR",0,2,2,0, 1000.) 
                +375.21 * getSMEFTCoeff("CddR",1,2,2,1, 1000.) 
                +632.58 * getSMEFTCoeff("Cud8R",0,0,2,2, 1000.) 
                +836.705 * getSMEFTCoeff("Cud8R",1,1,2,2, 1000.) 
                +637.525 * getSMEFTCoeff("Cqu8R",2,2,0,0, 1000.) 
                +864.548 * getSMEFTCoeff("Cqu8R",2,2,1,1, 1000.) 
                +1078.96 * getSMEFTCoeff("Cqd8R",0,0,2,2, 1000.) 
                +924.365 * getSMEFTCoeff("Cqd8R",1,1,2,2, 1000.) 
                +432.873 * getSMEFTCoeff("Cqd8R",2,2,0,0, 1000.) 
                +83.8523 * getSMEFTCoeff("Cqd8R",2,2,1,1, 1000.) 
                -270.063 * getSMEFTCoeff("Cqq1R",2,2,2,2, 1000.) 
                -269.808 * getSMEFTCoeff("Cqq3R",2,2,2,2, 1000.) 
                -271.014 * getSMEFTCoeff("CddR",2,2,2,2, 1000.) 
                -559.836 * getSMEFTCoeff("Cqd8R",2,2,2,2, 1000.) 
                +50014. * getSMEFTCoeff("Cqq1R",0,1,1,0, 1000.) 
                -10266.4 * getSMEFTCoeff("Cqq1R",1,1,1,1, 1000.) 
                -87.3459 * getSMEFTCoeff("Cqq3R",0,0,1,1, 1000.) 
                +117089. * getSMEFTCoeff("Cqq3R",0,1,1,0, 1000.) 
                +4755.97 * getSMEFTCoeff("Cqq3R",1,1,1,1, 1000.) 
                +51200.2 * getSMEFTCoeff("CuuR",0,1,1,0, 1000.) 
                -10011.2 * getSMEFTCoeff("CuuR",1,1,1,1, 1000.) 
                -86.3913 * getSMEFTCoeff("Cud1R",1,1,0,0, 1000.) 
                +8677.34 * getSMEFTCoeff("Cud8R",1,1,0,0, 1000.) 
                +1850.69 * getSMEFTCoeff("Cud8R",1,1,1,1, 1000.) 
                +21675.6 * getSMEFTCoeff("Cqu8R",0,0,1,1, 1000.) 
                -18738.9 * getSMEFTCoeff("Cqu8R",1,1,1,1, 1000.) 
                -94.3243 * getSMEFTCoeff("Cqd1R",1,1,0,0, 1000.) 
                +8463.13 * getSMEFTCoeff("Cqd8R",1,1,0,0, 1000.) 
                +1750.33 * getSMEFTCoeff("Cqd8R",1,1,1,1, 1000.) 
                -3066.89 * getSMEFTCoeff("Cqq1R",0,0,0,0, 1000.) 
                -9069.24 * getSMEFTCoeff("Cqq3R",0,0,0,0, 1000.) 
                -1856.94 * getSMEFTCoeff("CuuR",0,0,0,0, 1000.) 
                -1241.34 * getSMEFTCoeff("CddR",0,0,0,0, 1000.) 
                -1202.8 * getSMEFTCoeff("CddR",0,1,1,0, 1000.) 
                -262.944 * getSMEFTCoeff("CddR",1,1,1,1, 1000.) 
                -779.235 * getSMEFTCoeff("Cud8R",0,0,0,0, 1000.) 
                -469.079 * getSMEFTCoeff("Cud8R",0,0,1,1, 1000.) 
                -1601.52 * getSMEFTCoeff("Cqu8R",0,0,0,0, 1000.) 
                -468.935 * getSMEFTCoeff("Cqu8R",1,1,0,0, 1000.) 
                -1349.5 * getSMEFTCoeff("Cqd8R",0,0,0,0, 1000.) 
                -746.626 * getSMEFTCoeff("Cqd8R",0,0,1,1, 1000.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin1a0cc * delsigmaMx_Bin1a0cc/0.042/0.042; 
 
 
//----------------------------------------------------------- 
    double delsigmaMx_Bin2a0bb = 0.0; 
 
        delsigmaMx_Bin2a0bb = 0.0 
                -827.844 * getSMEFTCoeff("CG", 1500.) 
                -159.447 * getSMEFTCoeff("Cqq1R",0,0,2,2, 1500.) 
                +86247.7 * getSMEFTCoeff("Cqq1R",0,2,2,0, 1500.) 
                +15862.6 * getSMEFTCoeff("Cqq1R",1,2,2,1, 1500.) 
                -114.818 * getSMEFTCoeff("Cqq3R",0,0,2,2, 1500.) 
                +345042. * getSMEFTCoeff("Cqq3R",0,2,2,0, 1500.) 
                +39964.6 * getSMEFTCoeff("Cqq3R",1,2,2,1, 1500.) 
                -125.134 * getSMEFTCoeff("CddR",0,0,2,2, 1500.) 
                +86243.7 * getSMEFTCoeff("CddR",0,2,2,0, 1500.) 
                +15887. * getSMEFTCoeff("CddR",1,2,2,1, 1500.) 
                -129.843 * getSMEFTCoeff("Cud1R",0,0,2,2, 1500.) 
                +32153.8 * getSMEFTCoeff("Cud8R",0,0,2,2, 1500.) 
                +2983.79 * getSMEFTCoeff("Cud8R",1,1,2,2, 1500.) 
                -87.5156 * getSMEFTCoeff("Cqu1R",2,2,0,0, 1500.) 
                +32212.7 * getSMEFTCoeff("Cqu8R",2,2,0,0, 1500.) 
                +2980.07 * getSMEFTCoeff("Cqu8R",2,2,1,1, 1500.) 
                -144.184 * getSMEFTCoeff("Cqd1R",2,2,0,0, 1500.) 
                +53791.7 * getSMEFTCoeff("Cqd8R",0,0,2,2, 1500.) 
                +6960.43 * getSMEFTCoeff("Cqd8R",1,1,2,2, 1500.) 
                +21407. * getSMEFTCoeff("Cqd8R",2,2,0,0, 1500.) 
                +3958.23 * getSMEFTCoeff("Cqd8R",2,2,1,1, 1500.) 
                -19417. * getSMEFTCoeff("Cqq1R",2,2,2,2, 1500.) 
                -19412.5 * getSMEFTCoeff("Cqq3R",2,2,2,2, 1500.) 
                -19411.5 * getSMEFTCoeff("CddR",2,2,2,2, 1500.) 
                -25505.3 * getSMEFTCoeff("Cqd8R",2,2,2,2, 1500.) 
                +1627.6 * getSMEFTCoeff("Cqq1R",0,1,1,0, 1500.) 
                -569.166 * getSMEFTCoeff("Cqq1R",1,1,1,1, 1500.) 
                +3473.35 * getSMEFTCoeff("Cqq3R",0,1,1,0, 1500.) 
                -107.933 * getSMEFTCoeff("Cqq3R",1,1,1,1, 1500.) 
                +1847.95 * getSMEFTCoeff("CuuR",0,1,1,0, 1500.) 
                -527.652 * getSMEFTCoeff("CuuR",1,1,1,1, 1500.) 
                +300.389 * getSMEFTCoeff("Cud8R",1,1,0,0, 1500.) 
                +770.057 * getSMEFTCoeff("Cqu8R",0,0,1,1, 1500.) 
                -630.105 * getSMEFTCoeff("Cqu8R",1,1,1,1, 1500.) 
                +249.771 * getSMEFTCoeff("Cqd8R",1,1,0,0, 1500.) 
                -611.094 * getSMEFTCoeff("Cqq1R",0,0,0,0, 1500.) 
                -1825.61 * getSMEFTCoeff("Cqq3R",0,0,0,0, 1500.) 
                -379.516 * getSMEFTCoeff("CuuR",0,0,0,0, 1500.) 
                -236.504 * getSMEFTCoeff("CddR",0,0,0,0, 1500.) 
                -221.195 * getSMEFTCoeff("CddR",0,1,1,0, 1500.) 
                -150.81 * getSMEFTCoeff("Cud8R",0,0,0,0, 1500.) 
                -80.1247 * getSMEFTCoeff("Cud8R",0,0,1,1, 1500.) 
                -325.32 * getSMEFTCoeff("Cqu8R",0,0,0,0, 1500.) 
                -265.249 * getSMEFTCoeff("Cqd8R",0,0,0,0, 1500.) 
                -132.269 * getSMEFTCoeff("Cqd8R",0,0,1,1, 1500.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin2a0bb * delsigmaMx_Bin2a0bb/0.022/0.022; 
 
    double delsigmaMx_Bin2a0cc = 0.0; 
 
        delsigmaMx_Bin2a0cc = 0.0 
                -833.799 * getSMEFTCoeff("CG", 1500.) 
                +2571.5 * getSMEFTCoeff("Cqq1R",0,2,2,0, 1500.) 
                +463.948 * getSMEFTCoeff("Cqq1R",1,2,2,1, 1500.) 
                +10292.9 * getSMEFTCoeff("Cqq3R",0,2,2,0, 1500.) 
                +8726.09 * getSMEFTCoeff("Cqq3R",1,2,2,1, 1500.) 
                +2569.22 * getSMEFTCoeff("CddR",0,2,2,0, 1500.) 
                +475.893 * getSMEFTCoeff("CddR",1,2,2,1, 1500.) 
                +958.149 * getSMEFTCoeff("Cud8R",0,0,2,2, 1500.) 
                +1012.63 * getSMEFTCoeff("Cud8R",1,1,2,2, 1500.) 
                +956.721 * getSMEFTCoeff("Cqu8R",2,2,0,0, 1500.) 
                +1021.19 * getSMEFTCoeff("Cqu8R",2,2,1,1, 1500.) 
                +1598.6 * getSMEFTCoeff("Cqd8R",0,0,2,2, 1500.) 
                +1139.02 * getSMEFTCoeff("Cqd8R",1,1,2,2, 1500.) 
                +637.038 * getSMEFTCoeff("Cqd8R",2,2,0,0, 1500.) 
                +116.919 * getSMEFTCoeff("Cqd8R",2,2,1,1, 1500.) 
                -577.224 * getSMEFTCoeff("Cqq1R",2,2,2,2, 1500.) 
                -577.091 * getSMEFTCoeff("Cqq3R",2,2,2,2, 1500.) 
                -577.061 * getSMEFTCoeff("CddR",2,2,2,2, 1500.) 
                -758.215 * getSMEFTCoeff("Cqd8R",2,2,2,2, 1500.) 
                -102.575 * getSMEFTCoeff("Cqq1R",0,0,1,1, 1500.) 
                +74787. * getSMEFTCoeff("Cqq1R",0,1,1,0, 1500.) 
                -22296.6 * getSMEFTCoeff("Cqq1R",1,1,1,1, 1500.) 
                -112.721 * getSMEFTCoeff("Cqq3R",0,0,1,1, 1500.) 
                +171726. * getSMEFTCoeff("Cqq3R",0,1,1,0, 1500.) 
                -3299.64 * getSMEFTCoeff("Cqq3R",1,1,1,1, 1500.) 
                +76809.1 * getSMEFTCoeff("CuuR",0,1,1,0, 1500.) 
                -21944.9 * getSMEFTCoeff("CuuR",1,1,1,1, 1500.) 
                -101.621 * getSMEFTCoeff("Cud1R",1,1,0,0, 1500.) 
                +12685.7 * getSMEFTCoeff("Cud8R",1,1,0,0, 1500.) 
                +2342.01 * getSMEFTCoeff("Cud8R",1,1,1,1, 1500.) 
                -80.0865 * getSMEFTCoeff("Cqu1R",0,0,1,1, 1500.) 
                +32030.3 * getSMEFTCoeff("Cqu8R",0,0,1,1, 1500.) 
                -26243.4 * getSMEFTCoeff("Cqu8R",1,1,1,1, 1500.) 
                -145.473 * getSMEFTCoeff("Cqd1R",1,1,0,0, 1500.) 
                +12233.9 * getSMEFTCoeff("Cqd8R",1,1,0,0, 1500.) 
                +2162.73 * getSMEFTCoeff("Cqd8R",1,1,1,1, 1500.) 
                -5651.78 * getSMEFTCoeff("Cqq1R",0,0,0,0, 1500.) 
                -16884.4 * getSMEFTCoeff("Cqq3R",0,0,0,0, 1500.) 
                -3510. * getSMEFTCoeff("CuuR",0,0,0,0, 1500.) 
                -2187.33 * getSMEFTCoeff("CddR",0,0,0,0, 1500.) 
                -2045.75 * getSMEFTCoeff("CddR",0,1,1,0, 1500.) 
                -381.708 * getSMEFTCoeff("CddR",1,1,1,1, 1500.) 
                -1394.79 * getSMEFTCoeff("Cud8R",0,0,0,0, 1500.) 
                -741.043 * getSMEFTCoeff("Cud8R",0,0,1,1, 1500.) 
                -3008.76 * getSMEFTCoeff("Cqu8R",0,0,0,0, 1500.) 
                -721.949 * getSMEFTCoeff("Cqu8R",1,1,0,0, 1500.) 
                -2453.19 * getSMEFTCoeff("Cqd8R",0,0,0,0, 1500.) 
                -1223.31 * getSMEFTCoeff("Cqd8R",0,0,1,1, 1500.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin2a0cc * delsigmaMx_Bin2a0cc/0.042/0.042; 
 
 
//----------------------------------------------------------- 
    double delsigmaMx_Bin3a0bb = 0.0; 
 
        delsigmaMx_Bin3a0bb = 0.0 
                -245.838 * getSMEFTCoeff("CG", 1500.) 
                +160373. * getSMEFTCoeff("Cqq1R",0,2,2,0, 1500.) 
                +24303.8 * getSMEFTCoeff("Cqq1R",1,2,2,1, 1500.) 
                +656403. * getSMEFTCoeff("Cqq3R",0,2,2,0, 1500.) 
                +60312.8 * getSMEFTCoeff("Cqq3R",1,2,2,1, 1500.) 
                +160461. * getSMEFTCoeff("CddR",0,2,2,0, 1500.) 
                +24304.5 * getSMEFTCoeff("CddR",1,2,2,1, 1500.) 
                +61896.7 * getSMEFTCoeff("Cud8R",0,0,2,2, 1500.) 
                +4490.31 * getSMEFTCoeff("Cud8R",1,1,2,2, 1500.) 
                +61828.7 * getSMEFTCoeff("Cqu8R",2,2,0,0, 1500.) 
                +4483.11 * getSMEFTCoeff("Cqu8R",2,2,1,1, 1500.) 
                +102064. * getSMEFTCoeff("Cqd8R",0,0,2,2, 1500.) 
                +10576.1 * getSMEFTCoeff("Cqd8R",1,1,2,2, 1500.) 
                +40061. * getSMEFTCoeff("Cqd8R",2,2,0,0, 1500.) 
                +6054.75 * getSMEFTCoeff("Cqd8R",2,2,1,1, 1500.) 
                -43620.3 * getSMEFTCoeff("Cqq1R",2,2,2,2, 1500.) 
                -43606.9 * getSMEFTCoeff("Cqq3R",2,2,2,2, 1500.) 
                -43603.5 * getSMEFTCoeff("CddR",2,2,2,2, 1500.) 
                -43537.9 * getSMEFTCoeff("Cqd8R",2,2,2,2, 1500.) 
                +3065.32 * getSMEFTCoeff("Cqq1R",0,1,1,0, 1500.) 
                -1309.98 * getSMEFTCoeff("Cqq1R",1,1,1,1, 1500.) 
                +6237.52 * getSMEFTCoeff("Cqq3R",0,1,1,0, 1500.) 
                -605.915 * getSMEFTCoeff("Cqq3R",1,1,1,1, 1500.) 
                +3539.48 * getSMEFTCoeff("CuuR",0,1,1,0, 1500.) 
                -1229.21 * getSMEFTCoeff("CuuR",1,1,1,1, 1500.) 
                +577.447 * getSMEFTCoeff("Cud8R",1,1,0,0, 1500.) 
                +88.1336 * getSMEFTCoeff("Cud8R",1,1,1,1, 1500.) 
                +1460.12 * getSMEFTCoeff("Cqu8R",0,0,1,1, 1500.) 
                -1126.86 * getSMEFTCoeff("Cqu8R",1,1,1,1, 1500.) 
                +450.61 * getSMEFTCoeff("Cqd8R",1,1,0,0, 1500.) 
                -1556.21 * getSMEFTCoeff("Cqq1R",0,0,0,0, 1500.) 
                -4628.36 * getSMEFTCoeff("Cqq3R",0,0,0,0, 1500.) 
                -985.656 * getSMEFTCoeff("CuuR",0,0,0,0, 1500.) 
                -579.489 * getSMEFTCoeff("CddR",0,0,0,0, 1500.) 
                -476.375 * getSMEFTCoeff("CddR",0,1,1,0, 1500.) 
                -80.0193 * getSMEFTCoeff("CddR",1,1,1,1, 1500.) 
                -378.225 * getSMEFTCoeff("Cud8R",0,0,0,0, 1500.) 
                -182.12 * getSMEFTCoeff("Cud8R",0,0,1,1, 1500.) 
                -821.115 * getSMEFTCoeff("Cqu8R",0,0,0,0, 1500.) 
                -173.779 * getSMEFTCoeff("Cqu8R",1,1,0,0, 1500.) 
                -644.691 * getSMEFTCoeff("Cqd8R",0,0,0,0, 1500.) 
                -298.162 * getSMEFTCoeff("Cqd8R",0,0,1,1, 1500.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin3a0bb * delsigmaMx_Bin3a0bb/0.022/0.022; 
 
    double delsigmaMx_Bin3a0cc = 0.0; 
 
        delsigmaMx_Bin3a0cc = 0.0 
                -591.438 * getSMEFTCoeff("CG", 1500.) 
                +3993.72 * getSMEFTCoeff("Cqq1R",0,2,2,0, 1500.) 
                +622.797 * getSMEFTCoeff("Cqq1R",1,2,2,1, 1500.) 
                +16343.3 * getSMEFTCoeff("Cqq3R",0,2,2,0, 1500.) 
                +10632.6 * getSMEFTCoeff("Cqq3R",1,2,2,1, 1500.) 
                +4000.08 * getSMEFTCoeff("CddR",0,2,2,0, 1500.) 
                +611.097 * getSMEFTCoeff("CddR",1,2,2,1, 1500.) 
                +1543.19 * getSMEFTCoeff("Cud8R",0,0,2,2, 1500.) 
                +1246.72 * getSMEFTCoeff("Cud8R",1,1,2,2, 1500.) 
                +1536.27 * getSMEFTCoeff("Cqu8R",2,2,0,0, 1500.) 
                +1242.98 * getSMEFTCoeff("Cqu8R",2,2,1,1, 1500.) 
                +2535.75 * getSMEFTCoeff("Cqd8R",0,0,2,2, 1500.) 
                +1395.47 * getSMEFTCoeff("Cqd8R",1,1,2,2, 1500.) 
                +1000.68 * getSMEFTCoeff("Cqd8R",2,2,0,0, 1500.) 
                +152.343 * getSMEFTCoeff("Cqd8R",2,2,1,1, 1500.) 
                -1082.62 * getSMEFTCoeff("Cqq1R",2,2,2,2, 1500.) 
                -1082.29 * getSMEFTCoeff("Cqq3R",2,2,2,2, 1500.) 
                -1082.21 * getSMEFTCoeff("CddR",2,2,2,2, 1500.) 
                -1080.58 * getSMEFTCoeff("Cqd8R",2,2,2,2, 1500.) 
                +119311. * getSMEFTCoeff("Cqq1R",0,1,1,0, 1500.) 
                -43316.1 * getSMEFTCoeff("Cqq1R",1,1,1,1, 1500.) 
                +267787. * getSMEFTCoeff("Cqq3R",0,1,1,0, 1500.) 
                -19117.6 * getSMEFTCoeff("Cqq3R",1,1,1,1, 1500.) 
                +122956. * getSMEFTCoeff("CuuR",0,1,1,0, 1500.) 
                -42715.1 * getSMEFTCoeff("CuuR",1,1,1,1, 1500.) 
                +19953.5 * getSMEFTCoeff("Cud8R",1,1,0,0, 1500.) 
                +3027.61 * getSMEFTCoeff("Cud8R",1,1,1,1, 1500.) 
                +50684.8 * getSMEFTCoeff("Cqu8R",0,0,1,1, 1500.) 
                -39195. * getSMEFTCoeff("Cqu8R",1,1,1,1, 1500.) 
                +18985.4 * getSMEFTCoeff("Cqd8R",1,1,0,0, 1500.) 
                +2716.93 * getSMEFTCoeff("Cqd8R",1,1,1,1, 1500.) 
                -12016.4 * getSMEFTCoeff("Cqq1R",0,0,0,0, 1500.) 
                -35738.1 * getSMEFTCoeff("Cqq3R",0,0,0,0, 1500.) 
                -7610.79 * getSMEFTCoeff("CuuR",0,0,0,0, 1500.) 
                -4474.56 * getSMEFTCoeff("CddR",0,0,0,0, 1500.) 
                -3678.35 * getSMEFTCoeff("CddR",0,1,1,0, 1500.) 
                -617.873 * getSMEFTCoeff("CddR",1,1,1,1, 1500.) 
                -2920.49 * getSMEFTCoeff("Cud8R",0,0,0,0, 1500.) 
                -1406.25 * getSMEFTCoeff("Cud8R",0,0,1,1, 1500.) 
                -6340.28 * getSMEFTCoeff("Cqu8R",0,0,0,0, 1500.) 
                -1341.84 * getSMEFTCoeff("Cqu8R",1,1,0,0, 1500.) 
                -4978.01 * getSMEFTCoeff("Cqd8R",0,0,0,0, 1500.) 
                -2302.27 * getSMEFTCoeff("Cqd8R",0,0,1,1, 1500.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin3a0cc * delsigmaMx_Bin3a0cc/0.042/0.042; 
 
 
//----------------------------------------------------------- 
    double delsigmaMx_Bin4a0bb = 0.0; 
 
        delsigmaMx_Bin4a0bb = 0.0 
                +307964. * getSMEFTCoeff("Cqq1R",0,2,2,0, 3000.) 
                +37651.8 * getSMEFTCoeff("Cqq1R",1,2,2,1, 3000.) 
                +1285597. * getSMEFTCoeff("Cqq3R",0,2,2,0, 3000.) 
                +92031.1 * getSMEFTCoeff("Cqq3R",1,2,2,1, 3000.) 
                +308130. * getSMEFTCoeff("CddR",0,2,2,0, 3000.) 
                +37665.8 * getSMEFTCoeff("CddR",1,2,2,1, 3000.) 
                +122177. * getSMEFTCoeff("Cud8R",0,0,2,2, 3000.) 
                +6797.61 * getSMEFTCoeff("Cud8R",1,1,2,2, 3000.) 
                +122010. * getSMEFTCoeff("Cqu8R",2,2,0,0, 3000.) 
                +6795.33 * getSMEFTCoeff("Cqu8R",2,2,1,1, 3000.) 
                +199274. * getSMEFTCoeff("Cqd8R",0,0,2,2, 3000.) 
                +16233.2 * getSMEFTCoeff("Cqd8R",1,1,2,2, 3000.) 
                +77064.6 * getSMEFTCoeff("Cqd8R",2,2,0,0, 3000.) 
                +9422.5 * getSMEFTCoeff("Cqd8R",2,2,1,1, 3000.) 
                -88066.2 * getSMEFTCoeff("Cqq1R",2,2,2,2, 3000.) 
                -88061.1 * getSMEFTCoeff("Cqq3R",2,2,2,2, 3000.) 
                -88047. * getSMEFTCoeff("CddR",2,2,2,2, 3000.) 
                -74966.5 * getSMEFTCoeff("Cqd8R",2,2,2,2, 3000.) 
                +5929.29 * getSMEFTCoeff("Cqq1R",0,1,1,0, 3000.) 
                -2746.07 * getSMEFTCoeff("Cqq1R",1,1,1,1, 3000.) 
                +11469.1 * getSMEFTCoeff("Cqq3R",0,1,1,0, 3000.) 
                -1653.94 * getSMEFTCoeff("Cqq3R",1,1,1,1, 3000.) 
                +6977.6 * getSMEFTCoeff("CuuR",0,1,1,0, 3000.) 
                -2591.02 * getSMEFTCoeff("CuuR",1,1,1,1, 3000.) 
                +1108.34 * getSMEFTCoeff("Cud8R",1,1,0,0, 3000.) 
                +135.508 * getSMEFTCoeff("Cud8R",1,1,1,1, 3000.) 
                +2843.79 * getSMEFTCoeff("Cqu8R",0,0,1,1, 3000.) 
                -2043.44 * getSMEFTCoeff("Cqu8R",1,1,1,1, 3000.) 
                +818.645 * getSMEFTCoeff("Cqd8R",1,1,0,0, 3000.) 
                -4116.13 * getSMEFTCoeff("Cqq1R",0,0,0,0, 3000.) 
                -12145.8 * getSMEFTCoeff("Cqq3R",0,0,0,0, 3000.) 
                -2682.68 * getSMEFTCoeff("CuuR",0,0,0,0, 3000.) 
                -1449.66 * getSMEFTCoeff("CddR",0,0,0,0, 3000.) 
                -1057.44 * getSMEFTCoeff("CddR",0,1,1,0, 3000.) 
                -155.255 * getSMEFTCoeff("CddR",1,1,1,1, 3000.) 
                -1004.09 * getSMEFTCoeff("Cud8R",0,0,0,0, 3000.) 
                -416.758 * getSMEFTCoeff("Cud8R",0,0,1,1, 3000.) 
                -2163.3 * getSMEFTCoeff("Cqu8R",0,0,0,0, 3000.) 
                -414.57 * getSMEFTCoeff("Cqu8R",1,1,0,0, 3000.) 
                -1632.3 * getSMEFTCoeff("Cqd8R",0,0,0,0, 3000.) 
                -682.98 * getSMEFTCoeff("Cqd8R",0,0,1,1, 3000.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin4a0bb * delsigmaMx_Bin4a0bb/0.022/0.022; 
 
    double delsigmaMx_Bin4a0cc = 0.0; 
 
        delsigmaMx_Bin4a0cc = 0.0 
                -508.684 * getSMEFTCoeff("CG", 3000.) 
                +5875.59 * getSMEFTCoeff("Cqq1R",0,2,2,0, 3000.) 
                +726.648 * getSMEFTCoeff("Cqq1R",1,2,2,1, 3000.) 
                +24533.8 * getSMEFTCoeff("Cqq3R",0,2,2,0, 3000.) 
                +11987.3 * getSMEFTCoeff("Cqq3R",1,2,2,1, 3000.) 
                +5881.17 * getSMEFTCoeff("CddR",0,2,2,0, 3000.) 
                +727.72 * getSMEFTCoeff("CddR",1,2,2,1, 3000.) 
                +2334.61 * getSMEFTCoeff("Cud8R",0,0,2,2, 3000.) 
                +1410.15 * getSMEFTCoeff("Cud8R",1,1,2,2, 3000.) 
                +2329.22 * getSMEFTCoeff("Cqu8R",2,2,0,0, 3000.) 
                +1406.78 * getSMEFTCoeff("Cqu8R",2,2,1,1, 3000.) 
                +3795.02 * getSMEFTCoeff("Cqd8R",0,0,2,2, 3000.) 
                +1582.65 * getSMEFTCoeff("Cqd8R",1,1,2,2, 3000.) 
                +1470.92 * getSMEFTCoeff("Cqd8R",2,2,0,0, 3000.) 
                +184.156 * getSMEFTCoeff("Cqd8R",2,2,1,1, 3000.) 
                -1676.95 * getSMEFTCoeff("Cqq1R",2,2,2,2, 3000.) 
                -1676.85 * getSMEFTCoeff("Cqq3R",2,2,2,2, 3000.) 
                -1676.58 * getSMEFTCoeff("CddR",2,2,2,2, 3000.) 
                -1427.51 * getSMEFTCoeff("Cqd8R",2,2,2,2, 3000.) 
                +179900. * getSMEFTCoeff("Cqq1R",0,1,1,0, 3000.) 
                -69934.9 * getSMEFTCoeff("Cqq1R",1,1,1,1, 3000.) 
                +395198. * getSMEFTCoeff("Cqq3R",0,1,1,0, 3000.) 
                -41168.5 * getSMEFTCoeff("Cqq3R",1,1,1,1, 3000.) 
                +186042. * getSMEFTCoeff("CuuR",0,1,1,0, 3000.) 
                -69018.8 * getSMEFTCoeff("CuuR",1,1,1,1, 3000.) 
                +29362.3 * getSMEFTCoeff("Cud8R",1,1,0,0, 3000.) 
                +3598.74 * getSMEFTCoeff("Cud8R",1,1,1,1, 3000.) 
                +75855.8 * getSMEFTCoeff("Cqu8R",0,0,1,1, 3000.) 
                -54498.8 * getSMEFTCoeff("Cqu8R",1,1,1,1, 3000.) 
                +27658.8 * getSMEFTCoeff("Cqd8R",1,1,0,0, 3000.) 
                +3149.19 * getSMEFTCoeff("Cqd8R",1,1,1,1, 3000.) 
                -24384.6 * getSMEFTCoeff("Cqq1R",0,0,0,0, 3000.) 
                -71953.6 * getSMEFTCoeff("Cqq3R",0,0,0,0, 3000.) 
                -15892.6 * getSMEFTCoeff("CuuR",0,0,0,0, 3000.) 
                -8588.01 * getSMEFTCoeff("CddR",0,0,0,0, 3000.) 
                -6264.42 * getSMEFTCoeff("CddR",0,1,1,0, 3000.) 
                -919.752 * getSMEFTCoeff("CddR",1,1,1,1, 3000.) 
                -5948.37 * getSMEFTCoeff("Cud8R",0,0,0,0, 3000.) 
                -2468.93 * getSMEFTCoeff("Cud8R",0,0,1,1, 3000.) 
                -12815.7 * getSMEFTCoeff("Cqu8R",0,0,0,0, 3000.) 
                -2455.98 * getSMEFTCoeff("Cqu8R",1,1,0,0, 3000.) 
                -9669.98 * getSMEFTCoeff("Cqd8R",0,0,0,0, 3000.) 
                -4046.08 * getSMEFTCoeff("Cqd8R",0,0,1,1, 3000.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin4a0cc * delsigmaMx_Bin4a0cc/0.042/0.042; 
 
 
//----------------------------------------------------------- 
    double delsigmaMx_Bin5a0bb = 0.0; 
 
        delsigmaMx_Bin5a0bb = 0.0 
                +181.019 * getSMEFTCoeff("CG", 3000.) 
                +582613. * getSMEFTCoeff("Cqq1R",0,2,2,0, 3000.) 
                +56053.1 * getSMEFTCoeff("Cqq1R",1,2,2,1, 3000.) 
                +2475389. * getSMEFTCoeff("Cqq3R",0,2,2,0, 3000.) 
                +134419. * getSMEFTCoeff("Cqq3R",1,2,2,1, 3000.) 
                +582689. * getSMEFTCoeff("CddR",0,2,2,0, 3000.) 
                +56079.5 * getSMEFTCoeff("CddR",1,2,2,1, 3000.) 
                +236426. * getSMEFTCoeff("Cud8R",0,0,2,2, 3000.) 
                +9803.21 * getSMEFTCoeff("Cud8R",1,1,2,2, 3000.) 
                +236567. * getSMEFTCoeff("Cqu8R",2,2,0,0, 3000.) 
                +9790.56 * getSMEFTCoeff("Cqu8R",2,2,1,1, 3000.) 
                +382126. * getSMEFTCoeff("Cqd8R",0,0,2,2, 3000.) 
                +23811. * getSMEFTCoeff("Cqd8R",1,1,2,2, 3000.) 
                +145621. * getSMEFTCoeff("Cqd8R",2,2,0,0, 3000.) 
                +14023.1 * getSMEFTCoeff("Cqd8R",2,2,1,1, 3000.) 
                -158472. * getSMEFTCoeff("Cqq1R",2,2,2,2, 3000.) 
                -158469. * getSMEFTCoeff("Cqq3R",2,2,2,2, 3000.) 
                -158428. * getSMEFTCoeff("CddR",2,2,2,2, 3000.) 
                -121362. * getSMEFTCoeff("Cqd8R",2,2,2,2, 3000.) 
                +11301.9 * getSMEFTCoeff("Cqq1R",0,1,1,0, 3000.) 
                -5189.91 * getSMEFTCoeff("Cqq1R",1,1,1,1, 3000.) 
                +20586.3 * getSMEFTCoeff("Cqq3R",0,1,1,0, 3000.) 
                -3570.35 * getSMEFTCoeff("Cqq3R",1,1,1,1, 3000.) 
                +13534. * getSMEFTCoeff("CuuR",0,1,1,0, 3000.) 
                -4913.76 * getSMEFTCoeff("CuuR",1,1,1,1, 3000.) 
                +2097.4 * getSMEFTCoeff("Cud8R",1,1,0,0, 3000.) 
                +202.848 * getSMEFTCoeff("Cud8R",1,1,1,1, 3000.) 
                +5474.52 * getSMEFTCoeff("Cqu8R",0,0,1,1, 3000.) 
                -3505.33 * getSMEFTCoeff("Cqu8R",1,1,1,1, 3000.) 
                +1520.22 * getSMEFTCoeff("Cqd8R",1,1,0,0, 3000.) 
                -11298.7 * getSMEFTCoeff("Cqq1R",0,0,0,0, 3000.) 
                -32967.6 * getSMEFTCoeff("Cqq3R",0,0,0,0, 3000.) 
                -7633.48 * getSMEFTCoeff("CuuR",0,0,0,0, 3000.) 
                -3644.76 * getSMEFTCoeff("CddR",0,0,0,0, 3000.) 
                -2224.06 * getSMEFTCoeff("CddR",0,1,1,0, 3000.) 
                -276.906 * getSMEFTCoeff("CddR",1,1,1,1, 3000.) 
                -2694.79 * getSMEFTCoeff("Cud8R",0,0,0,0, 3000.) 
                -909.664 * getSMEFTCoeff("Cud8R",0,0,1,1, 3000.) 
                -5860.32 * getSMEFTCoeff("Cqu8R",0,0,0,0, 3000.) 
                -925.974 * getSMEFTCoeff("Cqu8R",1,1,0,0, 3000.) 
                -4202.22 * getSMEFTCoeff("Cqd8R",0,0,0,0, 3000.) 
                -1482.01 * getSMEFTCoeff("Cqd8R",0,0,1,1, 3000.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin5a0bb * delsigmaMx_Bin5a0bb/0.022/0.022; 
 
    double delsigmaMx_Bin5a0cc = 0.0; 
 
        delsigmaMx_Bin5a0cc = 0.0 
                +435.885 * getSMEFTCoeff("CG", 3000.) 
                +8022.66 * getSMEFTCoeff("Cqq1R",0,2,2,0, 3000.) 
                +784.915 * getSMEFTCoeff("Cqq1R",1,2,2,1, 3000.) 
                +34091.9 * getSMEFTCoeff("Cqq3R",0,2,2,0, 3000.) 
                +12061.1 * getSMEFTCoeff("Cqq3R",1,2,2,1, 3000.) 
                +8035.13 * getSMEFTCoeff("CddR",0,2,2,0, 3000.) 
                +792.116 * getSMEFTCoeff("CddR",1,2,2,1, 3000.) 
                +3273.53 * getSMEFTCoeff("Cud8R",0,0,2,2, 3000.) 
                +1407.14 * getSMEFTCoeff("Cud8R",1,1,2,2, 3000.) 
                +3257.57 * getSMEFTCoeff("Cqu8R",2,2,0,0, 3000.) 
                +1406.32 * getSMEFTCoeff("Cqu8R",2,2,1,1, 3000.) 
                +5261.73 * getSMEFTCoeff("Cqd8R",0,0,2,2, 3000.) 
                +1614.06 * getSMEFTCoeff("Cqd8R",1,1,2,2, 3000.) 
                +2011.37 * getSMEFTCoeff("Cqd8R",2,2,0,0, 3000.) 
                +196.739 * getSMEFTCoeff("Cqd8R",2,2,1,1, 3000.) 
                -2178.2 * getSMEFTCoeff("Cqq1R",2,2,2,2, 3000.) 
                -2178.15 * getSMEFTCoeff("Cqq3R",2,2,2,2, 3000.) 
                -2177.58 * getSMEFTCoeff("CddR",2,2,2,2, 3000.) 
                -1668.12 * getSMEFTCoeff("Cqd8R",2,2,2,2, 3000.) 
                +250618. * getSMEFTCoeff("Cqq1R",0,1,1,0, 3000.) 
                -95676. * getSMEFTCoeff("Cqq1R",1,1,1,1, 3000.) 
                +539514. * getSMEFTCoeff("Cqq3R",0,1,1,0, 3000.) 
                -64802.6 * getSMEFTCoeff("Cqq3R",1,1,1,1, 3000.) 
                +260158. * getSMEFTCoeff("CuuR",0,1,1,0, 3000.) 
                -94538.3 * getSMEFTCoeff("CuuR",1,1,1,1, 3000.) 
                +40091.3 * getSMEFTCoeff("Cud8R",1,1,0,0, 3000.) 
                +3866.12 * getSMEFTCoeff("Cud8R",1,1,1,1, 3000.) 
                +105142. * getSMEFTCoeff("Cqu8R",0,0,1,1, 3000.) 
                -67560.5 * getSMEFTCoeff("Cqu8R",1,1,1,1, 3000.) 
                +37640.3 * getSMEFTCoeff("Cqd8R",1,1,0,0, 3000.) 
                +3287.62 * getSMEFTCoeff("Cqd8R",1,1,1,1, 3000.) 
                -48315.6 * getSMEFTCoeff("Cqq1R",0,0,0,0, 3000.) 
                -140976. * getSMEFTCoeff("Cqq3R",0,0,0,0, 3000.) 
                -32642.4 * getSMEFTCoeff("CuuR",0,0,0,0, 3000.) 
                -15585.8 * getSMEFTCoeff("CddR",0,0,0,0, 3000.) 
                -9510.53 * getSMEFTCoeff("CddR",0,1,1,0, 3000.) 
                -1184.11 * getSMEFTCoeff("CddR",1,1,1,1, 3000.) 
                -11523.5 * getSMEFTCoeff("Cud8R",0,0,0,0, 3000.) 
                -3889.91 * getSMEFTCoeff("Cud8R",0,0,1,1, 3000.) 
                -25060. * getSMEFTCoeff("Cqu8R",0,0,0,0, 3000.) 
                -3959.66 * getSMEFTCoeff("Cqu8R",1,1,0,0, 3000.) 
                +91.1532 * getSMEFTCoeff("Cqd1R",0,0,0,0, 3000.) 
                -17969.6 * getSMEFTCoeff("Cqd8R",0,0,0,0, 3000.) 
                -6337.39 * getSMEFTCoeff("Cqd8R",0,0,1,1, 3000.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin5a0cc * delsigmaMx_Bin5a0cc/0.042/0.042; 
 
 
//----------------------------------------------------------- 
    double delsigmaMx_Bin6a0bb = 0.0; 
 
        delsigmaMx_Bin6a0bb = 0.0 
                +114.218 * getSMEFTCoeff("CG", 5000.) 
                +1121235. * getSMEFTCoeff("Cqq1R",0,2,2,0, 5000.) 
                +81826.1 * getSMEFTCoeff("Cqq1R",1,2,2,1, 5000.) 
                +4851981. * getSMEFTCoeff("Cqq3R",0,2,2,0, 5000.) 
                +191150. * getSMEFTCoeff("Cqq3R",1,2,2,1, 5000.) 
                +1121183. * getSMEFTCoeff("CddR",0,2,2,0, 5000.) 
                +81846.2 * getSMEFTCoeff("CddR",1,2,2,1, 5000.) 
                +466096. * getSMEFTCoeff("Cud8R",0,0,2,2, 5000.) 
                +13682.5 * getSMEFTCoeff("Cud8R",1,1,2,2, 5000.) 
                +466122. * getSMEFTCoeff("Cqu8R",2,2,0,0, 5000.) 
                +13667.1 * getSMEFTCoeff("Cqu8R",2,2,1,1, 5000.) 
                +79.5896 * getSMEFTCoeff("Cqd1R",0,0,2,2, 5000.) 
                +746671. * getSMEFTCoeff("Cqd8R",0,0,2,2, 5000.) 
                +34139.7 * getSMEFTCoeff("Cqd8R",1,1,2,2, 5000.) 
                +280381. * getSMEFTCoeff("Cqd8R",2,2,0,0, 5000.) 
                +20453.5 * getSMEFTCoeff("Cqd8R",2,2,1,1, 5000.) 
                -268919. * getSMEFTCoeff("Cqq1R",2,2,2,2, 5000.) 
                -268897. * getSMEFTCoeff("Cqq3R",2,2,2,2, 5000.) 
                -268940. * getSMEFTCoeff("CddR",2,2,2,2, 5000.) 
                -189272. * getSMEFTCoeff("Cqd8R",2,2,2,2, 5000.) 
                +21828.5 * getSMEFTCoeff("Cqq1R",0,1,1,0, 5000.) 
                -9438.41 * getSMEFTCoeff("Cqq1R",1,1,1,1, 5000.) 
                +36855.2 * getSMEFTCoeff("Cqq3R",0,1,1,0, 5000.) 
                -7063.61 * getSMEFTCoeff("Cqq3R",1,1,1,1, 5000.) 
                +26643.3 * getSMEFTCoeff("CuuR",0,1,1,0, 5000.) 
                -8925.36 * getSMEFTCoeff("CuuR",1,1,1,1, 5000.) 
                +4004.6 * getSMEFTCoeff("Cud8R",1,1,0,0, 5000.) 
                +294.794 * getSMEFTCoeff("Cud8R",1,1,1,1, 5000.) 
                +10652.2 * getSMEFTCoeff("Cqu8R",0,0,1,1, 5000.) 
                -5904.81 * getSMEFTCoeff("Cqu8R",1,1,1,1, 5000.) 
                +2775.93 * getSMEFTCoeff("Cqd8R",1,1,0,0, 5000.) 
                -33342.6 * getSMEFTCoeff("Cqq1R",0,0,0,0, 5000.) 
                -95524.7 * getSMEFTCoeff("Cqq3R",0,0,0,0, 5000.) 
                -23554.3 * getSMEFTCoeff("CuuR",0,0,0,0, 5000.) 
                -9802.89 * getSMEFTCoeff("CddR",0,0,0,0, 5000.) 
                -4851.04 * getSMEFTCoeff("CddR",0,1,1,0, 5000.) 
                -508.511 * getSMEFTCoeff("CddR",1,1,1,1, 5000.) 
                -7768.97 * getSMEFTCoeff("Cud8R",0,0,0,0, 5000.) 
                -2144.75 * getSMEFTCoeff("Cud8R",0,0,1,1, 5000.) 
                -17275.1 * getSMEFTCoeff("Cqu8R",0,0,0,0, 5000.) 
                -2137.4 * getSMEFTCoeff("Cqu8R",1,1,0,0, 5000.) 
                -11574.8 * getSMEFTCoeff("Cqd8R",0,0,0,0, 5000.) 
                -3393.5 * getSMEFTCoeff("Cqd8R",0,0,1,1, 5000.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin6a0bb * delsigmaMx_Bin6a0bb/0.022/0.022; 
 
    double delsigmaMx_Bin6a0cc = 0.0; 
 
        delsigmaMx_Bin6a0cc = 0.0 
                -547.338 * getSMEFTCoeff("CG", 5000.) 
                +10245.6 * getSMEFTCoeff("Cqq1R",0,2,2,0, 5000.) 
                +761.248 * getSMEFTCoeff("Cqq1R",1,2,2,1, 5000.) 
                +44332. * getSMEFTCoeff("Cqq3R",0,2,2,0, 5000.) 
                +10640.4 * getSMEFTCoeff("Cqq3R",1,2,2,1, 5000.) 
                +10258.1 * getSMEFTCoeff("CddR",0,2,2,0, 5000.) 
                +757.498 * getSMEFTCoeff("CddR",1,2,2,1, 5000.) 
                +4236.9 * getSMEFTCoeff("Cud8R",0,0,2,2, 5000.) 
                +1234.52 * getSMEFTCoeff("Cud8R",1,1,2,2, 5000.) 
                +4258.46 * getSMEFTCoeff("Cqu8R",2,2,0,0, 5000.) 
                +1234.24 * getSMEFTCoeff("Cqu8R",2,2,1,1, 5000.) 
                +6829.95 * getSMEFTCoeff("Cqd8R",0,0,2,2, 5000.) 
                +1406.66 * getSMEFTCoeff("Cqd8R",1,1,2,2, 5000.) 
                +2566.85 * getSMEFTCoeff("Cqd8R",2,2,0,0, 5000.) 
                +176.097 * getSMEFTCoeff("Cqd8R",2,2,1,1, 5000.) 
                -2455.59 * getSMEFTCoeff("Cqq1R",2,2,2,2, 5000.) 
                -2455.39 * getSMEFTCoeff("Cqq3R",2,2,2,2, 5000.) 
                -2455.78 * getSMEFTCoeff("CddR",2,2,2,2, 5000.) 
                -1728.31 * getSMEFTCoeff("Cqd8R",2,2,2,2, 5000.) 
                +326831. * getSMEFTCoeff("Cqq1R",0,1,1,0, 5000.) 
                -115474. * getSMEFTCoeff("Cqq1R",1,1,1,1, 5000.) 
                +687774. * getSMEFTCoeff("Cqq3R",0,1,1,0, 5000.) 
                -85513.5 * getSMEFTCoeff("Cqq3R",1,1,1,1, 5000.) 
                +340582. * getSMEFTCoeff("CuuR",0,1,1,0, 5000.) 
                -114057. * getSMEFTCoeff("CuuR",1,1,1,1, 5000.) 
                +51159.1 * getSMEFTCoeff("Cud8R",1,1,0,0, 5000.) 
                +3744.69 * getSMEFTCoeff("Cud8R",1,1,1,1, 5000.) 
                +136245. * getSMEFTCoeff("Cqu8R",0,0,1,1, 5000.) 
                -75475.9 * getSMEFTCoeff("Cqu8R",1,1,1,1, 5000.) 
                +47690.2 * getSMEFTCoeff("Cqd8R",1,1,0,0, 5000.) 
                +3034.99 * getSMEFTCoeff("Cqd8R",1,1,1,1, 5000.) 
                -94721.8 * getSMEFTCoeff("Cqq1R",0,0,0,0, 5000.) 
                -271373. * getSMEFTCoeff("Cqq3R",0,0,0,0, 5000.) 
                -66914.4 * getSMEFTCoeff("CuuR",0,0,0,0, 5000.) 
                -27848.7 * getSMEFTCoeff("CddR",0,0,0,0, 5000.) 
                -13781.1 * getSMEFTCoeff("CddR",0,1,1,0, 5000.) 
                -1444.61 * getSMEFTCoeff("CddR",1,1,1,1, 5000.) 
                -124.714 * getSMEFTCoeff("Cud1R",0,0,1,1, 5000.) 
                -22070.6 * getSMEFTCoeff("Cud8R",0,0,0,0, 5000.) 
                -6092.94 * getSMEFTCoeff("Cud8R",0,0,1,1, 5000.) 
                +85.1685 * getSMEFTCoeff("Cqu1R",1,1,0,0, 5000.) 
                -49076.3 * getSMEFTCoeff("Cqu8R",0,0,0,0, 5000.) 
                -6072.07 * getSMEFTCoeff("Cqu8R",1,1,0,0, 5000.) 
                -32882.4 * getSMEFTCoeff("Cqd8R",0,0,0,0, 5000.) 
                -9640.47 * getSMEFTCoeff("Cqd8R",0,0,1,1, 5000.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin6a0cc * delsigmaMx_Bin6a0cc/0.042/0.042; 
 
 
//----------------------------------------------------------- 
    double delsigmaMx_Bin7a0bb = 0.0; 
 
        delsigmaMx_Bin7a0bb = 0.0 
                -746.948 * getSMEFTCoeff("CG", 5000.) 
                +1510492. * getSMEFTCoeff("Cqq1R",0,2,2,0, 5000.) 
                +94147.1 * getSMEFTCoeff("Cqq1R",1,2,2,1, 5000.) 
                -142.004 * getSMEFTCoeff("Cqq3R",0,0,2,2, 5000.) 
                +6623919. * getSMEFTCoeff("Cqq3R",0,2,2,0, 5000.) 
                +215801. * getSMEFTCoeff("Cqq3R",1,2,2,1, 5000.) 
                -98.2554 * getSMEFTCoeff("CddR",0,0,2,2, 5000.) 
                +1510426. * getSMEFTCoeff("CddR",0,2,2,0, 5000.) 
                +94165.7 * getSMEFTCoeff("CddR",1,2,2,1, 5000.) 
                +638803. * getSMEFTCoeff("Cud8R",0,0,2,2, 5000.) 
                +15201.2 * getSMEFTCoeff("Cud8R",1,1,2,2, 5000.) 
                +638884. * getSMEFTCoeff("Cqu8R",2,2,0,0, 5000.) 
                +15170.7 * getSMEFTCoeff("Cqu8R",2,2,1,1, 5000.) 
                +1016391. * getSMEFTCoeff("Cqd8R",0,0,2,2, 5000.) 
                +38737.2 * getSMEFTCoeff("Cqd8R",1,1,2,2, 5000.) 
                +377680. * getSMEFTCoeff("Cqd8R",2,2,0,0, 5000.) 
                +23540.8 * getSMEFTCoeff("Cqd8R",2,2,1,1, 5000.) 
                -326705. * getSMEFTCoeff("Cqq1R",2,2,2,2, 5000.) 
                -326625. * getSMEFTCoeff("Cqq3R",2,2,2,2, 5000.) 
                -326672. * getSMEFTCoeff("CddR",2,2,2,2, 5000.) 
                -221606. * getSMEFTCoeff("Cqd8R",2,2,2,2, 5000.) 
                +29690.7 * getSMEFTCoeff("Cqq1R",0,1,1,0, 5000.) 
                -12002.2 * getSMEFTCoeff("Cqq1R",1,1,1,1, 5000.) 
                +47203.5 * getSMEFTCoeff("Cqq3R",0,1,1,0, 5000.) 
                -9297.1 * getSMEFTCoeff("Cqq3R",1,1,1,1, 5000.) 
                +36549.6 * getSMEFTCoeff("CuuR",0,1,1,0, 5000.) 
                -11357.2 * getSMEFTCoeff("CuuR",1,1,1,1, 5000.) 
                +5371.91 * getSMEFTCoeff("Cud8R",1,1,0,0, 5000.) 
                +349.34 * getSMEFTCoeff("Cud8R",1,1,1,1, 5000.) 
                +14485. * getSMEFTCoeff("Cqu8R",0,0,1,1, 5000.) 
                -7268.31 * getSMEFTCoeff("Cqu8R",1,1,1,1, 5000.) 
                +3660.61 * getSMEFTCoeff("Cqd8R",1,1,0,0, 5000.) 
                -59731.9 * getSMEFTCoeff("Cqq1R",0,0,0,0, 5000.) 
                -168607. * getSMEFTCoeff("Cqq3R",0,0,0,0, 5000.) 
                -43418.5 * getSMEFTCoeff("CuuR",0,0,0,0, 5000.) 
                -16272.7 * getSMEFTCoeff("CddR",0,0,0,0, 5000.) 
                -6873.18 * getSMEFTCoeff("CddR",0,1,1,0, 5000.) 
                -638.723 * getSMEFTCoeff("CddR",1,1,1,1, 5000.) 
                -13648.6 * getSMEFTCoeff("Cud8R",0,0,0,0, 5000.) 
                -3233.92 * getSMEFTCoeff("Cud8R",0,0,1,1, 5000.) 
                -30958. * getSMEFTCoeff("Cqu8R",0,0,0,0, 5000.) 
                -3245.2 * getSMEFTCoeff("Cqu8R",1,1,0,0, 5000.) 
                -19675.4 * getSMEFTCoeff("Cqd8R",0,0,0,0, 5000.) 
                -4982.33 * getSMEFTCoeff("Cqd8R",0,0,1,1, 5000.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin7a0bb * delsigmaMx_Bin7a0bb/0.023/0.023; 
 
    double delsigmaMx_Bin7a0cc = 0.0; 
 
        delsigmaMx_Bin7a0cc = 0.0 
                -789.938 * getSMEFTCoeff("CG", 5000.) 
                +11163.6 * getSMEFTCoeff("Cqq1R",0,2,2,0, 5000.) 
                +718.591 * getSMEFTCoeff("Cqq1R",1,2,2,1, 5000.) 
                +48871.8 * getSMEFTCoeff("Cqq3R",0,2,2,0, 5000.) 
                +9284.79 * getSMEFTCoeff("Cqq3R",1,2,2,1, 5000.) 
                +11178.6 * getSMEFTCoeff("CddR",0,2,2,0, 5000.) 
                +699.093 * getSMEFTCoeff("CddR",1,2,2,1, 5000.) 
                +4722.29 * getSMEFTCoeff("Cud8R",0,0,2,2, 5000.) 
                +1070.82 * getSMEFTCoeff("Cud8R",1,1,2,2, 5000.) 
                +4718.14 * getSMEFTCoeff("Cqu8R",2,2,0,0, 5000.) 
                +1070.47 * getSMEFTCoeff("Cqu8R",2,2,1,1, 5000.) 
                +7495.74 * getSMEFTCoeff("Cqd8R",0,0,2,2, 5000.) 
                +1237.11 * getSMEFTCoeff("Cqd8R",1,1,2,2, 5000.) 
                +2783.01 * getSMEFTCoeff("Cqd8R",2,2,0,0, 5000.) 
                +162.223 * getSMEFTCoeff("Cqd8R",2,2,1,1, 5000.) 
                -2410. * getSMEFTCoeff("Cqq1R",2,2,2,2, 5000.) 
                -2409.41 * getSMEFTCoeff("Cqq3R",2,2,2,2, 5000.) 
                -2409.76 * getSMEFTCoeff("CddR",2,2,2,2, 5000.) 
                -1634.72 * getSMEFTCoeff("Cqd8R",2,2,2,2, 5000.) 
                +361433. * getSMEFTCoeff("Cqq1R",0,1,1,0, 5000.) 
                -118729. * getSMEFTCoeff("Cqq1R",1,1,1,1, 5000.) 
                +748118. * getSMEFTCoeff("Cqq3R",0,1,1,0, 5000.) 
                -90943.7 * getSMEFTCoeff("Cqq3R",1,1,1,1, 5000.) 
                +85.7671 * getSMEFTCoeff("CuuR",0,0,1,1, 5000.) 
                +377172. * getSMEFTCoeff("CuuR",0,1,1,0, 5000.) 
                -117269. * getSMEFTCoeff("CuuR",1,1,1,1, 5000.) 
                +55651.5 * getSMEFTCoeff("Cud8R",1,1,0,0, 5000.) 
                +3504.39 * getSMEFTCoeff("Cud8R",1,1,1,1, 5000.) 
                +149863. * getSMEFTCoeff("Cqu8R",0,0,1,1, 5000.) 
                -75095.3 * getSMEFTCoeff("Cqu8R",1,1,1,1, 5000.) 
                +85.2315 * getSMEFTCoeff("Cqd1R",1,1,0,0, 5000.) 
                +51690.7 * getSMEFTCoeff("Cqd8R",1,1,0,0, 5000.) 
                +2756.85 * getSMEFTCoeff("Cqd8R",1,1,1,1, 5000.) 
                -137083. * getSMEFTCoeff("Cqq1R",0,0,0,0, 5000.) 
                -386947. * getSMEFTCoeff("Cqq3R",0,0,0,0, 5000.) 
                -99644. * getSMEFTCoeff("CuuR",0,0,0,0, 5000.) 
                -37345.3 * getSMEFTCoeff("CddR",0,0,0,0, 5000.) 
                -15773.7 * getSMEFTCoeff("CddR",0,1,1,0, 5000.) 
                -1465.85 * getSMEFTCoeff("CddR",1,1,1,1, 5000.) 
                -31323. * getSMEFTCoeff("Cud8R",0,0,0,0, 5000.) 
                -7421.74 * getSMEFTCoeff("Cud8R",0,0,1,1, 5000.) 
                -71047.6 * getSMEFTCoeff("Cqu8R",0,0,0,0, 5000.) 
                -7447.63 * getSMEFTCoeff("Cqu8R",1,1,0,0, 5000.) 
                -45154.3 * getSMEFTCoeff("Cqd8R",0,0,0,0, 5000.) 
                -11434.3 * getSMEFTCoeff("Cqd8R",0,0,1,1, 5000.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin7a0cc * delsigmaMx_Bin7a0cc/0.042/0.042; 
 
 
//----------------------------------------------------------- 
    double delsigmaMx_Bin8a0bb = 0.0; 
 
        delsigmaMx_Bin8a0bb = 0.0 
                +82.0218 * getSMEFTCoeff("CG", 10000.) 
                +2029190. * getSMEFTCoeff("Cqq1R",0,2,2,0, 10000.) 
                +103825. * getSMEFTCoeff("Cqq1R",1,2,2,1, 10000.) 
                +9167794. * getSMEFTCoeff("Cqq3R",0,2,2,0, 10000.) 
                +230351. * getSMEFTCoeff("Cqq3R",1,2,2,1, 10000.) 
                +2029491. * getSMEFTCoeff("CddR",0,2,2,0, 10000.) 
                +103848. * getSMEFTCoeff("CddR",1,2,2,1, 10000.) 
                +891980. * getSMEFTCoeff("Cud8R",0,0,2,2, 10000.) 
                +15809.4 * getSMEFTCoeff("Cud8R",1,1,2,2, 10000.) 
                +891700. * getSMEFTCoeff("Cqu8R",2,2,0,0, 10000.) 
                +15791.4 * getSMEFTCoeff("Cqu8R",2,2,1,1, 10000.) 
                +1399034. * getSMEFTCoeff("Cqd8R",0,0,2,2, 10000.) 
                +41762.3 * getSMEFTCoeff("Cqd8R",1,1,2,2, 10000.) 
                +507316. * getSMEFTCoeff("Cqd8R",2,2,0,0, 10000.) 
                +25936.7 * getSMEFTCoeff("Cqd8R",2,2,1,1, 10000.) 
                -372221. * getSMEFTCoeff("Cqq1R",2,2,2,2, 10000.) 
                -372099. * getSMEFTCoeff("Cqq3R",2,2,2,2, 10000.) 
                -372064. * getSMEFTCoeff("CddR",2,2,2,2, 10000.) 
                -242560. * getSMEFTCoeff("Cqd8R",2,2,2,2, 10000.) 
                +40730.7 * getSMEFTCoeff("Cqq1R",0,1,1,0, 10000.) 
                -14767.6 * getSMEFTCoeff("Cqq1R",1,1,1,1, 10000.) 
                +58309. * getSMEFTCoeff("Cqq3R",0,1,1,0, 10000.) 
                -11793.8 * getSMEFTCoeff("Cqq3R",1,1,1,1, 10000.) 
                +50982.1 * getSMEFTCoeff("CuuR",0,1,1,0, 10000.) 
                -13951.6 * getSMEFTCoeff("CuuR",1,1,1,1, 10000.) 
                +7210.48 * getSMEFTCoeff("Cud8R",1,1,0,0, 10000.) 
                +372.235 * getSMEFTCoeff("Cud8R",1,1,1,1, 10000.) 
                +19940.8 * getSMEFTCoeff("Cqu8R",0,0,1,1, 10000.) 
                -8594.6 * getSMEFTCoeff("Cqu8R",1,1,1,1, 10000.) 
                +4556.44 * getSMEFTCoeff("Cqd8R",1,1,0,0, 10000.) 
                -124791. * getSMEFTCoeff("Cqq1R",0,0,0,0, 10000.) 
                -342595. * getSMEFTCoeff("Cqq3R",0,0,0,0, 10000.) 
                -94929.4 * getSMEFTCoeff("CuuR",0,0,0,0, 10000.) 
                -29866.6 * getSMEFTCoeff("CddR",0,0,0,0, 10000.) 
                -10234.2 * getSMEFTCoeff("CddR",0,1,1,0, 10000.) 
                -841.763 * getSMEFTCoeff("CddR",1,1,1,1, 10000.) 
                -27298.5 * getSMEFTCoeff("Cud8R",0,0,0,0, 10000.) 
                -5048.09 * getSMEFTCoeff("Cud8R",0,0,1,1, 10000.) 
                -64867. * getSMEFTCoeff("Cqu8R",0,0,0,0, 10000.) 
                -5064.93 * getSMEFTCoeff("Cqu8R",1,1,0,0, 10000.) 
                -104.62 * getSMEFTCoeff("Cqd1R",0,0,0,0, 10000.) 
                -37724.3 * getSMEFTCoeff("Cqd8R",0,0,0,0, 10000.) 
                -7654.51 * getSMEFTCoeff("Cqd8R",0,0,1,1, 10000.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin8a0bb * delsigmaMx_Bin8a0bb/0.023/0.023; 
 
    double delsigmaMx_Bin8a0cc = 0.0; 
 
        delsigmaMx_Bin8a0cc = 0.0 
                +367.688 * getSMEFTCoeff("CG", 10000.) 
                +11684.9 * getSMEFTCoeff("Cqq1R",0,2,2,0, 10000.) 
                +592.87 * getSMEFTCoeff("Cqq1R",1,2,2,1, 10000.) 
                +52764.2 * getSMEFTCoeff("Cqq3R",0,2,2,0, 10000.) 
                +7118.17 * getSMEFTCoeff("Cqq3R",1,2,2,1, 10000.) 
                +11651.8 * getSMEFTCoeff("CddR",0,2,2,0, 10000.) 
                +617.721 * getSMEFTCoeff("CddR",1,2,2,1, 10000.) 
                +5134.21 * getSMEFTCoeff("Cud8R",0,0,2,2, 10000.) 
                +816.36 * getSMEFTCoeff("Cud8R",1,1,2,2, 10000.) 
                +5122.28 * getSMEFTCoeff("Cqu8R",2,2,0,0, 10000.) 
                +816.144 * getSMEFTCoeff("Cqu8R",2,2,1,1, 10000.) 
                +8058.67 * getSMEFTCoeff("Cqd8R",0,0,2,2, 10000.) 
                +953.349 * getSMEFTCoeff("Cqd8R",1,1,2,2, 10000.) 
                +2914.35 * getSMEFTCoeff("Cqd8R",2,2,0,0, 10000.) 
                +131.589 * getSMEFTCoeff("Cqd8R",2,2,1,1, 10000.) 
                -2140.66 * getSMEFTCoeff("Cqq1R",2,2,2,2, 10000.) 
                -2139.95 * getSMEFTCoeff("Cqq3R",2,2,2,2, 10000.) 
                -2139.75 * getSMEFTCoeff("CddR",2,2,2,2, 10000.) 
                -1394.97 * getSMEFTCoeff("Cqd8R",2,2,2,2, 10000.) 
                -125.282 * getSMEFTCoeff("Cqq1R",0,0,1,1, 10000.) 
                +392014. * getSMEFTCoeff("Cqq1R",0,1,1,0, 10000.) 
                -113783. * getSMEFTCoeff("Cqq1R",1,1,1,1, 10000.) 
                +786704. * getSMEFTCoeff("Cqq3R",0,1,1,0, 10000.) 
                -89909.4 * getSMEFTCoeff("Cqq3R",1,1,1,1, 10000.) 
                -96.2439 * getSMEFTCoeff("CuuR",0,0,1,1, 10000.) 
                +410443. * getSMEFTCoeff("CuuR",0,1,1,0, 10000.) 
                -112329. * getSMEFTCoeff("CuuR",1,1,1,1, 10000.) 
                +58255. * getSMEFTCoeff("Cud8R",1,1,0,0, 10000.) 
                +2982.05 * getSMEFTCoeff("Cud8R",1,1,1,1, 10000.) 
                +160850. * getSMEFTCoeff("Cqu8R",0,0,1,1, 10000.) 
                -69244.9 * getSMEFTCoeff("Cqu8R",1,1,1,1, 10000.) 
                +53504.8 * getSMEFTCoeff("Cqd8R",1,1,0,0, 10000.) 
                +2257.24 * getSMEFTCoeff("Cqd8R",1,1,1,1, 10000.) 
                -223277. * getSMEFTCoeff("Cqq1R",0,0,0,0, 10000.) 
                -612974. * getSMEFTCoeff("Cqq3R",0,0,0,0, 10000.) 
                -169849. * getSMEFTCoeff("CuuR",0,0,0,0, 10000.) 
                -53437.6 * getSMEFTCoeff("CddR",0,0,0,0, 10000.) 
                -85.3491 * getSMEFTCoeff("CddR",0,0,1,1, 10000.) 
                -18311.2 * getSMEFTCoeff("CddR",0,1,1,0, 10000.) 
                -1506.09 * getSMEFTCoeff("CddR",1,1,1,1, 10000.) 
                -86.982 * getSMEFTCoeff("Cud1R",0,0,1,1, 10000.) 
                -48842.7 * getSMEFTCoeff("Cud8R",0,0,0,0, 10000.) 
                -9032.1 * getSMEFTCoeff("Cud8R",0,0,1,1, 10000.) 
                -116061. * getSMEFTCoeff("Cqu8R",0,0,0,0, 10000.) 
                -9062.23 * getSMEFTCoeff("Cqu8R",1,1,0,0, 10000.) 
                -187.187 * getSMEFTCoeff("Cqd1R",0,0,0,0, 10000.) 
                -88.8081 * getSMEFTCoeff("Cqd1R",0,0,1,1, 10000.) 
                -67496.7 * getSMEFTCoeff("Cqd8R",0,0,0,0, 10000.) 
                -13695.5 * getSMEFTCoeff("Cqd8R",0,0,1,1, 10000.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin8a0cc * delsigmaMx_Bin8a0cc/0.042/0.042; 
 
 
//----------------------------------------------------------- 
    double delsigmaMx_Bin9a0bb = 0.0; 
 
        delsigmaMx_Bin9a0bb = 0.0 
                +2526225. * getSMEFTCoeff("Cqq1R",0,2,2,0, 10000.) 
                +103584. * getSMEFTCoeff("Cqq1R",1,2,2,1, 10000.) 
                +12294193. * getSMEFTCoeff("Cqq3R",0,2,2,0, 10000.) 
                +214374. * getSMEFTCoeff("Cqq3R",1,2,2,1, 10000.) 
                +2526196. * getSMEFTCoeff("CddR",0,2,2,0, 10000.) 
                +103523. * getSMEFTCoeff("CddR",1,2,2,1, 10000.) 
                +1220271. * getSMEFTCoeff("Cud8R",0,0,2,2, 10000.) 
                +13847.5 * getSMEFTCoeff("Cud8R",1,1,2,2, 10000.) 
                +1220100. * getSMEFTCoeff("Cqu8R",2,2,0,0, 10000.) 
                +13834.3 * getSMEFTCoeff("Cqu8R",2,2,1,1, 10000.) 
                +1852028. * getSMEFTCoeff("Cqd8R",0,0,2,2, 10000.) 
                +39748.8 * getSMEFTCoeff("Cqd8R",1,1,2,2, 10000.) 
                +631681. * getSMEFTCoeff("Cqd8R",2,2,0,0, 10000.) 
                +25870.5 * getSMEFTCoeff("Cqd8R",2,2,1,1, 10000.) 
                -355001. * getSMEFTCoeff("Cqq1R",2,2,2,2, 10000.) 
                -354965. * getSMEFTCoeff("Cqq3R",2,2,2,2, 10000.) 
                -354927. * getSMEFTCoeff("CddR",2,2,2,2, 10000.) 
                -220897. * getSMEFTCoeff("Cqd8R",2,2,2,2, 10000.) 
                -121.403 * getSMEFTCoeff("Cqq1R",0,0,1,1, 10000.) 
                +54684.6 * getSMEFTCoeff("Cqq1R",0,1,1,0, 10000.) 
                -16142.6 * getSMEFTCoeff("Cqq1R",1,1,1,1, 10000.) 
                +60668.2 * getSMEFTCoeff("Cqq3R",0,1,1,0, 10000.) 
                -13180.5 * getSMEFTCoeff("Cqq3R",1,1,1,1, 10000.) 
                -199.019 * getSMEFTCoeff("CuuR",0,0,1,1, 10000.) 
                +69719. * getSMEFTCoeff("CuuR",0,1,1,0, 10000.) 
                -15174.3 * getSMEFTCoeff("CuuR",1,1,1,1, 10000.) 
                +9068.82 * getSMEFTCoeff("Cud8R",1,1,0,0, 10000.) 
                +368.251 * getSMEFTCoeff("Cud8R",1,1,1,1, 10000.) 
                +26498.8 * getSMEFTCoeff("Cqu8R",0,0,1,1, 10000.) 
                -8980.71 * getSMEFTCoeff("Cqu8R",1,1,1,1, 10000.) 
                -136.209 * getSMEFTCoeff("Cqd1R",1,1,0,0, 10000.) 
                +5172.55 * getSMEFTCoeff("Cqd8R",1,1,0,0, 10000.) 
                -116.539 * getSMEFTCoeff("Cqd8R",1,1,1,1, 10000.) 
                -295126. * getSMEFTCoeff("Cqq1R",0,0,0,0, 10000.) 
                -774071. * getSMEFTCoeff("Cqq3R",0,0,0,0, 10000.) 
                -237738. * getSMEFTCoeff("CuuR",0,0,0,0, 10000.) 
                -57744. * getSMEFTCoeff("CddR",0,0,0,0, 10000.) 
                -15068. * getSMEFTCoeff("CddR",0,1,1,0, 10000.) 
                -1001.4 * getSMEFTCoeff("CddR",1,1,1,1, 10000.) 
                -153.279 * getSMEFTCoeff("Cud1R",0,0,0,0, 10000.) 
                -102.895 * getSMEFTCoeff("Cud1R",0,0,1,1, 10000.) 
                -59709.7 * getSMEFTCoeff("Cud8R",0,0,0,0, 10000.) 
                -8324.83 * getSMEFTCoeff("Cud8R",0,0,1,1, 10000.) 
                -85.7503 * getSMEFTCoeff("Cqu1R",1,1,0,0, 10000.) 
                -154505. * getSMEFTCoeff("Cqu8R",0,0,0,0, 10000.) 
                -8321.85 * getSMEFTCoeff("Cqu8R",1,1,0,0, 10000.) 
                +139.986 * getSMEFTCoeff("Cqd1R",0,0,1,1, 10000.) 
                -78786.2 * getSMEFTCoeff("Cqd8R",0,0,0,0, 10000.) 
                -12208.7 * getSMEFTCoeff("Cqd8R",0,0,1,1, 10000.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin9a0bb * delsigmaMx_Bin9a0bb/0.023/0.023; 
 
    double delsigmaMx_Bin9a0cc = 0.0; 
 
        delsigmaMx_Bin9a0cc = 0.0 
                +330.248 * getSMEFTCoeff("CG", 10000.) 
                +11144.7 * getSMEFTCoeff("Cqq1R",0,2,2,0, 10000.) 
                +456.864 * getSMEFTCoeff("Cqq1R",1,2,2,1, 10000.) 
                +54392.5 * getSMEFTCoeff("Cqq3R",0,2,2,0, 10000.) 
                +4377.22 * getSMEFTCoeff("Cqq3R",1,2,2,1, 10000.) 
                +11144.1 * getSMEFTCoeff("CddR",0,2,2,0, 10000.) 
                +447.11 * getSMEFTCoeff("CddR",1,2,2,1, 10000.) 
                +5380.35 * getSMEFTCoeff("Cud8R",0,0,2,2, 10000.) 
                +491.935 * getSMEFTCoeff("Cud8R",1,1,2,2, 10000.) 
                +5397.13 * getSMEFTCoeff("Cqu8R",2,2,0,0, 10000.) 
                +494.004 * getSMEFTCoeff("Cqu8R",2,2,1,1, 10000.) 
                +8191.67 * getSMEFTCoeff("Cqd8R",0,0,2,2, 10000.) 
                +630.422 * getSMEFTCoeff("Cqd8R",1,1,2,2, 10000.) 
                +2797.81 * getSMEFTCoeff("Cqd8R",2,2,0,0, 10000.) 
                +102.628 * getSMEFTCoeff("Cqd8R",2,2,1,1, 10000.) 
                -1570.18 * getSMEFTCoeff("Cqq1R",2,2,2,2, 10000.) 
                -1570.03 * getSMEFTCoeff("Cqq3R",2,2,2,2, 10000.) 
                -1569.86 * getSMEFTCoeff("CddR",2,2,2,2, 10000.) 
                -977.037 * getSMEFTCoeff("Cqd8R",2,2,2,2, 10000.) 
                -161.576 * getSMEFTCoeff("Cqq1R",0,0,1,1, 10000.) 
                +411071. * getSMEFTCoeff("Cqq1R",0,1,1,0, 10000.) 
                -95279.4 * getSMEFTCoeff("Cqq1R",1,1,1,1, 10000.) 
                +767087. * getSMEFTCoeff("Cqq3R",0,1,1,0, 10000.) 
                -76989.3 * getSMEFTCoeff("Cqq3R",1,1,1,1, 10000.) 
                -267.303 * getSMEFTCoeff("CuuR",0,0,1,1, 10000.) 
                +431861. * getSMEFTCoeff("CuuR",0,1,1,0, 10000.) 
                -93954.1 * getSMEFTCoeff("CuuR",1,1,1,1, 10000.) 
                +55892.1 * getSMEFTCoeff("Cud8R",1,1,0,0, 10000.) 
                +2283.07 * getSMEFTCoeff("Cud8R",1,1,1,1, 10000.) 
                +104.033 * getSMEFTCoeff("Cqu1R",0,0,1,1, 10000.) 
                +163862. * getSMEFTCoeff("Cqu8R",0,0,1,1, 10000.) 
                -55522.4 * getSMEFTCoeff("Cqu8R",1,1,1,1, 10000.) 
                -186.318 * getSMEFTCoeff("Cqd1R",1,1,0,0, 10000.) 
                +50570.7 * getSMEFTCoeff("Cqd8R",1,1,0,0, 10000.) 
                +1616.16 * getSMEFTCoeff("Cqd8R",1,1,1,1, 10000.) 
                -406111. * getSMEFTCoeff("Cqq1R",0,0,0,0, 10000.) 
                -1065168. * getSMEFTCoeff("Cqq3R",0,0,0,0, 10000.) 
                -327141. * getSMEFTCoeff("CuuR",0,0,0,0, 10000.) 
                -79459.3 * getSMEFTCoeff("CddR",0,0,0,0, 10000.) 
                -20734.5 * getSMEFTCoeff("CddR",0,1,1,0, 10000.) 
                -1377.99 * getSMEFTCoeff("CddR",1,1,1,1, 10000.) 
                -210.922 * getSMEFTCoeff("Cud1R",0,0,0,0, 10000.) 
                -141.59 * getSMEFTCoeff("Cud1R",0,0,1,1, 10000.) 
                -82164.1 * getSMEFTCoeff("Cud8R",0,0,0,0, 10000.) 
                -11455.5 * getSMEFTCoeff("Cud8R",0,0,1,1, 10000.) 
                -117.998 * getSMEFTCoeff("Cqu1R",1,1,0,0, 10000.) 
                -212608. * getSMEFTCoeff("Cqu8R",0,0,0,0, 10000.) 
                -11451.4 * getSMEFTCoeff("Cqu8R",1,1,0,0, 10000.) 
                +192.629 * getSMEFTCoeff("Cqd1R",0,0,1,1, 10000.) 
                -108414. * getSMEFTCoeff("Cqd8R",0,0,0,0, 10000.) 
                -16799.9 * getSMEFTCoeff("Cqd8R",0,0,1,1, 10000.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin9a0cc * delsigmaMx_Bin9a0cc/0.047/0.047; 
 
 
//----------------------------------------------------------- 
    double delsigmaMx_Bin10a0bb = 0.0; 
 
        delsigmaMx_Bin10a0bb = 0.0 
                +2387.58 * getSMEFTCoeff("CG", 10000.) 
                +2689379. * getSMEFTCoeff("Cqq1R",0,2,2,0, 10000.) 
                +98475.5 * getSMEFTCoeff("Cqq1R",1,2,2,1, 10000.) 
                +14710895. * getSMEFTCoeff("Cqq3R",0,2,2,0, 10000.) 
                +182837. * getSMEFTCoeff("Cqq3R",1,2,2,1, 10000.) 
                +2688735. * getSMEFTCoeff("CddR",0,2,2,0, 10000.) 
                +98473.5 * getSMEFTCoeff("CddR",1,2,2,1, 10000.) 
                +1501280. * getSMEFTCoeff("Cud8R",0,0,2,2, 10000.) 
                +10523.5 * getSMEFTCoeff("Cud8R",1,1,2,2, 10000.) 
                +1501589. * getSMEFTCoeff("Cqu8R",2,2,0,0, 10000.) 
                +10503. * getSMEFTCoeff("Cqu8R",2,2,1,1, 10000.) 
                +2173742. * getSMEFTCoeff("Cqd8R",0,0,2,2, 10000.) 
                +35206. * getSMEFTCoeff("Cqd8R",1,1,2,2, 10000.) 
                +671957. * getSMEFTCoeff("Cqd8R",2,2,0,0, 10000.) 
                +24554.9 * getSMEFTCoeff("Cqd8R",2,2,1,1, 10000.) 
                -274441. * getSMEFTCoeff("Cqq1R",2,2,2,2, 10000.) 
                -274441. * getSMEFTCoeff("Cqq3R",2,2,2,2, 10000.) 
                -274607. * getSMEFTCoeff("CddR",2,2,2,2, 10000.) 
                -165744. * getSMEFTCoeff("Cqd8R",2,2,2,2, 10000.) 
                +178.282 * getSMEFTCoeff("Cqq1R",0,0,1,1, 10000.) 
                +66647.4 * getSMEFTCoeff("Cqq1R",0,1,1,0, 10000.) 
                -14682.8 * getSMEFTCoeff("Cqq1R",1,1,1,1, 10000.) 
                +373.631 * getSMEFTCoeff("Cqq3R",0,0,1,1, 10000.) 
                +46909.6 * getSMEFTCoeff("Cqq3R",0,1,1,0, 10000.) 
                -11850.7 * getSMEFTCoeff("Cqq3R",1,1,1,1, 10000.) 
                +104.598 * getSMEFTCoeff("CuuR",0,0,1,1, 10000.) 
                +85833.7 * getSMEFTCoeff("CuuR",0,1,1,0, 10000.) 
                -13648.4 * getSMEFTCoeff("CuuR",1,1,1,1, 10000.) 
                +153.426 * getSMEFTCoeff("Cud1R",1,1,0,0, 10000.) 
                +9765.43 * getSMEFTCoeff("Cud8R",1,1,0,0, 10000.) 
                +420.788 * getSMEFTCoeff("Cud8R",1,1,1,1, 10000.) 
                +31285.9 * getSMEFTCoeff("Cqu8R",0,0,1,1, 10000.) 
                -7758.39 * getSMEFTCoeff("Cqu8R",1,1,1,1, 10000.) 
                +4777.57 * getSMEFTCoeff("Cqd8R",1,1,0,0, 10000.) 
                -138.588 * getSMEFTCoeff("Cqd8R",1,1,1,1, 10000.) 
                -608056. * getSMEFTCoeff("Cqq1R",0,0,0,0, 10000.) 
                -1499294. * getSMEFTCoeff("Cqq3R",0,0,0,0, 10000.) 
                -514648. * getSMEFTCoeff("CuuR",0,0,0,0, 10000.) 
                -92631. * getSMEFTCoeff("CddR",0,0,0,0, 10000.) 
                +141.8 * getSMEFTCoeff("CddR",0,0,1,1, 10000.) 
                -19228.4 * getSMEFTCoeff("CddR",0,1,1,0, 10000.) 
                -983.672 * getSMEFTCoeff("CddR",1,1,1,1, 10000.) 
                -234.095 * getSMEFTCoeff("Cud1R",0,0,1,1, 10000.) 
                -111213. * getSMEFTCoeff("Cud8R",0,0,0,0, 10000.) 
                -11764.4 * getSMEFTCoeff("Cud8R",0,0,1,1, 10000.) 
                +87.642 * getSMEFTCoeff("Cqu1R",0,0,0,0, 10000.) 
                +133.38 * getSMEFTCoeff("Cqu1R",1,1,0,0, 10000.) 
                -320040. * getSMEFTCoeff("Cqu8R",0,0,0,0, 10000.) 
                -11891.1 * getSMEFTCoeff("Cqu8R",1,1,0,0, 10000.) 
                +307.838 * getSMEFTCoeff("Cqd1R",0,0,0,0, 10000.) 
                -139037. * getSMEFTCoeff("Cqd8R",0,0,0,0, 10000.) 
                -16571.5 * getSMEFTCoeff("Cqd8R",0,0,1,1, 10000.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin10a0bb * delsigmaMx_Bin10a0bb/0.047/0.047; 
 
    double delsigmaMx_Bin10a0cc = 0.0; 
 
        delsigmaMx_Bin10a0cc = 0.0 
                +3160.27 * getSMEFTCoeff("CG", 10000.) 
                +10298.4 * getSMEFTCoeff("Cqq1R",0,2,2,0, 10000.) 
                +406.499 * getSMEFTCoeff("Cqq1R",1,2,2,1, 10000.) 
                +56077.1 * getSMEFTCoeff("Cqq3R",0,2,2,0, 10000.) 
                +2676.51 * getSMEFTCoeff("Cqq3R",1,2,2,1, 10000.) 
                +10275.6 * getSMEFTCoeff("CddR",0,2,2,0, 10000.) 
                +449.455 * getSMEFTCoeff("CddR",1,2,2,1, 10000.) 
                +5691.43 * getSMEFTCoeff("Cud8R",0,0,2,2, 10000.) 
                +280.619 * getSMEFTCoeff("Cud8R",1,1,2,2, 10000.) 
                +5749.19 * getSMEFTCoeff("Cqu8R",2,2,0,0, 10000.) 
                +281.574 * getSMEFTCoeff("Cqu8R",2,2,1,1, 10000.) 
                +8311.23 * getSMEFTCoeff("Cqd8R",0,0,2,2, 10000.) 
                +438.672 * getSMEFTCoeff("Cqd8R",1,1,2,2, 10000.) 
                +2524.8 * getSMEFTCoeff("Cqd8R",2,2,0,0, 10000.) 
                -1045.69 * getSMEFTCoeff("Cqq1R",2,2,2,2, 10000.) 
                -1045.69 * getSMEFTCoeff("Cqq3R",2,2,2,2, 10000.) 
                -1046.32 * getSMEFTCoeff("CddR",2,2,2,2, 10000.) 
                -631.526 * getSMEFTCoeff("Cqd8R",2,2,2,2, 10000.) 
                +203.348 * getSMEFTCoeff("Cqq1R",0,0,1,1, 10000.) 
                +434876. * getSMEFTCoeff("Cqq1R",0,1,1,0, 10000.) 
                -73900.6 * getSMEFTCoeff("Cqq1R",1,1,1,1, 10000.) 
                +438.619 * getSMEFTCoeff("Cqq3R",0,0,1,1, 10000.) 
                +730332. * getSMEFTCoeff("Cqq3R",0,1,1,0, 10000.) 
                -58886.1 * getSMEFTCoeff("Cqq3R",1,1,1,1, 10000.) 
                +119.76 * getSMEFTCoeff("CuuR",0,0,1,1, 10000.) 
                +457674. * getSMEFTCoeff("CuuR",0,1,1,0, 10000.) 
                -72695.5 * getSMEFTCoeff("CuuR",1,1,1,1, 10000.) 
                +178.111 * getSMEFTCoeff("Cud1R",1,1,0,0, 10000.) 
                +51374.7 * getSMEFTCoeff("Cud8R",1,1,0,0, 10000.) 
                +1946.01 * getSMEFTCoeff("Cud8R",1,1,1,1, 10000.) 
                +165898. * getSMEFTCoeff("Cqu8R",0,0,1,1, 10000.) 
                -41472.3 * getSMEFTCoeff("Cqu8R",1,1,1,1, 10000.) 
                +45474.8 * getSMEFTCoeff("Cqd8R",1,1,0,0, 10000.) 
                +1281.86 * getSMEFTCoeff("Cqd8R",1,1,1,1, 10000.) 
                -720795. * getSMEFTCoeff("Cqq1R",0,0,0,0, 10000.) 
                -1777276. * getSMEFTCoeff("Cqq3R",0,0,0,0, 10000.) 
                -610069. * getSMEFTCoeff("CuuR",0,0,0,0, 10000.) 
                -109806. * getSMEFTCoeff("CddR",0,0,0,0, 10000.) 
                +168.091 * getSMEFTCoeff("CddR",0,0,1,1, 10000.) 
                -22793.6 * getSMEFTCoeff("CddR",0,1,1,0, 10000.) 
                -1166.05 * getSMEFTCoeff("CddR",1,1,1,1, 10000.) 
                -277.498 * getSMEFTCoeff("Cud1R",0,0,1,1, 10000.) 
                -131833. * getSMEFTCoeff("Cud8R",0,0,0,0, 10000.) 
                -13945.6 * getSMEFTCoeff("Cud8R",0,0,1,1, 10000.) 
                +103.892 * getSMEFTCoeff("Cqu1R",0,0,0,0, 10000.) 
                +158.11 * getSMEFTCoeff("Cqu1R",1,1,0,0, 10000.) 
                -379379. * getSMEFTCoeff("Cqu8R",0,0,0,0, 10000.) 
                -14095.8 * getSMEFTCoeff("Cqu8R",1,1,0,0, 10000.) 
                +364.914 * getSMEFTCoeff("Cqd1R",0,0,0,0, 10000.) 
                -164815. * getSMEFTCoeff("Cqd8R",0,0,0,0, 10000.) 
                -19644. * getSMEFTCoeff("Cqd8R",0,0,1,1, 10000.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin10a0cc * delsigmaMx_Bin10a0cc/0.065/0.065; 
 
 
//----------------------------------------------------------- 
    double delsigmaMx_Bin11a0bb = 0.0; 
 
        delsigmaMx_Bin11a0bb = 0.0 
                +832.424 * getSMEFTCoeff("CG", 10000.) 
                +82.155 * getSMEFTCoeff("Cqq1R",0,0,2,2, 10000.) 
                +3081351. * getSMEFTCoeff("Cqq1R",0,2,2,0, 10000.) 
                +103.708 * getSMEFTCoeff("Cqq1R",1,1,2,2, 10000.) 
                +113301. * getSMEFTCoeff("Cqq1R",1,2,2,1, 10000.) 
                +150.914 * getSMEFTCoeff("Cqq3R",0,0,2,2, 10000.) 
                +20755903. * getSMEFTCoeff("Cqq3R",0,2,2,0, 10000.) 
                +162741. * getSMEFTCoeff("Cqq3R",1,2,2,1, 10000.) 
                +3081502. * getSMEFTCoeff("CddR",0,2,2,0, 10000.) 
                +114.361 * getSMEFTCoeff("CddR",1,1,2,2, 10000.) 
                +113374. * getSMEFTCoeff("CddR",1,2,2,1, 10000.) 
                +2208168. * getSMEFTCoeff("Cud8R",0,0,2,2, 10000.) 
                +6153.23 * getSMEFTCoeff("Cud8R",1,1,2,2, 10000.) 
                +2208131. * getSMEFTCoeff("Cqu8R",2,2,0,0, 10000.) 
                +6142.08 * getSMEFTCoeff("Cqu8R",2,2,1,1, 10000.) 
                +102.187 * getSMEFTCoeff("Cqd1R",0,0,2,2, 10000.) 
                +2978892. * getSMEFTCoeff("Cqd8R",0,0,2,2, 10000.) 
                +34571. * getSMEFTCoeff("Cqd8R",1,1,2,2, 10000.) 
                +770464. * getSMEFTCoeff("Cqd8R",2,2,0,0, 10000.) 
                +28407.2 * getSMEFTCoeff("Cqd8R",2,2,1,1, 10000.) 
                -146404. * getSMEFTCoeff("Cqq1R",2,2,2,2, 10000.) 
                -146439. * getSMEFTCoeff("Cqq3R",2,2,2,2, 10000.) 
                -146323. * getSMEFTCoeff("CddR",2,2,2,2, 10000.) 
                -86383.8 * getSMEFTCoeff("Cqd8R",2,2,2,2, 10000.) 
                +388.726 * getSMEFTCoeff("Cqq1R",0,0,1,1, 10000.) 
                +95770.3 * getSMEFTCoeff("Cqq1R",0,1,1,0, 10000.) 
                -10379.3 * getSMEFTCoeff("Cqq1R",1,1,1,1, 10000.) 
                +533.433 * getSMEFTCoeff("Cqq3R",0,0,1,1, 10000.) 
                +929.633 * getSMEFTCoeff("Cqq3R",0,1,1,0, 10000.) 
                -7347.93 * getSMEFTCoeff("Cqq3R",1,1,1,1, 10000.) 
                +344.786 * getSMEFTCoeff("CuuR",0,0,1,1, 10000.) 
                +126356. * getSMEFTCoeff("CuuR",0,1,1,0, 10000.) 
                -9208.04 * getSMEFTCoeff("CuuR",1,1,1,1, 10000.) 
                +557.95 * getSMEFTCoeff("Cud1R",1,1,0,0, 10000.) 
                +11137.9 * getSMEFTCoeff("Cud8R",1,1,0,0, 10000.) 
                +479.545 * getSMEFTCoeff("Cud8R",1,1,1,1, 10000.) 
                +369.64 * getSMEFTCoeff("Cqu1R",0,0,1,1, 10000.) 
                +42961.8 * getSMEFTCoeff("Cqu8R",0,0,1,1, 10000.) 
                -4818.8 * getSMEFTCoeff("Cqu8R",1,1,1,1, 10000.) 
                +3325.43 * getSMEFTCoeff("Cqd8R",1,1,0,0, 10000.) 
                -205.03 * getSMEFTCoeff("Cqd8R",1,1,1,1, 10000.) 
                -1749947. * getSMEFTCoeff("Cqq1R",0,0,0,0, 10000.) 
                -3933450. * getSMEFTCoeff("Cqq3R",0,0,0,0, 10000.) 
                -1566455. * getSMEFTCoeff("CuuR",0,0,0,0, 10000.) 
                -183530. * getSMEFTCoeff("CddR",0,0,0,0, 10000.) 
                +409.134 * getSMEFTCoeff("CddR",0,0,1,1, 10000.) 
                -30085. * getSMEFTCoeff("CddR",0,1,1,0, 10000.) 
                -1337.97 * getSMEFTCoeff("CddR",1,1,1,1, 10000.) 
                +175.196 * getSMEFTCoeff("Cud1R",0,0,0,0, 10000.) 
                -612.907 * getSMEFTCoeff("Cud1R",0,0,1,1, 10000.) 
                -272255. * getSMEFTCoeff("Cud8R",0,0,0,0, 10000.) 
                -22996.1 * getSMEFTCoeff("Cud8R",0,0,1,1, 10000.) 
                -502.255 * getSMEFTCoeff("Cqu1R",0,0,0,0, 10000.) 
                +682.835 * getSMEFTCoeff("Cqu1R",1,1,0,0, 10000.) 
                -918116. * getSMEFTCoeff("Cqu8R",0,0,0,0, 10000.) 
                -22632.2 * getSMEFTCoeff("Cqu8R",1,1,0,0, 10000.) 
                +281.803 * getSMEFTCoeff("Cqd1R",0,0,0,0, 10000.) 
                -320676. * getSMEFTCoeff("Cqd8R",0,0,0,0, 10000.) 
                -30204.8 * getSMEFTCoeff("Cqd8R",0,0,1,1, 10000.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin11a0bb * delsigmaMx_Bin11a0bb/0.42/0.42; 
 
    double delsigmaMx_Bin11a0cc = 0.0; 
 
        delsigmaMx_Bin11a0cc = 0.0 
                +768.173 * getSMEFTCoeff("CG", 10000.) 
                +10617.3 * getSMEFTCoeff("Cqq1R",0,2,2,0, 10000.) 
                +102.335 * getSMEFTCoeff("Cqq1R",1,1,2,2, 10000.) 
                +367.216 * getSMEFTCoeff("Cqq1R",1,2,2,1, 10000.) 
                +114.438 * getSMEFTCoeff("Cqq3R",0,0,2,2, 10000.) 
                +70348.6 * getSMEFTCoeff("Cqq3R",0,2,2,0, 10000.) 
                +1370.27 * getSMEFTCoeff("Cqq3R",1,2,2,1, 10000.) 
                +10414.3 * getSMEFTCoeff("CddR",0,2,2,0, 10000.) 
                +115.727 * getSMEFTCoeff("CddR",1,1,2,2, 10000.) 
                +453.147 * getSMEFTCoeff("CddR",1,2,2,1, 10000.) 
                +7438.78 * getSMEFTCoeff("Cud8R",0,0,2,2, 10000.) 
                +119.378 * getSMEFTCoeff("Cud8R",1,1,2,2, 10000.) 
                +7513.89 * getSMEFTCoeff("Cqu8R",2,2,0,0, 10000.) 
                +120.591 * getSMEFTCoeff("Cqu8R",2,2,1,1, 10000.) 
                +100.567 * getSMEFTCoeff("Cqd1R",0,0,2,2, 10000.) 
                +10152.4 * getSMEFTCoeff("Cqd8R",0,0,2,2, 10000.) 
                +287.469 * getSMEFTCoeff("Cqd8R",1,1,2,2, 10000.) 
                +2591.73 * getSMEFTCoeff("Cqd8R",2,2,0,0, 10000.) 
                +212.975 * getSMEFTCoeff("Cqd8R",2,2,1,1, 10000.) 
                -495.999 * getSMEFTCoeff("Cqq1R",2,2,2,2, 10000.) 
                -496.117 * getSMEFTCoeff("Cqq3R",2,2,2,2, 10000.) 
                -495.724 * getSMEFTCoeff("CddR",2,2,2,2, 10000.) 
                -292.658 * getSMEFTCoeff("Cqd8R",2,2,2,2, 10000.) 
                +408.014 * getSMEFTCoeff("Cqq1R",0,0,1,1, 10000.) 
                +566316. * getSMEFTCoeff("Cqq1R",0,1,1,0, 10000.) 
                -44716.1 * getSMEFTCoeff("Cqq1R",1,1,1,1, 10000.) 
                +557.271 * getSMEFTCoeff("Cqq3R",0,0,1,1, 10000.) 
                +791318. * getSMEFTCoeff("Cqq3R",0,1,1,0, 10000.) 
                -29557.6 * getSMEFTCoeff("Cqq3R",1,1,1,1, 10000.) 
                +371.512 * getSMEFTCoeff("CuuR",0,0,1,1, 10000.) 
                +598571. * getSMEFTCoeff("CuuR",0,1,1,0, 10000.) 
                -43455.8 * getSMEFTCoeff("CuuR",1,1,1,1, 10000.) 
                +586.195 * getSMEFTCoeff("Cud1R",1,1,0,0, 10000.) 
                +52279.6 * getSMEFTCoeff("Cud8R",1,1,0,0, 10000.) 
                +1989.08 * getSMEFTCoeff("Cud8R",1,1,1,1, 10000.) 
                +388.183 * getSMEFTCoeff("Cqu1R",0,0,1,1, 10000.) 
                +202158. * getSMEFTCoeff("Cqu8R",0,0,1,1, 10000.) 
                -23319.5 * getSMEFTCoeff("Cqu8R",1,1,1,1, 10000.) 
                +44098.1 * getSMEFTCoeff("Cqd8R",1,1,0,0, 10000.) 
                +1268.33 * getSMEFTCoeff("Cqd8R",1,1,1,1, 10000.) 
                -1844455. * getSMEFTCoeff("Cqq1R",0,0,0,0, 10000.) 
                -4145882. * getSMEFTCoeff("Cqq3R",0,0,0,0, 10000.) 
                -1651054. * getSMEFTCoeff("CuuR",0,0,0,0, 10000.) 
                -193442. * getSMEFTCoeff("CddR",0,0,0,0, 10000.) 
                +431.23 * getSMEFTCoeff("CddR",0,0,1,1, 10000.) 
                -31709.7 * getSMEFTCoeff("CddR",0,1,1,0, 10000.) 
                -1410.23 * getSMEFTCoeff("CddR",1,1,1,1, 10000.) 
                +184.658 * getSMEFTCoeff("Cud1R",0,0,0,0, 10000.) 
                -646.008 * getSMEFTCoeff("Cud1R",0,0,1,1, 10000.) 
                -286958. * getSMEFTCoeff("Cud8R",0,0,0,0, 10000.) 
                -24238.1 * getSMEFTCoeff("Cud8R",0,0,1,1, 10000.) 
                -529.38 * getSMEFTCoeff("Cqu1R",0,0,0,0, 10000.) 
                +719.712 * getSMEFTCoeff("Cqu1R",1,1,0,0, 10000.) 
                -967700. * getSMEFTCoeff("Cqu8R",0,0,0,0, 10000.) 
                -23854.4 * getSMEFTCoeff("Cqu8R",1,1,0,0, 10000.) 
                +297.022 * getSMEFTCoeff("Cqd1R",0,0,0,0, 10000.) 
                -337994. * getSMEFTCoeff("Cqd8R",0,0,0,0, 10000.) 
                -31836.1 * getSMEFTCoeff("Cqd8R",0,0,1,1, 10000.) 
                ;
 
        dchi2Tot += delsigmaMx_Bin11a0cc * delsigmaMx_Bin11a0cc/0.609/0.609; 
 
 
//----------------------------------------------------------- 
 
    return dchi2Tot; 
 
}


const double NPSMEFTd6General::chi2FCChhWW() const
{
    double dchi2Tot = 0.0;

    double sigmaSMMemu_Bin1a0 = 0.0, sigmaMemu_Bin1a0 = 0.0; 
 
        sigmaSMMemu_Bin1a0 = 0.; //Only NP contribution 
 
        sigmaMemu_Bin1a0 = sigmaSMMemu_Bin1a0 
                -122303. * (getSMEFTCoeff("CHl3R",0,0, 1500.) + getSMEFTCoeff("CHl3R",1,1, 1500.))
                +256434. * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                +802038. * getSMEFTCoeff("CHq1R",0,0, 1500.) 
                +2992200. * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +649091. * getSMEFTCoeff("CHuR",0,0, 1500.) 
                -207683. * getSMEFTCoeff("CHdR",0,0, 1500.) 
                -485341.  * (getSMEFTCoeff("Clq1R",0,0,0,0, 1500.) + getSMEFTCoeff("Clq1R",1,1,0,0, 1500.) )
                +2697877. * (getSMEFTCoeff("Clq3R",0,0,0,0, 1500.) + getSMEFTCoeff("Clq3R",1,1,0,0, 1500.) )
                -252058.  * (getSMEFTCoeff("CluR",0,0,0,0, 1500.) + getSMEFTCoeff("CluR",1,1,0,0, 1500.) )
                +86993.2  * (getSMEFTCoeff("CldR",0,0,0,0, 1500.) + getSMEFTCoeff("CldR",1,1,0,0, 1500.) )
                ;
 
        dchi2Tot += sigmaMemu_Bin1a0 * sigmaMemu_Bin1a0/0.024/0.024; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMemu_Bin2a0 = 0.0, sigmaMemu_Bin2a0 = 0.0; 
 
        sigmaSMMemu_Bin2a0 = 0.; //Only NP contribution 
 
        sigmaMemu_Bin2a0 = sigmaSMMemu_Bin2a0 
                -121738. * (getSMEFTCoeff("CHl3R",0,0, 1500.) + getSMEFTCoeff("CHl3R",1,1, 1500.))
                +240334. * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                +969759. * getSMEFTCoeff("CHq1R",0,0, 1500.) 
                +3549929. * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +778774. * getSMEFTCoeff("CHuR",0,0, 1500.) 
                -300604. * getSMEFTCoeff("CHdR",0,0, 1500.) 
                -728938.  * (getSMEFTCoeff("Clq1R",0,0,0,0, 1500.) + getSMEFTCoeff("Clq1R",1,1,0,0, 1500.) )
                +2841838. * (getSMEFTCoeff("Clq3R",0,0,0,0, 1500.) + getSMEFTCoeff("Clq3R",1,1,0,0, 1500.) )
                -300243.  * (getSMEFTCoeff("CluR",0,0,0,0, 1500.) + getSMEFTCoeff("CluR",1,1,0,0, 1500.) )
                +94035.2  * (getSMEFTCoeff("CldR",0,0,0,0, 1500.) + getSMEFTCoeff("CldR",1,1,0,0, 1500.) )
                ;
 
        dchi2Tot += sigmaMemu_Bin2a0 * sigmaMemu_Bin2a0/0.032/0.032; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMemu_Bin3a0 = 0.0, sigmaMemu_Bin3a0 = 0.0; 
 
        sigmaSMMemu_Bin3a0 = 0.; //Only NP contribution 
 
        sigmaMemu_Bin3a0 = sigmaSMMemu_Bin3a0 
                -115908. * (getSMEFTCoeff("CHl3R",0,0, 1500.) + getSMEFTCoeff("CHl3R",1,1, 1500.))
                +239054. * getSMEFTCoeff("CllR",0,1,1,0, 1500.) 
                +1311967. * getSMEFTCoeff("CHq1R",0,0, 1500.) 
                +4512946. * getSMEFTCoeff("CHq3R",0,0, 1500.) 
                +999392. * getSMEFTCoeff("CHuR",0,0, 1500.) 
                -323336. * getSMEFTCoeff("CHdR",0,0, 1500.) 
                -776415.  * (getSMEFTCoeff("Clq1R",0,0,0,0, 1500.) + getSMEFTCoeff("Clq1R",1,1,0,0, 1500.) )
                +3574926. * (getSMEFTCoeff("Clq3R",0,0,0,0, 1500.) + getSMEFTCoeff("Clq3R",1,1,0,0, 1500.) )
                -390809.  * (getSMEFTCoeff("CluR",0,0,0,0, 1500.) + getSMEFTCoeff("CluR",1,1,0,0, 1500.) )
                +140074.  * (getSMEFTCoeff("CldR",0,0,0,0, 1500.) + getSMEFTCoeff("CldR",1,1,0,0, 1500.) )
                ;
 
        dchi2Tot += sigmaMemu_Bin3a0 * sigmaMemu_Bin3a0/0.03/0.03; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMemu_Bin4a0 = 0.0, sigmaMemu_Bin4a0 = 0.0; 
 
        sigmaSMMemu_Bin4a0 = 0.; //Only NP contribution 
 
        sigmaMemu_Bin4a0 = sigmaSMMemu_Bin4a0 
                -121437. * (getSMEFTCoeff("CHl3R",0,0, 3000.) + getSMEFTCoeff("CHl3R",1,1, 3000.))
                +250927. * getSMEFTCoeff("CllR",0,1,1,0, 3000.) 
                +1793516. * getSMEFTCoeff("CHq1R",0,0, 3000.) 
                +5889601. * getSMEFTCoeff("CHq3R",0,0, 3000.) 
                +1317159. * getSMEFTCoeff("CHuR",0,0, 3000.) 
                -435275. * getSMEFTCoeff("CHdR",0,0, 3000.) 
                -1079940. * (getSMEFTCoeff("Clq1R",0,0,0,0, 3000.) + getSMEFTCoeff("Clq1R",1,1,0,0, 3000.) )
                +4966908. * (getSMEFTCoeff("Clq3R",0,0,0,0, 3000.) + getSMEFTCoeff("Clq3R",1,1,0,0, 3000.) )
                -563778.  * (getSMEFTCoeff("CluR",0,0,0,0, 3000.) + getSMEFTCoeff("CluR",1,1,0,0, 3000.) )
                +180870.  * (getSMEFTCoeff("CldR",0,0,0,0, 3000.) + getSMEFTCoeff("CldR",1,1,0,0, 3000.) )
                ;
 
        dchi2Tot += sigmaMemu_Bin4a0 * sigmaMemu_Bin4a0/0.04/0.04; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMemu_Bin5a0 = 0.0, sigmaMemu_Bin5a0 = 0.0; 
 
        sigmaSMMemu_Bin5a0 = 0.; //Only NP contribution 
 
        sigmaMemu_Bin5a0 = sigmaSMMemu_Bin5a0 
                -120419. * (getSMEFTCoeff("CHl3R",0,0, 3000.) + getSMEFTCoeff("CHl3R",1,1, 3000.))
                +233467. * getSMEFTCoeff("CllR",0,1,1,0, 3000.) 
                +2346037. * getSMEFTCoeff("CHq1R",0,0, 3000.) 
                +7424710. * getSMEFTCoeff("CHq3R",0,0, 3000.) 
                +1677769. * getSMEFTCoeff("CHuR",0,0, 3000.) 
                -526473. * getSMEFTCoeff("CHdR",0,0, 3000.) 
                -1555194. * (getSMEFTCoeff("Clq1R",0,0,0,0, 3000.) + getSMEFTCoeff("Clq1R",1,1,0,0, 3000.) )
                +5936364. * (getSMEFTCoeff("Clq3R",0,0,0,0, 3000.) + getSMEFTCoeff("Clq3R",1,1,0,0, 3000.) )
                -762532.  * (getSMEFTCoeff("CluR",0,0,0,0, 3000.) + getSMEFTCoeff("CluR",1,1,0,0, 3000.) )
                +231542.  * (getSMEFTCoeff("CldR",0,0,0,0, 3000.) + getSMEFTCoeff("CldR",1,1,0,0, 3000.) )
                ;
 
        dchi2Tot += sigmaMemu_Bin5a0 * sigmaMemu_Bin5a0/0.047/0.047; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMemu_Bin6a0 = 0.0, sigmaMemu_Bin6a0 = 0.0; 
 
        sigmaSMMemu_Bin6a0 = 0.; //Only NP contribution 
 
        sigmaMemu_Bin6a0 = sigmaSMMemu_Bin6a0 
                -130729. * (getSMEFTCoeff("CHl3R",0,0, 3000.) + getSMEFTCoeff("CHl3R",1,1, 3000.))
                +243685. * getSMEFTCoeff("CllR",0,1,1,0, 3000.) 
                +3042941. * getSMEFTCoeff("CHq1R",0,0, 3000.) 
                +9373413. * getSMEFTCoeff("CHq3R",0,0, 3000.) 
                +2114399. * getSMEFTCoeff("CHuR",0,0, 3000.) 
                -654620. * getSMEFTCoeff("CHdR",0,0, 3000.) 
                -2160820. * (getSMEFTCoeff("Clq1R",0,0,0,0, 3000.) + getSMEFTCoeff("Clq1R",1,1,0,0, 3000.) )
                +8196234. * (getSMEFTCoeff("Clq3R",0,0,0,0, 3000.) + getSMEFTCoeff("Clq3R",1,1,0,0, 3000.) )
                -1119257. * (getSMEFTCoeff("CluR",0,0,0,0, 3000.) + getSMEFTCoeff("CluR",1,1,0,0, 3000.) )
                ;
 
        dchi2Tot += sigmaMemu_Bin6a0 * sigmaMemu_Bin6a0/0.053/0.053; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMemu_Bin7a0 = 0.0, sigmaMemu_Bin7a0 = 0.0; 
 
        sigmaSMMemu_Bin7a0 = 0.; //Only NP contribution 
 
        sigmaMemu_Bin7a0 = sigmaSMMemu_Bin7a0 
                -117909. * (getSMEFTCoeff("CHl3R",0,0, 5000.) + getSMEFTCoeff("CHl3R",1,1, 5000.))
                +265055. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                +4271975. * getSMEFTCoeff("CHq1R",0,0, 5000.) 
                +12644187. * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +2914675. * getSMEFTCoeff("CHuR",0,0, 5000.) 
                -894326. * getSMEFTCoeff("CHdR",0,0, 5000.) 
                -2600983.  * (getSMEFTCoeff("Clq1R",0,0,0,0, 5000.) + getSMEFTCoeff("Clq1R",1,1,0,0, 5000.) )
                +10420736. * (getSMEFTCoeff("Clq3R",0,0,0,0, 5000.) + getSMEFTCoeff("Clq3R",1,1,0,0, 5000.) )
                -1617706.  * (getSMEFTCoeff("CluR",0,0,0,0, 5000.) + getSMEFTCoeff("CluR",1,1,0,0, 5000.) )
                +437847.   * (getSMEFTCoeff("CldR",0,0,0,0, 5000.) + getSMEFTCoeff("CldR",1,1,0,0, 5000.) )
                ;
 
        dchi2Tot += sigmaMemu_Bin7a0 * sigmaMemu_Bin7a0/0.094/0.094; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMemu_Bin8a0 = 0.0, sigmaMemu_Bin8a0 = 0.0; 
 
        sigmaSMMemu_Bin8a0 = 0.; //Only NP contribution 
 
        sigmaMemu_Bin8a0 = sigmaSMMemu_Bin8a0 
                -126799. * (getSMEFTCoeff("CHl3R",0,0, 5000.) + getSMEFTCoeff("CHl3R",1,1, 5000.))
                +207625. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                +5533849. * getSMEFTCoeff("CHq1R",0,0, 5000.) 
                +15770982. * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +3673753. * getSMEFTCoeff("CHuR",0,0, 5000.) 
                -1105674. * getSMEFTCoeff("CHdR",0,0, 5000.) 
                -3667020.  * (getSMEFTCoeff("Clq1R",0,0,0,0, 5000.) + getSMEFTCoeff("Clq1R",1,1,0,0, 5000.) )
                +13260819. * (getSMEFTCoeff("Clq3R",0,0,0,0, 5000.) + getSMEFTCoeff("Clq3R",1,1,0,0, 5000.) )
                -1957673.  * (getSMEFTCoeff("CluR",0,0,0,0, 5000.) + getSMEFTCoeff("CluR",1,1,0,0, 5000.) )
                +541855.  * (getSMEFTCoeff("CldR",0,0,0,0, 5000.) + getSMEFTCoeff("CldR",1,1,0,0, 5000.) )
                ;
 
        dchi2Tot += sigmaMemu_Bin8a0 * sigmaMemu_Bin8a0/0.14/0.14; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMemu_Bin9a0 = 0.0, sigmaMemu_Bin9a0 = 0.0; 
 
        sigmaSMMemu_Bin9a0 = 0.; //Only NP contribution 
 
        sigmaMemu_Bin9a0 = sigmaSMMemu_Bin9a0 
                -135290. * (getSMEFTCoeff("CHl3R",0,0, 5000.) + getSMEFTCoeff("CHl3R",1,1, 5000.))
                +272244. * getSMEFTCoeff("CllR",0,1,1,0, 5000.) 
                +6829918. * getSMEFTCoeff("CHq1R",0,0, 5000.) 
                +19204913. * getSMEFTCoeff("CHq3R",0,0, 5000.) 
                +4498782. * getSMEFTCoeff("CHuR",0,0, 5000.) 
                -1326360. * getSMEFTCoeff("CHdR",0,0, 5000.) 
                -3872170. * (getSMEFTCoeff("Clq1R",0,0,0,0, 5000.) + getSMEFTCoeff("Clq1R",1,1,0,0, 5000.) )
                +16720785. * (getSMEFTCoeff("Clq3R",0,0,0,0, 5000.) + getSMEFTCoeff("Clq3R",1,1,0,0, 5000.) )
                -2544802. * (getSMEFTCoeff("CluR",0,0,0,0, 5000.) + getSMEFTCoeff("CluR",1,1,0,0, 5000.) )
                +760798.  * (getSMEFTCoeff("CldR",0,0,0,0, 5000.) + getSMEFTCoeff("CldR",1,1,0,0, 5000.) )
                ;
 
        dchi2Tot += sigmaMemu_Bin9a0 * sigmaMemu_Bin9a0/0.189/0.189; 
 
 
//----------------------------------------------------------- 
    double sigmaSMMemu_Bin10a0 = 0.0, sigmaMemu_Bin10a0 = 0.0; 
 
        sigmaSMMemu_Bin10a0 = 0.; //Only NP contribution 
 
        sigmaMemu_Bin10a0 = sigmaSMMemu_Bin10a0 
                -1388.26 * getSMEFTCoeff("CW", 10000.) 
                -909.909 * getSMEFTCoeff("CHD", 10000.) 
                -132815. * (getSMEFTCoeff("CHl3R",0,0, 10000.) + getSMEFTCoeff("CHl3R",1,1, 10000.))
                +214835. * getSMEFTCoeff("CllR",0,1,1,0, 10000.) 
                +8734437. * getSMEFTCoeff("CHq1R",0,0, 10000.) 
                +23127329. * getSMEFTCoeff("CHq3R",0,0, 10000.) 
                +5442023. * getSMEFTCoeff("CHuR",0,0, 10000.) 
                -1528613. * getSMEFTCoeff("CHdR",0,0, 10000.) 
                -6051795.  * (getSMEFTCoeff("Clq1R",0,0,0,0, 10000.) + getSMEFTCoeff("Clq1R",1,1,0,0, 10000.) )
                +20079255. * (getSMEFTCoeff("Clq3R",0,0,0,0, 10000.) + getSMEFTCoeff("Clq3R",1,1,0,0, 10000.) )
                -3823306.  * (getSMEFTCoeff("CluR",0,0,0,0, 10000.) + getSMEFTCoeff("CluR",1,1,0,0, 10000.) )
                +930219. * (getSMEFTCoeff("CldR",0,0,0,0, 10000.) + getSMEFTCoeff("CldR",1,1,0,0, 10000.) )
                ;
 
        dchi2Tot += sigmaMemu_Bin10a0 * sigmaMemu_Bin10a0/0.251/0.251; 
 
 
//----------------------------------------------------------- 
 
    return dchi2Tot; 
 
}

