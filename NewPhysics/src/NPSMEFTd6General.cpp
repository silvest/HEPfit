/*
 * Copyright (C) 2014 HEPfit Collaboration
 *
 *
 * For the licensing terms see doc/COPYING.
 */

#include "NPSMEFTd6General.h"
#include <limits>
#include <gsl/gsl_sf.h>
#include <boost/bind/bind.hpp>
#include "gslpp_function_adapter.h"
#include <TF1.h>
#include <Math/WrappedTF1.h>
#include <Math/BrentRootFinder.h>


using namespace boost::placeholders;

const std::string NPSMEFTd6General::NPSMEFTd6GeneralVars[NNPSMEFTd6GeneralVars]
        = {
//    "g1_LNP", "g2_LNP", "g3_LNP", "lambdaH_LNP", "muH_LNP",
//    "Yu_LNP", "Yc_LNP", "Yt_LNP",  "Yd_LNP", "Ys_LNP", "Yb_LNP",
//    "Ye_LNP", "Ymu_LNP", "Ytau_LNP",
//    "s12CKM_LNP", "s13CKM_LNP", "s23CKM_LNP", "dCKM_LNP",
    "CG_LNP", "CW_LNP", "CHG_LNP", "CHW_LNP", "CHB_LNP",
    "CHWB_LNP", "CHD_LNP", "CHbox_LNP", "CH_LNP",
    "CGtilde_LNP", "CWtilde_LNP", "CHGtilde_LNP", "CHWtilde_LNP", "CHBtilde_LNP", "CHWtildeB_LNP",
    "CHl1_11r_LNP", "CHl1_12r_LNP", "CHl1_13r_LNP", "CHl1_22r_LNP", "CHl1_23r_LNP", "CHl1_33r_LNP",
    "CHl1_12i_LNP", "CHl1_13i_LNP", "CHl1_23i_LNP",
    "CHl3_11r_LNP", "CHl3_12r_LNP", "CHl3_13r_LNP", "CHl3_22r_LNP", "CHl3_23r_LNP", "CHl3_33r_LNP",
    "CHl3_12i_LNP", "CHl3_13i_LNP", "CHl3_23i_LNP",
    "CHe_11r_LNP", "CHe_12r_LNP", "CHe_13r_LNP", "CHe_22r_LNP", "CHe_23r_LNP", "CHe_33r_LNP",
    "CHe_12i_LNP", "CHe_13i_LNP", "CHe_23i_LNP",
    "CHq1_11r_LNP", "CHq1_12r_LNP", "CHq1_13r_LNP", "CHq1_22r_LNP", "CHq1_23r_LNP", "CHq1_33r_LNP",
    "CHq1_12i_LNP", "CHq1_13i_LNP", "CHq1_23i_LNP",
    "CHq3_11r_LNP", "CHq3_12r_LNP", "CHq3_13r_LNP", "CHq3_22r_LNP", "CHq3_23r_LNP", "CHq3_33r_LNP",
    "CHq3_12i_LNP", "CHq3_13i_LNP", "CHq3_23i_LNP",
    "CHu_11r_LNP", "CHu_12r_LNP", "CHu_13r_LNP", "CHu_22r_LNP", "CHu_23r_LNP", "CHu_33r_LNP",
    "CHu_12i_LNP", "CHu_13i_LNP", "CHu_23i_LNP",
    "CHd_11r_LNP", "CHd_12r_LNP", "CHd_13r_LNP", "CHd_22r_LNP", "CHd_23r_LNP", "CHd_33r_LNP",
    "CHd_12i_LNP", "CHd_13i_LNP", "CHd_23i_LNP",
    "CHud_11r_LNP", "CHud_12r_LNP", "CHud_13r_LNP", "CHud_21r_LNP", "CHud_22r_LNP", "CHud_23r_LNP", "CHud_31r_LNP", "CHud_32r_LNP", "CHud_33r_LNP",
    "CHud_11i_LNP", "CHud_12i_LNP", "CHud_13i_LNP", "CHud_21i_LNP", "CHud_22i_LNP", "CHud_23i_LNP", "CHud_31i_LNP", "CHud_32i_LNP", "CHud_33i_LNP",
    "CeH_11r_LNP", "CeH_12r_LNP", "CeH_13r_LNP", "CeH_21r_LNP", "CeH_22r_LNP", "CeH_23r_LNP", "CeH_31r_LNP", "CeH_32r_LNP", "CeH_33r_LNP",
    "CeH_11i_LNP", "CeH_12i_LNP", "CeH_13i_LNP", "CeH_21i_LNP", "CeH_22i_LNP", "CeH_23i_LNP", "CeH_31i_LNP", "CeH_32i_LNP", "CeH_33i_LNP",
    "CuH_11r_LNP", "CuH_12r_LNP", "CuH_13r_LNP", "CuH_21r_LNP", "CuH_22r_LNP", "CuH_23r_LNP", "CuH_31r_LNP", "CuH_32r_LNP", "CuH_33r_LNP",
    "CuH_11i_LNP", "CuH_12i_LNP", "CuH_13i_LNP", "CuH_21i_LNP", "CuH_22i_LNP", "CuH_23i_LNP", "CuH_31i_LNP", "CuH_32i_LNP", "CuH_33i_LNP",
    "CdH_11r_LNP", "CdH_12r_LNP", "CdH_13r_LNP", "CdH_21r_LNP", "CdH_22r_LNP", "CdH_23r_LNP", "CdH_31r_LNP", "CdH_32r_LNP", "CdH_33r_LNP",
    "CdH_11i_LNP", "CdH_12i_LNP", "CdH_13i_LNP", "CdH_21i_LNP", "CdH_22i_LNP", "CdH_23i_LNP", "CdH_31i_LNP", "CdH_32i_LNP", "CdH_33i_LNP",
    "CuG_11r_LNP", "CuG_12r_LNP", "CuG_13r_LNP", "CuG_21r_LNP", "CuG_22r_LNP", "CuG_23r_LNP", "CuG_31r_LNP", "CuG_32r_LNP", "CuG_33r_LNP",
    "CuG_11i_LNP", "CuG_12i_LNP", "CuG_13i_LNP", "CuG_21i_LNP", "CuG_22i_LNP", "CuG_23i_LNP", "CuG_31i_LNP", "CuG_32i_LNP", "CuG_33i_LNP",
    "CuW_11r_LNP", "CuW_12r_LNP", "CuW_13r_LNP", "CuW_21r_LNP", "CuW_22r_LNP", "CuW_23r_LNP", "CuW_31r_LNP", "CuW_32r_LNP", "CuW_33r_LNP",
    "CuW_11i_LNP", "CuW_12i_LNP", "CuW_13i_LNP", "CuW_21i_LNP", "CuW_22i_LNP", "CuW_23i_LNP", "CuW_31i_LNP", "CuW_32i_LNP", "CuW_33i_LNP",
    "CuB_11r_LNP", "CuB_12r_LNP", "CuB_13r_LNP", "CuB_21r_LNP", "CuB_22r_LNP", "CuB_23r_LNP", "CuB_31r_LNP", "CuB_32r_LNP", "CuB_33r_LNP",
    "CuB_11i_LNP", "CuB_12i_LNP", "CuB_13i_LNP", "CuB_21i_LNP", "CuB_22i_LNP", "CuB_23i_LNP", "CuB_31i_LNP", "CuB_32i_LNP", "CuB_33i_LNP",
    "CdG_11r_LNP", "CdG_12r_LNP", "CdG_13r_LNP", "CdG_21r_LNP", "CdG_22r_LNP", "CdG_23r_LNP", "CdG_31r_LNP", "CdG_32r_LNP", "CdG_33r_LNP",
    "CdG_11i_LNP", "CdG_12i_LNP", "CdG_13i_LNP", "CdG_21i_LNP", "CdG_22i_LNP", "CdG_23i_LNP", "CdG_31i_LNP", "CdG_32i_LNP", "CdG_33i_LNP",
    "CdW_11r_LNP", "CdW_12r_LNP", "CdW_13r_LNP", "CdW_21r_LNP", "CdW_22r_LNP", "CdW_23r_LNP", "CdW_31r_LNP", "CdW_32r_LNP", "CdW_33r_LNP",
    "CdW_11i_LNP", "CdW_12i_LNP", "CdW_13i_LNP", "CdW_21i_LNP", "CdW_22i_LNP", "CdW_23i_LNP", "CdW_31i_LNP", "CdW_32i_LNP", "CdW_33i_LNP",
    "CdB_11r_LNP", "CdB_12r_LNP", "CdB_13r_LNP", "CdB_21r_LNP", "CdB_22r_LNP", "CdB_23r_LNP", "CdB_31r_LNP", "CdB_32r_LNP", "CdB_33r_LNP",
    "CdB_11i_LNP", "CdB_12i_LNP", "CdB_13i_LNP", "CdB_21i_LNP", "CdB_22i_LNP", "CdB_23i_LNP", "CdB_31i_LNP", "CdB_32i_LNP", "CdB_33i_LNP",
    "CeW_11r_LNP", "CeW_12r_LNP", "CeW_13r_LNP", "CeW_21r_LNP", "CeW_22r_LNP", "CeW_23r_LNP", "CeW_31r_LNP", "CeW_32r_LNP", "CeW_33r_LNP",
    "CeW_11i_LNP", "CeW_12i_LNP", "CeW_13i_LNP", "CeW_21i_LNP", "CeW_22i_LNP", "CeW_23i_LNP", "CeW_31i_LNP", "CeW_32i_LNP", "CeW_33i_LNP",
    "CeB_11r_LNP", "CeB_12r_LNP", "CeB_13r_LNP", "CeB_21r_LNP", "CeB_22r_LNP", "CeB_23r_LNP", "CeB_31r_LNP", "CeB_32r_LNP", "CeB_33r_LNP",
    "CeB_11i_LNP", "CeB_12i_LNP", "CeB_13i_LNP", "CeB_21i_LNP", "CeB_22i_LNP", "CeB_23i_LNP", "CeB_31i_LNP", "CeB_32i_LNP", "CeB_33i_LNP",
    "Cll_1111r_LNP", "Cll_1112r_LNP", "Cll_1113r_LNP", "Cll_1122r_LNP", "Cll_1123r_LNP", "Cll_1133r_LNP", "Cll_1212r_LNP", "Cll_1213r_LNP", "Cll_1221r_LNP",
    "Cll_1222r_LNP", "Cll_1223r_LNP", "Cll_1231r_LNP", "Cll_1232r_LNP", "Cll_1233r_LNP", "Cll_1313r_LNP", "Cll_1322r_LNP", "Cll_1323r_LNP", "Cll_1331r_LNP",
    "Cll_1332r_LNP", "Cll_1333r_LNP", "Cll_2222r_LNP", "Cll_2223r_LNP", "Cll_2233r_LNP", "Cll_2323r_LNP", "Cll_2332r_LNP", "Cll_2333r_LNP", "Cll_3333r_LNP",
    "Cll_1112i_LNP", "Cll_1113i_LNP", "Cll_1123i_LNP", "Cll_1212i_LNP", "Cll_1213i_LNP", "Cll_1222i_LNP", "Cll_1223i_LNP", "Cll_1231i_LNP", "Cll_1232i_LNP",
    "Cll_1233i_LNP", "Cll_1313i_LNP", "Cll_1322i_LNP", "Cll_1323i_LNP", "Cll_1332i_LNP", "Cll_1333i_LNP", "Cll_2223i_LNP", "Cll_2323i_LNP", "Cll_2333i_LNP",
    "Clq1_1111r_LNP", "Clq1_1112r_LNP", "Clq1_1113r_LNP", "Clq1_1122r_LNP", "Clq1_1123r_LNP", "Clq1_1133r_LNP", "Clq1_1211r_LNP", "Clq1_1212r_LNP", "Clq1_1213r_LNP",
    "Clq1_1221r_LNP", "Clq1_1222r_LNP", "Clq1_1223r_LNP", "Clq1_1231r_LNP", "Clq1_1232r_LNP", "Clq1_1233r_LNP", "Clq1_1311r_LNP", "Clq1_1312r_LNP", "Clq1_1313r_LNP",
    "Clq1_1321r_LNP", "Clq1_1322r_LNP", "Clq1_1323r_LNP", "Clq1_1331r_LNP", "Clq1_1332r_LNP", "Clq1_1333r_LNP", "Clq1_2211r_LNP", "Clq1_2212r_LNP", "Clq1_2213r_LNP",
    "Clq1_2222r_LNP", "Clq1_2223r_LNP", "Clq1_2233r_LNP", "Clq1_2311r_LNP", "Clq1_2312r_LNP", "Clq1_2313r_LNP", "Clq1_2321r_LNP", "Clq1_2322r_LNP", "Clq1_2323r_LNP",
    "Clq1_2331r_LNP", "Clq1_2332r_LNP", "Clq1_2333r_LNP", "Clq1_3311r_LNP", "Clq1_3312r_LNP", "Clq1_3313r_LNP", "Clq1_3322r_LNP", "Clq1_3323r_LNP", "Clq1_3333r_LNP",
    "Clq1_1112i_LNP", "Clq1_1113i_LNP", "Clq1_1123i_LNP", "Clq1_1211i_LNP", "Clq1_1212i_LNP", "Clq1_1213i_LNP", "Clq1_1221i_LNP", "Clq1_1222i_LNP", "Clq1_1223i_LNP",
    "Clq1_1231i_LNP", "Clq1_1232i_LNP", "Clq1_1233i_LNP", "Clq1_1311i_LNP", "Clq1_1312i_LNP", "Clq1_1313i_LNP", "Clq1_1321i_LNP", "Clq1_1322i_LNP", "Clq1_1323i_LNP",
    "Clq1_1331i_LNP", "Clq1_1332i_LNP", "Clq1_1333i_LNP", "Clq1_2212i_LNP", "Clq1_2213i_LNP", "Clq1_2223i_LNP", "Clq1_2312i_LNP", "Clq1_2313i_LNP", "Clq1_2321i_LNP",
    "Clq1_2322i_LNP", "Clq1_2323i_LNP", "Clq1_2331i_LNP", "Clq1_2332i_LNP", "Clq1_2333i_LNP", "Clq1_2311i_LNP", "Clq1_3312i_LNP", "Clq1_3313i_LNP", "Clq1_3323i_LNP",
    "Clq3_1111r_LNP", "Clq3_1112r_LNP", "Clq3_1113r_LNP", "Clq3_1122r_LNP", "Clq3_1123r_LNP", "Clq3_1133r_LNP", "Clq3_1211r_LNP", "Clq3_1212r_LNP", "Clq3_1213r_LNP",
    "Clq3_1221r_LNP", "Clq3_1222r_LNP", "Clq3_1223r_LNP", "Clq3_1231r_LNP", "Clq3_1232r_LNP", "Clq3_1233r_LNP", "Clq3_1311r_LNP", "Clq3_1312r_LNP", "Clq3_1313r_LNP",
    "Clq3_1321r_LNP", "Clq3_1322r_LNP", "Clq3_1323r_LNP", "Clq3_1331r_LNP", "Clq3_1332r_LNP", "Clq3_1333r_LNP", "Clq3_2211r_LNP", "Clq3_2212r_LNP", "Clq3_2213r_LNP",
    "Clq3_2222r_LNP", "Clq3_2223r_LNP", "Clq3_2233r_LNP", "Clq3_2311r_LNP", "Clq3_2312r_LNP", "Clq3_2313r_LNP", "Clq3_2321r_LNP", "Clq3_2322r_LNP", "Clq3_2323r_LNP",
    "Clq3_2331r_LNP", "Clq3_2332r_LNP", "Clq3_2333r_LNP", "Clq3_3311r_LNP", "Clq3_3312r_LNP", "Clq3_3313r_LNP", "Clq3_3322r_LNP", "Clq3_3323r_LNP", "Clq3_3333r_LNP",
    "Clq3_1112i_LNP", "Clq3_1113i_LNP", "Clq3_1123i_LNP", "Clq3_1211i_LNP", "Clq3_1212i_LNP", "Clq3_1213i_LNP", "Clq3_1221i_LNP", "Clq3_1222i_LNP", "Clq3_1223i_LNP",
    "Clq3_1231i_LNP", "Clq3_1232i_LNP", "Clq3_1233i_LNP", "Clq3_1311i_LNP", "Clq3_1312i_LNP", "Clq3_1313i_LNP", "Clq3_1321i_LNP", "Clq3_1322i_LNP", "Clq3_1323i_LNP",
    "Clq3_1331i_LNP", "Clq3_1332i_LNP", "Clq3_1333i_LNP", "Clq3_2212i_LNP", "Clq3_2213i_LNP", "Clq3_2223i_LNP", "Clq3_2312i_LNP", "Clq3_2313i_LNP", "Clq3_2321i_LNP",
    "Clq3_2322i_LNP", "Clq3_2323i_LNP", "Clq3_2331i_LNP", "Clq3_2332i_LNP", "Clq3_2333i_LNP", "Clq3_2311i_LNP", "Clq3_3312i_LNP", "Clq3_3313i_LNP", "Clq3_3323i_LNP",
    "Cee_1111r_LNP", "Cee_1112r_LNP", "Cee_1113r_LNP", "Cee_1122r_LNP", "Cee_1123r_LNP", "Cee_1133r_LNP", "Cee_1212r_LNP", "Cee_1213r_LNP", "Cee_1222r_LNP",
    "Cee_1223r_LNP", "Cee_1232r_LNP", "Cee_1233r_LNP", "Cee_1313r_LNP", "Cee_1323r_LNP", "Cee_1333r_LNP", "Cee_2222r_LNP", "Cee_2223r_LNP", "Cee_2233r_LNP",
    "Cee_2323r_LNP", "Cee_2333r_LNP", "Cee_3333r_LNP", "Cee_1112i_LNP", "Cee_1113i_LNP", "Cee_1123i_LNP", "Cee_1212i_LNP", "Cee_1213i_LNP", "Cee_1222i_LNP",
    "Cee_1223i_LNP", "Cee_1232i_LNP", "Cee_1233i_LNP", "Cee_1313i_LNP", "Cee_1323i_LNP", "Cee_1333i_LNP", "Cee_2223i_LNP", "Cee_2323i_LNP", "Cee_2333i_LNP",
    "Ceu_1111r_LNP", "Ceu_1112r_LNP", "Ceu_1113r_LNP", "Ceu_1122r_LNP", "Ceu_1123r_LNP", "Ceu_1133r_LNP", "Ceu_1211r_LNP", "Ceu_1212r_LNP", "Ceu_1213r_LNP",
    "Ceu_1221r_LNP", "Ceu_1222r_LNP", "Ceu_1223r_LNP", "Ceu_1231r_LNP", "Ceu_1232r_LNP", "Ceu_1233r_LNP", "Ceu_1311r_LNP", "Ceu_1312r_LNP", "Ceu_1313r_LNP",
    "Ceu_1321r_LNP", "Ceu_1322r_LNP", "Ceu_1323r_LNP", "Ceu_1331r_LNP", "Ceu_1332r_LNP", "Ceu_1333r_LNP", "Ceu_2211r_LNP", "Ceu_2212r_LNP", "Ceu_2213r_LNP",
    "Ceu_2222r_LNP", "Ceu_2223r_LNP", "Ceu_2233r_LNP", "Ceu_2311r_LNP", "Ceu_2312r_LNP", "Ceu_2313r_LNP", "Ceu_2321r_LNP", "Ceu_2322r_LNP", "Ceu_2323r_LNP",
    "Ceu_2331r_LNP", "Ceu_2332r_LNP", "Ceu_2333r_LNP", "Ceu_3311r_LNP", "Ceu_3312r_LNP", "Ceu_3313r_LNP", "Ceu_3322r_LNP", "Ceu_3323r_LNP", "Ceu_3333r_LNP",
    "Ceu_1112i_LNP", "Ceu_1113i_LNP", "Ceu_1123i_LNP", "Ceu_1211i_LNP", "Ceu_1212i_LNP", "Ceu_1213i_LNP", "Ceu_1221i_LNP", "Ceu_1222i_LNP", "Ceu_1223i_LNP",
    "Ceu_1231i_LNP", "Ceu_1232i_LNP", "Ceu_1233i_LNP", "Ceu_1311i_LNP", "Ceu_1312i_LNP", "Ceu_1313i_LNP", "Ceu_1321i_LNP", "Ceu_1322i_LNP", "Ceu_1323i_LNP",
    "Ceu_1331i_LNP", "Ceu_1332i_LNP", "Ceu_1333i_LNP", "Ceu_2212i_LNP", "Ceu_2213i_LNP", "Ceu_2223i_LNP", "Ceu_2312i_LNP", "Ceu_2313i_LNP", "Ceu_2321i_LNP",
    "Ceu_2322i_LNP", "Ceu_2323i_LNP", "Ceu_2331i_LNP", "Ceu_2332i_LNP", "Ceu_2333i_LNP", "Ceu_2311i_LNP", "Ceu_3312i_LNP", "Ceu_3313i_LNP", "Ceu_3323i_LNP",
    "Ced_1111r_LNP", "Ced_1112r_LNP", "Ced_1113r_LNP", "Ced_1122r_LNP", "Ced_1123r_LNP", "Ced_1133r_LNP", "Ced_1211r_LNP", "Ced_1212r_LNP", "Ced_1213r_LNP",
    "Ced_1221r_LNP", "Ced_1222r_LNP", "Ced_1223r_LNP", "Ced_1231r_LNP", "Ced_1232r_LNP", "Ced_1233r_LNP", "Ced_1311r_LNP", "Ced_1312r_LNP", "Ced_1313r_LNP",
    "Ced_1321r_LNP", "Ced_1322r_LNP", "Ced_1323r_LNP", "Ced_1331r_LNP", "Ced_1332r_LNP", "Ced_1333r_LNP", "Ced_2211r_LNP", "Ced_2212r_LNP", "Ced_2213r_LNP",
    "Ced_2222r_LNP", "Ced_2223r_LNP", "Ced_2233r_LNP", "Ced_2311r_LNP", "Ced_2312r_LNP", "Ced_2313r_LNP", "Ced_2321r_LNP", "Ced_2322r_LNP", "Ced_2323r_LNP",
    "Ced_2331r_LNP", "Ced_2332r_LNP", "Ced_2333r_LNP", "Ced_3311r_LNP", "Ced_3312r_LNP", "Ced_3313r_LNP", "Ced_3322r_LNP", "Ced_3323r_LNP", "Ced_3333r_LNP",
    "Ced_1112i_LNP", "Ced_1113i_LNP", "Ced_1123i_LNP", "Ced_1211i_LNP", "Ced_1212i_LNP", "Ced_1213i_LNP", "Ced_1221i_LNP", "Ced_1222i_LNP", "Ced_1223i_LNP",
    "Ced_1231i_LNP", "Ced_1232i_LNP", "Ced_1233i_LNP", "Ced_1311i_LNP", "Ced_1312i_LNP", "Ced_1313i_LNP", "Ced_1321i_LNP", "Ced_1322i_LNP", "Ced_1323i_LNP",
    "Ced_1331i_LNP", "Ced_1332i_LNP", "Ced_1333i_LNP", "Ced_2212i_LNP", "Ced_2213i_LNP", "Ced_2223i_LNP", "Ced_2312i_LNP", "Ced_2313i_LNP", "Ced_2321i_LNP",
    "Ced_2322i_LNP", "Ced_2323i_LNP", "Ced_2331i_LNP", "Ced_2332i_LNP", "Ced_2333i_LNP", "Ced_2311i_LNP", "Ced_3312i_LNP", "Ced_3313i_LNP", "Ced_3323i_LNP",
    "Cle_1111r_LNP", "Cle_1112r_LNP", "Cle_1113r_LNP", "Cle_1122r_LNP", "Cle_1123r_LNP", "Cle_1133r_LNP", "Cle_1211r_LNP", "Cle_1212r_LNP", "Cle_1213r_LNP",
    "Cle_1221r_LNP", "Cle_1222r_LNP", "Cle_1223r_LNP", "Cle_1231r_LNP", "Cle_1232r_LNP", "Cle_1233r_LNP", "Cle_1311r_LNP", "Cle_1312r_LNP", "Cle_1313r_LNP",
    "Cle_1321r_LNP", "Cle_1322r_LNP", "Cle_1323r_LNP", "Cle_1331r_LNP", "Cle_1332r_LNP", "Cle_1333r_LNP", "Cle_2211r_LNP", "Cle_2212r_LNP", "Cle_2213r_LNP",
    "Cle_2222r_LNP", "Cle_2223r_LNP", "Cle_2233r_LNP", "Cle_2311r_LNP", "Cle_2312r_LNP", "Cle_2313r_LNP", "Cle_2321r_LNP", "Cle_2322r_LNP", "Cle_2323r_LNP",
    "Cle_2331r_LNP", "Cle_2332r_LNP", "Cle_2333r_LNP", "Cle_3311r_LNP", "Cle_3312r_LNP", "Cle_3313r_LNP", "Cle_3322r_LNP", "Cle_3323r_LNP", "Cle_3333r_LNP",
    "Cle_1112i_LNP", "Cle_1113i_LNP", "Cle_1123i_LNP", "Cle_1211i_LNP", "Cle_1212i_LNP", "Cle_1213i_LNP", "Cle_1221i_LNP", "Cle_1222i_LNP", "Cle_1223i_LNP",
    "Cle_1231i_LNP", "Cle_1232i_LNP", "Cle_1233i_LNP", "Cle_1311i_LNP", "Cle_1312i_LNP", "Cle_1313i_LNP", "Cle_1321i_LNP", "Cle_1322i_LNP", "Cle_1323i_LNP",
    "Cle_1331i_LNP", "Cle_1332i_LNP", "Cle_1333i_LNP", "Cle_2212i_LNP", "Cle_2213i_LNP", "Cle_2223i_LNP", "Cle_2312i_LNP", "Cle_2313i_LNP", "Cle_2321i_LNP",
    "Cle_2322i_LNP", "Cle_2323i_LNP", "Cle_2331i_LNP", "Cle_2332i_LNP", "Cle_2333i_LNP", "Cle_2311i_LNP", "Cle_3312i_LNP", "Cle_3313i_LNP", "Cle_3323i_LNP",
    "Clu_1111r_LNP", "Clu_1112r_LNP", "Clu_1113r_LNP", "Clu_1122r_LNP", "Clu_1123r_LNP", "Clu_1133r_LNP", "Clu_1211r_LNP", "Clu_1212r_LNP", "Clu_1213r_LNP",
    "Clu_1221r_LNP", "Clu_1222r_LNP", "Clu_1223r_LNP", "Clu_1231r_LNP", "Clu_1232r_LNP", "Clu_1233r_LNP", "Clu_1311r_LNP", "Clu_1312r_LNP", "Clu_1313r_LNP",
    "Clu_1321r_LNP", "Clu_1322r_LNP", "Clu_1323r_LNP", "Clu_1331r_LNP", "Clu_1332r_LNP", "Clu_1333r_LNP", "Clu_2211r_LNP", "Clu_2212r_LNP", "Clu_2213r_LNP",
    "Clu_2222r_LNP", "Clu_2223r_LNP", "Clu_2233r_LNP", "Clu_2311r_LNP", "Clu_2312r_LNP", "Clu_2313r_LNP", "Clu_2321r_LNP", "Clu_2322r_LNP", "Clu_2323r_LNP",
    "Clu_2331r_LNP", "Clu_2332r_LNP", "Clu_2333r_LNP", "Clu_3311r_LNP", "Clu_3312r_LNP", "Clu_3313r_LNP", "Clu_3322r_LNP", "Clu_3323r_LNP", "Clu_3333r_LNP",
    "Clu_1112i_LNP", "Clu_1113i_LNP", "Clu_1123i_LNP", "Clu_1211i_LNP", "Clu_1212i_LNP", "Clu_1213i_LNP", "Clu_1221i_LNP", "Clu_1222i_LNP", "Clu_1223i_LNP",
    "Clu_1231i_LNP", "Clu_1232i_LNP", "Clu_1233i_LNP", "Clu_1311i_LNP", "Clu_1312i_LNP", "Clu_1313i_LNP", "Clu_1321i_LNP", "Clu_1322i_LNP", "Clu_1323i_LNP",
    "Clu_1331i_LNP", "Clu_1332i_LNP", "Clu_1333i_LNP", "Clu_2212i_LNP", "Clu_2213i_LNP", "Clu_2223i_LNP", "Clu_2312i_LNP", "Clu_2313i_LNP", "Clu_2321i_LNP",
    "Clu_2322i_LNP", "Clu_2323i_LNP", "Clu_2331i_LNP", "Clu_2332i_LNP", "Clu_2333i_LNP", "Clu_2311i_LNP", "Clu_3312i_LNP", "Clu_3313i_LNP", "Clu_3323i_LNP",
    "Cld_1111r_LNP", "Cld_1112r_LNP", "Cld_1113r_LNP", "Cld_1122r_LNP", "Cld_1123r_LNP", "Cld_1133r_LNP", "Cld_1211r_LNP", "Cld_1212r_LNP", "Cld_1213r_LNP",
    "Cld_1221r_LNP", "Cld_1222r_LNP", "Cld_1223r_LNP", "Cld_1231r_LNP", "Cld_1232r_LNP", "Cld_1233r_LNP", "Cld_1311r_LNP", "Cld_1312r_LNP", "Cld_1313r_LNP",
    "Cld_1321r_LNP", "Cld_1322r_LNP", "Cld_1323r_LNP", "Cld_1331r_LNP", "Cld_1332r_LNP", "Cld_1333r_LNP", "Cld_2211r_LNP", "Cld_2212r_LNP", "Cld_2213r_LNP",
    "Cld_2222r_LNP", "Cld_2223r_LNP", "Cld_2233r_LNP", "Cld_2311r_LNP", "Cld_2312r_LNP", "Cld_2313r_LNP", "Cld_2321r_LNP", "Cld_2322r_LNP", "Cld_2323r_LNP",
    "Cld_2331r_LNP", "Cld_2332r_LNP", "Cld_2333r_LNP", "Cld_3311r_LNP", "Cld_3312r_LNP", "Cld_3313r_LNP", "Cld_3322r_LNP", "Cld_3323r_LNP", "Cld_3333r_LNP",
    "Cld_1112i_LNP", "Cld_1113i_LNP", "Cld_1123i_LNP", "Cld_1211i_LNP", "Cld_1212i_LNP", "Cld_1213i_LNP", "Cld_1221i_LNP", "Cld_1222i_LNP", "Cld_1223i_LNP",
    "Cld_1231i_LNP", "Cld_1232i_LNP", "Cld_1233i_LNP", "Cld_1311i_LNP", "Cld_1312i_LNP", "Cld_1313i_LNP", "Cld_1321i_LNP", "Cld_1322i_LNP", "Cld_1323i_LNP",
    "Cld_1331i_LNP", "Cld_1332i_LNP", "Cld_1333i_LNP", "Cld_2212i_LNP", "Cld_2213i_LNP", "Cld_2223i_LNP", "Cld_2312i_LNP", "Cld_2313i_LNP", "Cld_2321i_LNP",
    "Cld_2322i_LNP", "Cld_2323i_LNP", "Cld_2331i_LNP", "Cld_2332i_LNP", "Cld_2333i_LNP", "Cld_2311i_LNP", "Cld_3312i_LNP", "Cld_3313i_LNP", "Cld_3323i_LNP",
    "Cqe_1111r_LNP", "Cqe_1112r_LNP", "Cqe_1113r_LNP", "Cqe_1122r_LNP", "Cqe_1123r_LNP", "Cqe_1133r_LNP", "Cqe_1211r_LNP", "Cqe_1212r_LNP", "Cqe_1213r_LNP",
    "Cqe_1221r_LNP", "Cqe_1222r_LNP", "Cqe_1223r_LNP", "Cqe_1231r_LNP", "Cqe_1232r_LNP", "Cqe_1233r_LNP", "Cqe_1311r_LNP", "Cqe_1312r_LNP", "Cqe_1313r_LNP",
    "Cqe_1321r_LNP", "Cqe_1322r_LNP", "Cqe_1323r_LNP", "Cqe_1331r_LNP", "Cqe_1332r_LNP", "Cqe_1333r_LNP", "Cqe_2211r_LNP", "Cqe_2212r_LNP", "Cqe_2213r_LNP",
    "Cqe_2222r_LNP", "Cqe_2223r_LNP", "Cqe_2233r_LNP", "Cqe_2311r_LNP", "Cqe_2312r_LNP", "Cqe_2313r_LNP", "Cqe_2321r_LNP", "Cqe_2322r_LNP", "Cqe_2323r_LNP",
    "Cqe_2331r_LNP", "Cqe_2332r_LNP", "Cqe_2333r_LNP", "Cqe_3311r_LNP", "Cqe_3312r_LNP", "Cqe_3313r_LNP", "Cqe_3322r_LNP", "Cqe_3323r_LNP", "Cqe_3333r_LNP",
    "Cqe_1112i_LNP", "Cqe_1113i_LNP", "Cqe_1123i_LNP", "Cqe_1211i_LNP", "Cqe_1212i_LNP", "Cqe_1213i_LNP", "Cqe_1221i_LNP", "Cqe_1222i_LNP", "Cqe_1223i_LNP",
    "Cqe_1231i_LNP", "Cqe_1232i_LNP", "Cqe_1233i_LNP", "Cqe_1311i_LNP", "Cqe_1312i_LNP", "Cqe_1313i_LNP", "Cqe_1321i_LNP", "Cqe_1322i_LNP", "Cqe_1323i_LNP",
    "Cqe_1331i_LNP", "Cqe_1332i_LNP", "Cqe_1333i_LNP", "Cqe_2212i_LNP", "Cqe_2213i_LNP", "Cqe_2223i_LNP", "Cqe_2312i_LNP", "Cqe_2313i_LNP", "Cqe_2321i_LNP",
    "Cqe_2322i_LNP", "Cqe_2323i_LNP", "Cqe_2331i_LNP", "Cqe_2332i_LNP", "Cqe_2333i_LNP", "Cqe_2311i_LNP", "Cqe_3312i_LNP", "Cqe_3313i_LNP", "Cqe_3323i_LNP",
    "Cledq_1111r_LNP", "Cledq_1112r_LNP", "Cledq_1113r_LNP", "Cledq_1121r_LNP", "Cledq_1122r_LNP", "Cledq_1123r_LNP", "Cledq_1131r_LNP", "Cledq_1132r_LNP", "Cledq_1133r_LNP",
    "Cledq_1211r_LNP", "Cledq_1212r_LNP", "Cledq_1213r_LNP", "Cledq_1221r_LNP", "Cledq_1222r_LNP", "Cledq_1223r_LNP", "Cledq_1231r_LNP", "Cledq_1232r_LNP", "Cledq_1233r_LNP",
    "Cledq_1311r_LNP", "Cledq_1312r_LNP", "Cledq_1313r_LNP", "Cledq_1321r_LNP", "Cledq_1322r_LNP", "Cledq_1323r_LNP", "Cledq_1331r_LNP", "Cledq_1332r_LNP", "Cledq_1333r_LNP",
    "Cledq_2111r_LNP", "Cledq_2112r_LNP", "Cledq_2113r_LNP", "Cledq_2121r_LNP", "Cledq_2122r_LNP", "Cledq_2123r_LNP", "Cledq_2131r_LNP", "Cledq_2132r_LNP", "Cledq_2133r_LNP",
    "Cledq_2211r_LNP", "Cledq_2212r_LNP", "Cledq_2213r_LNP", "Cledq_2221r_LNP", "Cledq_2222r_LNP", "Cledq_2223r_LNP", "Cledq_2231r_LNP", "Cledq_2232r_LNP", "Cledq_2233r_LNP",
    "Cledq_2311r_LNP", "Cledq_2312r_LNP", "Cledq_2313r_LNP", "Cledq_2321r_LNP", "Cledq_2322r_LNP", "Cledq_2323r_LNP", "Cledq_2331r_LNP", "Cledq_2332r_LNP", "Cledq_2333r_LNP",
    "Cledq_3111r_LNP", "Cledq_3112r_LNP", "Cledq_3113r_LNP", "Cledq_3121r_LNP", "Cledq_3122r_LNP", "Cledq_3123r_LNP", "Cledq_3131r_LNP", "Cledq_3132r_LNP", "Cledq_3133r_LNP",
    "Cledq_3211r_LNP", "Cledq_3212r_LNP", "Cledq_3213r_LNP", "Cledq_3221r_LNP", "Cledq_3222r_LNP", "Cledq_3223r_LNP", "Cledq_3231r_LNP", "Cledq_3232r_LNP", "Cledq_3233r_LNP",
    "Cledq_3311r_LNP", "Cledq_3312r_LNP", "Cledq_3313r_LNP", "Cledq_3321r_LNP", "Cledq_3322r_LNP", "Cledq_3323r_LNP", "Cledq_3331r_LNP", "Cledq_3332r_LNP", "Cledq_3333r_LNP",
    "Cledq_1111i_LNP", "Cledq_1112i_LNP", "Cledq_1113i_LNP", "Cledq_1121i_LNP", "Cledq_1122i_LNP", "Cledq_1123i_LNP", "Cledq_1131i_LNP", "Cledq_1132i_LNP", "Cledq_1133i_LNP",
    "Cledq_1211i_LNP", "Cledq_1212i_LNP", "Cledq_1213i_LNP", "Cledq_1221i_LNP", "Cledq_1222i_LNP", "Cledq_1223i_LNP", "Cledq_1231i_LNP", "Cledq_1232i_LNP", "Cledq_1233i_LNP",
    "Cledq_1311i_LNP", "Cledq_1312i_LNP", "Cledq_1313i_LNP", "Cledq_1321i_LNP", "Cledq_1322i_LNP", "Cledq_1323i_LNP", "Cledq_1331i_LNP", "Cledq_1332i_LNP", "Cledq_1333i_LNP",
    "Cledq_2111i_LNP", "Cledq_2112i_LNP", "Cledq_2113i_LNP", "Cledq_2121i_LNP", "Cledq_2122i_LNP", "Cledq_2123i_LNP", "Cledq_2131i_LNP", "Cledq_2132i_LNP", "Cledq_2133i_LNP",
    "Cledq_2211i_LNP", "Cledq_2212i_LNP", "Cledq_2213i_LNP", "Cledq_2221i_LNP", "Cledq_2222i_LNP", "Cledq_2223i_LNP", "Cledq_2231i_LNP", "Cledq_2232i_LNP", "Cledq_2233i_LNP",
    "Cledq_2311i_LNP", "Cledq_2312i_LNP", "Cledq_2313i_LNP", "Cledq_2321i_LNP", "Cledq_2322i_LNP", "Cledq_2323i_LNP", "Cledq_2331i_LNP", "Cledq_2332i_LNP", "Cledq_2333i_LNP",
    "Cledq_3111i_LNP", "Cledq_3112i_LNP", "Cledq_3113i_LNP", "Cledq_3121i_LNP", "Cledq_3122i_LNP", "Cledq_3123i_LNP", "Cledq_3131i_LNP", "Cledq_3132i_LNP", "Cledq_3133i_LNP",
    "Cledq_3211i_LNP", "Cledq_3212i_LNP", "Cledq_3213i_LNP", "Cledq_3221i_LNP", "Cledq_3222i_LNP", "Cledq_3223i_LNP", "Cledq_3231i_LNP", "Cledq_3232i_LNP", "Cledq_3233i_LNP",
    "Cledq_3311i_LNP", "Cledq_3312i_LNP", "Cledq_3313i_LNP", "Cledq_3321i_LNP", "Cledq_3322i_LNP", "Cledq_3323i_LNP", "Cledq_3331i_LNP", "Cledq_3332i_LNP", "Cledq_3333i_LNP",
    "Cqq1_1111r_LNP", "Cqq1_1112r_LNP", "Cqq1_1113r_LNP", "Cqq1_1122r_LNP", "Cqq1_1123r_LNP", "Cqq1_1133r_LNP", "Cqq1_1212r_LNP", "Cqq1_1213r_LNP", "Cqq1_1221r_LNP",
    "Cqq1_1222r_LNP", "Cqq1_1223r_LNP", "Cqq1_1231r_LNP", "Cqq1_1232r_LNP", "Cqq1_1233r_LNP", "Cqq1_1313r_LNP", "Cqq1_1322r_LNP", "Cqq1_1323r_LNP", "Cqq1_1331r_LNP",
    "Cqq1_1332r_LNP", "Cqq1_1333r_LNP", "Cqq1_2222r_LNP", "Cqq1_2223r_LNP", "Cqq1_2233r_LNP", "Cqq1_2323r_LNP", "Cqq1_2332r_LNP", "Cqq1_2333r_LNP", "Cqq1_3333r_LNP",
    "Cqq1_1112i_LNP", "Cqq1_1113i_LNP", "Cqq1_1123i_LNP", "Cqq1_1212i_LNP", "Cqq1_1213i_LNP", "Cqq1_1222i_LNP", "Cqq1_1223i_LNP", "Cqq1_1231i_LNP", "Cqq1_1232i_LNP",
    "Cqq1_1233i_LNP", "Cqq1_1313i_LNP", "Cqq1_1322i_LNP", "Cqq1_1323i_LNP", "Cqq1_1332i_LNP", "Cqq1_1333i_LNP", "Cqq1_2223i_LNP", "Cqq1_2323i_LNP", "Cqq1_2333i_LNP",
    "Cqq3_1111r_LNP", "Cqq3_1112r_LNP", "Cqq3_1113r_LNP", "Cqq3_1122r_LNP", "Cqq3_1123r_LNP", "Cqq3_1133r_LNP", "Cqq3_1212r_LNP", "Cqq3_1213r_LNP", "Cqq3_1221r_LNP",
    "Cqq3_1222r_LNP", "Cqq3_1223r_LNP", "Cqq3_1231r_LNP", "Cqq3_1232r_LNP", "Cqq3_1233r_LNP", "Cqq3_1313r_LNP", "Cqq3_1322r_LNP", "Cqq3_1323r_LNP", "Cqq3_1331r_LNP",
    "Cqq3_1332r_LNP", "Cqq3_1333r_LNP", "Cqq3_2222r_LNP", "Cqq3_2223r_LNP", "Cqq3_2233r_LNP", "Cqq3_2323r_LNP", "Cqq3_2332r_LNP", "Cqq3_2333r_LNP", "Cqq3_3333r_LNP",
    "Cqq3_1112i_LNP", "Cqq3_1113i_LNP", "Cqq3_1123i_LNP", "Cqq3_1212i_LNP", "Cqq3_1213i_LNP", "Cqq3_1222i_LNP", "Cqq3_1223i_LNP", "Cqq3_1231i_LNP", "Cqq3_1232i_LNP",
    "Cqq3_1233i_LNP", "Cqq3_1313i_LNP", "Cqq3_1322i_LNP", "Cqq3_1323i_LNP", "Cqq3_1332i_LNP", "Cqq3_1333i_LNP", "Cqq3_2223i_LNP", "Cqq3_2323i_LNP", "Cqq3_2333i_LNP",
    "Cuu_1111r_LNP", "Cuu_1112r_LNP", "Cuu_1113r_LNP", "Cuu_1122r_LNP", "Cuu_1123r_LNP", "Cuu_1133r_LNP", "Cuu_1212r_LNP", "Cuu_1213r_LNP", "Cuu_1221r_LNP",
    "Cuu_1222r_LNP", "Cuu_1223r_LNP", "Cuu_1231r_LNP", "Cuu_1232r_LNP", "Cuu_1233r_LNP", "Cuu_1313r_LNP", "Cuu_1322r_LNP", "Cuu_1323r_LNP", "Cuu_1331r_LNP",
    "Cuu_1332r_LNP", "Cuu_1333r_LNP", "Cuu_2222r_LNP", "Cuu_2223r_LNP", "Cuu_2233r_LNP", "Cuu_2323r_LNP", "Cuu_2332r_LNP", "Cuu_2333r_LNP", "Cuu_3333r_LNP",
    "Cuu_1112i_LNP", "Cuu_1113i_LNP", "Cuu_1123i_LNP", "Cuu_1212i_LNP", "Cuu_1213i_LNP", "Cuu_1222i_LNP", "Cuu_1223i_LNP", "Cuu_1231i_LNP", "Cuu_1232i_LNP",
    "Cuu_1233i_LNP", "Cuu_1313i_LNP", "Cuu_1322i_LNP", "Cuu_1323i_LNP", "Cuu_1332i_LNP", "Cuu_1333i_LNP", "Cuu_2223i_LNP", "Cuu_2323i_LNP", "Cuu_2333i_LNP",
    "Cdd_1111r_LNP", "Cdd_1112r_LNP", "Cdd_1113r_LNP", "Cdd_1122r_LNP", "Cdd_1123r_LNP", "Cdd_1133r_LNP", "Cdd_1212r_LNP", "Cdd_1213r_LNP", "Cdd_1221r_LNP",
    "Cdd_1222r_LNP", "Cdd_1223r_LNP", "Cdd_1231r_LNP", "Cdd_1232r_LNP", "Cdd_1233r_LNP", "Cdd_1313r_LNP", "Cdd_1322r_LNP", "Cdd_1323r_LNP", "Cdd_1331r_LNP",
    "Cdd_1332r_LNP", "Cdd_1333r_LNP", "Cdd_2222r_LNP", "Cdd_2223r_LNP", "Cdd_2233r_LNP", "Cdd_2323r_LNP", "Cdd_2332r_LNP", "Cdd_2333r_LNP", "Cdd_3333r_LNP",
    "Cdd_1112i_LNP", "Cdd_1113i_LNP", "Cdd_1123i_LNP", "Cdd_1212i_LNP", "Cdd_1213i_LNP", "Cdd_1222i_LNP", "Cdd_1223i_LNP", "Cdd_1231i_LNP", "Cdd_1232i_LNP",
    "Cdd_1233i_LNP", "Cdd_1313i_LNP", "Cdd_1322i_LNP", "Cdd_1323i_LNP", "Cdd_1332i_LNP", "Cdd_1333i_LNP", "Cdd_2223i_LNP", "Cdd_2323i_LNP", "Cdd_2333i_LNP",
    "Cud1_1111r_LNP", "Cud1_1112r_LNP", "Cud1_1113r_LNP", "Cud1_1122r_LNP", "Cud1_1123r_LNP", "Cud1_1133r_LNP", "Cud1_1211r_LNP", "Cud1_1212r_LNP", "Cud1_1213r_LNP",
    "Cud1_1221r_LNP", "Cud1_1222r_LNP", "Cud1_1223r_LNP", "Cud1_1231r_LNP", "Cud1_1232r_LNP", "Cud1_1233r_LNP", "Cud1_1311r_LNP", "Cud1_1312r_LNP", "Cud1_1313r_LNP",
    "Cud1_1321r_LNP", "Cud1_1322r_LNP", "Cud1_1323r_LNP", "Cud1_1331r_LNP", "Cud1_1332r_LNP", "Cud1_1333r_LNP", "Cud1_2211r_LNP", "Cud1_2212r_LNP", "Cud1_2213r_LNP",
    "Cud1_2222r_LNP", "Cud1_2223r_LNP", "Cud1_2233r_LNP", "Cud1_2311r_LNP", "Cud1_2312r_LNP", "Cud1_2313r_LNP", "Cud1_2321r_LNP", "Cud1_2322r_LNP", "Cud1_2323r_LNP",
    "Cud1_2331r_LNP", "Cud1_2332r_LNP", "Cud1_2333r_LNP", "Cud1_3311r_LNP", "Cud1_3312r_LNP", "Cud1_3313r_LNP", "Cud1_3322r_LNP", "Cud1_3323r_LNP", "Cud1_3333r_LNP",
    "Cud1_1112i_LNP", "Cud1_1113i_LNP", "Cud1_1123i_LNP", "Cud1_1211i_LNP", "Cud1_1212i_LNP", "Cud1_1213i_LNP", "Cud1_1221i_LNP", "Cud1_1222i_LNP", "Cud1_1223i_LNP",
    "Cud1_1231i_LNP", "Cud1_1232i_LNP", "Cud1_1233i_LNP", "Cud1_1311i_LNP", "Cud1_1312i_LNP", "Cud1_1313i_LNP", "Cud1_1321i_LNP", "Cud1_1322i_LNP", "Cud1_1323i_LNP",
    "Cud1_1331i_LNP", "Cud1_1332i_LNP", "Cud1_1333i_LNP", "Cud1_2212i_LNP", "Cud1_2213i_LNP", "Cud1_2223i_LNP", "Cud1_2312i_LNP", "Cud1_2313i_LNP", "Cud1_2321i_LNP",
    "Cud1_2322i_LNP", "Cud1_2323i_LNP", "Cud1_2331i_LNP", "Cud1_2332i_LNP", "Cud1_2333i_LNP", "Cud1_2311i_LNP", "Cud1_3312i_LNP", "Cud1_3313i_LNP", "Cud1_3323i_LNP",
    "Cud8_1111r_LNP", "Cud8_1112r_LNP", "Cud8_1113r_LNP", "Cud8_1122r_LNP", "Cud8_1123r_LNP", "Cud8_1133r_LNP", "Cud8_1211r_LNP", "Cud8_1212r_LNP", "Cud8_1213r_LNP",
    "Cud8_1221r_LNP", "Cud8_1222r_LNP", "Cud8_1223r_LNP", "Cud8_1231r_LNP", "Cud8_1232r_LNP", "Cud8_1233r_LNP", "Cud8_1311r_LNP", "Cud8_1312r_LNP", "Cud8_1313r_LNP",
    "Cud8_1321r_LNP", "Cud8_1322r_LNP", "Cud8_1323r_LNP", "Cud8_1331r_LNP", "Cud8_1332r_LNP", "Cud8_1333r_LNP", "Cud8_2211r_LNP", "Cud8_2212r_LNP", "Cud8_2213r_LNP",
    "Cud8_2222r_LNP", "Cud8_2223r_LNP", "Cud8_2233r_LNP", "Cud8_2311r_LNP", "Cud8_2312r_LNP", "Cud8_2313r_LNP", "Cud8_2321r_LNP", "Cud8_2322r_LNP", "Cud8_2323r_LNP",
    "Cud8_2331r_LNP", "Cud8_2332r_LNP", "Cud8_2333r_LNP", "Cud8_3311r_LNP", "Cud8_3312r_LNP", "Cud8_3313r_LNP", "Cud8_3322r_LNP", "Cud8_3323r_LNP", "Cud8_3333r_LNP",
    "Cud8_1112i_LNP", "Cud8_1113i_LNP", "Cud8_1123i_LNP", "Cud8_1211i_LNP", "Cud8_1212i_LNP", "Cud8_1213i_LNP", "Cud8_1221i_LNP", "Cud8_1222i_LNP", "Cud8_1223i_LNP",
    "Cud8_1231i_LNP", "Cud8_1232i_LNP", "Cud8_1233i_LNP", "Cud8_1311i_LNP", "Cud8_1312i_LNP", "Cud8_1313i_LNP", "Cud8_1321i_LNP", "Cud8_1322i_LNP", "Cud8_1323i_LNP",
    "Cud8_1331i_LNP", "Cud8_1332i_LNP", "Cud8_1333i_LNP", "Cud8_2212i_LNP", "Cud8_2213i_LNP", "Cud8_2223i_LNP", "Cud8_2312i_LNP", "Cud8_2313i_LNP", "Cud8_2321i_LNP",
    "Cud8_2322i_LNP", "Cud8_2323i_LNP", "Cud8_2331i_LNP", "Cud8_2332i_LNP", "Cud8_2333i_LNP", "Cud8_2311i_LNP", "Cud8_3312i_LNP", "Cud8_3313i_LNP", "Cud8_3323i_LNP",
    "Cqu1_1111r_LNP", "Cqu1_1112r_LNP", "Cqu1_1113r_LNP", "Cqu1_1122r_LNP", "Cqu1_1123r_LNP", "Cqu1_1133r_LNP", "Cqu1_1211r_LNP", "Cqu1_1212r_LNP", "Cqu1_1213r_LNP",
    "Cqu1_1221r_LNP", "Cqu1_1222r_LNP", "Cqu1_1223r_LNP", "Cqu1_1231r_LNP", "Cqu1_1232r_LNP", "Cqu1_1233r_LNP", "Cqu1_1311r_LNP", "Cqu1_1312r_LNP", "Cqu1_1313r_LNP",
    "Cqu1_1321r_LNP", "Cqu1_1322r_LNP", "Cqu1_1323r_LNP", "Cqu1_1331r_LNP", "Cqu1_1332r_LNP", "Cqu1_1333r_LNP", "Cqu1_2211r_LNP", "Cqu1_2212r_LNP", "Cqu1_2213r_LNP",
    "Cqu1_2222r_LNP", "Cqu1_2223r_LNP", "Cqu1_2233r_LNP", "Cqu1_2311r_LNP", "Cqu1_2312r_LNP", "Cqu1_2313r_LNP", "Cqu1_2321r_LNP", "Cqu1_2322r_LNP", "Cqu1_2323r_LNP",
    "Cqu1_2331r_LNP", "Cqu1_2332r_LNP", "Cqu1_2333r_LNP", "Cqu1_3311r_LNP", "Cqu1_3312r_LNP", "Cqu1_3313r_LNP", "Cqu1_3322r_LNP", "Cqu1_3323r_LNP", "Cqu1_3333r_LNP",
    "Cqu1_1112i_LNP", "Cqu1_1113i_LNP", "Cqu1_1123i_LNP", "Cqu1_1211i_LNP", "Cqu1_1212i_LNP", "Cqu1_1213i_LNP", "Cqu1_1221i_LNP", "Cqu1_1222i_LNP", "Cqu1_1223i_LNP",
    "Cqu1_1231i_LNP", "Cqu1_1232i_LNP", "Cqu1_1233i_LNP", "Cqu1_1311i_LNP", "Cqu1_1312i_LNP", "Cqu1_1313i_LNP", "Cqu1_1321i_LNP", "Cqu1_1322i_LNP", "Cqu1_1323i_LNP",
    "Cqu1_1331i_LNP", "Cqu1_1332i_LNP", "Cqu1_1333i_LNP", "Cqu1_2212i_LNP", "Cqu1_2213i_LNP", "Cqu1_2223i_LNP", "Cqu1_2312i_LNP", "Cqu1_2313i_LNP", "Cqu1_2321i_LNP",
    "Cqu1_2322i_LNP", "Cqu1_2323i_LNP", "Cqu1_2331i_LNP", "Cqu1_2332i_LNP", "Cqu1_2333i_LNP", "Cqu1_2311i_LNP", "Cqu1_3312i_LNP", "Cqu1_3313i_LNP", "Cqu1_3323i_LNP",
    "Cqu8_1111r_LNP", "Cqu8_1112r_LNP", "Cqu8_1113r_LNP", "Cqu8_1122r_LNP", "Cqu8_1123r_LNP", "Cqu8_1133r_LNP", "Cqu8_1211r_LNP", "Cqu8_1212r_LNP", "Cqu8_1213r_LNP",
    "Cqu8_1221r_LNP", "Cqu8_1222r_LNP", "Cqu8_1223r_LNP", "Cqu8_1231r_LNP", "Cqu8_1232r_LNP", "Cqu8_1233r_LNP", "Cqu8_1311r_LNP", "Cqu8_1312r_LNP", "Cqu8_1313r_LNP",
    "Cqu8_1321r_LNP", "Cqu8_1322r_LNP", "Cqu8_1323r_LNP", "Cqu8_1331r_LNP", "Cqu8_1332r_LNP", "Cqu8_1333r_LNP", "Cqu8_2211r_LNP", "Cqu8_2212r_LNP", "Cqu8_2213r_LNP",
    "Cqu8_2222r_LNP", "Cqu8_2223r_LNP", "Cqu8_2233r_LNP", "Cqu8_2311r_LNP", "Cqu8_2312r_LNP", "Cqu8_2313r_LNP", "Cqu8_2321r_LNP", "Cqu8_2322r_LNP", "Cqu8_2323r_LNP",
    "Cqu8_2331r_LNP", "Cqu8_2332r_LNP", "Cqu8_2333r_LNP", "Cqu8_3311r_LNP", "Cqu8_3312r_LNP", "Cqu8_3313r_LNP", "Cqu8_3322r_LNP", "Cqu8_3323r_LNP", "Cqu8_3333r_LNP",
    "Cqu8_1112i_LNP", "Cqu8_1113i_LNP", "Cqu8_1123i_LNP", "Cqu8_1211i_LNP", "Cqu8_1212i_LNP", "Cqu8_1213i_LNP", "Cqu8_1221i_LNP", "Cqu8_1222i_LNP", "Cqu8_1223i_LNP",
    "Cqu8_1231i_LNP", "Cqu8_1232i_LNP", "Cqu8_1233i_LNP", "Cqu8_1311i_LNP", "Cqu8_1312i_LNP", "Cqu8_1313i_LNP", "Cqu8_1321i_LNP", "Cqu8_1322i_LNP", "Cqu8_1323i_LNP",
    "Cqu8_1331i_LNP", "Cqu8_1332i_LNP", "Cqu8_1333i_LNP", "Cqu8_2212i_LNP", "Cqu8_2213i_LNP", "Cqu8_2223i_LNP", "Cqu8_2312i_LNP", "Cqu8_2313i_LNP", "Cqu8_2321i_LNP",
    "Cqu8_2322i_LNP", "Cqu8_2323i_LNP", "Cqu8_2331i_LNP", "Cqu8_2332i_LNP", "Cqu8_2333i_LNP", "Cqu8_2311i_LNP", "Cqu8_3312i_LNP", "Cqu8_3313i_LNP", "Cqu8_3323i_LNP",
    "Cqd1_1111r_LNP", "Cqd1_1112r_LNP", "Cqd1_1113r_LNP", "Cqd1_1122r_LNP", "Cqd1_1123r_LNP", "Cqd1_1133r_LNP", "Cqd1_1211r_LNP", "Cqd1_1212r_LNP", "Cqd1_1213r_LNP",
    "Cqd1_1221r_LNP", "Cqd1_1222r_LNP", "Cqd1_1223r_LNP", "Cqd1_1231r_LNP", "Cqd1_1232r_LNP", "Cqd1_1233r_LNP", "Cqd1_1311r_LNP", "Cqd1_1312r_LNP", "Cqd1_1313r_LNP",
    "Cqd1_1321r_LNP", "Cqd1_1322r_LNP", "Cqd1_1323r_LNP", "Cqd1_1331r_LNP", "Cqd1_1332r_LNP", "Cqd1_1333r_LNP", "Cqd1_2211r_LNP", "Cqd1_2212r_LNP", "Cqd1_2213r_LNP",
    "Cqd1_2222r_LNP", "Cqd1_2223r_LNP", "Cqd1_2233r_LNP", "Cqd1_2311r_LNP", "Cqd1_2312r_LNP", "Cqd1_2313r_LNP", "Cqd1_2321r_LNP", "Cqd1_2322r_LNP", "Cqd1_2323r_LNP",
    "Cqd1_2331r_LNP", "Cqd1_2332r_LNP", "Cqd1_2333r_LNP", "Cqd1_3311r_LNP", "Cqd1_3312r_LNP", "Cqd1_3313r_LNP", "Cqd1_3322r_LNP", "Cqd1_3323r_LNP", "Cqd1_3333r_LNP",
    "Cqd1_1112i_LNP", "Cqd1_1113i_LNP", "Cqd1_1123i_LNP", "Cqd1_1211i_LNP", "Cqd1_1212i_LNP", "Cqd1_1213i_LNP", "Cqd1_1221i_LNP", "Cqd1_1222i_LNP", "Cqd1_1223i_LNP",
    "Cqd1_1231i_LNP", "Cqd1_1232i_LNP", "Cqd1_1233i_LNP", "Cqd1_1311i_LNP", "Cqd1_1312i_LNP", "Cqd1_1313i_LNP", "Cqd1_1321i_LNP", "Cqd1_1322i_LNP", "Cqd1_1323i_LNP",
    "Cqd1_1331i_LNP", "Cqd1_1332i_LNP", "Cqd1_1333i_LNP", "Cqd1_2212i_LNP", "Cqd1_2213i_LNP", "Cqd1_2223i_LNP", "Cqd1_2312i_LNP", "Cqd1_2313i_LNP", "Cqd1_2321i_LNP",
    "Cqd1_2322i_LNP", "Cqd1_2323i_LNP", "Cqd1_2331i_LNP", "Cqd1_2332i_LNP", "Cqd1_2333i_LNP", "Cqd1_2311i_LNP", "Cqd1_3312i_LNP", "Cqd1_3313i_LNP", "Cqd1_3323i_LNP",
    "Cqd8_1111r_LNP", "Cqd8_1112r_LNP", "Cqd8_1113r_LNP", "Cqd8_1122r_LNP", "Cqd8_1123r_LNP", "Cqd8_1133r_LNP", "Cqd8_1211r_LNP", "Cqd8_1212r_LNP", "Cqd8_1213r_LNP",
    "Cqd8_1221r_LNP", "Cqd8_1222r_LNP", "Cqd8_1223r_LNP", "Cqd8_1231r_LNP", "Cqd8_1232r_LNP", "Cqd8_1233r_LNP", "Cqd8_1311r_LNP", "Cqd8_1312r_LNP", "Cqd8_1313r_LNP",
    "Cqd8_1321r_LNP", "Cqd8_1322r_LNP", "Cqd8_1323r_LNP", "Cqd8_1331r_LNP", "Cqd8_1332r_LNP", "Cqd8_1333r_LNP", "Cqd8_2211r_LNP", "Cqd8_2212r_LNP", "Cqd8_2213r_LNP",
    "Cqd8_2222r_LNP", "Cqd8_2223r_LNP", "Cqd8_2233r_LNP", "Cqd8_2311r_LNP", "Cqd8_2312r_LNP", "Cqd8_2313r_LNP", "Cqd8_2321r_LNP", "Cqd8_2322r_LNP", "Cqd8_2323r_LNP",
    "Cqd8_2331r_LNP", "Cqd8_2332r_LNP", "Cqd8_2333r_LNP", "Cqd8_3311r_LNP", "Cqd8_3312r_LNP", "Cqd8_3313r_LNP", "Cqd8_3322r_LNP", "Cqd8_3323r_LNP", "Cqd8_3333r_LNP",
    "Cqd8_1112i_LNP", "Cqd8_1113i_LNP", "Cqd8_1123i_LNP", "Cqd8_1211i_LNP", "Cqd8_1212i_LNP", "Cqd8_1213i_LNP", "Cqd8_1221i_LNP", "Cqd8_1222i_LNP", "Cqd8_1223i_LNP",
    "Cqd8_1231i_LNP", "Cqd8_1232i_LNP", "Cqd8_1233i_LNP", "Cqd8_1311i_LNP", "Cqd8_1312i_LNP", "Cqd8_1313i_LNP", "Cqd8_1321i_LNP", "Cqd8_1322i_LNP", "Cqd8_1323i_LNP",
    "Cqd8_1331i_LNP", "Cqd8_1332i_LNP", "Cqd8_1333i_LNP", "Cqd8_2212i_LNP", "Cqd8_2213i_LNP", "Cqd8_2223i_LNP", "Cqd8_2312i_LNP", "Cqd8_2313i_LNP", "Cqd8_2321i_LNP",
    "Cqd8_2322i_LNP", "Cqd8_2323i_LNP", "Cqd8_2331i_LNP", "Cqd8_2332i_LNP", "Cqd8_2333i_LNP", "Cqd8_2311i_LNP", "Cqd8_3312i_LNP", "Cqd8_3313i_LNP", "Cqd8_3323i_LNP",
    "Cquqd1_1111r_LNP", "Cquqd1_1112r_LNP", "Cquqd1_1113r_LNP", "Cquqd1_1121r_LNP", "Cquqd1_1122r_LNP", "Cquqd1_1123r_LNP", "Cquqd1_1131r_LNP", "Cquqd1_1132r_LNP", "Cquqd1_1133r_LNP",
    "Cquqd1_1211r_LNP", "Cquqd1_1212r_LNP", "Cquqd1_1213r_LNP", "Cquqd1_1221r_LNP", "Cquqd1_1222r_LNP", "Cquqd1_1223r_LNP", "Cquqd1_1231r_LNP", "Cquqd1_1232r_LNP", "Cquqd1_1233r_LNP",
    "Cquqd1_1311r_LNP", "Cquqd1_1312r_LNP", "Cquqd1_1313r_LNP", "Cquqd1_1321r_LNP", "Cquqd1_1322r_LNP", "Cquqd1_1323r_LNP", "Cquqd1_1331r_LNP", "Cquqd1_1332r_LNP", "Cquqd1_1333r_LNP",
    "Cquqd1_2111r_LNP", "Cquqd1_2112r_LNP", "Cquqd1_2113r_LNP", "Cquqd1_2121r_LNP", "Cquqd1_2122r_LNP", "Cquqd1_2123r_LNP", "Cquqd1_2131r_LNP", "Cquqd1_2132r_LNP", "Cquqd1_2133r_LNP",
    "Cquqd1_2211r_LNP", "Cquqd1_2212r_LNP", "Cquqd1_2213r_LNP", "Cquqd1_2221r_LNP", "Cquqd1_2222r_LNP", "Cquqd1_2223r_LNP", "Cquqd1_2231r_LNP", "Cquqd1_2232r_LNP", "Cquqd1_2233r_LNP",
    "Cquqd1_2311r_LNP", "Cquqd1_2312r_LNP", "Cquqd1_2313r_LNP", "Cquqd1_2321r_LNP", "Cquqd1_2322r_LNP", "Cquqd1_2323r_LNP", "Cquqd1_2331r_LNP", "Cquqd1_2332r_LNP", "Cquqd1_2333r_LNP",
    "Cquqd1_3111r_LNP", "Cquqd1_3112r_LNP", "Cquqd1_3113r_LNP", "Cquqd1_3121r_LNP", "Cquqd1_3122r_LNP", "Cquqd1_3123r_LNP", "Cquqd1_3131r_LNP", "Cquqd1_3132r_LNP", "Cquqd1_3133r_LNP",
    "Cquqd1_3211r_LNP", "Cquqd1_3212r_LNP", "Cquqd1_3213r_LNP", "Cquqd1_3221r_LNP", "Cquqd1_3222r_LNP", "Cquqd1_3223r_LNP", "Cquqd1_3231r_LNP", "Cquqd1_3232r_LNP", "Cquqd1_3233r_LNP",
    "Cquqd1_3311r_LNP", "Cquqd1_3312r_LNP", "Cquqd1_3313r_LNP", "Cquqd1_3321r_LNP", "Cquqd1_3322r_LNP", "Cquqd1_3323r_LNP", "Cquqd1_3331r_LNP", "Cquqd1_3332r_LNP", "Cquqd1_3333r_LNP",
    "Cquqd1_1111i_LNP", "Cquqd1_1112i_LNP", "Cquqd1_1113i_LNP", "Cquqd1_1121i_LNP", "Cquqd1_1122i_LNP", "Cquqd1_1123i_LNP", "Cquqd1_1131i_LNP", "Cquqd1_1132i_LNP", "Cquqd1_1133i_LNP",
    "Cquqd1_1211i_LNP", "Cquqd1_1212i_LNP", "Cquqd1_1213i_LNP", "Cquqd1_1221i_LNP", "Cquqd1_1222i_LNP", "Cquqd1_1223i_LNP", "Cquqd1_1231i_LNP", "Cquqd1_1232i_LNP", "Cquqd1_1233i_LNP",
    "Cquqd1_1311i_LNP", "Cquqd1_1312i_LNP", "Cquqd1_1313i_LNP", "Cquqd1_1321i_LNP", "Cquqd1_1322i_LNP", "Cquqd1_1323i_LNP", "Cquqd1_1331i_LNP", "Cquqd1_1332i_LNP", "Cquqd1_1333i_LNP",
    "Cquqd1_2111i_LNP", "Cquqd1_2112i_LNP", "Cquqd1_2113i_LNP", "Cquqd1_2121i_LNP", "Cquqd1_2122i_LNP", "Cquqd1_2123i_LNP", "Cquqd1_2131i_LNP", "Cquqd1_2132i_LNP", "Cquqd1_2133i_LNP",
    "Cquqd1_2211i_LNP", "Cquqd1_2212i_LNP", "Cquqd1_2213i_LNP", "Cquqd1_2221i_LNP", "Cquqd1_2222i_LNP", "Cquqd1_2223i_LNP", "Cquqd1_2231i_LNP", "Cquqd1_2232i_LNP", "Cquqd1_2233i_LNP",
    "Cquqd1_2311i_LNP", "Cquqd1_2312i_LNP", "Cquqd1_2313i_LNP", "Cquqd1_2321i_LNP", "Cquqd1_2322i_LNP", "Cquqd1_2323i_LNP", "Cquqd1_2331i_LNP", "Cquqd1_2332i_LNP", "Cquqd1_2333i_LNP",
    "Cquqd1_3111i_LNP", "Cquqd1_3112i_LNP", "Cquqd1_3113i_LNP", "Cquqd1_3121i_LNP", "Cquqd1_3122i_LNP", "Cquqd1_3123i_LNP", "Cquqd1_3131i_LNP", "Cquqd1_3132i_LNP", "Cquqd1_3133i_LNP",
    "Cquqd1_3211i_LNP", "Cquqd1_3212i_LNP", "Cquqd1_3213i_LNP", "Cquqd1_3221i_LNP", "Cquqd1_3222i_LNP", "Cquqd1_3223i_LNP", "Cquqd1_3231i_LNP", "Cquqd1_3232i_LNP", "Cquqd1_3233i_LNP",
    "Cquqd1_3311i_LNP", "Cquqd1_3312i_LNP", "Cquqd1_3313i_LNP", "Cquqd1_3321i_LNP", "Cquqd1_3322i_LNP", "Cquqd1_3323i_LNP", "Cquqd1_3331i_LNP", "Cquqd1_3332i_LNP", "Cquqd1_3333i_LNP",
    "Cquqd8_1111r_LNP", "Cquqd8_1112r_LNP", "Cquqd8_1113r_LNP", "Cquqd8_1121r_LNP", "Cquqd8_1122r_LNP", "Cquqd8_1123r_LNP", "Cquqd8_1131r_LNP", "Cquqd8_1132r_LNP", "Cquqd8_1133r_LNP",
    "Cquqd8_1211r_LNP", "Cquqd8_1212r_LNP", "Cquqd8_1213r_LNP", "Cquqd8_1221r_LNP", "Cquqd8_1222r_LNP", "Cquqd8_1223r_LNP", "Cquqd8_1231r_LNP", "Cquqd8_1232r_LNP", "Cquqd8_1233r_LNP",
    "Cquqd8_1311r_LNP", "Cquqd8_1312r_LNP", "Cquqd8_1313r_LNP", "Cquqd8_1321r_LNP", "Cquqd8_1322r_LNP", "Cquqd8_1323r_LNP", "Cquqd8_1331r_LNP", "Cquqd8_1332r_LNP", "Cquqd8_1333r_LNP",
    "Cquqd8_2111r_LNP", "Cquqd8_2112r_LNP", "Cquqd8_2113r_LNP", "Cquqd8_2121r_LNP", "Cquqd8_2122r_LNP", "Cquqd8_2123r_LNP", "Cquqd8_2131r_LNP", "Cquqd8_2132r_LNP", "Cquqd8_2133r_LNP",
    "Cquqd8_2211r_LNP", "Cquqd8_2212r_LNP", "Cquqd8_2213r_LNP", "Cquqd8_2221r_LNP", "Cquqd8_2222r_LNP", "Cquqd8_2223r_LNP", "Cquqd8_2231r_LNP", "Cquqd8_2232r_LNP", "Cquqd8_2233r_LNP",
    "Cquqd8_2311r_LNP", "Cquqd8_2312r_LNP", "Cquqd8_2313r_LNP", "Cquqd8_2321r_LNP", "Cquqd8_2322r_LNP", "Cquqd8_2323r_LNP", "Cquqd8_2331r_LNP", "Cquqd8_2332r_LNP", "Cquqd8_2333r_LNP",
    "Cquqd8_3111r_LNP", "Cquqd8_3112r_LNP", "Cquqd8_3113r_LNP", "Cquqd8_3121r_LNP", "Cquqd8_3122r_LNP", "Cquqd8_3123r_LNP", "Cquqd8_3131r_LNP", "Cquqd8_3132r_LNP", "Cquqd8_3133r_LNP",
    "Cquqd8_3211r_LNP", "Cquqd8_3212r_LNP", "Cquqd8_3213r_LNP", "Cquqd8_3221r_LNP", "Cquqd8_3222r_LNP", "Cquqd8_3223r_LNP", "Cquqd8_3231r_LNP", "Cquqd8_3232r_LNP", "Cquqd8_3233r_LNP",
    "Cquqd8_3311r_LNP", "Cquqd8_3312r_LNP", "Cquqd8_3313r_LNP", "Cquqd8_3321r_LNP", "Cquqd8_3322r_LNP", "Cquqd8_3323r_LNP", "Cquqd8_3331r_LNP", "Cquqd8_3332r_LNP", "Cquqd8_3333r_LNP",
    "Cquqd8_1111i_LNP", "Cquqd8_1112i_LNP", "Cquqd8_1113i_LNP", "Cquqd8_1121i_LNP", "Cquqd8_1122i_LNP", "Cquqd8_1123i_LNP", "Cquqd8_1131i_LNP", "Cquqd8_1132i_LNP", "Cquqd8_1133i_LNP",
    "Cquqd8_1211i_LNP", "Cquqd8_1212i_LNP", "Cquqd8_1213i_LNP", "Cquqd8_1221i_LNP", "Cquqd8_1222i_LNP", "Cquqd8_1223i_LNP", "Cquqd8_1231i_LNP", "Cquqd8_1232i_LNP", "Cquqd8_1233i_LNP",
    "Cquqd8_1311i_LNP", "Cquqd8_1312i_LNP", "Cquqd8_1313i_LNP", "Cquqd8_1321i_LNP", "Cquqd8_1322i_LNP", "Cquqd8_1323i_LNP", "Cquqd8_1331i_LNP", "Cquqd8_1332i_LNP", "Cquqd8_1333i_LNP",
    "Cquqd8_2111i_LNP", "Cquqd8_2112i_LNP", "Cquqd8_2113i_LNP", "Cquqd8_2121i_LNP", "Cquqd8_2122i_LNP", "Cquqd8_2123i_LNP", "Cquqd8_2131i_LNP", "Cquqd8_2132i_LNP", "Cquqd8_2133i_LNP",
    "Cquqd8_2211i_LNP", "Cquqd8_2212i_LNP", "Cquqd8_2213i_LNP", "Cquqd8_2221i_LNP", "Cquqd8_2222i_LNP", "Cquqd8_2223i_LNP", "Cquqd8_2231i_LNP", "Cquqd8_2232i_LNP", "Cquqd8_2233i_LNP",
    "Cquqd8_2311i_LNP", "Cquqd8_2312i_LNP", "Cquqd8_2313i_LNP", "Cquqd8_2321i_LNP", "Cquqd8_2322i_LNP", "Cquqd8_2323i_LNP", "Cquqd8_2331i_LNP", "Cquqd8_2332i_LNP", "Cquqd8_2333i_LNP",
    "Cquqd8_3111i_LNP", "Cquqd8_3112i_LNP", "Cquqd8_3113i_LNP", "Cquqd8_3121i_LNP", "Cquqd8_3122i_LNP", "Cquqd8_3123i_LNP", "Cquqd8_3131i_LNP", "Cquqd8_3132i_LNP", "Cquqd8_3133i_LNP",
    "Cquqd8_3211i_LNP", "Cquqd8_3212i_LNP", "Cquqd8_3213i_LNP", "Cquqd8_3221i_LNP", "Cquqd8_3222i_LNP", "Cquqd8_3223i_LNP", "Cquqd8_3231i_LNP", "Cquqd8_3232i_LNP", "Cquqd8_3233i_LNP",
    "Cquqd8_3311i_LNP", "Cquqd8_3312i_LNP", "Cquqd8_3313i_LNP", "Cquqd8_3321i_LNP", "Cquqd8_3322i_LNP", "Cquqd8_3323i_LNP", "Cquqd8_3331i_LNP", "Cquqd8_3332i_LNP", "Cquqd8_3333i_LNP",
    "Clequ1_1111r_LNP", "Clequ1_1112r_LNP", "Clequ1_1113r_LNP", "Clequ1_1121r_LNP", "Clequ1_1122r_LNP", "Clequ1_1123r_LNP", "Clequ1_1131r_LNP", "Clequ1_1132r_LNP", "Clequ1_1133r_LNP",
    "Clequ1_1211r_LNP", "Clequ1_1212r_LNP", "Clequ1_1213r_LNP", "Clequ1_1221r_LNP", "Clequ1_1222r_LNP", "Clequ1_1223r_LNP", "Clequ1_1231r_LNP", "Clequ1_1232r_LNP", "Clequ1_1233r_LNP",
    "Clequ1_1311r_LNP", "Clequ1_1312r_LNP", "Clequ1_1313r_LNP", "Clequ1_1321r_LNP", "Clequ1_1322r_LNP", "Clequ1_1323r_LNP", "Clequ1_1331r_LNP", "Clequ1_1332r_LNP", "Clequ1_1333r_LNP",
    "Clequ1_2111r_LNP", "Clequ1_2112r_LNP", "Clequ1_2113r_LNP", "Clequ1_2121r_LNP", "Clequ1_2122r_LNP", "Clequ1_2123r_LNP", "Clequ1_2131r_LNP", "Clequ1_2132r_LNP", "Clequ1_2133r_LNP",
    "Clequ1_2211r_LNP", "Clequ1_2212r_LNP", "Clequ1_2213r_LNP", "Clequ1_2221r_LNP", "Clequ1_2222r_LNP", "Clequ1_2223r_LNP", "Clequ1_2231r_LNP", "Clequ1_2232r_LNP", "Clequ1_2233r_LNP",
    "Clequ1_2311r_LNP", "Clequ1_2312r_LNP", "Clequ1_2313r_LNP", "Clequ1_2321r_LNP", "Clequ1_2322r_LNP", "Clequ1_2323r_LNP", "Clequ1_2331r_LNP", "Clequ1_2332r_LNP", "Clequ1_2333r_LNP",
    "Clequ1_3111r_LNP", "Clequ1_3112r_LNP", "Clequ1_3113r_LNP", "Clequ1_3121r_LNP", "Clequ1_3122r_LNP", "Clequ1_3123r_LNP", "Clequ1_3131r_LNP", "Clequ1_3132r_LNP", "Clequ1_3133r_LNP",
    "Clequ1_3211r_LNP", "Clequ1_3212r_LNP", "Clequ1_3213r_LNP", "Clequ1_3221r_LNP", "Clequ1_3222r_LNP", "Clequ1_3223r_LNP", "Clequ1_3231r_LNP", "Clequ1_3232r_LNP", "Clequ1_3233r_LNP",
    "Clequ1_3311r_LNP", "Clequ1_3312r_LNP", "Clequ1_3313r_LNP", "Clequ1_3321r_LNP", "Clequ1_3322r_LNP", "Clequ1_3323r_LNP", "Clequ1_3331r_LNP", "Clequ1_3332r_LNP", "Clequ1_3333r_LNP",
    "Clequ1_1111i_LNP", "Clequ1_1112i_LNP", "Clequ1_1113i_LNP", "Clequ1_1121i_LNP", "Clequ1_1122i_LNP", "Clequ1_1123i_LNP", "Clequ1_1131i_LNP", "Clequ1_1132i_LNP", "Clequ1_1133i_LNP",
    "Clequ1_1211i_LNP", "Clequ1_1212i_LNP", "Clequ1_1213i_LNP", "Clequ1_1221i_LNP", "Clequ1_1222i_LNP", "Clequ1_1223i_LNP", "Clequ1_1231i_LNP", "Clequ1_1232i_LNP", "Clequ1_1233i_LNP",
    "Clequ1_1311i_LNP", "Clequ1_1312i_LNP", "Clequ1_1313i_LNP", "Clequ1_1321i_LNP", "Clequ1_1322i_LNP", "Clequ1_1323i_LNP", "Clequ1_1331i_LNP", "Clequ1_1332i_LNP", "Clequ1_1333i_LNP",
    "Clequ1_2111i_LNP", "Clequ1_2112i_LNP", "Clequ1_2113i_LNP", "Clequ1_2121i_LNP", "Clequ1_2122i_LNP", "Clequ1_2123i_LNP", "Clequ1_2131i_LNP", "Clequ1_2132i_LNP", "Clequ1_2133i_LNP",
    "Clequ1_2211i_LNP", "Clequ1_2212i_LNP", "Clequ1_2213i_LNP", "Clequ1_2221i_LNP", "Clequ1_2222i_LNP", "Clequ1_2223i_LNP", "Clequ1_2231i_LNP", "Clequ1_2232i_LNP", "Clequ1_2233i_LNP",
    "Clequ1_2311i_LNP", "Clequ1_2312i_LNP", "Clequ1_2313i_LNP", "Clequ1_2321i_LNP", "Clequ1_2322i_LNP", "Clequ1_2323i_LNP", "Clequ1_2331i_LNP", "Clequ1_2332i_LNP", "Clequ1_2333i_LNP",
    "Clequ1_3111i_LNP", "Clequ1_3112i_LNP", "Clequ1_3113i_LNP", "Clequ1_3121i_LNP", "Clequ1_3122i_LNP", "Clequ1_3123i_LNP", "Clequ1_3131i_LNP", "Clequ1_3132i_LNP", "Clequ1_3133i_LNP",
    "Clequ1_3211i_LNP", "Clequ1_3212i_LNP", "Clequ1_3213i_LNP", "Clequ1_3221i_LNP", "Clequ1_3222i_LNP", "Clequ1_3223i_LNP", "Clequ1_3231i_LNP", "Clequ1_3232i_LNP", "Clequ1_3233i_LNP",
    "Clequ1_3311i_LNP", "Clequ1_3312i_LNP", "Clequ1_3313i_LNP", "Clequ1_3321i_LNP", "Clequ1_3322i_LNP", "Clequ1_3323i_LNP", "Clequ1_3331i_LNP", "Clequ1_3332i_LNP", "Clequ1_3333i_LNP",
    "Clequ3_1111r_LNP", "Clequ3_1112r_LNP", "Clequ3_1113r_LNP", "Clequ3_1121r_LNP", "Clequ3_1122r_LNP", "Clequ3_1123r_LNP", "Clequ3_1131r_LNP", "Clequ3_1132r_LNP", "Clequ3_1133r_LNP",
    "Clequ3_1211r_LNP", "Clequ3_1212r_LNP", "Clequ3_1213r_LNP", "Clequ3_1221r_LNP", "Clequ3_1222r_LNP", "Clequ3_1223r_LNP", "Clequ3_1231r_LNP", "Clequ3_1232r_LNP", "Clequ3_1233r_LNP",
    "Clequ3_1311r_LNP", "Clequ3_1312r_LNP", "Clequ3_1313r_LNP", "Clequ3_1321r_LNP", "Clequ3_1322r_LNP", "Clequ3_1323r_LNP", "Clequ3_1331r_LNP", "Clequ3_1332r_LNP", "Clequ3_1333r_LNP",
    "Clequ3_2111r_LNP", "Clequ3_2112r_LNP", "Clequ3_2113r_LNP", "Clequ3_2121r_LNP", "Clequ3_2122r_LNP", "Clequ3_2123r_LNP", "Clequ3_2131r_LNP", "Clequ3_2132r_LNP", "Clequ3_2133r_LNP",
    "Clequ3_2211r_LNP", "Clequ3_2212r_LNP", "Clequ3_2213r_LNP", "Clequ3_2221r_LNP", "Clequ3_2222r_LNP", "Clequ3_2223r_LNP", "Clequ3_2231r_LNP", "Clequ3_2232r_LNP", "Clequ3_2233r_LNP",
    "Clequ3_2311r_LNP", "Clequ3_2312r_LNP", "Clequ3_2313r_LNP", "Clequ3_2321r_LNP", "Clequ3_2322r_LNP", "Clequ3_2323r_LNP", "Clequ3_2331r_LNP", "Clequ3_2332r_LNP", "Clequ3_2333r_LNP",
    "Clequ3_3111r_LNP", "Clequ3_3112r_LNP", "Clequ3_3113r_LNP", "Clequ3_3121r_LNP", "Clequ3_3122r_LNP", "Clequ3_3123r_LNP", "Clequ3_3131r_LNP", "Clequ3_3132r_LNP", "Clequ3_3133r_LNP",
    "Clequ3_3211r_LNP", "Clequ3_3212r_LNP", "Clequ3_3213r_LNP", "Clequ3_3221r_LNP", "Clequ3_3222r_LNP", "Clequ3_3223r_LNP", "Clequ3_3231r_LNP", "Clequ3_3232r_LNP", "Clequ3_3233r_LNP",
    "Clequ3_3311r_LNP", "Clequ3_3312r_LNP", "Clequ3_3313r_LNP", "Clequ3_3321r_LNP", "Clequ3_3322r_LNP", "Clequ3_3323r_LNP", "Clequ3_3331r_LNP", "Clequ3_3332r_LNP", "Clequ3_3333r_LNP",
    "Clequ3_1111i_LNP", "Clequ3_1112i_LNP", "Clequ3_1113i_LNP", "Clequ3_1121i_LNP", "Clequ3_1122i_LNP", "Clequ3_1123i_LNP", "Clequ3_1131i_LNP", "Clequ3_1132i_LNP", "Clequ3_1133i_LNP",
    "Clequ3_1211i_LNP", "Clequ3_1212i_LNP", "Clequ3_1213i_LNP", "Clequ3_1221i_LNP", "Clequ3_1222i_LNP", "Clequ3_1223i_LNP", "Clequ3_1231i_LNP", "Clequ3_1232i_LNP", "Clequ3_1233i_LNP",
    "Clequ3_1311i_LNP", "Clequ3_1312i_LNP", "Clequ3_1313i_LNP", "Clequ3_1321i_LNP", "Clequ3_1322i_LNP", "Clequ3_1323i_LNP", "Clequ3_1331i_LNP", "Clequ3_1332i_LNP", "Clequ3_1333i_LNP",
    "Clequ3_2111i_LNP", "Clequ3_2112i_LNP", "Clequ3_2113i_LNP", "Clequ3_2121i_LNP", "Clequ3_2122i_LNP", "Clequ3_2123i_LNP", "Clequ3_2131i_LNP", "Clequ3_2132i_LNP", "Clequ3_2133i_LNP",
    "Clequ3_2211i_LNP", "Clequ3_2212i_LNP", "Clequ3_2213i_LNP", "Clequ3_2221i_LNP", "Clequ3_2222i_LNP", "Clequ3_2223i_LNP", "Clequ3_2231i_LNP", "Clequ3_2232i_LNP", "Clequ3_2233i_LNP",
    "Clequ3_2311i_LNP", "Clequ3_2312i_LNP", "Clequ3_2313i_LNP", "Clequ3_2321i_LNP", "Clequ3_2322i_LNP", "Clequ3_2323i_LNP", "Clequ3_2331i_LNP", "Clequ3_2332i_LNP", "Clequ3_2333i_LNP",
    "Clequ3_3111i_LNP", "Clequ3_3112i_LNP", "Clequ3_3113i_LNP", "Clequ3_3121i_LNP", "Clequ3_3122i_LNP", "Clequ3_3123i_LNP", "Clequ3_3131i_LNP", "Clequ3_3132i_LNP", "Clequ3_3133i_LNP",
    "Clequ3_3211i_LNP", "Clequ3_3212i_LNP", "Clequ3_3213i_LNP", "Clequ3_3221i_LNP", "Clequ3_3222i_LNP", "Clequ3_3223i_LNP", "Clequ3_3231i_LNP", "Clequ3_3232i_LNP", "Clequ3_3233i_LNP",
    "Clequ3_3311i_LNP", "Clequ3_3312i_LNP", "Clequ3_3313i_LNP", "Clequ3_3321i_LNP", "Clequ3_3322i_LNP", "Clequ3_3323i_LNP", "Clequ3_3331i_LNP", "Clequ3_3332i_LNP", "Clequ3_3333i_LNP",
    "Lambda_NP"/*,
    "BrHinv", "BrHexo",
    "dg1Z", "dKappaga", "lambZ",
    "eggFint", "eggFpar", "ettHint", "ettHpar",
    "eVBFint", "eVBFpar", "eWHint", "eWHpar", "eZHint", "eZHpar",
    "eeeWBFint", "eeeWBFpar", "eeeZHint", "eeeZHpar", "eeettHint", "eeettHpar",
    "eepWBFint", "eepWBFpar", "eepZBFint", "eepZBFpar",
    "eHggint", "eHggpar", "eHWWint", "eHWWpar", "eHZZint", "eHZZpar", "eHZgaint", "eHZgapar",
    "eHgagaint", "eHgagapar", "eHmumuint", "eHmumupar", "eHtautauint", "eHtautaupar",
    "eHccint", "eHccpar", "eHbbint", "eHbbpar",
    "eeeWWint", "edeeWWdcint",
    "eggFHgaga", "eggFHZga", "eggFHZZ", "eggFHWW", "eggFHtautau", "eggFHbb", "eggFHmumu",
    "eVBFHgaga", "eVBFHZga", "eVBFHZZ", "eVBFHWW", "eVBFHtautau", "eVBFHbb", "eVBFHmumu",
    "eWHgaga", "eWHZga", "eWHZZ", "eWHWW", "eWHtautau", "eWHbb", "eWHmumu",
    "eZHgaga", "eZHZga", "eZHZZ", "eZHWW", "eZHtautau", "eZHbb", "eZHmumu",
    "ettHgaga", "ettHZga", "ettHZZ", "ettHWW", "ettHtautau", "ettHbb", "ettHmumu",
    "eVBFHinv", "eVHinv",
    "nuisP1", "nuisP2", "nuisP3", "nuisP4", "nuisP5", "nuisP6", "nuisP7", "nuisP8", "nuisP9", "nuisP10",
    "eVBF_2_Hbox", "eVBF_2_HQ1_11", "eVBF_2_Hu_11", "eVBF_2_Hd_11", "eVBF_2_HQ3_11",
    "eVBF_2_HD", "eVBF_2_HB", "eVBF_2_HW", "eVBF_2_HWB", "eVBF_2_HG", "eVBF_2_DHB",
    "eVBF_2_DHW", "eVBF_2_DeltaGF",
    "eVBF_78_Hbox", "eVBF_78_HQ1_11", "eVBF_78_Hu_11", "eVBF_78_Hd_11", "eVBF_78_HQ3_11",
    "eVBF_78_HD", "eVBF_78_HB", "eVBF_78_HW", "eVBF_78_HWB", "eVBF_78_HG", "eVBF_78_DHB",
    "eVBF_78_DHW", "eVBF_78_DeltaGF",
    "eVBF_1314_Hbox", "eVBF_1314_HQ1_11", "eVBF_1314_Hu_11", "eVBF_1314_Hd_11", "eVBF_1314_HQ3_11",
    "eVBF_1314_HD", "eVBF_1314_HB", "eVBF_1314_HW", "eVBF_1314_HWB", "eVBF_1314_HG", "eVBF_1314_DHB",
    "eVBF_1314_DHW", "eVBF_1314_DeltaGF",
    "eWH_2_Hbox", "eWH_2_HQ3_11", "eWH_2_HD", "eWH_2_HW", "eWH_2_HWB", "eWH_2_DHW", "eWH_2_DeltaGF",
    "eWH_78_Hbox", "eWH_78_HQ3_11", "eWH_78_HD", "eWH_78_HW", "eWH_78_HWB", "eWH_78_DHW", "eWH_78_DeltaGF",
    "eWH_1314_Hbox", "eWH_1314_HQ3_11", "eWH_1314_HD", "eWH_1314_HW", "eWH_1314_HWB", "eWH_1314_DHW", "eWH_1314_DeltaGF",
    "eZH_2_Hbox", "eZH_2_HQ1_11", "eZH_2_Hu_11", "eZH_2_Hd_11", "eZH_2_HQ3_11", "eZH_2_HD", "eZH_2_HB", "eZH_2_HW", "eZH_2_HWB", "eZH_2_DHB", "eZH_2_DHW", "eZH_2_DeltaGF",
    "eZH_78_Hbox", "eZH_78_HQ1_11", "eZH_78_Hu_11", "eZH_78_Hd_11", "eZH_78_HQ3_11", "eZH_78_HD", "eZH_78_HB", "eZH_78_HW", "eZH_78_HWB", "eZH_78_DHB", "eZH_78_DHW", "eZH_78_DeltaGF",
    "eZH_1314_Hbox", "eZH_1314_HQ1_11", "eZH_1314_Hu_11", "eZH_1314_Hd_11", "eZH_1314_HQ3_11", "eZH_1314_HD", "eZH_1314_HB", "eZH_1314_HW", "eZH_1314_HWB", "eZH_1314_DHB", "eZH_1314_DHW", "eZH_1314_DeltaGF",
    "ettH_2_HG", "ettH_2_G", "ettH_2_uG_33r", "ettH_2_DeltagHt",
    "ettH_78_HG", "ettH_78_G", "ettH_78_uG_33r", "ettH_78_DeltagHt",
    "ettH_1314_HG", "ettH_1314_G", "ettH_1314_uG_33r", "ettH_1314_DeltagHt"*/};




NPSMEFTd6General::NPSMEFTd6General()
:
        NPbase(), NPSMEFTd6GM(*this), SMEFTEvolEW()
{


    FlagLeptonUniversal = false;
    FlagQuarkUniversal = false;
    
    FlagQuadraticTerms = false;
    FlagRotateCHWCHB = false;
    FlagPartialQFU = false;
    FlagFlavU3OfX = false;
    FlagUnivOfX = false;
    FlagHiggsSM = false;
    FlagLoopHd6 = false;
    FlagLoopH3d6Quad = false;
    FlagMWinput = false;
    SMEFTBasisFlag = "UP";
    setModelLinearized();

    w_WW = gsl_integration_cquad_workspace_alloc(100);


    
    //SMM.setObj((StandardModelMatching&) NPSMEFTd6GM.getObj());
    
    if (getModelName().compare("NPSMEFTd6General") == 0) {
    
    ModelParamMap.insert(std::make_pair("CHWHB_gaga",  std::cref(CHWHB_gaga)));
    ModelParamMap.insert(std::make_pair("CHWHB_gagaorth",  std::cref(CHWHB_gagaorth)));
    ModelParamMap.insert(std::make_pair("CG_LNP",  std::cref(CG_LNP)));
    ModelParamMap.insert(std::make_pair("CW_LNP",  std::cref(CW_LNP)));
    ModelParamMap.insert(std::make_pair("CHG_LNP",  std::cref(CHG_LNP)));
    ModelParamMap.insert(std::make_pair("CHW_LNP",  std::cref(CHW_LNP)));
    ModelParamMap.insert(std::make_pair("CHB_LNP",  std::cref(CHB_LNP)));
    ModelParamMap.insert(std::make_pair("CDB_LNP",  std::cref(CDB_LNP)));
    ModelParamMap.insert(std::make_pair("CDW_LNP",  std::cref(CDW_LNP)));
    ModelParamMap.insert(std::make_pair("CHWB_LNP",  std::cref(CHWB_LNP)));
    ModelParamMap.insert(std::make_pair("CHD_LNP",  std::cref(CHD_LNP)));
    ModelParamMap.insert(std::make_pair("CHbox_LNP",  std::cref(CHbox_LNP)));
    ModelParamMap.insert(std::make_pair("CH_LNP",  std::cref(CH_LNP)));
    ModelParamMap.insert(std::make_pair("CGtilde_LNP",  std::cref(CGtilde_LNP)));
    ModelParamMap.insert(std::make_pair("CWtilde_LNP",  std::cref(CWtilde_LNP)));
    ModelParamMap.insert(std::make_pair("CHGtilde_LNP",  std::cref(CHGtilde_LNP)));
    ModelParamMap.insert(std::make_pair("CHWtilde_LNP",  std::cref(CHWtilde_LNP)));
    ModelParamMap.insert(std::make_pair("CHBtilde_LNP",  std::cref(CHBtilde_LNP)));
    ModelParamMap.insert(std::make_pair("CHWtildeB_LNP",  std::cref(CHWtildeB_LNP)));
    // We define the map forthe Lepton Universality operators
    ModelParamMap.insert(std::make_pair("CHl1_11r_LNP",  std::cref(CHl1_11r_LNP)));
    ModelParamMap.insert(std::make_pair("CHl1_12r_LNP",  std::cref(CHl1_12r_LNP)));
    ModelParamMap.insert(std::make_pair("CHl1_13r_LNP",  std::cref(CHl1_13r_LNP)));
    ModelParamMap.insert(std::make_pair("CHl1_22r_LNP",  std::cref(CHl1_22r_LNP)));
    ModelParamMap.insert(std::make_pair("CHl1_23r_LNP",  std::cref(CHl1_23r_LNP)));
    ModelParamMap.insert(std::make_pair("CHl1_33r_LNP",  std::cref(CHl1_33r_LNP)));
    ModelParamMap.insert(std::make_pair("CHl1_12i_LNP",  std::cref(CHl1_12i_LNP)));
    ModelParamMap.insert(std::make_pair("CHl1_13i_LNP",  std::cref(CHl1_13i_LNP)));
    ModelParamMap.insert(std::make_pair("CHl1_23i_LNP",  std::cref(CHl1_23i_LNP)));
    ModelParamMap.insert(std::make_pair("CHl3_11r_LNP",  std::cref(CHl3_11r_LNP)));
    ModelParamMap.insert(std::make_pair("CHl3_12r_LNP",  std::cref(CHl3_12r_LNP)));
    ModelParamMap.insert(std::make_pair("CHl3_13r_LNP",  std::cref(CHl3_13r_LNP)));
    ModelParamMap.insert(std::make_pair("CHl3_22r_LNP",  std::cref(CHl3_22r_LNP)));
    ModelParamMap.insert(std::make_pair("CHl3_23r_LNP",  std::cref(CHl3_23r_LNP)));
    ModelParamMap.insert(std::make_pair("CHl3_33r_LNP",  std::cref(CHl3_33r_LNP)));
    ModelParamMap.insert(std::make_pair("CHl3_12i_LNP",  std::cref(CHl3_12i_LNP)));
    ModelParamMap.insert(std::make_pair("CHl3_13i_LNP",  std::cref(CHl3_13i_LNP)));
    ModelParamMap.insert(std::make_pair("CHl3_23i_LNP",  std::cref(CHl3_23i_LNP)));
    ModelParamMap.insert(std::make_pair("CHe_11r_LNP",  std::cref(CHe_11r_LNP)));
    ModelParamMap.insert(std::make_pair("CHe_12r_LNP",  std::cref(CHe_12r_LNP)));
    ModelParamMap.insert(std::make_pair("CHe_13r_LNP",  std::cref(CHe_13r_LNP)));
    ModelParamMap.insert(std::make_pair("CHe_22r_LNP",  std::cref(CHe_22r_LNP)));
    ModelParamMap.insert(std::make_pair("CHe_23r_LNP",  std::cref(CHe_23r_LNP)));
    ModelParamMap.insert(std::make_pair("CHe_33r_LNP",  std::cref(CHe_33r_LNP)));
    ModelParamMap.insert(std::make_pair("CHe_12i_LNP",  std::cref(CHe_12i_LNP)));
    ModelParamMap.insert(std::make_pair("CHe_13i_LNP",  std::cref(CHe_13i_LNP)));
    ModelParamMap.insert(std::make_pair("CHe_23i_LNP",  std::cref(CHe_23i_LNP)));
    ModelParamMap.insert(std::make_pair("CeH_11r_LNP",  std::cref(CeH_11r_LNP)));
    ModelParamMap.insert(std::make_pair("CeH_12r_LNP",  std::cref(CeH_12r_LNP)));
    ModelParamMap.insert(std::make_pair("CeH_13r_LNP",  std::cref(CeH_13r_LNP)));
    ModelParamMap.insert(std::make_pair("CeH_21r_LNP",  std::cref(CeH_21r_LNP)));
    ModelParamMap.insert(std::make_pair("CeH_22r_LNP",  std::cref(CeH_22r_LNP)));
    ModelParamMap.insert(std::make_pair("CeH_23r_LNP",  std::cref(CeH_23r_LNP)));
    ModelParamMap.insert(std::make_pair("CeH_31r_LNP",  std::cref(CeH_31r_LNP)));
    ModelParamMap.insert(std::make_pair("CeH_32r_LNP",  std::cref(CeH_32r_LNP)));
    ModelParamMap.insert(std::make_pair("CeH_33r_LNP",  std::cref(CeH_33r_LNP)));
    ModelParamMap.insert(std::make_pair("CeH_11i_LNP",  std::cref(CeH_11i_LNP)));
    ModelParamMap.insert(std::make_pair("CeH_12i_LNP",  std::cref(CeH_12i_LNP)));
    ModelParamMap.insert(std::make_pair("CeH_13i_LNP",  std::cref(CeH_13i_LNP)));
    ModelParamMap.insert(std::make_pair("CeH_21i_LNP",  std::cref(CeH_21i_LNP)));
    ModelParamMap.insert(std::make_pair("CeH_22i_LNP",  std::cref(CeH_22i_LNP)));
    ModelParamMap.insert(std::make_pair("CeH_23i_LNP",  std::cref(CeH_23i_LNP)));
    ModelParamMap.insert(std::make_pair("CeH_31i_LNP",  std::cref(CeH_31i_LNP)));
    ModelParamMap.insert(std::make_pair("CeH_32i_LNP",  std::cref(CeH_32i_LNP)));
    ModelParamMap.insert(std::make_pair("CeH_33i_LNP",  std::cref(CeH_33i_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1111r_LNP",  std::cref(Cll_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1112r_LNP",  std::cref(Cll_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1113r_LNP",  std::cref(Cll_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1122r_LNP",  std::cref(Cll_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1123r_LNP",  std::cref(Cll_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1133r_LNP",  std::cref(Cll_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1212r_LNP",  std::cref(Cll_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1213r_LNP",  std::cref(Cll_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1221r_LNP",  std::cref(Cll_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1222r_LNP",  std::cref(Cll_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1223r_LNP",  std::cref(Cll_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1231r_LNP",  std::cref(Cll_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1232r_LNP",  std::cref(Cll_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1233r_LNP",  std::cref(Cll_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1313r_LNP",  std::cref(Cll_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1322r_LNP",  std::cref(Cll_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1323r_LNP",  std::cref(Cll_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1331r_LNP",  std::cref(Cll_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1332r_LNP",  std::cref(Cll_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1333r_LNP",  std::cref(Cll_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_2222r_LNP",  std::cref(Cll_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_2223r_LNP",  std::cref(Cll_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_2233r_LNP",  std::cref(Cll_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_2323r_LNP",  std::cref(Cll_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_2332r_LNP",  std::cref(Cll_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_2333r_LNP",  std::cref(Cll_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_3333r_LNP",  std::cref(Cll_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1112i_LNP",  std::cref(Cll_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1113i_LNP",  std::cref(Cll_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1123i_LNP",  std::cref(Cll_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1212i_LNP",  std::cref(Cll_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1213i_LNP",  std::cref(Cll_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1222i_LNP",  std::cref(Cll_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1223i_LNP",  std::cref(Cll_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1231i_LNP",  std::cref(Cll_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1232i_LNP",  std::cref(Cll_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1233i_LNP",  std::cref(Cll_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1313i_LNP",  std::cref(Cll_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1322i_LNP",  std::cref(Cll_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1323i_LNP",  std::cref(Cll_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1332i_LNP",  std::cref(Cll_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_1333i_LNP",  std::cref(Cll_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_2223i_LNP",  std::cref(Cll_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_2323i_LNP",  std::cref(Cll_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cll_2333i_LNP",  std::cref(Cll_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1111r_LNP",  std::cref(Cee_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1112r_LNP",  std::cref(Cee_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1113r_LNP",  std::cref(Cee_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1122r_LNP",  std::cref(Cee_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1123r_LNP",  std::cref(Cee_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1133r_LNP",  std::cref(Cee_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1212r_LNP",  std::cref(Cee_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1213r_LNP",  std::cref(Cee_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1222r_LNP",  std::cref(Cee_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1223r_LNP",  std::cref(Cee_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1232r_LNP",  std::cref(Cee_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1233r_LNP",  std::cref(Cee_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1313r_LNP",  std::cref(Cee_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1323r_LNP",  std::cref(Cee_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1333r_LNP",  std::cref(Cee_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_2222r_LNP",  std::cref(Cee_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_2223r_LNP",  std::cref(Cee_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_2233r_LNP",  std::cref(Cee_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_2323r_LNP",  std::cref(Cee_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_2333r_LNP",  std::cref(Cee_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_3333r_LNP",  std::cref(Cee_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1112i_LNP",  std::cref(Cee_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1113i_LNP",  std::cref(Cee_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1123i_LNP",  std::cref(Cee_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1212i_LNP",  std::cref(Cee_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1213i_LNP",  std::cref(Cee_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1222i_LNP",  std::cref(Cee_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1223i_LNP",  std::cref(Cee_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1232i_LNP",  std::cref(Cee_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1233i_LNP",  std::cref(Cee_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1313i_LNP",  std::cref(Cee_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1323i_LNP",  std::cref(Cee_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_1333i_LNP",  std::cref(Cee_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_2223i_LNP",  std::cref(Cee_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_2323i_LNP",  std::cref(Cee_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cee_2333i_LNP",  std::cref(Cee_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1111r_LNP",  std::cref(Cle_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1112r_LNP",  std::cref(Cle_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1113r_LNP",  std::cref(Cle_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1122r_LNP",  std::cref(Cle_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1123r_LNP",  std::cref(Cle_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1133r_LNP",  std::cref(Cle_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1211r_LNP",  std::cref(Cle_1211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1212r_LNP",  std::cref(Cle_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1213r_LNP",  std::cref(Cle_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1221r_LNP",  std::cref(Cle_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1222r_LNP",  std::cref(Cle_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1223r_LNP",  std::cref(Cle_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1231r_LNP",  std::cref(Cle_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1232r_LNP",  std::cref(Cle_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1233r_LNP",  std::cref(Cle_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1311r_LNP",  std::cref(Cle_1311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1312r_LNP",  std::cref(Cle_1312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1313r_LNP",  std::cref(Cle_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1321r_LNP",  std::cref(Cle_1321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1322r_LNP",  std::cref(Cle_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1323r_LNP",  std::cref(Cle_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1331r_LNP",  std::cref(Cle_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1332r_LNP",  std::cref(Cle_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1333r_LNP",  std::cref(Cle_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2211r_LNP",  std::cref(Cle_2211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2212r_LNP",  std::cref(Cle_2212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2213r_LNP",  std::cref(Cle_2213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2222r_LNP",  std::cref(Cle_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2223r_LNP",  std::cref(Cle_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2233r_LNP",  std::cref(Cle_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2311r_LNP",  std::cref(Cle_2311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2312r_LNP",  std::cref(Cle_2312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2313r_LNP",  std::cref(Cle_2313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2321r_LNP",  std::cref(Cle_2321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2322r_LNP",  std::cref(Cle_2322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2323r_LNP",  std::cref(Cle_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2331r_LNP",  std::cref(Cle_2331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2332r_LNP",  std::cref(Cle_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2333r_LNP",  std::cref(Cle_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_3311r_LNP",  std::cref(Cle_3311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_3312r_LNP",  std::cref(Cle_3312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_3313r_LNP",  std::cref(Cle_3313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_3322r_LNP",  std::cref(Cle_3322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_3323r_LNP",  std::cref(Cle_3323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_3333r_LNP",  std::cref(Cle_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1112i_LNP",  std::cref(Cle_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1113i_LNP",  std::cref(Cle_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1123i_LNP",  std::cref(Cle_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1211i_LNP",  std::cref(Cle_1211i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1212i_LNP",  std::cref(Cle_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1213i_LNP",  std::cref(Cle_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1221i_LNP",  std::cref(Cle_1221i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1222i_LNP",  std::cref(Cle_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1223i_LNP",  std::cref(Cle_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1231i_LNP",  std::cref(Cle_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1232i_LNP",  std::cref(Cle_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1233i_LNP",  std::cref(Cle_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1311i_LNP",  std::cref(Cle_1311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1312i_LNP",  std::cref(Cle_1312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1313i_LNP",  std::cref(Cle_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1321i_LNP",  std::cref(Cle_1321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1322i_LNP",  std::cref(Cle_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1323i_LNP",  std::cref(Cle_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1331i_LNP",  std::cref(Cle_1331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1332i_LNP",  std::cref(Cle_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_1333i_LNP",  std::cref(Cle_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2212i_LNP",  std::cref(Cle_2212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2213i_LNP",  std::cref(Cle_2213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2223i_LNP",  std::cref(Cle_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2312i_LNP",  std::cref(Cle_2312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2313i_LNP",  std::cref(Cle_2313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2321i_LNP",  std::cref(Cle_2321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2322i_LNP",  std::cref(Cle_2322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2323i_LNP",  std::cref(Cle_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2331i_LNP",  std::cref(Cle_2331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2332i_LNP",  std::cref(Cle_2332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2333i_LNP",  std::cref(Cle_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_2311i_LNP",  std::cref(Cle_2311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_3312i_LNP",  std::cref(Cle_3312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_3313i_LNP",  std::cref(Cle_3313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cle_3323i_LNP",  std::cref(Cle_3323i_LNP)));
    // We define the map for the Quark Universality operators 
    ModelParamMap.insert(std::make_pair("CHq1_11r_LNP",  std::cref(CHq1_11r_LNP)));
    ModelParamMap.insert(std::make_pair("CHq1_12r_LNP",  std::cref(CHq1_12r_LNP)));
    ModelParamMap.insert(std::make_pair("CHq1_13r_LNP",  std::cref(CHq1_13r_LNP)));
    ModelParamMap.insert(std::make_pair("CHq1_22r_LNP",  std::cref(CHq1_22r_LNP)));
    ModelParamMap.insert(std::make_pair("CHq1_23r_LNP",  std::cref(CHq1_23r_LNP)));
    ModelParamMap.insert(std::make_pair("CHq1_33r_LNP",  std::cref(CHq1_33r_LNP)));
    ModelParamMap.insert(std::make_pair("CHq1_12i_LNP",  std::cref(CHq1_12i_LNP)));
    ModelParamMap.insert(std::make_pair("CHq1_13i_LNP",  std::cref(CHq1_13i_LNP)));
    ModelParamMap.insert(std::make_pair("CHq1_23i_LNP",  std::cref(CHq1_23i_LNP)));
    ModelParamMap.insert(std::make_pair("CHq3_11r_LNP",  std::cref(CHq3_11r_LNP)));
    ModelParamMap.insert(std::make_pair("CHq3_12r_LNP",  std::cref(CHq3_12r_LNP)));
    ModelParamMap.insert(std::make_pair("CHq3_13r_LNP",  std::cref(CHq3_13r_LNP)));
    ModelParamMap.insert(std::make_pair("CHq3_22r_LNP",  std::cref(CHq3_22r_LNP)));
    ModelParamMap.insert(std::make_pair("CHq3_23r_LNP",  std::cref(CHq3_23r_LNP)));
    ModelParamMap.insert(std::make_pair("CHq3_33r_LNP",  std::cref(CHq3_33r_LNP)));
    ModelParamMap.insert(std::make_pair("CHq3_12i_LNP",  std::cref(CHq3_12i_LNP)));
    ModelParamMap.insert(std::make_pair("CHq3_13i_LNP",  std::cref(CHq3_13i_LNP)));
    ModelParamMap.insert(std::make_pair("CHq3_23i_LNP",  std::cref(CHq3_23i_LNP)));
    ModelParamMap.insert(std::make_pair("CHu_11r_LNP",  std::cref(CHu_11r_LNP)));
    ModelParamMap.insert(std::make_pair("CHu_12r_LNP",  std::cref(CHu_12r_LNP)));
    ModelParamMap.insert(std::make_pair("CHu_13r_LNP",  std::cref(CHu_13r_LNP)));
    ModelParamMap.insert(std::make_pair("CHu_22r_LNP",  std::cref(CHu_22r_LNP)));
    ModelParamMap.insert(std::make_pair("CHu_23r_LNP",  std::cref(CHu_23r_LNP)));
    ModelParamMap.insert(std::make_pair("CHu_33r_LNP",  std::cref(CHu_33r_LNP)));
    ModelParamMap.insert(std::make_pair("CHu_12i_LNP",  std::cref(CHu_12i_LNP)));
    ModelParamMap.insert(std::make_pair("CHu_13i_LNP",  std::cref(CHu_13i_LNP)));
    ModelParamMap.insert(std::make_pair("CHu_23i_LNP",  std::cref(CHu_23i_LNP)));
    ModelParamMap.insert(std::make_pair("CHd_11r_LNP",  std::cref(CHd_11r_LNP)));
    ModelParamMap.insert(std::make_pair("CHd_12r_LNP",  std::cref(CHd_12r_LNP)));
    ModelParamMap.insert(std::make_pair("CHd_13r_LNP",  std::cref(CHd_13r_LNP)));
    ModelParamMap.insert(std::make_pair("CHd_22r_LNP",  std::cref(CHd_22r_LNP)));
    ModelParamMap.insert(std::make_pair("CHd_23r_LNP",  std::cref(CHd_23r_LNP)));
    ModelParamMap.insert(std::make_pair("CHd_33r_LNP",  std::cref(CHd_33r_LNP)));
    ModelParamMap.insert(std::make_pair("CHd_12i_LNP",  std::cref(CHd_12i_LNP)));
    ModelParamMap.insert(std::make_pair("CHd_13i_LNP",  std::cref(CHd_13i_LNP)));
    ModelParamMap.insert(std::make_pair("CHd_23i_LNP",  std::cref(CHd_23i_LNP)));
    ModelParamMap.insert(std::make_pair("CHud_11r_LNP",  std::cref(CHud_11r_LNP)));
    ModelParamMap.insert(std::make_pair("CHud_12r_LNP",  std::cref(CHud_12r_LNP)));
    ModelParamMap.insert(std::make_pair("CHud_13r_LNP",  std::cref(CHud_13r_LNP)));
    ModelParamMap.insert(std::make_pair("CHud_21r_LNP",  std::cref(CHud_21r_LNP)));
    ModelParamMap.insert(std::make_pair("CHud_22r_LNP",  std::cref(CHud_22r_LNP)));
    ModelParamMap.insert(std::make_pair("CHud_23r_LNP",  std::cref(CHud_23r_LNP)));
    ModelParamMap.insert(std::make_pair("CHud_31r_LNP",  std::cref(CHud_31r_LNP)));
    ModelParamMap.insert(std::make_pair("CHud_32r_LNP",  std::cref(CHud_32r_LNP)));
    ModelParamMap.insert(std::make_pair("CHud_33r_LNP",  std::cref(CHud_33r_LNP)));
    ModelParamMap.insert(std::make_pair("CHud_11i_LNP",  std::cref(CHud_11i_LNP)));
    ModelParamMap.insert(std::make_pair("CHud_12i_LNP",  std::cref(CHud_12i_LNP)));
    ModelParamMap.insert(std::make_pair("CHud_13i_LNP",  std::cref(CHud_13i_LNP)));
    ModelParamMap.insert(std::make_pair("CHud_21i_LNP",  std::cref(CHud_21i_LNP)));
    ModelParamMap.insert(std::make_pair("CHud_22i_LNP",  std::cref(CHud_22i_LNP)));
    ModelParamMap.insert(std::make_pair("CHud_23i_LNP",  std::cref(CHud_23i_LNP)));
    ModelParamMap.insert(std::make_pair("CHud_31i_LNP",  std::cref(CHud_31i_LNP)));
    ModelParamMap.insert(std::make_pair("CHud_32i_LNP",  std::cref(CHud_32i_LNP)));
    ModelParamMap.insert(std::make_pair("CHud_33i_LNP",  std::cref(CHud_33i_LNP)));
    ModelParamMap.insert(std::make_pair("CuH_11r_LNP",  std::cref(CuH_11r_LNP)));
    ModelParamMap.insert(std::make_pair("CuH_12r_LNP",  std::cref(CuH_12r_LNP)));
    ModelParamMap.insert(std::make_pair("CuH_13r_LNP",  std::cref(CuH_13r_LNP)));
    ModelParamMap.insert(std::make_pair("CuH_21r_LNP",  std::cref(CuH_21r_LNP)));
    ModelParamMap.insert(std::make_pair("CuH_22r_LNP",  std::cref(CuH_22r_LNP)));
    ModelParamMap.insert(std::make_pair("CuH_23r_LNP",  std::cref(CuH_23r_LNP)));
    ModelParamMap.insert(std::make_pair("CuH_31r_LNP",  std::cref(CuH_31r_LNP)));
    ModelParamMap.insert(std::make_pair("CuH_32r_LNP",  std::cref(CuH_32r_LNP)));
    ModelParamMap.insert(std::make_pair("CuH_33r_LNP",  std::cref(CuH_33r_LNP)));
    ModelParamMap.insert(std::make_pair("CuH_11i_LNP",  std::cref(CuH_11i_LNP)));
    ModelParamMap.insert(std::make_pair("CuH_12i_LNP",  std::cref(CuH_12i_LNP)));
    ModelParamMap.insert(std::make_pair("CuH_13i_LNP",  std::cref(CuH_13i_LNP)));
    ModelParamMap.insert(std::make_pair("CuH_21i_LNP",  std::cref(CuH_21i_LNP)));
    ModelParamMap.insert(std::make_pair("CuH_22i_LNP",  std::cref(CuH_22i_LNP)));
    ModelParamMap.insert(std::make_pair("CuH_23i_LNP",  std::cref(CuH_23i_LNP)));
    ModelParamMap.insert(std::make_pair("CuH_31i_LNP",  std::cref(CuH_31i_LNP)));
    ModelParamMap.insert(std::make_pair("CuH_32i_LNP",  std::cref(CuH_32i_LNP)));
    ModelParamMap.insert(std::make_pair("CuH_33i_LNP",  std::cref(CuH_33i_LNP)));
    ModelParamMap.insert(std::make_pair("CdH_11r_LNP",  std::cref(CdH_11r_LNP)));
    ModelParamMap.insert(std::make_pair("CdH_12r_LNP",  std::cref(CdH_12r_LNP)));
    ModelParamMap.insert(std::make_pair("CdH_13r_LNP",  std::cref(CdH_13r_LNP)));
    ModelParamMap.insert(std::make_pair("CdH_21r_LNP",  std::cref(CdH_21r_LNP)));
    ModelParamMap.insert(std::make_pair("CdH_22r_LNP",  std::cref(CdH_22r_LNP)));
    ModelParamMap.insert(std::make_pair("CdH_23r_LNP",  std::cref(CdH_23r_LNP)));
    ModelParamMap.insert(std::make_pair("CdH_31r_LNP",  std::cref(CdH_31r_LNP)));
    ModelParamMap.insert(std::make_pair("CdH_32r_LNP",  std::cref(CdH_32r_LNP)));
    ModelParamMap.insert(std::make_pair("CdH_33r_LNP",  std::cref(CdH_33r_LNP)));
    ModelParamMap.insert(std::make_pair("CdH_11i_LNP",  std::cref(CdH_11i_LNP)));
    ModelParamMap.insert(std::make_pair("CdH_12i_LNP",  std::cref(CdH_12i_LNP)));
    ModelParamMap.insert(std::make_pair("CdH_13i_LNP",  std::cref(CdH_13i_LNP)));
    ModelParamMap.insert(std::make_pair("CdH_21i_LNP",  std::cref(CdH_21i_LNP)));
    ModelParamMap.insert(std::make_pair("CdH_22i_LNP",  std::cref(CdH_22i_LNP)));
    ModelParamMap.insert(std::make_pair("CdH_23i_LNP",  std::cref(CdH_23i_LNP)));
    ModelParamMap.insert(std::make_pair("CdH_31i_LNP",  std::cref(CdH_31i_LNP)));
    ModelParamMap.insert(std::make_pair("CdH_32i_LNP",  std::cref(CdH_32i_LNP)));
    ModelParamMap.insert(std::make_pair("CdH_33i_LNP",  std::cref(CdH_33i_LNP)));
    ModelParamMap.insert(std::make_pair("CuG_11r_LNP",  std::cref(CuG_11r_LNP)));
    ModelParamMap.insert(std::make_pair("CuG_12r_LNP",  std::cref(CuG_12r_LNP)));
    ModelParamMap.insert(std::make_pair("CuG_13r_LNP",  std::cref(CuG_13r_LNP)));
    ModelParamMap.insert(std::make_pair("CuG_21r_LNP",  std::cref(CuG_21r_LNP)));
    ModelParamMap.insert(std::make_pair("CuG_22r_LNP",  std::cref(CuG_22r_LNP)));
    ModelParamMap.insert(std::make_pair("CuG_23r_LNP",  std::cref(CuG_23r_LNP)));
    ModelParamMap.insert(std::make_pair("CuG_31r_LNP",  std::cref(CuG_31r_LNP)));
    ModelParamMap.insert(std::make_pair("CuG_32r_LNP",  std::cref(CuG_32r_LNP)));
    ModelParamMap.insert(std::make_pair("CuG_33r_LNP",  std::cref(CuG_33r_LNP)));
    ModelParamMap.insert(std::make_pair("CuG_11i_LNP",  std::cref(CuG_11i_LNP)));
    ModelParamMap.insert(std::make_pair("CuG_12i_LNP",  std::cref(CuG_12i_LNP)));
    ModelParamMap.insert(std::make_pair("CuG_13i_LNP",  std::cref(CuG_13i_LNP)));
    ModelParamMap.insert(std::make_pair("CuG_21i_LNP",  std::cref(CuG_21i_LNP)));
    ModelParamMap.insert(std::make_pair("CuG_22i_LNP",  std::cref(CuG_22i_LNP)));
    ModelParamMap.insert(std::make_pair("CuG_23i_LNP",  std::cref(CuG_23i_LNP)));
    ModelParamMap.insert(std::make_pair("CuG_31i_LNP",  std::cref(CuG_31i_LNP)));
    ModelParamMap.insert(std::make_pair("CuG_32i_LNP",  std::cref(CuG_32i_LNP)));
    ModelParamMap.insert(std::make_pair("CuG_33i_LNP",  std::cref(CuG_33i_LNP)));
    ModelParamMap.insert(std::make_pair("CuW_11r_LNP",  std::cref(CuW_11r_LNP)));
    ModelParamMap.insert(std::make_pair("CuW_12r_LNP",  std::cref(CuW_12r_LNP)));
    ModelParamMap.insert(std::make_pair("CuW_13r_LNP",  std::cref(CuW_13r_LNP)));
    ModelParamMap.insert(std::make_pair("CuW_21r_LNP",  std::cref(CuW_21r_LNP)));
    ModelParamMap.insert(std::make_pair("CuW_22r_LNP",  std::cref(CuW_22r_LNP)));
    ModelParamMap.insert(std::make_pair("CuW_23r_LNP",  std::cref(CuW_23r_LNP)));
    ModelParamMap.insert(std::make_pair("CuW_31r_LNP",  std::cref(CuW_31r_LNP)));
    ModelParamMap.insert(std::make_pair("CuW_32r_LNP",  std::cref(CuW_32r_LNP)));
    ModelParamMap.insert(std::make_pair("CuW_33r_LNP",  std::cref(CuW_33r_LNP)));
    ModelParamMap.insert(std::make_pair("CuW_11i_LNP",  std::cref(CuW_11i_LNP)));
    ModelParamMap.insert(std::make_pair("CuW_12i_LNP",  std::cref(CuW_12i_LNP)));
    ModelParamMap.insert(std::make_pair("CuW_13i_LNP",  std::cref(CuW_13i_LNP)));
    ModelParamMap.insert(std::make_pair("CuW_21i_LNP",  std::cref(CuW_21i_LNP)));
    ModelParamMap.insert(std::make_pair("CuW_22i_LNP",  std::cref(CuW_22i_LNP)));
    ModelParamMap.insert(std::make_pair("CuW_23i_LNP",  std::cref(CuW_23i_LNP)));
    ModelParamMap.insert(std::make_pair("CuW_31i_LNP",  std::cref(CuW_31i_LNP)));
    ModelParamMap.insert(std::make_pair("CuW_32i_LNP",  std::cref(CuW_32i_LNP)));
    ModelParamMap.insert(std::make_pair("CuW_33i_LNP",  std::cref(CuW_33i_LNP)));
    ModelParamMap.insert(std::make_pair("CuB_11r_LNP",  std::cref(CuB_11r_LNP)));
    ModelParamMap.insert(std::make_pair("CuB_12r_LNP",  std::cref(CuB_12r_LNP)));
    ModelParamMap.insert(std::make_pair("CuB_13r_LNP",  std::cref(CuB_13r_LNP)));
    ModelParamMap.insert(std::make_pair("CuB_21r_LNP",  std::cref(CuB_21r_LNP)));
    ModelParamMap.insert(std::make_pair("CuB_22r_LNP",  std::cref(CuB_22r_LNP)));
    ModelParamMap.insert(std::make_pair("CuB_23r_LNP",  std::cref(CuB_23r_LNP)));
    ModelParamMap.insert(std::make_pair("CuB_31r_LNP",  std::cref(CuB_31r_LNP)));
    ModelParamMap.insert(std::make_pair("CuB_32r_LNP",  std::cref(CuB_32r_LNP)));
    ModelParamMap.insert(std::make_pair("CuB_33r_LNP",  std::cref(CuB_33r_LNP)));
    ModelParamMap.insert(std::make_pair("CuB_11i_LNP",  std::cref(CuB_11i_LNP)));
    ModelParamMap.insert(std::make_pair("CuB_12i_LNP",  std::cref(CuB_12i_LNP)));
    ModelParamMap.insert(std::make_pair("CuB_13i_LNP",  std::cref(CuB_13i_LNP)));
    ModelParamMap.insert(std::make_pair("CuB_21i_LNP",  std::cref(CuB_21i_LNP)));
    ModelParamMap.insert(std::make_pair("CuB_22i_LNP",  std::cref(CuB_22i_LNP)));
    ModelParamMap.insert(std::make_pair("CuB_23i_LNP",  std::cref(CuB_23i_LNP)));
    ModelParamMap.insert(std::make_pair("CuB_31i_LNP",  std::cref(CuB_31i_LNP)));
    ModelParamMap.insert(std::make_pair("CuB_32i_LNP",  std::cref(CuB_32i_LNP)));
    ModelParamMap.insert(std::make_pair("CuB_33i_LNP",  std::cref(CuB_33i_LNP)));
    ModelParamMap.insert(std::make_pair("CdG_11r_LNP",  std::cref(CdG_11r_LNP)));
    ModelParamMap.insert(std::make_pair("CdG_12r_LNP",  std::cref(CdG_12r_LNP)));
    ModelParamMap.insert(std::make_pair("CdG_13r_LNP",  std::cref(CdG_13r_LNP)));
    ModelParamMap.insert(std::make_pair("CdG_21r_LNP",  std::cref(CdG_21r_LNP)));
    ModelParamMap.insert(std::make_pair("CdG_22r_LNP",  std::cref(CdG_22r_LNP)));
    ModelParamMap.insert(std::make_pair("CdG_23r_LNP",  std::cref(CdG_23r_LNP)));
    ModelParamMap.insert(std::make_pair("CdG_31r_LNP",  std::cref(CdG_31r_LNP)));
    ModelParamMap.insert(std::make_pair("CdG_32r_LNP",  std::cref(CdG_32r_LNP)));
    ModelParamMap.insert(std::make_pair("CdG_33r_LNP",  std::cref(CdG_33r_LNP)));
    ModelParamMap.insert(std::make_pair("CdG_11i_LNP",  std::cref(CdG_11i_LNP)));
    ModelParamMap.insert(std::make_pair("CdG_12i_LNP",  std::cref(CdG_12i_LNP)));
    ModelParamMap.insert(std::make_pair("CdG_13i_LNP",  std::cref(CdG_13i_LNP)));
    ModelParamMap.insert(std::make_pair("CdG_21i_LNP",  std::cref(CdG_21i_LNP)));
    ModelParamMap.insert(std::make_pair("CdG_22i_LNP",  std::cref(CdG_22i_LNP)));
    ModelParamMap.insert(std::make_pair("CdG_23i_LNP",  std::cref(CdG_23i_LNP)));
    ModelParamMap.insert(std::make_pair("CdG_31i_LNP",  std::cref(CdG_31i_LNP)));
    ModelParamMap.insert(std::make_pair("CdG_32i_LNP",  std::cref(CdG_32i_LNP)));
    ModelParamMap.insert(std::make_pair("CdG_33i_LNP",  std::cref(CdG_33i_LNP)));
    ModelParamMap.insert(std::make_pair("CdW_11r_LNP",  std::cref(CdW_11r_LNP)));
    ModelParamMap.insert(std::make_pair("CdW_12r_LNP",  std::cref(CdW_12r_LNP)));
    ModelParamMap.insert(std::make_pair("CdW_13r_LNP",  std::cref(CdW_13r_LNP)));
    ModelParamMap.insert(std::make_pair("CdW_21r_LNP",  std::cref(CdW_21r_LNP)));
    ModelParamMap.insert(std::make_pair("CdW_22r_LNP",  std::cref(CdW_22r_LNP)));
    ModelParamMap.insert(std::make_pair("CdW_23r_LNP",  std::cref(CdW_23r_LNP)));
    ModelParamMap.insert(std::make_pair("CdW_31r_LNP",  std::cref(CdW_31r_LNP)));
    ModelParamMap.insert(std::make_pair("CdW_32r_LNP",  std::cref(CdW_32r_LNP)));
    ModelParamMap.insert(std::make_pair("CdW_33r_LNP",  std::cref(CdW_33r_LNP)));
    ModelParamMap.insert(std::make_pair("CdW_11i_LNP",  std::cref(CdW_11i_LNP)));
    ModelParamMap.insert(std::make_pair("CdW_12i_LNP",  std::cref(CdW_12i_LNP)));
    ModelParamMap.insert(std::make_pair("CdW_13i_LNP",  std::cref(CdW_13i_LNP)));
    ModelParamMap.insert(std::make_pair("CdW_21i_LNP",  std::cref(CdW_21i_LNP)));
    ModelParamMap.insert(std::make_pair("CdW_22i_LNP",  std::cref(CdW_22i_LNP)));
    ModelParamMap.insert(std::make_pair("CdW_23i_LNP",  std::cref(CdW_23i_LNP)));
    ModelParamMap.insert(std::make_pair("CdW_31i_LNP",  std::cref(CdW_31i_LNP)));
    ModelParamMap.insert(std::make_pair("CdW_32i_LNP",  std::cref(CdW_32i_LNP)));
    ModelParamMap.insert(std::make_pair("CdW_33i_LNP",  std::cref(CdW_33i_LNP)));
    ModelParamMap.insert(std::make_pair("CdB_11r_LNP",  std::cref(CdB_11r_LNP)));
    ModelParamMap.insert(std::make_pair("CdB_12r_LNP",  std::cref(CdB_12r_LNP)));
    ModelParamMap.insert(std::make_pair("CdB_13r_LNP",  std::cref(CdB_13r_LNP)));
    ModelParamMap.insert(std::make_pair("CdB_21r_LNP",  std::cref(CdB_21r_LNP)));
    ModelParamMap.insert(std::make_pair("CdB_22r_LNP",  std::cref(CdB_22r_LNP)));
    ModelParamMap.insert(std::make_pair("CdB_23r_LNP",  std::cref(CdB_23r_LNP)));
    ModelParamMap.insert(std::make_pair("CdB_31r_LNP",  std::cref(CdB_31r_LNP)));
    ModelParamMap.insert(std::make_pair("CdB_32r_LNP",  std::cref(CdB_32r_LNP)));
    ModelParamMap.insert(std::make_pair("CdB_33r_LNP",  std::cref(CdB_33r_LNP)));
    ModelParamMap.insert(std::make_pair("CdB_11i_LNP",  std::cref(CdB_11i_LNP)));
    ModelParamMap.insert(std::make_pair("CdB_12i_LNP",  std::cref(CdB_12i_LNP)));
    ModelParamMap.insert(std::make_pair("CdB_13i_LNP",  std::cref(CdB_13i_LNP)));
    ModelParamMap.insert(std::make_pair("CdB_21i_LNP",  std::cref(CdB_21i_LNP)));
    ModelParamMap.insert(std::make_pair("CdB_22i_LNP",  std::cref(CdB_22i_LNP)));
    ModelParamMap.insert(std::make_pair("CdB_23i_LNP",  std::cref(CdB_23i_LNP)));
    ModelParamMap.insert(std::make_pair("CdB_31i_LNP",  std::cref(CdB_31i_LNP)));
    ModelParamMap.insert(std::make_pair("CdB_32i_LNP",  std::cref(CdB_32i_LNP)));
    ModelParamMap.insert(std::make_pair("CdB_33i_LNP",  std::cref(CdB_33i_LNP)));
    ModelParamMap.insert(std::make_pair("CeW_11r_LNP",  std::cref(CeW_11r_LNP)));
    ModelParamMap.insert(std::make_pair("CeW_12r_LNP",  std::cref(CeW_12r_LNP)));
    ModelParamMap.insert(std::make_pair("CeW_13r_LNP",  std::cref(CeW_13r_LNP)));
    ModelParamMap.insert(std::make_pair("CeW_21r_LNP",  std::cref(CeW_21r_LNP)));
    ModelParamMap.insert(std::make_pair("CeW_22r_LNP",  std::cref(CeW_22r_LNP)));
    ModelParamMap.insert(std::make_pair("CeW_23r_LNP",  std::cref(CeW_23r_LNP)));
    ModelParamMap.insert(std::make_pair("CeW_31r_LNP",  std::cref(CeW_31r_LNP)));
    ModelParamMap.insert(std::make_pair("CeW_32r_LNP",  std::cref(CeW_32r_LNP)));
    ModelParamMap.insert(std::make_pair("CeW_33r_LNP",  std::cref(CeW_33r_LNP)));
    ModelParamMap.insert(std::make_pair("CeW_11i_LNP",  std::cref(CeW_11i_LNP)));
    ModelParamMap.insert(std::make_pair("CeW_12i_LNP",  std::cref(CeW_12i_LNP)));
    ModelParamMap.insert(std::make_pair("CeW_13i_LNP",  std::cref(CeW_13i_LNP)));
    ModelParamMap.insert(std::make_pair("CeW_21i_LNP",  std::cref(CeW_21i_LNP)));
    ModelParamMap.insert(std::make_pair("CeW_22i_LNP",  std::cref(CeW_22i_LNP)));
    ModelParamMap.insert(std::make_pair("CeW_23i_LNP",  std::cref(CeW_23i_LNP)));
    ModelParamMap.insert(std::make_pair("CeW_31i_LNP",  std::cref(CeW_31i_LNP)));
    ModelParamMap.insert(std::make_pair("CeW_32i_LNP",  std::cref(CeW_32i_LNP)));
    ModelParamMap.insert(std::make_pair("CeW_33i_LNP",  std::cref(CeW_33i_LNP)));
    ModelParamMap.insert(std::make_pair("CeB_11r_LNP",  std::cref(CeB_11r_LNP)));
    ModelParamMap.insert(std::make_pair("CeB_12r_LNP",  std::cref(CeB_12r_LNP)));
    ModelParamMap.insert(std::make_pair("CeB_13r_LNP",  std::cref(CeB_13r_LNP)));
    ModelParamMap.insert(std::make_pair("CeB_21r_LNP",  std::cref(CeB_21r_LNP)));
    ModelParamMap.insert(std::make_pair("CeB_22r_LNP",  std::cref(CeB_22r_LNP)));
    ModelParamMap.insert(std::make_pair("CeB_23r_LNP",  std::cref(CeB_23r_LNP)));
    ModelParamMap.insert(std::make_pair("CeB_31r_LNP",  std::cref(CeB_31r_LNP)));
    ModelParamMap.insert(std::make_pair("CeB_32r_LNP",  std::cref(CeB_32r_LNP)));
    ModelParamMap.insert(std::make_pair("CeB_33r_LNP",  std::cref(CeB_33r_LNP)));
    ModelParamMap.insert(std::make_pair("CeB_11i_LNP",  std::cref(CeB_11i_LNP)));
    ModelParamMap.insert(std::make_pair("CeB_12i_LNP",  std::cref(CeB_12i_LNP)));
    ModelParamMap.insert(std::make_pair("CeB_13i_LNP",  std::cref(CeB_13i_LNP)));
    ModelParamMap.insert(std::make_pair("CeB_21i_LNP",  std::cref(CeB_21i_LNP)));
    ModelParamMap.insert(std::make_pair("CeB_22i_LNP",  std::cref(CeB_22i_LNP)));
    ModelParamMap.insert(std::make_pair("CeB_23i_LNP",  std::cref(CeB_23i_LNP)));
    ModelParamMap.insert(std::make_pair("CeB_31i_LNP",  std::cref(CeB_31i_LNP)));
    ModelParamMap.insert(std::make_pair("CeB_32i_LNP",  std::cref(CeB_32i_LNP)));
    ModelParamMap.insert(std::make_pair("CeB_33i_LNP",  std::cref(CeB_33i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1111r_LNP",  std::cref(Cqq1_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1112r_LNP",  std::cref(Cqq1_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1113r_LNP",  std::cref(Cqq1_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1122r_LNP",  std::cref(Cqq1_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1123r_LNP",  std::cref(Cqq1_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1133r_LNP",  std::cref(Cqq1_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1212r_LNP",  std::cref(Cqq1_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1213r_LNP",  std::cref(Cqq1_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1221r_LNP",  std::cref(Cqq1_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1222r_LNP",  std::cref(Cqq1_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1223r_LNP",  std::cref(Cqq1_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1231r_LNP",  std::cref(Cqq1_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1232r_LNP",  std::cref(Cqq1_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1233r_LNP",  std::cref(Cqq1_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1313r_LNP",  std::cref(Cqq1_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1322r_LNP",  std::cref(Cqq1_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1323r_LNP",  std::cref(Cqq1_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1331r_LNP",  std::cref(Cqq1_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1332r_LNP",  std::cref(Cqq1_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1333r_LNP",  std::cref(Cqq1_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_2222r_LNP",  std::cref(Cqq1_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_2223r_LNP",  std::cref(Cqq1_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_2233r_LNP",  std::cref(Cqq1_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_2323r_LNP",  std::cref(Cqq1_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_2332r_LNP",  std::cref(Cqq1_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_2333r_LNP",  std::cref(Cqq1_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_3333r_LNP",  std::cref(Cqq1_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1112i_LNP",  std::cref(Cqq1_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1113i_LNP",  std::cref(Cqq1_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1123i_LNP",  std::cref(Cqq1_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1212i_LNP",  std::cref(Cqq1_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1213i_LNP",  std::cref(Cqq1_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1222i_LNP",  std::cref(Cqq1_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1223i_LNP",  std::cref(Cqq1_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1231i_LNP",  std::cref(Cqq1_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1232i_LNP",  std::cref(Cqq1_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1233i_LNP",  std::cref(Cqq1_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1313i_LNP",  std::cref(Cqq1_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1322i_LNP",  std::cref(Cqq1_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1323i_LNP",  std::cref(Cqq1_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1332i_LNP",  std::cref(Cqq1_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_1333i_LNP",  std::cref(Cqq1_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_2223i_LNP",  std::cref(Cqq1_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_2323i_LNP",  std::cref(Cqq1_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq1_2333i_LNP",  std::cref(Cqq1_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1111r_LNP",  std::cref(Cqq3_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1112r_LNP",  std::cref(Cqq3_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1113r_LNP",  std::cref(Cqq3_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1122r_LNP",  std::cref(Cqq3_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1123r_LNP",  std::cref(Cqq3_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1133r_LNP",  std::cref(Cqq3_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1212r_LNP",  std::cref(Cqq3_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1213r_LNP",  std::cref(Cqq3_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1221r_LNP",  std::cref(Cqq3_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1222r_LNP",  std::cref(Cqq3_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1223r_LNP",  std::cref(Cqq3_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1231r_LNP",  std::cref(Cqq3_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1232r_LNP",  std::cref(Cqq3_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1233r_LNP",  std::cref(Cqq3_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1313r_LNP",  std::cref(Cqq3_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1322r_LNP",  std::cref(Cqq3_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1323r_LNP",  std::cref(Cqq3_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1331r_LNP",  std::cref(Cqq3_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1332r_LNP",  std::cref(Cqq3_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1333r_LNP",  std::cref(Cqq3_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_2222r_LNP",  std::cref(Cqq3_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_2223r_LNP",  std::cref(Cqq3_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_2233r_LNP",  std::cref(Cqq3_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_2323r_LNP",  std::cref(Cqq3_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_2332r_LNP",  std::cref(Cqq3_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_2333r_LNP",  std::cref(Cqq3_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_3333r_LNP",  std::cref(Cqq3_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1112i_LNP",  std::cref(Cqq3_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1113i_LNP",  std::cref(Cqq3_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1123i_LNP",  std::cref(Cqq3_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1212i_LNP",  std::cref(Cqq3_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1213i_LNP",  std::cref(Cqq3_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1222i_LNP",  std::cref(Cqq3_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1223i_LNP",  std::cref(Cqq3_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1231i_LNP",  std::cref(Cqq3_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1232i_LNP",  std::cref(Cqq3_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1233i_LNP",  std::cref(Cqq3_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1313i_LNP",  std::cref(Cqq3_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1322i_LNP",  std::cref(Cqq3_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1323i_LNP",  std::cref(Cqq3_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1332i_LNP",  std::cref(Cqq3_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_1333i_LNP",  std::cref(Cqq3_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_2223i_LNP",  std::cref(Cqq3_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_2323i_LNP",  std::cref(Cqq3_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqq3_2333i_LNP",  std::cref(Cqq3_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1111r_LNP",  std::cref(Cuu_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1112r_LNP",  std::cref(Cuu_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1113r_LNP",  std::cref(Cuu_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1122r_LNP",  std::cref(Cuu_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1123r_LNP",  std::cref(Cuu_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1133r_LNP",  std::cref(Cuu_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1212r_LNP",  std::cref(Cuu_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1213r_LNP",  std::cref(Cuu_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1221r_LNP",  std::cref(Cuu_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1222r_LNP",  std::cref(Cuu_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1223r_LNP",  std::cref(Cuu_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1231r_LNP",  std::cref(Cuu_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1232r_LNP",  std::cref(Cuu_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1233r_LNP",  std::cref(Cuu_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1313r_LNP",  std::cref(Cuu_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1322r_LNP",  std::cref(Cuu_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1323r_LNP",  std::cref(Cuu_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1331r_LNP",  std::cref(Cuu_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1332r_LNP",  std::cref(Cuu_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1333r_LNP",  std::cref(Cuu_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_2222r_LNP",  std::cref(Cuu_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_2223r_LNP",  std::cref(Cuu_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_2233r_LNP",  std::cref(Cuu_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_2323r_LNP",  std::cref(Cuu_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_2332r_LNP",  std::cref(Cuu_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_2333r_LNP",  std::cref(Cuu_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_3333r_LNP",  std::cref(Cuu_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1112i_LNP",  std::cref(Cuu_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1113i_LNP",  std::cref(Cuu_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1123i_LNP",  std::cref(Cuu_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1212i_LNP",  std::cref(Cuu_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1213i_LNP",  std::cref(Cuu_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1222i_LNP",  std::cref(Cuu_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1223i_LNP",  std::cref(Cuu_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1231i_LNP",  std::cref(Cuu_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1232i_LNP",  std::cref(Cuu_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1233i_LNP",  std::cref(Cuu_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1313i_LNP",  std::cref(Cuu_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1322i_LNP",  std::cref(Cuu_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1323i_LNP",  std::cref(Cuu_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1332i_LNP",  std::cref(Cuu_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_1333i_LNP",  std::cref(Cuu_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_2223i_LNP",  std::cref(Cuu_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_2323i_LNP",  std::cref(Cuu_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cuu_2333i_LNP",  std::cref(Cuu_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1111r_LNP",  std::cref(Cdd_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1112r_LNP",  std::cref(Cdd_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1113r_LNP",  std::cref(Cdd_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1122r_LNP",  std::cref(Cdd_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1123r_LNP",  std::cref(Cdd_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1133r_LNP",  std::cref(Cdd_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1212r_LNP",  std::cref(Cdd_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1213r_LNP",  std::cref(Cdd_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1221r_LNP",  std::cref(Cdd_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1222r_LNP",  std::cref(Cdd_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1223r_LNP",  std::cref(Cdd_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1231r_LNP",  std::cref(Cdd_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1232r_LNP",  std::cref(Cdd_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1233r_LNP",  std::cref(Cdd_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1313r_LNP",  std::cref(Cdd_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1322r_LNP",  std::cref(Cdd_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1323r_LNP",  std::cref(Cdd_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1331r_LNP",  std::cref(Cdd_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1332r_LNP",  std::cref(Cdd_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1333r_LNP",  std::cref(Cdd_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_2222r_LNP",  std::cref(Cdd_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_2223r_LNP",  std::cref(Cdd_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_2233r_LNP",  std::cref(Cdd_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_2323r_LNP",  std::cref(Cdd_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_2332r_LNP",  std::cref(Cdd_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_2333r_LNP",  std::cref(Cdd_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_3333r_LNP",  std::cref(Cdd_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1112i_LNP",  std::cref(Cdd_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1113i_LNP",  std::cref(Cdd_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1123i_LNP",  std::cref(Cdd_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1212i_LNP",  std::cref(Cdd_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1213i_LNP",  std::cref(Cdd_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1222i_LNP",  std::cref(Cdd_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1223i_LNP",  std::cref(Cdd_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1231i_LNP",  std::cref(Cdd_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1232i_LNP",  std::cref(Cdd_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1233i_LNP",  std::cref(Cdd_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1313i_LNP",  std::cref(Cdd_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1322i_LNP",  std::cref(Cdd_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1323i_LNP",  std::cref(Cdd_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1332i_LNP",  std::cref(Cdd_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_1333i_LNP",  std::cref(Cdd_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_2223i_LNP",  std::cref(Cdd_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_2323i_LNP",  std::cref(Cdd_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cdd_2333i_LNP",  std::cref(Cdd_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1111r_LNP",  std::cref(Cud1_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1112r_LNP",  std::cref(Cud1_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1113r_LNP",  std::cref(Cud1_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1122r_LNP",  std::cref(Cud1_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1123r_LNP",  std::cref(Cud1_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1133r_LNP",  std::cref(Cud1_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1211r_LNP",  std::cref(Cud1_1211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1212r_LNP",  std::cref(Cud1_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1213r_LNP",  std::cref(Cud1_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1221r_LNP",  std::cref(Cud1_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1222r_LNP",  std::cref(Cud1_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1223r_LNP",  std::cref(Cud1_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1231r_LNP",  std::cref(Cud1_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1232r_LNP",  std::cref(Cud1_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1233r_LNP",  std::cref(Cud1_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1311r_LNP",  std::cref(Cud1_1311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1312r_LNP",  std::cref(Cud1_1312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1313r_LNP",  std::cref(Cud1_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1321r_LNP",  std::cref(Cud1_1321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1322r_LNP",  std::cref(Cud1_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1323r_LNP",  std::cref(Cud1_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1331r_LNP",  std::cref(Cud1_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1332r_LNP",  std::cref(Cud1_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1333r_LNP",  std::cref(Cud1_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2211r_LNP",  std::cref(Cud1_2211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2212r_LNP",  std::cref(Cud1_2212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2213r_LNP",  std::cref(Cud1_2213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2222r_LNP",  std::cref(Cud1_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2223r_LNP",  std::cref(Cud1_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2233r_LNP",  std::cref(Cud1_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2311r_LNP",  std::cref(Cud1_2311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2312r_LNP",  std::cref(Cud1_2312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2313r_LNP",  std::cref(Cud1_2313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2321r_LNP",  std::cref(Cud1_2321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2322r_LNP",  std::cref(Cud1_2322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2323r_LNP",  std::cref(Cud1_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2331r_LNP",  std::cref(Cud1_2331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2332r_LNP",  std::cref(Cud1_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2333r_LNP",  std::cref(Cud1_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_3311r_LNP",  std::cref(Cud1_3311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_3312r_LNP",  std::cref(Cud1_3312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_3313r_LNP",  std::cref(Cud1_3313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_3322r_LNP",  std::cref(Cud1_3322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_3323r_LNP",  std::cref(Cud1_3323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_3333r_LNP",  std::cref(Cud1_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1112i_LNP",  std::cref(Cud1_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1113i_LNP",  std::cref(Cud1_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1123i_LNP",  std::cref(Cud1_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1211i_LNP",  std::cref(Cud1_1211i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1212i_LNP",  std::cref(Cud1_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1213i_LNP",  std::cref(Cud1_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1221i_LNP",  std::cref(Cud1_1221i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1222i_LNP",  std::cref(Cud1_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1223i_LNP",  std::cref(Cud1_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1231i_LNP",  std::cref(Cud1_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1232i_LNP",  std::cref(Cud1_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1233i_LNP",  std::cref(Cud1_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1311i_LNP",  std::cref(Cud1_1311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1312i_LNP",  std::cref(Cud1_1312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1313i_LNP",  std::cref(Cud1_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1321i_LNP",  std::cref(Cud1_1321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1322i_LNP",  std::cref(Cud1_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1323i_LNP",  std::cref(Cud1_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1331i_LNP",  std::cref(Cud1_1331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1332i_LNP",  std::cref(Cud1_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_1333i_LNP",  std::cref(Cud1_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2212i_LNP",  std::cref(Cud1_2212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2213i_LNP",  std::cref(Cud1_2213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2223i_LNP",  std::cref(Cud1_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2312i_LNP",  std::cref(Cud1_2312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2313i_LNP",  std::cref(Cud1_2313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2321i_LNP",  std::cref(Cud1_2321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2322i_LNP",  std::cref(Cud1_2322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2323i_LNP",  std::cref(Cud1_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2331i_LNP",  std::cref(Cud1_2331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2332i_LNP",  std::cref(Cud1_2332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2333i_LNP",  std::cref(Cud1_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_2311i_LNP",  std::cref(Cud1_2311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_3312i_LNP",  std::cref(Cud1_3312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_3313i_LNP",  std::cref(Cud1_3313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud1_3323i_LNP",  std::cref(Cud1_3323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1111r_LNP",  std::cref(Cud8_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1112r_LNP",  std::cref(Cud8_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1113r_LNP",  std::cref(Cud8_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1122r_LNP",  std::cref(Cud8_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1123r_LNP",  std::cref(Cud8_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1133r_LNP",  std::cref(Cud8_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1211r_LNP",  std::cref(Cud8_1211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1212r_LNP",  std::cref(Cud8_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1213r_LNP",  std::cref(Cud8_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1221r_LNP",  std::cref(Cud8_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1222r_LNP",  std::cref(Cud8_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1223r_LNP",  std::cref(Cud8_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1231r_LNP",  std::cref(Cud8_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1232r_LNP",  std::cref(Cud8_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1233r_LNP",  std::cref(Cud8_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1311r_LNP",  std::cref(Cud8_1311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1312r_LNP",  std::cref(Cud8_1312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1313r_LNP",  std::cref(Cud8_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1321r_LNP",  std::cref(Cud8_1321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1322r_LNP",  std::cref(Cud8_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1323r_LNP",  std::cref(Cud8_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1331r_LNP",  std::cref(Cud8_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1332r_LNP",  std::cref(Cud8_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1333r_LNP",  std::cref(Cud8_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2211r_LNP",  std::cref(Cud8_2211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2212r_LNP",  std::cref(Cud8_2212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2213r_LNP",  std::cref(Cud8_2213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2222r_LNP",  std::cref(Cud8_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2223r_LNP",  std::cref(Cud8_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2233r_LNP",  std::cref(Cud8_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2311r_LNP",  std::cref(Cud8_2311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2312r_LNP",  std::cref(Cud8_2312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2313r_LNP",  std::cref(Cud8_2313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2321r_LNP",  std::cref(Cud8_2321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2322r_LNP",  std::cref(Cud8_2322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2323r_LNP",  std::cref(Cud8_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2331r_LNP",  std::cref(Cud8_2331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2332r_LNP",  std::cref(Cud8_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2333r_LNP",  std::cref(Cud8_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_3311r_LNP",  std::cref(Cud8_3311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_3312r_LNP",  std::cref(Cud8_3312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_3313r_LNP",  std::cref(Cud8_3313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_3322r_LNP",  std::cref(Cud8_3322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_3323r_LNP",  std::cref(Cud8_3323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_3333r_LNP",  std::cref(Cud8_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1112i_LNP",  std::cref(Cud8_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1113i_LNP",  std::cref(Cud8_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1123i_LNP",  std::cref(Cud8_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1211i_LNP",  std::cref(Cud8_1211i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1212i_LNP",  std::cref(Cud8_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1213i_LNP",  std::cref(Cud8_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1221i_LNP",  std::cref(Cud8_1221i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1222i_LNP",  std::cref(Cud8_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1223i_LNP",  std::cref(Cud8_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1231i_LNP",  std::cref(Cud8_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1232i_LNP",  std::cref(Cud8_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1233i_LNP",  std::cref(Cud8_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1311i_LNP",  std::cref(Cud8_1311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1312i_LNP",  std::cref(Cud8_1312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1313i_LNP",  std::cref(Cud8_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1321i_LNP",  std::cref(Cud8_1321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1322i_LNP",  std::cref(Cud8_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1323i_LNP",  std::cref(Cud8_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1331i_LNP",  std::cref(Cud8_1331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1332i_LNP",  std::cref(Cud8_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_1333i_LNP",  std::cref(Cud8_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2212i_LNP",  std::cref(Cud8_2212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2213i_LNP",  std::cref(Cud8_2213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2223i_LNP",  std::cref(Cud8_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2312i_LNP",  std::cref(Cud8_2312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2313i_LNP",  std::cref(Cud8_2313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2321i_LNP",  std::cref(Cud8_2321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2322i_LNP",  std::cref(Cud8_2322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2323i_LNP",  std::cref(Cud8_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2331i_LNP",  std::cref(Cud8_2331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2332i_LNP",  std::cref(Cud8_2332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2333i_LNP",  std::cref(Cud8_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_2311i_LNP",  std::cref(Cud8_2311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_3312i_LNP",  std::cref(Cud8_3312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_3313i_LNP",  std::cref(Cud8_3313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cud8_3323i_LNP",  std::cref(Cud8_3323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1111r_LNP",  std::cref(Cqu1_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1112r_LNP",  std::cref(Cqu1_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1113r_LNP",  std::cref(Cqu1_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1122r_LNP",  std::cref(Cqu1_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1123r_LNP",  std::cref(Cqu1_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1133r_LNP",  std::cref(Cqu1_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1211r_LNP",  std::cref(Cqu1_1211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1212r_LNP",  std::cref(Cqu1_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1213r_LNP",  std::cref(Cqu1_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1221r_LNP",  std::cref(Cqu1_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1222r_LNP",  std::cref(Cqu1_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1223r_LNP",  std::cref(Cqu1_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1231r_LNP",  std::cref(Cqu1_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1232r_LNP",  std::cref(Cqu1_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1233r_LNP",  std::cref(Cqu1_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1311r_LNP",  std::cref(Cqu1_1311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1312r_LNP",  std::cref(Cqu1_1312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1313r_LNP",  std::cref(Cqu1_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1321r_LNP",  std::cref(Cqu1_1321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1322r_LNP",  std::cref(Cqu1_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1323r_LNP",  std::cref(Cqu1_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1331r_LNP",  std::cref(Cqu1_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1332r_LNP",  std::cref(Cqu1_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1333r_LNP",  std::cref(Cqu1_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2211r_LNP",  std::cref(Cqu1_2211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2212r_LNP",  std::cref(Cqu1_2212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2213r_LNP",  std::cref(Cqu1_2213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2222r_LNP",  std::cref(Cqu1_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2223r_LNP",  std::cref(Cqu1_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2233r_LNP",  std::cref(Cqu1_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2311r_LNP",  std::cref(Cqu1_2311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2312r_LNP",  std::cref(Cqu1_2312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2313r_LNP",  std::cref(Cqu1_2313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2321r_LNP",  std::cref(Cqu1_2321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2322r_LNP",  std::cref(Cqu1_2322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2323r_LNP",  std::cref(Cqu1_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2331r_LNP",  std::cref(Cqu1_2331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2332r_LNP",  std::cref(Cqu1_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2333r_LNP",  std::cref(Cqu1_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_3311r_LNP",  std::cref(Cqu1_3311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_3312r_LNP",  std::cref(Cqu1_3312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_3313r_LNP",  std::cref(Cqu1_3313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_3322r_LNP",  std::cref(Cqu1_3322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_3323r_LNP",  std::cref(Cqu1_3323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_3333r_LNP",  std::cref(Cqu1_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1112i_LNP",  std::cref(Cqu1_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1113i_LNP",  std::cref(Cqu1_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1123i_LNP",  std::cref(Cqu1_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1211i_LNP",  std::cref(Cqu1_1211i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1212i_LNP",  std::cref(Cqu1_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1213i_LNP",  std::cref(Cqu1_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1221i_LNP",  std::cref(Cqu1_1221i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1222i_LNP",  std::cref(Cqu1_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1223i_LNP",  std::cref(Cqu1_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1231i_LNP",  std::cref(Cqu1_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1232i_LNP",  std::cref(Cqu1_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1233i_LNP",  std::cref(Cqu1_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1311i_LNP",  std::cref(Cqu1_1311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1312i_LNP",  std::cref(Cqu1_1312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1313i_LNP",  std::cref(Cqu1_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1321i_LNP",  std::cref(Cqu1_1321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1322i_LNP",  std::cref(Cqu1_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1323i_LNP",  std::cref(Cqu1_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1331i_LNP",  std::cref(Cqu1_1331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1332i_LNP",  std::cref(Cqu1_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_1333i_LNP",  std::cref(Cqu1_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2212i_LNP",  std::cref(Cqu1_2212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2213i_LNP",  std::cref(Cqu1_2213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2223i_LNP",  std::cref(Cqu1_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2312i_LNP",  std::cref(Cqu1_2312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2313i_LNP",  std::cref(Cqu1_2313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2321i_LNP",  std::cref(Cqu1_2321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2322i_LNP",  std::cref(Cqu1_2322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2323i_LNP",  std::cref(Cqu1_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2331i_LNP",  std::cref(Cqu1_2331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2332i_LNP",  std::cref(Cqu1_2332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2333i_LNP",  std::cref(Cqu1_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_2311i_LNP",  std::cref(Cqu1_2311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_3312i_LNP",  std::cref(Cqu1_3312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_3313i_LNP",  std::cref(Cqu1_3313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu1_3323i_LNP",  std::cref(Cqu1_3323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1111r_LNP",  std::cref(Cqu8_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1112r_LNP",  std::cref(Cqu8_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1113r_LNP",  std::cref(Cqu8_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1122r_LNP",  std::cref(Cqu8_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1123r_LNP",  std::cref(Cqu8_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1133r_LNP",  std::cref(Cqu8_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1211r_LNP",  std::cref(Cqu8_1211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1212r_LNP",  std::cref(Cqu8_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1213r_LNP",  std::cref(Cqu8_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1221r_LNP",  std::cref(Cqu8_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1222r_LNP",  std::cref(Cqu8_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1223r_LNP",  std::cref(Cqu8_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1231r_LNP",  std::cref(Cqu8_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1232r_LNP",  std::cref(Cqu8_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1233r_LNP",  std::cref(Cqu8_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1311r_LNP",  std::cref(Cqu8_1311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1312r_LNP",  std::cref(Cqu8_1312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1313r_LNP",  std::cref(Cqu8_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1321r_LNP",  std::cref(Cqu8_1321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1322r_LNP",  std::cref(Cqu8_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1323r_LNP",  std::cref(Cqu8_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1331r_LNP",  std::cref(Cqu8_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1332r_LNP",  std::cref(Cqu8_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1333r_LNP",  std::cref(Cqu8_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2211r_LNP",  std::cref(Cqu8_2211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2212r_LNP",  std::cref(Cqu8_2212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2213r_LNP",  std::cref(Cqu8_2213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2222r_LNP",  std::cref(Cqu8_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2223r_LNP",  std::cref(Cqu8_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2233r_LNP",  std::cref(Cqu8_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2311r_LNP",  std::cref(Cqu8_2311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2312r_LNP",  std::cref(Cqu8_2312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2313r_LNP",  std::cref(Cqu8_2313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2321r_LNP",  std::cref(Cqu8_2321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2322r_LNP",  std::cref(Cqu8_2322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2323r_LNP",  std::cref(Cqu8_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2331r_LNP",  std::cref(Cqu8_2331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2332r_LNP",  std::cref(Cqu8_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2333r_LNP",  std::cref(Cqu8_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_3311r_LNP",  std::cref(Cqu8_3311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_3312r_LNP",  std::cref(Cqu8_3312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_3313r_LNP",  std::cref(Cqu8_3313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_3322r_LNP",  std::cref(Cqu8_3322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_3323r_LNP",  std::cref(Cqu8_3323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_3333r_LNP",  std::cref(Cqu8_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1112i_LNP",  std::cref(Cqu8_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1113i_LNP",  std::cref(Cqu8_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1123i_LNP",  std::cref(Cqu8_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1211i_LNP",  std::cref(Cqu8_1211i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1212i_LNP",  std::cref(Cqu8_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1213i_LNP",  std::cref(Cqu8_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1221i_LNP",  std::cref(Cqu8_1221i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1222i_LNP",  std::cref(Cqu8_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1223i_LNP",  std::cref(Cqu8_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1231i_LNP",  std::cref(Cqu8_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1232i_LNP",  std::cref(Cqu8_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1233i_LNP",  std::cref(Cqu8_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1311i_LNP",  std::cref(Cqu8_1311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1312i_LNP",  std::cref(Cqu8_1312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1313i_LNP",  std::cref(Cqu8_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1321i_LNP",  std::cref(Cqu8_1321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1322i_LNP",  std::cref(Cqu8_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1323i_LNP",  std::cref(Cqu8_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1331i_LNP",  std::cref(Cqu8_1331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1332i_LNP",  std::cref(Cqu8_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_1333i_LNP",  std::cref(Cqu8_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2212i_LNP",  std::cref(Cqu8_2212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2213i_LNP",  std::cref(Cqu8_2213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2223i_LNP",  std::cref(Cqu8_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2312i_LNP",  std::cref(Cqu8_2312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2313i_LNP",  std::cref(Cqu8_2313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2321i_LNP",  std::cref(Cqu8_2321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2322i_LNP",  std::cref(Cqu8_2322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2323i_LNP",  std::cref(Cqu8_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2331i_LNP",  std::cref(Cqu8_2331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2332i_LNP",  std::cref(Cqu8_2332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2333i_LNP",  std::cref(Cqu8_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_2311i_LNP",  std::cref(Cqu8_2311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_3312i_LNP",  std::cref(Cqu8_3312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_3313i_LNP",  std::cref(Cqu8_3313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqu8_3323i_LNP",  std::cref(Cqu8_3323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1111r_LNP",  std::cref(Cqd1_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1112r_LNP",  std::cref(Cqd1_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1113r_LNP",  std::cref(Cqd1_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1122r_LNP",  std::cref(Cqd1_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1123r_LNP",  std::cref(Cqd1_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1133r_LNP",  std::cref(Cqd1_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1211r_LNP",  std::cref(Cqd1_1211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1212r_LNP",  std::cref(Cqd1_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1213r_LNP",  std::cref(Cqd1_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1221r_LNP",  std::cref(Cqd1_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1222r_LNP",  std::cref(Cqd1_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1223r_LNP",  std::cref(Cqd1_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1231r_LNP",  std::cref(Cqd1_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1232r_LNP",  std::cref(Cqd1_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1233r_LNP",  std::cref(Cqd1_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1311r_LNP",  std::cref(Cqd1_1311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1312r_LNP",  std::cref(Cqd1_1312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1313r_LNP",  std::cref(Cqd1_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1321r_LNP",  std::cref(Cqd1_1321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1322r_LNP",  std::cref(Cqd1_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1323r_LNP",  std::cref(Cqd1_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1331r_LNP",  std::cref(Cqd1_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1332r_LNP",  std::cref(Cqd1_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1333r_LNP",  std::cref(Cqd1_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2211r_LNP",  std::cref(Cqd1_2211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2212r_LNP",  std::cref(Cqd1_2212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2213r_LNP",  std::cref(Cqd1_2213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2222r_LNP",  std::cref(Cqd1_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2223r_LNP",  std::cref(Cqd1_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2233r_LNP",  std::cref(Cqd1_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2311r_LNP",  std::cref(Cqd1_2311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2312r_LNP",  std::cref(Cqd1_2312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2313r_LNP",  std::cref(Cqd1_2313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2321r_LNP",  std::cref(Cqd1_2321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2322r_LNP",  std::cref(Cqd1_2322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2323r_LNP",  std::cref(Cqd1_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2331r_LNP",  std::cref(Cqd1_2331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2332r_LNP",  std::cref(Cqd1_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2333r_LNP",  std::cref(Cqd1_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_3311r_LNP",  std::cref(Cqd1_3311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_3312r_LNP",  std::cref(Cqd1_3312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_3313r_LNP",  std::cref(Cqd1_3313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_3322r_LNP",  std::cref(Cqd1_3322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_3323r_LNP",  std::cref(Cqd1_3323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_3333r_LNP",  std::cref(Cqd1_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1112i_LNP",  std::cref(Cqd1_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1113i_LNP",  std::cref(Cqd1_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1123i_LNP",  std::cref(Cqd1_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1211i_LNP",  std::cref(Cqd1_1211i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1212i_LNP",  std::cref(Cqd1_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1213i_LNP",  std::cref(Cqd1_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1221i_LNP",  std::cref(Cqd1_1221i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1222i_LNP",  std::cref(Cqd1_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1223i_LNP",  std::cref(Cqd1_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1231i_LNP",  std::cref(Cqd1_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1232i_LNP",  std::cref(Cqd1_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1233i_LNP",  std::cref(Cqd1_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1311i_LNP",  std::cref(Cqd1_1311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1312i_LNP",  std::cref(Cqd1_1312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1313i_LNP",  std::cref(Cqd1_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1321i_LNP",  std::cref(Cqd1_1321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1322i_LNP",  std::cref(Cqd1_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1323i_LNP",  std::cref(Cqd1_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1331i_LNP",  std::cref(Cqd1_1331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1332i_LNP",  std::cref(Cqd1_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_1333i_LNP",  std::cref(Cqd1_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2212i_LNP",  std::cref(Cqd1_2212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2213i_LNP",  std::cref(Cqd1_2213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2223i_LNP",  std::cref(Cqd1_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2312i_LNP",  std::cref(Cqd1_2312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2313i_LNP",  std::cref(Cqd1_2313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2321i_LNP",  std::cref(Cqd1_2321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2322i_LNP",  std::cref(Cqd1_2322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2323i_LNP",  std::cref(Cqd1_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2331i_LNP",  std::cref(Cqd1_2331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2332i_LNP",  std::cref(Cqd1_2332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2333i_LNP",  std::cref(Cqd1_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_2311i_LNP",  std::cref(Cqd1_2311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_3312i_LNP",  std::cref(Cqd1_3312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_3313i_LNP",  std::cref(Cqd1_3313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd1_3323i_LNP",  std::cref(Cqd1_3323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1111r_LNP",  std::cref(Cqd8_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1112r_LNP",  std::cref(Cqd8_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1113r_LNP",  std::cref(Cqd8_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1122r_LNP",  std::cref(Cqd8_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1123r_LNP",  std::cref(Cqd8_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1133r_LNP",  std::cref(Cqd8_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1211r_LNP",  std::cref(Cqd8_1211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1212r_LNP",  std::cref(Cqd8_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1213r_LNP",  std::cref(Cqd8_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1221r_LNP",  std::cref(Cqd8_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1222r_LNP",  std::cref(Cqd8_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1223r_LNP",  std::cref(Cqd8_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1231r_LNP",  std::cref(Cqd8_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1232r_LNP",  std::cref(Cqd8_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1233r_LNP",  std::cref(Cqd8_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1311r_LNP",  std::cref(Cqd8_1311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1312r_LNP",  std::cref(Cqd8_1312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1313r_LNP",  std::cref(Cqd8_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1321r_LNP",  std::cref(Cqd8_1321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1322r_LNP",  std::cref(Cqd8_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1323r_LNP",  std::cref(Cqd8_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1331r_LNP",  std::cref(Cqd8_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1332r_LNP",  std::cref(Cqd8_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1333r_LNP",  std::cref(Cqd8_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2211r_LNP",  std::cref(Cqd8_2211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2212r_LNP",  std::cref(Cqd8_2212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2213r_LNP",  std::cref(Cqd8_2213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2222r_LNP",  std::cref(Cqd8_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2223r_LNP",  std::cref(Cqd8_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2233r_LNP",  std::cref(Cqd8_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2311r_LNP",  std::cref(Cqd8_2311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2312r_LNP",  std::cref(Cqd8_2312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2313r_LNP",  std::cref(Cqd8_2313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2321r_LNP",  std::cref(Cqd8_2321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2322r_LNP",  std::cref(Cqd8_2322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2323r_LNP",  std::cref(Cqd8_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2331r_LNP",  std::cref(Cqd8_2331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2332r_LNP",  std::cref(Cqd8_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2333r_LNP",  std::cref(Cqd8_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_3311r_LNP",  std::cref(Cqd8_3311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_3312r_LNP",  std::cref(Cqd8_3312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_3313r_LNP",  std::cref(Cqd8_3313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_3322r_LNP",  std::cref(Cqd8_3322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_3323r_LNP",  std::cref(Cqd8_3323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_3333r_LNP",  std::cref(Cqd8_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1112i_LNP",  std::cref(Cqd8_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1113i_LNP",  std::cref(Cqd8_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1123i_LNP",  std::cref(Cqd8_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1211i_LNP",  std::cref(Cqd8_1211i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1212i_LNP",  std::cref(Cqd8_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1213i_LNP",  std::cref(Cqd8_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1221i_LNP",  std::cref(Cqd8_1221i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1222i_LNP",  std::cref(Cqd8_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1223i_LNP",  std::cref(Cqd8_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1231i_LNP",  std::cref(Cqd8_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1232i_LNP",  std::cref(Cqd8_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1233i_LNP",  std::cref(Cqd8_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1311i_LNP",  std::cref(Cqd8_1311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1312i_LNP",  std::cref(Cqd8_1312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1313i_LNP",  std::cref(Cqd8_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1321i_LNP",  std::cref(Cqd8_1321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1322i_LNP",  std::cref(Cqd8_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1323i_LNP",  std::cref(Cqd8_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1331i_LNP",  std::cref(Cqd8_1331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1332i_LNP",  std::cref(Cqd8_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_1333i_LNP",  std::cref(Cqd8_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2212i_LNP",  std::cref(Cqd8_2212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2213i_LNP",  std::cref(Cqd8_2213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2223i_LNP",  std::cref(Cqd8_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2312i_LNP",  std::cref(Cqd8_2312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2313i_LNP",  std::cref(Cqd8_2313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2321i_LNP",  std::cref(Cqd8_2321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2322i_LNP",  std::cref(Cqd8_2322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2323i_LNP",  std::cref(Cqd8_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2331i_LNP",  std::cref(Cqd8_2331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2332i_LNP",  std::cref(Cqd8_2332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2333i_LNP",  std::cref(Cqd8_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_2311i_LNP",  std::cref(Cqd8_2311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_3312i_LNP",  std::cref(Cqd8_3312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_3313i_LNP",  std::cref(Cqd8_3313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqd8_3323i_LNP",  std::cref(Cqd8_3323i_LNP)));
    // We define the map for the Lepton Universality and Quark Universality operators 
    ModelParamMap.insert(std::make_pair("Clq1_1111r_LNP",  std::cref(Clq1_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1112r_LNP",  std::cref(Clq1_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1113r_LNP",  std::cref(Clq1_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1122r_LNP",  std::cref(Clq1_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1123r_LNP",  std::cref(Clq1_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1133r_LNP",  std::cref(Clq1_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1211r_LNP",  std::cref(Clq1_1211r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1212r_LNP",  std::cref(Clq1_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1213r_LNP",  std::cref(Clq1_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1221r_LNP",  std::cref(Clq1_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1222r_LNP",  std::cref(Clq1_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1223r_LNP",  std::cref(Clq1_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1231r_LNP",  std::cref(Clq1_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1232r_LNP",  std::cref(Clq1_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1233r_LNP",  std::cref(Clq1_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1311r_LNP",  std::cref(Clq1_1311r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1312r_LNP",  std::cref(Clq1_1312r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1313r_LNP",  std::cref(Clq1_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1321r_LNP",  std::cref(Clq1_1321r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1322r_LNP",  std::cref(Clq1_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1323r_LNP",  std::cref(Clq1_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1331r_LNP",  std::cref(Clq1_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1332r_LNP",  std::cref(Clq1_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1333r_LNP",  std::cref(Clq1_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2211r_LNP",  std::cref(Clq1_2211r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2212r_LNP",  std::cref(Clq1_2212r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2213r_LNP",  std::cref(Clq1_2213r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2222r_LNP",  std::cref(Clq1_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2223r_LNP",  std::cref(Clq1_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2233r_LNP",  std::cref(Clq1_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2311r_LNP",  std::cref(Clq1_2311r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2312r_LNP",  std::cref(Clq1_2312r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2313r_LNP",  std::cref(Clq1_2313r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2321r_LNP",  std::cref(Clq1_2321r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2322r_LNP",  std::cref(Clq1_2322r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2323r_LNP",  std::cref(Clq1_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2331r_LNP",  std::cref(Clq1_2331r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2332r_LNP",  std::cref(Clq1_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2333r_LNP",  std::cref(Clq1_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_3311r_LNP",  std::cref(Clq1_3311r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_3312r_LNP",  std::cref(Clq1_3312r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_3313r_LNP",  std::cref(Clq1_3313r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_3322r_LNP",  std::cref(Clq1_3322r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_3323r_LNP",  std::cref(Clq1_3323r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_3333r_LNP",  std::cref(Clq1_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1112i_LNP",  std::cref(Clq1_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1113i_LNP",  std::cref(Clq1_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1123i_LNP",  std::cref(Clq1_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1211i_LNP",  std::cref(Clq1_1211i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1212i_LNP",  std::cref(Clq1_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1213i_LNP",  std::cref(Clq1_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1221i_LNP",  std::cref(Clq1_1221i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1222i_LNP",  std::cref(Clq1_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1223i_LNP",  std::cref(Clq1_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1231i_LNP",  std::cref(Clq1_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1232i_LNP",  std::cref(Clq1_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1233i_LNP",  std::cref(Clq1_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1311i_LNP",  std::cref(Clq1_1311i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1312i_LNP",  std::cref(Clq1_1312i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1313i_LNP",  std::cref(Clq1_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1321i_LNP",  std::cref(Clq1_1321i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1322i_LNP",  std::cref(Clq1_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1323i_LNP",  std::cref(Clq1_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1331i_LNP",  std::cref(Clq1_1331i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1332i_LNP",  std::cref(Clq1_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_1333i_LNP",  std::cref(Clq1_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2212i_LNP",  std::cref(Clq1_2212i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2213i_LNP",  std::cref(Clq1_2213i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2223i_LNP",  std::cref(Clq1_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2312i_LNP",  std::cref(Clq1_2312i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2313i_LNP",  std::cref(Clq1_2313i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2321i_LNP",  std::cref(Clq1_2321i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2322i_LNP",  std::cref(Clq1_2322i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2323i_LNP",  std::cref(Clq1_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2331i_LNP",  std::cref(Clq1_2331i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2332i_LNP",  std::cref(Clq1_2332i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2333i_LNP",  std::cref(Clq1_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_2311i_LNP",  std::cref(Clq1_2311i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_3312i_LNP",  std::cref(Clq1_3312i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_3313i_LNP",  std::cref(Clq1_3313i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq1_3323i_LNP",  std::cref(Clq1_3323i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1111r_LNP",  std::cref(Clq3_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1112r_LNP",  std::cref(Clq3_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1113r_LNP",  std::cref(Clq3_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1122r_LNP",  std::cref(Clq3_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1123r_LNP",  std::cref(Clq3_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1133r_LNP",  std::cref(Clq3_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1211r_LNP",  std::cref(Clq3_1211r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1212r_LNP",  std::cref(Clq3_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1213r_LNP",  std::cref(Clq3_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1221r_LNP",  std::cref(Clq3_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1222r_LNP",  std::cref(Clq3_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1223r_LNP",  std::cref(Clq3_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1231r_LNP",  std::cref(Clq3_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1232r_LNP",  std::cref(Clq3_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1233r_LNP",  std::cref(Clq3_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1311r_LNP",  std::cref(Clq3_1311r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1312r_LNP",  std::cref(Clq3_1312r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1313r_LNP",  std::cref(Clq3_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1321r_LNP",  std::cref(Clq3_1321r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1322r_LNP",  std::cref(Clq3_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1323r_LNP",  std::cref(Clq3_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1331r_LNP",  std::cref(Clq3_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1332r_LNP",  std::cref(Clq3_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1333r_LNP",  std::cref(Clq3_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2211r_LNP",  std::cref(Clq3_2211r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2212r_LNP",  std::cref(Clq3_2212r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2213r_LNP",  std::cref(Clq3_2213r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2222r_LNP",  std::cref(Clq3_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2223r_LNP",  std::cref(Clq3_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2233r_LNP",  std::cref(Clq3_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2311r_LNP",  std::cref(Clq3_2311r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2312r_LNP",  std::cref(Clq3_2312r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2313r_LNP",  std::cref(Clq3_2313r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2321r_LNP",  std::cref(Clq3_2321r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2322r_LNP",  std::cref(Clq3_2322r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2323r_LNP",  std::cref(Clq3_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2331r_LNP",  std::cref(Clq3_2331r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2332r_LNP",  std::cref(Clq3_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2333r_LNP",  std::cref(Clq3_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_3311r_LNP",  std::cref(Clq3_3311r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_3312r_LNP",  std::cref(Clq3_3312r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_3313r_LNP",  std::cref(Clq3_3313r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_3322r_LNP",  std::cref(Clq3_3322r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_3323r_LNP",  std::cref(Clq3_3323r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_3333r_LNP",  std::cref(Clq3_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1112i_LNP",  std::cref(Clq3_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1113i_LNP",  std::cref(Clq3_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1123i_LNP",  std::cref(Clq3_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1211i_LNP",  std::cref(Clq3_1211i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1212i_LNP",  std::cref(Clq3_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1213i_LNP",  std::cref(Clq3_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1221i_LNP",  std::cref(Clq3_1221i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1222i_LNP",  std::cref(Clq3_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1223i_LNP",  std::cref(Clq3_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1231i_LNP",  std::cref(Clq3_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1232i_LNP",  std::cref(Clq3_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1233i_LNP",  std::cref(Clq3_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1311i_LNP",  std::cref(Clq3_1311i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1312i_LNP",  std::cref(Clq3_1312i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1313i_LNP",  std::cref(Clq3_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1321i_LNP",  std::cref(Clq3_1321i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1322i_LNP",  std::cref(Clq3_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1323i_LNP",  std::cref(Clq3_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1331i_LNP",  std::cref(Clq3_1331i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1332i_LNP",  std::cref(Clq3_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_1333i_LNP",  std::cref(Clq3_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2212i_LNP",  std::cref(Clq3_2212i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2213i_LNP",  std::cref(Clq3_2213i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2223i_LNP",  std::cref(Clq3_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2312i_LNP",  std::cref(Clq3_2312i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2313i_LNP",  std::cref(Clq3_2313i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2321i_LNP",  std::cref(Clq3_2321i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2322i_LNP",  std::cref(Clq3_2322i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2323i_LNP",  std::cref(Clq3_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2331i_LNP",  std::cref(Clq3_2331i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2332i_LNP",  std::cref(Clq3_2332i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2333i_LNP",  std::cref(Clq3_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_2311i_LNP",  std::cref(Clq3_2311i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_3312i_LNP",  std::cref(Clq3_3312i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_3313i_LNP",  std::cref(Clq3_3313i_LNP)));
    ModelParamMap.insert(std::make_pair("Clq3_3323i_LNP",  std::cref(Clq3_3323i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1111r_LNP",  std::cref(Ceu_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1112r_LNP",  std::cref(Ceu_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1113r_LNP",  std::cref(Ceu_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1122r_LNP",  std::cref(Ceu_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1123r_LNP",  std::cref(Ceu_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1133r_LNP",  std::cref(Ceu_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1211r_LNP",  std::cref(Ceu_1211r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1212r_LNP",  std::cref(Ceu_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1213r_LNP",  std::cref(Ceu_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1221r_LNP",  std::cref(Ceu_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1222r_LNP",  std::cref(Ceu_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1223r_LNP",  std::cref(Ceu_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1231r_LNP",  std::cref(Ceu_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1232r_LNP",  std::cref(Ceu_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1233r_LNP",  std::cref(Ceu_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1311r_LNP",  std::cref(Ceu_1311r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1312r_LNP",  std::cref(Ceu_1312r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1313r_LNP",  std::cref(Ceu_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1321r_LNP",  std::cref(Ceu_1321r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1322r_LNP",  std::cref(Ceu_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1323r_LNP",  std::cref(Ceu_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1331r_LNP",  std::cref(Ceu_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1332r_LNP",  std::cref(Ceu_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1333r_LNP",  std::cref(Ceu_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2211r_LNP",  std::cref(Ceu_2211r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2212r_LNP",  std::cref(Ceu_2212r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2213r_LNP",  std::cref(Ceu_2213r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2222r_LNP",  std::cref(Ceu_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2223r_LNP",  std::cref(Ceu_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2233r_LNP",  std::cref(Ceu_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2311r_LNP",  std::cref(Ceu_2311r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2312r_LNP",  std::cref(Ceu_2312r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2313r_LNP",  std::cref(Ceu_2313r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2321r_LNP",  std::cref(Ceu_2321r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2322r_LNP",  std::cref(Ceu_2322r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2323r_LNP",  std::cref(Ceu_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2331r_LNP",  std::cref(Ceu_2331r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2332r_LNP",  std::cref(Ceu_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2333r_LNP",  std::cref(Ceu_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_3311r_LNP",  std::cref(Ceu_3311r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_3312r_LNP",  std::cref(Ceu_3312r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_3313r_LNP",  std::cref(Ceu_3313r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_3322r_LNP",  std::cref(Ceu_3322r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_3323r_LNP",  std::cref(Ceu_3323r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_3333r_LNP",  std::cref(Ceu_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1112i_LNP",  std::cref(Ceu_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1113i_LNP",  std::cref(Ceu_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1123i_LNP",  std::cref(Ceu_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1211i_LNP",  std::cref(Ceu_1211i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1212i_LNP",  std::cref(Ceu_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1213i_LNP",  std::cref(Ceu_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1221i_LNP",  std::cref(Ceu_1221i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1222i_LNP",  std::cref(Ceu_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1223i_LNP",  std::cref(Ceu_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1231i_LNP",  std::cref(Ceu_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1232i_LNP",  std::cref(Ceu_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1233i_LNP",  std::cref(Ceu_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1311i_LNP",  std::cref(Ceu_1311i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1312i_LNP",  std::cref(Ceu_1312i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1313i_LNP",  std::cref(Ceu_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1321i_LNP",  std::cref(Ceu_1321i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1322i_LNP",  std::cref(Ceu_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1323i_LNP",  std::cref(Ceu_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1331i_LNP",  std::cref(Ceu_1331i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1332i_LNP",  std::cref(Ceu_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_1333i_LNP",  std::cref(Ceu_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2212i_LNP",  std::cref(Ceu_2212i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2213i_LNP",  std::cref(Ceu_2213i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2223i_LNP",  std::cref(Ceu_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2312i_LNP",  std::cref(Ceu_2312i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2313i_LNP",  std::cref(Ceu_2313i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2321i_LNP",  std::cref(Ceu_2321i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2322i_LNP",  std::cref(Ceu_2322i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2323i_LNP",  std::cref(Ceu_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2331i_LNP",  std::cref(Ceu_2331i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2332i_LNP",  std::cref(Ceu_2332i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2333i_LNP",  std::cref(Ceu_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_2311i_LNP",  std::cref(Ceu_2311i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_3312i_LNP",  std::cref(Ceu_3312i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_3313i_LNP",  std::cref(Ceu_3313i_LNP)));
    ModelParamMap.insert(std::make_pair("Ceu_3323i_LNP",  std::cref(Ceu_3323i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1111r_LNP",  std::cref(Ced_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1112r_LNP",  std::cref(Ced_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1113r_LNP",  std::cref(Ced_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1122r_LNP",  std::cref(Ced_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1123r_LNP",  std::cref(Ced_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1133r_LNP",  std::cref(Ced_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1211r_LNP",  std::cref(Ced_1211r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1212r_LNP",  std::cref(Ced_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1213r_LNP",  std::cref(Ced_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1221r_LNP",  std::cref(Ced_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1222r_LNP",  std::cref(Ced_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1223r_LNP",  std::cref(Ced_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1231r_LNP",  std::cref(Ced_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1232r_LNP",  std::cref(Ced_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1233r_LNP",  std::cref(Ced_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1311r_LNP",  std::cref(Ced_1311r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1312r_LNP",  std::cref(Ced_1312r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1313r_LNP",  std::cref(Ced_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1321r_LNP",  std::cref(Ced_1321r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1322r_LNP",  std::cref(Ced_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1323r_LNP",  std::cref(Ced_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1331r_LNP",  std::cref(Ced_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1332r_LNP",  std::cref(Ced_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1333r_LNP",  std::cref(Ced_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2211r_LNP",  std::cref(Ced_2211r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2212r_LNP",  std::cref(Ced_2212r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2213r_LNP",  std::cref(Ced_2213r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2222r_LNP",  std::cref(Ced_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2223r_LNP",  std::cref(Ced_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2233r_LNP",  std::cref(Ced_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2311r_LNP",  std::cref(Ced_2311r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2312r_LNP",  std::cref(Ced_2312r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2313r_LNP",  std::cref(Ced_2313r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2321r_LNP",  std::cref(Ced_2321r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2322r_LNP",  std::cref(Ced_2322r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2323r_LNP",  std::cref(Ced_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2331r_LNP",  std::cref(Ced_2331r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2332r_LNP",  std::cref(Ced_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2333r_LNP",  std::cref(Ced_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_3311r_LNP",  std::cref(Ced_3311r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_3312r_LNP",  std::cref(Ced_3312r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_3313r_LNP",  std::cref(Ced_3313r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_3322r_LNP",  std::cref(Ced_3322r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_3323r_LNP",  std::cref(Ced_3323r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_3333r_LNP",  std::cref(Ced_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1112i_LNP",  std::cref(Ced_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1113i_LNP",  std::cref(Ced_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1123i_LNP",  std::cref(Ced_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1211i_LNP",  std::cref(Ced_1211i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1212i_LNP",  std::cref(Ced_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1213i_LNP",  std::cref(Ced_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1221i_LNP",  std::cref(Ced_1221i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1222i_LNP",  std::cref(Ced_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1223i_LNP",  std::cref(Ced_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1231i_LNP",  std::cref(Ced_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1232i_LNP",  std::cref(Ced_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1233i_LNP",  std::cref(Ced_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1311i_LNP",  std::cref(Ced_1311i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1312i_LNP",  std::cref(Ced_1312i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1313i_LNP",  std::cref(Ced_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1321i_LNP",  std::cref(Ced_1321i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1322i_LNP",  std::cref(Ced_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1323i_LNP",  std::cref(Ced_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1331i_LNP",  std::cref(Ced_1331i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1332i_LNP",  std::cref(Ced_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_1333i_LNP",  std::cref(Ced_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2212i_LNP",  std::cref(Ced_2212i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2213i_LNP",  std::cref(Ced_2213i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2223i_LNP",  std::cref(Ced_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2312i_LNP",  std::cref(Ced_2312i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2313i_LNP",  std::cref(Ced_2313i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2321i_LNP",  std::cref(Ced_2321i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2322i_LNP",  std::cref(Ced_2322i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2323i_LNP",  std::cref(Ced_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2331i_LNP",  std::cref(Ced_2331i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2332i_LNP",  std::cref(Ced_2332i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2333i_LNP",  std::cref(Ced_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_2311i_LNP",  std::cref(Ced_2311i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_3312i_LNP",  std::cref(Ced_3312i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_3313i_LNP",  std::cref(Ced_3313i_LNP)));
    ModelParamMap.insert(std::make_pair("Ced_3323i_LNP",  std::cref(Ced_3323i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1111r_LNP",  std::cref(Clu_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1112r_LNP",  std::cref(Clu_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1113r_LNP",  std::cref(Clu_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1122r_LNP",  std::cref(Clu_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1123r_LNP",  std::cref(Clu_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1133r_LNP",  std::cref(Clu_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1211r_LNP",  std::cref(Clu_1211r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1212r_LNP",  std::cref(Clu_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1213r_LNP",  std::cref(Clu_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1221r_LNP",  std::cref(Clu_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1222r_LNP",  std::cref(Clu_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1223r_LNP",  std::cref(Clu_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1231r_LNP",  std::cref(Clu_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1232r_LNP",  std::cref(Clu_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1233r_LNP",  std::cref(Clu_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1311r_LNP",  std::cref(Clu_1311r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1312r_LNP",  std::cref(Clu_1312r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1313r_LNP",  std::cref(Clu_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1321r_LNP",  std::cref(Clu_1321r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1322r_LNP",  std::cref(Clu_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1323r_LNP",  std::cref(Clu_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1331r_LNP",  std::cref(Clu_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1332r_LNP",  std::cref(Clu_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1333r_LNP",  std::cref(Clu_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2211r_LNP",  std::cref(Clu_2211r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2212r_LNP",  std::cref(Clu_2212r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2213r_LNP",  std::cref(Clu_2213r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2222r_LNP",  std::cref(Clu_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2223r_LNP",  std::cref(Clu_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2233r_LNP",  std::cref(Clu_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2311r_LNP",  std::cref(Clu_2311r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2312r_LNP",  std::cref(Clu_2312r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2313r_LNP",  std::cref(Clu_2313r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2321r_LNP",  std::cref(Clu_2321r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2322r_LNP",  std::cref(Clu_2322r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2323r_LNP",  std::cref(Clu_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2331r_LNP",  std::cref(Clu_2331r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2332r_LNP",  std::cref(Clu_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2333r_LNP",  std::cref(Clu_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_3311r_LNP",  std::cref(Clu_3311r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_3312r_LNP",  std::cref(Clu_3312r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_3313r_LNP",  std::cref(Clu_3313r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_3322r_LNP",  std::cref(Clu_3322r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_3323r_LNP",  std::cref(Clu_3323r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_3333r_LNP",  std::cref(Clu_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1112i_LNP",  std::cref(Clu_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1113i_LNP",  std::cref(Clu_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1123i_LNP",  std::cref(Clu_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1211i_LNP",  std::cref(Clu_1211i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1212i_LNP",  std::cref(Clu_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1213i_LNP",  std::cref(Clu_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1221i_LNP",  std::cref(Clu_1221i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1222i_LNP",  std::cref(Clu_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1223i_LNP",  std::cref(Clu_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1231i_LNP",  std::cref(Clu_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1232i_LNP",  std::cref(Clu_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1233i_LNP",  std::cref(Clu_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1311i_LNP",  std::cref(Clu_1311i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1312i_LNP",  std::cref(Clu_1312i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1313i_LNP",  std::cref(Clu_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1321i_LNP",  std::cref(Clu_1321i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1322i_LNP",  std::cref(Clu_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1323i_LNP",  std::cref(Clu_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1331i_LNP",  std::cref(Clu_1331i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1332i_LNP",  std::cref(Clu_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_1333i_LNP",  std::cref(Clu_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2212i_LNP",  std::cref(Clu_2212i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2213i_LNP",  std::cref(Clu_2213i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2223i_LNP",  std::cref(Clu_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2312i_LNP",  std::cref(Clu_2312i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2313i_LNP",  std::cref(Clu_2313i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2321i_LNP",  std::cref(Clu_2321i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2322i_LNP",  std::cref(Clu_2322i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2323i_LNP",  std::cref(Clu_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2331i_LNP",  std::cref(Clu_2331i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2332i_LNP",  std::cref(Clu_2332i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2333i_LNP",  std::cref(Clu_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_2311i_LNP",  std::cref(Clu_2311i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_3312i_LNP",  std::cref(Clu_3312i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_3313i_LNP",  std::cref(Clu_3313i_LNP)));
    ModelParamMap.insert(std::make_pair("Clu_3323i_LNP",  std::cref(Clu_3323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1111r_LNP",  std::cref(Cld_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1112r_LNP",  std::cref(Cld_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1113r_LNP",  std::cref(Cld_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1122r_LNP",  std::cref(Cld_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1123r_LNP",  std::cref(Cld_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1133r_LNP",  std::cref(Cld_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1211r_LNP",  std::cref(Cld_1211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1212r_LNP",  std::cref(Cld_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1213r_LNP",  std::cref(Cld_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1221r_LNP",  std::cref(Cld_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1222r_LNP",  std::cref(Cld_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1223r_LNP",  std::cref(Cld_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1231r_LNP",  std::cref(Cld_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1232r_LNP",  std::cref(Cld_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1233r_LNP",  std::cref(Cld_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1311r_LNP",  std::cref(Cld_1311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1312r_LNP",  std::cref(Cld_1312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1313r_LNP",  std::cref(Cld_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1321r_LNP",  std::cref(Cld_1321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1322r_LNP",  std::cref(Cld_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1323r_LNP",  std::cref(Cld_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1331r_LNP",  std::cref(Cld_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1332r_LNP",  std::cref(Cld_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1333r_LNP",  std::cref(Cld_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2211r_LNP",  std::cref(Cld_2211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2212r_LNP",  std::cref(Cld_2212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2213r_LNP",  std::cref(Cld_2213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2222r_LNP",  std::cref(Cld_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2223r_LNP",  std::cref(Cld_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2233r_LNP",  std::cref(Cld_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2311r_LNP",  std::cref(Cld_2311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2312r_LNP",  std::cref(Cld_2312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2313r_LNP",  std::cref(Cld_2313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2321r_LNP",  std::cref(Cld_2321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2322r_LNP",  std::cref(Cld_2322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2323r_LNP",  std::cref(Cld_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2331r_LNP",  std::cref(Cld_2331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2332r_LNP",  std::cref(Cld_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2333r_LNP",  std::cref(Cld_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_3311r_LNP",  std::cref(Cld_3311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_3312r_LNP",  std::cref(Cld_3312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_3313r_LNP",  std::cref(Cld_3313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_3322r_LNP",  std::cref(Cld_3322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_3323r_LNP",  std::cref(Cld_3323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_3333r_LNP",  std::cref(Cld_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1112i_LNP",  std::cref(Cld_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1113i_LNP",  std::cref(Cld_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1123i_LNP",  std::cref(Cld_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1211i_LNP",  std::cref(Cld_1211i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1212i_LNP",  std::cref(Cld_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1213i_LNP",  std::cref(Cld_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1221i_LNP",  std::cref(Cld_1221i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1222i_LNP",  std::cref(Cld_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1223i_LNP",  std::cref(Cld_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1231i_LNP",  std::cref(Cld_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1232i_LNP",  std::cref(Cld_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1233i_LNP",  std::cref(Cld_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1311i_LNP",  std::cref(Cld_1311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1312i_LNP",  std::cref(Cld_1312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1313i_LNP",  std::cref(Cld_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1321i_LNP",  std::cref(Cld_1321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1322i_LNP",  std::cref(Cld_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1323i_LNP",  std::cref(Cld_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1331i_LNP",  std::cref(Cld_1331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1332i_LNP",  std::cref(Cld_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_1333i_LNP",  std::cref(Cld_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2212i_LNP",  std::cref(Cld_2212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2213i_LNP",  std::cref(Cld_2213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2223i_LNP",  std::cref(Cld_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2312i_LNP",  std::cref(Cld_2312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2313i_LNP",  std::cref(Cld_2313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2321i_LNP",  std::cref(Cld_2321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2322i_LNP",  std::cref(Cld_2322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2323i_LNP",  std::cref(Cld_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2331i_LNP",  std::cref(Cld_2331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2332i_LNP",  std::cref(Cld_2332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2333i_LNP",  std::cref(Cld_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_2311i_LNP",  std::cref(Cld_2311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_3312i_LNP",  std::cref(Cld_3312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_3313i_LNP",  std::cref(Cld_3313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cld_3323i_LNP",  std::cref(Cld_3323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1111r_LNP",  std::cref(Cqe_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1112r_LNP",  std::cref(Cqe_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1113r_LNP",  std::cref(Cqe_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1122r_LNP",  std::cref(Cqe_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1123r_LNP",  std::cref(Cqe_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1133r_LNP",  std::cref(Cqe_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1211r_LNP",  std::cref(Cqe_1211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1212r_LNP",  std::cref(Cqe_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1213r_LNP",  std::cref(Cqe_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1221r_LNP",  std::cref(Cqe_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1222r_LNP",  std::cref(Cqe_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1223r_LNP",  std::cref(Cqe_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1231r_LNP",  std::cref(Cqe_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1232r_LNP",  std::cref(Cqe_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1233r_LNP",  std::cref(Cqe_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1311r_LNP",  std::cref(Cqe_1311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1312r_LNP",  std::cref(Cqe_1312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1313r_LNP",  std::cref(Cqe_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1321r_LNP",  std::cref(Cqe_1321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1322r_LNP",  std::cref(Cqe_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1323r_LNP",  std::cref(Cqe_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1331r_LNP",  std::cref(Cqe_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1332r_LNP",  std::cref(Cqe_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1333r_LNP",  std::cref(Cqe_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2211r_LNP",  std::cref(Cqe_2211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2212r_LNP",  std::cref(Cqe_2212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2213r_LNP",  std::cref(Cqe_2213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2222r_LNP",  std::cref(Cqe_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2223r_LNP",  std::cref(Cqe_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2233r_LNP",  std::cref(Cqe_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2311r_LNP",  std::cref(Cqe_2311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2312r_LNP",  std::cref(Cqe_2312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2313r_LNP",  std::cref(Cqe_2313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2321r_LNP",  std::cref(Cqe_2321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2322r_LNP",  std::cref(Cqe_2322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2323r_LNP",  std::cref(Cqe_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2331r_LNP",  std::cref(Cqe_2331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2332r_LNP",  std::cref(Cqe_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2333r_LNP",  std::cref(Cqe_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_3311r_LNP",  std::cref(Cqe_3311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_3312r_LNP",  std::cref(Cqe_3312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_3313r_LNP",  std::cref(Cqe_3313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_3322r_LNP",  std::cref(Cqe_3322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_3323r_LNP",  std::cref(Cqe_3323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_3333r_LNP",  std::cref(Cqe_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1112i_LNP",  std::cref(Cqe_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1113i_LNP",  std::cref(Cqe_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1123i_LNP",  std::cref(Cqe_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1211i_LNP",  std::cref(Cqe_1211i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1212i_LNP",  std::cref(Cqe_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1213i_LNP",  std::cref(Cqe_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1221i_LNP",  std::cref(Cqe_1221i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1222i_LNP",  std::cref(Cqe_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1223i_LNP",  std::cref(Cqe_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1231i_LNP",  std::cref(Cqe_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1232i_LNP",  std::cref(Cqe_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1233i_LNP",  std::cref(Cqe_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1311i_LNP",  std::cref(Cqe_1311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1312i_LNP",  std::cref(Cqe_1312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1313i_LNP",  std::cref(Cqe_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1321i_LNP",  std::cref(Cqe_1321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1322i_LNP",  std::cref(Cqe_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1323i_LNP",  std::cref(Cqe_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1331i_LNP",  std::cref(Cqe_1331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1332i_LNP",  std::cref(Cqe_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_1333i_LNP",  std::cref(Cqe_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2212i_LNP",  std::cref(Cqe_2212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2213i_LNP",  std::cref(Cqe_2213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2223i_LNP",  std::cref(Cqe_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2312i_LNP",  std::cref(Cqe_2312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2313i_LNP",  std::cref(Cqe_2313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2321i_LNP",  std::cref(Cqe_2321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2322i_LNP",  std::cref(Cqe_2322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2323i_LNP",  std::cref(Cqe_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2331i_LNP",  std::cref(Cqe_2331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2332i_LNP",  std::cref(Cqe_2332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2333i_LNP",  std::cref(Cqe_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_2311i_LNP",  std::cref(Cqe_2311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_3312i_LNP",  std::cref(Cqe_3312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_3313i_LNP",  std::cref(Cqe_3313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cqe_3323i_LNP",  std::cref(Cqe_3323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1111r_LNP",  std::cref(Cledq_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1112r_LNP",  std::cref(Cledq_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1113r_LNP",  std::cref(Cledq_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1121r_LNP",  std::cref(Cledq_1121r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1122r_LNP",  std::cref(Cledq_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1123r_LNP",  std::cref(Cledq_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1131r_LNP",  std::cref(Cledq_1131r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1132r_LNP",  std::cref(Cledq_1132r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1133r_LNP",  std::cref(Cledq_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1211r_LNP",  std::cref(Cledq_1211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1212r_LNP",  std::cref(Cledq_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1213r_LNP",  std::cref(Cledq_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1221r_LNP",  std::cref(Cledq_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1222r_LNP",  std::cref(Cledq_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1223r_LNP",  std::cref(Cledq_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1231r_LNP",  std::cref(Cledq_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1232r_LNP",  std::cref(Cledq_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1233r_LNP",  std::cref(Cledq_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1311r_LNP",  std::cref(Cledq_1311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1312r_LNP",  std::cref(Cledq_1312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1313r_LNP",  std::cref(Cledq_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1321r_LNP",  std::cref(Cledq_1321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1322r_LNP",  std::cref(Cledq_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1323r_LNP",  std::cref(Cledq_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1331r_LNP",  std::cref(Cledq_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1332r_LNP",  std::cref(Cledq_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1333r_LNP",  std::cref(Cledq_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2111r_LNP",  std::cref(Cledq_2111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2112r_LNP",  std::cref(Cledq_2112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2113r_LNP",  std::cref(Cledq_2113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2121r_LNP",  std::cref(Cledq_2121r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2122r_LNP",  std::cref(Cledq_2122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2123r_LNP",  std::cref(Cledq_2123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2131r_LNP",  std::cref(Cledq_2131r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2132r_LNP",  std::cref(Cledq_2132r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2133r_LNP",  std::cref(Cledq_2133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2211r_LNP",  std::cref(Cledq_2211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2212r_LNP",  std::cref(Cledq_2212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2213r_LNP",  std::cref(Cledq_2213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2221r_LNP",  std::cref(Cledq_2221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2222r_LNP",  std::cref(Cledq_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2223r_LNP",  std::cref(Cledq_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2231r_LNP",  std::cref(Cledq_2231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2232r_LNP",  std::cref(Cledq_2232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2233r_LNP",  std::cref(Cledq_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2311r_LNP",  std::cref(Cledq_2311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2312r_LNP",  std::cref(Cledq_2312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2313r_LNP",  std::cref(Cledq_2313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2321r_LNP",  std::cref(Cledq_2321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2322r_LNP",  std::cref(Cledq_2322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2323r_LNP",  std::cref(Cledq_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2331r_LNP",  std::cref(Cledq_2331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2332r_LNP",  std::cref(Cledq_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2333r_LNP",  std::cref(Cledq_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3111r_LNP",  std::cref(Cledq_3111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3112r_LNP",  std::cref(Cledq_3112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3113r_LNP",  std::cref(Cledq_3113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3121r_LNP",  std::cref(Cledq_3121r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3122r_LNP",  std::cref(Cledq_3122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3123r_LNP",  std::cref(Cledq_3123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3131r_LNP",  std::cref(Cledq_3131r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3132r_LNP",  std::cref(Cledq_3132r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3133r_LNP",  std::cref(Cledq_3133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3211r_LNP",  std::cref(Cledq_3211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3212r_LNP",  std::cref(Cledq_3212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3213r_LNP",  std::cref(Cledq_3213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3221r_LNP",  std::cref(Cledq_3221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3222r_LNP",  std::cref(Cledq_3222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3223r_LNP",  std::cref(Cledq_3223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3231r_LNP",  std::cref(Cledq_3231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3232r_LNP",  std::cref(Cledq_3232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3233r_LNP",  std::cref(Cledq_3233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3311r_LNP",  std::cref(Cledq_3311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3312r_LNP",  std::cref(Cledq_3312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3313r_LNP",  std::cref(Cledq_3313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3321r_LNP",  std::cref(Cledq_3321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3322r_LNP",  std::cref(Cledq_3322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3323r_LNP",  std::cref(Cledq_3323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3331r_LNP",  std::cref(Cledq_3331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3332r_LNP",  std::cref(Cledq_3332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3333r_LNP",  std::cref(Cledq_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1111i_LNP",  std::cref(Cledq_1111i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1112i_LNP",  std::cref(Cledq_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1113i_LNP",  std::cref(Cledq_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1121i_LNP",  std::cref(Cledq_1121i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1122i_LNP",  std::cref(Cledq_1122i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1123i_LNP",  std::cref(Cledq_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1131i_LNP",  std::cref(Cledq_1131i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1132i_LNP",  std::cref(Cledq_1132i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1133i_LNP",  std::cref(Cledq_1133i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1211i_LNP",  std::cref(Cledq_1211i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1212i_LNP",  std::cref(Cledq_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1213i_LNP",  std::cref(Cledq_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1221i_LNP",  std::cref(Cledq_1221i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1222i_LNP",  std::cref(Cledq_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1223i_LNP",  std::cref(Cledq_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1231i_LNP",  std::cref(Cledq_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1232i_LNP",  std::cref(Cledq_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1233i_LNP",  std::cref(Cledq_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1311i_LNP",  std::cref(Cledq_1311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1312i_LNP",  std::cref(Cledq_1312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1313i_LNP",  std::cref(Cledq_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1321i_LNP",  std::cref(Cledq_1321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1322i_LNP",  std::cref(Cledq_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1323i_LNP",  std::cref(Cledq_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1331i_LNP",  std::cref(Cledq_1331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1332i_LNP",  std::cref(Cledq_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_1333i_LNP",  std::cref(Cledq_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2111i_LNP",  std::cref(Cledq_2111i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2112i_LNP",  std::cref(Cledq_2112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2113i_LNP",  std::cref(Cledq_2113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2121i_LNP",  std::cref(Cledq_2121i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2122i_LNP",  std::cref(Cledq_2122i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2123i_LNP",  std::cref(Cledq_2123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2131i_LNP",  std::cref(Cledq_2131i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2132i_LNP",  std::cref(Cledq_2132i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2133i_LNP",  std::cref(Cledq_2133i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2211i_LNP",  std::cref(Cledq_2211i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2212i_LNP",  std::cref(Cledq_2212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2213i_LNP",  std::cref(Cledq_2213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2221i_LNP",  std::cref(Cledq_2221i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2222i_LNP",  std::cref(Cledq_2222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2223i_LNP",  std::cref(Cledq_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2231i_LNP",  std::cref(Cledq_2231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2232i_LNP",  std::cref(Cledq_2232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2233i_LNP",  std::cref(Cledq_2233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2311i_LNP",  std::cref(Cledq_2311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2312i_LNP",  std::cref(Cledq_2312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2313i_LNP",  std::cref(Cledq_2313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2321i_LNP",  std::cref(Cledq_2321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2322i_LNP",  std::cref(Cledq_2322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2323i_LNP",  std::cref(Cledq_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2331i_LNP",  std::cref(Cledq_2331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2332i_LNP",  std::cref(Cledq_2332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_2333i_LNP",  std::cref(Cledq_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3111i_LNP",  std::cref(Cledq_3111i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3112i_LNP",  std::cref(Cledq_3112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3113i_LNP",  std::cref(Cledq_3113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3121i_LNP",  std::cref(Cledq_3121i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3122i_LNP",  std::cref(Cledq_3122i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3123i_LNP",  std::cref(Cledq_3123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3131i_LNP",  std::cref(Cledq_3131i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3132i_LNP",  std::cref(Cledq_3132i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3133i_LNP",  std::cref(Cledq_3133i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3211i_LNP",  std::cref(Cledq_3211i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3212i_LNP",  std::cref(Cledq_3212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3213i_LNP",  std::cref(Cledq_3213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3221i_LNP",  std::cref(Cledq_3221i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3222i_LNP",  std::cref(Cledq_3222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3223i_LNP",  std::cref(Cledq_3223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3231i_LNP",  std::cref(Cledq_3231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3232i_LNP",  std::cref(Cledq_3232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3233i_LNP",  std::cref(Cledq_3233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3311i_LNP",  std::cref(Cledq_3311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3312i_LNP",  std::cref(Cledq_3312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3313i_LNP",  std::cref(Cledq_3313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3321i_LNP",  std::cref(Cledq_3321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3322i_LNP",  std::cref(Cledq_3322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3323i_LNP",  std::cref(Cledq_3323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3331i_LNP",  std::cref(Cledq_3331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3332i_LNP",  std::cref(Cledq_3332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cledq_3333i_LNP",  std::cref(Cledq_3333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1111r_LNP",  std::cref(Cquqd1_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1112r_LNP",  std::cref(Cquqd1_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1113r_LNP",  std::cref(Cquqd1_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1121r_LNP",  std::cref(Cquqd1_1121r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1122r_LNP",  std::cref(Cquqd1_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1123r_LNP",  std::cref(Cquqd1_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1131r_LNP",  std::cref(Cquqd1_1131r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1132r_LNP",  std::cref(Cquqd1_1132r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1133r_LNP",  std::cref(Cquqd1_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1211r_LNP",  std::cref(Cquqd1_1211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1212r_LNP",  std::cref(Cquqd1_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1213r_LNP",  std::cref(Cquqd1_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1221r_LNP",  std::cref(Cquqd1_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1222r_LNP",  std::cref(Cquqd1_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1223r_LNP",  std::cref(Cquqd1_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1231r_LNP",  std::cref(Cquqd1_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1232r_LNP",  std::cref(Cquqd1_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1233r_LNP",  std::cref(Cquqd1_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1311r_LNP",  std::cref(Cquqd1_1311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1312r_LNP",  std::cref(Cquqd1_1312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1313r_LNP",  std::cref(Cquqd1_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1321r_LNP",  std::cref(Cquqd1_1321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1322r_LNP",  std::cref(Cquqd1_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1323r_LNP",  std::cref(Cquqd1_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1331r_LNP",  std::cref(Cquqd1_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1332r_LNP",  std::cref(Cquqd1_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1333r_LNP",  std::cref(Cquqd1_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2111r_LNP",  std::cref(Cquqd1_2111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2112r_LNP",  std::cref(Cquqd1_2112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2113r_LNP",  std::cref(Cquqd1_2113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2121r_LNP",  std::cref(Cquqd1_2121r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2122r_LNP",  std::cref(Cquqd1_2122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2123r_LNP",  std::cref(Cquqd1_2123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2131r_LNP",  std::cref(Cquqd1_2131r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2132r_LNP",  std::cref(Cquqd1_2132r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2133r_LNP",  std::cref(Cquqd1_2133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2211r_LNP",  std::cref(Cquqd1_2211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2212r_LNP",  std::cref(Cquqd1_2212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2213r_LNP",  std::cref(Cquqd1_2213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2221r_LNP",  std::cref(Cquqd1_2221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2222r_LNP",  std::cref(Cquqd1_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2223r_LNP",  std::cref(Cquqd1_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2231r_LNP",  std::cref(Cquqd1_2231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2232r_LNP",  std::cref(Cquqd1_2232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2233r_LNP",  std::cref(Cquqd1_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2311r_LNP",  std::cref(Cquqd1_2311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2312r_LNP",  std::cref(Cquqd1_2312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2313r_LNP",  std::cref(Cquqd1_2313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2321r_LNP",  std::cref(Cquqd1_2321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2322r_LNP",  std::cref(Cquqd1_2322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2323r_LNP",  std::cref(Cquqd1_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2331r_LNP",  std::cref(Cquqd1_2331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2332r_LNP",  std::cref(Cquqd1_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2333r_LNP",  std::cref(Cquqd1_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3111r_LNP",  std::cref(Cquqd1_3111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3112r_LNP",  std::cref(Cquqd1_3112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3113r_LNP",  std::cref(Cquqd1_3113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3121r_LNP",  std::cref(Cquqd1_3121r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3122r_LNP",  std::cref(Cquqd1_3122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3123r_LNP",  std::cref(Cquqd1_3123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3131r_LNP",  std::cref(Cquqd1_3131r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3132r_LNP",  std::cref(Cquqd1_3132r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3133r_LNP",  std::cref(Cquqd1_3133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3211r_LNP",  std::cref(Cquqd1_3211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3212r_LNP",  std::cref(Cquqd1_3212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3213r_LNP",  std::cref(Cquqd1_3213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3221r_LNP",  std::cref(Cquqd1_3221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3222r_LNP",  std::cref(Cquqd1_3222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3223r_LNP",  std::cref(Cquqd1_3223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3231r_LNP",  std::cref(Cquqd1_3231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3232r_LNP",  std::cref(Cquqd1_3232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3233r_LNP",  std::cref(Cquqd1_3233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3311r_LNP",  std::cref(Cquqd1_3311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3312r_LNP",  std::cref(Cquqd1_3312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3313r_LNP",  std::cref(Cquqd1_3313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3321r_LNP",  std::cref(Cquqd1_3321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3322r_LNP",  std::cref(Cquqd1_3322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3323r_LNP",  std::cref(Cquqd1_3323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3331r_LNP",  std::cref(Cquqd1_3331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3332r_LNP",  std::cref(Cquqd1_3332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3333r_LNP",  std::cref(Cquqd1_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1111i_LNP",  std::cref(Cquqd1_1111i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1112i_LNP",  std::cref(Cquqd1_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1113i_LNP",  std::cref(Cquqd1_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1121i_LNP",  std::cref(Cquqd1_1121i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1122i_LNP",  std::cref(Cquqd1_1122i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1123i_LNP",  std::cref(Cquqd1_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1131i_LNP",  std::cref(Cquqd1_1131i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1132i_LNP",  std::cref(Cquqd1_1132i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1133i_LNP",  std::cref(Cquqd1_1133i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1211i_LNP",  std::cref(Cquqd1_1211i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1212i_LNP",  std::cref(Cquqd1_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1213i_LNP",  std::cref(Cquqd1_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1221i_LNP",  std::cref(Cquqd1_1221i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1222i_LNP",  std::cref(Cquqd1_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1223i_LNP",  std::cref(Cquqd1_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1231i_LNP",  std::cref(Cquqd1_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1232i_LNP",  std::cref(Cquqd1_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1233i_LNP",  std::cref(Cquqd1_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1311i_LNP",  std::cref(Cquqd1_1311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1312i_LNP",  std::cref(Cquqd1_1312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1313i_LNP",  std::cref(Cquqd1_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1321i_LNP",  std::cref(Cquqd1_1321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1322i_LNP",  std::cref(Cquqd1_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1323i_LNP",  std::cref(Cquqd1_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1331i_LNP",  std::cref(Cquqd1_1331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1332i_LNP",  std::cref(Cquqd1_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_1333i_LNP",  std::cref(Cquqd1_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2111i_LNP",  std::cref(Cquqd1_2111i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2112i_LNP",  std::cref(Cquqd1_2112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2113i_LNP",  std::cref(Cquqd1_2113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2121i_LNP",  std::cref(Cquqd1_2121i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2122i_LNP",  std::cref(Cquqd1_2122i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2123i_LNP",  std::cref(Cquqd1_2123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2131i_LNP",  std::cref(Cquqd1_2131i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2132i_LNP",  std::cref(Cquqd1_2132i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2133i_LNP",  std::cref(Cquqd1_2133i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2211i_LNP",  std::cref(Cquqd1_2211i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2212i_LNP",  std::cref(Cquqd1_2212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2213i_LNP",  std::cref(Cquqd1_2213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2221i_LNP",  std::cref(Cquqd1_2221i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2222i_LNP",  std::cref(Cquqd1_2222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2223i_LNP",  std::cref(Cquqd1_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2231i_LNP",  std::cref(Cquqd1_2231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2232i_LNP",  std::cref(Cquqd1_2232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2233i_LNP",  std::cref(Cquqd1_2233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2311i_LNP",  std::cref(Cquqd1_2311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2312i_LNP",  std::cref(Cquqd1_2312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2313i_LNP",  std::cref(Cquqd1_2313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2321i_LNP",  std::cref(Cquqd1_2321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2322i_LNP",  std::cref(Cquqd1_2322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2323i_LNP",  std::cref(Cquqd1_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2331i_LNP",  std::cref(Cquqd1_2331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2332i_LNP",  std::cref(Cquqd1_2332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_2333i_LNP",  std::cref(Cquqd1_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3111i_LNP",  std::cref(Cquqd1_3111i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3112i_LNP",  std::cref(Cquqd1_3112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3113i_LNP",  std::cref(Cquqd1_3113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3121i_LNP",  std::cref(Cquqd1_3121i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3122i_LNP",  std::cref(Cquqd1_3122i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3123i_LNP",  std::cref(Cquqd1_3123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3131i_LNP",  std::cref(Cquqd1_3131i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3132i_LNP",  std::cref(Cquqd1_3132i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3133i_LNP",  std::cref(Cquqd1_3133i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3211i_LNP",  std::cref(Cquqd1_3211i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3212i_LNP",  std::cref(Cquqd1_3212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3213i_LNP",  std::cref(Cquqd1_3213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3221i_LNP",  std::cref(Cquqd1_3221i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3222i_LNP",  std::cref(Cquqd1_3222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3223i_LNP",  std::cref(Cquqd1_3223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3231i_LNP",  std::cref(Cquqd1_3231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3232i_LNP",  std::cref(Cquqd1_3232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3233i_LNP",  std::cref(Cquqd1_3233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3311i_LNP",  std::cref(Cquqd1_3311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3312i_LNP",  std::cref(Cquqd1_3312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3313i_LNP",  std::cref(Cquqd1_3313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3321i_LNP",  std::cref(Cquqd1_3321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3322i_LNP",  std::cref(Cquqd1_3322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3323i_LNP",  std::cref(Cquqd1_3323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3331i_LNP",  std::cref(Cquqd1_3331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3332i_LNP",  std::cref(Cquqd1_3332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd1_3333i_LNP",  std::cref(Cquqd1_3333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1111r_LNP",  std::cref(Cquqd8_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1112r_LNP",  std::cref(Cquqd8_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1113r_LNP",  std::cref(Cquqd8_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1121r_LNP",  std::cref(Cquqd8_1121r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1122r_LNP",  std::cref(Cquqd8_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1123r_LNP",  std::cref(Cquqd8_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1131r_LNP",  std::cref(Cquqd8_1131r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1132r_LNP",  std::cref(Cquqd8_1132r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1133r_LNP",  std::cref(Cquqd8_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1211r_LNP",  std::cref(Cquqd8_1211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1212r_LNP",  std::cref(Cquqd8_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1213r_LNP",  std::cref(Cquqd8_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1221r_LNP",  std::cref(Cquqd8_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1222r_LNP",  std::cref(Cquqd8_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1223r_LNP",  std::cref(Cquqd8_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1231r_LNP",  std::cref(Cquqd8_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1232r_LNP",  std::cref(Cquqd8_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1233r_LNP",  std::cref(Cquqd8_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1311r_LNP",  std::cref(Cquqd8_1311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1312r_LNP",  std::cref(Cquqd8_1312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1313r_LNP",  std::cref(Cquqd8_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1321r_LNP",  std::cref(Cquqd8_1321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1322r_LNP",  std::cref(Cquqd8_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1323r_LNP",  std::cref(Cquqd8_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1331r_LNP",  std::cref(Cquqd8_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1332r_LNP",  std::cref(Cquqd8_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1333r_LNP",  std::cref(Cquqd8_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2111r_LNP",  std::cref(Cquqd8_2111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2112r_LNP",  std::cref(Cquqd8_2112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2113r_LNP",  std::cref(Cquqd8_2113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2121r_LNP",  std::cref(Cquqd8_2121r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2122r_LNP",  std::cref(Cquqd8_2122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2123r_LNP",  std::cref(Cquqd8_2123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2131r_LNP",  std::cref(Cquqd8_2131r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2132r_LNP",  std::cref(Cquqd8_2132r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2133r_LNP",  std::cref(Cquqd8_2133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2211r_LNP",  std::cref(Cquqd8_2211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2212r_LNP",  std::cref(Cquqd8_2212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2213r_LNP",  std::cref(Cquqd8_2213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2221r_LNP",  std::cref(Cquqd8_2221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2222r_LNP",  std::cref(Cquqd8_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2223r_LNP",  std::cref(Cquqd8_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2231r_LNP",  std::cref(Cquqd8_2231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2232r_LNP",  std::cref(Cquqd8_2232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2233r_LNP",  std::cref(Cquqd8_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2311r_LNP",  std::cref(Cquqd8_2311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2312r_LNP",  std::cref(Cquqd8_2312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2313r_LNP",  std::cref(Cquqd8_2313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2321r_LNP",  std::cref(Cquqd8_2321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2322r_LNP",  std::cref(Cquqd8_2322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2323r_LNP",  std::cref(Cquqd8_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2331r_LNP",  std::cref(Cquqd8_2331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2332r_LNP",  std::cref(Cquqd8_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2333r_LNP",  std::cref(Cquqd8_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3111r_LNP",  std::cref(Cquqd8_3111r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3112r_LNP",  std::cref(Cquqd8_3112r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3113r_LNP",  std::cref(Cquqd8_3113r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3121r_LNP",  std::cref(Cquqd8_3121r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3122r_LNP",  std::cref(Cquqd8_3122r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3123r_LNP",  std::cref(Cquqd8_3123r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3131r_LNP",  std::cref(Cquqd8_3131r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3132r_LNP",  std::cref(Cquqd8_3132r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3133r_LNP",  std::cref(Cquqd8_3133r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3211r_LNP",  std::cref(Cquqd8_3211r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3212r_LNP",  std::cref(Cquqd8_3212r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3213r_LNP",  std::cref(Cquqd8_3213r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3221r_LNP",  std::cref(Cquqd8_3221r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3222r_LNP",  std::cref(Cquqd8_3222r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3223r_LNP",  std::cref(Cquqd8_3223r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3231r_LNP",  std::cref(Cquqd8_3231r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3232r_LNP",  std::cref(Cquqd8_3232r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3233r_LNP",  std::cref(Cquqd8_3233r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3311r_LNP",  std::cref(Cquqd8_3311r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3312r_LNP",  std::cref(Cquqd8_3312r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3313r_LNP",  std::cref(Cquqd8_3313r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3321r_LNP",  std::cref(Cquqd8_3321r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3322r_LNP",  std::cref(Cquqd8_3322r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3323r_LNP",  std::cref(Cquqd8_3323r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3331r_LNP",  std::cref(Cquqd8_3331r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3332r_LNP",  std::cref(Cquqd8_3332r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3333r_LNP",  std::cref(Cquqd8_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1111i_LNP",  std::cref(Cquqd8_1111i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1112i_LNP",  std::cref(Cquqd8_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1113i_LNP",  std::cref(Cquqd8_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1121i_LNP",  std::cref(Cquqd8_1121i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1122i_LNP",  std::cref(Cquqd8_1122i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1123i_LNP",  std::cref(Cquqd8_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1131i_LNP",  std::cref(Cquqd8_1131i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1132i_LNP",  std::cref(Cquqd8_1132i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1133i_LNP",  std::cref(Cquqd8_1133i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1211i_LNP",  std::cref(Cquqd8_1211i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1212i_LNP",  std::cref(Cquqd8_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1213i_LNP",  std::cref(Cquqd8_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1221i_LNP",  std::cref(Cquqd8_1221i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1222i_LNP",  std::cref(Cquqd8_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1223i_LNP",  std::cref(Cquqd8_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1231i_LNP",  std::cref(Cquqd8_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1232i_LNP",  std::cref(Cquqd8_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1233i_LNP",  std::cref(Cquqd8_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1311i_LNP",  std::cref(Cquqd8_1311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1312i_LNP",  std::cref(Cquqd8_1312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1313i_LNP",  std::cref(Cquqd8_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1321i_LNP",  std::cref(Cquqd8_1321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1322i_LNP",  std::cref(Cquqd8_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1323i_LNP",  std::cref(Cquqd8_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1331i_LNP",  std::cref(Cquqd8_1331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1332i_LNP",  std::cref(Cquqd8_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_1333i_LNP",  std::cref(Cquqd8_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2111i_LNP",  std::cref(Cquqd8_2111i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2112i_LNP",  std::cref(Cquqd8_2112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2113i_LNP",  std::cref(Cquqd8_2113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2121i_LNP",  std::cref(Cquqd8_2121i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2122i_LNP",  std::cref(Cquqd8_2122i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2123i_LNP",  std::cref(Cquqd8_2123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2131i_LNP",  std::cref(Cquqd8_2131i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2132i_LNP",  std::cref(Cquqd8_2132i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2133i_LNP",  std::cref(Cquqd8_2133i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2211i_LNP",  std::cref(Cquqd8_2211i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2212i_LNP",  std::cref(Cquqd8_2212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2213i_LNP",  std::cref(Cquqd8_2213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2221i_LNP",  std::cref(Cquqd8_2221i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2222i_LNP",  std::cref(Cquqd8_2222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2223i_LNP",  std::cref(Cquqd8_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2231i_LNP",  std::cref(Cquqd8_2231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2232i_LNP",  std::cref(Cquqd8_2232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2233i_LNP",  std::cref(Cquqd8_2233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2311i_LNP",  std::cref(Cquqd8_2311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2312i_LNP",  std::cref(Cquqd8_2312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2313i_LNP",  std::cref(Cquqd8_2313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2321i_LNP",  std::cref(Cquqd8_2321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2322i_LNP",  std::cref(Cquqd8_2322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2323i_LNP",  std::cref(Cquqd8_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2331i_LNP",  std::cref(Cquqd8_2331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2332i_LNP",  std::cref(Cquqd8_2332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_2333i_LNP",  std::cref(Cquqd8_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3111i_LNP",  std::cref(Cquqd8_3111i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3112i_LNP",  std::cref(Cquqd8_3112i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3113i_LNP",  std::cref(Cquqd8_3113i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3121i_LNP",  std::cref(Cquqd8_3121i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3122i_LNP",  std::cref(Cquqd8_3122i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3123i_LNP",  std::cref(Cquqd8_3123i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3131i_LNP",  std::cref(Cquqd8_3131i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3132i_LNP",  std::cref(Cquqd8_3132i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3133i_LNP",  std::cref(Cquqd8_3133i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3211i_LNP",  std::cref(Cquqd8_3211i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3212i_LNP",  std::cref(Cquqd8_3212i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3213i_LNP",  std::cref(Cquqd8_3213i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3221i_LNP",  std::cref(Cquqd8_3221i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3222i_LNP",  std::cref(Cquqd8_3222i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3223i_LNP",  std::cref(Cquqd8_3223i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3231i_LNP",  std::cref(Cquqd8_3231i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3232i_LNP",  std::cref(Cquqd8_3232i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3233i_LNP",  std::cref(Cquqd8_3233i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3311i_LNP",  std::cref(Cquqd8_3311i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3312i_LNP",  std::cref(Cquqd8_3312i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3313i_LNP",  std::cref(Cquqd8_3313i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3321i_LNP",  std::cref(Cquqd8_3321i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3322i_LNP",  std::cref(Cquqd8_3322i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3323i_LNP",  std::cref(Cquqd8_3323i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3331i_LNP",  std::cref(Cquqd8_3331i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3332i_LNP",  std::cref(Cquqd8_3332i_LNP)));
    ModelParamMap.insert(std::make_pair("Cquqd8_3333i_LNP",  std::cref(Cquqd8_3333i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1111r_LNP",  std::cref(Clequ1_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1112r_LNP",  std::cref(Clequ1_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1113r_LNP",  std::cref(Clequ1_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1121r_LNP",  std::cref(Clequ1_1121r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1122r_LNP",  std::cref(Clequ1_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1123r_LNP",  std::cref(Clequ1_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1131r_LNP",  std::cref(Clequ1_1131r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1132r_LNP",  std::cref(Clequ1_1132r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1133r_LNP",  std::cref(Clequ1_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1211r_LNP",  std::cref(Clequ1_1211r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1212r_LNP",  std::cref(Clequ1_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1213r_LNP",  std::cref(Clequ1_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1221r_LNP",  std::cref(Clequ1_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1222r_LNP",  std::cref(Clequ1_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1223r_LNP",  std::cref(Clequ1_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1231r_LNP",  std::cref(Clequ1_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1232r_LNP",  std::cref(Clequ1_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1233r_LNP",  std::cref(Clequ1_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1311r_LNP",  std::cref(Clequ1_1311r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1312r_LNP",  std::cref(Clequ1_1312r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1313r_LNP",  std::cref(Clequ1_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1321r_LNP",  std::cref(Clequ1_1321r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1322r_LNP",  std::cref(Clequ1_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1323r_LNP",  std::cref(Clequ1_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1331r_LNP",  std::cref(Clequ1_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1332r_LNP",  std::cref(Clequ1_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1333r_LNP",  std::cref(Clequ1_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2111r_LNP",  std::cref(Clequ1_2111r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2112r_LNP",  std::cref(Clequ1_2112r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2113r_LNP",  std::cref(Clequ1_2113r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2121r_LNP",  std::cref(Clequ1_2121r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2122r_LNP",  std::cref(Clequ1_2122r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2123r_LNP",  std::cref(Clequ1_2123r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2131r_LNP",  std::cref(Clequ1_2131r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2132r_LNP",  std::cref(Clequ1_2132r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2133r_LNP",  std::cref(Clequ1_2133r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2211r_LNP",  std::cref(Clequ1_2211r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2212r_LNP",  std::cref(Clequ1_2212r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2213r_LNP",  std::cref(Clequ1_2213r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2221r_LNP",  std::cref(Clequ1_2221r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2222r_LNP",  std::cref(Clequ1_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2223r_LNP",  std::cref(Clequ1_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2231r_LNP",  std::cref(Clequ1_2231r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2232r_LNP",  std::cref(Clequ1_2232r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2233r_LNP",  std::cref(Clequ1_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2311r_LNP",  std::cref(Clequ1_2311r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2312r_LNP",  std::cref(Clequ1_2312r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2313r_LNP",  std::cref(Clequ1_2313r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2321r_LNP",  std::cref(Clequ1_2321r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2322r_LNP",  std::cref(Clequ1_2322r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2323r_LNP",  std::cref(Clequ1_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2331r_LNP",  std::cref(Clequ1_2331r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2332r_LNP",  std::cref(Clequ1_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2333r_LNP",  std::cref(Clequ1_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3111r_LNP",  std::cref(Clequ1_3111r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3112r_LNP",  std::cref(Clequ1_3112r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3113r_LNP",  std::cref(Clequ1_3113r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3121r_LNP",  std::cref(Clequ1_3121r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3122r_LNP",  std::cref(Clequ1_3122r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3123r_LNP",  std::cref(Clequ1_3123r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3131r_LNP",  std::cref(Clequ1_3131r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3132r_LNP",  std::cref(Clequ1_3132r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3133r_LNP",  std::cref(Clequ1_3133r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3211r_LNP",  std::cref(Clequ1_3211r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3212r_LNP",  std::cref(Clequ1_3212r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3213r_LNP",  std::cref(Clequ1_3213r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3221r_LNP",  std::cref(Clequ1_3221r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3222r_LNP",  std::cref(Clequ1_3222r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3223r_LNP",  std::cref(Clequ1_3223r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3231r_LNP",  std::cref(Clequ1_3231r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3232r_LNP",  std::cref(Clequ1_3232r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3233r_LNP",  std::cref(Clequ1_3233r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3311r_LNP",  std::cref(Clequ1_3311r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3312r_LNP",  std::cref(Clequ1_3312r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3313r_LNP",  std::cref(Clequ1_3313r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3321r_LNP",  std::cref(Clequ1_3321r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3322r_LNP",  std::cref(Clequ1_3322r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3323r_LNP",  std::cref(Clequ1_3323r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3331r_LNP",  std::cref(Clequ1_3331r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3332r_LNP",  std::cref(Clequ1_3332r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3333r_LNP",  std::cref(Clequ1_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1111i_LNP",  std::cref(Clequ1_1111i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1112i_LNP",  std::cref(Clequ1_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1113i_LNP",  std::cref(Clequ1_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1121i_LNP",  std::cref(Clequ1_1121i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1122i_LNP",  std::cref(Clequ1_1122i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1123i_LNP",  std::cref(Clequ1_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1131i_LNP",  std::cref(Clequ1_1131i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1132i_LNP",  std::cref(Clequ1_1132i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1133i_LNP",  std::cref(Clequ1_1133i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1211i_LNP",  std::cref(Clequ1_1211i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1212i_LNP",  std::cref(Clequ1_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1213i_LNP",  std::cref(Clequ1_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1221i_LNP",  std::cref(Clequ1_1221i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1222i_LNP",  std::cref(Clequ1_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1223i_LNP",  std::cref(Clequ1_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1231i_LNP",  std::cref(Clequ1_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1232i_LNP",  std::cref(Clequ1_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1233i_LNP",  std::cref(Clequ1_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1311i_LNP",  std::cref(Clequ1_1311i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1312i_LNP",  std::cref(Clequ1_1312i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1313i_LNP",  std::cref(Clequ1_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1321i_LNP",  std::cref(Clequ1_1321i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1322i_LNP",  std::cref(Clequ1_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1323i_LNP",  std::cref(Clequ1_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1331i_LNP",  std::cref(Clequ1_1331i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1332i_LNP",  std::cref(Clequ1_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_1333i_LNP",  std::cref(Clequ1_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2111i_LNP",  std::cref(Clequ1_2111i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2112i_LNP",  std::cref(Clequ1_2112i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2113i_LNP",  std::cref(Clequ1_2113i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2121i_LNP",  std::cref(Clequ1_2121i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2122i_LNP",  std::cref(Clequ1_2122i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2123i_LNP",  std::cref(Clequ1_2123i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2131i_LNP",  std::cref(Clequ1_2131i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2132i_LNP",  std::cref(Clequ1_2132i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2133i_LNP",  std::cref(Clequ1_2133i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2211i_LNP",  std::cref(Clequ1_2211i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2212i_LNP",  std::cref(Clequ1_2212i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2213i_LNP",  std::cref(Clequ1_2213i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2221i_LNP",  std::cref(Clequ1_2221i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2222i_LNP",  std::cref(Clequ1_2222i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2223i_LNP",  std::cref(Clequ1_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2231i_LNP",  std::cref(Clequ1_2231i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2232i_LNP",  std::cref(Clequ1_2232i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2233i_LNP",  std::cref(Clequ1_2233i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2311i_LNP",  std::cref(Clequ1_2311i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2312i_LNP",  std::cref(Clequ1_2312i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2313i_LNP",  std::cref(Clequ1_2313i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2321i_LNP",  std::cref(Clequ1_2321i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2322i_LNP",  std::cref(Clequ1_2322i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2323i_LNP",  std::cref(Clequ1_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2331i_LNP",  std::cref(Clequ1_2331i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2332i_LNP",  std::cref(Clequ1_2332i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_2333i_LNP",  std::cref(Clequ1_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3111i_LNP",  std::cref(Clequ1_3111i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3112i_LNP",  std::cref(Clequ1_3112i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3113i_LNP",  std::cref(Clequ1_3113i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3121i_LNP",  std::cref(Clequ1_3121i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3122i_LNP",  std::cref(Clequ1_3122i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3123i_LNP",  std::cref(Clequ1_3123i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3131i_LNP",  std::cref(Clequ1_3131i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3132i_LNP",  std::cref(Clequ1_3132i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3133i_LNP",  std::cref(Clequ1_3133i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3211i_LNP",  std::cref(Clequ1_3211i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3212i_LNP",  std::cref(Clequ1_3212i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3213i_LNP",  std::cref(Clequ1_3213i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3221i_LNP",  std::cref(Clequ1_3221i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3222i_LNP",  std::cref(Clequ1_3222i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3223i_LNP",  std::cref(Clequ1_3223i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3231i_LNP",  std::cref(Clequ1_3231i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3232i_LNP",  std::cref(Clequ1_3232i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3233i_LNP",  std::cref(Clequ1_3233i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3311i_LNP",  std::cref(Clequ1_3311i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3312i_LNP",  std::cref(Clequ1_3312i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3313i_LNP",  std::cref(Clequ1_3313i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3321i_LNP",  std::cref(Clequ1_3321i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3322i_LNP",  std::cref(Clequ1_3322i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3323i_LNP",  std::cref(Clequ1_3323i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3331i_LNP",  std::cref(Clequ1_3331i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3332i_LNP",  std::cref(Clequ1_3332i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ1_3333i_LNP",  std::cref(Clequ1_3333i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1111r_LNP",  std::cref(Clequ3_1111r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1112r_LNP",  std::cref(Clequ3_1112r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1113r_LNP",  std::cref(Clequ3_1113r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1121r_LNP",  std::cref(Clequ3_1121r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1122r_LNP",  std::cref(Clequ3_1122r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1123r_LNP",  std::cref(Clequ3_1123r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1131r_LNP",  std::cref(Clequ3_1131r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1132r_LNP",  std::cref(Clequ3_1132r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1133r_LNP",  std::cref(Clequ3_1133r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1211r_LNP",  std::cref(Clequ3_1211r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1212r_LNP",  std::cref(Clequ3_1212r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1213r_LNP",  std::cref(Clequ3_1213r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1221r_LNP",  std::cref(Clequ3_1221r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1222r_LNP",  std::cref(Clequ3_1222r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1223r_LNP",  std::cref(Clequ3_1223r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1231r_LNP",  std::cref(Clequ3_1231r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1232r_LNP",  std::cref(Clequ3_1232r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1233r_LNP",  std::cref(Clequ3_1233r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1311r_LNP",  std::cref(Clequ3_1311r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1312r_LNP",  std::cref(Clequ3_1312r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1313r_LNP",  std::cref(Clequ3_1313r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1321r_LNP",  std::cref(Clequ3_1321r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1322r_LNP",  std::cref(Clequ3_1322r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1323r_LNP",  std::cref(Clequ3_1323r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1331r_LNP",  std::cref(Clequ3_1331r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1332r_LNP",  std::cref(Clequ3_1332r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1333r_LNP",  std::cref(Clequ3_1333r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2111r_LNP",  std::cref(Clequ3_2111r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2112r_LNP",  std::cref(Clequ3_2112r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2113r_LNP",  std::cref(Clequ3_2113r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2121r_LNP",  std::cref(Clequ3_2121r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2122r_LNP",  std::cref(Clequ3_2122r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2123r_LNP",  std::cref(Clequ3_2123r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2131r_LNP",  std::cref(Clequ3_2131r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2132r_LNP",  std::cref(Clequ3_2132r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2133r_LNP",  std::cref(Clequ3_2133r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2211r_LNP",  std::cref(Clequ3_2211r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2212r_LNP",  std::cref(Clequ3_2212r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2213r_LNP",  std::cref(Clequ3_2213r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2221r_LNP",  std::cref(Clequ3_2221r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2222r_LNP",  std::cref(Clequ3_2222r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2223r_LNP",  std::cref(Clequ3_2223r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2231r_LNP",  std::cref(Clequ3_2231r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2232r_LNP",  std::cref(Clequ3_2232r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2233r_LNP",  std::cref(Clequ3_2233r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2311r_LNP",  std::cref(Clequ3_2311r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2312r_LNP",  std::cref(Clequ3_2312r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2313r_LNP",  std::cref(Clequ3_2313r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2321r_LNP",  std::cref(Clequ3_2321r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2322r_LNP",  std::cref(Clequ3_2322r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2323r_LNP",  std::cref(Clequ3_2323r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2331r_LNP",  std::cref(Clequ3_2331r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2332r_LNP",  std::cref(Clequ3_2332r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2333r_LNP",  std::cref(Clequ3_2333r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3111r_LNP",  std::cref(Clequ3_3111r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3112r_LNP",  std::cref(Clequ3_3112r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3113r_LNP",  std::cref(Clequ3_3113r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3121r_LNP",  std::cref(Clequ3_3121r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3122r_LNP",  std::cref(Clequ3_3122r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3123r_LNP",  std::cref(Clequ3_3123r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3131r_LNP",  std::cref(Clequ3_3131r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3132r_LNP",  std::cref(Clequ3_3132r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3133r_LNP",  std::cref(Clequ3_3133r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3211r_LNP",  std::cref(Clequ3_3211r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3212r_LNP",  std::cref(Clequ3_3212r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3213r_LNP",  std::cref(Clequ3_3213r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3221r_LNP",  std::cref(Clequ3_3221r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3222r_LNP",  std::cref(Clequ3_3222r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3223r_LNP",  std::cref(Clequ3_3223r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3231r_LNP",  std::cref(Clequ3_3231r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3232r_LNP",  std::cref(Clequ3_3232r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3233r_LNP",  std::cref(Clequ3_3233r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3311r_LNP",  std::cref(Clequ3_3311r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3312r_LNP",  std::cref(Clequ3_3312r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3313r_LNP",  std::cref(Clequ3_3313r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3321r_LNP",  std::cref(Clequ3_3321r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3322r_LNP",  std::cref(Clequ3_3322r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3323r_LNP",  std::cref(Clequ3_3323r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3331r_LNP",  std::cref(Clequ3_3331r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3332r_LNP",  std::cref(Clequ3_3332r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3333r_LNP",  std::cref(Clequ3_3333r_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1111i_LNP",  std::cref(Clequ3_1111i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1112i_LNP",  std::cref(Clequ3_1112i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1113i_LNP",  std::cref(Clequ3_1113i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1121i_LNP",  std::cref(Clequ3_1121i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1122i_LNP",  std::cref(Clequ3_1122i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1123i_LNP",  std::cref(Clequ3_1123i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1131i_LNP",  std::cref(Clequ3_1131i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1132i_LNP",  std::cref(Clequ3_1132i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1133i_LNP",  std::cref(Clequ3_1133i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1211i_LNP",  std::cref(Clequ3_1211i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1212i_LNP",  std::cref(Clequ3_1212i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1213i_LNP",  std::cref(Clequ3_1213i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1221i_LNP",  std::cref(Clequ3_1221i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1222i_LNP",  std::cref(Clequ3_1222i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1223i_LNP",  std::cref(Clequ3_1223i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1231i_LNP",  std::cref(Clequ3_1231i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1232i_LNP",  std::cref(Clequ3_1232i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1233i_LNP",  std::cref(Clequ3_1233i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1311i_LNP",  std::cref(Clequ3_1311i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1312i_LNP",  std::cref(Clequ3_1312i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1313i_LNP",  std::cref(Clequ3_1313i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1321i_LNP",  std::cref(Clequ3_1321i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1322i_LNP",  std::cref(Clequ3_1322i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1323i_LNP",  std::cref(Clequ3_1323i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1331i_LNP",  std::cref(Clequ3_1331i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1332i_LNP",  std::cref(Clequ3_1332i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_1333i_LNP",  std::cref(Clequ3_1333i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2111i_LNP",  std::cref(Clequ3_2111i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2112i_LNP",  std::cref(Clequ3_2112i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2113i_LNP",  std::cref(Clequ3_2113i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2121i_LNP",  std::cref(Clequ3_2121i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2122i_LNP",  std::cref(Clequ3_2122i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2123i_LNP",  std::cref(Clequ3_2123i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2131i_LNP",  std::cref(Clequ3_2131i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2132i_LNP",  std::cref(Clequ3_2132i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2133i_LNP",  std::cref(Clequ3_2133i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2211i_LNP",  std::cref(Clequ3_2211i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2212i_LNP",  std::cref(Clequ3_2212i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2213i_LNP",  std::cref(Clequ3_2213i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2221i_LNP",  std::cref(Clequ3_2221i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2222i_LNP",  std::cref(Clequ3_2222i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2223i_LNP",  std::cref(Clequ3_2223i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2231i_LNP",  std::cref(Clequ3_2231i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2232i_LNP",  std::cref(Clequ3_2232i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2233i_LNP",  std::cref(Clequ3_2233i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2311i_LNP",  std::cref(Clequ3_2311i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2312i_LNP",  std::cref(Clequ3_2312i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2313i_LNP",  std::cref(Clequ3_2313i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2321i_LNP",  std::cref(Clequ3_2321i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2322i_LNP",  std::cref(Clequ3_2322i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2323i_LNP",  std::cref(Clequ3_2323i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2331i_LNP",  std::cref(Clequ3_2331i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2332i_LNP",  std::cref(Clequ3_2332i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_2333i_LNP",  std::cref(Clequ3_2333i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3111i_LNP",  std::cref(Clequ3_3111i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3112i_LNP",  std::cref(Clequ3_3112i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3113i_LNP",  std::cref(Clequ3_3113i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3121i_LNP",  std::cref(Clequ3_3121i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3122i_LNP",  std::cref(Clequ3_3122i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3123i_LNP",  std::cref(Clequ3_3123i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3131i_LNP",  std::cref(Clequ3_3131i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3132i_LNP",  std::cref(Clequ3_3132i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3133i_LNP",  std::cref(Clequ3_3133i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3211i_LNP",  std::cref(Clequ3_3211i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3212i_LNP",  std::cref(Clequ3_3212i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3213i_LNP",  std::cref(Clequ3_3213i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3221i_LNP",  std::cref(Clequ3_3221i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3222i_LNP",  std::cref(Clequ3_3222i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3223i_LNP",  std::cref(Clequ3_3223i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3231i_LNP",  std::cref(Clequ3_3231i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3232i_LNP",  std::cref(Clequ3_3232i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3233i_LNP",  std::cref(Clequ3_3233i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3311i_LNP",  std::cref(Clequ3_3311i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3312i_LNP",  std::cref(Clequ3_3312i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3313i_LNP",  std::cref(Clequ3_3313i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3321i_LNP",  std::cref(Clequ3_3321i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3322i_LNP",  std::cref(Clequ3_3322i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3323i_LNP",  std::cref(Clequ3_3323i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3331i_LNP",  std::cref(Clequ3_3331i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3332i_LNP",  std::cref(Clequ3_3332i_LNP)));
    ModelParamMap.insert(std::make_pair("Clequ3_3333i_LNP",  std::cref(Clequ3_3333i_LNP)));
    
    }
    
    ModelParamMap.insert(std::make_pair("Lambda_NP",  std::cref(Lambda_NP)));
    ModelParamMap.insert(std::make_pair("BrHinv",  std::cref(BrHinv)));
    ModelParamMap.insert(std::make_pair("BrHexo",  std::cref(BrHexo)));
    ModelParamMap.insert(std::make_pair("dg1Z",  std::cref(dg1Z)));
    ModelParamMap.insert(std::make_pair("dKappaga",  std::cref(dKappaga)));
    ModelParamMap.insert(std::make_pair("lambZ",  std::cref(lambZ)));
    ModelParamMap.insert(std::make_pair("eggFint",  std::cref(eggFint)));
    ModelParamMap.insert(std::make_pair("eggFpar",  std::cref(eggFpar)));
    ModelParamMap.insert(std::make_pair("ettHint",  std::cref(ettHint)));
    ModelParamMap.insert(std::make_pair("ettHpar",  std::cref(ettHpar)));
    ModelParamMap.insert(std::make_pair("eVBFint",  std::cref(eVBFint)));
    ModelParamMap.insert(std::make_pair("eVBFpar",  std::cref(eVBFpar)));
    ModelParamMap.insert(std::make_pair("eWHint",  std::cref(eWHint)));
    ModelParamMap.insert(std::make_pair("eWHpar",  std::cref(eWHpar)));
    ModelParamMap.insert(std::make_pair("eZHint",  std::cref(eZHint)));
    ModelParamMap.insert(std::make_pair("eZHpar",  std::cref(eZHpar)));
    ModelParamMap.insert(std::make_pair("eeeWBFint",  std::cref(eeeWBFint)));
    ModelParamMap.insert(std::make_pair("eeeWBFpar",  std::cref(eeeWBFpar)));
    ModelParamMap.insert(std::make_pair("eeeZHint",  std::cref(eeeZHint)));
    ModelParamMap.insert(std::make_pair("eeeZHpar",  std::cref(eeeZHpar)));
    ModelParamMap.insert(std::make_pair("eeettHint",  std::cref(eeettHint)));
    ModelParamMap.insert(std::make_pair("eeettHpar",  std::cref(eeettHpar)));
    ModelParamMap.insert(std::make_pair("eepWBFint",  std::cref(eepWBFint)));
    ModelParamMap.insert(std::make_pair("eepWBFpar",  std::cref(eepWBFpar)));
    ModelParamMap.insert(std::make_pair("eepZBFint",  std::cref(eepZBFint)));
    ModelParamMap.insert(std::make_pair("eepZBFpar",  std::cref(eepZBFpar)));
    ModelParamMap.insert(std::make_pair("eHggint",  std::cref(eHggint)));
    ModelParamMap.insert(std::make_pair("eHggpar",  std::cref(eHggpar)));
    ModelParamMap.insert(std::make_pair("eHWWint",  std::cref(eHWWint)));
    ModelParamMap.insert(std::make_pair("eHWWpar",  std::cref(eHWWpar)));
    ModelParamMap.insert(std::make_pair("eHZZint",  std::cref(eHZZint)));
    ModelParamMap.insert(std::make_pair("eHZZpar",  std::cref(eHZZpar)));
    ModelParamMap.insert(std::make_pair("eHZgaint",  std::cref(eHZgaint)));
    ModelParamMap.insert(std::make_pair("eHZgapar",  std::cref(eHZgapar)));
    ModelParamMap.insert(std::make_pair("eHgagaint",  std::cref(eHgagaint)));
    ModelParamMap.insert(std::make_pair("eHgagapar",  std::cref(eHgagapar)));
    ModelParamMap.insert(std::make_pair("eHmumuint",  std::cref(eHmumuint)));
    ModelParamMap.insert(std::make_pair("eHmumupar",  std::cref(eHmumupar)));
    ModelParamMap.insert(std::make_pair("eHtautauint",  std::cref(eHtautauint)));
    ModelParamMap.insert(std::make_pair("eHtautaupar",  std::cref(eHtautaupar)));
    ModelParamMap.insert(std::make_pair("eHccint",  std::cref(eHccint)));
    ModelParamMap.insert(std::make_pair("eHccpar",  std::cref(eHccpar)));
    ModelParamMap.insert(std::make_pair("eHbbint",  std::cref(eHbbint)));
    ModelParamMap.insert(std::make_pair("eHbbpar",  std::cref(eHbbpar)));
    ModelParamMap.insert(std::make_pair("eeeWWint",  std::cref(eeeWWint)));
    ModelParamMap.insert(std::make_pair("edeeWWdcint",  std::cref(edeeWWdcint)));
    ModelParamMap.insert(std::make_pair("eggFHgaga",  std::cref(eggFHgaga)));
    ModelParamMap.insert(std::make_pair("eggFHZga",  std::cref(eggFHZga)));
    ModelParamMap.insert(std::make_pair("eggFHZZ",  std::cref(eggFHZZ)));
    ModelParamMap.insert(std::make_pair("eggFHWW",  std::cref(eggFHWW)));
    ModelParamMap.insert(std::make_pair("eggFHtautau",  std::cref(eggFHtautau)));
    ModelParamMap.insert(std::make_pair("eggFHbb",  std::cref(eggFHbb)));
    ModelParamMap.insert(std::make_pair("eggFHmumu",  std::cref(eggFHmumu)));
    ModelParamMap.insert(std::make_pair("eVBFHgaga",  std::cref(eVBFHgaga)));
    ModelParamMap.insert(std::make_pair("eVBFHZga",  std::cref(eVBFHZga)));
    ModelParamMap.insert(std::make_pair("eVBFHZZ",  std::cref(eVBFHZZ)));
    ModelParamMap.insert(std::make_pair("eVBFHWW",  std::cref(eVBFHWW)));
    ModelParamMap.insert(std::make_pair("eVBFHtautau",  std::cref(eVBFHtautau)));
    ModelParamMap.insert(std::make_pair("eVBFHbb",  std::cref(eVBFHbb)));
    ModelParamMap.insert(std::make_pair("eVBFHmumu",  std::cref(eVBFHmumu)));
    ModelParamMap.insert(std::make_pair("eWHgaga",  std::cref(eWHgaga)));
    ModelParamMap.insert(std::make_pair("eWHZga",  std::cref(eWHZga)));
    ModelParamMap.insert(std::make_pair("eWHZZ",  std::cref(eWHZZ)));
    ModelParamMap.insert(std::make_pair("eWHWW",  std::cref(eWHWW)));
    ModelParamMap.insert(std::make_pair("eWHtautau",  std::cref(eWHtautau)));
    ModelParamMap.insert(std::make_pair("eWHbb",  std::cref(eWHbb)));
    ModelParamMap.insert(std::make_pair("eWHmumu",  std::cref(eWHmumu)));
    ModelParamMap.insert(std::make_pair("eZHgaga",  std::cref(eZHgaga)));
    ModelParamMap.insert(std::make_pair("eZHZga",  std::cref(eZHZga)));
    ModelParamMap.insert(std::make_pair("eZHZZ",  std::cref(eZHZZ)));
    ModelParamMap.insert(std::make_pair("eZHWW",  std::cref(eZHWW)));
    ModelParamMap.insert(std::make_pair("eZHtautau",  std::cref(eZHtautau)));
    ModelParamMap.insert(std::make_pair("eZHbb",  std::cref(eZHbb)));
    ModelParamMap.insert(std::make_pair("eZHmumu",  std::cref(eZHmumu)));
    ModelParamMap.insert(std::make_pair("ettHgaga",  std::cref(ettHgaga)));
    ModelParamMap.insert(std::make_pair("ettHZga",  std::cref(ettHZga)));
    ModelParamMap.insert(std::make_pair("ettHZZ",  std::cref(ettHZZ)));
    ModelParamMap.insert(std::make_pair("ettHWW",  std::cref(ettHWW)));
    ModelParamMap.insert(std::make_pair("ettHtautau",  std::cref(ettHtautau)));
    ModelParamMap.insert(std::make_pair("ettHbb",  std::cref(ettHbb)));
    ModelParamMap.insert(std::make_pair("ettHmumu",  std::cref(ettHmumu)));
    ModelParamMap.insert(std::make_pair("eVBFHinv",  std::cref(eVBFHinv)));
    ModelParamMap.insert(std::make_pair("eVHinv",  std::cref(eVHinv)));
    ModelParamMap.insert(std::make_pair("nuisP1",  std::cref(nuisP1)));
    ModelParamMap.insert(std::make_pair("nuisP2",  std::cref(nuisP2)));
    ModelParamMap.insert(std::make_pair("nuisP3",  std::cref(nuisP3)));
    ModelParamMap.insert(std::make_pair("nuisP4",  std::cref(nuisP4)));
    ModelParamMap.insert(std::make_pair("nuisP5",  std::cref(nuisP5)));
    ModelParamMap.insert(std::make_pair("nuisP6",  std::cref(nuisP6)));
    ModelParamMap.insert(std::make_pair("nuisP7",  std::cref(nuisP7)));
    ModelParamMap.insert(std::make_pair("nuisP8",  std::cref(nuisP8)));
    ModelParamMap.insert(std::make_pair("nuisP9",  std::cref(nuisP9)));
    ModelParamMap.insert(std::make_pair("nuisP10",  std::cref(nuisP10)));
    ModelParamMap.insert(std::make_pair("eVBF_2_Hbox",  std::cref(eVBF_2_Hbox)));
    ModelParamMap.insert(std::make_pair("eVBF_2_HQ1_11",  std::cref(eVBF_2_HQ1_11)));
    ModelParamMap.insert(std::make_pair("eVBF_2_Hu_11",  std::cref(eVBF_2_Hu_11)));
    ModelParamMap.insert(std::make_pair("eVBF_2_Hd_11",  std::cref(eVBF_2_Hd_11)));
    ModelParamMap.insert(std::make_pair("eVBF_2_HQ3_11",  std::cref(eVBF_2_HQ3_11)));
    ModelParamMap.insert(std::make_pair("eVBF_2_HD",  std::cref(eVBF_2_HD)));
    ModelParamMap.insert(std::make_pair("eVBF_2_HB",  std::cref(eVBF_2_HB)));
    ModelParamMap.insert(std::make_pair("eVBF_2_HW",  std::cref(eVBF_2_HW)));
    ModelParamMap.insert(std::make_pair("eVBF_2_HWB",  std::cref(eVBF_2_HWB)));
    ModelParamMap.insert(std::make_pair("eVBF_2_HG",  std::cref(eVBF_2_HG)));
    ModelParamMap.insert(std::make_pair("eVBF_2_DHB",  std::cref(eVBF_2_DHB)));
    ModelParamMap.insert(std::make_pair("eVBF_2_DHW",  std::cref(eVBF_2_DHW)));
    ModelParamMap.insert(std::make_pair("eVBF_2_DeltaGF",  std::cref(eVBF_2_DeltaGF)));
    ModelParamMap.insert(std::make_pair("eVBF_78_Hbox",  std::cref(eVBF_78_Hbox)));
    ModelParamMap.insert(std::make_pair("eVBF_78_HQ1_11",  std::cref(eVBF_78_HQ1_11)));
    ModelParamMap.insert(std::make_pair("eVBF_78_Hu_11",  std::cref(eVBF_78_Hu_11)));
    ModelParamMap.insert(std::make_pair("eVBF_78_Hd_11",  std::cref(eVBF_78_Hd_11)));
    ModelParamMap.insert(std::make_pair("eVBF_78_HQ3_11",  std::cref(eVBF_78_HQ3_11)));
    ModelParamMap.insert(std::make_pair("eVBF_78_HD",  std::cref(eVBF_78_HD)));
    ModelParamMap.insert(std::make_pair("eVBF_78_HB",  std::cref(eVBF_78_HB)));
    ModelParamMap.insert(std::make_pair("eVBF_78_HW",  std::cref(eVBF_78_HW)));
    ModelParamMap.insert(std::make_pair("eVBF_78_HWB",  std::cref(eVBF_78_HWB)));
    ModelParamMap.insert(std::make_pair("eVBF_78_HG",  std::cref(eVBF_78_HG)));
    ModelParamMap.insert(std::make_pair("eVBF_78_DHB",  std::cref(eVBF_78_DHB)));
    ModelParamMap.insert(std::make_pair("eVBF_78_DHW",  std::cref(eVBF_78_DHW)));
    ModelParamMap.insert(std::make_pair("eVBF_78_DeltaGF",  std::cref(eVBF_78_DeltaGF)));
    ModelParamMap.insert(std::make_pair("eVBF_1314_Hbox",  std::cref(eVBF_1314_Hbox)));
    ModelParamMap.insert(std::make_pair("eVBF_1314_HQ1_11",  std::cref(eVBF_1314_HQ1_11)));
    ModelParamMap.insert(std::make_pair("eVBF_1314_Hu_11",  std::cref(eVBF_1314_Hu_11)));
    ModelParamMap.insert(std::make_pair("eVBF_1314_Hd_11",  std::cref(eVBF_1314_Hd_11)));
    ModelParamMap.insert(std::make_pair("eVBF_1314_HQ3_11",  std::cref(eVBF_1314_HQ3_11)));
    ModelParamMap.insert(std::make_pair("eVBF_1314_HD",  std::cref(eVBF_1314_HD)));
    ModelParamMap.insert(std::make_pair("eVBF_1314_HB",  std::cref(eVBF_1314_HB)));
    ModelParamMap.insert(std::make_pair("eVBF_1314_HW",  std::cref(eVBF_1314_HW)));
    ModelParamMap.insert(std::make_pair("eVBF_1314_HWB",  std::cref(eVBF_1314_HWB)));
    ModelParamMap.insert(std::make_pair("eVBF_1314_HG",  std::cref(eVBF_1314_HG)));
    ModelParamMap.insert(std::make_pair("eVBF_1314_DHB",  std::cref(eVBF_1314_DHB)));
    ModelParamMap.insert(std::make_pair("eVBF_1314_DHW",  std::cref(eVBF_1314_DHW)));
    ModelParamMap.insert(std::make_pair("eVBF_1314_DeltaGF",  std::cref(eVBF_1314_DeltaGF)));
    ModelParamMap.insert(std::make_pair("eWH_2_Hbox",  std::cref(eWH_2_Hbox)));
    ModelParamMap.insert(std::make_pair("eWH_2_HQ3_11",  std::cref(eWH_2_HQ3_11)));
    ModelParamMap.insert(std::make_pair("eWH_2_HD",  std::cref(eWH_2_HD)));
    ModelParamMap.insert(std::make_pair("eWH_2_HW",  std::cref(eWH_2_HW)));
    ModelParamMap.insert(std::make_pair("eWH_2_HWB",  std::cref(eWH_2_HWB)));
    ModelParamMap.insert(std::make_pair("eWH_2_DHW",  std::cref(eWH_2_DHW)));
    ModelParamMap.insert(std::make_pair("eWH_2_DeltaGF",  std::cref(eWH_2_DeltaGF)));
    ModelParamMap.insert(std::make_pair("eWH_78_Hbox",  std::cref(eWH_78_Hbox)));
    ModelParamMap.insert(std::make_pair("eWH_78_HQ3_11",  std::cref(eWH_78_HQ3_11)));
    ModelParamMap.insert(std::make_pair("eWH_78_HD",  std::cref(eWH_78_HD)));
    ModelParamMap.insert(std::make_pair("eWH_78_HW",  std::cref(eWH_78_HW)));
    ModelParamMap.insert(std::make_pair("eWH_78_HWB",  std::cref(eWH_78_HWB)));
    ModelParamMap.insert(std::make_pair("eWH_78_DHW",  std::cref(eWH_78_DHW)));
    ModelParamMap.insert(std::make_pair("eWH_78_DeltaGF",  std::cref(eWH_78_DeltaGF)));
    ModelParamMap.insert(std::make_pair("eWH_1314_Hbox",  std::cref(eWH_1314_Hbox)));
    ModelParamMap.insert(std::make_pair("eWH_1314_HQ3_11",  std::cref(eWH_1314_HQ3_11)));
    ModelParamMap.insert(std::make_pair("eWH_1314_HD",  std::cref(eWH_1314_HD)));
    ModelParamMap.insert(std::make_pair("eWH_1314_HW",  std::cref(eWH_1314_HW)));
    ModelParamMap.insert(std::make_pair("eWH_1314_HWB",  std::cref(eWH_1314_HWB)));
    ModelParamMap.insert(std::make_pair("eWH_1314_DHW",  std::cref(eWH_1314_DHW)));
    ModelParamMap.insert(std::make_pair("eWH_1314_DeltaGF",  std::cref(eWH_1314_DeltaGF)));
    ModelParamMap.insert(std::make_pair("eZH_2_Hbox",  std::cref(eZH_2_Hbox)));
    ModelParamMap.insert(std::make_pair("eZH_2_HQ1_11",  std::cref(eZH_2_HQ1_11)));
    ModelParamMap.insert(std::make_pair("eZH_2_Hu_11",  std::cref(eZH_2_Hu_11)));
    ModelParamMap.insert(std::make_pair("eZH_2_Hd_11",  std::cref(eZH_2_Hd_11)));
    ModelParamMap.insert(std::make_pair("eZH_2_HQ3_11",  std::cref(eZH_2_HQ3_11)));
    ModelParamMap.insert(std::make_pair("eZH_2_HD",  std::cref(eZH_2_HD)));
    ModelParamMap.insert(std::make_pair("eZH_2_HB",  std::cref(eZH_2_HB)));
    ModelParamMap.insert(std::make_pair("eZH_2_HW",  std::cref(eZH_2_HW)));
    ModelParamMap.insert(std::make_pair("eZH_2_HWB",  std::cref(eZH_2_HWB)));
    ModelParamMap.insert(std::make_pair("eZH_2_DHB",  std::cref(eZH_2_DHB)));
    ModelParamMap.insert(std::make_pair("eZH_2_DHW",  std::cref(eZH_2_DHW)));
    ModelParamMap.insert(std::make_pair("eZH_2_DeltaGF",  std::cref(eZH_2_DeltaGF)));
    ModelParamMap.insert(std::make_pair("eZH_78_Hbox",  std::cref(eZH_78_Hbox)));
    ModelParamMap.insert(std::make_pair("eZH_78_HQ1_11",  std::cref(eZH_78_HQ1_11)));
    ModelParamMap.insert(std::make_pair("eZH_78_Hu_11",  std::cref(eZH_78_Hu_11)));
    ModelParamMap.insert(std::make_pair("eZH_78_Hd_11",  std::cref(eZH_78_Hd_11)));
    ModelParamMap.insert(std::make_pair("eZH_78_HQ3_11",  std::cref(eZH_78_HQ3_11)));
    ModelParamMap.insert(std::make_pair("eZH_78_HD",  std::cref(eZH_78_HD)));
    ModelParamMap.insert(std::make_pair("eZH_78_HB",  std::cref(eZH_78_HB)));
    ModelParamMap.insert(std::make_pair("eZH_78_HW",  std::cref(eZH_78_HW)));
    ModelParamMap.insert(std::make_pair("eZH_78_HWB",  std::cref(eZH_78_HWB)));
    ModelParamMap.insert(std::make_pair("eZH_78_DHB",  std::cref(eZH_78_DHB)));
    ModelParamMap.insert(std::make_pair("eZH_78_DHW",  std::cref(eZH_78_DHW)));
    ModelParamMap.insert(std::make_pair("eZH_78_DeltaGF",  std::cref(eZH_78_DeltaGF)));
    ModelParamMap.insert(std::make_pair("eZH_1314_Hbox",  std::cref(eZH_1314_Hbox)));
    ModelParamMap.insert(std::make_pair("eZH_1314_HQ1_11",  std::cref(eZH_1314_HQ1_11)));
    ModelParamMap.insert(std::make_pair("eZH_1314_Hu_11",  std::cref(eZH_1314_Hu_11)));
    ModelParamMap.insert(std::make_pair("eZH_1314_Hd_11",  std::cref(eZH_1314_Hd_11)));
    ModelParamMap.insert(std::make_pair("eZH_1314_HQ3_11",  std::cref(eZH_1314_HQ3_11)));
    ModelParamMap.insert(std::make_pair("eZH_1314_HD",  std::cref(eZH_1314_HD)));
    ModelParamMap.insert(std::make_pair("eZH_1314_HB",  std::cref(eZH_1314_HB)));
    ModelParamMap.insert(std::make_pair("eZH_1314_HW",  std::cref(eZH_1314_HW)));
    ModelParamMap.insert(std::make_pair("eZH_1314_HWB",  std::cref(eZH_1314_HWB)));
    ModelParamMap.insert(std::make_pair("eZH_1314_DHB",  std::cref(eZH_1314_DHB)));
    ModelParamMap.insert(std::make_pair("eZH_1314_DHW",  std::cref(eZH_1314_DHW)));
    ModelParamMap.insert(std::make_pair("eZH_1314_DeltaGF",  std::cref(eZH_1314_DeltaGF)));
    ModelParamMap.insert(std::make_pair("ettH_2_HG",  std::cref(ettH_2_HG)));
    ModelParamMap.insert(std::make_pair("ettH_2_G",  std::cref(ettH_2_G)));
    ModelParamMap.insert(std::make_pair("ettH_2_uG_33r",  std::cref(ettH_2_uG_33r)));
    ModelParamMap.insert(std::make_pair("ettH_2_DeltagHt",  std::cref(ettH_2_DeltagHt)));
    ModelParamMap.insert(std::make_pair("ettH_78_HG",  std::cref(ettH_78_HG)));
    ModelParamMap.insert(std::make_pair("ettH_78_G",  std::cref(ettH_78_G)));
    ModelParamMap.insert(std::make_pair("ettH_78_uG_33r",  std::cref(ettH_78_uG_33r)));
    ModelParamMap.insert(std::make_pair("ettH_78_DeltagHt",  std::cref(ettH_78_DeltagHt)));
    ModelParamMap.insert(std::make_pair("ettH_1314_HG",  std::cref(ettH_1314_HG)));
    ModelParamMap.insert(std::make_pair("ettH_1314_G",  std::cref(ettH_1314_G)));
    ModelParamMap.insert(std::make_pair("ettH_1314_uG_33r",  std::cref(ettH_1314_uG_33r)));
    ModelParamMap.insert(std::make_pair("ettH_1314_DeltagHt",  std::cref(ettH_1314_DeltagHt)));    
    
    
    
    if (FlagMWinput) {
        //  MW scheme
        cAsch = 0.;
        cWsch = 1.;
    } else {
        //  ALpha scheme
        cAsch = 1.;
        cWsch = 0.;
    }
      
}

//If we do not set the SMEFTEvol in the SetParameter this is not needed
bool NPSMEFTd6General::Init(const std::map<std::string, double>& DPars)
{
    std::map<std::string, double> myDPars(DPars);
    
    Lambda_NP = myDPars.at("Lambda_NP"); //done here since it's needed for the numerical value of Wilson Coefficients in SetParameters()
    LambdaNP2 = Lambda_NP * Lambda_NP;
    LambdaNPm2 = 1. / LambdaNP2;
    
    return (StandardModel::Init(myDPars));
}



bool NPSMEFTd6General::PreUpdate()
{
    SMEFTEvolEW.Reset();

    if (!NPbase::PreUpdate()) return (false);

    return (true);
}



void NPSMEFTd6General::ChangeToEvolutorsBasisPureSM()
{
    //In this function we switch from the SM parameters used in the SM class to those needed for the evolutor using the SM expressions
    
    //Here we have included the expressions for the alpha scheme, we should also add those for the Mw scheme
    g1_LEW = sqrt(2*sqrt(2)*GF*(Mz*Mz - sqrt(Mz*Mz*(Mz*Mz - (2*sqrt(2)*M_PI*trueSM.alphaMz())/GF))));
    g2_LEW = sqrt(2*sqrt(2)*GF*(Mz*Mz + sqrt(Mz*Mz*(Mz*Mz - (2*sqrt(2)*M_PI*trueSM.alphaMz())/GF))));
    g3_LEW = sqrt(4*M_PI*AlsMz);
    mH2_LEW = mHl*mHl;
    lambdaH_LEW = (GF*mHl*mHl)/sqrt(2);
    
    me_LEW = leptons[ELECTRON].getMass();
    mmu_LEW = leptons[MU].getMass();
    mtau_LEW = leptons[TAU].getMass();
    
    
    mu_LEW = Mrun(muw, quarks[UP].getMass_scale(), quarks[UP].getMass());
    mc_LEW = Mrun(muw, quarks[CHARM].getMass());
    mt_LEW = Mrun(muw, quarks[TOP].getMass());
    
    md_LEW = Mrun(muw, quarks[DOWN].getMass_scale(), quarks[DOWN].getMass());
    ms_LEW = Mrun(muw, quarks[STRANGE].getMass_scale(), quarks[STRANGE].getMass());
    mb_LEW = Mrun(muw, quarks[BOTTOM].getMass());
    
    CKM aux_CKM;
    aux_CKM.computeCKMwithWolfenstein(lambda, A, rhob, etab);
    s12CKM_LEW = aux_CKM.gets12();
    s13CKM_LEW = aux_CKM.gets13();
    s23CKM_LEW = aux_CKM.gets23();
    dCKM_LEW = aux_CKM.getdelta();
    
}



void NPSMEFTd6General::setSMEFTEvolWC()
{

    	SMEFTEvolEW.SetCoefficient("CG", CG_LNP * LambdaNPm2);
	SMEFTEvolEW.SetCoefficient("CW", CW_LNP * LambdaNPm2);
	
	SMEFTEvolEW.SetCoefficient("CHG", CHG_LNP * LambdaNPm2);
	SMEFTEvolEW.SetCoefficient("CHW", CHW_LNP * LambdaNPm2);
	SMEFTEvolEW.SetCoefficient("CHB", CHB_LNP * LambdaNPm2);
	
	SMEFTEvolEW.SetCoefficient("CHWB", CHWB_LNP * LambdaNPm2);
	SMEFTEvolEW.SetCoefficient("CHD", CHD_LNP * LambdaNPm2);

	SMEFTEvolEW.SetCoefficient("CHbox", CHbox_LNP * LambdaNPm2);
	SMEFTEvolEW.SetCoefficient("CH", CH_LNP * LambdaNPm2);
	SMEFTEvolEW.SetCoefficient("CGtilde", CGtilde_LNP * LambdaNPm2);
	SMEFTEvolEW.SetCoefficient("CWtilde", CWtilde_LNP * LambdaNPm2);
	SMEFTEvolEW.SetCoefficient("CHGtilde", CHGtilde_LNP * LambdaNPm2);
	SMEFTEvolEW.SetCoefficient("CHWtilde", CHWtilde_LNP * LambdaNPm2);
	SMEFTEvolEW.SetCoefficient("CHBtilde", CHBtilde_LNP * LambdaNPm2);
	SMEFTEvolEW.SetCoefficient("CHWtildeB", CHWtildeB_LNP * LambdaNPm2);
	SMEFTEvolEW.SetCoefficient("CHl1R", CHl1_11r_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CHl1R", CHl1_12r_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CHl1R", CHl1_13r_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CHl1R", CHl1_22r_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CHl1R", CHl1_23r_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CHl1R", CHl1_33r_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CHl1I", CHl1_12i_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CHl1I", CHl1_13i_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CHl1I", CHl1_23i_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CHl3R", CHl3_11r_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CHl3R", CHl3_12r_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CHl3R", CHl3_13r_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CHl3R", CHl3_22r_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CHl3R", CHl3_23r_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CHl3R", CHl3_33r_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CHl3I", CHl3_12i_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CHl3I", CHl3_13i_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CHl3I", CHl3_23i_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CHeR", CHe_11r_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CHeR", CHe_12r_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CHeR", CHe_13r_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CHeR", CHe_22r_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CHeR", CHe_23r_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CHeR", CHe_33r_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CHeI", CHe_12i_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CHeI", CHe_13i_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CHeI", CHe_23i_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CHq1R", CHq1_11r_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CHq1R", CHq1_12r_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CHq1R", CHq1_13r_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CHq1R", CHq1_22r_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CHq1R", CHq1_23r_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CHq1R", CHq1_33r_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CHq1I", CHq1_12i_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CHq1I", CHq1_13i_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CHq1I", CHq1_23i_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CHq3R", CHq3_11r_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CHq3R", CHq3_12r_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CHq3R", CHq3_13r_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CHq3R", CHq3_22r_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CHq3R", CHq3_23r_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CHq3R", CHq3_33r_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CHq3I", CHq3_12i_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CHq3I", CHq3_13i_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CHq3I", CHq3_23i_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CHuR", CHu_11r_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CHuR", CHu_12r_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CHuR", CHu_13r_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CHuR", CHu_22r_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CHuR", CHu_23r_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CHuR", CHu_33r_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CHuI", CHu_12i_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CHuI", CHu_13i_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CHuI", CHu_23i_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CHdR", CHd_11r_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CHdR", CHd_12r_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CHdR", CHd_13r_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CHdR", CHd_22r_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CHdR", CHd_23r_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CHdR", CHd_33r_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CHdI", CHd_12i_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CHdI", CHd_13i_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CHdI", CHd_23i_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CHudR", CHud_11r_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CHudR", CHud_12r_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CHudR", CHud_13r_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CHudR", CHud_21r_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CHudR", CHud_22r_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CHudR", CHud_23r_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CHudR", CHud_31r_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CHudR", CHud_32r_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CHudR", CHud_33r_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CHudI", CHud_11i_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CHudI", CHud_12i_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CHudI", CHud_13i_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CHudI", CHud_21i_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CHudI", CHud_22i_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CHudI", CHud_23i_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CHudI", CHud_31i_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CHudI", CHud_32i_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CHudI", CHud_33i_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeHR", CeH_11r_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CeHR", CeH_12r_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeHR", CeH_13r_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeHR", CeH_21r_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CeHR", CeH_22r_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CeHR", CeH_23r_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeHR", CeH_31r_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CeHR", CeH_32r_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CeHR", CeH_33r_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeHI", CeH_11i_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CeHI", CeH_12i_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeHI", CeH_13i_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeHI", CeH_21i_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CeHI", CeH_22i_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CeHI", CeH_23i_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeHI", CeH_31i_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CeHI", CeH_32i_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CeHI", CeH_33i_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CuHR", CuH_11r_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CuHR", CuH_12r_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CuHR", CuH_13r_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CuHR", CuH_21r_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CuHR", CuH_22r_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CuHR", CuH_23r_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CuHR", CuH_31r_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CuHR", CuH_32r_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CuHR", CuH_33r_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CuHI", CuH_11i_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CuHI", CuH_12i_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CuHI", CuH_13i_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CuHI", CuH_21i_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CuHI", CuH_22i_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CuHI", CuH_23i_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CuHI", CuH_31i_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CuHI", CuH_32i_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CuHI", CuH_33i_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CdHR", CdH_11r_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CdHR", CdH_12r_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CdHR", CdH_13r_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CdHR", CdH_21r_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CdHR", CdH_22r_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CdHR", CdH_23r_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CdHR", CdH_31r_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CdHR", CdH_32r_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CdHR", CdH_33r_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CdHI", CdH_11i_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CdHI", CdH_12i_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CdHI", CdH_13i_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CdHI", CdH_21i_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CdHI", CdH_22i_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CdHI", CdH_23i_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CdHI", CdH_31i_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CdHI", CdH_32i_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CdHI", CdH_33i_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CuGR", CuG_11r_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CuGR", CuG_12r_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CuGR", CuG_13r_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CuGR", CuG_21r_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CuGR", CuG_22r_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CuGR", CuG_23r_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CuGR", CuG_31r_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CuGR", CuG_32r_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CuGR", CuG_33r_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CuGI", CuG_11i_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CuGI", CuG_12i_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CuGI", CuG_13i_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CuGI", CuG_21i_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CuGI", CuG_22i_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CuGI", CuG_23i_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CuGI", CuG_31i_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CuGI", CuG_32i_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CuGI", CuG_33i_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CuWR", CuW_11r_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CuWR", CuW_12r_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CuWR", CuW_13r_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CuWR", CuW_21r_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CuWR", CuW_22r_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CuWR", CuW_23r_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CuWR", CuW_31r_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CuWR", CuW_32r_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CuWR", CuW_33r_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CuWI", CuW_11i_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CuWI", CuW_12i_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CuWI", CuW_13i_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CuWI", CuW_21i_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CuWI", CuW_22i_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CuWI", CuW_23i_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CuWI", CuW_31i_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CuWI", CuW_32i_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CuWI", CuW_33i_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CuBR", CuB_11r_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CuBR", CuB_12r_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CuBR", CuB_13r_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CuBR", CuB_21r_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CuBR", CuB_22r_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CuBR", CuB_23r_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CuBR", CuB_31r_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CuBR", CuB_32r_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CuBR", CuB_33r_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CuBI", CuB_11i_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CuBI", CuB_12i_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CuBI", CuB_13i_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CuBI", CuB_21i_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CuBI", CuB_22i_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CuBI", CuB_23i_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CuBI", CuB_31i_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CuBI", CuB_32i_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CuBI", CuB_33i_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CdGR", CdG_11r_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CdGR", CdG_12r_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CdGR", CdG_13r_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CdGR", CdG_21r_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CdGR", CdG_22r_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CdGR", CdG_23r_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CdGR", CdG_31r_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CdGR", CdG_32r_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CdGR", CdG_33r_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CdGI", CdG_11i_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CdGI", CdG_12i_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CdGI", CdG_13i_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CdGI", CdG_21i_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CdGI", CdG_22i_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CdGI", CdG_23i_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CdGI", CdG_31i_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CdGI", CdG_32i_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CdGI", CdG_33i_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CdWR", CdW_11r_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CdWR", CdW_12r_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CdWR", CdW_13r_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CdWR", CdW_21r_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CdWR", CdW_22r_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CdWR", CdW_23r_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CdWR", CdW_31r_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CdWR", CdW_32r_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CdWR", CdW_33r_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CdWI", CdW_11i_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CdWI", CdW_12i_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CdWI", CdW_13i_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CdWI", CdW_21i_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CdWI", CdW_22i_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CdWI", CdW_23i_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CdWI", CdW_31i_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CdWI", CdW_32i_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CdWI", CdW_33i_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CdBR", CdB_11r_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CdBR", CdB_12r_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CdBR", CdB_13r_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CdBR", CdB_21r_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CdBR", CdB_22r_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CdBR", CdB_23r_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CdBR", CdB_31r_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CdBR", CdB_32r_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CdBR", CdB_33r_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CdBI", CdB_11i_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CdBI", CdB_12i_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CdBI", CdB_13i_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CdBI", CdB_21i_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CdBI", CdB_22i_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CdBI", CdB_23i_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CdBI", CdB_31i_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CdBI", CdB_32i_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CdBI", CdB_33i_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeWR", CeW_11r_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CeWR", CeW_12r_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeWR", CeW_13r_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeWR", CeW_21r_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CeWR", CeW_22r_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CeWR", CeW_23r_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeWR", CeW_31r_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CeWR", CeW_32r_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CeWR", CeW_33r_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeWI", CeW_11i_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CeWI", CeW_12i_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeWI", CeW_13i_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeWI", CeW_21i_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CeWI", CeW_22i_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CeWI", CeW_23i_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeWI", CeW_31i_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CeWI", CeW_32i_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CeWI", CeW_33i_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeBR", CeB_11r_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CeBR", CeB_12r_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeBR", CeB_13r_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeBR", CeB_21r_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CeBR", CeB_22r_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CeBR", CeB_23r_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeBR", CeB_31r_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CeBR", CeB_32r_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CeBR", CeB_33r_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeBI", CeB_11i_LNP * LambdaNPm2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CeBI", CeB_12i_LNP * LambdaNPm2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeBI", CeB_13i_LNP * LambdaNPm2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeBI", CeB_21i_LNP * LambdaNPm2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CeBI", CeB_22i_LNP * LambdaNPm2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CeBI", CeB_23i_LNP * LambdaNPm2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeBI", CeB_31i_LNP * LambdaNPm2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CeBI", CeB_32i_LNP * LambdaNPm2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CeBI", CeB_33i_LNP * LambdaNPm2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CllR", Cll_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CllI", Cll_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CllI", Cll_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CllI", Cll_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CllI", Cll_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CllI", Cll_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CllI", Cll_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CllI", Cll_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CllI", Cll_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CllI", Cll_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CllI", Cll_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CllI", Cll_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CllI", Cll_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CllI", Cll_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CllI", Cll_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CllI", Cll_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CllI", Cll_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CllI", Cll_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CllI", Cll_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1211r_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1311r_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1312r_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1321r_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_2211r_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_2212r_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_2213r_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_2311r_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_2312r_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_2313r_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_2321r_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_2322r_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_2331r_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_3311r_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_3312r_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_3313r_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_3322r_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_3323r_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq1R", Clq1_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1211i_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1221i_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1311i_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1312i_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1321i_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1331i_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_2212i_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_2213i_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_2311i_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_2312i_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_2313i_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_2321i_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_2322i_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_2331i_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_2332i_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_3312i_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_3313i_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq1I", Clq1_3323i_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1211r_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1311r_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1312r_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1321r_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_2211r_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_2212r_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_2213r_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_2311r_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_2312r_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_2313r_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_2321r_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_2322r_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_2331r_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_3311r_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_3312r_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_3313r_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_3322r_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_3323r_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq3R", Clq3_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1211i_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1221i_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1311i_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1312i_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1321i_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1331i_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_2212i_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_2213i_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_2311i_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_2312i_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_2313i_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_2321i_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_2322i_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_2331i_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_2332i_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_3312i_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_3313i_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clq3I", Clq3_3323i_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeeR", Cee_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeeI", Cee_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeeI", Cee_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeeI", Cee_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeeI", Cee_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeeI", Cee_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeeI", Cee_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CeeI", Cee_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeeI", Cee_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CeeI", Cee_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeeI", Cee_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeeI", Cee_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeeI", Cee_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeeI", Cee_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeeI", Cee_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeeI", Cee_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1211r_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1311r_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1312r_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1321r_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_2211r_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_2212r_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_2213r_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_2311r_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_2312r_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_2313r_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_2321r_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_2322r_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_2331r_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_3311r_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_3312r_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_3313r_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_3322r_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_3323r_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeuR", Ceu_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1211i_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1221i_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1311i_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1312i_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1321i_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1331i_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_2212i_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_2213i_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_2311i_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_2312i_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_2313i_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_2321i_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_2322i_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_2331i_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_2332i_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_3312i_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_3313i_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CeuI", Ceu_3323i_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1211r_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1311r_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1312r_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1321r_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_2211r_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_2212r_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_2213r_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_2311r_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_2312r_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_2313r_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_2321r_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_2322r_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_2331r_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_3311r_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_3312r_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_3313r_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_3322r_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_3323r_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CedR", Ced_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1211i_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1221i_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1311i_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1312i_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1321i_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1331i_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_2212i_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_2213i_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_2311i_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_2312i_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_2313i_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_2321i_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_2322i_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_2331i_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_2332i_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_3312i_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_3313i_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CedI", Ced_3323i_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1211r_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1311r_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1312r_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1321r_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_2211r_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_2212r_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_2213r_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_2311r_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_2312r_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_2313r_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_2321r_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_2322r_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_2331r_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_3311r_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_3312r_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_3313r_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_3322r_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_3323r_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CleR", Cle_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1211i_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1221i_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1311i_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1312i_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1321i_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1331i_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_2212i_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_2213i_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_2311i_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_2312i_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_2313i_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_2321i_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_2322i_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_2331i_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_2332i_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_3312i_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_3313i_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CleI", Cle_3323i_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1211r_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1311r_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1312r_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1321r_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_2211r_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_2212r_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_2213r_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_2311r_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_2312r_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_2313r_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_2321r_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_2322r_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_2331r_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_3311r_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_3312r_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_3313r_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_3322r_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_3323r_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CluR", Clu_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1211i_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1221i_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1311i_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1312i_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1321i_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1331i_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_2212i_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_2213i_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_2311i_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_2312i_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_2313i_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_2321i_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_2322i_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_2331i_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_2332i_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_3312i_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_3313i_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CluI", Clu_3323i_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1211r_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1311r_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1312r_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1321r_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_2211r_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_2212r_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_2213r_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_2311r_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_2312r_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_2313r_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_2321r_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_2322r_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_2331r_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_3311r_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_3312r_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_3313r_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_3322r_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_3323r_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CldR", Cld_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1211i_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1221i_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1311i_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1312i_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1321i_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1331i_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_2212i_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_2213i_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_2311i_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_2312i_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_2313i_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_2321i_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_2322i_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_2331i_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_2332i_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_3312i_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_3313i_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CldI", Cld_3323i_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1211r_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1311r_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1312r_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1321r_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_2211r_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_2212r_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_2213r_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_2311r_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_2312r_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_2313r_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_2321r_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_2322r_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_2331r_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_3311r_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_3312r_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_3313r_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_3322r_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_3323r_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CqeR", Cqe_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1211i_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1221i_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1311i_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1312i_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1321i_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1331i_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_2212i_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_2213i_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_2311i_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_2312i_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_2313i_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_2321i_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_2322i_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_2331i_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_2332i_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_3312i_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_3313i_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CqeI", Cqe_3323i_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1121r_LNP * LambdaNPm2, 0, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1131r_LNP * LambdaNPm2, 0, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1132r_LNP * LambdaNPm2, 0, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1211r_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1311r_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1312r_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1321r_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2111r_LNP * LambdaNPm2, 1, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2112r_LNP * LambdaNPm2, 1, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2113r_LNP * LambdaNPm2, 1, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2121r_LNP * LambdaNPm2, 1, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2122r_LNP * LambdaNPm2, 1, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2123r_LNP * LambdaNPm2, 1, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2131r_LNP * LambdaNPm2, 1, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2132r_LNP * LambdaNPm2, 1, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2133r_LNP * LambdaNPm2, 1, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2211r_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2212r_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2213r_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2221r_LNP * LambdaNPm2, 1, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2231r_LNP * LambdaNPm2, 1, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2232r_LNP * LambdaNPm2, 1, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2311r_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2312r_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2313r_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2321r_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2322r_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2331r_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3111r_LNP * LambdaNPm2, 2, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3112r_LNP * LambdaNPm2, 2, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3113r_LNP * LambdaNPm2, 2, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3121r_LNP * LambdaNPm2, 2, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3122r_LNP * LambdaNPm2, 2, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3123r_LNP * LambdaNPm2, 2, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3131r_LNP * LambdaNPm2, 2, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3132r_LNP * LambdaNPm2, 2, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3133r_LNP * LambdaNPm2, 2, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3211r_LNP * LambdaNPm2, 2, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3212r_LNP * LambdaNPm2, 2, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3213r_LNP * LambdaNPm2, 2, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3221r_LNP * LambdaNPm2, 2, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3222r_LNP * LambdaNPm2, 2, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3223r_LNP * LambdaNPm2, 2, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3231r_LNP * LambdaNPm2, 2, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3232r_LNP * LambdaNPm2, 2, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3233r_LNP * LambdaNPm2, 2, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3311r_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3312r_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3313r_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3321r_LNP * LambdaNPm2, 2, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3322r_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3323r_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3331r_LNP * LambdaNPm2, 2, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3332r_LNP * LambdaNPm2, 2, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CledqR", Cledq_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1111i_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1121i_LNP * LambdaNPm2, 0, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1122i_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1131i_LNP * LambdaNPm2, 0, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1132i_LNP * LambdaNPm2, 0, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1133i_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1211i_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1221i_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1311i_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1312i_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1321i_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1331i_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2111i_LNP * LambdaNPm2, 1, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2112i_LNP * LambdaNPm2, 1, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2113i_LNP * LambdaNPm2, 1, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2121i_LNP * LambdaNPm2, 1, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2122i_LNP * LambdaNPm2, 1, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2123i_LNP * LambdaNPm2, 1, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2131i_LNP * LambdaNPm2, 1, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2132i_LNP * LambdaNPm2, 1, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2133i_LNP * LambdaNPm2, 1, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2211i_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2212i_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2213i_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2221i_LNP * LambdaNPm2, 1, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2222i_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2231i_LNP * LambdaNPm2, 1, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2232i_LNP * LambdaNPm2, 1, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2233i_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2311i_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2312i_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2313i_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2321i_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2322i_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2331i_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2332i_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3111i_LNP * LambdaNPm2, 2, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3112i_LNP * LambdaNPm2, 2, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3113i_LNP * LambdaNPm2, 2, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3121i_LNP * LambdaNPm2, 2, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3122i_LNP * LambdaNPm2, 2, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3123i_LNP * LambdaNPm2, 2, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3131i_LNP * LambdaNPm2, 2, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3132i_LNP * LambdaNPm2, 2, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3133i_LNP * LambdaNPm2, 2, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3211i_LNP * LambdaNPm2, 2, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3212i_LNP * LambdaNPm2, 2, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3213i_LNP * LambdaNPm2, 2, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3221i_LNP * LambdaNPm2, 2, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3222i_LNP * LambdaNPm2, 2, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3223i_LNP * LambdaNPm2, 2, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3231i_LNP * LambdaNPm2, 2, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3232i_LNP * LambdaNPm2, 2, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3233i_LNP * LambdaNPm2, 2, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3311i_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3312i_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3313i_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3321i_LNP * LambdaNPm2, 2, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3322i_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3323i_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3331i_LNP * LambdaNPm2, 2, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3332i_LNP * LambdaNPm2, 2, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CledqI", Cledq_3333i_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1R", Cqq1_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1I", Cqq1_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqq1I", Cqq1_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1I", Cqq1_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1I", Cqq1_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqq1I", Cqq1_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1I", Cqq1_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqq1I", Cqq1_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1I", Cqq1_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqq1I", Cqq1_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqq1I", Cqq1_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1I", Cqq1_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1I", Cqq1_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqq1I", Cqq1_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1I", Cqq1_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqq1I", Cqq1_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1I", Cqq1_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1I", Cqq1_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq1I", Cqq1_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3R", Cqq3_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3I", Cqq3_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqq3I", Cqq3_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3I", Cqq3_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3I", Cqq3_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqq3I", Cqq3_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3I", Cqq3_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqq3I", Cqq3_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3I", Cqq3_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqq3I", Cqq3_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqq3I", Cqq3_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3I", Cqq3_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3I", Cqq3_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqq3I", Cqq3_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3I", Cqq3_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqq3I", Cqq3_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3I", Cqq3_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3I", Cqq3_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqq3I", Cqq3_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CuuR", Cuu_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CuuI", Cuu_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CuuI", Cuu_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CuuI", Cuu_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CuuI", Cuu_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CuuI", Cuu_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CuuI", Cuu_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CuuI", Cuu_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CuuI", Cuu_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CuuI", Cuu_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CuuI", Cuu_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CuuI", Cuu_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CuuI", Cuu_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CuuI", Cuu_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CuuI", Cuu_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CuuI", Cuu_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CuuI", Cuu_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CuuI", Cuu_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CuuI", Cuu_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CddR", Cdd_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CddI", Cdd_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("CddI", Cdd_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("CddI", Cdd_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("CddI", Cdd_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("CddI", Cdd_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("CddI", Cdd_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("CddI", Cdd_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CddI", Cdd_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("CddI", Cdd_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("CddI", Cdd_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("CddI", Cdd_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("CddI", Cdd_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("CddI", Cdd_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CddI", Cdd_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("CddI", Cdd_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("CddI", Cdd_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("CddI", Cdd_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("CddI", Cdd_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1211r_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1311r_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1312r_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1321r_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_2211r_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_2212r_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_2213r_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_2311r_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_2312r_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_2313r_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_2321r_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_2322r_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_2331r_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_3311r_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_3312r_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_3313r_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_3322r_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_3323r_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud1R", Cud1_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1211i_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1221i_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1311i_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1312i_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1321i_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1331i_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_2212i_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_2213i_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_2311i_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_2312i_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_2313i_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_2321i_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_2322i_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_2331i_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_2332i_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_3312i_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_3313i_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud1I", Cud1_3323i_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1211r_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1311r_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1312r_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1321r_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_2211r_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_2212r_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_2213r_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_2311r_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_2312r_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_2313r_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_2321r_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_2322r_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_2331r_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_3311r_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_3312r_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_3313r_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_3322r_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_3323r_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud8R", Cud8_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1211i_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1221i_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1311i_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1312i_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1321i_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1331i_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_2212i_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_2213i_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_2311i_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_2312i_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_2313i_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_2321i_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_2322i_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_2331i_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_2332i_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_3312i_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_3313i_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cud8I", Cud8_3323i_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1211r_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1311r_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1312r_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1321r_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_2211r_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_2212r_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_2213r_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_2311r_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_2312r_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_2313r_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_2321r_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_2322r_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_2331r_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_3311r_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_3312r_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_3313r_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_3322r_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_3323r_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1R", Cqu1_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1211i_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1221i_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1311i_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1312i_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1321i_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1331i_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_2212i_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_2213i_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_2311i_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_2312i_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_2313i_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_2321i_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_2322i_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_2331i_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_2332i_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_3312i_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_3313i_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu1I", Cqu1_3323i_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1211r_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1311r_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1312r_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1321r_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_2211r_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_2212r_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_2213r_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_2311r_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_2312r_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_2313r_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_2321r_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_2322r_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_2331r_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_3311r_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_3312r_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_3313r_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_3322r_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_3323r_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8R", Cqu8_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1211i_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1221i_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1311i_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1312i_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1321i_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1331i_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_2212i_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_2213i_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_2311i_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_2312i_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_2313i_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_2321i_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_2322i_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_2331i_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_2332i_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_3312i_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_3313i_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqu8I", Cqu8_3323i_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1211r_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1311r_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1312r_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1321r_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_2211r_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_2212r_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_2213r_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_2311r_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_2312r_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_2313r_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_2321r_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_2322r_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_2331r_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_3311r_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_3312r_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_3313r_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_3322r_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_3323r_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1R", Cqd1_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1211i_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1221i_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1311i_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1312i_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1321i_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1331i_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_2212i_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_2213i_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_2311i_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_2312i_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_2313i_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_2321i_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_2322i_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_2331i_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_2332i_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_3312i_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_3313i_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd1I", Cqd1_3323i_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1211r_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1311r_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1312r_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1321r_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_2211r_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_2212r_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_2213r_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_2311r_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_2312r_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_2313r_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_2321r_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_2322r_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_2331r_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_3311r_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_3312r_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_3313r_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_3322r_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_3323r_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8R", Cqd8_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1211i_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1221i_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1311i_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1312i_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1321i_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1331i_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_2212i_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_2213i_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_2311i_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_2312i_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_2313i_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_2321i_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_2322i_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_2331i_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_2332i_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_3312i_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_3313i_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cqd8I", Cqd8_3323i_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1121r_LNP * LambdaNPm2, 0, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1131r_LNP * LambdaNPm2, 0, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1132r_LNP * LambdaNPm2, 0, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1211r_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1311r_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1312r_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1321r_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2111r_LNP * LambdaNPm2, 1, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2112r_LNP * LambdaNPm2, 1, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2113r_LNP * LambdaNPm2, 1, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2121r_LNP * LambdaNPm2, 1, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2122r_LNP * LambdaNPm2, 1, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2123r_LNP * LambdaNPm2, 1, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2131r_LNP * LambdaNPm2, 1, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2132r_LNP * LambdaNPm2, 1, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2133r_LNP * LambdaNPm2, 1, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2211r_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2212r_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2213r_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2221r_LNP * LambdaNPm2, 1, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2231r_LNP * LambdaNPm2, 1, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2232r_LNP * LambdaNPm2, 1, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2311r_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2312r_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2313r_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2321r_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2322r_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2331r_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3111r_LNP * LambdaNPm2, 2, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3112r_LNP * LambdaNPm2, 2, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3113r_LNP * LambdaNPm2, 2, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3121r_LNP * LambdaNPm2, 2, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3122r_LNP * LambdaNPm2, 2, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3123r_LNP * LambdaNPm2, 2, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3131r_LNP * LambdaNPm2, 2, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3132r_LNP * LambdaNPm2, 2, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3133r_LNP * LambdaNPm2, 2, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3211r_LNP * LambdaNPm2, 2, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3212r_LNP * LambdaNPm2, 2, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3213r_LNP * LambdaNPm2, 2, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3221r_LNP * LambdaNPm2, 2, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3222r_LNP * LambdaNPm2, 2, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3223r_LNP * LambdaNPm2, 2, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3231r_LNP * LambdaNPm2, 2, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3232r_LNP * LambdaNPm2, 2, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3233r_LNP * LambdaNPm2, 2, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3311r_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3312r_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3313r_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3321r_LNP * LambdaNPm2, 2, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3322r_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3323r_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3331r_LNP * LambdaNPm2, 2, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3332r_LNP * LambdaNPm2, 2, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1R", Cquqd1_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1111i_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1121i_LNP * LambdaNPm2, 0, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1122i_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1131i_LNP * LambdaNPm2, 0, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1132i_LNP * LambdaNPm2, 0, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1133i_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1211i_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1221i_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1311i_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1312i_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1321i_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1331i_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2111i_LNP * LambdaNPm2, 1, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2112i_LNP * LambdaNPm2, 1, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2113i_LNP * LambdaNPm2, 1, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2121i_LNP * LambdaNPm2, 1, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2122i_LNP * LambdaNPm2, 1, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2123i_LNP * LambdaNPm2, 1, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2131i_LNP * LambdaNPm2, 1, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2132i_LNP * LambdaNPm2, 1, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2133i_LNP * LambdaNPm2, 1, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2211i_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2212i_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2213i_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2221i_LNP * LambdaNPm2, 1, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2222i_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2231i_LNP * LambdaNPm2, 1, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2232i_LNP * LambdaNPm2, 1, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2233i_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2311i_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2312i_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2313i_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2321i_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2322i_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2331i_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2332i_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3111i_LNP * LambdaNPm2, 2, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3112i_LNP * LambdaNPm2, 2, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3113i_LNP * LambdaNPm2, 2, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3121i_LNP * LambdaNPm2, 2, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3122i_LNP * LambdaNPm2, 2, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3123i_LNP * LambdaNPm2, 2, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3131i_LNP * LambdaNPm2, 2, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3132i_LNP * LambdaNPm2, 2, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3133i_LNP * LambdaNPm2, 2, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3211i_LNP * LambdaNPm2, 2, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3212i_LNP * LambdaNPm2, 2, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3213i_LNP * LambdaNPm2, 2, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3221i_LNP * LambdaNPm2, 2, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3222i_LNP * LambdaNPm2, 2, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3223i_LNP * LambdaNPm2, 2, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3231i_LNP * LambdaNPm2, 2, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3232i_LNP * LambdaNPm2, 2, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3233i_LNP * LambdaNPm2, 2, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3311i_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3312i_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3313i_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3321i_LNP * LambdaNPm2, 2, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3322i_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3323i_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3331i_LNP * LambdaNPm2, 2, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3332i_LNP * LambdaNPm2, 2, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd1I", Cquqd1_3333i_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1121r_LNP * LambdaNPm2, 0, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1131r_LNP * LambdaNPm2, 0, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1132r_LNP * LambdaNPm2, 0, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1211r_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1311r_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1312r_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1321r_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2111r_LNP * LambdaNPm2, 1, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2112r_LNP * LambdaNPm2, 1, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2113r_LNP * LambdaNPm2, 1, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2121r_LNP * LambdaNPm2, 1, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2122r_LNP * LambdaNPm2, 1, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2123r_LNP * LambdaNPm2, 1, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2131r_LNP * LambdaNPm2, 1, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2132r_LNP * LambdaNPm2, 1, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2133r_LNP * LambdaNPm2, 1, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2211r_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2212r_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2213r_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2221r_LNP * LambdaNPm2, 1, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2231r_LNP * LambdaNPm2, 1, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2232r_LNP * LambdaNPm2, 1, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2311r_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2312r_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2313r_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2321r_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2322r_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2331r_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3111r_LNP * LambdaNPm2, 2, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3112r_LNP * LambdaNPm2, 2, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3113r_LNP * LambdaNPm2, 2, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3121r_LNP * LambdaNPm2, 2, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3122r_LNP * LambdaNPm2, 2, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3123r_LNP * LambdaNPm2, 2, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3131r_LNP * LambdaNPm2, 2, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3132r_LNP * LambdaNPm2, 2, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3133r_LNP * LambdaNPm2, 2, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3211r_LNP * LambdaNPm2, 2, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3212r_LNP * LambdaNPm2, 2, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3213r_LNP * LambdaNPm2, 2, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3221r_LNP * LambdaNPm2, 2, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3222r_LNP * LambdaNPm2, 2, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3223r_LNP * LambdaNPm2, 2, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3231r_LNP * LambdaNPm2, 2, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3232r_LNP * LambdaNPm2, 2, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3233r_LNP * LambdaNPm2, 2, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3311r_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3312r_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3313r_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3321r_LNP * LambdaNPm2, 2, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3322r_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3323r_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3331r_LNP * LambdaNPm2, 2, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3332r_LNP * LambdaNPm2, 2, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8R", Cquqd8_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1111i_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1121i_LNP * LambdaNPm2, 0, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1122i_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1131i_LNP * LambdaNPm2, 0, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1132i_LNP * LambdaNPm2, 0, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1133i_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1211i_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1221i_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1311i_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1312i_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1321i_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1331i_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2111i_LNP * LambdaNPm2, 1, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2112i_LNP * LambdaNPm2, 1, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2113i_LNP * LambdaNPm2, 1, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2121i_LNP * LambdaNPm2, 1, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2122i_LNP * LambdaNPm2, 1, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2123i_LNP * LambdaNPm2, 1, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2131i_LNP * LambdaNPm2, 1, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2132i_LNP * LambdaNPm2, 1, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2133i_LNP * LambdaNPm2, 1, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2211i_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2212i_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2213i_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2221i_LNP * LambdaNPm2, 1, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2222i_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2231i_LNP * LambdaNPm2, 1, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2232i_LNP * LambdaNPm2, 1, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2233i_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2311i_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2312i_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2313i_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2321i_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2322i_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2331i_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2332i_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3111i_LNP * LambdaNPm2, 2, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3112i_LNP * LambdaNPm2, 2, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3113i_LNP * LambdaNPm2, 2, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3121i_LNP * LambdaNPm2, 2, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3122i_LNP * LambdaNPm2, 2, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3123i_LNP * LambdaNPm2, 2, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3131i_LNP * LambdaNPm2, 2, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3132i_LNP * LambdaNPm2, 2, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3133i_LNP * LambdaNPm2, 2, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3211i_LNP * LambdaNPm2, 2, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3212i_LNP * LambdaNPm2, 2, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3213i_LNP * LambdaNPm2, 2, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3221i_LNP * LambdaNPm2, 2, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3222i_LNP * LambdaNPm2, 2, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3223i_LNP * LambdaNPm2, 2, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3231i_LNP * LambdaNPm2, 2, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3232i_LNP * LambdaNPm2, 2, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3233i_LNP * LambdaNPm2, 2, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3311i_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3312i_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3313i_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3321i_LNP * LambdaNPm2, 2, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3322i_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3323i_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3331i_LNP * LambdaNPm2, 2, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3332i_LNP * LambdaNPm2, 2, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Cquqd8I", Cquqd8_3333i_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1121r_LNP * LambdaNPm2, 0, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1131r_LNP * LambdaNPm2, 0, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1132r_LNP * LambdaNPm2, 0, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1211r_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1311r_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1312r_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1321r_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2111r_LNP * LambdaNPm2, 1, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2112r_LNP * LambdaNPm2, 1, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2113r_LNP * LambdaNPm2, 1, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2121r_LNP * LambdaNPm2, 1, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2122r_LNP * LambdaNPm2, 1, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2123r_LNP * LambdaNPm2, 1, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2131r_LNP * LambdaNPm2, 1, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2132r_LNP * LambdaNPm2, 1, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2133r_LNP * LambdaNPm2, 1, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2211r_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2212r_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2213r_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2221r_LNP * LambdaNPm2, 1, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2231r_LNP * LambdaNPm2, 1, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2232r_LNP * LambdaNPm2, 1, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2311r_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2312r_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2313r_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2321r_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2322r_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2331r_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3111r_LNP * LambdaNPm2, 2, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3112r_LNP * LambdaNPm2, 2, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3113r_LNP * LambdaNPm2, 2, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3121r_LNP * LambdaNPm2, 2, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3122r_LNP * LambdaNPm2, 2, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3123r_LNP * LambdaNPm2, 2, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3131r_LNP * LambdaNPm2, 2, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3132r_LNP * LambdaNPm2, 2, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3133r_LNP * LambdaNPm2, 2, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3211r_LNP * LambdaNPm2, 2, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3212r_LNP * LambdaNPm2, 2, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3213r_LNP * LambdaNPm2, 2, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3221r_LNP * LambdaNPm2, 2, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3222r_LNP * LambdaNPm2, 2, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3223r_LNP * LambdaNPm2, 2, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3231r_LNP * LambdaNPm2, 2, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3232r_LNP * LambdaNPm2, 2, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3233r_LNP * LambdaNPm2, 2, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3311r_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3312r_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3313r_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3321r_LNP * LambdaNPm2, 2, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3322r_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3323r_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3331r_LNP * LambdaNPm2, 2, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3332r_LNP * LambdaNPm2, 2, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1R", Clequ1_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1111i_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1121i_LNP * LambdaNPm2, 0, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1122i_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1131i_LNP * LambdaNPm2, 0, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1132i_LNP * LambdaNPm2, 0, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1133i_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1211i_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1221i_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1311i_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1312i_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1321i_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1331i_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2111i_LNP * LambdaNPm2, 1, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2112i_LNP * LambdaNPm2, 1, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2113i_LNP * LambdaNPm2, 1, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2121i_LNP * LambdaNPm2, 1, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2122i_LNP * LambdaNPm2, 1, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2123i_LNP * LambdaNPm2, 1, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2131i_LNP * LambdaNPm2, 1, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2132i_LNP * LambdaNPm2, 1, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2133i_LNP * LambdaNPm2, 1, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2211i_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2212i_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2213i_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2221i_LNP * LambdaNPm2, 1, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2222i_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2231i_LNP * LambdaNPm2, 1, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2232i_LNP * LambdaNPm2, 1, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2233i_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2311i_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2312i_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2313i_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2321i_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2322i_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2331i_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2332i_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3111i_LNP * LambdaNPm2, 2, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3112i_LNP * LambdaNPm2, 2, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3113i_LNP * LambdaNPm2, 2, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3121i_LNP * LambdaNPm2, 2, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3122i_LNP * LambdaNPm2, 2, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3123i_LNP * LambdaNPm2, 2, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3131i_LNP * LambdaNPm2, 2, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3132i_LNP * LambdaNPm2, 2, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3133i_LNP * LambdaNPm2, 2, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3211i_LNP * LambdaNPm2, 2, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3212i_LNP * LambdaNPm2, 2, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3213i_LNP * LambdaNPm2, 2, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3221i_LNP * LambdaNPm2, 2, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3222i_LNP * LambdaNPm2, 2, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3223i_LNP * LambdaNPm2, 2, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3231i_LNP * LambdaNPm2, 2, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3232i_LNP * LambdaNPm2, 2, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3233i_LNP * LambdaNPm2, 2, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3311i_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3312i_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3313i_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3321i_LNP * LambdaNPm2, 2, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3322i_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3323i_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3331i_LNP * LambdaNPm2, 2, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3332i_LNP * LambdaNPm2, 2, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ1I", Clequ1_3333i_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1111r_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1112r_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1113r_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1121r_LNP * LambdaNPm2, 0, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1122r_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1123r_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1131r_LNP * LambdaNPm2, 0, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1132r_LNP * LambdaNPm2, 0, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1133r_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1211r_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1212r_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1213r_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1221r_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1222r_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1223r_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1231r_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1232r_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1233r_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1311r_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1312r_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1313r_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1321r_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1322r_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1323r_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1331r_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1332r_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_1333r_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2111r_LNP * LambdaNPm2, 1, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2112r_LNP * LambdaNPm2, 1, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2113r_LNP * LambdaNPm2, 1, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2121r_LNP * LambdaNPm2, 1, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2122r_LNP * LambdaNPm2, 1, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2123r_LNP * LambdaNPm2, 1, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2131r_LNP * LambdaNPm2, 1, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2132r_LNP * LambdaNPm2, 1, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2133r_LNP * LambdaNPm2, 1, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2211r_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2212r_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2213r_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2221r_LNP * LambdaNPm2, 1, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2222r_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2223r_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2231r_LNP * LambdaNPm2, 1, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2232r_LNP * LambdaNPm2, 1, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2233r_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2311r_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2312r_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2313r_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2321r_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2322r_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2323r_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2331r_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2332r_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_2333r_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3111r_LNP * LambdaNPm2, 2, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3112r_LNP * LambdaNPm2, 2, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3113r_LNP * LambdaNPm2, 2, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3121r_LNP * LambdaNPm2, 2, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3122r_LNP * LambdaNPm2, 2, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3123r_LNP * LambdaNPm2, 2, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3131r_LNP * LambdaNPm2, 2, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3132r_LNP * LambdaNPm2, 2, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3133r_LNP * LambdaNPm2, 2, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3211r_LNP * LambdaNPm2, 2, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3212r_LNP * LambdaNPm2, 2, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3213r_LNP * LambdaNPm2, 2, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3221r_LNP * LambdaNPm2, 2, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3222r_LNP * LambdaNPm2, 2, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3223r_LNP * LambdaNPm2, 2, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3231r_LNP * LambdaNPm2, 2, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3232r_LNP * LambdaNPm2, 2, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3233r_LNP * LambdaNPm2, 2, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3311r_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3312r_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3313r_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3321r_LNP * LambdaNPm2, 2, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3322r_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3323r_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3331r_LNP * LambdaNPm2, 2, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3332r_LNP * LambdaNPm2, 2, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3R", Clequ3_3333r_LNP * LambdaNPm2, 2, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1111i_LNP * LambdaNPm2, 0, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1112i_LNP * LambdaNPm2, 0, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1113i_LNP * LambdaNPm2, 0, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1121i_LNP * LambdaNPm2, 0, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1122i_LNP * LambdaNPm2, 0, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1123i_LNP * LambdaNPm2, 0, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1131i_LNP * LambdaNPm2, 0, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1132i_LNP * LambdaNPm2, 0, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1133i_LNP * LambdaNPm2, 0, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1211i_LNP * LambdaNPm2, 0, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1212i_LNP * LambdaNPm2, 0, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1213i_LNP * LambdaNPm2, 0, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1221i_LNP * LambdaNPm2, 0, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1222i_LNP * LambdaNPm2, 0, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1223i_LNP * LambdaNPm2, 0, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1231i_LNP * LambdaNPm2, 0, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1232i_LNP * LambdaNPm2, 0, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1233i_LNP * LambdaNPm2, 0, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1311i_LNP * LambdaNPm2, 0, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1312i_LNP * LambdaNPm2, 0, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1313i_LNP * LambdaNPm2, 0, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1321i_LNP * LambdaNPm2, 0, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1322i_LNP * LambdaNPm2, 0, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1323i_LNP * LambdaNPm2, 0, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1331i_LNP * LambdaNPm2, 0, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1332i_LNP * LambdaNPm2, 0, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_1333i_LNP * LambdaNPm2, 0, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2111i_LNP * LambdaNPm2, 1, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2112i_LNP * LambdaNPm2, 1, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2113i_LNP * LambdaNPm2, 1, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2121i_LNP * LambdaNPm2, 1, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2122i_LNP * LambdaNPm2, 1, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2123i_LNP * LambdaNPm2, 1, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2131i_LNP * LambdaNPm2, 1, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2132i_LNP * LambdaNPm2, 1, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2133i_LNP * LambdaNPm2, 1, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2211i_LNP * LambdaNPm2, 1, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2212i_LNP * LambdaNPm2, 1, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2213i_LNP * LambdaNPm2, 1, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2221i_LNP * LambdaNPm2, 1, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2222i_LNP * LambdaNPm2, 1, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2223i_LNP * LambdaNPm2, 1, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2231i_LNP * LambdaNPm2, 1, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2232i_LNP * LambdaNPm2, 1, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2233i_LNP * LambdaNPm2, 1, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2311i_LNP * LambdaNPm2, 1, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2312i_LNP * LambdaNPm2, 1, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2313i_LNP * LambdaNPm2, 1, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2321i_LNP * LambdaNPm2, 1, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2322i_LNP * LambdaNPm2, 1, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2323i_LNP * LambdaNPm2, 1, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2331i_LNP * LambdaNPm2, 1, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2332i_LNP * LambdaNPm2, 1, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_2333i_LNP * LambdaNPm2, 1, 2, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3111i_LNP * LambdaNPm2, 2, 0, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3112i_LNP * LambdaNPm2, 2, 0, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3113i_LNP * LambdaNPm2, 2, 0, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3121i_LNP * LambdaNPm2, 2, 0, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3122i_LNP * LambdaNPm2, 2, 0, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3123i_LNP * LambdaNPm2, 2, 0, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3131i_LNP * LambdaNPm2, 2, 0, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3132i_LNP * LambdaNPm2, 2, 0, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3133i_LNP * LambdaNPm2, 2, 0, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3211i_LNP * LambdaNPm2, 2, 1, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3212i_LNP * LambdaNPm2, 2, 1, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3213i_LNP * LambdaNPm2, 2, 1, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3221i_LNP * LambdaNPm2, 2, 1, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3222i_LNP * LambdaNPm2, 2, 1, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3223i_LNP * LambdaNPm2, 2, 1, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3231i_LNP * LambdaNPm2, 2, 1, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3232i_LNP * LambdaNPm2, 2, 1, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3233i_LNP * LambdaNPm2, 2, 1, 2, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3311i_LNP * LambdaNPm2, 2, 2, 0, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3312i_LNP * LambdaNPm2, 2, 2, 0, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3313i_LNP * LambdaNPm2, 2, 2, 0, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3321i_LNP * LambdaNPm2, 2, 2, 1, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3322i_LNP * LambdaNPm2, 2, 2, 1, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3323i_LNP * LambdaNPm2, 2, 2, 1, 2);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3331i_LNP * LambdaNPm2, 2, 2, 2, 0);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3332i_LNP * LambdaNPm2, 2, 2, 2, 1);
	SMEFTEvolEW.SetCoefficient("Clequ3I", Clequ3_3333i_LNP * LambdaNPm2, 2, 2, 2, 2);


}


void NPSMEFTd6General::getWCFromEvolutor()
{

    CG = SMEFTEvolEW.GetCoefficient("CG")*LambdaNP2;  
    CW = SMEFTEvolEW.GetCoefficient("CW")*LambdaNP2; 
    CHG = SMEFTEvolEW.GetCoefficient("CHG")*LambdaNP2;  
    CHW = SMEFTEvolEW.GetCoefficient("CHW")*LambdaNP2;  
    CHB = SMEFTEvolEW.GetCoefficient("CHB")*LambdaNP2;  
    CHWB = SMEFTEvolEW.GetCoefficient("CHWB")*LambdaNP2;  
    CHD = SMEFTEvolEW.GetCoefficient("CHD")*LambdaNP2;  
    CHbox = SMEFTEvolEW.GetCoefficient("CHbox")*LambdaNP2;  
    CH = SMEFTEvolEW.GetCoefficient("CH")*LambdaNP2;  
    CGtilde = SMEFTEvolEW.GetCoefficient("CGtilde")*LambdaNP2;  
    CWtilde = SMEFTEvolEW.GetCoefficient("CWtilde")*LambdaNP2;  
    CHGtilde = SMEFTEvolEW.GetCoefficient("CHGtilde")*LambdaNP2;  
    CHWtilde = SMEFTEvolEW.GetCoefficient("CHWtilde")*LambdaNP2;  
    CHBtilde = SMEFTEvolEW.GetCoefficient("CHBtilde")*LambdaNP2;  
    CHWtildeB = SMEFTEvolEW.GetCoefficient("CHWtildeB")*LambdaNP2;  

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {

            CHl1R[i][j] = SMEFTEvolEW.GetCoefficient("CHl1R", i, j)*LambdaNP2;
            CHl1I[i][j] = SMEFTEvolEW.GetCoefficient("CHl1I", i, j)*LambdaNP2;
            CHl3R[i][j] = SMEFTEvolEW.GetCoefficient("CHl3R", i, j)*LambdaNP2;
            CHl3I[i][j] = SMEFTEvolEW.GetCoefficient("CHl3I", i, j)*LambdaNP2;
            CHeR[i][j] = SMEFTEvolEW.GetCoefficient("CHeR", i, j)*LambdaNP2;
            CHeI[i][j] = SMEFTEvolEW.GetCoefficient("CHeI", i, j)*LambdaNP2;
            CHq1R[i][j] = SMEFTEvolEW.GetCoefficient("CHq1R", i, j)*LambdaNP2;
            CHq1I[i][j] = SMEFTEvolEW.GetCoefficient("CHq1I", i, j)*LambdaNP2;
            CHq3R[i][j] = SMEFTEvolEW.GetCoefficient("CHq3R", i, j)*LambdaNP2;
            CHq3I[i][j] = SMEFTEvolEW.GetCoefficient("CHq3I", i, j)*LambdaNP2;
            CHuR[i][j] = SMEFTEvolEW.GetCoefficient("CHuR", i, j)*LambdaNP2;
            CHuI[i][j] = SMEFTEvolEW.GetCoefficient("CHuI", i, j)*LambdaNP2;
            CHdR[i][j] = SMEFTEvolEW.GetCoefficient("CHdR", i, j)*LambdaNP2;
            CHdI[i][j] = SMEFTEvolEW.GetCoefficient("CHdI", i, j)*LambdaNP2;
            CHudR[i][j] = SMEFTEvolEW.GetCoefficient("CHudR", i, j)*LambdaNP2;
            CHudI[i][j] = SMEFTEvolEW.GetCoefficient("CHudI", i, j)*LambdaNP2;
            CeHR[i][j] = SMEFTEvolEW.GetCoefficient("CeHR", i, j)*LambdaNP2;
            CeHI[i][j] = SMEFTEvolEW.GetCoefficient("CeHI", i, j)*LambdaNP2;
            CuHR[i][j] = SMEFTEvolEW.GetCoefficient("CuHR", i, j)*LambdaNP2;
            CuHI[i][j] = SMEFTEvolEW.GetCoefficient("CuHI", i, j)*LambdaNP2;
            CdHR[i][j] = SMEFTEvolEW.GetCoefficient("CdHR", i, j)*LambdaNP2;
            CdHI[i][j] = SMEFTEvolEW.GetCoefficient("CdHI", i, j)*LambdaNP2;
            CuGR[i][j] = SMEFTEvolEW.GetCoefficient("CuGR", i, j)*LambdaNP2;
            CuGI[i][j] = SMEFTEvolEW.GetCoefficient("CuGI", i, j)*LambdaNP2;
            CuWR[i][j] = SMEFTEvolEW.GetCoefficient("CuWR", i, j)*LambdaNP2;
            CuWI[i][j] = SMEFTEvolEW.GetCoefficient("CuWI", i, j)*LambdaNP2;
            CuBR[i][j] = SMEFTEvolEW.GetCoefficient("CuBR", i, j)*LambdaNP2;
            CuBI[i][j] = SMEFTEvolEW.GetCoefficient("CuBI", i, j)*LambdaNP2;
            CdGR[i][j] = SMEFTEvolEW.GetCoefficient("CdGR", i, j)*LambdaNP2;
            CdGI[i][j] = SMEFTEvolEW.GetCoefficient("CdGI", i, j)*LambdaNP2;
            CdWR[i][j] = SMEFTEvolEW.GetCoefficient("CdWR", i, j)*LambdaNP2;
            CdWI[i][j] = SMEFTEvolEW.GetCoefficient("CdWI", i, j)*LambdaNP2;
            CdBR[i][j] = SMEFTEvolEW.GetCoefficient("CdBR", i, j)*LambdaNP2;
            CdBI[i][j] = SMEFTEvolEW.GetCoefficient("CdBI", i, j)*LambdaNP2;
            CeWR[i][j] = SMEFTEvolEW.GetCoefficient("CeWR", i, j)*LambdaNP2;
            CeWI[i][j] = SMEFTEvolEW.GetCoefficient("CeWI", i, j)*LambdaNP2;
            CeBR[i][j] = SMEFTEvolEW.GetCoefficient("CeBR", i, j)*LambdaNP2;
            CeBI[i][j] = SMEFTEvolEW.GetCoefficient("CeBI", i, j)*LambdaNP2;
 
            for (int k = 0; k < 3; k++) {
                for (int l = 0; l < 3; l++) {
        
                    CllR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CllR", i, j, k, l)*LambdaNP2;
                    CllI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CllI", i, j, k, l)*LambdaNP2;
                    Clq1R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Clq1R", i, j, k, l)*LambdaNP2;
                    Clq1I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Clq1I", i, j, k, l)*LambdaNP2;
                    Clq3R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Clq3R", i, j, k, l)*LambdaNP2;
                    Clq3I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Clq3I", i, j, k, l)*LambdaNP2;
                    CeeR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CeeR", i, j, k, l)*LambdaNP2;
                    CeeI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CeeI", i, j, k, l)*LambdaNP2;
                    CeuR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CeuR", i, j, k, l)*LambdaNP2;
                    CeuI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CeuI", i, j, k, l)*LambdaNP2;
                    CedR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CedR", i, j, k, l)*LambdaNP2;
                    CedI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CedI", i, j, k, l)*LambdaNP2;
                    CleR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CleR", i, j, k, l)*LambdaNP2;
                    CleI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CleI", i, j, k, l)*LambdaNP2;
                    CluR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CluR", i, j, k, l)*LambdaNP2;
                    CluI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CluI", i, j, k, l)*LambdaNP2;
                    CldR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CldR", i, j, k, l)*LambdaNP2;
                    CldI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CldI", i, j, k, l)*LambdaNP2;
                    CqeR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CqeR", i, j, k, l)*LambdaNP2;
                    CqeI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CqeI", i, j, k, l)*LambdaNP2;
                    CledqR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CledqR", i, j, k, l)*LambdaNP2;
                    CledqI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CledqI", i, j, k, l)*LambdaNP2;
                    Cqq1R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqq1R", i, j, k, l)*LambdaNP2;
                    Cqq1I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqq1I", i, j, k, l)*LambdaNP2;
                    Cqq3R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqq3R", i, j, k, l)*LambdaNP2;
                    Cqq3I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqq3I", i, j, k, l)*LambdaNP2;
                    CuuR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CuuR", i, j, k, l)*LambdaNP2;
                    CuuI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CuuI", i, j, k, l)*LambdaNP2;
                    CddR[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CddR", i, j, k, l)*LambdaNP2;
                    CddI[i][j][k][l] = SMEFTEvolEW.GetCoefficient("CddI", i, j, k, l)*LambdaNP2;
                    Cud1R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cud1R", i, j, k, l)*LambdaNP2;
                    Cud1I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cud1I", i, j, k, l)*LambdaNP2;
                    Cud8R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cud8R", i, j, k, l)*LambdaNP2;
                    Cud8I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cud8I", i, j, k, l)*LambdaNP2;
                    Cqu1R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqu1R", i, j, k, l)*LambdaNP2;
                    Cqu1I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqu1I", i, j, k, l)*LambdaNP2;
                    Cqu8R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqu8R", i, j, k, l)*LambdaNP2;
                    Cqu8I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqu8I", i, j, k, l)*LambdaNP2;
                    Cqd1R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqd1R", i, j, k, l)*LambdaNP2;
                    Cqd1I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqd1I", i, j, k, l)*LambdaNP2;
                    Cqd8R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqd8R", i, j, k, l)*LambdaNP2;
                    Cqd8I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cqd8I", i, j, k, l)*LambdaNP2;
                    Cquqd1R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cquqd1R", i, j, k, l)*LambdaNP2;
                    Cquqd1I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cquqd1I", i, j, k, l)*LambdaNP2;
                    Cquqd8R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cquqd8R", i, j, k, l)*LambdaNP2;
                    Cquqd8I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Cquqd8I", i, j, k, l)*LambdaNP2;
                    Clequ1R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Clequ1R", i, j, k, l)*LambdaNP2;
                    Clequ1I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Clequ1I", i, j, k, l)*LambdaNP2;
                    Clequ3R[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Clequ3R", i, j, k, l)*LambdaNP2;
                    Clequ3I[i][j][k][l] = SMEFTEvolEW.GetCoefficient("Clequ3I", i, j, k, l)*LambdaNP2;
 
                }
            }
        }
    }
}




bool NPSMEFTd6General::PostUpdate()
{
    
    if (!NPbase::PostUpdate()) return (false);
    
        // Set scheme
    if (FlagMWinput) {
        //  MW scheme
        cAsch = 0.;
        cWsch = 1.;
    } else {
        //  ALpha scheme
        cAsch = 1.;
        cWsch = 0.;
    }
    
    
    LambdaNP2 = Lambda_NP * Lambda_NP;
    LambdaNPm2 = 1. / LambdaNP2;
    
    //  1) Post-update operations involving SM parameters only 
    
    v2 = v() * v();
    v2_over_LambdaNP2 = v2 / LambdaNP2;

    
    // SM parameters using tree-level relations, depending on the input scheme
    aleMz = trueSM.alphaMz();
    eeMz = cAsch * sqrt(4.0 * M_PI * aleMz)
            + cWsch * sqrt(4.0 * sqrt(2.0) * GF * Mw_inp * Mw_inp * (1.0 - Mw_inp * Mw_inp / Mz / Mz));
    eeMz2 = eeMz*eeMz;

    sW2_tree = cAsch * (0.5 * (1.0 - sqrt(1.0 - eeMz2 / (sqrt(2.0) * GF * Mz * Mz))))
            + cWsch * (1.0 - Mw_inp * Mw_inp / Mz / Mz);
    cW2_tree = 1.0 - sW2_tree;

    sW_tree = sqrt(sW2_tree);
    cW_tree = sqrt(cW2_tree);

    g1_tree = eeMz / cW_tree;
    g2_tree = eeMz / sW_tree;
    g3_tree = sqrt(4.0 * M_PI * AlsMz);

    Mw_tree = cAsch * (Mz * cW_tree)
            + cWsch * Mw_inp;

    lambdaH_tree = mHl * mHl / 2.0 / v2;

    gZvL = (leptons[NEUTRINO_1].getIsospin());
    gZlL = (leptons[ELECTRON].getIsospin()) - (leptons[ELECTRON].getCharge()) * sW2_tree;
    gZlR = -(leptons[ELECTRON].getCharge()) * sW2_tree;
    gZuL = (quarks[UP].getIsospin()) - (quarks[UP].getCharge()) * sW2_tree;
    gZuR = -(quarks[UP].getCharge()) * sW2_tree;
    gZdL = (quarks[DOWN].getIsospin()) - (quarks[DOWN].getCharge()) * sW2_tree;
    gZdR = -(quarks[DOWN].getCharge()) * sW2_tree;
  
    dZH = -(9.0 / 16.0)*(GF * mHl * mHl / sqrt(2.0) / M_PI / M_PI)*(2.0 * M_PI / 3.0 / sqrt(3.0) - 1.0);

    dZH1 = dZH / (1.0 - dZH);

    dZH2 = dZH * (1 + 3.0 * dZH) / (1.0 - dZH) / (1.0 - dZH);

//2) Post-update operations involving dimension-6 operators
    
    ChangeToEvolutorsBasisPureSM();
    double Mu_LEW[3]={mu_LEW, mc_LEW, mt_LEW};
    double Md_LEW[3]={md_LEW, ms_LEW, mb_LEW};
    double Me_LEW[3]={me_LEW, mmu_LEW, mtau_LEW};
    
    SMEFTEvolEW.GenerateSMInitialConditions(muw, Lambda_NP, SMEFTBasisFlag, "Numeric",
            g1_LEW, g2_LEW, g3_LEW, lambdaH_LEW, mH2_LEW, 
            Mu_LEW, Md_LEW, Me_LEW, s12CKM_LEW, s13CKM_LEW, s23CKM_LEW, dCKM_LEW);
    
    setSMEFTEvolWC();
    
    //To be discussed with AJL
    SMEFTEvolEW.EvolveToBasis("Numeric", Lambda_NP, muw,"UP");
    
    //Go to mass eigenstate basis and update LEFT Wilson coefficients 
    getMatching().updateLEFTGeneralParameters();
    
    CHWHB_gaga = sW2_tree * CHW + cW2_tree * CHB;
    CHWHB_gagaorth = -cW2_tree * CHW + sW2_tree * CHB;

    // Renormalization of gauge fields parameters
    delta_ZZ = (cW2_tree * CHW + sW2_tree * CHB + sW_tree * cW_tree * CHWB) * v2_over_LambdaNP2;
    delta_AA = (sW2_tree * CHW + cW2_tree * CHB - sW_tree * cW_tree * CHWB) * v2_over_LambdaNP2;
    delta_AZ = 2.0 * sW_tree * cW_tree * (CHW - CHB) * v2_over_LambdaNP2
            - (cW2_tree - sW2_tree) * CHWB * v2_over_LambdaNP2;

    // Similar definitions for the EWPO
    delta_Z = 2.0 * sW_tree * cW_tree * CHWB * v2_over_LambdaNP2;
    delta_A = -2.0 * sW_tree * cW_tree * CHWB * v2_over_LambdaNP2;
    delta_ZA = (cW2_tree - sW2_tree) * CHWB * v2_over_LambdaNP2;

    // Renormalization of Higgs field parameter
    delta_h = (-CHD / 4.0 + CHbox) * v2_over_LambdaNP2;

    //  Calculation of some quantities repeteadly used in the code

    //  NP corrections to Z and W mass Lagrangian parameters
    delta_MZ = (sW_tree * cW_tree * CHWB + 0.25 * CHD + (3.0 / 8.0) * CH / lambdaH_tree) * v2_over_LambdaNP2;
    delta_MW = (3.0 / 8.0) * (CH / lambdaH_tree) * v2_over_LambdaNP2;
    
    // From now on we need the dimension six operators involving fermions. 
    // The coefficients at the EW scale are stored in the matching object.
    

    //  NP correction to Fermi constant, as extracted from muon decay
    delta_GF = DeltaGF();

    //  NP correction to the vev, as extracted from GF
    delta_v = 0.5 * delta_GF;

    //  NP corrections to electric constant parameter and weak mixing angle, depending on the input scheme
    delta_e = cAsch * (-0.5 * delta_A)
            + cWsch * ((cW2_tree / sW2_tree) * (delta_MW - delta_MZ) - 0.5 * delta_GF);

    delta_sW2 = cAsch * (-cW2_tree * (delta_GF - 2.0 * (delta_MW - delta_MZ) - delta_A) / (sW2_tree - cW2_tree))
            + cWsch * (2.0 * cW2_tree * (delta_MW - delta_MZ) / sW2_tree);

    //  NP indirect corrections to EW fermion couplings
    delta_UgNC = (0.5 * delta_Z - 0.5 * delta_GF + delta_MW - delta_MZ);

    delta_QgNC = -(sW_tree * cW_tree * delta_ZA + sW2_tree * delta_sW2);

    delta_UgCC = (delta_e - 0.5 * delta_sW2);

    
    //  NP corrections to Total Higgs width
    dGammaHTotR1 = deltaGammaTotalRatio1();

    if (FlagQuadraticTerms) {
        dGammaHTotR2 = deltaGammaTotalRatio2();
    } else {
        dGammaHTotR2 = 0.0;
    }

    //  Total: to be used in BR functions to check positivity
    GammaHTotR = 1.0 + dGammaHTotR1 + dGammaHTotR2;

    // The total theory error in the H width: set to 0.0 for the moment
    eHwidth = deltaGammaTotalRatio1() - deltaGammaTotalRatio1noError();
    
    
    //The call to this method should be dropped once we have correctly implemented the matching
    getWCFromEvolutor();
    
    

    UevL = 1.0; // Neglect PMNS effects
    VudL = 1.0; // Neglect CKM effects    

//    Yuke = sqrt(2.) * (leptons[ELECTRON].getMass()) / v();
//    Yukmu = sqrt(2.) * (leptons[MU].getMass()) / v();
//    Yuktau = sqrt(2.) * (leptons[TAU].getMass()) / v();
//    Yuku = sqrt(2.) * (quarks[UP].getMass()) / v();
//    Yukc = sqrt(2.) * (quarks[CHARM].getMass()) / v();
    Yukt = sqrt(2.) * mtpole / v();
//    Yukd = sqrt(2.) * (quarks[DOWN].getMass()) / v();
//    Yuks = sqrt(2.) * (quarks[STRANGE].getMass()) / v();
//    Yukb = sqrt(2.) * (quarks[BOTTOM].getMass()) / v();

     
    //  Dimension-6 coefficients used in the STXS parameterization
    aiG = 16.0 * M_PI * M_PI * CHG * Mw_tree * Mw_tree / g3_tree / g3_tree / LambdaNP2;
    ai3G = CG * Mw_tree * Mw_tree / g3_tree / g3_tree / g3_tree / LambdaNP2;
    ai2G = 0.0; // Add
    aiT = 2.0 * CHD * v2_over_LambdaNP2;
    aiH = -2.0 * CHbox * v2_over_LambdaNP2;
    aiWW = 0.0; // Add
    aiB = 0.0; // Add
    aiHW = CDHW * Mw_tree * Mw_tree / 2.0 / g2_tree / LambdaNP2;
    aiHB = CDHB * Mw_tree * Mw_tree / 2.0 / g1_tree / LambdaNP2;
    aiA = CHB * Mw_tree * Mw_tree / g1_tree / g1_tree / LambdaNP2;
    aiHQ = CHq1R[0][0] * v2_over_LambdaNP2; // Valid only for flavour universal NP
    aipHQ = CHq3R[0][0] * v2_over_LambdaNP2; // Valid only for flavour universal NP
    aiHL = CHl1R[0][0] * v2_over_LambdaNP2; // Valid only for flavour universal NP
    aipHL = CHl3R[0][0] * v2_over_LambdaNP2; // Valid only for flavour universal NP. From HEL Lagrangian. Not in original note
    aiHu = CHuR[0][0] * v2_over_LambdaNP2; // Valid only for flavour universal NP
    aiHd = CHdR[0][0] * v2_over_LambdaNP2; // Valid only for flavour universal NP
    aiHe = CHeR[0][0] * v2_over_LambdaNP2; // Valid only for flavour universal NP
    aiu = -CuHR[2][2] * v2_over_LambdaNP2 / Yukt;
    aiuG = CuGR[2][2] * Mw_tree * Mw_tree / g3_tree / LambdaNP2 / Yukt / 4.0; // From HEL.fr Lagrangian. Not in original note. Valid only for flavour universal NP


    //  Dim 6 SMEFT matching

    //NPSMEFTd6GM.getObj().updateNPSMEFTd6GeneralParameters();

    //std::cout<<"\033[1;33m   LambdaNP2 =  \033[0m "<< LambdaNP2 <<std::endl;
    //std::cout<<"\033[1;33m   aiG =  \033[0m "<< aiG <<std::endl;
    //std::cout<<"\033[1;33m   ai3G =  \033[0m "<< ai3G <<std::endl;
    //std::cout<<"\033[1;33m   ai2G =  \033[0m "<< ai2G <<std::endl;
    //std::cout<<"\033[1;33m   aiT =  \033[0m "<< aiT <<std::endl;
    //std::cout<<"\033[1;33m   aiH =  \033[0m "<< aiH <<std::endl;
    //std::cout<<"\033[1;33m   aiWW =  \033[0m "<< aiWW <<std::endl;
    //std::cout<<"\033[1;33m   aiB =  \033[0m "<< aiB <<std::endl;
    //std::cout<<"\033[1;33m   aiHW =  \033[0m "<< aiHW <<std::endl;
    //std::cout<<"\033[1;33m   aiHB =  \033[0m "<< aiHB <<std::endl;
    //std::cout<<"\033[1;33m   aiA =  \033[0m "<< aiA <<std::endl;
    //std::cout<<"\033[1;33m   aiHQ =  \033[0m "<< aiHQ <<std::endl;
    //std::cout<<"\033[1;33m   aipHQ =  \033[0m "<< aipHQ <<std::endl;
    //std::cout<<"\033[1;33m   aiHL =  \033[0m "<< aiHL <<std::endl;
    //std::cout<<"\033[1;33m   aipHL =  \033[0m "<< aipHL <<std::endl;
    //std::cout<<"\033[1;33m   aiHu =  \033[0m "<< aiHu <<std::endl;
    //std::cout<<"\033[1;33m   aiHd =  \033[0m "<< aiHd <<std::endl;
    //std::cout<<"\033[1;33m   aiHe =  \033[0m "<< aiHe <<std::endl;
    //std::cout<<"\033[1;33m   aiu =  \033[0m "<< aiu <<std::endl;
    //std::cout<<"\033[1;33m   aiuG =  \033[0m "<< aiuG <<std::endl;

    
    
    
    
    return (true);
}





void NPSMEFTd6General::setParameter(const std::string name, const double& value)
{
    

    if (name.compare("CG_LNP") == 0) {
        CG_LNP = value;
    } else if (name.compare("CW_LNP") == 0) {
        CW_LNP = value;
    }/* else if (name.compare("C2B_LNP") == 0) { 
	C2B_LNP =  value;
} else if (name.compare("C2W_LNP") == 0) { 
	C2W_LNP =  value;
} else if (name.compare("C2BS_LNP") == 0) { 
	C2BS_LNP =  value;
} else if (name.compare("C2WS_LNP") == 0) { 
	C2WS_LNP =  value;
}*/ else if (name.compare("CHG_LNP") == 0) {
        CHG_LNP = value;
    } else if (name.compare("CHW_LNP") == 0) {
        CHW_LNP = value;
    } else if (name.compare("CHB_LNP") == 0) {
        CHB_LNP = value;
    }/* else if (name.compare("CDHB_LNP") == 0) { 
	CDHB_LNP =  value;
} else if (name.compare("CDHW_LNP") == 0) { 
	CDHW_LNP =  value;
} else if (name.compare("CDB_LNP") == 0) { 
	CDB_LNP =  value;
} else if (name.compare("CDW_LNP") == 0) { 
	CDW_LNP =  value;
}*/ else if (name.compare("CHWB_LNP") == 0) {
        CHWB_LNP = value;
    } else if (name.compare("CHD_LNP") == 0) {
        CHD_LNP = value;
    }/* else if (name.compare("CT_LNP") == 0) { 
	CT_LNP =  value;
}*/ else if (name.compare("CHbox_LNP") == 0) {
        CHbox_LNP = value;
    } else if (name.compare("CH_LNP") == 0) {
        CH_LNP = value;
    } else if (name.compare("CGtilde_LNP") == 0) {
        CGtilde_LNP = value;
    } else if (name.compare("CWtilde_LNP") == 0) {
        CWtilde_LNP = value;
    } else if (name.compare("CHGtilde_LNP") == 0) {
        CHGtilde_LNP = value;
    } else if (name.compare("CHWtilde_LNP") == 0) {
        CHWtilde_LNP = value;
    } else if (name.compare("CHBtilde_LNP") == 0) {
        CHBtilde_LNP = value;
    } else if (name.compare("CHWtildeB_LNP") == 0) {
        CHWtildeB_LNP = value;
    } else if (name.compare("CHl1_11r_LNP") == 0) {
        CHl1_11r_LNP = value;
    } else if (name.compare("CHl1_12r_LNP") == 0) {
        CHl1_12r_LNP = value;
    } else if (name.compare("CHl1_13r_LNP") == 0) {
        CHl1_13r_LNP = value;
    } else if (name.compare("CHl1_22r_LNP") == 0) {
        CHl1_22r_LNP = value;
    } else if (name.compare("CHl1_23r_LNP") == 0) {
        CHl1_23r_LNP = value;
    } else if (name.compare("CHl1_33r_LNP") == 0) {
        CHl1_33r_LNP = value;
    } else if (name.compare("CHl1_12i_LNP") == 0) {
        CHl1_12i_LNP = value;
    } else if (name.compare("CHl1_13i_LNP") == 0) {
        CHl1_13i_LNP = value;
    } else if (name.compare("CHl1_23i_LNP") == 0) {
        CHl1_23i_LNP = value;
    } else if (name.compare("CHl3_11r_LNP") == 0) {
        CHl3_11r_LNP = value;
    } else if (name.compare("CHl3_12r_LNP") == 0) {
        CHl3_12r_LNP = value;
    } else if (name.compare("CHl3_13r_LNP") == 0) {
        CHl3_13r_LNP = value;
    } else if (name.compare("CHl3_22r_LNP") == 0) {
        CHl3_22r_LNP = value;
    } else if (name.compare("CHl3_23r_LNP") == 0) {
        CHl3_23r_LNP = value;
    } else if (name.compare("CHl3_33r_LNP") == 0) {
        CHl3_33r_LNP = value;
    } else if (name.compare("CHl3_12i_LNP") == 0) {
        CHl3_12i_LNP = value;
    } else if (name.compare("CHl3_13i_LNP") == 0) {
        CHl3_13i_LNP = value;
    } else if (name.compare("CHl3_23i_LNP") == 0) {
        CHl3_23i_LNP = value;
    } else if (name.compare("CHe_11r_LNP") == 0) {
        CHe_11r_LNP = value;
    } else if (name.compare("CHe_12r_LNP") == 0) {
        CHe_12r_LNP = value;
    } else if (name.compare("CHe_13r_LNP") == 0) {
        CHe_13r_LNP = value;
    } else if (name.compare("CHe_22r_LNP") == 0) {
        CHe_22r_LNP = value;
    } else if (name.compare("CHe_23r_LNP") == 0) {
        CHe_23r_LNP = value;
    } else if (name.compare("CHe_33r_LNP") == 0) {
        CHe_33r_LNP = value;
    } else if (name.compare("CHe_12i_LNP") == 0) {
        CHe_12i_LNP = value;
    } else if (name.compare("CHe_13i_LNP") == 0) {
        CHe_13i_LNP = value;
    } else if (name.compare("CHe_23i_LNP") == 0) {
        CHe_23i_LNP = value;
    } else if (name.compare("CHq1_11r_LNP") == 0) {
        CHq1_11r_LNP = value;
    } else if (name.compare("CHq1_12r_LNP") == 0) {
        CHq1_12r_LNP = value;
    } else if (name.compare("CHq1_13r_LNP") == 0) {
        CHq1_13r_LNP = value;
    } else if (name.compare("CHq1_22r_LNP") == 0) {
        CHq1_22r_LNP = value;
    } else if (name.compare("CHq1_23r_LNP") == 0) {
        CHq1_23r_LNP = value;
    } else if (name.compare("CHq1_33r_LNP") == 0) {
        CHq1_33r_LNP = value;
    } else if (name.compare("CHq1_12i_LNP") == 0) {
        CHq1_12i_LNP = value;
    } else if (name.compare("CHq1_13i_LNP") == 0) {
        CHq1_13i_LNP = value;
    } else if (name.compare("CHq1_23i_LNP") == 0) {
        CHq1_23i_LNP = value;
    } else if (name.compare("CHq3_11r_LNP") == 0) {
        CHq3_11r_LNP = value;
    } else if (name.compare("CHq3_12r_LNP") == 0) {
        CHq3_12r_LNP = value;
    } else if (name.compare("CHq3_13r_LNP") == 0) {
        CHq3_13r_LNP = value;
    } else if (name.compare("CHq3_22r_LNP") == 0) {
        CHq3_22r_LNP = value;
    } else if (name.compare("CHq3_23r_LNP") == 0) {
        CHq3_23r_LNP = value;
    } else if (name.compare("CHq3_33r_LNP") == 0) {
        CHq3_33r_LNP = value;
    } else if (name.compare("CHq3_12i_LNP") == 0) {
        CHq3_12i_LNP = value;
    } else if (name.compare("CHq3_13i_LNP") == 0) {
        CHq3_13i_LNP = value;
    } else if (name.compare("CHq3_23i_LNP") == 0) {
        CHq3_23i_LNP = value;
    } else if (name.compare("CHu_11r_LNP") == 0) {
        CHu_11r_LNP = value;
    } else if (name.compare("CHu_12r_LNP") == 0) {
        CHu_12r_LNP = value;
    } else if (name.compare("CHu_13r_LNP") == 0) {
        CHu_13r_LNP = value;
    } else if (name.compare("CHu_22r_LNP") == 0) {
        CHu_22r_LNP = value;
    } else if (name.compare("CHu_23r_LNP") == 0) {
        CHu_23r_LNP = value;
    } else if (name.compare("CHu_33r_LNP") == 0) {
        CHu_33r_LNP = value;
    } else if (name.compare("CHu_12i_LNP") == 0) {
        CHu_12i_LNP = value;
    } else if (name.compare("CHu_13i_LNP") == 0) {
        CHu_13i_LNP = value;
    } else if (name.compare("CHu_23i_LNP") == 0) {
        CHu_23i_LNP = value;
    } else if (name.compare("CHd_11r_LNP") == 0) {
        CHd_11r_LNP = value;
    } else if (name.compare("CHd_12r_LNP") == 0) {
        CHd_12r_LNP = value;
    } else if (name.compare("CHd_13r_LNP") == 0) {
        CHd_13r_LNP = value;
    } else if (name.compare("CHd_22r_LNP") == 0) {
        CHd_22r_LNP = value;
    } else if (name.compare("CHd_23r_LNP") == 0) {
        CHd_23r_LNP = value;
    } else if (name.compare("CHd_33r_LNP") == 0) {
        CHd_33r_LNP = value;
    } else if (name.compare("CHd_12i_LNP") == 0) {
        CHd_12i_LNP = value;
    } else if (name.compare("CHd_13i_LNP") == 0) {
        CHd_13i_LNP = value;
    } else if (name.compare("CHd_23i_LNP") == 0) {
        CHd_23i_LNP = value;
    } else if (name.compare("CHud_11r_LNP") == 0) {
        CHud_11r_LNP = value;
    } else if (name.compare("CHud_12r_LNP") == 0) {
        CHud_12r_LNP = value;
    } else if (name.compare("CHud_13r_LNP") == 0) {
        CHud_13r_LNP = value;
    } else if (name.compare("CHud_21r_LNP") == 0) {
        CHud_21r_LNP = value;
    } else if (name.compare("CHud_22r_LNP") == 0) {
        CHud_22r_LNP = value;
    } else if (name.compare("CHud_23r_LNP") == 0) {
        CHud_23r_LNP = value;
    } else if (name.compare("CHud_31r_LNP") == 0) {
        CHud_31r_LNP = value;
    } else if (name.compare("CHud_32r_LNP") == 0) {
        CHud_32r_LNP = value;
    } else if (name.compare("CHud_33r_LNP") == 0) {
        CHud_33r_LNP = value;
    } else if (name.compare("CHud_11i_LNP") == 0) {
        CHud_11i_LNP = value;
    } else if (name.compare("CHud_12i_LNP") == 0) {
        CHud_12i_LNP = value;
    } else if (name.compare("CHud_13i_LNP") == 0) {
        CHud_13i_LNP = value;
    } else if (name.compare("CHud_21i_LNP") == 0) {
        CHud_21i_LNP = value;
    } else if (name.compare("CHud_22i_LNP") == 0) {
        CHud_22i_LNP = value;
    } else if (name.compare("CHud_23i_LNP") == 0) {
        CHud_23i_LNP = value;
    } else if (name.compare("CHud_31i_LNP") == 0) {
        CHud_31i_LNP = value;
    } else if (name.compare("CHud_32i_LNP") == 0) {
        CHud_32i_LNP = value;
    } else if (name.compare("CHud_33i_LNP") == 0) {
        CHud_33i_LNP = value;
    } else if (name.compare("CeH_11r_LNP") == 0) {
        CeH_11r_LNP = value;
    } else if (name.compare("CeH_12r_LNP") == 0) {
        CeH_12r_LNP = value;
    } else if (name.compare("CeH_13r_LNP") == 0) {
        CeH_13r_LNP = value;
    } else if (name.compare("CeH_21r_LNP") == 0) {
        CeH_21r_LNP = value;
    } else if (name.compare("CeH_22r_LNP") == 0) {
        CeH_22r_LNP = value;
    } else if (name.compare("CeH_23r_LNP") == 0) {
        CeH_23r_LNP = value;
    } else if (name.compare("CeH_31r_LNP") == 0) {
        CeH_31r_LNP = value;
    } else if (name.compare("CeH_32r_LNP") == 0) {
        CeH_32r_LNP = value;
    } else if (name.compare("CeH_33r_LNP") == 0) {
        CeH_33r_LNP = value;
    } else if (name.compare("CeH_11i_LNP") == 0) {
        CeH_11i_LNP = value;
    } else if (name.compare("CeH_12i_LNP") == 0) {
        CeH_12i_LNP = value;
    } else if (name.compare("CeH_13i_LNP") == 0) {
        CeH_13i_LNP = value;
    } else if (name.compare("CeH_21i_LNP") == 0) {
        CeH_21i_LNP = value;
    } else if (name.compare("CeH_22i_LNP") == 0) {
        CeH_22i_LNP = value;
    } else if (name.compare("CeH_23i_LNP") == 0) {
        CeH_23i_LNP = value;
    } else if (name.compare("CeH_31i_LNP") == 0) {
        CeH_31i_LNP = value;
    } else if (name.compare("CeH_32i_LNP") == 0) {
        CeH_32i_LNP = value;
    } else if (name.compare("CeH_33i_LNP") == 0) {
        CeH_33i_LNP = value;
    } else if (name.compare("CuH_11r_LNP") == 0) {
        CuH_11r_LNP = value;
    } else if (name.compare("CuH_12r_LNP") == 0) {
        CuH_12r_LNP = value;
    } else if (name.compare("CuH_13r_LNP") == 0) {
        CuH_13r_LNP = value;
    } else if (name.compare("CuH_21r_LNP") == 0) {
        CuH_21r_LNP = value;
    } else if (name.compare("CuH_22r_LNP") == 0) {
        CuH_22r_LNP = value;
    } else if (name.compare("CuH_23r_LNP") == 0) {
        CuH_23r_LNP = value;
    } else if (name.compare("CuH_31r_LNP") == 0) {
        CuH_31r_LNP = value;
    } else if (name.compare("CuH_32r_LNP") == 0) {
        CuH_32r_LNP = value;
    } else if (name.compare("CuH_33r_LNP") == 0) {
        CuH_33r_LNP = value;
    } else if (name.compare("CuH_11i_LNP") == 0) {
        CuH_11i_LNP = value;
    } else if (name.compare("CuH_12i_LNP") == 0) {
        CuH_12i_LNP = value;
    } else if (name.compare("CuH_13i_LNP") == 0) {
        CuH_13i_LNP = value;
    } else if (name.compare("CuH_21i_LNP") == 0) {
        CuH_21i_LNP = value;
    } else if (name.compare("CuH_22i_LNP") == 0) {
        CuH_22i_LNP = value;
    } else if (name.compare("CuH_23i_LNP") == 0) {
        CuH_23i_LNP = value;
    } else if (name.compare("CuH_31i_LNP") == 0) {
        CuH_31i_LNP = value;
    } else if (name.compare("CuH_32i_LNP") == 0) {
        CuH_32i_LNP = value;
    } else if (name.compare("CuH_33i_LNP") == 0) {
        CuH_33i_LNP = value;
    } else if (name.compare("CdH_11r_LNP") == 0) {
        CdH_11r_LNP = value;
    } else if (name.compare("CdH_12r_LNP") == 0) {
        CdH_12r_LNP = value;
    } else if (name.compare("CdH_13r_LNP") == 0) {
        CdH_13r_LNP = value;
    } else if (name.compare("CdH_21r_LNP") == 0) {
        CdH_21r_LNP = value;
    } else if (name.compare("CdH_22r_LNP") == 0) {
        CdH_22r_LNP = value;
    } else if (name.compare("CdH_23r_LNP") == 0) {
        CdH_23r_LNP = value;
    } else if (name.compare("CdH_31r_LNP") == 0) {
        CdH_31r_LNP = value;
    } else if (name.compare("CdH_32r_LNP") == 0) {
        CdH_32r_LNP = value;
    } else if (name.compare("CdH_33r_LNP") == 0) {
        CdH_33r_LNP = value;
    } else if (name.compare("CdH_11i_LNP") == 0) {
        CdH_11i_LNP = value;
    } else if (name.compare("CdH_12i_LNP") == 0) {
        CdH_12i_LNP = value;
    } else if (name.compare("CdH_13i_LNP") == 0) {
        CdH_13i_LNP = value;
    } else if (name.compare("CdH_21i_LNP") == 0) {
        CdH_21i_LNP = value;
    } else if (name.compare("CdH_22i_LNP") == 0) {
        CdH_22i_LNP = value;
    } else if (name.compare("CdH_23i_LNP") == 0) {
        CdH_23i_LNP = value;
    } else if (name.compare("CdH_31i_LNP") == 0) {
        CdH_31i_LNP = value;
    } else if (name.compare("CdH_32i_LNP") == 0) {
        CdH_32i_LNP = value;
    } else if (name.compare("CdH_33i_LNP") == 0) {
        CdH_33i_LNP = value;
    } else if (name.compare("CuG_11r_LNP") == 0) {
        CuG_11r_LNP = value;
    } else if (name.compare("CuG_12r_LNP") == 0) {
        CuG_12r_LNP = value;
    } else if (name.compare("CuG_13r_LNP") == 0) {
        CuG_13r_LNP = value;
    } else if (name.compare("CuG_21r_LNP") == 0) {
        CuG_21r_LNP = value;
    } else if (name.compare("CuG_22r_LNP") == 0) {
        CuG_22r_LNP = value;
    } else if (name.compare("CuG_23r_LNP") == 0) {
        CuG_23r_LNP = value;
    } else if (name.compare("CuG_31r_LNP") == 0) {
        CuG_31r_LNP = value;
    } else if (name.compare("CuG_32r_LNP") == 0) {
        CuG_32r_LNP = value;
    } else if (name.compare("CuG_33r_LNP") == 0) {
        CuG_33r_LNP = value;
    } else if (name.compare("CuG_11i_LNP") == 0) {
        CuG_11i_LNP = value;
    } else if (name.compare("CuG_12i_LNP") == 0) {
        CuG_12i_LNP = value;
    } else if (name.compare("CuG_13i_LNP") == 0) {
        CuG_13i_LNP = value;
    } else if (name.compare("CuG_21i_LNP") == 0) {
        CuG_21i_LNP = value;
    } else if (name.compare("CuG_22i_LNP") == 0) {
        CuG_22i_LNP = value;
    } else if (name.compare("CuG_23i_LNP") == 0) {
        CuG_23i_LNP = value;
    } else if (name.compare("CuG_31i_LNP") == 0) {
        CuG_31i_LNP = value;
    } else if (name.compare("CuG_32i_LNP") == 0) {
        CuG_32i_LNP = value;
    } else if (name.compare("CuG_33i_LNP") == 0) {
        CuG_33i_LNP = value;
    } else if (name.compare("CuW_11r_LNP") == 0) {
        CuW_11r_LNP = value;
    } else if (name.compare("CuW_12r_LNP") == 0) {
        CuW_12r_LNP = value;
    } else if (name.compare("CuW_13r_LNP") == 0) {
        CuW_13r_LNP = value;
    } else if (name.compare("CuW_21r_LNP") == 0) {
        CuW_21r_LNP = value;
    } else if (name.compare("CuW_22r_LNP") == 0) {
        CuW_22r_LNP = value;
    } else if (name.compare("CuW_23r_LNP") == 0) {
        CuW_23r_LNP = value;
    } else if (name.compare("CuW_31r_LNP") == 0) {
        CuW_31r_LNP = value;
    } else if (name.compare("CuW_32r_LNP") == 0) {
        CuW_32r_LNP = value;
    } else if (name.compare("CuW_33r_LNP") == 0) {
        CuW_33r_LNP = value;
    } else if (name.compare("CuW_11i_LNP") == 0) {
        CuW_11i_LNP = value;
    } else if (name.compare("CuW_12i_LNP") == 0) {
        CuW_12i_LNP = value;
    } else if (name.compare("CuW_13i_LNP") == 0) {
        CuW_13i_LNP = value;
    } else if (name.compare("CuW_21i_LNP") == 0) {
        CuW_21i_LNP = value;
    } else if (name.compare("CuW_22i_LNP") == 0) {
        CuW_22i_LNP = value;
    } else if (name.compare("CuW_23i_LNP") == 0) {
        CuW_23i_LNP = value;
    } else if (name.compare("CuW_31i_LNP") == 0) {
        CuW_31i_LNP = value;
    } else if (name.compare("CuW_32i_LNP") == 0) {
        CuW_32i_LNP = value;
    } else if (name.compare("CuW_33i_LNP") == 0) {
        CuW_33i_LNP = value;
    } else if (name.compare("CuB_11r_LNP") == 0) {
        CuB_11r_LNP = value;
    } else if (name.compare("CuB_12r_LNP") == 0) {
        CuB_12r_LNP = value;
    } else if (name.compare("CuB_13r_LNP") == 0) {
        CuB_13r_LNP = value;
    } else if (name.compare("CuB_21r_LNP") == 0) {
        CuB_21r_LNP = value;
    } else if (name.compare("CuB_22r_LNP") == 0) {
        CuB_22r_LNP = value;
    } else if (name.compare("CuB_23r_LNP") == 0) {
        CuB_23r_LNP = value;
    } else if (name.compare("CuB_31r_LNP") == 0) {
        CuB_31r_LNP = value;
    } else if (name.compare("CuB_32r_LNP") == 0) {
        CuB_32r_LNP = value;
    } else if (name.compare("CuB_33r_LNP") == 0) {
        CuB_33r_LNP = value;
    } else if (name.compare("CuB_11i_LNP") == 0) {
        CuB_11i_LNP = value;
    } else if (name.compare("CuB_12i_LNP") == 0) {
        CuB_12i_LNP = value;
    } else if (name.compare("CuB_13i_LNP") == 0) {
        CuB_13i_LNP = value;
    } else if (name.compare("CuB_21i_LNP") == 0) {
        CuB_21i_LNP = value;
    } else if (name.compare("CuB_22i_LNP") == 0) {
        CuB_22i_LNP = value;
    } else if (name.compare("CuB_23i_LNP") == 0) {
        CuB_23i_LNP = value;
    } else if (name.compare("CuB_31i_LNP") == 0) {
        CuB_31i_LNP = value;
    } else if (name.compare("CuB_32i_LNP") == 0) {
        CuB_32i_LNP = value;
    } else if (name.compare("CuB_33i_LNP") == 0) {
        CuB_33i_LNP = value;
    } else if (name.compare("CdG_11r_LNP") == 0) {
        CdG_11r_LNP = value;
    } else if (name.compare("CdG_12r_LNP") == 0) {
        CdG_12r_LNP = value;
    } else if (name.compare("CdG_13r_LNP") == 0) {
        CdG_13r_LNP = value;
    } else if (name.compare("CdG_21r_LNP") == 0) {
        CdG_21r_LNP = value;
    } else if (name.compare("CdG_22r_LNP") == 0) {
        CdG_22r_LNP = value;
    } else if (name.compare("CdG_23r_LNP") == 0) {
        CdG_23r_LNP = value;
    } else if (name.compare("CdG_31r_LNP") == 0) {
        CdG_31r_LNP = value;
    } else if (name.compare("CdG_32r_LNP") == 0) {
        CdG_32r_LNP = value;
    } else if (name.compare("CdG_33r_LNP") == 0) {
        CdG_33r_LNP = value;
    } else if (name.compare("CdG_11i_LNP") == 0) {
        CdG_11i_LNP = value;
    } else if (name.compare("CdG_12i_LNP") == 0) {
        CdG_12i_LNP = value;
    } else if (name.compare("CdG_13i_LNP") == 0) {
        CdG_13i_LNP = value;
    } else if (name.compare("CdG_21i_LNP") == 0) {
        CdG_21i_LNP = value;
    } else if (name.compare("CdG_22i_LNP") == 0) {
        CdG_22i_LNP = value;
    } else if (name.compare("CdG_23i_LNP") == 0) {
        CdG_23i_LNP = value;
    } else if (name.compare("CdG_31i_LNP") == 0) {
        CdG_31i_LNP = value;
    } else if (name.compare("CdG_32i_LNP") == 0) {
        CdG_32i_LNP = value;
    } else if (name.compare("CdG_33i_LNP") == 0) {
        CdG_33i_LNP = value;
    } else if (name.compare("CdW_11r_LNP") == 0) {
        CdW_11r_LNP = value;
    } else if (name.compare("CdW_12r_LNP") == 0) {
        CdW_12r_LNP = value;
    } else if (name.compare("CdW_13r_LNP") == 0) {
        CdW_13r_LNP = value;
    } else if (name.compare("CdW_21r_LNP") == 0) {
        CdW_21r_LNP = value;
    } else if (name.compare("CdW_22r_LNP") == 0) {
        CdW_22r_LNP = value;
    } else if (name.compare("CdW_23r_LNP") == 0) {
        CdW_23r_LNP = value;
    } else if (name.compare("CdW_31r_LNP") == 0) {
        CdW_31r_LNP = value;
    } else if (name.compare("CdW_32r_LNP") == 0) {
        CdW_32r_LNP = value;
    } else if (name.compare("CdW_33r_LNP") == 0) {
        CdW_33r_LNP = value;
    } else if (name.compare("CdW_11i_LNP") == 0) {
        CdW_11i_LNP = value;
    } else if (name.compare("CdW_12i_LNP") == 0) {
        CdW_12i_LNP = value;
    } else if (name.compare("CdW_13i_LNP") == 0) {
        CdW_13i_LNP = value;
    } else if (name.compare("CdW_21i_LNP") == 0) {
        CdW_21i_LNP = value;
    } else if (name.compare("CdW_22i_LNP") == 0) {
        CdW_22i_LNP = value;
    } else if (name.compare("CdW_23i_LNP") == 0) {
        CdW_23i_LNP = value;
    } else if (name.compare("CdW_31i_LNP") == 0) {
        CdW_31i_LNP = value;
    } else if (name.compare("CdW_32i_LNP") == 0) {
        CdW_32i_LNP = value;
    } else if (name.compare("CdW_33i_LNP") == 0) {
        CdW_33i_LNP = value;
    } else if (name.compare("CdB_11r_LNP") == 0) {
        CdB_11r_LNP = value;
    } else if (name.compare("CdB_12r_LNP") == 0) {
        CdB_12r_LNP = value;
    } else if (name.compare("CdB_13r_LNP") == 0) {
        CdB_13r_LNP = value;
    } else if (name.compare("CdB_21r_LNP") == 0) {
        CdB_21r_LNP = value;
    } else if (name.compare("CdB_22r_LNP") == 0) {
        CdB_22r_LNP = value;
    } else if (name.compare("CdB_23r_LNP") == 0) {
        CdB_23r_LNP = value;
    } else if (name.compare("CdB_31r_LNP") == 0) {
        CdB_31r_LNP = value;
    } else if (name.compare("CdB_32r_LNP") == 0) {
        CdB_32r_LNP = value;
    } else if (name.compare("CdB_33r_LNP") == 0) {
        CdB_33r_LNP = value;
    } else if (name.compare("CdB_11i_LNP") == 0) {
        CdB_11i_LNP = value;
    } else if (name.compare("CdB_12i_LNP") == 0) {
        CdB_12i_LNP = value;
    } else if (name.compare("CdB_13i_LNP") == 0) {
        CdB_13i_LNP = value;
    } else if (name.compare("CdB_21i_LNP") == 0) {
        CdB_21i_LNP = value;
    } else if (name.compare("CdB_22i_LNP") == 0) {
        CdB_22i_LNP = value;
    } else if (name.compare("CdB_23i_LNP") == 0) {
        CdB_23i_LNP = value;
    } else if (name.compare("CdB_31i_LNP") == 0) {
        CdB_31i_LNP = value;
    } else if (name.compare("CdB_32i_LNP") == 0) {
        CdB_32i_LNP = value;
    } else if (name.compare("CdB_33i_LNP") == 0) {
        CdB_33i_LNP = value;
    } else if (name.compare("CeW_11r_LNP") == 0) {
        CeW_11r_LNP = value;
    } else if (name.compare("CeW_12r_LNP") == 0) {
        CeW_12r_LNP = value;
    } else if (name.compare("CeW_13r_LNP") == 0) {
        CeW_13r_LNP = value;
    } else if (name.compare("CeW_21r_LNP") == 0) {
        CeW_21r_LNP = value;
    } else if (name.compare("CeW_22r_LNP") == 0) {
        CeW_22r_LNP = value;
    } else if (name.compare("CeW_23r_LNP") == 0) {
        CeW_23r_LNP = value;
    } else if (name.compare("CeW_31r_LNP") == 0) {
        CeW_31r_LNP = value;
    } else if (name.compare("CeW_32r_LNP") == 0) {
        CeW_32r_LNP = value;
    } else if (name.compare("CeW_33r_LNP") == 0) {
        CeW_33r_LNP = value;
    } else if (name.compare("CeW_11i_LNP") == 0) {
        CeW_11i_LNP = value;
    } else if (name.compare("CeW_12i_LNP") == 0) {
        CeW_12i_LNP = value;
    } else if (name.compare("CeW_13i_LNP") == 0) {
        CeW_13i_LNP = value;
    } else if (name.compare("CeW_21i_LNP") == 0) {
        CeW_21i_LNP = value;
    } else if (name.compare("CeW_22i_LNP") == 0) {
        CeW_22i_LNP = value;
    } else if (name.compare("CeW_23i_LNP") == 0) {
        CeW_23i_LNP = value;
    } else if (name.compare("CeW_31i_LNP") == 0) {
        CeW_31i_LNP = value;
    } else if (name.compare("CeW_32i_LNP") == 0) {
        CeW_32i_LNP = value;
    } else if (name.compare("CeW_33i_LNP") == 0) {
        CeW_33i_LNP = value;
    } else if (name.compare("CeB_11r_LNP") == 0) {
        CeB_11r_LNP = value;
    } else if (name.compare("CeB_12r_LNP") == 0) {
        CeB_12r_LNP = value;
    } else if (name.compare("CeB_13r_LNP") == 0) {
        CeB_13r_LNP = value;
    } else if (name.compare("CeB_21r_LNP") == 0) {
        CeB_21r_LNP = value;
    } else if (name.compare("CeB_22r_LNP") == 0) {
        CeB_22r_LNP = value;
    } else if (name.compare("CeB_23r_LNP") == 0) {
        CeB_23r_LNP = value;
    } else if (name.compare("CeB_31r_LNP") == 0) {
        CeB_31r_LNP = value;
    } else if (name.compare("CeB_32r_LNP") == 0) {
        CeB_32r_LNP = value;
    } else if (name.compare("CeB_33r_LNP") == 0) {
        CeB_33r_LNP = value;
    } else if (name.compare("CeB_11i_LNP") == 0) {
        CeB_11i_LNP = value;
    } else if (name.compare("CeB_12i_LNP") == 0) {
        CeB_12i_LNP = value;
    } else if (name.compare("CeB_13i_LNP") == 0) {
        CeB_13i_LNP = value;
    } else if (name.compare("CeB_21i_LNP") == 0) {
        CeB_21i_LNP = value;
    } else if (name.compare("CeB_22i_LNP") == 0) {
        CeB_22i_LNP = value;
    } else if (name.compare("CeB_23i_LNP") == 0) {
        CeB_23i_LNP = value;
    } else if (name.compare("CeB_31i_LNP") == 0) {
        CeB_31i_LNP = value;
    } else if (name.compare("CeB_32i_LNP") == 0) {
        CeB_32i_LNP = value;
    } else if (name.compare("CeB_33i_LNP") == 0) {
        CeB_33i_LNP = value;
    } else if (name.compare("Cll_1111r_LNP") == 0) {
        Cll_1111r_LNP = value;
    } else if (name.compare("Cll_1112r_LNP") == 0) {
        Cll_1112r_LNP = value;
    } else if (name.compare("Cll_1113r_LNP") == 0) {
        Cll_1113r_LNP = value;
    } else if (name.compare("Cll_1122r_LNP") == 0) {
        Cll_1122r_LNP = value;
    } else if (name.compare("Cll_1123r_LNP") == 0) {
        Cll_1123r_LNP = value;
    } else if (name.compare("Cll_1133r_LNP") == 0) {
        Cll_1133r_LNP = value;
    } else if (name.compare("Cll_1212r_LNP") == 0) {
        Cll_1212r_LNP = value;
    } else if (name.compare("Cll_1213r_LNP") == 0) {
        Cll_1213r_LNP = value;
    } else if (name.compare("Cll_1221r_LNP") == 0) {
        Cll_1221r_LNP = value;
    } else if (name.compare("Cll_1222r_LNP") == 0) {
        Cll_1222r_LNP = value;
    } else if (name.compare("Cll_1223r_LNP") == 0) {
        Cll_1223r_LNP = value;
    } else if (name.compare("Cll_1231r_LNP") == 0) {
        Cll_1231r_LNP = value;
    } else if (name.compare("Cll_1232r_LNP") == 0) {
        Cll_1232r_LNP = value;
    } else if (name.compare("Cll_1233r_LNP") == 0) {
        Cll_1233r_LNP = value;
    } else if (name.compare("Cll_1313r_LNP") == 0) {
        Cll_1313r_LNP = value;
    } else if (name.compare("Cll_1322r_LNP") == 0) {
        Cll_1322r_LNP = value;
    } else if (name.compare("Cll_1323r_LNP") == 0) {
        Cll_1323r_LNP = value;
    } else if (name.compare("Cll_1331r_LNP") == 0) {
        Cll_1331r_LNP = value;
    } else if (name.compare("Cll_1332r_LNP") == 0) {
        Cll_1332r_LNP = value;
    } else if (name.compare("Cll_1333r_LNP") == 0) {
        Cll_1333r_LNP = value;
    } else if (name.compare("Cll_2222r_LNP") == 0) {
        Cll_2222r_LNP = value;
    } else if (name.compare("Cll_2223r_LNP") == 0) {
        Cll_2223r_LNP = value;
    } else if (name.compare("Cll_2233r_LNP") == 0) {
        Cll_2233r_LNP = value;
    } else if (name.compare("Cll_2323r_LNP") == 0) {
        Cll_2323r_LNP = value;
    } else if (name.compare("Cll_2332r_LNP") == 0) {
        Cll_2332r_LNP = value;
    } else if (name.compare("Cll_2333r_LNP") == 0) {
        Cll_2333r_LNP = value;
    } else if (name.compare("Cll_3333r_LNP") == 0) {
        Cll_3333r_LNP = value;
    } else if (name.compare("Cll_1112i_LNP") == 0) {
        Cll_1112i_LNP = value;
    } else if (name.compare("Cll_1113i_LNP") == 0) {
        Cll_1113i_LNP = value;
    } else if (name.compare("Cll_1123i_LNP") == 0) {
        Cll_1123i_LNP = value;
    } else if (name.compare("Cll_1212i_LNP") == 0) {
        Cll_1212i_LNP = value;
    } else if (name.compare("Cll_1213i_LNP") == 0) {
        Cll_1213i_LNP = value;
    } else if (name.compare("Cll_1222i_LNP") == 0) {
        Cll_1222i_LNP = value;
    } else if (name.compare("Cll_1223i_LNP") == 0) {
        Cll_1223i_LNP = value;
    } else if (name.compare("Cll_1231i_LNP") == 0) {
        Cll_1231i_LNP = value;
    } else if (name.compare("Cll_1232i_LNP") == 0) {
        Cll_1232i_LNP = value;
    } else if (name.compare("Cll_1233i_LNP") == 0) {
        Cll_1233i_LNP = value;
    } else if (name.compare("Cll_1313i_LNP") == 0) {
        Cll_1313i_LNP = value;
    } else if (name.compare("Cll_1322i_LNP") == 0) {
        Cll_1322i_LNP = value;
    } else if (name.compare("Cll_1323i_LNP") == 0) {
        Cll_1323i_LNP = value;
    } else if (name.compare("Cll_1332i_LNP") == 0) {
        Cll_1332i_LNP = value;
    } else if (name.compare("Cll_1333i_LNP") == 0) {
        Cll_1333i_LNP = value;
    } else if (name.compare("Cll_2223i_LNP") == 0) {
        Cll_2223i_LNP = value;
    } else if (name.compare("Cll_2323i_LNP") == 0) {
        Cll_2323i_LNP = value;
    } else if (name.compare("Cll_2333i_LNP") == 0) {
        Cll_2333i_LNP = value;
    } else if (name.compare("Clq1_1111r_LNP") == 0) {
        Clq1_1111r_LNP = value;
    } else if (name.compare("Clq1_1112r_LNP") == 0) {
        Clq1_1112r_LNP = value;
    } else if (name.compare("Clq1_1113r_LNP") == 0) {
        Clq1_1113r_LNP = value;
    } else if (name.compare("Clq1_1122r_LNP") == 0) {
        Clq1_1122r_LNP = value;
    } else if (name.compare("Clq1_1123r_LNP") == 0) {
        Clq1_1123r_LNP = value;
    } else if (name.compare("Clq1_1133r_LNP") == 0) {
        Clq1_1133r_LNP = value;
    } else if (name.compare("Clq1_1211r_LNP") == 0) {
        Clq1_1211r_LNP = value;
    } else if (name.compare("Clq1_1212r_LNP") == 0) {
        Clq1_1212r_LNP = value;
    } else if (name.compare("Clq1_1213r_LNP") == 0) {
        Clq1_1213r_LNP = value;
    } else if (name.compare("Clq1_1221r_LNP") == 0) {
        Clq1_1221r_LNP = value;
    } else if (name.compare("Clq1_1222r_LNP") == 0) {
        Clq1_1222r_LNP = value;
    } else if (name.compare("Clq1_1223r_LNP") == 0) {
        Clq1_1223r_LNP = value;
    } else if (name.compare("Clq1_1231r_LNP") == 0) {
        Clq1_1231r_LNP = value;
    } else if (name.compare("Clq1_1232r_LNP") == 0) {
        Clq1_1232r_LNP = value;
    } else if (name.compare("Clq1_1233r_LNP") == 0) {
        Clq1_1233r_LNP = value;
    } else if (name.compare("Clq1_1311r_LNP") == 0) {
        Clq1_1311r_LNP = value;
    } else if (name.compare("Clq1_1312r_LNP") == 0) {
        Clq1_1312r_LNP = value;
    } else if (name.compare("Clq1_1313r_LNP") == 0) {
        Clq1_1313r_LNP = value;
    } else if (name.compare("Clq1_1321r_LNP") == 0) {
        Clq1_1321r_LNP = value;
    } else if (name.compare("Clq1_1322r_LNP") == 0) {
        Clq1_1322r_LNP = value;
    } else if (name.compare("Clq1_1323r_LNP") == 0) {
        Clq1_1323r_LNP = value;
    } else if (name.compare("Clq1_1331r_LNP") == 0) {
        Clq1_1331r_LNP = value;
    } else if (name.compare("Clq1_1332r_LNP") == 0) {
        Clq1_1332r_LNP = value;
    } else if (name.compare("Clq1_1333r_LNP") == 0) {
        Clq1_1333r_LNP = value;
    } else if (name.compare("Clq1_2211r_LNP") == 0) {
        Clq1_2211r_LNP = value;
    } else if (name.compare("Clq1_2212r_LNP") == 0) {
        Clq1_2212r_LNP = value;
    } else if (name.compare("Clq1_2213r_LNP") == 0) {
        Clq1_2213r_LNP = value;
    } else if (name.compare("Clq1_2222r_LNP") == 0) {
        Clq1_2222r_LNP = value;
    } else if (name.compare("Clq1_2223r_LNP") == 0) {
        Clq1_2223r_LNP = value;
    } else if (name.compare("Clq1_2233r_LNP") == 0) {
        Clq1_2233r_LNP = value;
    } else if (name.compare("Clq1_2311r_LNP") == 0) {
        Clq1_2311r_LNP = value;
    } else if (name.compare("Clq1_2312r_LNP") == 0) {
        Clq1_2312r_LNP = value;
    } else if (name.compare("Clq1_2313r_LNP") == 0) {
        Clq1_2313r_LNP = value;
    } else if (name.compare("Clq1_2321r_LNP") == 0) {
        Clq1_2321r_LNP = value;
    } else if (name.compare("Clq1_2322r_LNP") == 0) {
        Clq1_2322r_LNP = value;
    } else if (name.compare("Clq1_2323r_LNP") == 0) {
        Clq1_2323r_LNP = value;
    } else if (name.compare("Clq1_2331r_LNP") == 0) {
        Clq1_2331r_LNP = value;
    } else if (name.compare("Clq1_2332r_LNP") == 0) {
        Clq1_2332r_LNP = value;
    } else if (name.compare("Clq1_2333r_LNP") == 0) {
        Clq1_2333r_LNP = value;
    } else if (name.compare("Clq1_3311r_LNP") == 0) {
        Clq1_3311r_LNP = value;
    } else if (name.compare("Clq1_3312r_LNP") == 0) {
        Clq1_3312r_LNP = value;
    } else if (name.compare("Clq1_3313r_LNP") == 0) {
        Clq1_3313r_LNP = value;
    } else if (name.compare("Clq1_3322r_LNP") == 0) {
        Clq1_3322r_LNP = value;
    } else if (name.compare("Clq1_3323r_LNP") == 0) {
        Clq1_3323r_LNP = value;
    } else if (name.compare("Clq1_3333r_LNP") == 0) {
        Clq1_3333r_LNP = value;
    } else if (name.compare("Clq1_1112i_LNP") == 0) {
        Clq1_1112i_LNP = value;
    } else if (name.compare("Clq1_1113i_LNP") == 0) {
        Clq1_1113i_LNP = value;
    } else if (name.compare("Clq1_1123i_LNP") == 0) {
        Clq1_1123i_LNP = value;
    } else if (name.compare("Clq1_1211i_LNP") == 0) {
        Clq1_1211i_LNP = value;
    } else if (name.compare("Clq1_1212i_LNP") == 0) {
        Clq1_1212i_LNP = value;
    } else if (name.compare("Clq1_1213i_LNP") == 0) {
        Clq1_1213i_LNP = value;
    } else if (name.compare("Clq1_1221i_LNP") == 0) {
        Clq1_1221i_LNP = value;
    } else if (name.compare("Clq1_1222i_LNP") == 0) {
        Clq1_1222i_LNP = value;
    } else if (name.compare("Clq1_1223i_LNP") == 0) {
        Clq1_1223i_LNP = value;
    } else if (name.compare("Clq1_1231i_LNP") == 0) {
        Clq1_1231i_LNP = value;
    } else if (name.compare("Clq1_1232i_LNP") == 0) {
        Clq1_1232i_LNP = value;
    } else if (name.compare("Clq1_1233i_LNP") == 0) {
        Clq1_1233i_LNP = value;
    } else if (name.compare("Clq1_1311i_LNP") == 0) {
        Clq1_1311i_LNP = value;
    } else if (name.compare("Clq1_1312i_LNP") == 0) {
        Clq1_1312i_LNP = value;
    } else if (name.compare("Clq1_1313i_LNP") == 0) {
        Clq1_1313i_LNP = value;
    } else if (name.compare("Clq1_1321i_LNP") == 0) {
        Clq1_1321i_LNP = value;
    } else if (name.compare("Clq1_1322i_LNP") == 0) {
        Clq1_1322i_LNP = value;
    } else if (name.compare("Clq1_1323i_LNP") == 0) {
        Clq1_1323i_LNP = value;
    } else if (name.compare("Clq1_1331i_LNP") == 0) {
        Clq1_1331i_LNP = value;
    } else if (name.compare("Clq1_1332i_LNP") == 0) {
        Clq1_1332i_LNP = value;
    } else if (name.compare("Clq1_1333i_LNP") == 0) {
        Clq1_1333i_LNP = value;
    } else if (name.compare("Clq1_2212i_LNP") == 0) {
        Clq1_2212i_LNP = value;
    } else if (name.compare("Clq1_2213i_LNP") == 0) {
        Clq1_2213i_LNP = value;
    } else if (name.compare("Clq1_2223i_LNP") == 0) {
        Clq1_2223i_LNP = value;
    } else if (name.compare("Clq1_2311i_LNP") == 0) {
        Clq1_2311i_LNP = value;
    } else if (name.compare("Clq1_2312i_LNP") == 0) {
        Clq1_2312i_LNP = value;
    } else if (name.compare("Clq1_2313i_LNP") == 0) {
        Clq1_2313i_LNP = value;
    } else if (name.compare("Clq1_2321i_LNP") == 0) {
        Clq1_2321i_LNP = value;
    } else if (name.compare("Clq1_2322i_LNP") == 0) {
        Clq1_2322i_LNP = value;
    } else if (name.compare("Clq1_2323i_LNP") == 0) {
        Clq1_2323i_LNP = value;
    } else if (name.compare("Clq1_2331i_LNP") == 0) {
        Clq1_2331i_LNP = value;
    } else if (name.compare("Clq1_2332i_LNP") == 0) {
        Clq1_2332i_LNP = value;
    } else if (name.compare("Clq1_2333i_LNP") == 0) {
        Clq1_2333i_LNP = value;
    } else if (name.compare("Clq1_3312i_LNP") == 0) {
        Clq1_3312i_LNP = value;
    } else if (name.compare("Clq1_3313i_LNP") == 0) {
        Clq1_3313i_LNP = value;
    } else if (name.compare("Clq1_3323i_LNP") == 0) {
        Clq1_3323i_LNP = value;
    } else if (name.compare("Clq3_1111r_LNP") == 0) {
        Clq3_1111r_LNP = value;
    } else if (name.compare("Clq3_1112r_LNP") == 0) {
        Clq3_1112r_LNP = value;
    } else if (name.compare("Clq3_1113r_LNP") == 0) {
        Clq3_1113r_LNP = value;
    } else if (name.compare("Clq3_1122r_LNP") == 0) {
        Clq3_1122r_LNP = value;
    } else if (name.compare("Clq3_1123r_LNP") == 0) {
        Clq3_1123r_LNP = value;
    } else if (name.compare("Clq3_1133r_LNP") == 0) {
        Clq3_1133r_LNP = value;
    } else if (name.compare("Clq3_1211r_LNP") == 0) {
        Clq3_1211r_LNP = value;
    } else if (name.compare("Clq3_1212r_LNP") == 0) {
        Clq3_1212r_LNP = value;
    } else if (name.compare("Clq3_1213r_LNP") == 0) {
        Clq3_1213r_LNP = value;
    } else if (name.compare("Clq3_1221r_LNP") == 0) {
        Clq3_1221r_LNP = value;
    } else if (name.compare("Clq3_1222r_LNP") == 0) {
        Clq3_1222r_LNP = value;
    } else if (name.compare("Clq3_1223r_LNP") == 0) {
        Clq3_1223r_LNP = value;
    } else if (name.compare("Clq3_1231r_LNP") == 0) {
        Clq3_1231r_LNP = value;
    } else if (name.compare("Clq3_1232r_LNP") == 0) {
        Clq3_1232r_LNP = value;
    } else if (name.compare("Clq3_1233r_LNP") == 0) {
        Clq3_1233r_LNP = value;
    } else if (name.compare("Clq3_1311r_LNP") == 0) {
        Clq3_1311r_LNP = value;
    } else if (name.compare("Clq3_1312r_LNP") == 0) {
        Clq3_1312r_LNP = value;
    } else if (name.compare("Clq3_1313r_LNP") == 0) {
        Clq3_1313r_LNP = value;
    } else if (name.compare("Clq3_1321r_LNP") == 0) {
        Clq3_1321r_LNP = value;
    } else if (name.compare("Clq3_1322r_LNP") == 0) {
        Clq3_1322r_LNP = value;
    } else if (name.compare("Clq3_1323r_LNP") == 0) {
        Clq3_1323r_LNP = value;
    } else if (name.compare("Clq3_1331r_LNP") == 0) {
        Clq3_1331r_LNP = value;
    } else if (name.compare("Clq3_1332r_LNP") == 0) {
        Clq3_1332r_LNP = value;
    } else if (name.compare("Clq3_1333r_LNP") == 0) {
        Clq3_1333r_LNP = value;
    } else if (name.compare("Clq3_2211r_LNP") == 0) {
        Clq3_2211r_LNP = value;
    } else if (name.compare("Clq3_2212r_LNP") == 0) {
        Clq3_2212r_LNP = value;
    } else if (name.compare("Clq3_2213r_LNP") == 0) {
        Clq3_2213r_LNP = value;
    } else if (name.compare("Clq3_2222r_LNP") == 0) {
        Clq3_2222r_LNP = value;
    } else if (name.compare("Clq3_2223r_LNP") == 0) {
        Clq3_2223r_LNP = value;
    } else if (name.compare("Clq3_2233r_LNP") == 0) {
        Clq3_2233r_LNP = value;
    } else if (name.compare("Clq3_2311r_LNP") == 0) {
        Clq3_2311r_LNP = value;
    } else if (name.compare("Clq3_2312r_LNP") == 0) {
        Clq3_2312r_LNP = value;
    } else if (name.compare("Clq3_2313r_LNP") == 0) {
        Clq3_2313r_LNP = value;
    } else if (name.compare("Clq3_2321r_LNP") == 0) {
        Clq3_2321r_LNP = value;
    } else if (name.compare("Clq3_2322r_LNP") == 0) {
        Clq3_2322r_LNP = value;
    } else if (name.compare("Clq3_2323r_LNP") == 0) {
        Clq3_2323r_LNP = value;
    } else if (name.compare("Clq3_2331r_LNP") == 0) {
        Clq3_2331r_LNP = value;
    } else if (name.compare("Clq3_2332r_LNP") == 0) {
        Clq3_2332r_LNP = value;
    } else if (name.compare("Clq3_2333r_LNP") == 0) {
        Clq3_2333r_LNP = value;
    } else if (name.compare("Clq3_3311r_LNP") == 0) {
        Clq3_3311r_LNP = value;
    } else if (name.compare("Clq3_3312r_LNP") == 0) {
        Clq3_3312r_LNP = value;
    } else if (name.compare("Clq3_3313r_LNP") == 0) {
        Clq3_3313r_LNP = value;
    } else if (name.compare("Clq3_3322r_LNP") == 0) {
        Clq3_3322r_LNP = value;
    } else if (name.compare("Clq3_3323r_LNP") == 0) {
        Clq3_3323r_LNP = value;
    } else if (name.compare("Clq3_3333r_LNP") == 0) {
        Clq3_3333r_LNP = value;
    } else if (name.compare("Clq3_1112i_LNP") == 0) {
        Clq3_1112i_LNP = value;
    } else if (name.compare("Clq3_1113i_LNP") == 0) {
        Clq3_1113i_LNP = value;
    } else if (name.compare("Clq3_1123i_LNP") == 0) {
        Clq3_1123i_LNP = value;
    } else if (name.compare("Clq3_1211i_LNP") == 0) {
        Clq3_1211i_LNP = value;
    } else if (name.compare("Clq3_1212i_LNP") == 0) {
        Clq3_1212i_LNP = value;
    } else if (name.compare("Clq3_1213i_LNP") == 0) {
        Clq3_1213i_LNP = value;
    } else if (name.compare("Clq3_1221i_LNP") == 0) {
        Clq3_1221i_LNP = value;
    } else if (name.compare("Clq3_1222i_LNP") == 0) {
        Clq3_1222i_LNP = value;
    } else if (name.compare("Clq3_1223i_LNP") == 0) {
        Clq3_1223i_LNP = value;
    } else if (name.compare("Clq3_1231i_LNP") == 0) {
        Clq3_1231i_LNP = value;
    } else if (name.compare("Clq3_1232i_LNP") == 0) {
        Clq3_1232i_LNP = value;
    } else if (name.compare("Clq3_1233i_LNP") == 0) {
        Clq3_1233i_LNP = value;
    } else if (name.compare("Clq3_1311i_LNP") == 0) {
        Clq3_1311i_LNP = value;
    } else if (name.compare("Clq3_1312i_LNP") == 0) {
        Clq3_1312i_LNP = value;
    } else if (name.compare("Clq3_1313i_LNP") == 0) {
        Clq3_1313i_LNP = value;
    } else if (name.compare("Clq3_1321i_LNP") == 0) {
        Clq3_1321i_LNP = value;
    } else if (name.compare("Clq3_1322i_LNP") == 0) {
        Clq3_1322i_LNP = value;
    } else if (name.compare("Clq3_1323i_LNP") == 0) {
        Clq3_1323i_LNP = value;
    } else if (name.compare("Clq3_1331i_LNP") == 0) {
        Clq3_1331i_LNP = value;
    } else if (name.compare("Clq3_1332i_LNP") == 0) {
        Clq3_1332i_LNP = value;
    } else if (name.compare("Clq3_1333i_LNP") == 0) {
        Clq3_1333i_LNP = value;
    } else if (name.compare("Clq3_2212i_LNP") == 0) {
        Clq3_2212i_LNP = value;
    } else if (name.compare("Clq3_2213i_LNP") == 0) {
        Clq3_2213i_LNP = value;
    } else if (name.compare("Clq3_2223i_LNP") == 0) {
        Clq3_2223i_LNP = value;
    } else if (name.compare("Clq3_2311i_LNP") == 0) {
        Clq3_2311i_LNP = value;
    } else if (name.compare("Clq3_2312i_LNP") == 0) {
        Clq3_2312i_LNP = value;
    } else if (name.compare("Clq3_2313i_LNP") == 0) {
        Clq3_2313i_LNP = value;
    } else if (name.compare("Clq3_2321i_LNP") == 0) {
        Clq3_2321i_LNP = value;
    } else if (name.compare("Clq3_2322i_LNP") == 0) {
        Clq3_2322i_LNP = value;
    } else if (name.compare("Clq3_2323i_LNP") == 0) {
        Clq3_2323i_LNP = value;
    } else if (name.compare("Clq3_2331i_LNP") == 0) {
        Clq3_2331i_LNP = value;
    } else if (name.compare("Clq3_2332i_LNP") == 0) {
        Clq3_2332i_LNP = value;
    } else if (name.compare("Clq3_2333i_LNP") == 0) {
        Clq3_2333i_LNP = value;
    } else if (name.compare("Clq3_3312i_LNP") == 0) {
        Clq3_3312i_LNP = value;
    } else if (name.compare("Clq3_3313i_LNP") == 0) {
        Clq3_3313i_LNP = value;
    } else if (name.compare("Clq3_3323i_LNP") == 0) {
        Clq3_3323i_LNP = value;
    } else if (name.compare("Cee_1111r_LNP") == 0) {
        Cee_1111r_LNP = value;
    } else if (name.compare("Cee_1112r_LNP") == 0) {
        Cee_1112r_LNP = value;
    } else if (name.compare("Cee_1113r_LNP") == 0) {
        Cee_1113r_LNP = value;
    } else if (name.compare("Cee_1122r_LNP") == 0) {
        Cee_1122r_LNP = value;
    } else if (name.compare("Cee_1123r_LNP") == 0) {
        Cee_1123r_LNP = value;
    } else if (name.compare("Cee_1133r_LNP") == 0) {
        Cee_1133r_LNP = value;
    } else if (name.compare("Cee_1212r_LNP") == 0) {
        Cee_1212r_LNP = value;
    } else if (name.compare("Cee_1213r_LNP") == 0) {
        Cee_1213r_LNP = value;
    } else if (name.compare("Cee_1222r_LNP") == 0) {
        Cee_1222r_LNP = value;
    } else if (name.compare("Cee_1223r_LNP") == 0) {
        Cee_1223r_LNP = value;
    } else if (name.compare("Cee_1232r_LNP") == 0) {
        Cee_1232r_LNP = value;
    } else if (name.compare("Cee_1233r_LNP") == 0) {
        Cee_1233r_LNP = value;
    } else if (name.compare("Cee_1313r_LNP") == 0) {
        Cee_1313r_LNP = value;
    } else if (name.compare("Cee_1323r_LNP") == 0) {
        Cee_1323r_LNP = value;
    } else if (name.compare("Cee_1333r_LNP") == 0) {
        Cee_1333r_LNP = value;
    } else if (name.compare("Cee_2222r_LNP") == 0) {
        Cee_2222r_LNP = value;
    } else if (name.compare("Cee_2223r_LNP") == 0) {
        Cee_2223r_LNP = value;
    } else if (name.compare("Cee_2233r_LNP") == 0) {
        Cee_2233r_LNP = value;
    } else if (name.compare("Cee_2323r_LNP") == 0) {
        Cee_2323r_LNP = value;
    } else if (name.compare("Cee_2333r_LNP") == 0) {
        Cee_2333r_LNP = value;
    } else if (name.compare("Cee_3333r_LNP") == 0) {
        Cee_3333r_LNP = value;
    } else if (name.compare("Cee_1112i_LNP") == 0) {
        Cee_1112i_LNP = value;
    } else if (name.compare("Cee_1113i_LNP") == 0) {
        Cee_1113i_LNP = value;
    } else if (name.compare("Cee_1123i_LNP") == 0) {
        Cee_1123i_LNP = value;
    } else if (name.compare("Cee_1212i_LNP") == 0) {
        Cee_1212i_LNP = value;
    } else if (name.compare("Cee_1213i_LNP") == 0) {
        Cee_1213i_LNP = value;
    } else if (name.compare("Cee_1222i_LNP") == 0) {
        Cee_1222i_LNP = value;
    } else if (name.compare("Cee_1223i_LNP") == 0) {
        Cee_1223i_LNP = value;
    } else if (name.compare("Cee_1232i_LNP") == 0) {
        Cee_1232i_LNP = value;
    } else if (name.compare("Cee_1233i_LNP") == 0) {
        Cee_1233i_LNP = value;
    } else if (name.compare("Cee_1313i_LNP") == 0) {
        Cee_1313i_LNP = value;
    } else if (name.compare("Cee_1323i_LNP") == 0) {
        Cee_1323i_LNP = value;
    } else if (name.compare("Cee_1333i_LNP") == 0) {
        Cee_1333i_LNP = value;
    } else if (name.compare("Cee_2223i_LNP") == 0) {
        Cee_2223i_LNP = value;
    } else if (name.compare("Cee_2323i_LNP") == 0) {
        Cee_2323i_LNP = value;
    } else if (name.compare("Cee_2333i_LNP") == 0) {
        Cee_2333i_LNP = value;
    } else if (name.compare("Ceu_1111r_LNP") == 0) {
        Ceu_1111r_LNP = value;
    } else if (name.compare("Ceu_1112r_LNP") == 0) {
        Ceu_1112r_LNP = value;
    } else if (name.compare("Ceu_1113r_LNP") == 0) {
        Ceu_1113r_LNP = value;
    } else if (name.compare("Ceu_1122r_LNP") == 0) {
        Ceu_1122r_LNP = value;
    } else if (name.compare("Ceu_1123r_LNP") == 0) {
        Ceu_1123r_LNP = value;
    } else if (name.compare("Ceu_1133r_LNP") == 0) {
        Ceu_1133r_LNP = value;
    } else if (name.compare("Ceu_1211r_LNP") == 0) {
        Ceu_1211r_LNP = value;
    } else if (name.compare("Ceu_1212r_LNP") == 0) {
        Ceu_1212r_LNP = value;
    } else if (name.compare("Ceu_1213r_LNP") == 0) {
        Ceu_1213r_LNP = value;
    } else if (name.compare("Ceu_1221r_LNP") == 0) {
        Ceu_1221r_LNP = value;
    } else if (name.compare("Ceu_1222r_LNP") == 0) {
        Ceu_1222r_LNP = value;
    } else if (name.compare("Ceu_1223r_LNP") == 0) {
        Ceu_1223r_LNP = value;
    } else if (name.compare("Ceu_1231r_LNP") == 0) {
        Ceu_1231r_LNP = value;
    } else if (name.compare("Ceu_1232r_LNP") == 0) {
        Ceu_1232r_LNP = value;
    } else if (name.compare("Ceu_1233r_LNP") == 0) {
        Ceu_1233r_LNP = value;
    } else if (name.compare("Ceu_1311r_LNP") == 0) {
        Ceu_1311r_LNP = value;
    } else if (name.compare("Ceu_1312r_LNP") == 0) {
        Ceu_1312r_LNP = value;
    } else if (name.compare("Ceu_1313r_LNP") == 0) {
        Ceu_1313r_LNP = value;
    } else if (name.compare("Ceu_1321r_LNP") == 0) {
        Ceu_1321r_LNP = value;
    } else if (name.compare("Ceu_1322r_LNP") == 0) {
        Ceu_1322r_LNP = value;
    } else if (name.compare("Ceu_1323r_LNP") == 0) {
        Ceu_1323r_LNP = value;
    } else if (name.compare("Ceu_1331r_LNP") == 0) {
        Ceu_1331r_LNP = value;
    } else if (name.compare("Ceu_1332r_LNP") == 0) {
        Ceu_1332r_LNP = value;
    } else if (name.compare("Ceu_1333r_LNP") == 0) {
        Ceu_1333r_LNP = value;
    } else if (name.compare("Ceu_2211r_LNP") == 0) {
        Ceu_2211r_LNP = value;
    } else if (name.compare("Ceu_2212r_LNP") == 0) {
        Ceu_2212r_LNP = value;
    } else if (name.compare("Ceu_2213r_LNP") == 0) {
        Ceu_2213r_LNP = value;
    } else if (name.compare("Ceu_2222r_LNP") == 0) {
        Ceu_2222r_LNP = value;
    } else if (name.compare("Ceu_2223r_LNP") == 0) {
        Ceu_2223r_LNP = value;
    } else if (name.compare("Ceu_2233r_LNP") == 0) {
        Ceu_2233r_LNP = value;
    } else if (name.compare("Ceu_2311r_LNP") == 0) {
        Ceu_2311r_LNP = value;
    } else if (name.compare("Ceu_2312r_LNP") == 0) {
        Ceu_2312r_LNP = value;
    } else if (name.compare("Ceu_2313r_LNP") == 0) {
        Ceu_2313r_LNP = value;
    } else if (name.compare("Ceu_2321r_LNP") == 0) {
        Ceu_2321r_LNP = value;
    } else if (name.compare("Ceu_2322r_LNP") == 0) {
        Ceu_2322r_LNP = value;
    } else if (name.compare("Ceu_2323r_LNP") == 0) {
        Ceu_2323r_LNP = value;
    } else if (name.compare("Ceu_2331r_LNP") == 0) {
        Ceu_2331r_LNP = value;
    } else if (name.compare("Ceu_2332r_LNP") == 0) {
        Ceu_2332r_LNP = value;
    } else if (name.compare("Ceu_2333r_LNP") == 0) {
        Ceu_2333r_LNP = value;
    } else if (name.compare("Ceu_3311r_LNP") == 0) {
        Ceu_3311r_LNP = value;
    } else if (name.compare("Ceu_3312r_LNP") == 0) {
        Ceu_3312r_LNP = value;
    } else if (name.compare("Ceu_3313r_LNP") == 0) {
        Ceu_3313r_LNP = value;
    } else if (name.compare("Ceu_3322r_LNP") == 0) {
        Ceu_3322r_LNP = value;
    } else if (name.compare("Ceu_3323r_LNP") == 0) {
        Ceu_3323r_LNP = value;
    } else if (name.compare("Ceu_3333r_LNP") == 0) {
        Ceu_3333r_LNP = value;
    } else if (name.compare("Ceu_1112i_LNP") == 0) {
        Ceu_1112i_LNP = value;
    } else if (name.compare("Ceu_1113i_LNP") == 0) {
        Ceu_1113i_LNP = value;
    } else if (name.compare("Ceu_1123i_LNP") == 0) {
        Ceu_1123i_LNP = value;
    } else if (name.compare("Ceu_1211i_LNP") == 0) {
        Ceu_1211i_LNP = value;
    } else if (name.compare("Ceu_1212i_LNP") == 0) {
        Ceu_1212i_LNP = value;
    } else if (name.compare("Ceu_1213i_LNP") == 0) {
        Ceu_1213i_LNP = value;
    } else if (name.compare("Ceu_1221i_LNP") == 0) {
        Ceu_1221i_LNP = value;
    } else if (name.compare("Ceu_1222i_LNP") == 0) {
        Ceu_1222i_LNP = value;
    } else if (name.compare("Ceu_1223i_LNP") == 0) {
        Ceu_1223i_LNP = value;
    } else if (name.compare("Ceu_1231i_LNP") == 0) {
        Ceu_1231i_LNP = value;
    } else if (name.compare("Ceu_1232i_LNP") == 0) {
        Ceu_1232i_LNP = value;
    } else if (name.compare("Ceu_1233i_LNP") == 0) {
        Ceu_1233i_LNP = value;
    } else if (name.compare("Ceu_1311i_LNP") == 0) {
        Ceu_1311i_LNP = value;
    } else if (name.compare("Ceu_1312i_LNP") == 0) {
        Ceu_1312i_LNP = value;
    } else if (name.compare("Ceu_1313i_LNP") == 0) {
        Ceu_1313i_LNP = value;
    } else if (name.compare("Ceu_1321i_LNP") == 0) {
        Ceu_1321i_LNP = value;
    } else if (name.compare("Ceu_1322i_LNP") == 0) {
        Ceu_1322i_LNP = value;
    } else if (name.compare("Ceu_1323i_LNP") == 0) {
        Ceu_1323i_LNP = value;
    } else if (name.compare("Ceu_1331i_LNP") == 0) {
        Ceu_1331i_LNP = value;
    } else if (name.compare("Ceu_1332i_LNP") == 0) {
        Ceu_1332i_LNP = value;
    } else if (name.compare("Ceu_1333i_LNP") == 0) {
        Ceu_1333i_LNP = value;
    } else if (name.compare("Ceu_2212i_LNP") == 0) {
        Ceu_2212i_LNP = value;
    } else if (name.compare("Ceu_2213i_LNP") == 0) {
        Ceu_2213i_LNP = value;
    } else if (name.compare("Ceu_2223i_LNP") == 0) {
        Ceu_2223i_LNP = value;
    } else if (name.compare("Ceu_2311i_LNP") == 0) {
        Ceu_2311i_LNP = value;
    } else if (name.compare("Ceu_2312i_LNP") == 0) {
        Ceu_2312i_LNP = value;
    } else if (name.compare("Ceu_2313i_LNP") == 0) {
        Ceu_2313i_LNP = value;
    } else if (name.compare("Ceu_2321i_LNP") == 0) {
        Ceu_2321i_LNP = value;
    } else if (name.compare("Ceu_2322i_LNP") == 0) {
        Ceu_2322i_LNP = value;
    } else if (name.compare("Ceu_2323i_LNP") == 0) {
        Ceu_2323i_LNP = value;
    } else if (name.compare("Ceu_2331i_LNP") == 0) {
        Ceu_2331i_LNP = value;
    } else if (name.compare("Ceu_2332i_LNP") == 0) {
        Ceu_2332i_LNP = value;
    } else if (name.compare("Ceu_2333i_LNP") == 0) {
        Ceu_2333i_LNP = value;
    } else if (name.compare("Ceu_3312i_LNP") == 0) {
        Ceu_3312i_LNP = value;
    } else if (name.compare("Ceu_3313i_LNP") == 0) {
        Ceu_3313i_LNP = value;
    } else if (name.compare("Ceu_3323i_LNP") == 0) {
        Ceu_3323i_LNP = value;
    } else if (name.compare("Ced_1111r_LNP") == 0) {
        Ced_1111r_LNP = value;
    } else if (name.compare("Ced_1112r_LNP") == 0) {
        Ced_1112r_LNP = value;
    } else if (name.compare("Ced_1113r_LNP") == 0) {
        Ced_1113r_LNP = value;
    } else if (name.compare("Ced_1122r_LNP") == 0) {
        Ced_1122r_LNP = value;
    } else if (name.compare("Ced_1123r_LNP") == 0) {
        Ced_1123r_LNP = value;
    } else if (name.compare("Ced_1133r_LNP") == 0) {
        Ced_1133r_LNP = value;
    } else if (name.compare("Ced_1211r_LNP") == 0) {
        Ced_1211r_LNP = value;
    } else if (name.compare("Ced_1212r_LNP") == 0) {
        Ced_1212r_LNP = value;
    } else if (name.compare("Ced_1213r_LNP") == 0) {
        Ced_1213r_LNP = value;
    } else if (name.compare("Ced_1221r_LNP") == 0) {
        Ced_1221r_LNP = value;
    } else if (name.compare("Ced_1222r_LNP") == 0) {
        Ced_1222r_LNP = value;
    } else if (name.compare("Ced_1223r_LNP") == 0) {
        Ced_1223r_LNP = value;
    } else if (name.compare("Ced_1231r_LNP") == 0) {
        Ced_1231r_LNP = value;
    } else if (name.compare("Ced_1232r_LNP") == 0) {
        Ced_1232r_LNP = value;
    } else if (name.compare("Ced_1233r_LNP") == 0) {
        Ced_1233r_LNP = value;
    } else if (name.compare("Ced_1311r_LNP") == 0) {
        Ced_1311r_LNP = value;
    } else if (name.compare("Ced_1312r_LNP") == 0) {
        Ced_1312r_LNP = value;
    } else if (name.compare("Ced_1313r_LNP") == 0) {
        Ced_1313r_LNP = value;
    } else if (name.compare("Ced_1321r_LNP") == 0) {
        Ced_1321r_LNP = value;
    } else if (name.compare("Ced_1322r_LNP") == 0) {
        Ced_1322r_LNP = value;
    } else if (name.compare("Ced_1323r_LNP") == 0) {
        Ced_1323r_LNP = value;
    } else if (name.compare("Ced_1331r_LNP") == 0) {
        Ced_1331r_LNP = value;
    } else if (name.compare("Ced_1332r_LNP") == 0) {
        Ced_1332r_LNP = value;
    } else if (name.compare("Ced_1333r_LNP") == 0) {
        Ced_1333r_LNP = value;
    } else if (name.compare("Ced_2211r_LNP") == 0) {
        Ced_2211r_LNP = value;
    } else if (name.compare("Ced_2212r_LNP") == 0) {
        Ced_2212r_LNP = value;
    } else if (name.compare("Ced_2213r_LNP") == 0) {
        Ced_2213r_LNP = value;
    } else if (name.compare("Ced_2222r_LNP") == 0) {
        Ced_2222r_LNP = value;
    } else if (name.compare("Ced_2223r_LNP") == 0) {
        Ced_2223r_LNP = value;
    } else if (name.compare("Ced_2233r_LNP") == 0) {
        Ced_2233r_LNP = value;
    } else if (name.compare("Ced_2311r_LNP") == 0) {
        Ced_2311r_LNP = value;
    } else if (name.compare("Ced_2312r_LNP") == 0) {
        Ced_2312r_LNP = value;
    } else if (name.compare("Ced_2313r_LNP") == 0) {
        Ced_2313r_LNP = value;
    } else if (name.compare("Ced_2321r_LNP") == 0) {
        Ced_2321r_LNP = value;
    } else if (name.compare("Ced_2322r_LNP") == 0) {
        Ced_2322r_LNP = value;
    } else if (name.compare("Ced_2323r_LNP") == 0) {
        Ced_2323r_LNP = value;
    } else if (name.compare("Ced_2331r_LNP") == 0) {
        Ced_2331r_LNP = value;
    } else if (name.compare("Ced_2332r_LNP") == 0) {
        Ced_2332r_LNP = value;
    } else if (name.compare("Ced_2333r_LNP") == 0) {
        Ced_2333r_LNP = value;
    } else if (name.compare("Ced_3311r_LNP") == 0) {
        Ced_3311r_LNP = value;
    } else if (name.compare("Ced_3312r_LNP") == 0) {
        Ced_3312r_LNP = value;
    } else if (name.compare("Ced_3313r_LNP") == 0) {
        Ced_3313r_LNP = value;
    } else if (name.compare("Ced_3322r_LNP") == 0) {
        Ced_3322r_LNP = value;
    } else if (name.compare("Ced_3323r_LNP") == 0) {
        Ced_3323r_LNP = value;
    } else if (name.compare("Ced_3333r_LNP") == 0) {
        Ced_3333r_LNP = value;
    } else if (name.compare("Ced_1112i_LNP") == 0) {
        Ced_1112i_LNP = value;
    } else if (name.compare("Ced_1113i_LNP") == 0) {
        Ced_1113i_LNP = value;
    } else if (name.compare("Ced_1123i_LNP") == 0) {
        Ced_1123i_LNP = value;
    } else if (name.compare("Ced_1211i_LNP") == 0) {
        Ced_1211i_LNP = value;
    } else if (name.compare("Ced_1212i_LNP") == 0) {
        Ced_1212i_LNP = value;
    } else if (name.compare("Ced_1213i_LNP") == 0) {
        Ced_1213i_LNP = value;
    } else if (name.compare("Ced_1221i_LNP") == 0) {
        Ced_1221i_LNP = value;
    } else if (name.compare("Ced_1222i_LNP") == 0) {
        Ced_1222i_LNP = value;
    } else if (name.compare("Ced_1223i_LNP") == 0) {
        Ced_1223i_LNP = value;
    } else if (name.compare("Ced_1231i_LNP") == 0) {
        Ced_1231i_LNP = value;
    } else if (name.compare("Ced_1232i_LNP") == 0) {
        Ced_1232i_LNP = value;
    } else if (name.compare("Ced_1233i_LNP") == 0) {
        Ced_1233i_LNP = value;
    } else if (name.compare("Ced_1311i_LNP") == 0) {
        Ced_1311i_LNP = value;
    } else if (name.compare("Ced_1312i_LNP") == 0) {
        Ced_1312i_LNP = value;
    } else if (name.compare("Ced_1313i_LNP") == 0) {
        Ced_1313i_LNP = value;
    } else if (name.compare("Ced_1321i_LNP") == 0) {
        Ced_1321i_LNP = value;
    } else if (name.compare("Ced_1322i_LNP") == 0) {
        Ced_1322i_LNP = value;
    } else if (name.compare("Ced_1323i_LNP") == 0) {
        Ced_1323i_LNP = value;
    } else if (name.compare("Ced_1331i_LNP") == 0) {
        Ced_1331i_LNP = value;
    } else if (name.compare("Ced_1332i_LNP") == 0) {
        Ced_1332i_LNP = value;
    } else if (name.compare("Ced_1333i_LNP") == 0) {
        Ced_1333i_LNP = value;
    } else if (name.compare("Ced_2212i_LNP") == 0) {
        Ced_2212i_LNP = value;
    } else if (name.compare("Ced_2213i_LNP") == 0) {
        Ced_2213i_LNP = value;
    } else if (name.compare("Ced_2223i_LNP") == 0) {
        Ced_2223i_LNP = value;
    } else if (name.compare("Ced_2311i_LNP") == 0) {
        Ced_2311i_LNP = value;
    } else if (name.compare("Ced_2312i_LNP") == 0) {
        Ced_2312i_LNP = value;
    } else if (name.compare("Ced_2313i_LNP") == 0) {
        Ced_2313i_LNP = value;
    } else if (name.compare("Ced_2321i_LNP") == 0) {
        Ced_2321i_LNP = value;
    } else if (name.compare("Ced_2322i_LNP") == 0) {
        Ced_2322i_LNP = value;
    } else if (name.compare("Ced_2323i_LNP") == 0) {
        Ced_2323i_LNP = value;
    } else if (name.compare("Ced_2331i_LNP") == 0) {
        Ced_2331i_LNP = value;
    } else if (name.compare("Ced_2332i_LNP") == 0) {
        Ced_2332i_LNP = value;
    } else if (name.compare("Ced_2333i_LNP") == 0) {
        Ced_2333i_LNP = value;
    } else if (name.compare("Ced_3312i_LNP") == 0) {
        Ced_3312i_LNP = value;
    } else if (name.compare("Ced_3313i_LNP") == 0) {
        Ced_3313i_LNP = value;
    } else if (name.compare("Ced_3323i_LNP") == 0) {
        Ced_3323i_LNP = value;
    } else if (name.compare("Cle_1111r_LNP") == 0) {
        Cle_1111r_LNP = value;
    } else if (name.compare("Cle_1112r_LNP") == 0) {
        Cle_1112r_LNP = value;
    } else if (name.compare("Cle_1113r_LNP") == 0) {
        Cle_1113r_LNP = value;
    } else if (name.compare("Cle_1122r_LNP") == 0) {
        Cle_1122r_LNP = value;
    } else if (name.compare("Cle_1123r_LNP") == 0) {
        Cle_1123r_LNP = value;
    } else if (name.compare("Cle_1133r_LNP") == 0) {
        Cle_1133r_LNP = value;
    } else if (name.compare("Cle_1211r_LNP") == 0) {
        Cle_1211r_LNP = value;
    } else if (name.compare("Cle_1212r_LNP") == 0) {
        Cle_1212r_LNP = value;
    } else if (name.compare("Cle_1213r_LNP") == 0) {
        Cle_1213r_LNP = value;
    } else if (name.compare("Cle_1221r_LNP") == 0) {
        Cle_1221r_LNP = value;
    } else if (name.compare("Cle_1222r_LNP") == 0) {
        Cle_1222r_LNP = value;
    } else if (name.compare("Cle_1223r_LNP") == 0) {
        Cle_1223r_LNP = value;
    } else if (name.compare("Cle_1231r_LNP") == 0) {
        Cle_1231r_LNP = value;
    } else if (name.compare("Cle_1232r_LNP") == 0) {
        Cle_1232r_LNP = value;
    } else if (name.compare("Cle_1233r_LNP") == 0) {
        Cle_1233r_LNP = value;
    } else if (name.compare("Cle_1311r_LNP") == 0) {
        Cle_1311r_LNP = value;
    } else if (name.compare("Cle_1312r_LNP") == 0) {
        Cle_1312r_LNP = value;
    } else if (name.compare("Cle_1313r_LNP") == 0) {
        Cle_1313r_LNP = value;
    } else if (name.compare("Cle_1321r_LNP") == 0) {
        Cle_1321r_LNP = value;
    } else if (name.compare("Cle_1322r_LNP") == 0) {
        Cle_1322r_LNP = value;
    } else if (name.compare("Cle_1323r_LNP") == 0) {
        Cle_1323r_LNP = value;
    } else if (name.compare("Cle_1331r_LNP") == 0) {
        Cle_1331r_LNP = value;
    } else if (name.compare("Cle_1332r_LNP") == 0) {
        Cle_1332r_LNP = value;
    } else if (name.compare("Cle_1333r_LNP") == 0) {
        Cle_1333r_LNP = value;
    } else if (name.compare("Cle_2211r_LNP") == 0) {
        Cle_2211r_LNP = value;
    } else if (name.compare("Cle_2212r_LNP") == 0) {
        Cle_2212r_LNP = value;
    } else if (name.compare("Cle_2213r_LNP") == 0) {
        Cle_2213r_LNP = value;
    } else if (name.compare("Cle_2222r_LNP") == 0) {
        Cle_2222r_LNP = value;
    } else if (name.compare("Cle_2223r_LNP") == 0) {
        Cle_2223r_LNP = value;
    } else if (name.compare("Cle_2233r_LNP") == 0) {
        Cle_2233r_LNP = value;
    } else if (name.compare("Cle_2311r_LNP") == 0) {
        Cle_2311r_LNP = value;
    } else if (name.compare("Cle_2312r_LNP") == 0) {
        Cle_2312r_LNP = value;
    } else if (name.compare("Cle_2313r_LNP") == 0) {
        Cle_2313r_LNP = value;
    } else if (name.compare("Cle_2321r_LNP") == 0) {
        Cle_2321r_LNP = value;
    } else if (name.compare("Cle_2322r_LNP") == 0) {
        Cle_2322r_LNP = value;
    } else if (name.compare("Cle_2323r_LNP") == 0) {
        Cle_2323r_LNP = value;
    } else if (name.compare("Cle_2331r_LNP") == 0) {
        Cle_2331r_LNP = value;
    } else if (name.compare("Cle_2332r_LNP") == 0) {
        Cle_2332r_LNP = value;
    } else if (name.compare("Cle_2333r_LNP") == 0) {
        Cle_2333r_LNP = value;
    } else if (name.compare("Cle_3311r_LNP") == 0) {
        Cle_3311r_LNP = value;
    } else if (name.compare("Cle_3312r_LNP") == 0) {
        Cle_3312r_LNP = value;
    } else if (name.compare("Cle_3313r_LNP") == 0) {
        Cle_3313r_LNP = value;
    } else if (name.compare("Cle_3322r_LNP") == 0) {
        Cle_3322r_LNP = value;
    } else if (name.compare("Cle_3323r_LNP") == 0) {
        Cle_3323r_LNP = value;
    } else if (name.compare("Cle_3333r_LNP") == 0) {
        Cle_3333r_LNP = value;
    } else if (name.compare("Cle_1112i_LNP") == 0) {
        Cle_1112i_LNP = value;
    } else if (name.compare("Cle_1113i_LNP") == 0) {
        Cle_1113i_LNP = value;
    } else if (name.compare("Cle_1123i_LNP") == 0) {
        Cle_1123i_LNP = value;
    } else if (name.compare("Cle_1211i_LNP") == 0) {
        Cle_1211i_LNP = value;
    } else if (name.compare("Cle_1212i_LNP") == 0) {
        Cle_1212i_LNP = value;
    } else if (name.compare("Cle_1213i_LNP") == 0) {
        Cle_1213i_LNP = value;
    } else if (name.compare("Cle_1221i_LNP") == 0) {
        Cle_1221i_LNP = value;
    } else if (name.compare("Cle_1222i_LNP") == 0) {
        Cle_1222i_LNP = value;
    } else if (name.compare("Cle_1223i_LNP") == 0) {
        Cle_1223i_LNP = value;
    } else if (name.compare("Cle_1231i_LNP") == 0) {
        Cle_1231i_LNP = value;
    } else if (name.compare("Cle_1232i_LNP") == 0) {
        Cle_1232i_LNP = value;
    } else if (name.compare("Cle_1233i_LNP") == 0) {
        Cle_1233i_LNP = value;
    } else if (name.compare("Cle_1311i_LNP") == 0) {
        Cle_1311i_LNP = value;
    } else if (name.compare("Cle_1312i_LNP") == 0) {
        Cle_1312i_LNP = value;
    } else if (name.compare("Cle_1313i_LNP") == 0) {
        Cle_1313i_LNP = value;
    } else if (name.compare("Cle_1321i_LNP") == 0) {
        Cle_1321i_LNP = value;
    } else if (name.compare("Cle_1322i_LNP") == 0) {
        Cle_1322i_LNP = value;
    } else if (name.compare("Cle_1323i_LNP") == 0) {
        Cle_1323i_LNP = value;
    } else if (name.compare("Cle_1331i_LNP") == 0) {
        Cle_1331i_LNP = value;
    } else if (name.compare("Cle_1332i_LNP") == 0) {
        Cle_1332i_LNP = value;
    } else if (name.compare("Cle_1333i_LNP") == 0) {
        Cle_1333i_LNP = value;
    } else if (name.compare("Cle_2212i_LNP") == 0) {
        Cle_2212i_LNP = value;
    } else if (name.compare("Cle_2213i_LNP") == 0) {
        Cle_2213i_LNP = value;
    } else if (name.compare("Cle_2223i_LNP") == 0) {
        Cle_2223i_LNP = value;
    } else if (name.compare("Cle_2311i_LNP") == 0) {
        Cle_2311i_LNP = value;
    } else if (name.compare("Cle_2312i_LNP") == 0) {
        Cle_2312i_LNP = value;
    } else if (name.compare("Cle_2313i_LNP") == 0) {
        Cle_2313i_LNP = value;
    } else if (name.compare("Cle_2321i_LNP") == 0) {
        Cle_2321i_LNP = value;
    } else if (name.compare("Cle_2322i_LNP") == 0) {
        Cle_2322i_LNP = value;
    } else if (name.compare("Cle_2323i_LNP") == 0) {
        Cle_2323i_LNP = value;
    } else if (name.compare("Cle_2331i_LNP") == 0) {
        Cle_2331i_LNP = value;
    } else if (name.compare("Cle_2332i_LNP") == 0) {
        Cle_2332i_LNP = value;
    } else if (name.compare("Cle_2333i_LNP") == 0) {
        Cle_2333i_LNP = value;
    } else if (name.compare("Cle_3312i_LNP") == 0) {
        Cle_3312i_LNP = value;
    } else if (name.compare("Cle_3313i_LNP") == 0) {
        Cle_3313i_LNP = value;
    } else if (name.compare("Cle_3323i_LNP") == 0) {
        Cle_3323i_LNP = value;
    } else if (name.compare("Clu_1111r_LNP") == 0) {
        Clu_1111r_LNP = value;
    } else if (name.compare("Clu_1112r_LNP") == 0) {
        Clu_1112r_LNP = value;
    } else if (name.compare("Clu_1113r_LNP") == 0) {
        Clu_1113r_LNP = value;
    } else if (name.compare("Clu_1122r_LNP") == 0) {
        Clu_1122r_LNP = value;
    } else if (name.compare("Clu_1123r_LNP") == 0) {
        Clu_1123r_LNP = value;
    } else if (name.compare("Clu_1133r_LNP") == 0) {
        Clu_1133r_LNP = value;
    } else if (name.compare("Clu_1211r_LNP") == 0) {
        Clu_1211r_LNP = value;
    } else if (name.compare("Clu_1212r_LNP") == 0) {
        Clu_1212r_LNP = value;
    } else if (name.compare("Clu_1213r_LNP") == 0) {
        Clu_1213r_LNP = value;
    } else if (name.compare("Clu_1221r_LNP") == 0) {
        Clu_1221r_LNP = value;
    } else if (name.compare("Clu_1222r_LNP") == 0) {
        Clu_1222r_LNP = value;
    } else if (name.compare("Clu_1223r_LNP") == 0) {
        Clu_1223r_LNP = value;
    } else if (name.compare("Clu_1231r_LNP") == 0) {
        Clu_1231r_LNP = value;
    } else if (name.compare("Clu_1232r_LNP") == 0) {
        Clu_1232r_LNP = value;
    } else if (name.compare("Clu_1233r_LNP") == 0) {
        Clu_1233r_LNP = value;
    } else if (name.compare("Clu_1311r_LNP") == 0) {
        Clu_1311r_LNP = value;
    } else if (name.compare("Clu_1312r_LNP") == 0) {
        Clu_1312r_LNP = value;
    } else if (name.compare("Clu_1313r_LNP") == 0) {
        Clu_1313r_LNP = value;
    } else if (name.compare("Clu_1321r_LNP") == 0) {
        Clu_1321r_LNP = value;
    } else if (name.compare("Clu_1322r_LNP") == 0) {
        Clu_1322r_LNP = value;
    } else if (name.compare("Clu_1323r_LNP") == 0) {
        Clu_1323r_LNP = value;
    } else if (name.compare("Clu_1331r_LNP") == 0) {
        Clu_1331r_LNP = value;
    } else if (name.compare("Clu_1332r_LNP") == 0) {
        Clu_1332r_LNP = value;
    } else if (name.compare("Clu_1333r_LNP") == 0) {
        Clu_1333r_LNP = value;
    } else if (name.compare("Clu_2211r_LNP") == 0) {
        Clu_2211r_LNP = value;
    } else if (name.compare("Clu_2212r_LNP") == 0) {
        Clu_2212r_LNP = value;
    } else if (name.compare("Clu_2213r_LNP") == 0) {
        Clu_2213r_LNP = value;
    } else if (name.compare("Clu_2222r_LNP") == 0) {
        Clu_2222r_LNP = value;
    } else if (name.compare("Clu_2223r_LNP") == 0) {
        Clu_2223r_LNP = value;
    } else if (name.compare("Clu_2233r_LNP") == 0) {
        Clu_2233r_LNP = value;
    } else if (name.compare("Clu_2311r_LNP") == 0) {
        Clu_2311r_LNP = value;
    } else if (name.compare("Clu_2312r_LNP") == 0) {
        Clu_2312r_LNP = value;
    } else if (name.compare("Clu_2313r_LNP") == 0) {
        Clu_2313r_LNP = value;
    } else if (name.compare("Clu_2321r_LNP") == 0) {
        Clu_2321r_LNP = value;
    } else if (name.compare("Clu_2322r_LNP") == 0) {
        Clu_2322r_LNP = value;
    } else if (name.compare("Clu_2323r_LNP") == 0) {
        Clu_2323r_LNP = value;
    } else if (name.compare("Clu_2331r_LNP") == 0) {
        Clu_2331r_LNP = value;
    } else if (name.compare("Clu_2332r_LNP") == 0) {
        Clu_2332r_LNP = value;
    } else if (name.compare("Clu_2333r_LNP") == 0) {
        Clu_2333r_LNP = value;
    } else if (name.compare("Clu_3311r_LNP") == 0) {
        Clu_3311r_LNP = value;
    } else if (name.compare("Clu_3312r_LNP") == 0) {
        Clu_3312r_LNP = value;
    } else if (name.compare("Clu_3313r_LNP") == 0) {
        Clu_3313r_LNP = value;
    } else if (name.compare("Clu_3322r_LNP") == 0) {
        Clu_3322r_LNP = value;
    } else if (name.compare("Clu_3323r_LNP") == 0) {
        Clu_3323r_LNP = value;
    } else if (name.compare("Clu_3333r_LNP") == 0) {
        Clu_3333r_LNP = value;
    } else if (name.compare("Clu_1112i_LNP") == 0) {
        Clu_1112i_LNP = value;
    } else if (name.compare("Clu_1113i_LNP") == 0) {
        Clu_1113i_LNP = value;
    } else if (name.compare("Clu_1123i_LNP") == 0) {
        Clu_1123i_LNP = value;
    } else if (name.compare("Clu_1211i_LNP") == 0) {
        Clu_1211i_LNP = value;
    } else if (name.compare("Clu_1212i_LNP") == 0) {
        Clu_1212i_LNP = value;
    } else if (name.compare("Clu_1213i_LNP") == 0) {
        Clu_1213i_LNP = value;
    } else if (name.compare("Clu_1221i_LNP") == 0) {
        Clu_1221i_LNP = value;
    } else if (name.compare("Clu_1222i_LNP") == 0) {
        Clu_1222i_LNP = value;
    } else if (name.compare("Clu_1223i_LNP") == 0) {
        Clu_1223i_LNP = value;
    } else if (name.compare("Clu_1231i_LNP") == 0) {
        Clu_1231i_LNP = value;
    } else if (name.compare("Clu_1232i_LNP") == 0) {
        Clu_1232i_LNP = value;
    } else if (name.compare("Clu_1233i_LNP") == 0) {
        Clu_1233i_LNP = value;
    } else if (name.compare("Clu_1311i_LNP") == 0) {
        Clu_1311i_LNP = value;
    } else if (name.compare("Clu_1312i_LNP") == 0) {
        Clu_1312i_LNP = value;
    } else if (name.compare("Clu_1313i_LNP") == 0) {
        Clu_1313i_LNP = value;
    } else if (name.compare("Clu_1321i_LNP") == 0) {
        Clu_1321i_LNP = value;
    } else if (name.compare("Clu_1322i_LNP") == 0) {
        Clu_1322i_LNP = value;
    } else if (name.compare("Clu_1323i_LNP") == 0) {
        Clu_1323i_LNP = value;
    } else if (name.compare("Clu_1331i_LNP") == 0) {
        Clu_1331i_LNP = value;
    } else if (name.compare("Clu_1332i_LNP") == 0) {
        Clu_1332i_LNP = value;
    } else if (name.compare("Clu_1333i_LNP") == 0) {
        Clu_1333i_LNP = value;
    } else if (name.compare("Clu_2212i_LNP") == 0) {
        Clu_2212i_LNP = value;
    } else if (name.compare("Clu_2213i_LNP") == 0) {
        Clu_2213i_LNP = value;
    } else if (name.compare("Clu_2223i_LNP") == 0) {
        Clu_2223i_LNP = value;
    } else if (name.compare("Clu_2311i_LNP") == 0) {
        Clu_2311i_LNP = value;
    } else if (name.compare("Clu_2312i_LNP") == 0) {
        Clu_2312i_LNP = value;
    } else if (name.compare("Clu_2313i_LNP") == 0) {
        Clu_2313i_LNP = value;
    } else if (name.compare("Clu_2321i_LNP") == 0) {
        Clu_2321i_LNP = value;
    } else if (name.compare("Clu_2322i_LNP") == 0) {
        Clu_2322i_LNP = value;
    } else if (name.compare("Clu_2323i_LNP") == 0) {
        Clu_2323i_LNP = value;
    } else if (name.compare("Clu_2331i_LNP") == 0) {
        Clu_2331i_LNP = value;
    } else if (name.compare("Clu_2332i_LNP") == 0) {
        Clu_2332i_LNP = value;
    } else if (name.compare("Clu_2333i_LNP") == 0) {
        Clu_2333i_LNP = value;
    } else if (name.compare("Clu_3312i_LNP") == 0) {
        Clu_3312i_LNP = value;
    } else if (name.compare("Clu_3313i_LNP") == 0) {
        Clu_3313i_LNP = value;
    } else if (name.compare("Clu_3323i_LNP") == 0) {
        Clu_3323i_LNP = value;
    } else if (name.compare("Cld_1111r_LNP") == 0) {
        Cld_1111r_LNP = value;
    } else if (name.compare("Cld_1112r_LNP") == 0) {
        Cld_1112r_LNP = value;
    } else if (name.compare("Cld_1113r_LNP") == 0) {
        Cld_1113r_LNP = value;
    } else if (name.compare("Cld_1122r_LNP") == 0) {
        Cld_1122r_LNP = value;
    } else if (name.compare("Cld_1123r_LNP") == 0) {
        Cld_1123r_LNP = value;
    } else if (name.compare("Cld_1133r_LNP") == 0) {
        Cld_1133r_LNP = value;
    } else if (name.compare("Cld_1211r_LNP") == 0) {
        Cld_1211r_LNP = value;
    } else if (name.compare("Cld_1212r_LNP") == 0) {
        Cld_1212r_LNP = value;
    } else if (name.compare("Cld_1213r_LNP") == 0) {
        Cld_1213r_LNP = value;
    } else if (name.compare("Cld_1221r_LNP") == 0) {
        Cld_1221r_LNP = value;
    } else if (name.compare("Cld_1222r_LNP") == 0) {
        Cld_1222r_LNP = value;
    } else if (name.compare("Cld_1223r_LNP") == 0) {
        Cld_1223r_LNP = value;
    } else if (name.compare("Cld_1231r_LNP") == 0) {
        Cld_1231r_LNP = value;
    } else if (name.compare("Cld_1232r_LNP") == 0) {
        Cld_1232r_LNP = value;
    } else if (name.compare("Cld_1233r_LNP") == 0) {
        Cld_1233r_LNP = value;
    } else if (name.compare("Cld_1311r_LNP") == 0) {
        Cld_1311r_LNP = value;
    } else if (name.compare("Cld_1312r_LNP") == 0) {
        Cld_1312r_LNP = value;
    } else if (name.compare("Cld_1313r_LNP") == 0) {
        Cld_1313r_LNP = value;
    } else if (name.compare("Cld_1321r_LNP") == 0) {
        Cld_1321r_LNP = value;
    } else if (name.compare("Cld_1322r_LNP") == 0) {
        Cld_1322r_LNP = value;
    } else if (name.compare("Cld_1323r_LNP") == 0) {
        Cld_1323r_LNP = value;
    } else if (name.compare("Cld_1331r_LNP") == 0) {
        Cld_1331r_LNP = value;
    } else if (name.compare("Cld_1332r_LNP") == 0) {
        Cld_1332r_LNP = value;
    } else if (name.compare("Cld_1333r_LNP") == 0) {
        Cld_1333r_LNP = value;
    } else if (name.compare("Cld_2211r_LNP") == 0) {
        Cld_2211r_LNP = value;
    } else if (name.compare("Cld_2212r_LNP") == 0) {
        Cld_2212r_LNP = value;
    } else if (name.compare("Cld_2213r_LNP") == 0) {
        Cld_2213r_LNP = value;
    } else if (name.compare("Cld_2222r_LNP") == 0) {
        Cld_2222r_LNP = value;
    } else if (name.compare("Cld_2223r_LNP") == 0) {
        Cld_2223r_LNP = value;
    } else if (name.compare("Cld_2233r_LNP") == 0) {
        Cld_2233r_LNP = value;
    } else if (name.compare("Cld_2311r_LNP") == 0) {
        Cld_2311r_LNP = value;
    } else if (name.compare("Cld_2312r_LNP") == 0) {
        Cld_2312r_LNP = value;
    } else if (name.compare("Cld_2313r_LNP") == 0) {
        Cld_2313r_LNP = value;
    } else if (name.compare("Cld_2321r_LNP") == 0) {
        Cld_2321r_LNP = value;
    } else if (name.compare("Cld_2322r_LNP") == 0) {
        Cld_2322r_LNP = value;
    } else if (name.compare("Cld_2323r_LNP") == 0) {
        Cld_2323r_LNP = value;
    } else if (name.compare("Cld_2331r_LNP") == 0) {
        Cld_2331r_LNP = value;
    } else if (name.compare("Cld_2332r_LNP") == 0) {
        Cld_2332r_LNP = value;
    } else if (name.compare("Cld_2333r_LNP") == 0) {
        Cld_2333r_LNP = value;
    } else if (name.compare("Cld_3311r_LNP") == 0) {
        Cld_3311r_LNP = value;
    } else if (name.compare("Cld_3312r_LNP") == 0) {
        Cld_3312r_LNP = value;
    } else if (name.compare("Cld_3313r_LNP") == 0) {
        Cld_3313r_LNP = value;
    } else if (name.compare("Cld_3322r_LNP") == 0) {
        Cld_3322r_LNP = value;
    } else if (name.compare("Cld_3323r_LNP") == 0) {
        Cld_3323r_LNP = value;
    } else if (name.compare("Cld_3333r_LNP") == 0) {
        Cld_3333r_LNP = value;
    } else if (name.compare("Cld_1112i_LNP") == 0) {
        Cld_1112i_LNP = value;
    } else if (name.compare("Cld_1113i_LNP") == 0) {
        Cld_1113i_LNP = value;
    } else if (name.compare("Cld_1123i_LNP") == 0) {
        Cld_1123i_LNP = value;
    } else if (name.compare("Cld_1211i_LNP") == 0) {
        Cld_1211i_LNP = value;
    } else if (name.compare("Cld_1212i_LNP") == 0) {
        Cld_1212i_LNP = value;
    } else if (name.compare("Cld_1213i_LNP") == 0) {
        Cld_1213i_LNP = value;
    } else if (name.compare("Cld_1221i_LNP") == 0) {
        Cld_1221i_LNP = value;
    } else if (name.compare("Cld_1222i_LNP") == 0) {
        Cld_1222i_LNP = value;
    } else if (name.compare("Cld_1223i_LNP") == 0) {
        Cld_1223i_LNP = value;
    } else if (name.compare("Cld_1231i_LNP") == 0) {
        Cld_1231i_LNP = value;
    } else if (name.compare("Cld_1232i_LNP") == 0) {
        Cld_1232i_LNP = value;
    } else if (name.compare("Cld_1233i_LNP") == 0) {
        Cld_1233i_LNP = value;
    } else if (name.compare("Cld_1311i_LNP") == 0) {
        Cld_1311i_LNP = value;
    } else if (name.compare("Cld_1312i_LNP") == 0) {
        Cld_1312i_LNP = value;
    } else if (name.compare("Cld_1313i_LNP") == 0) {
        Cld_1313i_LNP = value;
    } else if (name.compare("Cld_1321i_LNP") == 0) {
        Cld_1321i_LNP = value;
    } else if (name.compare("Cld_1322i_LNP") == 0) {
        Cld_1322i_LNP = value;
    } else if (name.compare("Cld_1323i_LNP") == 0) {
        Cld_1323i_LNP = value;
    } else if (name.compare("Cld_1331i_LNP") == 0) {
        Cld_1331i_LNP = value;
    } else if (name.compare("Cld_1332i_LNP") == 0) {
        Cld_1332i_LNP = value;
    } else if (name.compare("Cld_1333i_LNP") == 0) {
        Cld_1333i_LNP = value;
    } else if (name.compare("Cld_2212i_LNP") == 0) {
        Cld_2212i_LNP = value;
    } else if (name.compare("Cld_2213i_LNP") == 0) {
        Cld_2213i_LNP = value;
    } else if (name.compare("Cld_2223i_LNP") == 0) {
        Cld_2223i_LNP = value;
    } else if (name.compare("Cld_2311i_LNP") == 0) {
        Cld_2311i_LNP = value;
    } else if (name.compare("Cld_2312i_LNP") == 0) {
        Cld_2312i_LNP = value;
    } else if (name.compare("Cld_2313i_LNP") == 0) {
        Cld_2313i_LNP = value;
    } else if (name.compare("Cld_2321i_LNP") == 0) {
        Cld_2321i_LNP = value;
    } else if (name.compare("Cld_2322i_LNP") == 0) {
        Cld_2322i_LNP = value;
    } else if (name.compare("Cld_2323i_LNP") == 0) {
        Cld_2323i_LNP = value;
    } else if (name.compare("Cld_2331i_LNP") == 0) {
        Cld_2331i_LNP = value;
    } else if (name.compare("Cld_2332i_LNP") == 0) {
        Cld_2332i_LNP = value;
    } else if (name.compare("Cld_2333i_LNP") == 0) {
        Cld_2333i_LNP = value;
    } else if (name.compare("Cld_3312i_LNP") == 0) {
        Cld_3312i_LNP = value;
    } else if (name.compare("Cld_3313i_LNP") == 0) {
        Cld_3313i_LNP = value;
    } else if (name.compare("Cld_3323i_LNP") == 0) {
        Cld_3323i_LNP = value;
    } else if (name.compare("Cqe_1111r_LNP") == 0) {
        Cqe_1111r_LNP = value;
    } else if (name.compare("Cqe_1112r_LNP") == 0) {
        Cqe_1112r_LNP = value;
    } else if (name.compare("Cqe_1113r_LNP") == 0) {
        Cqe_1113r_LNP = value;
    } else if (name.compare("Cqe_1122r_LNP") == 0) {
        Cqe_1122r_LNP = value;
    } else if (name.compare("Cqe_1123r_LNP") == 0) {
        Cqe_1123r_LNP = value;
    } else if (name.compare("Cqe_1133r_LNP") == 0) {
        Cqe_1133r_LNP = value;
    } else if (name.compare("Cqe_1211r_LNP") == 0) {
        Cqe_1211r_LNP = value;
    } else if (name.compare("Cqe_1212r_LNP") == 0) {
        Cqe_1212r_LNP = value;
    } else if (name.compare("Cqe_1213r_LNP") == 0) {
        Cqe_1213r_LNP = value;
    } else if (name.compare("Cqe_1221r_LNP") == 0) {
        Cqe_1221r_LNP = value;
    } else if (name.compare("Cqe_1222r_LNP") == 0) {
        Cqe_1222r_LNP = value;
    } else if (name.compare("Cqe_1223r_LNP") == 0) {
        Cqe_1223r_LNP = value;
    } else if (name.compare("Cqe_1231r_LNP") == 0) {
        Cqe_1231r_LNP = value;
    } else if (name.compare("Cqe_1232r_LNP") == 0) {
        Cqe_1232r_LNP = value;
    } else if (name.compare("Cqe_1233r_LNP") == 0) {
        Cqe_1233r_LNP = value;
    } else if (name.compare("Cqe_1311r_LNP") == 0) {
        Cqe_1311r_LNP = value;
    } else if (name.compare("Cqe_1312r_LNP") == 0) {
        Cqe_1312r_LNP = value;
    } else if (name.compare("Cqe_1313r_LNP") == 0) {
        Cqe_1313r_LNP = value;
    } else if (name.compare("Cqe_1321r_LNP") == 0) {
        Cqe_1321r_LNP = value;
    } else if (name.compare("Cqe_1322r_LNP") == 0) {
        Cqe_1322r_LNP = value;
    } else if (name.compare("Cqe_1323r_LNP") == 0) {
        Cqe_1323r_LNP = value;
    } else if (name.compare("Cqe_1331r_LNP") == 0) {
        Cqe_1331r_LNP = value;
    } else if (name.compare("Cqe_1332r_LNP") == 0) {
        Cqe_1332r_LNP = value;
    } else if (name.compare("Cqe_1333r_LNP") == 0) {
        Cqe_1333r_LNP = value;
    } else if (name.compare("Cqe_2211r_LNP") == 0) {
        Cqe_2211r_LNP = value;
    } else if (name.compare("Cqe_2212r_LNP") == 0) {
        Cqe_2212r_LNP = value;
    } else if (name.compare("Cqe_2213r_LNP") == 0) {
        Cqe_2213r_LNP = value;
    } else if (name.compare("Cqe_2222r_LNP") == 0) {
        Cqe_2222r_LNP = value;
    } else if (name.compare("Cqe_2223r_LNP") == 0) {
        Cqe_2223r_LNP = value;
    } else if (name.compare("Cqe_2233r_LNP") == 0) {
        Cqe_2233r_LNP = value;
    } else if (name.compare("Cqe_2311r_LNP") == 0) {
        Cqe_2311r_LNP = value;
    } else if (name.compare("Cqe_2312r_LNP") == 0) {
        Cqe_2312r_LNP = value;
    } else if (name.compare("Cqe_2313r_LNP") == 0) {
        Cqe_2313r_LNP = value;
    } else if (name.compare("Cqe_2321r_LNP") == 0) {
        Cqe_2321r_LNP = value;
    } else if (name.compare("Cqe_2322r_LNP") == 0) {
        Cqe_2322r_LNP = value;
    } else if (name.compare("Cqe_2323r_LNP") == 0) {
        Cqe_2323r_LNP = value;
    } else if (name.compare("Cqe_2331r_LNP") == 0) {
        Cqe_2331r_LNP = value;
    } else if (name.compare("Cqe_2332r_LNP") == 0) {
        Cqe_2332r_LNP = value;
    } else if (name.compare("Cqe_2333r_LNP") == 0) {
        Cqe_2333r_LNP = value;
    } else if (name.compare("Cqe_3311r_LNP") == 0) {
        Cqe_3311r_LNP = value;
    } else if (name.compare("Cqe_3312r_LNP") == 0) {
        Cqe_3312r_LNP = value;
    } else if (name.compare("Cqe_3313r_LNP") == 0) {
        Cqe_3313r_LNP = value;
    } else if (name.compare("Cqe_3322r_LNP") == 0) {
        Cqe_3322r_LNP = value;
    } else if (name.compare("Cqe_3323r_LNP") == 0) {
        Cqe_3323r_LNP = value;
    } else if (name.compare("Cqe_3333r_LNP") == 0) {
        Cqe_3333r_LNP = value;
    } else if (name.compare("Cqe_1112i_LNP") == 0) {
        Cqe_1112i_LNP = value;
    } else if (name.compare("Cqe_1113i_LNP") == 0) {
        Cqe_1113i_LNP = value;
    } else if (name.compare("Cqe_1123i_LNP") == 0) {
        Cqe_1123i_LNP = value;
    } else if (name.compare("Cqe_1211i_LNP") == 0) {
        Cqe_1211i_LNP = value;
    } else if (name.compare("Cqe_1212i_LNP") == 0) {
        Cqe_1212i_LNP = value;
    } else if (name.compare("Cqe_1213i_LNP") == 0) {
        Cqe_1213i_LNP = value;
    } else if (name.compare("Cqe_1221i_LNP") == 0) {
        Cqe_1221i_LNP = value;
    } else if (name.compare("Cqe_1222i_LNP") == 0) {
        Cqe_1222i_LNP = value;
    } else if (name.compare("Cqe_1223i_LNP") == 0) {
        Cqe_1223i_LNP = value;
    } else if (name.compare("Cqe_1231i_LNP") == 0) {
        Cqe_1231i_LNP = value;
    } else if (name.compare("Cqe_1232i_LNP") == 0) {
        Cqe_1232i_LNP = value;
    } else if (name.compare("Cqe_1233i_LNP") == 0) {
        Cqe_1233i_LNP = value;
    } else if (name.compare("Cqe_1311i_LNP") == 0) {
        Cqe_1311i_LNP = value;
    } else if (name.compare("Cqe_1312i_LNP") == 0) {
        Cqe_1312i_LNP = value;
    } else if (name.compare("Cqe_1313i_LNP") == 0) {
        Cqe_1313i_LNP = value;
    } else if (name.compare("Cqe_1321i_LNP") == 0) {
        Cqe_1321i_LNP = value;
    } else if (name.compare("Cqe_1322i_LNP") == 0) {
        Cqe_1322i_LNP = value;
    } else if (name.compare("Cqe_1323i_LNP") == 0) {
        Cqe_1323i_LNP = value;
    } else if (name.compare("Cqe_1331i_LNP") == 0) {
        Cqe_1331i_LNP = value;
    } else if (name.compare("Cqe_1332i_LNP") == 0) {
        Cqe_1332i_LNP = value;
    } else if (name.compare("Cqe_1333i_LNP") == 0) {
        Cqe_1333i_LNP = value;
    } else if (name.compare("Cqe_2212i_LNP") == 0) {
        Cqe_2212i_LNP = value;
    } else if (name.compare("Cqe_2213i_LNP") == 0) {
        Cqe_2213i_LNP = value;
    } else if (name.compare("Cqe_2223i_LNP") == 0) {
        Cqe_2223i_LNP = value;
    } else if (name.compare("Cqe_2311i_LNP") == 0) {
        Cqe_2311i_LNP = value;
    } else if (name.compare("Cqe_2312i_LNP") == 0) {
        Cqe_2312i_LNP = value;
    } else if (name.compare("Cqe_2313i_LNP") == 0) {
        Cqe_2313i_LNP = value;
    } else if (name.compare("Cqe_2321i_LNP") == 0) {
        Cqe_2321i_LNP = value;
    } else if (name.compare("Cqe_2322i_LNP") == 0) {
        Cqe_2322i_LNP = value;
    } else if (name.compare("Cqe_2323i_LNP") == 0) {
        Cqe_2323i_LNP = value;
    } else if (name.compare("Cqe_2331i_LNP") == 0) {
        Cqe_2331i_LNP = value;
    } else if (name.compare("Cqe_2332i_LNP") == 0) {
        Cqe_2332i_LNP = value;
    } else if (name.compare("Cqe_2333i_LNP") == 0) {
        Cqe_2333i_LNP = value;
    } else if (name.compare("Cqe_3312i_LNP") == 0) {
        Cqe_3312i_LNP = value;
    } else if (name.compare("Cqe_3313i_LNP") == 0) {
        Cqe_3313i_LNP = value;
    } else if (name.compare("Cqe_3323i_LNP") == 0) {
        Cqe_3323i_LNP = value;
    } else if (name.compare("Cledq_1111r_LNP") == 0) {
        Cledq_1111r_LNP = value;
    } else if (name.compare("Cledq_1112r_LNP") == 0) {
        Cledq_1112r_LNP = value;
    } else if (name.compare("Cledq_1113r_LNP") == 0) {
        Cledq_1113r_LNP = value;
    } else if (name.compare("Cledq_1121r_LNP") == 0) {
        Cledq_1121r_LNP = value;
    } else if (name.compare("Cledq_1122r_LNP") == 0) {
        Cledq_1122r_LNP = value;
    } else if (name.compare("Cledq_1123r_LNP") == 0) {
        Cledq_1123r_LNP = value;
    } else if (name.compare("Cledq_1131r_LNP") == 0) {
        Cledq_1131r_LNP = value;
    } else if (name.compare("Cledq_1132r_LNP") == 0) {
        Cledq_1132r_LNP = value;
    } else if (name.compare("Cledq_1133r_LNP") == 0) {
        Cledq_1133r_LNP = value;
    } else if (name.compare("Cledq_1211r_LNP") == 0) {
        Cledq_1211r_LNP = value;
    } else if (name.compare("Cledq_1212r_LNP") == 0) {
        Cledq_1212r_LNP = value;
    } else if (name.compare("Cledq_1213r_LNP") == 0) {
        Cledq_1213r_LNP = value;
    } else if (name.compare("Cledq_1221r_LNP") == 0) {
        Cledq_1221r_LNP = value;
    } else if (name.compare("Cledq_1222r_LNP") == 0) {
        Cledq_1222r_LNP = value;
    } else if (name.compare("Cledq_1223r_LNP") == 0) {
        Cledq_1223r_LNP = value;
    } else if (name.compare("Cledq_1231r_LNP") == 0) {
        Cledq_1231r_LNP = value;
    } else if (name.compare("Cledq_1232r_LNP") == 0) {
        Cledq_1232r_LNP = value;
    } else if (name.compare("Cledq_1233r_LNP") == 0) {
        Cledq_1233r_LNP = value;
    } else if (name.compare("Cledq_1311r_LNP") == 0) {
        Cledq_1311r_LNP = value;
    } else if (name.compare("Cledq_1312r_LNP") == 0) {
        Cledq_1312r_LNP = value;
    } else if (name.compare("Cledq_1313r_LNP") == 0) {
        Cledq_1313r_LNP = value;
    } else if (name.compare("Cledq_1321r_LNP") == 0) {
        Cledq_1321r_LNP = value;
    } else if (name.compare("Cledq_1322r_LNP") == 0) {
        Cledq_1322r_LNP = value;
    } else if (name.compare("Cledq_1323r_LNP") == 0) {
        Cledq_1323r_LNP = value;
    } else if (name.compare("Cledq_1331r_LNP") == 0) {
        Cledq_1331r_LNP = value;
    } else if (name.compare("Cledq_1332r_LNP") == 0) {
        Cledq_1332r_LNP = value;
    } else if (name.compare("Cledq_1333r_LNP") == 0) {
        Cledq_1333r_LNP = value;
    } else if (name.compare("Cledq_2111r_LNP") == 0) {
        Cledq_2111r_LNP = value;
    } else if (name.compare("Cledq_2112r_LNP") == 0) {
        Cledq_2112r_LNP = value;
    } else if (name.compare("Cledq_2113r_LNP") == 0) {
        Cledq_2113r_LNP = value;
    } else if (name.compare("Cledq_2121r_LNP") == 0) {
        Cledq_2121r_LNP = value;
    } else if (name.compare("Cledq_2122r_LNP") == 0) {
        Cledq_2122r_LNP = value;
    } else if (name.compare("Cledq_2123r_LNP") == 0) {
        Cledq_2123r_LNP = value;
    } else if (name.compare("Cledq_2131r_LNP") == 0) {
        Cledq_2131r_LNP = value;
    } else if (name.compare("Cledq_2132r_LNP") == 0) {
        Cledq_2132r_LNP = value;
    } else if (name.compare("Cledq_2133r_LNP") == 0) {
        Cledq_2133r_LNP = value;
    } else if (name.compare("Cledq_2211r_LNP") == 0) {
        Cledq_2211r_LNP = value;
    } else if (name.compare("Cledq_2212r_LNP") == 0) {
        Cledq_2212r_LNP = value;
    } else if (name.compare("Cledq_2213r_LNP") == 0) {
        Cledq_2213r_LNP = value;
    } else if (name.compare("Cledq_2221r_LNP") == 0) {
        Cledq_2221r_LNP = value;
    } else if (name.compare("Cledq_2222r_LNP") == 0) {
        Cledq_2222r_LNP = value;
    } else if (name.compare("Cledq_2223r_LNP") == 0) {
        Cledq_2223r_LNP = value;
    } else if (name.compare("Cledq_2231r_LNP") == 0) {
        Cledq_2231r_LNP = value;
    } else if (name.compare("Cledq_2232r_LNP") == 0) {
        Cledq_2232r_LNP = value;
    } else if (name.compare("Cledq_2233r_LNP") == 0) {
        Cledq_2233r_LNP = value;
    } else if (name.compare("Cledq_2311r_LNP") == 0) {
        Cledq_2311r_LNP = value;
    } else if (name.compare("Cledq_2312r_LNP") == 0) {
        Cledq_2312r_LNP = value;
    } else if (name.compare("Cledq_2313r_LNP") == 0) {
        Cledq_2313r_LNP = value;
    } else if (name.compare("Cledq_2321r_LNP") == 0) {
        Cledq_2321r_LNP = value;
    } else if (name.compare("Cledq_2322r_LNP") == 0) {
        Cledq_2322r_LNP = value;
    } else if (name.compare("Cledq_2323r_LNP") == 0) {
        Cledq_2323r_LNP = value;
    } else if (name.compare("Cledq_2331r_LNP") == 0) {
        Cledq_2331r_LNP = value;
    } else if (name.compare("Cledq_2332r_LNP") == 0) {
        Cledq_2332r_LNP = value;
    } else if (name.compare("Cledq_2333r_LNP") == 0) {
        Cledq_2333r_LNP = value;
    } else if (name.compare("Cledq_3111r_LNP") == 0) {
        Cledq_3111r_LNP = value;
    } else if (name.compare("Cledq_3112r_LNP") == 0) {
        Cledq_3112r_LNP = value;
    } else if (name.compare("Cledq_3113r_LNP") == 0) {
        Cledq_3113r_LNP = value;
    } else if (name.compare("Cledq_3121r_LNP") == 0) {
        Cledq_3121r_LNP = value;
    } else if (name.compare("Cledq_3122r_LNP") == 0) {
        Cledq_3122r_LNP = value;
    } else if (name.compare("Cledq_3123r_LNP") == 0) {
        Cledq_3123r_LNP = value;
    } else if (name.compare("Cledq_3131r_LNP") == 0) {
        Cledq_3131r_LNP = value;
    } else if (name.compare("Cledq_3132r_LNP") == 0) {
        Cledq_3132r_LNP = value;
    } else if (name.compare("Cledq_3133r_LNP") == 0) {
        Cledq_3133r_LNP = value;
    } else if (name.compare("Cledq_3211r_LNP") == 0) {
        Cledq_3211r_LNP = value;
    } else if (name.compare("Cledq_3212r_LNP") == 0) {
        Cledq_3212r_LNP = value;
    } else if (name.compare("Cledq_3213r_LNP") == 0) {
        Cledq_3213r_LNP = value;
    } else if (name.compare("Cledq_3221r_LNP") == 0) {
        Cledq_3221r_LNP = value;
    } else if (name.compare("Cledq_3222r_LNP") == 0) {
        Cledq_3222r_LNP = value;
    } else if (name.compare("Cledq_3223r_LNP") == 0) {
        Cledq_3223r_LNP = value;
    } else if (name.compare("Cledq_3231r_LNP") == 0) {
        Cledq_3231r_LNP = value;
    } else if (name.compare("Cledq_3232r_LNP") == 0) {
        Cledq_3232r_LNP = value;
    } else if (name.compare("Cledq_3233r_LNP") == 0) {
        Cledq_3233r_LNP = value;
    } else if (name.compare("Cledq_3311r_LNP") == 0) {
        Cledq_3311r_LNP = value;
    } else if (name.compare("Cledq_3312r_LNP") == 0) {
        Cledq_3312r_LNP = value;
    } else if (name.compare("Cledq_3313r_LNP") == 0) {
        Cledq_3313r_LNP = value;
    } else if (name.compare("Cledq_3321r_LNP") == 0) {
        Cledq_3321r_LNP = value;
    } else if (name.compare("Cledq_3322r_LNP") == 0) {
        Cledq_3322r_LNP = value;
    } else if (name.compare("Cledq_3323r_LNP") == 0) {
        Cledq_3323r_LNP = value;
    } else if (name.compare("Cledq_3331r_LNP") == 0) {
        Cledq_3331r_LNP = value;
    } else if (name.compare("Cledq_3332r_LNP") == 0) {
        Cledq_3332r_LNP = value;
    } else if (name.compare("Cledq_3333r_LNP") == 0) {
        Cledq_3333r_LNP = value;
    } else if (name.compare("Cledq_1111i_LNP") == 0) {
        Cledq_1111i_LNP = value;
    } else if (name.compare("Cledq_1112i_LNP") == 0) {
        Cledq_1112i_LNP = value;
    } else if (name.compare("Cledq_1113i_LNP") == 0) {
        Cledq_1113i_LNP = value;
    } else if (name.compare("Cledq_1121i_LNP") == 0) {
        Cledq_1121i_LNP = value;
    } else if (name.compare("Cledq_1122i_LNP") == 0) {
        Cledq_1122i_LNP = value;
    } else if (name.compare("Cledq_1123i_LNP") == 0) {
        Cledq_1123i_LNP = value;
    } else if (name.compare("Cledq_1131i_LNP") == 0) {
        Cledq_1131i_LNP = value;
    } else if (name.compare("Cledq_1132i_LNP") == 0) {
        Cledq_1132i_LNP = value;
    } else if (name.compare("Cledq_1133i_LNP") == 0) {
        Cledq_1133i_LNP = value;
    } else if (name.compare("Cledq_1211i_LNP") == 0) {
        Cledq_1211i_LNP = value;
    } else if (name.compare("Cledq_1212i_LNP") == 0) {
        Cledq_1212i_LNP = value;
    } else if (name.compare("Cledq_1213i_LNP") == 0) {
        Cledq_1213i_LNP = value;
    } else if (name.compare("Cledq_1221i_LNP") == 0) {
        Cledq_1221i_LNP = value;
    } else if (name.compare("Cledq_1222i_LNP") == 0) {
        Cledq_1222i_LNP = value;
    } else if (name.compare("Cledq_1223i_LNP") == 0) {
        Cledq_1223i_LNP = value;
    } else if (name.compare("Cledq_1231i_LNP") == 0) {
        Cledq_1231i_LNP = value;
    } else if (name.compare("Cledq_1232i_LNP") == 0) {
        Cledq_1232i_LNP = value;
    } else if (name.compare("Cledq_1233i_LNP") == 0) {
        Cledq_1233i_LNP = value;
    } else if (name.compare("Cledq_1311i_LNP") == 0) {
        Cledq_1311i_LNP = value;
    } else if (name.compare("Cledq_1312i_LNP") == 0) {
        Cledq_1312i_LNP = value;
    } else if (name.compare("Cledq_1313i_LNP") == 0) {
        Cledq_1313i_LNP = value;
    } else if (name.compare("Cledq_1321i_LNP") == 0) {
        Cledq_1321i_LNP = value;
    } else if (name.compare("Cledq_1322i_LNP") == 0) {
        Cledq_1322i_LNP = value;
    } else if (name.compare("Cledq_1323i_LNP") == 0) {
        Cledq_1323i_LNP = value;
    } else if (name.compare("Cledq_1331i_LNP") == 0) {
        Cledq_1331i_LNP = value;
    } else if (name.compare("Cledq_1332i_LNP") == 0) {
        Cledq_1332i_LNP = value;
    } else if (name.compare("Cledq_1333i_LNP") == 0) {
        Cledq_1333i_LNP = value;
    } else if (name.compare("Cledq_2111i_LNP") == 0) {
        Cledq_2111i_LNP = value;
    } else if (name.compare("Cledq_2112i_LNP") == 0) {
        Cledq_2112i_LNP = value;
    } else if (name.compare("Cledq_2113i_LNP") == 0) {
        Cledq_2113i_LNP = value;
    } else if (name.compare("Cledq_2121i_LNP") == 0) {
        Cledq_2121i_LNP = value;
    } else if (name.compare("Cledq_2122i_LNP") == 0) {
        Cledq_2122i_LNP = value;
    } else if (name.compare("Cledq_2123i_LNP") == 0) {
        Cledq_2123i_LNP = value;
    } else if (name.compare("Cledq_2131i_LNP") == 0) {
        Cledq_2131i_LNP = value;
    } else if (name.compare("Cledq_2132i_LNP") == 0) {
        Cledq_2132i_LNP = value;
    } else if (name.compare("Cledq_2133i_LNP") == 0) {
        Cledq_2133i_LNP = value;
    } else if (name.compare("Cledq_2211i_LNP") == 0) {
        Cledq_2211i_LNP = value;
    } else if (name.compare("Cledq_2212i_LNP") == 0) {
        Cledq_2212i_LNP = value;
    } else if (name.compare("Cledq_2213i_LNP") == 0) {
        Cledq_2213i_LNP = value;
    } else if (name.compare("Cledq_2221i_LNP") == 0) {
        Cledq_2221i_LNP = value;
    } else if (name.compare("Cledq_2222i_LNP") == 0) {
        Cledq_2222i_LNP = value;
    } else if (name.compare("Cledq_2223i_LNP") == 0) {
        Cledq_2223i_LNP = value;
    } else if (name.compare("Cledq_2231i_LNP") == 0) {
        Cledq_2231i_LNP = value;
    } else if (name.compare("Cledq_2232i_LNP") == 0) {
        Cledq_2232i_LNP = value;
    } else if (name.compare("Cledq_2233i_LNP") == 0) {
        Cledq_2233i_LNP = value;
    } else if (name.compare("Cledq_2311i_LNP") == 0) {
        Cledq_2311i_LNP = value;
    } else if (name.compare("Cledq_2312i_LNP") == 0) {
        Cledq_2312i_LNP = value;
    } else if (name.compare("Cledq_2313i_LNP") == 0) {
        Cledq_2313i_LNP = value;
    } else if (name.compare("Cledq_2321i_LNP") == 0) {
        Cledq_2321i_LNP = value;
    } else if (name.compare("Cledq_2322i_LNP") == 0) {
        Cledq_2322i_LNP = value;
    } else if (name.compare("Cledq_2323i_LNP") == 0) {
        Cledq_2323i_LNP = value;
    } else if (name.compare("Cledq_2331i_LNP") == 0) {
        Cledq_2331i_LNP = value;
    } else if (name.compare("Cledq_2332i_LNP") == 0) {
        Cledq_2332i_LNP = value;
    } else if (name.compare("Cledq_2333i_LNP") == 0) {
        Cledq_2333i_LNP = value;
    } else if (name.compare("Cledq_3111i_LNP") == 0) {
        Cledq_3111i_LNP = value;
    } else if (name.compare("Cledq_3112i_LNP") == 0) {
        Cledq_3112i_LNP = value;
    } else if (name.compare("Cledq_3113i_LNP") == 0) {
        Cledq_3113i_LNP = value;
    } else if (name.compare("Cledq_3121i_LNP") == 0) {
        Cledq_3121i_LNP = value;
    } else if (name.compare("Cledq_3122i_LNP") == 0) {
        Cledq_3122i_LNP = value;
    } else if (name.compare("Cledq_3123i_LNP") == 0) {
        Cledq_3123i_LNP = value;
    } else if (name.compare("Cledq_3131i_LNP") == 0) {
        Cledq_3131i_LNP = value;
    } else if (name.compare("Cledq_3132i_LNP") == 0) {
        Cledq_3132i_LNP = value;
    } else if (name.compare("Cledq_3133i_LNP") == 0) {
        Cledq_3133i_LNP = value;
    } else if (name.compare("Cledq_3211i_LNP") == 0) {
        Cledq_3211i_LNP = value;
    } else if (name.compare("Cledq_3212i_LNP") == 0) {
        Cledq_3212i_LNP = value;
    } else if (name.compare("Cledq_3213i_LNP") == 0) {
        Cledq_3213i_LNP = value;
    } else if (name.compare("Cledq_3221i_LNP") == 0) {
        Cledq_3221i_LNP = value;
    } else if (name.compare("Cledq_3222i_LNP") == 0) {
        Cledq_3222i_LNP = value;
    } else if (name.compare("Cledq_3223i_LNP") == 0) {
        Cledq_3223i_LNP = value;
    } else if (name.compare("Cledq_3231i_LNP") == 0) {
        Cledq_3231i_LNP = value;
    } else if (name.compare("Cledq_3232i_LNP") == 0) {
        Cledq_3232i_LNP = value;
    } else if (name.compare("Cledq_3233i_LNP") == 0) {
        Cledq_3233i_LNP = value;
    } else if (name.compare("Cledq_3311i_LNP") == 0) {
        Cledq_3311i_LNP = value;
    } else if (name.compare("Cledq_3312i_LNP") == 0) {
        Cledq_3312i_LNP = value;
    } else if (name.compare("Cledq_3313i_LNP") == 0) {
        Cledq_3313i_LNP = value;
    } else if (name.compare("Cledq_3321i_LNP") == 0) {
        Cledq_3321i_LNP = value;
    } else if (name.compare("Cledq_3322i_LNP") == 0) {
        Cledq_3322i_LNP = value;
    } else if (name.compare("Cledq_3323i_LNP") == 0) {
        Cledq_3323i_LNP = value;
    } else if (name.compare("Cledq_3331i_LNP") == 0) {
        Cledq_3331i_LNP = value;
    } else if (name.compare("Cledq_3332i_LNP") == 0) {
        Cledq_3332i_LNP = value;
    } else if (name.compare("Cledq_3333i_LNP") == 0) {
        Cledq_3333i_LNP = value;
    } else if (name.compare("Cqq1_1111r_LNP") == 0) {
        Cqq1_1111r_LNP = value;
    } else if (name.compare("Cqq1_1112r_LNP") == 0) {
        Cqq1_1112r_LNP = value;
    } else if (name.compare("Cqq1_1113r_LNP") == 0) {
        Cqq1_1113r_LNP = value;
    } else if (name.compare("Cqq1_1122r_LNP") == 0) {
        Cqq1_1122r_LNP = value;
    } else if (name.compare("Cqq1_1123r_LNP") == 0) {
        Cqq1_1123r_LNP = value;
    } else if (name.compare("Cqq1_1133r_LNP") == 0) {
        Cqq1_1133r_LNP = value;
    } else if (name.compare("Cqq1_1212r_LNP") == 0) {
        Cqq1_1212r_LNP = value;
    } else if (name.compare("Cqq1_1213r_LNP") == 0) {
        Cqq1_1213r_LNP = value;
    } else if (name.compare("Cqq1_1221r_LNP") == 0) {
        Cqq1_1221r_LNP = value;
    } else if (name.compare("Cqq1_1222r_LNP") == 0) {
        Cqq1_1222r_LNP = value;
    } else if (name.compare("Cqq1_1223r_LNP") == 0) {
        Cqq1_1223r_LNP = value;
    } else if (name.compare("Cqq1_1231r_LNP") == 0) {
        Cqq1_1231r_LNP = value;
    } else if (name.compare("Cqq1_1232r_LNP") == 0) {
        Cqq1_1232r_LNP = value;
    } else if (name.compare("Cqq1_1233r_LNP") == 0) {
        Cqq1_1233r_LNP = value;
    } else if (name.compare("Cqq1_1313r_LNP") == 0) {
        Cqq1_1313r_LNP = value;
    } else if (name.compare("Cqq1_1322r_LNP") == 0) {
        Cqq1_1322r_LNP = value;
    } else if (name.compare("Cqq1_1323r_LNP") == 0) {
        Cqq1_1323r_LNP = value;
    } else if (name.compare("Cqq1_1331r_LNP") == 0) {
        Cqq1_1331r_LNP = value;
    } else if (name.compare("Cqq1_1332r_LNP") == 0) {
        Cqq1_1332r_LNP = value;
    } else if (name.compare("Cqq1_1333r_LNP") == 0) {
        Cqq1_1333r_LNP = value;
    } else if (name.compare("Cqq1_2222r_LNP") == 0) {
        Cqq1_2222r_LNP = value;
    } else if (name.compare("Cqq1_2223r_LNP") == 0) {
        Cqq1_2223r_LNP = value;
    } else if (name.compare("Cqq1_2233r_LNP") == 0) {
        Cqq1_2233r_LNP = value;
    } else if (name.compare("Cqq1_2323r_LNP") == 0) {
        Cqq1_2323r_LNP = value;
    } else if (name.compare("Cqq1_2332r_LNP") == 0) {
        Cqq1_2332r_LNP = value;
    } else if (name.compare("Cqq1_2333r_LNP") == 0) {
        Cqq1_2333r_LNP = value;
    } else if (name.compare("Cqq1_3333r_LNP") == 0) {
        Cqq1_3333r_LNP = value;
    } else if (name.compare("Cqq1_1112i_LNP") == 0) {
        Cqq1_1112i_LNP = value;
    } else if (name.compare("Cqq1_1113i_LNP") == 0) {
        Cqq1_1113i_LNP = value;
    } else if (name.compare("Cqq1_1123i_LNP") == 0) {
        Cqq1_1123i_LNP = value;
    } else if (name.compare("Cqq1_1212i_LNP") == 0) {
        Cqq1_1212i_LNP = value;
    } else if (name.compare("Cqq1_1213i_LNP") == 0) {
        Cqq1_1213i_LNP = value;
    } else if (name.compare("Cqq1_1222i_LNP") == 0) {
        Cqq1_1222i_LNP = value;
    } else if (name.compare("Cqq1_1223i_LNP") == 0) {
        Cqq1_1223i_LNP = value;
    } else if (name.compare("Cqq1_1231i_LNP") == 0) {
        Cqq1_1231i_LNP = value;
    } else if (name.compare("Cqq1_1232i_LNP") == 0) {
        Cqq1_1232i_LNP = value;
    } else if (name.compare("Cqq1_1233i_LNP") == 0) {
        Cqq1_1233i_LNP = value;
    } else if (name.compare("Cqq1_1313i_LNP") == 0) {
        Cqq1_1313i_LNP = value;
    } else if (name.compare("Cqq1_1322i_LNP") == 0) {
        Cqq1_1322i_LNP = value;
    } else if (name.compare("Cqq1_1323i_LNP") == 0) {
        Cqq1_1323i_LNP = value;
    } else if (name.compare("Cqq1_1332i_LNP") == 0) {
        Cqq1_1332i_LNP = value;
    } else if (name.compare("Cqq1_1333i_LNP") == 0) {
        Cqq1_1333i_LNP = value;
    } else if (name.compare("Cqq1_2223i_LNP") == 0) {
        Cqq1_2223i_LNP = value;
    } else if (name.compare("Cqq1_2323i_LNP") == 0) {
        Cqq1_2323i_LNP = value;
    } else if (name.compare("Cqq1_2333i_LNP") == 0) {
        Cqq1_2333i_LNP = value;
    } else if (name.compare("Cqq3_1111r_LNP") == 0) {
        Cqq3_1111r_LNP = value;
    } else if (name.compare("Cqq3_1112r_LNP") == 0) {
        Cqq3_1112r_LNP = value;
    } else if (name.compare("Cqq3_1113r_LNP") == 0) {
        Cqq3_1113r_LNP = value;
    } else if (name.compare("Cqq3_1122r_LNP") == 0) {
        Cqq3_1122r_LNP = value;
    } else if (name.compare("Cqq3_1123r_LNP") == 0) {
        Cqq3_1123r_LNP = value;
    } else if (name.compare("Cqq3_1133r_LNP") == 0) {
        Cqq3_1133r_LNP = value;
    } else if (name.compare("Cqq3_1212r_LNP") == 0) {
        Cqq3_1212r_LNP = value;
    } else if (name.compare("Cqq3_1213r_LNP") == 0) {
        Cqq3_1213r_LNP = value;
    } else if (name.compare("Cqq3_1221r_LNP") == 0) {
        Cqq3_1221r_LNP = value;
    } else if (name.compare("Cqq3_1222r_LNP") == 0) {
        Cqq3_1222r_LNP = value;
    } else if (name.compare("Cqq3_1223r_LNP") == 0) {
        Cqq3_1223r_LNP = value;
    } else if (name.compare("Cqq3_1231r_LNP") == 0) {
        Cqq3_1231r_LNP = value;
    } else if (name.compare("Cqq3_1232r_LNP") == 0) {
        Cqq3_1232r_LNP = value;
    } else if (name.compare("Cqq3_1233r_LNP") == 0) {
        Cqq3_1233r_LNP = value;
    } else if (name.compare("Cqq3_1313r_LNP") == 0) {
        Cqq3_1313r_LNP = value;
    } else if (name.compare("Cqq3_1322r_LNP") == 0) {
        Cqq3_1322r_LNP = value;
    } else if (name.compare("Cqq3_1323r_LNP") == 0) {
        Cqq3_1323r_LNP = value;
    } else if (name.compare("Cqq3_1331r_LNP") == 0) {
        Cqq3_1331r_LNP = value;
    } else if (name.compare("Cqq3_1332r_LNP") == 0) {
        Cqq3_1332r_LNP = value;
    } else if (name.compare("Cqq3_1333r_LNP") == 0) {
        Cqq3_1333r_LNP = value;
    } else if (name.compare("Cqq3_2222r_LNP") == 0) {
        Cqq3_2222r_LNP = value;
    } else if (name.compare("Cqq3_2223r_LNP") == 0) {
        Cqq3_2223r_LNP = value;
    } else if (name.compare("Cqq3_2233r_LNP") == 0) {
        Cqq3_2233r_LNP = value;
    } else if (name.compare("Cqq3_2323r_LNP") == 0) {
        Cqq3_2323r_LNP = value;
    } else if (name.compare("Cqq3_2332r_LNP") == 0) {
        Cqq3_2332r_LNP = value;
    } else if (name.compare("Cqq3_2333r_LNP") == 0) {
        Cqq3_2333r_LNP = value;
    } else if (name.compare("Cqq3_3333r_LNP") == 0) {
        Cqq3_3333r_LNP = value;
    } else if (name.compare("Cqq3_1112i_LNP") == 0) {
        Cqq3_1112i_LNP = value;
    } else if (name.compare("Cqq3_1113i_LNP") == 0) {
        Cqq3_1113i_LNP = value;
    } else if (name.compare("Cqq3_1123i_LNP") == 0) {
        Cqq3_1123i_LNP = value;
    } else if (name.compare("Cqq3_1212i_LNP") == 0) {
        Cqq3_1212i_LNP = value;
    } else if (name.compare("Cqq3_1213i_LNP") == 0) {
        Cqq3_1213i_LNP = value;
    } else if (name.compare("Cqq3_1222i_LNP") == 0) {
        Cqq3_1222i_LNP = value;
    } else if (name.compare("Cqq3_1223i_LNP") == 0) {
        Cqq3_1223i_LNP = value;
    } else if (name.compare("Cqq3_1231i_LNP") == 0) {
        Cqq3_1231i_LNP = value;
    } else if (name.compare("Cqq3_1232i_LNP") == 0) {
        Cqq3_1232i_LNP = value;
    } else if (name.compare("Cqq3_1233i_LNP") == 0) {
        Cqq3_1233i_LNP = value;
    } else if (name.compare("Cqq3_1313i_LNP") == 0) {
        Cqq3_1313i_LNP = value;
    } else if (name.compare("Cqq3_1322i_LNP") == 0) {
        Cqq3_1322i_LNP = value;
    } else if (name.compare("Cqq3_1323i_LNP") == 0) {
        Cqq3_1323i_LNP = value;
    } else if (name.compare("Cqq3_1332i_LNP") == 0) {
        Cqq3_1332i_LNP = value;
    } else if (name.compare("Cqq3_1333i_LNP") == 0) {
        Cqq3_1333i_LNP = value;
    } else if (name.compare("Cqq3_2223i_LNP") == 0) {
        Cqq3_2223i_LNP = value;
    } else if (name.compare("Cqq3_2323i_LNP") == 0) {
        Cqq3_2323i_LNP = value;
    } else if (name.compare("Cqq3_2333i_LNP") == 0) {
        Cqq3_2333i_LNP = value;
    } else if (name.compare("Cuu_1111r_LNP") == 0) {
        Cuu_1111r_LNP = value;
    } else if (name.compare("Cuu_1112r_LNP") == 0) {
        Cuu_1112r_LNP = value;
    } else if (name.compare("Cuu_1113r_LNP") == 0) {
        Cuu_1113r_LNP = value;
    } else if (name.compare("Cuu_1122r_LNP") == 0) {
        Cuu_1122r_LNP = value;
    } else if (name.compare("Cuu_1123r_LNP") == 0) {
        Cuu_1123r_LNP = value;
    } else if (name.compare("Cuu_1133r_LNP") == 0) {
        Cuu_1133r_LNP = value;
    } else if (name.compare("Cuu_1212r_LNP") == 0) {
        Cuu_1212r_LNP = value;
    } else if (name.compare("Cuu_1213r_LNP") == 0) {
        Cuu_1213r_LNP = value;
    } else if (name.compare("Cuu_1221r_LNP") == 0) {
        Cuu_1221r_LNP = value;
    } else if (name.compare("Cuu_1222r_LNP") == 0) {
        Cuu_1222r_LNP = value;
    } else if (name.compare("Cuu_1223r_LNP") == 0) {
        Cuu_1223r_LNP = value;
    } else if (name.compare("Cuu_1231r_LNP") == 0) {
        Cuu_1231r_LNP = value;
    } else if (name.compare("Cuu_1232r_LNP") == 0) {
        Cuu_1232r_LNP = value;
    } else if (name.compare("Cuu_1233r_LNP") == 0) {
        Cuu_1233r_LNP = value;
    } else if (name.compare("Cuu_1313r_LNP") == 0) {
        Cuu_1313r_LNP = value;
    } else if (name.compare("Cuu_1322r_LNP") == 0) {
        Cuu_1322r_LNP = value;
    } else if (name.compare("Cuu_1323r_LNP") == 0) {
        Cuu_1323r_LNP = value;
    } else if (name.compare("Cuu_1331r_LNP") == 0) {
        Cuu_1331r_LNP = value;
    } else if (name.compare("Cuu_1332r_LNP") == 0) {
        Cuu_1332r_LNP = value;
    } else if (name.compare("Cuu_1333r_LNP") == 0) {
        Cuu_1333r_LNP = value;
    } else if (name.compare("Cuu_2222r_LNP") == 0) {
        Cuu_2222r_LNP = value;
    } else if (name.compare("Cuu_2223r_LNP") == 0) {
        Cuu_2223r_LNP = value;
    } else if (name.compare("Cuu_2233r_LNP") == 0) {
        Cuu_2233r_LNP = value;
    } else if (name.compare("Cuu_2323r_LNP") == 0) {
        Cuu_2323r_LNP = value;
    } else if (name.compare("Cuu_2332r_LNP") == 0) {
        Cuu_2332r_LNP = value;
    } else if (name.compare("Cuu_2333r_LNP") == 0) {
        Cuu_2333r_LNP = value;
    } else if (name.compare("Cuu_3333r_LNP") == 0) {
        Cuu_3333r_LNP = value;
    } else if (name.compare("Cuu_1112i_LNP") == 0) {
        Cuu_1112i_LNP = value;
    } else if (name.compare("Cuu_1113i_LNP") == 0) {
        Cuu_1113i_LNP = value;
    } else if (name.compare("Cuu_1123i_LNP") == 0) {
        Cuu_1123i_LNP = value;
    } else if (name.compare("Cuu_1212i_LNP") == 0) {
        Cuu_1212i_LNP = value;
    } else if (name.compare("Cuu_1213i_LNP") == 0) {
        Cuu_1213i_LNP = value;
    } else if (name.compare("Cuu_1222i_LNP") == 0) {
        Cuu_1222i_LNP = value;
    } else if (name.compare("Cuu_1223i_LNP") == 0) {
        Cuu_1223i_LNP = value;
    } else if (name.compare("Cuu_1231i_LNP") == 0) {
        Cuu_1231i_LNP = value;
    } else if (name.compare("Cuu_1232i_LNP") == 0) {
        Cuu_1232i_LNP = value;
    } else if (name.compare("Cuu_1233i_LNP") == 0) {
        Cuu_1233i_LNP = value;
    } else if (name.compare("Cuu_1313i_LNP") == 0) {
        Cuu_1313i_LNP = value;
    } else if (name.compare("Cuu_1322i_LNP") == 0) {
        Cuu_1322i_LNP = value;
    } else if (name.compare("Cuu_1323i_LNP") == 0) {
        Cuu_1323i_LNP = value;
    } else if (name.compare("Cuu_1332i_LNP") == 0) {
        Cuu_1332i_LNP = value;
    } else if (name.compare("Cuu_1333i_LNP") == 0) {
        Cuu_1333i_LNP = value;
    } else if (name.compare("Cuu_2223i_LNP") == 0) {
        Cuu_2223i_LNP = value;
    } else if (name.compare("Cuu_2323i_LNP") == 0) {
        Cuu_2323i_LNP = value;
    } else if (name.compare("Cuu_2333i_LNP") == 0) {
        Cuu_2333i_LNP = value;
    } else if (name.compare("Cdd_1111r_LNP") == 0) {
        Cdd_1111r_LNP = value;
    } else if (name.compare("Cdd_1112r_LNP") == 0) {
        Cdd_1112r_LNP = value;
    } else if (name.compare("Cdd_1113r_LNP") == 0) {
        Cdd_1113r_LNP = value;
    } else if (name.compare("Cdd_1122r_LNP") == 0) {
        Cdd_1122r_LNP = value;
    } else if (name.compare("Cdd_1123r_LNP") == 0) {
        Cdd_1123r_LNP = value;
    } else if (name.compare("Cdd_1133r_LNP") == 0) {
        Cdd_1133r_LNP = value;
    } else if (name.compare("Cdd_1212r_LNP") == 0) {
        Cdd_1212r_LNP = value;
    } else if (name.compare("Cdd_1213r_LNP") == 0) {
        Cdd_1213r_LNP = value;
    } else if (name.compare("Cdd_1221r_LNP") == 0) {
        Cdd_1221r_LNP = value;
    } else if (name.compare("Cdd_1222r_LNP") == 0) {
        Cdd_1222r_LNP = value;
    } else if (name.compare("Cdd_1223r_LNP") == 0) {
        Cdd_1223r_LNP = value;
    } else if (name.compare("Cdd_1231r_LNP") == 0) {
        Cdd_1231r_LNP = value;
    } else if (name.compare("Cdd_1232r_LNP") == 0) {
        Cdd_1232r_LNP = value;
    } else if (name.compare("Cdd_1233r_LNP") == 0) {
        Cdd_1233r_LNP = value;
    } else if (name.compare("Cdd_1313r_LNP") == 0) {
        Cdd_1313r_LNP = value;
    } else if (name.compare("Cdd_1322r_LNP") == 0) {
        Cdd_1322r_LNP = value;
    } else if (name.compare("Cdd_1323r_LNP") == 0) {
        Cdd_1323r_LNP = value;
    } else if (name.compare("Cdd_1331r_LNP") == 0) {
        Cdd_1331r_LNP = value;
    } else if (name.compare("Cdd_1332r_LNP") == 0) {
        Cdd_1332r_LNP = value;
    } else if (name.compare("Cdd_1333r_LNP") == 0) {
        Cdd_1333r_LNP = value;
    } else if (name.compare("Cdd_2222r_LNP") == 0) {
        Cdd_2222r_LNP = value;
    } else if (name.compare("Cdd_2223r_LNP") == 0) {
        Cdd_2223r_LNP = value;
    } else if (name.compare("Cdd_2233r_LNP") == 0) {
        Cdd_2233r_LNP = value;
    } else if (name.compare("Cdd_2323r_LNP") == 0) {
        Cdd_2323r_LNP = value;
    } else if (name.compare("Cdd_2332r_LNP") == 0) {
        Cdd_2332r_LNP = value;
    } else if (name.compare("Cdd_2333r_LNP") == 0) {
        Cdd_2333r_LNP = value;
    } else if (name.compare("Cdd_3333r_LNP") == 0) {
        Cdd_3333r_LNP = value;
    } else if (name.compare("Cdd_1112i_LNP") == 0) {
        Cdd_1112i_LNP = value;
    } else if (name.compare("Cdd_1113i_LNP") == 0) {
        Cdd_1113i_LNP = value;
    } else if (name.compare("Cdd_1123i_LNP") == 0) {
        Cdd_1123i_LNP = value;
    } else if (name.compare("Cdd_1212i_LNP") == 0) {
        Cdd_1212i_LNP = value;
    } else if (name.compare("Cdd_1213i_LNP") == 0) {
        Cdd_1213i_LNP = value;
    } else if (name.compare("Cdd_1222i_LNP") == 0) {
        Cdd_1222i_LNP = value;
    } else if (name.compare("Cdd_1223i_LNP") == 0) {
        Cdd_1223i_LNP = value;
    } else if (name.compare("Cdd_1231i_LNP") == 0) {
        Cdd_1231i_LNP = value;
    } else if (name.compare("Cdd_1232i_LNP") == 0) {
        Cdd_1232i_LNP = value;
    } else if (name.compare("Cdd_1233i_LNP") == 0) {
        Cdd_1233i_LNP = value;
    } else if (name.compare("Cdd_1313i_LNP") == 0) {
        Cdd_1313i_LNP = value;
    } else if (name.compare("Cdd_1322i_LNP") == 0) {
        Cdd_1322i_LNP = value;
    } else if (name.compare("Cdd_1323i_LNP") == 0) {
        Cdd_1323i_LNP = value;
    } else if (name.compare("Cdd_1332i_LNP") == 0) {
        Cdd_1332i_LNP = value;
    } else if (name.compare("Cdd_1333i_LNP") == 0) {
        Cdd_1333i_LNP = value;
    } else if (name.compare("Cdd_2223i_LNP") == 0) {
        Cdd_2223i_LNP = value;
    } else if (name.compare("Cdd_2323i_LNP") == 0) {
        Cdd_2323i_LNP = value;
    } else if (name.compare("Cdd_2333i_LNP") == 0) {
        Cdd_2333i_LNP = value;
    } else if (name.compare("Cud1_1111r_LNP") == 0) {
        Cud1_1111r_LNP = value;
    } else if (name.compare("Cud1_1112r_LNP") == 0) {
        Cud1_1112r_LNP = value;
    } else if (name.compare("Cud1_1113r_LNP") == 0) {
        Cud1_1113r_LNP = value;
    } else if (name.compare("Cud1_1122r_LNP") == 0) {
        Cud1_1122r_LNP = value;
    } else if (name.compare("Cud1_1123r_LNP") == 0) {
        Cud1_1123r_LNP = value;
    } else if (name.compare("Cud1_1133r_LNP") == 0) {
        Cud1_1133r_LNP = value;
    } else if (name.compare("Cud1_1211r_LNP") == 0) {
        Cud1_1211r_LNP = value;
    } else if (name.compare("Cud1_1212r_LNP") == 0) {
        Cud1_1212r_LNP = value;
    } else if (name.compare("Cud1_1213r_LNP") == 0) {
        Cud1_1213r_LNP = value;
    } else if (name.compare("Cud1_1221r_LNP") == 0) {
        Cud1_1221r_LNP = value;
    } else if (name.compare("Cud1_1222r_LNP") == 0) {
        Cud1_1222r_LNP = value;
    } else if (name.compare("Cud1_1223r_LNP") == 0) {
        Cud1_1223r_LNP = value;
    } else if (name.compare("Cud1_1231r_LNP") == 0) {
        Cud1_1231r_LNP = value;
    } else if (name.compare("Cud1_1232r_LNP") == 0) {
        Cud1_1232r_LNP = value;
    } else if (name.compare("Cud1_1233r_LNP") == 0) {
        Cud1_1233r_LNP = value;
    } else if (name.compare("Cud1_1311r_LNP") == 0) {
        Cud1_1311r_LNP = value;
    } else if (name.compare("Cud1_1312r_LNP") == 0) {
        Cud1_1312r_LNP = value;
    } else if (name.compare("Cud1_1313r_LNP") == 0) {
        Cud1_1313r_LNP = value;
    } else if (name.compare("Cud1_1321r_LNP") == 0) {
        Cud1_1321r_LNP = value;
    } else if (name.compare("Cud1_1322r_LNP") == 0) {
        Cud1_1322r_LNP = value;
    } else if (name.compare("Cud1_1323r_LNP") == 0) {
        Cud1_1323r_LNP = value;
    } else if (name.compare("Cud1_1331r_LNP") == 0) {
        Cud1_1331r_LNP = value;
    } else if (name.compare("Cud1_1332r_LNP") == 0) {
        Cud1_1332r_LNP = value;
    } else if (name.compare("Cud1_1333r_LNP") == 0) {
        Cud1_1333r_LNP = value;
    } else if (name.compare("Cud1_2211r_LNP") == 0) {
        Cud1_2211r_LNP = value;
    } else if (name.compare("Cud1_2212r_LNP") == 0) {
        Cud1_2212r_LNP = value;
    } else if (name.compare("Cud1_2213r_LNP") == 0) {
        Cud1_2213r_LNP = value;
    } else if (name.compare("Cud1_2222r_LNP") == 0) {
        Cud1_2222r_LNP = value;
    } else if (name.compare("Cud1_2223r_LNP") == 0) {
        Cud1_2223r_LNP = value;
    } else if (name.compare("Cud1_2233r_LNP") == 0) {
        Cud1_2233r_LNP = value;
    } else if (name.compare("Cud1_2311r_LNP") == 0) {
        Cud1_2311r_LNP = value;
    } else if (name.compare("Cud1_2312r_LNP") == 0) {
        Cud1_2312r_LNP = value;
    } else if (name.compare("Cud1_2313r_LNP") == 0) {
        Cud1_2313r_LNP = value;
    } else if (name.compare("Cud1_2321r_LNP") == 0) {
        Cud1_2321r_LNP = value;
    } else if (name.compare("Cud1_2322r_LNP") == 0) {
        Cud1_2322r_LNP = value;
    } else if (name.compare("Cud1_2323r_LNP") == 0) {
        Cud1_2323r_LNP = value;
    } else if (name.compare("Cud1_2331r_LNP") == 0) {
        Cud1_2331r_LNP = value;
    } else if (name.compare("Cud1_2332r_LNP") == 0) {
        Cud1_2332r_LNP = value;
    } else if (name.compare("Cud1_2333r_LNP") == 0) {
        Cud1_2333r_LNP = value;
    } else if (name.compare("Cud1_3311r_LNP") == 0) {
        Cud1_3311r_LNP = value;
    } else if (name.compare("Cud1_3312r_LNP") == 0) {
        Cud1_3312r_LNP = value;
    } else if (name.compare("Cud1_3313r_LNP") == 0) {
        Cud1_3313r_LNP = value;
    } else if (name.compare("Cud1_3322r_LNP") == 0) {
        Cud1_3322r_LNP = value;
    } else if (name.compare("Cud1_3323r_LNP") == 0) {
        Cud1_3323r_LNP = value;
    } else if (name.compare("Cud1_3333r_LNP") == 0) {
        Cud1_3333r_LNP = value;
    } else if (name.compare("Cud1_1112i_LNP") == 0) {
        Cud1_1112i_LNP = value;
    } else if (name.compare("Cud1_1113i_LNP") == 0) {
        Cud1_1113i_LNP = value;
    } else if (name.compare("Cud1_1123i_LNP") == 0) {
        Cud1_1123i_LNP = value;
    } else if (name.compare("Cud1_1211i_LNP") == 0) {
        Cud1_1211i_LNP = value;
    } else if (name.compare("Cud1_1212i_LNP") == 0) {
        Cud1_1212i_LNP = value;
    } else if (name.compare("Cud1_1213i_LNP") == 0) {
        Cud1_1213i_LNP = value;
    } else if (name.compare("Cud1_1221i_LNP") == 0) {
        Cud1_1221i_LNP = value;
    } else if (name.compare("Cud1_1222i_LNP") == 0) {
        Cud1_1222i_LNP = value;
    } else if (name.compare("Cud1_1223i_LNP") == 0) {
        Cud1_1223i_LNP = value;
    } else if (name.compare("Cud1_1231i_LNP") == 0) {
        Cud1_1231i_LNP = value;
    } else if (name.compare("Cud1_1232i_LNP") == 0) {
        Cud1_1232i_LNP = value;
    } else if (name.compare("Cud1_1233i_LNP") == 0) {
        Cud1_1233i_LNP = value;
    } else if (name.compare("Cud1_1311i_LNP") == 0) {
        Cud1_1311i_LNP = value;
    } else if (name.compare("Cud1_1312i_LNP") == 0) {
        Cud1_1312i_LNP = value;
    } else if (name.compare("Cud1_1313i_LNP") == 0) {
        Cud1_1313i_LNP = value;
    } else if (name.compare("Cud1_1321i_LNP") == 0) {
        Cud1_1321i_LNP = value;
    } else if (name.compare("Cud1_1322i_LNP") == 0) {
        Cud1_1322i_LNP = value;
    } else if (name.compare("Cud1_1323i_LNP") == 0) {
        Cud1_1323i_LNP = value;
    } else if (name.compare("Cud1_1331i_LNP") == 0) {
        Cud1_1331i_LNP = value;
    } else if (name.compare("Cud1_1332i_LNP") == 0) {
        Cud1_1332i_LNP = value;
    } else if (name.compare("Cud1_1333i_LNP") == 0) {
        Cud1_1333i_LNP = value;
    } else if (name.compare("Cud1_2212i_LNP") == 0) {
        Cud1_2212i_LNP = value;
    } else if (name.compare("Cud1_2213i_LNP") == 0) {
        Cud1_2213i_LNP = value;
    } else if (name.compare("Cud1_2223i_LNP") == 0) {
        Cud1_2223i_LNP = value;
    } else if (name.compare("Cud1_2311i_LNP") == 0) {
        Cud1_2311i_LNP = value;
    } else if (name.compare("Cud1_2312i_LNP") == 0) {
        Cud1_2312i_LNP = value;
    } else if (name.compare("Cud1_2313i_LNP") == 0) {
        Cud1_2313i_LNP = value;
    } else if (name.compare("Cud1_2321i_LNP") == 0) {
        Cud1_2321i_LNP = value;
    } else if (name.compare("Cud1_2322i_LNP") == 0) {
        Cud1_2322i_LNP = value;
    } else if (name.compare("Cud1_2323i_LNP") == 0) {
        Cud1_2323i_LNP = value;
    } else if (name.compare("Cud1_2331i_LNP") == 0) {
        Cud1_2331i_LNP = value;
    } else if (name.compare("Cud1_2332i_LNP") == 0) {
        Cud1_2332i_LNP = value;
    } else if (name.compare("Cud1_2333i_LNP") == 0) {
        Cud1_2333i_LNP = value;
    } else if (name.compare("Cud1_3312i_LNP") == 0) {
        Cud1_3312i_LNP = value;
    } else if (name.compare("Cud1_3313i_LNP") == 0) {
        Cud1_3313i_LNP = value;
    } else if (name.compare("Cud1_3323i_LNP") == 0) {
        Cud1_3323i_LNP = value;
    } else if (name.compare("Cud8_1111r_LNP") == 0) {
        Cud8_1111r_LNP = value;
    } else if (name.compare("Cud8_1112r_LNP") == 0) {
        Cud8_1112r_LNP = value;
    } else if (name.compare("Cud8_1113r_LNP") == 0) {
        Cud8_1113r_LNP = value;
    } else if (name.compare("Cud8_1122r_LNP") == 0) {
        Cud8_1122r_LNP = value;
    } else if (name.compare("Cud8_1123r_LNP") == 0) {
        Cud8_1123r_LNP = value;
    } else if (name.compare("Cud8_1133r_LNP") == 0) {
        Cud8_1133r_LNP = value;
    } else if (name.compare("Cud8_1211r_LNP") == 0) {
        Cud8_1211r_LNP = value;
    } else if (name.compare("Cud8_1212r_LNP") == 0) {
        Cud8_1212r_LNP = value;
    } else if (name.compare("Cud8_1213r_LNP") == 0) {
        Cud8_1213r_LNP = value;
    } else if (name.compare("Cud8_1221r_LNP") == 0) {
        Cud8_1221r_LNP = value;
    } else if (name.compare("Cud8_1222r_LNP") == 0) {
        Cud8_1222r_LNP = value;
    } else if (name.compare("Cud8_1223r_LNP") == 0) {
        Cud8_1223r_LNP = value;
    } else if (name.compare("Cud8_1231r_LNP") == 0) {
        Cud8_1231r_LNP = value;
    } else if (name.compare("Cud8_1232r_LNP") == 0) {
        Cud8_1232r_LNP = value;
    } else if (name.compare("Cud8_1233r_LNP") == 0) {
        Cud8_1233r_LNP = value;
    } else if (name.compare("Cud8_1311r_LNP") == 0) {
        Cud8_1311r_LNP = value;
    } else if (name.compare("Cud8_1312r_LNP") == 0) {
        Cud8_1312r_LNP = value;
    } else if (name.compare("Cud8_1313r_LNP") == 0) {
        Cud8_1313r_LNP = value;
    } else if (name.compare("Cud8_1321r_LNP") == 0) {
        Cud8_1321r_LNP = value;
    } else if (name.compare("Cud8_1322r_LNP") == 0) {
        Cud8_1322r_LNP = value;
    } else if (name.compare("Cud8_1323r_LNP") == 0) {
        Cud8_1323r_LNP = value;
    } else if (name.compare("Cud8_1331r_LNP") == 0) {
        Cud8_1331r_LNP = value;
    } else if (name.compare("Cud8_1332r_LNP") == 0) {
        Cud8_1332r_LNP = value;
    } else if (name.compare("Cud8_1333r_LNP") == 0) {
        Cud8_1333r_LNP = value;
    } else if (name.compare("Cud8_2211r_LNP") == 0) {
        Cud8_2211r_LNP = value;
    } else if (name.compare("Cud8_2212r_LNP") == 0) {
        Cud8_2212r_LNP = value;
    } else if (name.compare("Cud8_2213r_LNP") == 0) {
        Cud8_2213r_LNP = value;
    } else if (name.compare("Cud8_2222r_LNP") == 0) {
        Cud8_2222r_LNP = value;
    } else if (name.compare("Cud8_2223r_LNP") == 0) {
        Cud8_2223r_LNP = value;
    } else if (name.compare("Cud8_2233r_LNP") == 0) {
        Cud8_2233r_LNP = value;
    } else if (name.compare("Cud8_2311r_LNP") == 0) {
        Cud8_2311r_LNP = value;
    } else if (name.compare("Cud8_2312r_LNP") == 0) {
        Cud8_2312r_LNP = value;
    } else if (name.compare("Cud8_2313r_LNP") == 0) {
        Cud8_2313r_LNP = value;
    } else if (name.compare("Cud8_2321r_LNP") == 0) {
        Cud8_2321r_LNP = value;
    } else if (name.compare("Cud8_2322r_LNP") == 0) {
        Cud8_2322r_LNP = value;
    } else if (name.compare("Cud8_2323r_LNP") == 0) {
        Cud8_2323r_LNP = value;
    } else if (name.compare("Cud8_2331r_LNP") == 0) {
        Cud8_2331r_LNP = value;
    } else if (name.compare("Cud8_2332r_LNP") == 0) {
        Cud8_2332r_LNP = value;
    } else if (name.compare("Cud8_2333r_LNP") == 0) {
        Cud8_2333r_LNP = value;
    } else if (name.compare("Cud8_3311r_LNP") == 0) {
        Cud8_3311r_LNP = value;
    } else if (name.compare("Cud8_3312r_LNP") == 0) {
        Cud8_3312r_LNP = value;
    } else if (name.compare("Cud8_3313r_LNP") == 0) {
        Cud8_3313r_LNP = value;
    } else if (name.compare("Cud8_3322r_LNP") == 0) {
        Cud8_3322r_LNP = value;
    } else if (name.compare("Cud8_3323r_LNP") == 0) {
        Cud8_3323r_LNP = value;
    } else if (name.compare("Cud8_3333r_LNP") == 0) {
        Cud8_3333r_LNP = value;
    } else if (name.compare("Cud8_1112i_LNP") == 0) {
        Cud8_1112i_LNP = value;
    } else if (name.compare("Cud8_1113i_LNP") == 0) {
        Cud8_1113i_LNP = value;
    } else if (name.compare("Cud8_1123i_LNP") == 0) {
        Cud8_1123i_LNP = value;
    } else if (name.compare("Cud8_1211i_LNP") == 0) {
        Cud8_1211i_LNP = value;
    } else if (name.compare("Cud8_1212i_LNP") == 0) {
        Cud8_1212i_LNP = value;
    } else if (name.compare("Cud8_1213i_LNP") == 0) {
        Cud8_1213i_LNP = value;
    } else if (name.compare("Cud8_1221i_LNP") == 0) {
        Cud8_1221i_LNP = value;
    } else if (name.compare("Cud8_1222i_LNP") == 0) {
        Cud8_1222i_LNP = value;
    } else if (name.compare("Cud8_1223i_LNP") == 0) {
        Cud8_1223i_LNP = value;
    } else if (name.compare("Cud8_1231i_LNP") == 0) {
        Cud8_1231i_LNP = value;
    } else if (name.compare("Cud8_1232i_LNP") == 0) {
        Cud8_1232i_LNP = value;
    } else if (name.compare("Cud8_1233i_LNP") == 0) {
        Cud8_1233i_LNP = value;
    } else if (name.compare("Cud8_1311i_LNP") == 0) {
        Cud8_1311i_LNP = value;
    } else if (name.compare("Cud8_1312i_LNP") == 0) {
        Cud8_1312i_LNP = value;
    } else if (name.compare("Cud8_1313i_LNP") == 0) {
        Cud8_1313i_LNP = value;
    } else if (name.compare("Cud8_1321i_LNP") == 0) {
        Cud8_1321i_LNP = value;
    } else if (name.compare("Cud8_1322i_LNP") == 0) {
        Cud8_1322i_LNP = value;
    } else if (name.compare("Cud8_1323i_LNP") == 0) {
        Cud8_1323i_LNP = value;
    } else if (name.compare("Cud8_1331i_LNP") == 0) {
        Cud8_1331i_LNP = value;
    } else if (name.compare("Cud8_1332i_LNP") == 0) {
        Cud8_1332i_LNP = value;
    } else if (name.compare("Cud8_1333i_LNP") == 0) {
        Cud8_1333i_LNP = value;
    } else if (name.compare("Cud8_2212i_LNP") == 0) {
        Cud8_2212i_LNP = value;
    } else if (name.compare("Cud8_2213i_LNP") == 0) {
        Cud8_2213i_LNP = value;
    } else if (name.compare("Cud8_2223i_LNP") == 0) {
        Cud8_2223i_LNP = value;
    } else if (name.compare("Cud8_2311i_LNP") == 0) {
        Cud8_2311i_LNP = value;
    } else if (name.compare("Cud8_2312i_LNP") == 0) {
        Cud8_2312i_LNP = value;
    } else if (name.compare("Cud8_2313i_LNP") == 0) {
        Cud8_2313i_LNP = value;
    } else if (name.compare("Cud8_2321i_LNP") == 0) {
        Cud8_2321i_LNP = value;
    } else if (name.compare("Cud8_2322i_LNP") == 0) {
        Cud8_2322i_LNP = value;
    } else if (name.compare("Cud8_2323i_LNP") == 0) {
        Cud8_2323i_LNP = value;
    } else if (name.compare("Cud8_2331i_LNP") == 0) {
        Cud8_2331i_LNP = value;
    } else if (name.compare("Cud8_2332i_LNP") == 0) {
        Cud8_2332i_LNP = value;
    } else if (name.compare("Cud8_2333i_LNP") == 0) {
        Cud8_2333i_LNP = value;
    } else if (name.compare("Cud8_3312i_LNP") == 0) {
        Cud8_3312i_LNP = value;
    } else if (name.compare("Cud8_3313i_LNP") == 0) {
        Cud8_3313i_LNP = value;
    } else if (name.compare("Cud8_3323i_LNP") == 0) {
        Cud8_3323i_LNP = value;
    } else if (name.compare("Cqu1_1111r_LNP") == 0) {
        Cqu1_1111r_LNP = value;
    } else if (name.compare("Cqu1_1112r_LNP") == 0) {
        Cqu1_1112r_LNP = value;
    } else if (name.compare("Cqu1_1113r_LNP") == 0) {
        Cqu1_1113r_LNP = value;
    } else if (name.compare("Cqu1_1122r_LNP") == 0) {
        Cqu1_1122r_LNP = value;
    } else if (name.compare("Cqu1_1123r_LNP") == 0) {
        Cqu1_1123r_LNP = value;
    } else if (name.compare("Cqu1_1133r_LNP") == 0) {
        Cqu1_1133r_LNP = value;
    } else if (name.compare("Cqu1_1211r_LNP") == 0) {
        Cqu1_1211r_LNP = value;
    } else if (name.compare("Cqu1_1212r_LNP") == 0) {
        Cqu1_1212r_LNP = value;
    } else if (name.compare("Cqu1_1213r_LNP") == 0) {
        Cqu1_1213r_LNP = value;
    } else if (name.compare("Cqu1_1221r_LNP") == 0) {
        Cqu1_1221r_LNP = value;
    } else if (name.compare("Cqu1_1222r_LNP") == 0) {
        Cqu1_1222r_LNP = value;
    } else if (name.compare("Cqu1_1223r_LNP") == 0) {
        Cqu1_1223r_LNP = value;
    } else if (name.compare("Cqu1_1231r_LNP") == 0) {
        Cqu1_1231r_LNP = value;
    } else if (name.compare("Cqu1_1232r_LNP") == 0) {
        Cqu1_1232r_LNP = value;
    } else if (name.compare("Cqu1_1233r_LNP") == 0) {
        Cqu1_1233r_LNP = value;
    } else if (name.compare("Cqu1_1311r_LNP") == 0) {
        Cqu1_1311r_LNP = value;
    } else if (name.compare("Cqu1_1312r_LNP") == 0) {
        Cqu1_1312r_LNP = value;
    } else if (name.compare("Cqu1_1313r_LNP") == 0) {
        Cqu1_1313r_LNP = value;
    } else if (name.compare("Cqu1_1321r_LNP") == 0) {
        Cqu1_1321r_LNP = value;
    } else if (name.compare("Cqu1_1322r_LNP") == 0) {
        Cqu1_1322r_LNP = value;
    } else if (name.compare("Cqu1_1323r_LNP") == 0) {
        Cqu1_1323r_LNP = value;
    } else if (name.compare("Cqu1_1331r_LNP") == 0) {
        Cqu1_1331r_LNP = value;
    } else if (name.compare("Cqu1_1332r_LNP") == 0) {
        Cqu1_1332r_LNP = value;
    } else if (name.compare("Cqu1_1333r_LNP") == 0) {
        Cqu1_1333r_LNP = value;
    } else if (name.compare("Cqu1_2211r_LNP") == 0) {
        Cqu1_2211r_LNP = value;
    } else if (name.compare("Cqu1_2212r_LNP") == 0) {
        Cqu1_2212r_LNP = value;
    } else if (name.compare("Cqu1_2213r_LNP") == 0) {
        Cqu1_2213r_LNP = value;
    } else if (name.compare("Cqu1_2222r_LNP") == 0) {
        Cqu1_2222r_LNP = value;
    } else if (name.compare("Cqu1_2223r_LNP") == 0) {
        Cqu1_2223r_LNP = value;
    } else if (name.compare("Cqu1_2233r_LNP") == 0) {
        Cqu1_2233r_LNP = value;
    } else if (name.compare("Cqu1_2311r_LNP") == 0) {
        Cqu1_2311r_LNP = value;
    } else if (name.compare("Cqu1_2312r_LNP") == 0) {
        Cqu1_2312r_LNP = value;
    } else if (name.compare("Cqu1_2313r_LNP") == 0) {
        Cqu1_2313r_LNP = value;
    } else if (name.compare("Cqu1_2321r_LNP") == 0) {
        Cqu1_2321r_LNP = value;
    } else if (name.compare("Cqu1_2322r_LNP") == 0) {
        Cqu1_2322r_LNP = value;
    } else if (name.compare("Cqu1_2323r_LNP") == 0) {
        Cqu1_2323r_LNP = value;
    } else if (name.compare("Cqu1_2331r_LNP") == 0) {
        Cqu1_2331r_LNP = value;
    } else if (name.compare("Cqu1_2332r_LNP") == 0) {
        Cqu1_2332r_LNP = value;
    } else if (name.compare("Cqu1_2333r_LNP") == 0) {
        Cqu1_2333r_LNP = value;
    } else if (name.compare("Cqu1_3311r_LNP") == 0) {
        Cqu1_3311r_LNP = value;
    } else if (name.compare("Cqu1_3312r_LNP") == 0) {
        Cqu1_3312r_LNP = value;
    } else if (name.compare("Cqu1_3313r_LNP") == 0) {
        Cqu1_3313r_LNP = value;
    } else if (name.compare("Cqu1_3322r_LNP") == 0) {
        Cqu1_3322r_LNP = value;
    } else if (name.compare("Cqu1_3323r_LNP") == 0) {
        Cqu1_3323r_LNP = value;
    } else if (name.compare("Cqu1_3333r_LNP") == 0) {
        Cqu1_3333r_LNP = value;
    } else if (name.compare("Cqu1_1112i_LNP") == 0) {
        Cqu1_1112i_LNP = value;
    } else if (name.compare("Cqu1_1113i_LNP") == 0) {
        Cqu1_1113i_LNP = value;
    } else if (name.compare("Cqu1_1123i_LNP") == 0) {
        Cqu1_1123i_LNP = value;
    } else if (name.compare("Cqu1_1211i_LNP") == 0) {
        Cqu1_1211i_LNP = value;
    } else if (name.compare("Cqu1_1212i_LNP") == 0) {
        Cqu1_1212i_LNP = value;
    } else if (name.compare("Cqu1_1213i_LNP") == 0) {
        Cqu1_1213i_LNP = value;
    } else if (name.compare("Cqu1_1221i_LNP") == 0) {
        Cqu1_1221i_LNP = value;
    } else if (name.compare("Cqu1_1222i_LNP") == 0) {
        Cqu1_1222i_LNP = value;
    } else if (name.compare("Cqu1_1223i_LNP") == 0) {
        Cqu1_1223i_LNP = value;
    } else if (name.compare("Cqu1_1231i_LNP") == 0) {
        Cqu1_1231i_LNP = value;
    } else if (name.compare("Cqu1_1232i_LNP") == 0) {
        Cqu1_1232i_LNP = value;
    } else if (name.compare("Cqu1_1233i_LNP") == 0) {
        Cqu1_1233i_LNP = value;
    } else if (name.compare("Cqu1_1311i_LNP") == 0) {
        Cqu1_1311i_LNP = value;
    } else if (name.compare("Cqu1_1312i_LNP") == 0) {
        Cqu1_1312i_LNP = value;
    } else if (name.compare("Cqu1_1313i_LNP") == 0) {
        Cqu1_1313i_LNP = value;
    } else if (name.compare("Cqu1_1321i_LNP") == 0) {
        Cqu1_1321i_LNP = value;
    } else if (name.compare("Cqu1_1322i_LNP") == 0) {
        Cqu1_1322i_LNP = value;
    } else if (name.compare("Cqu1_1323i_LNP") == 0) {
        Cqu1_1323i_LNP = value;
    } else if (name.compare("Cqu1_1331i_LNP") == 0) {
        Cqu1_1331i_LNP = value;
    } else if (name.compare("Cqu1_1332i_LNP") == 0) {
        Cqu1_1332i_LNP = value;
    } else if (name.compare("Cqu1_1333i_LNP") == 0) {
        Cqu1_1333i_LNP = value;
    } else if (name.compare("Cqu1_2212i_LNP") == 0) {
        Cqu1_2212i_LNP = value;
    } else if (name.compare("Cqu1_2213i_LNP") == 0) {
        Cqu1_2213i_LNP = value;
    } else if (name.compare("Cqu1_2223i_LNP") == 0) {
        Cqu1_2223i_LNP = value;
    } else if (name.compare("Cqu1_2311i_LNP") == 0) {
        Cqu1_2311i_LNP = value;
    } else if (name.compare("Cqu1_2312i_LNP") == 0) {
        Cqu1_2312i_LNP = value;
    } else if (name.compare("Cqu1_2313i_LNP") == 0) {
        Cqu1_2313i_LNP = value;
    } else if (name.compare("Cqu1_2321i_LNP") == 0) {
        Cqu1_2321i_LNP = value;
    } else if (name.compare("Cqu1_2322i_LNP") == 0) {
        Cqu1_2322i_LNP = value;
    } else if (name.compare("Cqu1_2323i_LNP") == 0) {
        Cqu1_2323i_LNP = value;
    } else if (name.compare("Cqu1_2331i_LNP") == 0) {
        Cqu1_2331i_LNP = value;
    } else if (name.compare("Cqu1_2332i_LNP") == 0) {
        Cqu1_2332i_LNP = value;
    } else if (name.compare("Cqu1_2333i_LNP") == 0) {
        Cqu1_2333i_LNP = value;
    } else if (name.compare("Cqu1_3312i_LNP") == 0) {
        Cqu1_3312i_LNP = value;
    } else if (name.compare("Cqu1_3313i_LNP") == 0) {
        Cqu1_3313i_LNP = value;
    } else if (name.compare("Cqu1_3323i_LNP") == 0) {
        Cqu1_3323i_LNP = value;
    } else if (name.compare("Cqu8_1111r_LNP") == 0) {
        Cqu8_1111r_LNP = value;
    } else if (name.compare("Cqu8_1112r_LNP") == 0) {
        Cqu8_1112r_LNP = value;
    } else if (name.compare("Cqu8_1113r_LNP") == 0) {
        Cqu8_1113r_LNP = value;
    } else if (name.compare("Cqu8_1122r_LNP") == 0) {
        Cqu8_1122r_LNP = value;
    } else if (name.compare("Cqu8_1123r_LNP") == 0) {
        Cqu8_1123r_LNP = value;
    } else if (name.compare("Cqu8_1133r_LNP") == 0) {
        Cqu8_1133r_LNP = value;
    } else if (name.compare("Cqu8_1211r_LNP") == 0) {
        Cqu8_1211r_LNP = value;
    } else if (name.compare("Cqu8_1212r_LNP") == 0) {
        Cqu8_1212r_LNP = value;
    } else if (name.compare("Cqu8_1213r_LNP") == 0) {
        Cqu8_1213r_LNP = value;
    } else if (name.compare("Cqu8_1221r_LNP") == 0) {
        Cqu8_1221r_LNP = value;
    } else if (name.compare("Cqu8_1222r_LNP") == 0) {
        Cqu8_1222r_LNP = value;
    } else if (name.compare("Cqu8_1223r_LNP") == 0) {
        Cqu8_1223r_LNP = value;
    } else if (name.compare("Cqu8_1231r_LNP") == 0) {
        Cqu8_1231r_LNP = value;
    } else if (name.compare("Cqu8_1232r_LNP") == 0) {
        Cqu8_1232r_LNP = value;
    } else if (name.compare("Cqu8_1233r_LNP") == 0) {
        Cqu8_1233r_LNP = value;
    } else if (name.compare("Cqu8_1311r_LNP") == 0) {
        Cqu8_1311r_LNP = value;
    } else if (name.compare("Cqu8_1312r_LNP") == 0) {
        Cqu8_1312r_LNP = value;
    } else if (name.compare("Cqu8_1313r_LNP") == 0) {
        Cqu8_1313r_LNP = value;
    } else if (name.compare("Cqu8_1321r_LNP") == 0) {
        Cqu8_1321r_LNP = value;
    } else if (name.compare("Cqu8_1322r_LNP") == 0) {
        Cqu8_1322r_LNP = value;
    } else if (name.compare("Cqu8_1323r_LNP") == 0) {
        Cqu8_1323r_LNP = value;
    } else if (name.compare("Cqu8_1331r_LNP") == 0) {
        Cqu8_1331r_LNP = value;
    } else if (name.compare("Cqu8_1332r_LNP") == 0) {
        Cqu8_1332r_LNP = value;
    } else if (name.compare("Cqu8_1333r_LNP") == 0) {
        Cqu8_1333r_LNP = value;
    } else if (name.compare("Cqu8_2211r_LNP") == 0) {
        Cqu8_2211r_LNP = value;
    } else if (name.compare("Cqu8_2212r_LNP") == 0) {
        Cqu8_2212r_LNP = value;
    } else if (name.compare("Cqu8_2213r_LNP") == 0) {
        Cqu8_2213r_LNP = value;
    } else if (name.compare("Cqu8_2222r_LNP") == 0) {
        Cqu8_2222r_LNP = value;
    } else if (name.compare("Cqu8_2223r_LNP") == 0) {
        Cqu8_2223r_LNP = value;
    } else if (name.compare("Cqu8_2233r_LNP") == 0) {
        Cqu8_2233r_LNP = value;
    } else if (name.compare("Cqu8_2311r_LNP") == 0) {
        Cqu8_2311r_LNP = value;
    } else if (name.compare("Cqu8_2312r_LNP") == 0) {
        Cqu8_2312r_LNP = value;
    } else if (name.compare("Cqu8_2313r_LNP") == 0) {
        Cqu8_2313r_LNP = value;
    } else if (name.compare("Cqu8_2321r_LNP") == 0) {
        Cqu8_2321r_LNP = value;
    } else if (name.compare("Cqu8_2322r_LNP") == 0) {
        Cqu8_2322r_LNP = value;
    } else if (name.compare("Cqu8_2323r_LNP") == 0) {
        Cqu8_2323r_LNP = value;
    } else if (name.compare("Cqu8_2331r_LNP") == 0) {
        Cqu8_2331r_LNP = value;
    } else if (name.compare("Cqu8_2332r_LNP") == 0) {
        Cqu8_2332r_LNP = value;
    } else if (name.compare("Cqu8_2333r_LNP") == 0) {
        Cqu8_2333r_LNP = value;
    } else if (name.compare("Cqu8_3311r_LNP") == 0) {
        Cqu8_3311r_LNP = value;
    } else if (name.compare("Cqu8_3312r_LNP") == 0) {
        Cqu8_3312r_LNP = value;
    } else if (name.compare("Cqu8_3313r_LNP") == 0) {
        Cqu8_3313r_LNP = value;
    } else if (name.compare("Cqu8_3322r_LNP") == 0) {
        Cqu8_3322r_LNP = value;
    } else if (name.compare("Cqu8_3323r_LNP") == 0) {
        Cqu8_3323r_LNP = value;
    } else if (name.compare("Cqu8_3333r_LNP") == 0) {
        Cqu8_3333r_LNP = value;
    } else if (name.compare("Cqu8_1112i_LNP") == 0) {
        Cqu8_1112i_LNP = value;
    } else if (name.compare("Cqu8_1113i_LNP") == 0) {
        Cqu8_1113i_LNP = value;
    } else if (name.compare("Cqu8_1123i_LNP") == 0) {
        Cqu8_1123i_LNP = value;
    } else if (name.compare("Cqu8_1211i_LNP") == 0) {
        Cqu8_1211i_LNP = value;
    } else if (name.compare("Cqu8_1212i_LNP") == 0) {
        Cqu8_1212i_LNP = value;
    } else if (name.compare("Cqu8_1213i_LNP") == 0) {
        Cqu8_1213i_LNP = value;
    } else if (name.compare("Cqu8_1221i_LNP") == 0) {
        Cqu8_1221i_LNP = value;
    } else if (name.compare("Cqu8_1222i_LNP") == 0) {
        Cqu8_1222i_LNP = value;
    } else if (name.compare("Cqu8_1223i_LNP") == 0) {
        Cqu8_1223i_LNP = value;
    } else if (name.compare("Cqu8_1231i_LNP") == 0) {
        Cqu8_1231i_LNP = value;
    } else if (name.compare("Cqu8_1232i_LNP") == 0) {
        Cqu8_1232i_LNP = value;
    } else if (name.compare("Cqu8_1233i_LNP") == 0) {
        Cqu8_1233i_LNP = value;
    } else if (name.compare("Cqu8_1311i_LNP") == 0) {
        Cqu8_1311i_LNP = value;
    } else if (name.compare("Cqu8_1312i_LNP") == 0) {
        Cqu8_1312i_LNP = value;
    } else if (name.compare("Cqu8_1313i_LNP") == 0) {
        Cqu8_1313i_LNP = value;
    } else if (name.compare("Cqu8_1321i_LNP") == 0) {
        Cqu8_1321i_LNP = value;
    } else if (name.compare("Cqu8_1322i_LNP") == 0) {
        Cqu8_1322i_LNP = value;
    } else if (name.compare("Cqu8_1323i_LNP") == 0) {
        Cqu8_1323i_LNP = value;
    } else if (name.compare("Cqu8_1331i_LNP") == 0) {
        Cqu8_1331i_LNP = value;
    } else if (name.compare("Cqu8_1332i_LNP") == 0) {
        Cqu8_1332i_LNP = value;
    } else if (name.compare("Cqu8_1333i_LNP") == 0) {
        Cqu8_1333i_LNP = value;
    } else if (name.compare("Cqu8_2212i_LNP") == 0) {
        Cqu8_2212i_LNP = value;
    } else if (name.compare("Cqu8_2213i_LNP") == 0) {
        Cqu8_2213i_LNP = value;
    } else if (name.compare("Cqu8_2223i_LNP") == 0) {
        Cqu8_2223i_LNP = value;
    } else if (name.compare("Cqu8_2311i_LNP") == 0) {
        Cqu8_2311i_LNP = value;
    } else if (name.compare("Cqu8_2312i_LNP") == 0) {
        Cqu8_2312i_LNP = value;
    } else if (name.compare("Cqu8_2313i_LNP") == 0) {
        Cqu8_2313i_LNP = value;
    } else if (name.compare("Cqu8_2321i_LNP") == 0) {
        Cqu8_2321i_LNP = value;
    } else if (name.compare("Cqu8_2322i_LNP") == 0) {
        Cqu8_2322i_LNP = value;
    } else if (name.compare("Cqu8_2323i_LNP") == 0) {
        Cqu8_2323i_LNP = value;
    } else if (name.compare("Cqu8_2331i_LNP") == 0) {
        Cqu8_2331i_LNP = value;
    } else if (name.compare("Cqu8_2332i_LNP") == 0) {
        Cqu8_2332i_LNP = value;
    } else if (name.compare("Cqu8_2333i_LNP") == 0) {
        Cqu8_2333i_LNP = value;
    } else if (name.compare("Cqu8_3312i_LNP") == 0) {
        Cqu8_3312i_LNP = value;
    } else if (name.compare("Cqu8_3313i_LNP") == 0) {
        Cqu8_3313i_LNP = value;
    } else if (name.compare("Cqu8_3323i_LNP") == 0) {
        Cqu8_3323i_LNP = value;
    } else if (name.compare("Cqd1_1111r_LNP") == 0) {
        Cqd1_1111r_LNP = value;
    } else if (name.compare("Cqd1_1112r_LNP") == 0) {
        Cqd1_1112r_LNP = value;
    } else if (name.compare("Cqd1_1113r_LNP") == 0) {
        Cqd1_1113r_LNP = value;
    } else if (name.compare("Cqd1_1122r_LNP") == 0) {
        Cqd1_1122r_LNP = value;
    } else if (name.compare("Cqd1_1123r_LNP") == 0) {
        Cqd1_1123r_LNP = value;
    } else if (name.compare("Cqd1_1133r_LNP") == 0) {
        Cqd1_1133r_LNP = value;
    } else if (name.compare("Cqd1_1211r_LNP") == 0) {
        Cqd1_1211r_LNP = value;
    } else if (name.compare("Cqd1_1212r_LNP") == 0) {
        Cqd1_1212r_LNP = value;
    } else if (name.compare("Cqd1_1213r_LNP") == 0) {
        Cqd1_1213r_LNP = value;
    } else if (name.compare("Cqd1_1221r_LNP") == 0) {
        Cqd1_1221r_LNP = value;
    } else if (name.compare("Cqd1_1222r_LNP") == 0) {
        Cqd1_1222r_LNP = value;
    } else if (name.compare("Cqd1_1223r_LNP") == 0) {
        Cqd1_1223r_LNP = value;
    } else if (name.compare("Cqd1_1231r_LNP") == 0) {
        Cqd1_1231r_LNP = value;
    } else if (name.compare("Cqd1_1232r_LNP") == 0) {
        Cqd1_1232r_LNP = value;
    } else if (name.compare("Cqd1_1233r_LNP") == 0) {
        Cqd1_1233r_LNP = value;
    } else if (name.compare("Cqd1_1311r_LNP") == 0) {
        Cqd1_1311r_LNP = value;
    } else if (name.compare("Cqd1_1312r_LNP") == 0) {
        Cqd1_1312r_LNP = value;
    } else if (name.compare("Cqd1_1313r_LNP") == 0) {
        Cqd1_1313r_LNP = value;
    } else if (name.compare("Cqd1_1321r_LNP") == 0) {
        Cqd1_1321r_LNP = value;
    } else if (name.compare("Cqd1_1322r_LNP") == 0) {
        Cqd1_1322r_LNP = value;
    } else if (name.compare("Cqd1_1323r_LNP") == 0) {
        Cqd1_1323r_LNP = value;
    } else if (name.compare("Cqd1_1331r_LNP") == 0) {
        Cqd1_1331r_LNP = value;
    } else if (name.compare("Cqd1_1332r_LNP") == 0) {
        Cqd1_1332r_LNP = value;
    } else if (name.compare("Cqd1_1333r_LNP") == 0) {
        Cqd1_1333r_LNP = value;
    } else if (name.compare("Cqd1_2211r_LNP") == 0) {
        Cqd1_2211r_LNP = value;
    } else if (name.compare("Cqd1_2212r_LNP") == 0) {
        Cqd1_2212r_LNP = value;
    } else if (name.compare("Cqd1_2213r_LNP") == 0) {
        Cqd1_2213r_LNP = value;
    } else if (name.compare("Cqd1_2222r_LNP") == 0) {
        Cqd1_2222r_LNP = value;
    } else if (name.compare("Cqd1_2223r_LNP") == 0) {
        Cqd1_2223r_LNP = value;
    } else if (name.compare("Cqd1_2233r_LNP") == 0) {
        Cqd1_2233r_LNP = value;
    } else if (name.compare("Cqd1_2311r_LNP") == 0) {
        Cqd1_2311r_LNP = value;
    } else if (name.compare("Cqd1_2312r_LNP") == 0) {
        Cqd1_2312r_LNP = value;
    } else if (name.compare("Cqd1_2313r_LNP") == 0) {
        Cqd1_2313r_LNP = value;
    } else if (name.compare("Cqd1_2321r_LNP") == 0) {
        Cqd1_2321r_LNP = value;
    } else if (name.compare("Cqd1_2322r_LNP") == 0) {
        Cqd1_2322r_LNP = value;
    } else if (name.compare("Cqd1_2323r_LNP") == 0) {
        Cqd1_2323r_LNP = value;
    } else if (name.compare("Cqd1_2331r_LNP") == 0) {
        Cqd1_2331r_LNP = value;
    } else if (name.compare("Cqd1_2332r_LNP") == 0) {
        Cqd1_2332r_LNP = value;
    } else if (name.compare("Cqd1_2333r_LNP") == 0) {
        Cqd1_2333r_LNP = value;
    } else if (name.compare("Cqd1_3311r_LNP") == 0) {
        Cqd1_3311r_LNP = value;
    } else if (name.compare("Cqd1_3312r_LNP") == 0) {
        Cqd1_3312r_LNP = value;
    } else if (name.compare("Cqd1_3313r_LNP") == 0) {
        Cqd1_3313r_LNP = value;
    } else if (name.compare("Cqd1_3322r_LNP") == 0) {
        Cqd1_3322r_LNP = value;
    } else if (name.compare("Cqd1_3323r_LNP") == 0) {
        Cqd1_3323r_LNP = value;
    } else if (name.compare("Cqd1_3333r_LNP") == 0) {
        Cqd1_3333r_LNP = value;
    } else if (name.compare("Cqd1_1112i_LNP") == 0) {
        Cqd1_1112i_LNP = value;
    } else if (name.compare("Cqd1_1113i_LNP") == 0) {
        Cqd1_1113i_LNP = value;
    } else if (name.compare("Cqd1_1123i_LNP") == 0) {
        Cqd1_1123i_LNP = value;
    } else if (name.compare("Cqd1_1211i_LNP") == 0) {
        Cqd1_1211i_LNP = value;
    } else if (name.compare("Cqd1_1212i_LNP") == 0) {
        Cqd1_1212i_LNP = value;
    } else if (name.compare("Cqd1_1213i_LNP") == 0) {
        Cqd1_1213i_LNP = value;
    } else if (name.compare("Cqd1_1221i_LNP") == 0) {
        Cqd1_1221i_LNP = value;
    } else if (name.compare("Cqd1_1222i_LNP") == 0) {
        Cqd1_1222i_LNP = value;
    } else if (name.compare("Cqd1_1223i_LNP") == 0) {
        Cqd1_1223i_LNP = value;
    } else if (name.compare("Cqd1_1231i_LNP") == 0) {
        Cqd1_1231i_LNP = value;
    } else if (name.compare("Cqd1_1232i_LNP") == 0) {
        Cqd1_1232i_LNP = value;
    } else if (name.compare("Cqd1_1233i_LNP") == 0) {
        Cqd1_1233i_LNP = value;
    } else if (name.compare("Cqd1_1311i_LNP") == 0) {
        Cqd1_1311i_LNP = value;
    } else if (name.compare("Cqd1_1312i_LNP") == 0) {
        Cqd1_1312i_LNP = value;
    } else if (name.compare("Cqd1_1313i_LNP") == 0) {
        Cqd1_1313i_LNP = value;
    } else if (name.compare("Cqd1_1321i_LNP") == 0) {
        Cqd1_1321i_LNP = value;
    } else if (name.compare("Cqd1_1322i_LNP") == 0) {
        Cqd1_1322i_LNP = value;
    } else if (name.compare("Cqd1_1323i_LNP") == 0) {
        Cqd1_1323i_LNP = value;
    } else if (name.compare("Cqd1_1331i_LNP") == 0) {
        Cqd1_1331i_LNP = value;
    } else if (name.compare("Cqd1_1332i_LNP") == 0) {
        Cqd1_1332i_LNP = value;
    } else if (name.compare("Cqd1_1333i_LNP") == 0) {
        Cqd1_1333i_LNP = value;
    } else if (name.compare("Cqd1_2212i_LNP") == 0) {
        Cqd1_2212i_LNP = value;
    } else if (name.compare("Cqd1_2213i_LNP") == 0) {
        Cqd1_2213i_LNP = value;
    } else if (name.compare("Cqd1_2223i_LNP") == 0) {
        Cqd1_2223i_LNP = value;
    } else if (name.compare("Cqd1_2311i_LNP") == 0) {
        Cqd1_2311i_LNP = value;
    } else if (name.compare("Cqd1_2312i_LNP") == 0) {
        Cqd1_2312i_LNP = value;
    } else if (name.compare("Cqd1_2313i_LNP") == 0) {
        Cqd1_2313i_LNP = value;
    } else if (name.compare("Cqd1_2321i_LNP") == 0) {
        Cqd1_2321i_LNP = value;
    } else if (name.compare("Cqd1_2322i_LNP") == 0) {
        Cqd1_2322i_LNP = value;
    } else if (name.compare("Cqd1_2323i_LNP") == 0) {
        Cqd1_2323i_LNP = value;
    } else if (name.compare("Cqd1_2331i_LNP") == 0) {
        Cqd1_2331i_LNP = value;
    } else if (name.compare("Cqd1_2332i_LNP") == 0) {
        Cqd1_2332i_LNP = value;
    } else if (name.compare("Cqd1_2333i_LNP") == 0) {
        Cqd1_2333i_LNP = value;
    } else if (name.compare("Cqd1_3312i_LNP") == 0) {
        Cqd1_3312i_LNP = value;
    } else if (name.compare("Cqd1_3313i_LNP") == 0) {
        Cqd1_3313i_LNP = value;
    } else if (name.compare("Cqd1_3323i_LNP") == 0) {
        Cqd1_3323i_LNP = value;
    } else if (name.compare("Cqd8_1111r_LNP") == 0) {
        Cqd8_1111r_LNP = value;
    } else if (name.compare("Cqd8_1112r_LNP") == 0) {
        Cqd8_1112r_LNP = value;
    } else if (name.compare("Cqd8_1113r_LNP") == 0) {
        Cqd8_1113r_LNP = value;
    } else if (name.compare("Cqd8_1122r_LNP") == 0) {
        Cqd8_1122r_LNP = value;
    } else if (name.compare("Cqd8_1123r_LNP") == 0) {
        Cqd8_1123r_LNP = value;
    } else if (name.compare("Cqd8_1133r_LNP") == 0) {
        Cqd8_1133r_LNP = value;
    } else if (name.compare("Cqd8_1211r_LNP") == 0) {
        Cqd8_1211r_LNP = value;
    } else if (name.compare("Cqd8_1212r_LNP") == 0) {
        Cqd8_1212r_LNP = value;
    } else if (name.compare("Cqd8_1213r_LNP") == 0) {
        Cqd8_1213r_LNP = value;
    } else if (name.compare("Cqd8_1221r_LNP") == 0) {
        Cqd8_1221r_LNP = value;
    } else if (name.compare("Cqd8_1222r_LNP") == 0) {
        Cqd8_1222r_LNP = value;
    } else if (name.compare("Cqd8_1223r_LNP") == 0) {
        Cqd8_1223r_LNP = value;
    } else if (name.compare("Cqd8_1231r_LNP") == 0) {
        Cqd8_1231r_LNP = value;
    } else if (name.compare("Cqd8_1232r_LNP") == 0) {
        Cqd8_1232r_LNP = value;
    } else if (name.compare("Cqd8_1233r_LNP") == 0) {
        Cqd8_1233r_LNP = value;
    } else if (name.compare("Cqd8_1311r_LNP") == 0) {
        Cqd8_1311r_LNP = value;
    } else if (name.compare("Cqd8_1312r_LNP") == 0) {
        Cqd8_1312r_LNP = value;
    } else if (name.compare("Cqd8_1313r_LNP") == 0) {
        Cqd8_1313r_LNP = value;
    } else if (name.compare("Cqd8_1321r_LNP") == 0) {
        Cqd8_1321r_LNP = value;
    } else if (name.compare("Cqd8_1322r_LNP") == 0) {
        Cqd8_1322r_LNP = value;
    } else if (name.compare("Cqd8_1323r_LNP") == 0) {
        Cqd8_1323r_LNP = value;
    } else if (name.compare("Cqd8_1331r_LNP") == 0) {
        Cqd8_1331r_LNP = value;
    } else if (name.compare("Cqd8_1332r_LNP") == 0) {
        Cqd8_1332r_LNP = value;
    } else if (name.compare("Cqd8_1333r_LNP") == 0) {
        Cqd8_1333r_LNP = value;
    } else if (name.compare("Cqd8_2211r_LNP") == 0) {
        Cqd8_2211r_LNP = value;
    } else if (name.compare("Cqd8_2212r_LNP") == 0) {
        Cqd8_2212r_LNP = value;
    } else if (name.compare("Cqd8_2213r_LNP") == 0) {
        Cqd8_2213r_LNP = value;
    } else if (name.compare("Cqd8_2222r_LNP") == 0) {
        Cqd8_2222r_LNP = value;
    } else if (name.compare("Cqd8_2223r_LNP") == 0) {
        Cqd8_2223r_LNP = value;
    } else if (name.compare("Cqd8_2233r_LNP") == 0) {
        Cqd8_2233r_LNP = value;
    } else if (name.compare("Cqd8_2311r_LNP") == 0) {
        Cqd8_2311r_LNP = value;
    } else if (name.compare("Cqd8_2312r_LNP") == 0) {
        Cqd8_2312r_LNP = value;
    } else if (name.compare("Cqd8_2313r_LNP") == 0) {
        Cqd8_2313r_LNP = value;
    } else if (name.compare("Cqd8_2321r_LNP") == 0) {
        Cqd8_2321r_LNP = value;
    } else if (name.compare("Cqd8_2322r_LNP") == 0) {
        Cqd8_2322r_LNP = value;
    } else if (name.compare("Cqd8_2323r_LNP") == 0) {
        Cqd8_2323r_LNP = value;
    } else if (name.compare("Cqd8_2331r_LNP") == 0) {
        Cqd8_2331r_LNP = value;
    } else if (name.compare("Cqd8_2332r_LNP") == 0) {
        Cqd8_2332r_LNP = value;
    } else if (name.compare("Cqd8_2333r_LNP") == 0) {
        Cqd8_2333r_LNP = value;
    } else if (name.compare("Cqd8_3311r_LNP") == 0) {
        Cqd8_3311r_LNP = value;
    } else if (name.compare("Cqd8_3312r_LNP") == 0) {
        Cqd8_3312r_LNP = value;
    } else if (name.compare("Cqd8_3313r_LNP") == 0) {
        Cqd8_3313r_LNP = value;
    } else if (name.compare("Cqd8_3322r_LNP") == 0) {
        Cqd8_3322r_LNP = value;
    } else if (name.compare("Cqd8_3323r_LNP") == 0) {
        Cqd8_3323r_LNP = value;
    } else if (name.compare("Cqd8_3333r_LNP") == 0) {
        Cqd8_3333r_LNP = value;
    } else if (name.compare("Cqd8_1112i_LNP") == 0) {
        Cqd8_1112i_LNP = value;
    } else if (name.compare("Cqd8_1113i_LNP") == 0) {
        Cqd8_1113i_LNP = value;
    } else if (name.compare("Cqd8_1123i_LNP") == 0) {
        Cqd8_1123i_LNP = value;
    } else if (name.compare("Cqd8_1211i_LNP") == 0) {
        Cqd8_1211i_LNP = value;
    } else if (name.compare("Cqd8_1212i_LNP") == 0) {
        Cqd8_1212i_LNP = value;
    } else if (name.compare("Cqd8_1213i_LNP") == 0) {
        Cqd8_1213i_LNP = value;
    } else if (name.compare("Cqd8_1221i_LNP") == 0) {
        Cqd8_1221i_LNP = value;
    } else if (name.compare("Cqd8_1222i_LNP") == 0) {
        Cqd8_1222i_LNP = value;
    } else if (name.compare("Cqd8_1223i_LNP") == 0) {
        Cqd8_1223i_LNP = value;
    } else if (name.compare("Cqd8_1231i_LNP") == 0) {
        Cqd8_1231i_LNP = value;
    } else if (name.compare("Cqd8_1232i_LNP") == 0) {
        Cqd8_1232i_LNP = value;
    } else if (name.compare("Cqd8_1233i_LNP") == 0) {
        Cqd8_1233i_LNP = value;
    } else if (name.compare("Cqd8_1311i_LNP") == 0) {
        Cqd8_1311i_LNP = value;
    } else if (name.compare("Cqd8_1312i_LNP") == 0) {
        Cqd8_1312i_LNP = value;
    } else if (name.compare("Cqd8_1313i_LNP") == 0) {
        Cqd8_1313i_LNP = value;
    } else if (name.compare("Cqd8_1321i_LNP") == 0) {
        Cqd8_1321i_LNP = value;
    } else if (name.compare("Cqd8_1322i_LNP") == 0) {
        Cqd8_1322i_LNP = value;
    } else if (name.compare("Cqd8_1323i_LNP") == 0) {
        Cqd8_1323i_LNP = value;
    } else if (name.compare("Cqd8_1331i_LNP") == 0) {
        Cqd8_1331i_LNP = value;
    } else if (name.compare("Cqd8_1332i_LNP") == 0) {
        Cqd8_1332i_LNP = value;
    } else if (name.compare("Cqd8_1333i_LNP") == 0) {
        Cqd8_1333i_LNP = value;
    } else if (name.compare("Cqd8_2212i_LNP") == 0) {
        Cqd8_2212i_LNP = value;
    } else if (name.compare("Cqd8_2213i_LNP") == 0) {
        Cqd8_2213i_LNP = value;
    } else if (name.compare("Cqd8_2223i_LNP") == 0) {
        Cqd8_2223i_LNP = value;
    } else if (name.compare("Cqd8_2311i_LNP") == 0) {
        Cqd8_2311i_LNP = value;
    } else if (name.compare("Cqd8_2312i_LNP") == 0) {
        Cqd8_2312i_LNP = value;
    } else if (name.compare("Cqd8_2313i_LNP") == 0) {
        Cqd8_2313i_LNP = value;
    } else if (name.compare("Cqd8_2321i_LNP") == 0) {
        Cqd8_2321i_LNP = value;
    } else if (name.compare("Cqd8_2322i_LNP") == 0) {
        Cqd8_2322i_LNP = value;
    } else if (name.compare("Cqd8_2323i_LNP") == 0) {
        Cqd8_2323i_LNP = value;
    } else if (name.compare("Cqd8_2331i_LNP") == 0) {
        Cqd8_2331i_LNP = value;
    } else if (name.compare("Cqd8_2332i_LNP") == 0) {
        Cqd8_2332i_LNP = value;
    } else if (name.compare("Cqd8_2333i_LNP") == 0) {
        Cqd8_2333i_LNP = value;
    } else if (name.compare("Cqd8_3312i_LNP") == 0) {
        Cqd8_3312i_LNP = value;
    } else if (name.compare("Cqd8_3313i_LNP") == 0) {
        Cqd8_3313i_LNP = value;
    } else if (name.compare("Cqd8_3323i_LNP") == 0) {
        Cqd8_3323i_LNP = value;
    } else if (name.compare("Cquqd1_1111r_LNP") == 0) {
        Cquqd1_1111r_LNP = value;
    } else if (name.compare("Cquqd1_1112r_LNP") == 0) {
        Cquqd1_1112r_LNP = value;
    } else if (name.compare("Cquqd1_1113r_LNP") == 0) {
        Cquqd1_1113r_LNP = value;
    } else if (name.compare("Cquqd1_1121r_LNP") == 0) {
        Cquqd1_1121r_LNP = value;
    } else if (name.compare("Cquqd1_1122r_LNP") == 0) {
        Cquqd1_1122r_LNP = value;
    } else if (name.compare("Cquqd1_1123r_LNP") == 0) {
        Cquqd1_1123r_LNP = value;
    } else if (name.compare("Cquqd1_1131r_LNP") == 0) {
        Cquqd1_1131r_LNP = value;
    } else if (name.compare("Cquqd1_1132r_LNP") == 0) {
        Cquqd1_1132r_LNP = value;
    } else if (name.compare("Cquqd1_1133r_LNP") == 0) {
        Cquqd1_1133r_LNP = value;
    } else if (name.compare("Cquqd1_1211r_LNP") == 0) {
        Cquqd1_1211r_LNP = value;
    } else if (name.compare("Cquqd1_1212r_LNP") == 0) {
        Cquqd1_1212r_LNP = value;
    } else if (name.compare("Cquqd1_1213r_LNP") == 0) {
        Cquqd1_1213r_LNP = value;
    } else if (name.compare("Cquqd1_1221r_LNP") == 0) {
        Cquqd1_1221r_LNP = value;
    } else if (name.compare("Cquqd1_1222r_LNP") == 0) {
        Cquqd1_1222r_LNP = value;
    } else if (name.compare("Cquqd1_1223r_LNP") == 0) {
        Cquqd1_1223r_LNP = value;
    } else if (name.compare("Cquqd1_1231r_LNP") == 0) {
        Cquqd1_1231r_LNP = value;
    } else if (name.compare("Cquqd1_1232r_LNP") == 0) {
        Cquqd1_1232r_LNP = value;
    } else if (name.compare("Cquqd1_1233r_LNP") == 0) {
        Cquqd1_1233r_LNP = value;
    } else if (name.compare("Cquqd1_1311r_LNP") == 0) {
        Cquqd1_1311r_LNP = value;
    } else if (name.compare("Cquqd1_1312r_LNP") == 0) {
        Cquqd1_1312r_LNP = value;
    } else if (name.compare("Cquqd1_1313r_LNP") == 0) {
        Cquqd1_1313r_LNP = value;
    } else if (name.compare("Cquqd1_1321r_LNP") == 0) {
        Cquqd1_1321r_LNP = value;
    } else if (name.compare("Cquqd1_1322r_LNP") == 0) {
        Cquqd1_1322r_LNP = value;
    } else if (name.compare("Cquqd1_1323r_LNP") == 0) {
        Cquqd1_1323r_LNP = value;
    } else if (name.compare("Cquqd1_1331r_LNP") == 0) {
        Cquqd1_1331r_LNP = value;
    } else if (name.compare("Cquqd1_1332r_LNP") == 0) {
        Cquqd1_1332r_LNP = value;
    } else if (name.compare("Cquqd1_1333r_LNP") == 0) {
        Cquqd1_1333r_LNP = value;
    } else if (name.compare("Cquqd1_2111r_LNP") == 0) {
        Cquqd1_2111r_LNP = value;
    } else if (name.compare("Cquqd1_2112r_LNP") == 0) {
        Cquqd1_2112r_LNP = value;
    } else if (name.compare("Cquqd1_2113r_LNP") == 0) {
        Cquqd1_2113r_LNP = value;
    } else if (name.compare("Cquqd1_2121r_LNP") == 0) {
        Cquqd1_2121r_LNP = value;
    } else if (name.compare("Cquqd1_2122r_LNP") == 0) {
        Cquqd1_2122r_LNP = value;
    } else if (name.compare("Cquqd1_2123r_LNP") == 0) {
        Cquqd1_2123r_LNP = value;
    } else if (name.compare("Cquqd1_2131r_LNP") == 0) {
        Cquqd1_2131r_LNP = value;
    } else if (name.compare("Cquqd1_2132r_LNP") == 0) {
        Cquqd1_2132r_LNP = value;
    } else if (name.compare("Cquqd1_2133r_LNP") == 0) {
        Cquqd1_2133r_LNP = value;
    } else if (name.compare("Cquqd1_2211r_LNP") == 0) {
        Cquqd1_2211r_LNP = value;
    } else if (name.compare("Cquqd1_2212r_LNP") == 0) {
        Cquqd1_2212r_LNP = value;
    } else if (name.compare("Cquqd1_2213r_LNP") == 0) {
        Cquqd1_2213r_LNP = value;
    } else if (name.compare("Cquqd1_2221r_LNP") == 0) {
        Cquqd1_2221r_LNP = value;
    } else if (name.compare("Cquqd1_2222r_LNP") == 0) {
        Cquqd1_2222r_LNP = value;
    } else if (name.compare("Cquqd1_2223r_LNP") == 0) {
        Cquqd1_2223r_LNP = value;
    } else if (name.compare("Cquqd1_2231r_LNP") == 0) {
        Cquqd1_2231r_LNP = value;
    } else if (name.compare("Cquqd1_2232r_LNP") == 0) {
        Cquqd1_2232r_LNP = value;
    } else if (name.compare("Cquqd1_2233r_LNP") == 0) {
        Cquqd1_2233r_LNP = value;
    } else if (name.compare("Cquqd1_2311r_LNP") == 0) {
        Cquqd1_2311r_LNP = value;
    } else if (name.compare("Cquqd1_2312r_LNP") == 0) {
        Cquqd1_2312r_LNP = value;
    } else if (name.compare("Cquqd1_2313r_LNP") == 0) {
        Cquqd1_2313r_LNP = value;
    } else if (name.compare("Cquqd1_2321r_LNP") == 0) {
        Cquqd1_2321r_LNP = value;
    } else if (name.compare("Cquqd1_2322r_LNP") == 0) {
        Cquqd1_2322r_LNP = value;
    } else if (name.compare("Cquqd1_2323r_LNP") == 0) {
        Cquqd1_2323r_LNP = value;
    } else if (name.compare("Cquqd1_2331r_LNP") == 0) {
        Cquqd1_2331r_LNP = value;
    } else if (name.compare("Cquqd1_2332r_LNP") == 0) {
        Cquqd1_2332r_LNP = value;
    } else if (name.compare("Cquqd1_2333r_LNP") == 0) {
        Cquqd1_2333r_LNP = value;
    } else if (name.compare("Cquqd1_3111r_LNP") == 0) {
        Cquqd1_3111r_LNP = value;
    } else if (name.compare("Cquqd1_3112r_LNP") == 0) {
        Cquqd1_3112r_LNP = value;
    } else if (name.compare("Cquqd1_3113r_LNP") == 0) {
        Cquqd1_3113r_LNP = value;
    } else if (name.compare("Cquqd1_3121r_LNP") == 0) {
        Cquqd1_3121r_LNP = value;
    } else if (name.compare("Cquqd1_3122r_LNP") == 0) {
        Cquqd1_3122r_LNP = value;
    } else if (name.compare("Cquqd1_3123r_LNP") == 0) {
        Cquqd1_3123r_LNP = value;
    } else if (name.compare("Cquqd1_3131r_LNP") == 0) {
        Cquqd1_3131r_LNP = value;
    } else if (name.compare("Cquqd1_3132r_LNP") == 0) {
        Cquqd1_3132r_LNP = value;
    } else if (name.compare("Cquqd1_3133r_LNP") == 0) {
        Cquqd1_3133r_LNP = value;
    } else if (name.compare("Cquqd1_3211r_LNP") == 0) {
        Cquqd1_3211r_LNP = value;
    } else if (name.compare("Cquqd1_3212r_LNP") == 0) {
        Cquqd1_3212r_LNP = value;
    } else if (name.compare("Cquqd1_3213r_LNP") == 0) {
        Cquqd1_3213r_LNP = value;
    } else if (name.compare("Cquqd1_3221r_LNP") == 0) {
        Cquqd1_3221r_LNP = value;
    } else if (name.compare("Cquqd1_3222r_LNP") == 0) {
        Cquqd1_3222r_LNP = value;
    } else if (name.compare("Cquqd1_3223r_LNP") == 0) {
        Cquqd1_3223r_LNP = value;
    } else if (name.compare("Cquqd1_3231r_LNP") == 0) {
        Cquqd1_3231r_LNP = value;
    } else if (name.compare("Cquqd1_3232r_LNP") == 0) {
        Cquqd1_3232r_LNP = value;
    } else if (name.compare("Cquqd1_3233r_LNP") == 0) {
        Cquqd1_3233r_LNP = value;
    } else if (name.compare("Cquqd1_3311r_LNP") == 0) {
        Cquqd1_3311r_LNP = value;
    } else if (name.compare("Cquqd1_3312r_LNP") == 0) {
        Cquqd1_3312r_LNP = value;
    } else if (name.compare("Cquqd1_3313r_LNP") == 0) {
        Cquqd1_3313r_LNP = value;
    } else if (name.compare("Cquqd1_3321r_LNP") == 0) {
        Cquqd1_3321r_LNP = value;
    } else if (name.compare("Cquqd1_3322r_LNP") == 0) {
        Cquqd1_3322r_LNP = value;
    } else if (name.compare("Cquqd1_3323r_LNP") == 0) {
        Cquqd1_3323r_LNP = value;
    } else if (name.compare("Cquqd1_3331r_LNP") == 0) {
        Cquqd1_3331r_LNP = value;
    } else if (name.compare("Cquqd1_3332r_LNP") == 0) {
        Cquqd1_3332r_LNP = value;
    } else if (name.compare("Cquqd1_3333r_LNP") == 0) {
        Cquqd1_3333r_LNP = value;
    } else if (name.compare("Cquqd1_1111i_LNP") == 0) {
        Cquqd1_1111i_LNP = value;
    } else if (name.compare("Cquqd1_1112i_LNP") == 0) {
        Cquqd1_1112i_LNP = value;
    } else if (name.compare("Cquqd1_1113i_LNP") == 0) {
        Cquqd1_1113i_LNP = value;
    } else if (name.compare("Cquqd1_1121i_LNP") == 0) {
        Cquqd1_1121i_LNP = value;
    } else if (name.compare("Cquqd1_1122i_LNP") == 0) {
        Cquqd1_1122i_LNP = value;
    } else if (name.compare("Cquqd1_1123i_LNP") == 0) {
        Cquqd1_1123i_LNP = value;
    } else if (name.compare("Cquqd1_1131i_LNP") == 0) {
        Cquqd1_1131i_LNP = value;
    } else if (name.compare("Cquqd1_1132i_LNP") == 0) {
        Cquqd1_1132i_LNP = value;
    } else if (name.compare("Cquqd1_1133i_LNP") == 0) {
        Cquqd1_1133i_LNP = value;
    } else if (name.compare("Cquqd1_1211i_LNP") == 0) {
        Cquqd1_1211i_LNP = value;
    } else if (name.compare("Cquqd1_1212i_LNP") == 0) {
        Cquqd1_1212i_LNP = value;
    } else if (name.compare("Cquqd1_1213i_LNP") == 0) {
        Cquqd1_1213i_LNP = value;
    } else if (name.compare("Cquqd1_1221i_LNP") == 0) {
        Cquqd1_1221i_LNP = value;
    } else if (name.compare("Cquqd1_1222i_LNP") == 0) {
        Cquqd1_1222i_LNP = value;
    } else if (name.compare("Cquqd1_1223i_LNP") == 0) {
        Cquqd1_1223i_LNP = value;
    } else if (name.compare("Cquqd1_1231i_LNP") == 0) {
        Cquqd1_1231i_LNP = value;
    } else if (name.compare("Cquqd1_1232i_LNP") == 0) {
        Cquqd1_1232i_LNP = value;
    } else if (name.compare("Cquqd1_1233i_LNP") == 0) {
        Cquqd1_1233i_LNP = value;
    } else if (name.compare("Cquqd1_1311i_LNP") == 0) {
        Cquqd1_1311i_LNP = value;
    } else if (name.compare("Cquqd1_1312i_LNP") == 0) {
        Cquqd1_1312i_LNP = value;
    } else if (name.compare("Cquqd1_1313i_LNP") == 0) {
        Cquqd1_1313i_LNP = value;
    } else if (name.compare("Cquqd1_1321i_LNP") == 0) {
        Cquqd1_1321i_LNP = value;
    } else if (name.compare("Cquqd1_1322i_LNP") == 0) {
        Cquqd1_1322i_LNP = value;
    } else if (name.compare("Cquqd1_1323i_LNP") == 0) {
        Cquqd1_1323i_LNP = value;
    } else if (name.compare("Cquqd1_1331i_LNP") == 0) {
        Cquqd1_1331i_LNP = value;
    } else if (name.compare("Cquqd1_1332i_LNP") == 0) {
        Cquqd1_1332i_LNP = value;
    } else if (name.compare("Cquqd1_1333i_LNP") == 0) {
        Cquqd1_1333i_LNP = value;
    } else if (name.compare("Cquqd1_2111i_LNP") == 0) {
        Cquqd1_2111i_LNP = value;
    } else if (name.compare("Cquqd1_2112i_LNP") == 0) {
        Cquqd1_2112i_LNP = value;
    } else if (name.compare("Cquqd1_2113i_LNP") == 0) {
        Cquqd1_2113i_LNP = value;
    } else if (name.compare("Cquqd1_2121i_LNP") == 0) {
        Cquqd1_2121i_LNP = value;
    } else if (name.compare("Cquqd1_2122i_LNP") == 0) {
        Cquqd1_2122i_LNP = value;
    } else if (name.compare("Cquqd1_2123i_LNP") == 0) {
        Cquqd1_2123i_LNP = value;
    } else if (name.compare("Cquqd1_2131i_LNP") == 0) {
        Cquqd1_2131i_LNP = value;
    } else if (name.compare("Cquqd1_2132i_LNP") == 0) {
        Cquqd1_2132i_LNP = value;
    } else if (name.compare("Cquqd1_2133i_LNP") == 0) {
        Cquqd1_2133i_LNP = value;
    } else if (name.compare("Cquqd1_2211i_LNP") == 0) {
        Cquqd1_2211i_LNP = value;
    } else if (name.compare("Cquqd1_2212i_LNP") == 0) {
        Cquqd1_2212i_LNP = value;
    } else if (name.compare("Cquqd1_2213i_LNP") == 0) {
        Cquqd1_2213i_LNP = value;
    } else if (name.compare("Cquqd1_2221i_LNP") == 0) {
        Cquqd1_2221i_LNP = value;
    } else if (name.compare("Cquqd1_2222i_LNP") == 0) {
        Cquqd1_2222i_LNP = value;
    } else if (name.compare("Cquqd1_2223i_LNP") == 0) {
        Cquqd1_2223i_LNP = value;
    } else if (name.compare("Cquqd1_2231i_LNP") == 0) {
        Cquqd1_2231i_LNP = value;
    } else if (name.compare("Cquqd1_2232i_LNP") == 0) {
        Cquqd1_2232i_LNP = value;
    } else if (name.compare("Cquqd1_2233i_LNP") == 0) {
        Cquqd1_2233i_LNP = value;
    } else if (name.compare("Cquqd1_2311i_LNP") == 0) {
        Cquqd1_2311i_LNP = value;
    } else if (name.compare("Cquqd1_2312i_LNP") == 0) {
        Cquqd1_2312i_LNP = value;
    } else if (name.compare("Cquqd1_2313i_LNP") == 0) {
        Cquqd1_2313i_LNP = value;
    } else if (name.compare("Cquqd1_2321i_LNP") == 0) {
        Cquqd1_2321i_LNP = value;
    } else if (name.compare("Cquqd1_2322i_LNP") == 0) {
        Cquqd1_2322i_LNP = value;
    } else if (name.compare("Cquqd1_2323i_LNP") == 0) {
        Cquqd1_2323i_LNP = value;
    } else if (name.compare("Cquqd1_2331i_LNP") == 0) {
        Cquqd1_2331i_LNP = value;
    } else if (name.compare("Cquqd1_2332i_LNP") == 0) {
        Cquqd1_2332i_LNP = value;
    } else if (name.compare("Cquqd1_2333i_LNP") == 0) {
        Cquqd1_2333i_LNP = value;
    } else if (name.compare("Cquqd1_3111i_LNP") == 0) {
        Cquqd1_3111i_LNP = value;
    } else if (name.compare("Cquqd1_3112i_LNP") == 0) {
        Cquqd1_3112i_LNP = value;
    } else if (name.compare("Cquqd1_3113i_LNP") == 0) {
        Cquqd1_3113i_LNP = value;
    } else if (name.compare("Cquqd1_3121i_LNP") == 0) {
        Cquqd1_3121i_LNP = value;
    } else if (name.compare("Cquqd1_3122i_LNP") == 0) {
        Cquqd1_3122i_LNP = value;
    } else if (name.compare("Cquqd1_3123i_LNP") == 0) {
        Cquqd1_3123i_LNP = value;
    } else if (name.compare("Cquqd1_3131i_LNP") == 0) {
        Cquqd1_3131i_LNP = value;
    } else if (name.compare("Cquqd1_3132i_LNP") == 0) {
        Cquqd1_3132i_LNP = value;
    } else if (name.compare("Cquqd1_3133i_LNP") == 0) {
        Cquqd1_3133i_LNP = value;
    } else if (name.compare("Cquqd1_3211i_LNP") == 0) {
        Cquqd1_3211i_LNP = value;
    } else if (name.compare("Cquqd1_3212i_LNP") == 0) {
        Cquqd1_3212i_LNP = value;
    } else if (name.compare("Cquqd1_3213i_LNP") == 0) {
        Cquqd1_3213i_LNP = value;
    } else if (name.compare("Cquqd1_3221i_LNP") == 0) {
        Cquqd1_3221i_LNP = value;
    } else if (name.compare("Cquqd1_3222i_LNP") == 0) {
        Cquqd1_3222i_LNP = value;
    } else if (name.compare("Cquqd1_3223i_LNP") == 0) {
        Cquqd1_3223i_LNP = value;
    } else if (name.compare("Cquqd1_3231i_LNP") == 0) {
        Cquqd1_3231i_LNP = value;
    } else if (name.compare("Cquqd1_3232i_LNP") == 0) {
        Cquqd1_3232i_LNP = value;
    } else if (name.compare("Cquqd1_3233i_LNP") == 0) {
        Cquqd1_3233i_LNP = value;
    } else if (name.compare("Cquqd1_3311i_LNP") == 0) {
        Cquqd1_3311i_LNP = value;
    } else if (name.compare("Cquqd1_3312i_LNP") == 0) {
        Cquqd1_3312i_LNP = value;
    } else if (name.compare("Cquqd1_3313i_LNP") == 0) {
        Cquqd1_3313i_LNP = value;
    } else if (name.compare("Cquqd1_3321i_LNP") == 0) {
        Cquqd1_3321i_LNP = value;
    } else if (name.compare("Cquqd1_3322i_LNP") == 0) {
        Cquqd1_3322i_LNP = value;
    } else if (name.compare("Cquqd1_3323i_LNP") == 0) {
        Cquqd1_3323i_LNP = value;
    } else if (name.compare("Cquqd1_3331i_LNP") == 0) {
        Cquqd1_3331i_LNP = value;
    } else if (name.compare("Cquqd1_3332i_LNP") == 0) {
        Cquqd1_3332i_LNP = value;
    } else if (name.compare("Cquqd1_3333i_LNP") == 0) {
        Cquqd1_3333i_LNP = value;
    } else if (name.compare("Cquqd8_1111r_LNP") == 0) {
        Cquqd8_1111r_LNP = value;
    } else if (name.compare("Cquqd8_1112r_LNP") == 0) {
        Cquqd8_1112r_LNP = value;
    } else if (name.compare("Cquqd8_1113r_LNP") == 0) {
        Cquqd8_1113r_LNP = value;
    } else if (name.compare("Cquqd8_1121r_LNP") == 0) {
        Cquqd8_1121r_LNP = value;
    } else if (name.compare("Cquqd8_1122r_LNP") == 0) {
        Cquqd8_1122r_LNP = value;
    } else if (name.compare("Cquqd8_1123r_LNP") == 0) {
        Cquqd8_1123r_LNP = value;
    } else if (name.compare("Cquqd8_1131r_LNP") == 0) {
        Cquqd8_1131r_LNP = value;
    } else if (name.compare("Cquqd8_1132r_LNP") == 0) {
        Cquqd8_1132r_LNP = value;
    } else if (name.compare("Cquqd8_1133r_LNP") == 0) {
        Cquqd8_1133r_LNP = value;
    } else if (name.compare("Cquqd8_1211r_LNP") == 0) {
        Cquqd8_1211r_LNP = value;
    } else if (name.compare("Cquqd8_1212r_LNP") == 0) {
        Cquqd8_1212r_LNP = value;
    } else if (name.compare("Cquqd8_1213r_LNP") == 0) {
        Cquqd8_1213r_LNP = value;
    } else if (name.compare("Cquqd8_1221r_LNP") == 0) {
        Cquqd8_1221r_LNP = value;
    } else if (name.compare("Cquqd8_1222r_LNP") == 0) {
        Cquqd8_1222r_LNP = value;
    } else if (name.compare("Cquqd8_1223r_LNP") == 0) {
        Cquqd8_1223r_LNP = value;
    } else if (name.compare("Cquqd8_1231r_LNP") == 0) {
        Cquqd8_1231r_LNP = value;
    } else if (name.compare("Cquqd8_1232r_LNP") == 0) {
        Cquqd8_1232r_LNP = value;
    } else if (name.compare("Cquqd8_1233r_LNP") == 0) {
        Cquqd8_1233r_LNP = value;
    } else if (name.compare("Cquqd8_1311r_LNP") == 0) {
        Cquqd8_1311r_LNP = value;
    } else if (name.compare("Cquqd8_1312r_LNP") == 0) {
        Cquqd8_1312r_LNP = value;
    } else if (name.compare("Cquqd8_1313r_LNP") == 0) {
        Cquqd8_1313r_LNP = value;
    } else if (name.compare("Cquqd8_1321r_LNP") == 0) {
        Cquqd8_1321r_LNP = value;
    } else if (name.compare("Cquqd8_1322r_LNP") == 0) {
        Cquqd8_1322r_LNP = value;
    } else if (name.compare("Cquqd8_1323r_LNP") == 0) {
        Cquqd8_1323r_LNP = value;
    } else if (name.compare("Cquqd8_1331r_LNP") == 0) {
        Cquqd8_1331r_LNP = value;
    } else if (name.compare("Cquqd8_1332r_LNP") == 0) {
        Cquqd8_1332r_LNP = value;
    } else if (name.compare("Cquqd8_1333r_LNP") == 0) {
        Cquqd8_1333r_LNP = value;
    } else if (name.compare("Cquqd8_2111r_LNP") == 0) {
        Cquqd8_2111r_LNP = value;
    } else if (name.compare("Cquqd8_2112r_LNP") == 0) {
        Cquqd8_2112r_LNP = value;
    } else if (name.compare("Cquqd8_2113r_LNP") == 0) {
        Cquqd8_2113r_LNP = value;
    } else if (name.compare("Cquqd8_2121r_LNP") == 0) {
        Cquqd8_2121r_LNP = value;
    } else if (name.compare("Cquqd8_2122r_LNP") == 0) {
        Cquqd8_2122r_LNP = value;
    } else if (name.compare("Cquqd8_2123r_LNP") == 0) {
        Cquqd8_2123r_LNP = value;
    } else if (name.compare("Cquqd8_2131r_LNP") == 0) {
        Cquqd8_2131r_LNP = value;
    } else if (name.compare("Cquqd8_2132r_LNP") == 0) {
        Cquqd8_2132r_LNP = value;
    } else if (name.compare("Cquqd8_2133r_LNP") == 0) {
        Cquqd8_2133r_LNP = value;
    } else if (name.compare("Cquqd8_2211r_LNP") == 0) {
        Cquqd8_2211r_LNP = value;
    } else if (name.compare("Cquqd8_2212r_LNP") == 0) {
        Cquqd8_2212r_LNP = value;
    } else if (name.compare("Cquqd8_2213r_LNP") == 0) {
        Cquqd8_2213r_LNP = value;
    } else if (name.compare("Cquqd8_2221r_LNP") == 0) {
        Cquqd8_2221r_LNP = value;
    } else if (name.compare("Cquqd8_2222r_LNP") == 0) {
        Cquqd8_2222r_LNP = value;
    } else if (name.compare("Cquqd8_2223r_LNP") == 0) {
        Cquqd8_2223r_LNP = value;
    } else if (name.compare("Cquqd8_2231r_LNP") == 0) {
        Cquqd8_2231r_LNP = value;
    } else if (name.compare("Cquqd8_2232r_LNP") == 0) {
        Cquqd8_2232r_LNP = value;
    } else if (name.compare("Cquqd8_2233r_LNP") == 0) {
        Cquqd8_2233r_LNP = value;
    } else if (name.compare("Cquqd8_2311r_LNP") == 0) {
        Cquqd8_2311r_LNP = value;
    } else if (name.compare("Cquqd8_2312r_LNP") == 0) {
        Cquqd8_2312r_LNP = value;
    } else if (name.compare("Cquqd8_2313r_LNP") == 0) {
        Cquqd8_2313r_LNP = value;
    } else if (name.compare("Cquqd8_2321r_LNP") == 0) {
        Cquqd8_2321r_LNP = value;
    } else if (name.compare("Cquqd8_2322r_LNP") == 0) {
        Cquqd8_2322r_LNP = value;
    } else if (name.compare("Cquqd8_2323r_LNP") == 0) {
        Cquqd8_2323r_LNP = value;
    } else if (name.compare("Cquqd8_2331r_LNP") == 0) {
        Cquqd8_2331r_LNP = value;
    } else if (name.compare("Cquqd8_2332r_LNP") == 0) {
        Cquqd8_2332r_LNP = value;
    } else if (name.compare("Cquqd8_2333r_LNP") == 0) {
        Cquqd8_2333r_LNP = value;
    } else if (name.compare("Cquqd8_3111r_LNP") == 0) {
        Cquqd8_3111r_LNP = value;
    } else if (name.compare("Cquqd8_3112r_LNP") == 0) {
        Cquqd8_3112r_LNP = value;
    } else if (name.compare("Cquqd8_3113r_LNP") == 0) {
        Cquqd8_3113r_LNP = value;
    } else if (name.compare("Cquqd8_3121r_LNP") == 0) {
        Cquqd8_3121r_LNP = value;
    } else if (name.compare("Cquqd8_3122r_LNP") == 0) {
        Cquqd8_3122r_LNP = value;
    } else if (name.compare("Cquqd8_3123r_LNP") == 0) {
        Cquqd8_3123r_LNP = value;
    } else if (name.compare("Cquqd8_3131r_LNP") == 0) {
        Cquqd8_3131r_LNP = value;
    } else if (name.compare("Cquqd8_3132r_LNP") == 0) {
        Cquqd8_3132r_LNP = value;
    } else if (name.compare("Cquqd8_3133r_LNP") == 0) {
        Cquqd8_3133r_LNP = value;
    } else if (name.compare("Cquqd8_3211r_LNP") == 0) {
        Cquqd8_3211r_LNP = value;
    } else if (name.compare("Cquqd8_3212r_LNP") == 0) {
        Cquqd8_3212r_LNP = value;
    } else if (name.compare("Cquqd8_3213r_LNP") == 0) {
        Cquqd8_3213r_LNP = value;
    } else if (name.compare("Cquqd8_3221r_LNP") == 0) {
        Cquqd8_3221r_LNP = value;
    } else if (name.compare("Cquqd8_3222r_LNP") == 0) {
        Cquqd8_3222r_LNP = value;
    } else if (name.compare("Cquqd8_3223r_LNP") == 0) {
        Cquqd8_3223r_LNP = value;
    } else if (name.compare("Cquqd8_3231r_LNP") == 0) {
        Cquqd8_3231r_LNP = value;
    } else if (name.compare("Cquqd8_3232r_LNP") == 0) {
        Cquqd8_3232r_LNP = value;
    } else if (name.compare("Cquqd8_3233r_LNP") == 0) {
        Cquqd8_3233r_LNP = value;
    } else if (name.compare("Cquqd8_3311r_LNP") == 0) {
        Cquqd8_3311r_LNP = value;
    } else if (name.compare("Cquqd8_3312r_LNP") == 0) {
        Cquqd8_3312r_LNP = value;
    } else if (name.compare("Cquqd8_3313r_LNP") == 0) {
        Cquqd8_3313r_LNP = value;
    } else if (name.compare("Cquqd8_3321r_LNP") == 0) {
        Cquqd8_3321r_LNP = value;
    } else if (name.compare("Cquqd8_3322r_LNP") == 0) {
        Cquqd8_3322r_LNP = value;
    } else if (name.compare("Cquqd8_3323r_LNP") == 0) {
        Cquqd8_3323r_LNP = value;
    } else if (name.compare("Cquqd8_3331r_LNP") == 0) {
        Cquqd8_3331r_LNP = value;
    } else if (name.compare("Cquqd8_3332r_LNP") == 0) {
        Cquqd8_3332r_LNP = value;
    } else if (name.compare("Cquqd8_3333r_LNP") == 0) {
        Cquqd8_3333r_LNP = value;
    } else if (name.compare("Cquqd8_1111i_LNP") == 0) {
        Cquqd8_1111i_LNP = value;
    } else if (name.compare("Cquqd8_1112i_LNP") == 0) {
        Cquqd8_1112i_LNP = value;
    } else if (name.compare("Cquqd8_1113i_LNP") == 0) {
        Cquqd8_1113i_LNP = value;
    } else if (name.compare("Cquqd8_1121i_LNP") == 0) {
        Cquqd8_1121i_LNP = value;
    } else if (name.compare("Cquqd8_1122i_LNP") == 0) {
        Cquqd8_1122i_LNP = value;
    } else if (name.compare("Cquqd8_1123i_LNP") == 0) {
        Cquqd8_1123i_LNP = value;
    } else if (name.compare("Cquqd8_1131i_LNP") == 0) {
        Cquqd8_1131i_LNP = value;
    } else if (name.compare("Cquqd8_1132i_LNP") == 0) {
        Cquqd8_1132i_LNP = value;
    } else if (name.compare("Cquqd8_1133i_LNP") == 0) {
        Cquqd8_1133i_LNP = value;
    } else if (name.compare("Cquqd8_1211i_LNP") == 0) {
        Cquqd8_1211i_LNP = value;
    } else if (name.compare("Cquqd8_1212i_LNP") == 0) {
        Cquqd8_1212i_LNP = value;
    } else if (name.compare("Cquqd8_1213i_LNP") == 0) {
        Cquqd8_1213i_LNP = value;
    } else if (name.compare("Cquqd8_1221i_LNP") == 0) {
        Cquqd8_1221i_LNP = value;
    } else if (name.compare("Cquqd8_1222i_LNP") == 0) {
        Cquqd8_1222i_LNP = value;
    } else if (name.compare("Cquqd8_1223i_LNP") == 0) {
        Cquqd8_1223i_LNP = value;
    } else if (name.compare("Cquqd8_1231i_LNP") == 0) {
        Cquqd8_1231i_LNP = value;
    } else if (name.compare("Cquqd8_1232i_LNP") == 0) {
        Cquqd8_1232i_LNP = value;
    } else if (name.compare("Cquqd8_1233i_LNP") == 0) {
        Cquqd8_1233i_LNP = value;
    } else if (name.compare("Cquqd8_1311i_LNP") == 0) {
        Cquqd8_1311i_LNP = value;
    } else if (name.compare("Cquqd8_1312i_LNP") == 0) {
        Cquqd8_1312i_LNP = value;
    } else if (name.compare("Cquqd8_1313i_LNP") == 0) {
        Cquqd8_1313i_LNP = value;
    } else if (name.compare("Cquqd8_1321i_LNP") == 0) {
        Cquqd8_1321i_LNP = value;
    } else if (name.compare("Cquqd8_1322i_LNP") == 0) {
        Cquqd8_1322i_LNP = value;
    } else if (name.compare("Cquqd8_1323i_LNP") == 0) {
        Cquqd8_1323i_LNP = value;
    } else if (name.compare("Cquqd8_1331i_LNP") == 0) {
        Cquqd8_1331i_LNP = value;
    } else if (name.compare("Cquqd8_1332i_LNP") == 0) {
        Cquqd8_1332i_LNP = value;
    } else if (name.compare("Cquqd8_1333i_LNP") == 0) {
        Cquqd8_1333i_LNP = value;
    } else if (name.compare("Cquqd8_2111i_LNP") == 0) {
        Cquqd8_2111i_LNP = value;
    } else if (name.compare("Cquqd8_2112i_LNP") == 0) {
        Cquqd8_2112i_LNP = value;
    } else if (name.compare("Cquqd8_2113i_LNP") == 0) {
        Cquqd8_2113i_LNP = value;
    } else if (name.compare("Cquqd8_2121i_LNP") == 0) {
        Cquqd8_2121i_LNP = value;
    } else if (name.compare("Cquqd8_2122i_LNP") == 0) {
        Cquqd8_2122i_LNP = value;
    } else if (name.compare("Cquqd8_2123i_LNP") == 0) {
        Cquqd8_2123i_LNP = value;
    } else if (name.compare("Cquqd8_2131i_LNP") == 0) {
        Cquqd8_2131i_LNP = value;
    } else if (name.compare("Cquqd8_2132i_LNP") == 0) {
        Cquqd8_2132i_LNP = value;
    } else if (name.compare("Cquqd8_2133i_LNP") == 0) {
        Cquqd8_2133i_LNP = value;
    } else if (name.compare("Cquqd8_2211i_LNP") == 0) {
        Cquqd8_2211i_LNP = value;
    } else if (name.compare("Cquqd8_2212i_LNP") == 0) {
        Cquqd8_2212i_LNP = value;
    } else if (name.compare("Cquqd8_2213i_LNP") == 0) {
        Cquqd8_2213i_LNP = value;
    } else if (name.compare("Cquqd8_2221i_LNP") == 0) {
        Cquqd8_2221i_LNP = value;
    } else if (name.compare("Cquqd8_2222i_LNP") == 0) {
        Cquqd8_2222i_LNP = value;
    } else if (name.compare("Cquqd8_2223i_LNP") == 0) {
        Cquqd8_2223i_LNP = value;
    } else if (name.compare("Cquqd8_2231i_LNP") == 0) {
        Cquqd8_2231i_LNP = value;
    } else if (name.compare("Cquqd8_2232i_LNP") == 0) {
        Cquqd8_2232i_LNP = value;
    } else if (name.compare("Cquqd8_2233i_LNP") == 0) {
        Cquqd8_2233i_LNP = value;
    } else if (name.compare("Cquqd8_2311i_LNP") == 0) {
        Cquqd8_2311i_LNP = value;
    } else if (name.compare("Cquqd8_2312i_LNP") == 0) {
        Cquqd8_2312i_LNP = value;
    } else if (name.compare("Cquqd8_2313i_LNP") == 0) {
        Cquqd8_2313i_LNP = value;
    } else if (name.compare("Cquqd8_2321i_LNP") == 0) {
        Cquqd8_2321i_LNP = value;
    } else if (name.compare("Cquqd8_2322i_LNP") == 0) {
        Cquqd8_2322i_LNP = value;
    } else if (name.compare("Cquqd8_2323i_LNP") == 0) {
        Cquqd8_2323i_LNP = value;
    } else if (name.compare("Cquqd8_2331i_LNP") == 0) {
        Cquqd8_2331i_LNP = value;
    } else if (name.compare("Cquqd8_2332i_LNP") == 0) {
        Cquqd8_2332i_LNP = value;
    } else if (name.compare("Cquqd8_2333i_LNP") == 0) {
        Cquqd8_2333i_LNP = value;
    } else if (name.compare("Cquqd8_3111i_LNP") == 0) {
        Cquqd8_3111i_LNP = value;
    } else if (name.compare("Cquqd8_3112i_LNP") == 0) {
        Cquqd8_3112i_LNP = value;
    } else if (name.compare("Cquqd8_3113i_LNP") == 0) {
        Cquqd8_3113i_LNP = value;
    } else if (name.compare("Cquqd8_3121i_LNP") == 0) {
        Cquqd8_3121i_LNP = value;
    } else if (name.compare("Cquqd8_3122i_LNP") == 0) {
        Cquqd8_3122i_LNP = value;
    } else if (name.compare("Cquqd8_3123i_LNP") == 0) {
        Cquqd8_3123i_LNP = value;
    } else if (name.compare("Cquqd8_3131i_LNP") == 0) {
        Cquqd8_3131i_LNP = value;
    } else if (name.compare("Cquqd8_3132i_LNP") == 0) {
        Cquqd8_3132i_LNP = value;
    } else if (name.compare("Cquqd8_3133i_LNP") == 0) {
        Cquqd8_3133i_LNP = value;
    } else if (name.compare("Cquqd8_3211i_LNP") == 0) {
        Cquqd8_3211i_LNP = value;
    } else if (name.compare("Cquqd8_3212i_LNP") == 0) {
        Cquqd8_3212i_LNP = value;
    } else if (name.compare("Cquqd8_3213i_LNP") == 0) {
        Cquqd8_3213i_LNP = value;
    } else if (name.compare("Cquqd8_3221i_LNP") == 0) {
        Cquqd8_3221i_LNP = value;
    } else if (name.compare("Cquqd8_3222i_LNP") == 0) {
        Cquqd8_3222i_LNP = value;
    } else if (name.compare("Cquqd8_3223i_LNP") == 0) {
        Cquqd8_3223i_LNP = value;
    } else if (name.compare("Cquqd8_3231i_LNP") == 0) {
        Cquqd8_3231i_LNP = value;
    } else if (name.compare("Cquqd8_3232i_LNP") == 0) {
        Cquqd8_3232i_LNP = value;
    } else if (name.compare("Cquqd8_3233i_LNP") == 0) {
        Cquqd8_3233i_LNP = value;
    } else if (name.compare("Cquqd8_3311i_LNP") == 0) {
        Cquqd8_3311i_LNP = value;
    } else if (name.compare("Cquqd8_3312i_LNP") == 0) {
        Cquqd8_3312i_LNP = value;
    } else if (name.compare("Cquqd8_3313i_LNP") == 0) {
        Cquqd8_3313i_LNP = value;
    } else if (name.compare("Cquqd8_3321i_LNP") == 0) {
        Cquqd8_3321i_LNP = value;
    } else if (name.compare("Cquqd8_3322i_LNP") == 0) {
        Cquqd8_3322i_LNP = value;
    } else if (name.compare("Cquqd8_3323i_LNP") == 0) {
        Cquqd8_3323i_LNP = value;
    } else if (name.compare("Cquqd8_3331i_LNP") == 0) {
        Cquqd8_3331i_LNP = value;
    } else if (name.compare("Cquqd8_3332i_LNP") == 0) {
        Cquqd8_3332i_LNP = value;
    } else if (name.compare("Cquqd8_3333i_LNP") == 0) {
        Cquqd8_3333i_LNP = value;
    } else if (name.compare("Clequ1_1111r_LNP") == 0) {
        Clequ1_1111r_LNP = value;
    } else if (name.compare("Clequ1_1112r_LNP") == 0) {
        Clequ1_1112r_LNP = value;
    } else if (name.compare("Clequ1_1113r_LNP") == 0) {
        Clequ1_1113r_LNP = value;
    } else if (name.compare("Clequ1_1121r_LNP") == 0) {
        Clequ1_1121r_LNP = value;
    } else if (name.compare("Clequ1_1122r_LNP") == 0) {
        Clequ1_1122r_LNP = value;
    } else if (name.compare("Clequ1_1123r_LNP") == 0) {
        Clequ1_1123r_LNP = value;
    } else if (name.compare("Clequ1_1131r_LNP") == 0) {
        Clequ1_1131r_LNP = value;
    } else if (name.compare("Clequ1_1132r_LNP") == 0) {
        Clequ1_1132r_LNP = value;
    } else if (name.compare("Clequ1_1133r_LNP") == 0) {
        Clequ1_1133r_LNP = value;
    } else if (name.compare("Clequ1_1211r_LNP") == 0) {
        Clequ1_1211r_LNP = value;
    } else if (name.compare("Clequ1_1212r_LNP") == 0) {
        Clequ1_1212r_LNP = value;
    } else if (name.compare("Clequ1_1213r_LNP") == 0) {
        Clequ1_1213r_LNP = value;
    } else if (name.compare("Clequ1_1221r_LNP") == 0) {
        Clequ1_1221r_LNP = value;
    } else if (name.compare("Clequ1_1222r_LNP") == 0) {
        Clequ1_1222r_LNP = value;
    } else if (name.compare("Clequ1_1223r_LNP") == 0) {
        Clequ1_1223r_LNP = value;
    } else if (name.compare("Clequ1_1231r_LNP") == 0) {
        Clequ1_1231r_LNP = value;
    } else if (name.compare("Clequ1_1232r_LNP") == 0) {
        Clequ1_1232r_LNP = value;
    } else if (name.compare("Clequ1_1233r_LNP") == 0) {
        Clequ1_1233r_LNP = value;
    } else if (name.compare("Clequ1_1311r_LNP") == 0) {
        Clequ1_1311r_LNP = value;
    } else if (name.compare("Clequ1_1312r_LNP") == 0) {
        Clequ1_1312r_LNP = value;
    } else if (name.compare("Clequ1_1313r_LNP") == 0) {
        Clequ1_1313r_LNP = value;
    } else if (name.compare("Clequ1_1321r_LNP") == 0) {
        Clequ1_1321r_LNP = value;
    } else if (name.compare("Clequ1_1322r_LNP") == 0) {
        Clequ1_1322r_LNP = value;
    } else if (name.compare("Clequ1_1323r_LNP") == 0) {
        Clequ1_1323r_LNP = value;
    } else if (name.compare("Clequ1_1331r_LNP") == 0) {
        Clequ1_1331r_LNP = value;
    } else if (name.compare("Clequ1_1332r_LNP") == 0) {
        Clequ1_1332r_LNP = value;
    } else if (name.compare("Clequ1_1333r_LNP") == 0) {
        Clequ1_1333r_LNP = value;
    } else if (name.compare("Clequ1_2111r_LNP") == 0) {
        Clequ1_2111r_LNP = value;
    } else if (name.compare("Clequ1_2112r_LNP") == 0) {
        Clequ1_2112r_LNP = value;
    } else if (name.compare("Clequ1_2113r_LNP") == 0) {
        Clequ1_2113r_LNP = value;
    } else if (name.compare("Clequ1_2121r_LNP") == 0) {
        Clequ1_2121r_LNP = value;
    } else if (name.compare("Clequ1_2122r_LNP") == 0) {
        Clequ1_2122r_LNP = value;
    } else if (name.compare("Clequ1_2123r_LNP") == 0) {
        Clequ1_2123r_LNP = value;
    } else if (name.compare("Clequ1_2131r_LNP") == 0) {
        Clequ1_2131r_LNP = value;
    } else if (name.compare("Clequ1_2132r_LNP") == 0) {
        Clequ1_2132r_LNP = value;
    } else if (name.compare("Clequ1_2133r_LNP") == 0) {
        Clequ1_2133r_LNP = value;
    } else if (name.compare("Clequ1_2211r_LNP") == 0) {
        Clequ1_2211r_LNP = value;
    } else if (name.compare("Clequ1_2212r_LNP") == 0) {
        Clequ1_2212r_LNP = value;
    } else if (name.compare("Clequ1_2213r_LNP") == 0) {
        Clequ1_2213r_LNP = value;
    } else if (name.compare("Clequ1_2221r_LNP") == 0) {
        Clequ1_2221r_LNP = value;
    } else if (name.compare("Clequ1_2222r_LNP") == 0) {
        Clequ1_2222r_LNP = value;
    } else if (name.compare("Clequ1_2223r_LNP") == 0) {
        Clequ1_2223r_LNP = value;
    } else if (name.compare("Clequ1_2231r_LNP") == 0) {
        Clequ1_2231r_LNP = value;
    } else if (name.compare("Clequ1_2232r_LNP") == 0) {
        Clequ1_2232r_LNP = value;
    } else if (name.compare("Clequ1_2233r_LNP") == 0) {
        Clequ1_2233r_LNP = value;
    } else if (name.compare("Clequ1_2311r_LNP") == 0) {
        Clequ1_2311r_LNP = value;
    } else if (name.compare("Clequ1_2312r_LNP") == 0) {
        Clequ1_2312r_LNP = value;
    } else if (name.compare("Clequ1_2313r_LNP") == 0) {
        Clequ1_2313r_LNP = value;
    } else if (name.compare("Clequ1_2321r_LNP") == 0) {
        Clequ1_2321r_LNP = value;
    } else if (name.compare("Clequ1_2322r_LNP") == 0) {
        Clequ1_2322r_LNP = value;
    } else if (name.compare("Clequ1_2323r_LNP") == 0) {
        Clequ1_2323r_LNP = value;
    } else if (name.compare("Clequ1_2331r_LNP") == 0) {
        Clequ1_2331r_LNP = value;
    } else if (name.compare("Clequ1_2332r_LNP") == 0) {
        Clequ1_2332r_LNP = value;
    } else if (name.compare("Clequ1_2333r_LNP") == 0) {
        Clequ1_2333r_LNP = value;
    } else if (name.compare("Clequ1_3111r_LNP") == 0) {
        Clequ1_3111r_LNP = value;
    } else if (name.compare("Clequ1_3112r_LNP") == 0) {
        Clequ1_3112r_LNP = value;
    } else if (name.compare("Clequ1_3113r_LNP") == 0) {
        Clequ1_3113r_LNP = value;
    } else if (name.compare("Clequ1_3121r_LNP") == 0) {
        Clequ1_3121r_LNP = value;
    } else if (name.compare("Clequ1_3122r_LNP") == 0) {
        Clequ1_3122r_LNP = value;
    } else if (name.compare("Clequ1_3123r_LNP") == 0) {
        Clequ1_3123r_LNP = value;
    } else if (name.compare("Clequ1_3131r_LNP") == 0) {
        Clequ1_3131r_LNP = value;
    } else if (name.compare("Clequ1_3132r_LNP") == 0) {
        Clequ1_3132r_LNP = value;
    } else if (name.compare("Clequ1_3133r_LNP") == 0) {
        Clequ1_3133r_LNP = value;
    } else if (name.compare("Clequ1_3211r_LNP") == 0) {
        Clequ1_3211r_LNP = value;
    } else if (name.compare("Clequ1_3212r_LNP") == 0) {
        Clequ1_3212r_LNP = value;
    } else if (name.compare("Clequ1_3213r_LNP") == 0) {
        Clequ1_3213r_LNP = value;
    } else if (name.compare("Clequ1_3221r_LNP") == 0) {
        Clequ1_3221r_LNP = value;
    } else if (name.compare("Clequ1_3222r_LNP") == 0) {
        Clequ1_3222r_LNP = value;
    } else if (name.compare("Clequ1_3223r_LNP") == 0) {
        Clequ1_3223r_LNP = value;
    } else if (name.compare("Clequ1_3231r_LNP") == 0) {
        Clequ1_3231r_LNP = value;
    } else if (name.compare("Clequ1_3232r_LNP") == 0) {
        Clequ1_3232r_LNP = value;
    } else if (name.compare("Clequ1_3233r_LNP") == 0) {
        Clequ1_3233r_LNP = value;
    } else if (name.compare("Clequ1_3311r_LNP") == 0) {
        Clequ1_3311r_LNP = value;
    } else if (name.compare("Clequ1_3312r_LNP") == 0) {
        Clequ1_3312r_LNP = value;
    } else if (name.compare("Clequ1_3313r_LNP") == 0) {
        Clequ1_3313r_LNP = value;
    } else if (name.compare("Clequ1_3321r_LNP") == 0) {
        Clequ1_3321r_LNP = value;
    } else if (name.compare("Clequ1_3322r_LNP") == 0) {
        Clequ1_3322r_LNP = value;
    } else if (name.compare("Clequ1_3323r_LNP") == 0) {
        Clequ1_3323r_LNP = value;
    } else if (name.compare("Clequ1_3331r_LNP") == 0) {
        Clequ1_3331r_LNP = value;
    } else if (name.compare("Clequ1_3332r_LNP") == 0) {
        Clequ1_3332r_LNP = value;
    } else if (name.compare("Clequ1_3333r_LNP") == 0) {
        Clequ1_3333r_LNP = value;
    } else if (name.compare("Clequ1_1111i_LNP") == 0) {
        Clequ1_1111i_LNP = value;
    } else if (name.compare("Clequ1_1112i_LNP") == 0) {
        Clequ1_1112i_LNP = value;
    } else if (name.compare("Clequ1_1113i_LNP") == 0) {
        Clequ1_1113i_LNP = value;
    } else if (name.compare("Clequ1_1121i_LNP") == 0) {
        Clequ1_1121i_LNP = value;
    } else if (name.compare("Clequ1_1122i_LNP") == 0) {
        Clequ1_1122i_LNP = value;
    } else if (name.compare("Clequ1_1123i_LNP") == 0) {
        Clequ1_1123i_LNP = value;
    } else if (name.compare("Clequ1_1131i_LNP") == 0) {
        Clequ1_1131i_LNP = value;
    } else if (name.compare("Clequ1_1132i_LNP") == 0) {
        Clequ1_1132i_LNP = value;
    } else if (name.compare("Clequ1_1133i_LNP") == 0) {
        Clequ1_1133i_LNP = value;
    } else if (name.compare("Clequ1_1211i_LNP") == 0) {
        Clequ1_1211i_LNP = value;
    } else if (name.compare("Clequ1_1212i_LNP") == 0) {
        Clequ1_1212i_LNP = value;
    } else if (name.compare("Clequ1_1213i_LNP") == 0) {
        Clequ1_1213i_LNP = value;
    } else if (name.compare("Clequ1_1221i_LNP") == 0) {
        Clequ1_1221i_LNP = value;
    } else if (name.compare("Clequ1_1222i_LNP") == 0) {
        Clequ1_1222i_LNP = value;
    } else if (name.compare("Clequ1_1223i_LNP") == 0) {
        Clequ1_1223i_LNP = value;
    } else if (name.compare("Clequ1_1231i_LNP") == 0) {
        Clequ1_1231i_LNP = value;
    } else if (name.compare("Clequ1_1232i_LNP") == 0) {
        Clequ1_1232i_LNP = value;
    } else if (name.compare("Clequ1_1233i_LNP") == 0) {
        Clequ1_1233i_LNP = value;
    } else if (name.compare("Clequ1_1311i_LNP") == 0) {
        Clequ1_1311i_LNP = value;
    } else if (name.compare("Clequ1_1312i_LNP") == 0) {
        Clequ1_1312i_LNP = value;
    } else if (name.compare("Clequ1_1313i_LNP") == 0) {
        Clequ1_1313i_LNP = value;
    } else if (name.compare("Clequ1_1321i_LNP") == 0) {
        Clequ1_1321i_LNP = value;
    } else if (name.compare("Clequ1_1322i_LNP") == 0) {
        Clequ1_1322i_LNP = value;
    } else if (name.compare("Clequ1_1323i_LNP") == 0) {
        Clequ1_1323i_LNP = value;
    } else if (name.compare("Clequ1_1331i_LNP") == 0) {
        Clequ1_1331i_LNP = value;
    } else if (name.compare("Clequ1_1332i_LNP") == 0) {
        Clequ1_1332i_LNP = value;
    } else if (name.compare("Clequ1_1333i_LNP") == 0) {
        Clequ1_1333i_LNP = value;
    } else if (name.compare("Clequ1_2111i_LNP") == 0) {
        Clequ1_2111i_LNP = value;
    } else if (name.compare("Clequ1_2112i_LNP") == 0) {
        Clequ1_2112i_LNP = value;
    } else if (name.compare("Clequ1_2113i_LNP") == 0) {
        Clequ1_2113i_LNP = value;
    } else if (name.compare("Clequ1_2121i_LNP") == 0) {
        Clequ1_2121i_LNP = value;
    } else if (name.compare("Clequ1_2122i_LNP") == 0) {
        Clequ1_2122i_LNP = value;
    } else if (name.compare("Clequ1_2123i_LNP") == 0) {
        Clequ1_2123i_LNP = value;
    } else if (name.compare("Clequ1_2131i_LNP") == 0) {
        Clequ1_2131i_LNP = value;
    } else if (name.compare("Clequ1_2132i_LNP") == 0) {
        Clequ1_2132i_LNP = value;
    } else if (name.compare("Clequ1_2133i_LNP") == 0) {
        Clequ1_2133i_LNP = value;
    } else if (name.compare("Clequ1_2211i_LNP") == 0) {
        Clequ1_2211i_LNP = value;
    } else if (name.compare("Clequ1_2212i_LNP") == 0) {
        Clequ1_2212i_LNP = value;
    } else if (name.compare("Clequ1_2213i_LNP") == 0) {
        Clequ1_2213i_LNP = value;
    } else if (name.compare("Clequ1_2221i_LNP") == 0) {
        Clequ1_2221i_LNP = value;
    } else if (name.compare("Clequ1_2222i_LNP") == 0) {
        Clequ1_2222i_LNP = value;
    } else if (name.compare("Clequ1_2223i_LNP") == 0) {
        Clequ1_2223i_LNP = value;
    } else if (name.compare("Clequ1_2231i_LNP") == 0) {
        Clequ1_2231i_LNP = value;
    } else if (name.compare("Clequ1_2232i_LNP") == 0) {
        Clequ1_2232i_LNP = value;
    } else if (name.compare("Clequ1_2233i_LNP") == 0) {
        Clequ1_2233i_LNP = value;
    } else if (name.compare("Clequ1_2311i_LNP") == 0) {
        Clequ1_2311i_LNP = value;
    } else if (name.compare("Clequ1_2312i_LNP") == 0) {
        Clequ1_2312i_LNP = value;
    } else if (name.compare("Clequ1_2313i_LNP") == 0) {
        Clequ1_2313i_LNP = value;
    } else if (name.compare("Clequ1_2321i_LNP") == 0) {
        Clequ1_2321i_LNP = value;
    } else if (name.compare("Clequ1_2322i_LNP") == 0) {
        Clequ1_2322i_LNP = value;
    } else if (name.compare("Clequ1_2323i_LNP") == 0) {
        Clequ1_2323i_LNP = value;
    } else if (name.compare("Clequ1_2331i_LNP") == 0) {
        Clequ1_2331i_LNP = value;
    } else if (name.compare("Clequ1_2332i_LNP") == 0) {
        Clequ1_2332i_LNP = value;
    } else if (name.compare("Clequ1_2333i_LNP") == 0) {
        Clequ1_2333i_LNP = value;
    } else if (name.compare("Clequ1_3111i_LNP") == 0) {
        Clequ1_3111i_LNP = value;
    } else if (name.compare("Clequ1_3112i_LNP") == 0) {
        Clequ1_3112i_LNP = value;
    } else if (name.compare("Clequ1_3113i_LNP") == 0) {
        Clequ1_3113i_LNP = value;
    } else if (name.compare("Clequ1_3121i_LNP") == 0) {
        Clequ1_3121i_LNP = value;
    } else if (name.compare("Clequ1_3122i_LNP") == 0) {
        Clequ1_3122i_LNP = value;
    } else if (name.compare("Clequ1_3123i_LNP") == 0) {
        Clequ1_3123i_LNP = value;
    } else if (name.compare("Clequ1_3131i_LNP") == 0) {
        Clequ1_3131i_LNP = value;
    } else if (name.compare("Clequ1_3132i_LNP") == 0) {
        Clequ1_3132i_LNP = value;
    } else if (name.compare("Clequ1_3133i_LNP") == 0) {
        Clequ1_3133i_LNP = value;
    } else if (name.compare("Clequ1_3211i_LNP") == 0) {
        Clequ1_3211i_LNP = value;
    } else if (name.compare("Clequ1_3212i_LNP") == 0) {
        Clequ1_3212i_LNP = value;
    } else if (name.compare("Clequ1_3213i_LNP") == 0) {
        Clequ1_3213i_LNP = value;
    } else if (name.compare("Clequ1_3221i_LNP") == 0) {
        Clequ1_3221i_LNP = value;
    } else if (name.compare("Clequ1_3222i_LNP") == 0) {
        Clequ1_3222i_LNP = value;
    } else if (name.compare("Clequ1_3223i_LNP") == 0) {
        Clequ1_3223i_LNP = value;
    } else if (name.compare("Clequ1_3231i_LNP") == 0) {
        Clequ1_3231i_LNP = value;
    } else if (name.compare("Clequ1_3232i_LNP") == 0) {
        Clequ1_3232i_LNP = value;
    } else if (name.compare("Clequ1_3233i_LNP") == 0) {
        Clequ1_3233i_LNP = value;
    } else if (name.compare("Clequ1_3311i_LNP") == 0) {
        Clequ1_3311i_LNP = value;
    } else if (name.compare("Clequ1_3312i_LNP") == 0) {
        Clequ1_3312i_LNP = value;
    } else if (name.compare("Clequ1_3313i_LNP") == 0) {
        Clequ1_3313i_LNP = value;
    } else if (name.compare("Clequ1_3321i_LNP") == 0) {
        Clequ1_3321i_LNP = value;
    } else if (name.compare("Clequ1_3322i_LNP") == 0) {
        Clequ1_3322i_LNP = value;
    } else if (name.compare("Clequ1_3323i_LNP") == 0) {
        Clequ1_3323i_LNP = value;
    } else if (name.compare("Clequ1_3331i_LNP") == 0) {
        Clequ1_3331i_LNP = value;
    } else if (name.compare("Clequ1_3332i_LNP") == 0) {
        Clequ1_3332i_LNP = value;
    } else if (name.compare("Clequ1_3333i_LNP") == 0) {
        Clequ1_3333i_LNP = value;
    } else if (name.compare("Clequ3_1111r_LNP") == 0) {
        Clequ3_1111r_LNP = value;
    } else if (name.compare("Clequ3_1112r_LNP") == 0) {
        Clequ3_1112r_LNP = value;
    } else if (name.compare("Clequ3_1113r_LNP") == 0) {
        Clequ3_1113r_LNP = value;
    } else if (name.compare("Clequ3_1121r_LNP") == 0) {
        Clequ3_1121r_LNP = value;
    } else if (name.compare("Clequ3_1122r_LNP") == 0) {
        Clequ3_1122r_LNP = value;
    } else if (name.compare("Clequ3_1123r_LNP") == 0) {
        Clequ3_1123r_LNP = value;
    } else if (name.compare("Clequ3_1131r_LNP") == 0) {
        Clequ3_1131r_LNP = value;
    } else if (name.compare("Clequ3_1132r_LNP") == 0) {
        Clequ3_1132r_LNP = value;
    } else if (name.compare("Clequ3_1133r_LNP") == 0) {
        Clequ3_1133r_LNP = value;
    } else if (name.compare("Clequ3_1211r_LNP") == 0) {
        Clequ3_1211r_LNP = value;
    } else if (name.compare("Clequ3_1212r_LNP") == 0) {
        Clequ3_1212r_LNP = value;
    } else if (name.compare("Clequ3_1213r_LNP") == 0) {
        Clequ3_1213r_LNP = value;
    } else if (name.compare("Clequ3_1221r_LNP") == 0) {
        Clequ3_1221r_LNP = value;
    } else if (name.compare("Clequ3_1222r_LNP") == 0) {
        Clequ3_1222r_LNP = value;
    } else if (name.compare("Clequ3_1223r_LNP") == 0) {
        Clequ3_1223r_LNP = value;
    } else if (name.compare("Clequ3_1231r_LNP") == 0) {
        Clequ3_1231r_LNP = value;
    } else if (name.compare("Clequ3_1232r_LNP") == 0) {
        Clequ3_1232r_LNP = value;
    } else if (name.compare("Clequ3_1233r_LNP") == 0) {
        Clequ3_1233r_LNP = value;
    } else if (name.compare("Clequ3_1311r_LNP") == 0) {
        Clequ3_1311r_LNP = value;
    } else if (name.compare("Clequ3_1312r_LNP") == 0) {
        Clequ3_1312r_LNP = value;
    } else if (name.compare("Clequ3_1313r_LNP") == 0) {
        Clequ3_1313r_LNP = value;
    } else if (name.compare("Clequ3_1321r_LNP") == 0) {
        Clequ3_1321r_LNP = value;
    } else if (name.compare("Clequ3_1322r_LNP") == 0) {
        Clequ3_1322r_LNP = value;
    } else if (name.compare("Clequ3_1323r_LNP") == 0) {
        Clequ3_1323r_LNP = value;
    } else if (name.compare("Clequ3_1331r_LNP") == 0) {
        Clequ3_1331r_LNP = value;
    } else if (name.compare("Clequ3_1332r_LNP") == 0) {
        Clequ3_1332r_LNP = value;
    } else if (name.compare("Clequ3_1333r_LNP") == 0) {
        Clequ3_1333r_LNP = value;
    } else if (name.compare("Clequ3_2111r_LNP") == 0) {
        Clequ3_2111r_LNP = value;
    } else if (name.compare("Clequ3_2112r_LNP") == 0) {
        Clequ3_2112r_LNP = value;
    } else if (name.compare("Clequ3_2113r_LNP") == 0) {
        Clequ3_2113r_LNP = value;
    } else if (name.compare("Clequ3_2121r_LNP") == 0) {
        Clequ3_2121r_LNP = value;
    } else if (name.compare("Clequ3_2122r_LNP") == 0) {
        Clequ3_2122r_LNP = value;
    } else if (name.compare("Clequ3_2123r_LNP") == 0) {
        Clequ3_2123r_LNP = value;
    } else if (name.compare("Clequ3_2131r_LNP") == 0) {
        Clequ3_2131r_LNP = value;
    } else if (name.compare("Clequ3_2132r_LNP") == 0) {
        Clequ3_2132r_LNP = value;
    } else if (name.compare("Clequ3_2133r_LNP") == 0) {
        Clequ3_2133r_LNP = value;
    } else if (name.compare("Clequ3_2211r_LNP") == 0) {
        Clequ3_2211r_LNP = value;
    } else if (name.compare("Clequ3_2212r_LNP") == 0) {
        Clequ3_2212r_LNP = value;
    } else if (name.compare("Clequ3_2213r_LNP") == 0) {
        Clequ3_2213r_LNP = value;
    } else if (name.compare("Clequ3_2221r_LNP") == 0) {
        Clequ3_2221r_LNP = value;
    } else if (name.compare("Clequ3_2222r_LNP") == 0) {
        Clequ3_2222r_LNP = value;
    } else if (name.compare("Clequ3_2223r_LNP") == 0) {
        Clequ3_2223r_LNP = value;
    } else if (name.compare("Clequ3_2231r_LNP") == 0) {
        Clequ3_2231r_LNP = value;
    } else if (name.compare("Clequ3_2232r_LNP") == 0) {
        Clequ3_2232r_LNP = value;
    } else if (name.compare("Clequ3_2233r_LNP") == 0) {
        Clequ3_2233r_LNP = value;
    } else if (name.compare("Clequ3_2311r_LNP") == 0) {
        Clequ3_2311r_LNP = value;
    } else if (name.compare("Clequ3_2312r_LNP") == 0) {
        Clequ3_2312r_LNP = value;
    } else if (name.compare("Clequ3_2313r_LNP") == 0) {
        Clequ3_2313r_LNP = value;
    } else if (name.compare("Clequ3_2321r_LNP") == 0) {
        Clequ3_2321r_LNP = value;
    } else if (name.compare("Clequ3_2322r_LNP") == 0) {
        Clequ3_2322r_LNP = value;
    } else if (name.compare("Clequ3_2323r_LNP") == 0) {
        Clequ3_2323r_LNP = value;
    } else if (name.compare("Clequ3_2331r_LNP") == 0) {
        Clequ3_2331r_LNP = value;
    } else if (name.compare("Clequ3_2332r_LNP") == 0) {
        Clequ3_2332r_LNP = value;
    } else if (name.compare("Clequ3_2333r_LNP") == 0) {
        Clequ3_2333r_LNP = value;
    } else if (name.compare("Clequ3_3111r_LNP") == 0) {
        Clequ3_3111r_LNP = value;
    } else if (name.compare("Clequ3_3112r_LNP") == 0) {
        Clequ3_3112r_LNP = value;
    } else if (name.compare("Clequ3_3113r_LNP") == 0) {
        Clequ3_3113r_LNP = value;
    } else if (name.compare("Clequ3_3121r_LNP") == 0) {
        Clequ3_3121r_LNP = value;
    } else if (name.compare("Clequ3_3122r_LNP") == 0) {
        Clequ3_3122r_LNP = value;
    } else if (name.compare("Clequ3_3123r_LNP") == 0) {
        Clequ3_3123r_LNP = value;
    } else if (name.compare("Clequ3_3131r_LNP") == 0) {
        Clequ3_3131r_LNP = value;
    } else if (name.compare("Clequ3_3132r_LNP") == 0) {
        Clequ3_3132r_LNP = value;
    } else if (name.compare("Clequ3_3133r_LNP") == 0) {
        Clequ3_3133r_LNP = value;
    } else if (name.compare("Clequ3_3211r_LNP") == 0) {
        Clequ3_3211r_LNP = value;
    } else if (name.compare("Clequ3_3212r_LNP") == 0) {
        Clequ3_3212r_LNP = value;
    } else if (name.compare("Clequ3_3213r_LNP") == 0) {
        Clequ3_3213r_LNP = value;
    } else if (name.compare("Clequ3_3221r_LNP") == 0) {
        Clequ3_3221r_LNP = value;
    } else if (name.compare("Clequ3_3222r_LNP") == 0) {
        Clequ3_3222r_LNP = value;
    } else if (name.compare("Clequ3_3223r_LNP") == 0) {
        Clequ3_3223r_LNP = value;
    } else if (name.compare("Clequ3_3231r_LNP") == 0) {
        Clequ3_3231r_LNP = value;
    } else if (name.compare("Clequ3_3232r_LNP") == 0) {
        Clequ3_3232r_LNP = value;
    } else if (name.compare("Clequ3_3233r_LNP") == 0) {
        Clequ3_3233r_LNP = value;
    } else if (name.compare("Clequ3_3311r_LNP") == 0) {
        Clequ3_3311r_LNP = value;
    } else if (name.compare("Clequ3_3312r_LNP") == 0) {
        Clequ3_3312r_LNP = value;
    } else if (name.compare("Clequ3_3313r_LNP") == 0) {
        Clequ3_3313r_LNP = value;
    } else if (name.compare("Clequ3_3321r_LNP") == 0) {
        Clequ3_3321r_LNP = value;
    } else if (name.compare("Clequ3_3322r_LNP") == 0) {
        Clequ3_3322r_LNP = value;
    } else if (name.compare("Clequ3_3323r_LNP") == 0) {
        Clequ3_3323r_LNP = value;
    } else if (name.compare("Clequ3_3331r_LNP") == 0) {
        Clequ3_3331r_LNP = value;
    } else if (name.compare("Clequ3_3332r_LNP") == 0) {
        Clequ3_3332r_LNP = value;
    } else if (name.compare("Clequ3_3333r_LNP") == 0) {
        Clequ3_3333r_LNP = value;
    } else if (name.compare("Clequ3_1111i_LNP") == 0) {
        Clequ3_1111i_LNP = value;
    } else if (name.compare("Clequ3_1112i_LNP") == 0) {
        Clequ3_1112i_LNP = value;
    } else if (name.compare("Clequ3_1113i_LNP") == 0) {
        Clequ3_1113i_LNP = value;
    } else if (name.compare("Clequ3_1121i_LNP") == 0) {
        Clequ3_1121i_LNP = value;
    } else if (name.compare("Clequ3_1122i_LNP") == 0) {
        Clequ3_1122i_LNP = value;
    } else if (name.compare("Clequ3_1123i_LNP") == 0) {
        Clequ3_1123i_LNP = value;
    } else if (name.compare("Clequ3_1131i_LNP") == 0) {
        Clequ3_1131i_LNP = value;
    } else if (name.compare("Clequ3_1132i_LNP") == 0) {
        Clequ3_1132i_LNP = value;
    } else if (name.compare("Clequ3_1133i_LNP") == 0) {
        Clequ3_1133i_LNP = value;
    } else if (name.compare("Clequ3_1211i_LNP") == 0) {
        Clequ3_1211i_LNP = value;
    } else if (name.compare("Clequ3_1212i_LNP") == 0) {
        Clequ3_1212i_LNP = value;
    } else if (name.compare("Clequ3_1213i_LNP") == 0) {
        Clequ3_1213i_LNP = value;
    } else if (name.compare("Clequ3_1221i_LNP") == 0) {
        Clequ3_1221i_LNP = value;
    } else if (name.compare("Clequ3_1222i_LNP") == 0) {
        Clequ3_1222i_LNP = value;
    } else if (name.compare("Clequ3_1223i_LNP") == 0) {
        Clequ3_1223i_LNP = value;
    } else if (name.compare("Clequ3_1231i_LNP") == 0) {
        Clequ3_1231i_LNP = value;
    } else if (name.compare("Clequ3_1232i_LNP") == 0) {
        Clequ3_1232i_LNP = value;
    } else if (name.compare("Clequ3_1233i_LNP") == 0) {
        Clequ3_1233i_LNP = value;
    } else if (name.compare("Clequ3_1311i_LNP") == 0) {
        Clequ3_1311i_LNP = value;
    } else if (name.compare("Clequ3_1312i_LNP") == 0) {
        Clequ3_1312i_LNP = value;
    } else if (name.compare("Clequ3_1313i_LNP") == 0) {
        Clequ3_1313i_LNP = value;
    } else if (name.compare("Clequ3_1321i_LNP") == 0) {
        Clequ3_1321i_LNP = value;
    } else if (name.compare("Clequ3_1322i_LNP") == 0) {
        Clequ3_1322i_LNP = value;
    } else if (name.compare("Clequ3_1323i_LNP") == 0) {
        Clequ3_1323i_LNP = value;
    } else if (name.compare("Clequ3_1331i_LNP") == 0) {
        Clequ3_1331i_LNP = value;
    } else if (name.compare("Clequ3_1332i_LNP") == 0) {
        Clequ3_1332i_LNP = value;
    } else if (name.compare("Clequ3_1333i_LNP") == 0) {
        Clequ3_1333i_LNP = value;
    } else if (name.compare("Clequ3_2111i_LNP") == 0) {
        Clequ3_2111i_LNP = value;
    } else if (name.compare("Clequ3_2112i_LNP") == 0) {
        Clequ3_2112i_LNP = value;
    } else if (name.compare("Clequ3_2113i_LNP") == 0) {
        Clequ3_2113i_LNP = value;
    } else if (name.compare("Clequ3_2121i_LNP") == 0) {
        Clequ3_2121i_LNP = value;
    } else if (name.compare("Clequ3_2122i_LNP") == 0) {
        Clequ3_2122i_LNP = value;
    } else if (name.compare("Clequ3_2123i_LNP") == 0) {
        Clequ3_2123i_LNP = value;
    } else if (name.compare("Clequ3_2131i_LNP") == 0) {
        Clequ3_2131i_LNP = value;
    } else if (name.compare("Clequ3_2132i_LNP") == 0) {
        Clequ3_2132i_LNP = value;
    } else if (name.compare("Clequ3_2133i_LNP") == 0) {
        Clequ3_2133i_LNP = value;
    } else if (name.compare("Clequ3_2211i_LNP") == 0) {
        Clequ3_2211i_LNP = value;
    } else if (name.compare("Clequ3_2212i_LNP") == 0) {
        Clequ3_2212i_LNP = value;
    } else if (name.compare("Clequ3_2213i_LNP") == 0) {
        Clequ3_2213i_LNP = value;
    } else if (name.compare("Clequ3_2221i_LNP") == 0) {
        Clequ3_2221i_LNP = value;
    } else if (name.compare("Clequ3_2222i_LNP") == 0) {
        Clequ3_2222i_LNP = value;
    } else if (name.compare("Clequ3_2223i_LNP") == 0) {
        Clequ3_2223i_LNP = value;
    } else if (name.compare("Clequ3_2231i_LNP") == 0) {
        Clequ3_2231i_LNP = value;
    } else if (name.compare("Clequ3_2232i_LNP") == 0) {
        Clequ3_2232i_LNP = value;
    } else if (name.compare("Clequ3_2233i_LNP") == 0) {
        Clequ3_2233i_LNP = value;
    } else if (name.compare("Clequ3_2311i_LNP") == 0) {
        Clequ3_2311i_LNP = value;
    } else if (name.compare("Clequ3_2312i_LNP") == 0) {
        Clequ3_2312i_LNP = value;
    } else if (name.compare("Clequ3_2313i_LNP") == 0) {
        Clequ3_2313i_LNP = value;
    } else if (name.compare("Clequ3_2321i_LNP") == 0) {
        Clequ3_2321i_LNP = value;
    } else if (name.compare("Clequ3_2322i_LNP") == 0) {
        Clequ3_2322i_LNP = value;
    } else if (name.compare("Clequ3_2323i_LNP") == 0) {
        Clequ3_2323i_LNP = value;
    } else if (name.compare("Clequ3_2331i_LNP") == 0) {
        Clequ3_2331i_LNP = value;
    } else if (name.compare("Clequ3_2332i_LNP") == 0) {
        Clequ3_2332i_LNP = value;
    } else if (name.compare("Clequ3_2333i_LNP") == 0) {
        Clequ3_2333i_LNP = value;
    } else if (name.compare("Clequ3_3111i_LNP") == 0) {
        Clequ3_3111i_LNP = value;
    } else if (name.compare("Clequ3_3112i_LNP") == 0) {
        Clequ3_3112i_LNP = value;
    } else if (name.compare("Clequ3_3113i_LNP") == 0) {
        Clequ3_3113i_LNP = value;
    } else if (name.compare("Clequ3_3121i_LNP") == 0) {
        Clequ3_3121i_LNP = value;
    } else if (name.compare("Clequ3_3122i_LNP") == 0) {
        Clequ3_3122i_LNP = value;
    } else if (name.compare("Clequ3_3123i_LNP") == 0) {
        Clequ3_3123i_LNP = value;
    } else if (name.compare("Clequ3_3131i_LNP") == 0) {
        Clequ3_3131i_LNP = value;
    } else if (name.compare("Clequ3_3132i_LNP") == 0) {
        Clequ3_3132i_LNP = value;
    } else if (name.compare("Clequ3_3133i_LNP") == 0) {
        Clequ3_3133i_LNP = value;
    } else if (name.compare("Clequ3_3211i_LNP") == 0) {
        Clequ3_3211i_LNP = value;
    } else if (name.compare("Clequ3_3212i_LNP") == 0) {
        Clequ3_3212i_LNP = value;
    } else if (name.compare("Clequ3_3213i_LNP") == 0) {
        Clequ3_3213i_LNP = value;
    } else if (name.compare("Clequ3_3221i_LNP") == 0) {
        Clequ3_3221i_LNP = value;
    } else if (name.compare("Clequ3_3222i_LNP") == 0) {
        Clequ3_3222i_LNP = value;
    } else if (name.compare("Clequ3_3223i_LNP") == 0) {
        Clequ3_3223i_LNP = value;
    } else if (name.compare("Clequ3_3231i_LNP") == 0) {
        Clequ3_3231i_LNP = value;
    } else if (name.compare("Clequ3_3232i_LNP") == 0) {
        Clequ3_3232i_LNP = value;
    } else if (name.compare("Clequ3_3233i_LNP") == 0) {
        Clequ3_3233i_LNP = value;
    } else if (name.compare("Clequ3_3311i_LNP") == 0) {
        Clequ3_3311i_LNP = value;
    } else if (name.compare("Clequ3_3312i_LNP") == 0) {
        Clequ3_3312i_LNP = value;
    } else if (name.compare("Clequ3_3313i_LNP") == 0) {
        Clequ3_3313i_LNP = value;
    } else if (name.compare("Clequ3_3321i_LNP") == 0) {
        Clequ3_3321i_LNP = value;
    } else if (name.compare("Clequ3_3322i_LNP") == 0) {
        Clequ3_3322i_LNP = value;
    } else if (name.compare("Clequ3_3323i_LNP") == 0) {
        Clequ3_3323i_LNP = value;
    } else if (name.compare("Clequ3_3331i_LNP") == 0) {
        Clequ3_3331i_LNP = value;
    } else if (name.compare("Clequ3_3332i_LNP") == 0) {
        Clequ3_3332i_LNP = value;
    } else if (name.compare("Clequ3_3333i_LNP") == 0) {
        Clequ3_3333i_LNP = value;

    } else if (name.compare("Lambda_NP") == 0)
        Lambda_NP = value;
    else if (name.compare("BrHinv") == 0) {
        //  Always positive
        BrHinv = fabs(value);
    } else if (name.compare("BrHexo") == 0) {
        //  Always positive
        BrHexo = fabs(value);
    } else if (name.compare("dg1Z") == 0) {
        dg1Z = value;
    } else if (name.compare("dKappaga") == 0) {
        dKappaga = value;
    } else if (name.compare("lambZ") == 0) {
        lambZ = value;
    } else if (name.compare("eggFint") == 0) {
        eggFint = value;
    } else if (name.compare("eggFpar") == 0) {
        eggFpar = value;
    } else if (name.compare("ettHint") == 0) {
        ettHint = value;
    } else if (name.compare("ettHpar") == 0) {
        ettHpar = value;
    } else if (name.compare("eVBFint") == 0) {
        eVBFint = value;
    } else if (name.compare("eVBFpar") == 0) {
        eVBFpar = value;
    } else if (name.compare("eWHint") == 0) {
        eWHint = value;
    } else if (name.compare("eWHpar") == 0) {
        eWHpar = value;
    } else if (name.compare("eZHint") == 0) {
        eZHint = value;
    } else if (name.compare("eZHpar") == 0) {
        eZHpar = value;
    } else if (name.compare("eeeWBFint") == 0) {
        eeeWBFint = value;
    } else if (name.compare("eeeWBFpar") == 0) {
        eeeWBFpar = value;
    } else if (name.compare("eeeZHint") == 0) {
        eeeZHint = value;
    } else if (name.compare("eeeZHpar") == 0) {
        eeeZHpar = value;
    } else if (name.compare("eeettHint") == 0) {
        eeettHint = value;
    } else if (name.compare("eeettHpar") == 0) {
        eeettHpar = value;
    } else if (name.compare("eepWBFint") == 0) {
        eepWBFint = value;
    } else if (name.compare("eepWBFpar") == 0) {
        eepWBFpar = value;
    } else if (name.compare("eepZBFint") == 0) {
        eepZBFint = value;
    } else if (name.compare("eepZBFpar") == 0) {
        eepZBFpar = value;
    } else if (name.compare("eHggint") == 0) {
        eHggint = value;
    } else if (name.compare("eHggpar") == 0) {
        eHggpar = value;
    } else if (name.compare("eHWWint") == 0) {
        eHWWint = value;
    } else if (name.compare("eHWWpar") == 0) {
        eHWWpar = value;
    } else if (name.compare("eHZZint") == 0) {
        eHZZint = value;
    } else if (name.compare("eHZZpar") == 0) {
        eHZZpar = value;
    } else if (name.compare("eHZgaint") == 0) {
        eHZgaint = value;
    } else if (name.compare("eHZgapar") == 0) {
        eHZgapar = value;
    } else if (name.compare("eHgagaint") == 0) {
        eHgagaint = value;
    } else if (name.compare("eHgagapar") == 0) {
        eHgagapar = value;
    } else if (name.compare("eHmumuint") == 0) {
        eHmumuint = value;
    } else if (name.compare("eHmumupar") == 0) {
        eHmumupar = value;
    } else if (name.compare("eHtautauint") == 0) {
        eHtautauint = value;
    } else if (name.compare("eHtautaupar") == 0) {
        eHtautaupar = value;
    } else if (name.compare("eHccint") == 0) {
        eHccint = value;
    } else if (name.compare("eHccpar") == 0) {
        eHccpar = value;
    } else if (name.compare("eHbbint") == 0) {
        eHbbint = value;
    } else if (name.compare("eHbbpar") == 0) {
        eHbbpar = value;
    } else if (name.compare("eeeWWint") == 0) {
        eeeWWint = value;
    } else if (name.compare("edeeWWdcint") == 0) {
        edeeWWdcint = value;
    } else if (name.compare("eggFHgaga") == 0) {
        eggFHgaga = value;
    } else if (name.compare("eggFHZga") == 0) {
        eggFHZga = value;
    } else if (name.compare("eggFHZZ") == 0) {
        eggFHZZ = value;
    } else if (name.compare("eggFHWW") == 0) {
        eggFHWW = value;
    } else if (name.compare("eggFHtautau") == 0) {
        eggFHtautau = value;
    } else if (name.compare("eggFHbb") == 0) {
        eggFHbb = value;
    } else if (name.compare("eggFHmumu") == 0) {
        eggFHmumu = value;
    } else if (name.compare("eVBFHgaga") == 0) {
        eVBFHgaga = value;
    } else if (name.compare("eVBFHZga") == 0) {
        eVBFHZga = value;
    } else if (name.compare("eVBFHZZ") == 0) {
        eVBFHZZ = value;
    } else if (name.compare("eVBFHWW") == 0) {
        eVBFHWW = value;
    } else if (name.compare("eVBFHtautau") == 0) {
        eVBFHtautau = value;
    } else if (name.compare("eVBFHbb") == 0) {
        eVBFHbb = value;
    } else if (name.compare("eVBFHmumu") == 0) {
        eVBFHmumu = value;
    } else if (name.compare("eWHgaga") == 0) {
        eWHgaga = value;
    } else if (name.compare("eWHZga") == 0) {
        eWHZga = value;
    } else if (name.compare("eWHZZ") == 0) {
        eWHZZ = value;
    } else if (name.compare("eWHWW") == 0) {
        eWHWW = value;
    } else if (name.compare("eWHtautau") == 0) {
        eWHtautau = value;
    } else if (name.compare("eWHbb") == 0) {
        eWHbb = value;
    } else if (name.compare("eWHmumu") == 0) {
        eWHmumu = value;
    } else if (name.compare("eZHgaga") == 0) {
        eZHgaga = value;
    } else if (name.compare("eZHZga") == 0) {
        eZHZga = value;
    } else if (name.compare("eZHZZ") == 0) {
        eZHZZ = value;
    } else if (name.compare("eZHWW") == 0) {
        eZHWW = value;
    } else if (name.compare("eZHtautau") == 0) {
        eZHtautau = value;
    } else if (name.compare("eZHbb") == 0) {
        eZHbb = value;
    } else if (name.compare("eZHmumu") == 0) {
        eZHmumu = value;
    } else if (name.compare("ettHgaga") == 0) {
        ettHgaga = value;
    } else if (name.compare("ettHZga") == 0) {
        ettHZga = value;
    } else if (name.compare("ettHZZ") == 0) {
        ettHZZ = value;
    } else if (name.compare("ettHWW") == 0) {
        ettHWW = value;
    } else if (name.compare("ettHtautau") == 0) {
        ettHtautau = value;
    } else if (name.compare("ettHbb") == 0) {
        ettHbb = value;
    } else if (name.compare("ettHmumu") == 0) {
        ettHmumu = value;
    } else if (name.compare("eVBFHinv") == 0) {
        eVBFHinv = value;
    } else if (name.compare("eVHinv") == 0) {
        eVHinv = value;
    } else if (name.compare("nuisP1") == 0) {
        nuisP1 = value;
    } else if (name.compare("nuisP2") == 0) {
        nuisP2 = value;
    } else if (name.compare("nuisP3") == 0) {
        nuisP3 = value;
    } else if (name.compare("nuisP4") == 0) {
        nuisP4 = value;
    } else if (name.compare("nuisP5") == 0) {
        nuisP5 = value;
    } else if (name.compare("nuisP6") == 0) {
        nuisP6 = value;
    } else if (name.compare("nuisP7") == 0) {
        nuisP7 = value;
    } else if (name.compare("nuisP8") == 0) {
        nuisP8 = value;
    } else if (name.compare("nuisP9") == 0) {
        nuisP9 = value;
    } else if (name.compare("nuisP10") == 0) {
        nuisP10 = value;
    } else if (name.compare("eVBF_2_Hbox") == 0) {
        eVBF_2_Hbox = value;
    } else if (name.compare("eVBF_2_HQ1_11") == 0) {
        eVBF_2_HQ1_11 = value;
    } else if (name.compare("eVBF_2_Hu_11") == 0) {
        eVBF_2_Hu_11 = value;
    } else if (name.compare("eVBF_2_Hd_11") == 0) {
        eVBF_2_Hd_11 = value;
    } else if (name.compare("eVBF_2_HQ3_11") == 0) {
        eVBF_2_HQ3_11 = value;
    } else if (name.compare("eVBF_2_HD") == 0) {
        eVBF_2_HD = value;
    } else if (name.compare("eVBF_2_HB") == 0) {
        eVBF_2_HB = value;
    } else if (name.compare("eVBF_2_HW") == 0) {
        eVBF_2_HW = value;
    } else if (name.compare("eVBF_2_HWB") == 0) {
        eVBF_2_HWB = value;
    } else if (name.compare("eVBF_2_HG") == 0) {
        eVBF_2_HG = value;
    } else if (name.compare("eVBF_2_DHB") == 0) {
        eVBF_2_DHB = value;
    } else if (name.compare("eVBF_2_DHW") == 0) {
        eVBF_2_DHW = value;
    } else if (name.compare("eVBF_2_DeltaGF") == 0) {
        eVBF_2_DeltaGF = value;
    } else if (name.compare("eVBF_78_Hbox") == 0) {
        eVBF_78_Hbox = value;
    } else if (name.compare("eVBF_78_HQ1_11") == 0) {
        eVBF_78_HQ1_11 = value;
    } else if (name.compare("eVBF_78_Hu_11") == 0) {
        eVBF_78_Hu_11 = value;
    } else if (name.compare("eVBF_78_Hd_11") == 0) {
        eVBF_78_Hd_11 = value;
    } else if (name.compare("eVBF_78_HQ3_11") == 0) {
        eVBF_78_HQ3_11 = value;
    } else if (name.compare("eVBF_78_HD") == 0) {
        eVBF_78_HD = value;
    } else if (name.compare("eVBF_78_HB") == 0) {
        eVBF_78_HB = value;
    } else if (name.compare("eVBF_78_HW") == 0) {
        eVBF_78_HW = value;
    } else if (name.compare("eVBF_78_HWB") == 0) {
        eVBF_78_HWB = value;
    } else if (name.compare("eVBF_78_HG") == 0) {
        eVBF_78_HG = value;
    } else if (name.compare("eVBF_78_DHB") == 0) {
        eVBF_78_DHB = value;
    } else if (name.compare("eVBF_78_DHW") == 0) {
        eVBF_78_DHW = value;
    } else if (name.compare("eVBF_78_DeltaGF") == 0) {
        eVBF_78_DeltaGF = value;
    } else if (name.compare("eVBF_1314_Hbox") == 0) {
        eVBF_1314_Hbox = value;
    } else if (name.compare("eVBF_1314_HQ1_11") == 0) {
        eVBF_1314_HQ1_11 = value;
    } else if (name.compare("eVBF_1314_Hu_11") == 0) {
        eVBF_1314_Hu_11 = value;
    } else if (name.compare("eVBF_1314_Hd_11") == 0) {
        eVBF_1314_Hd_11 = value;
    } else if (name.compare("eVBF_1314_HQ3_11") == 0) {
        eVBF_1314_HQ3_11 = value;
    } else if (name.compare("eVBF_1314_HD") == 0) {
        eVBF_1314_HD = value;
    } else if (name.compare("eVBF_1314_HB") == 0) {
        eVBF_1314_HB = value;
    } else if (name.compare("eVBF_1314_HW") == 0) {
        eVBF_1314_HW = value;
    } else if (name.compare("eVBF_1314_HWB") == 0) {
        eVBF_1314_HWB = value;
    } else if (name.compare("eVBF_1314_HG") == 0) {
        eVBF_1314_HG = value;
    } else if (name.compare("eVBF_1314_DHB") == 0) {
        eVBF_1314_DHB = value;
    } else if (name.compare("eVBF_1314_DHW") == 0) {
        eVBF_1314_DHW = value;
    } else if (name.compare("eVBF_1314_DeltaGF") == 0) {
        eVBF_1314_DeltaGF = value;
    } else if (name.compare("eWH_2_Hbox") == 0) {
        eWH_2_Hbox = value;
    } else if (name.compare("eWH_2_HQ3_11") == 0) {
        eWH_2_HQ3_11 = value;
    } else if (name.compare("eWH_2_HD") == 0) {
        eWH_2_HD = value;
    } else if (name.compare("eWH_2_HW") == 0) {
        eWH_2_HW = value;
    } else if (name.compare("eWH_2_HWB") == 0) {
        eWH_2_HWB = value;
    } else if (name.compare("eWH_2_DHW") == 0) {
        eWH_2_DHW = value;
    } else if (name.compare("eWH_2_DeltaGF") == 0) {
        eWH_2_DeltaGF = value;
    } else if (name.compare("eWH_78_Hbox") == 0) {
        eWH_78_Hbox = value;
    } else if (name.compare("eWH_78_HQ3_11") == 0) {
        eWH_78_HQ3_11 = value;
    } else if (name.compare("eWH_78_HD") == 0) {
        eWH_78_HD = value;
    } else if (name.compare("eWH_78_HW") == 0) {
        eWH_78_HW = value;
    } else if (name.compare("eWH_78_HWB") == 0) {
        eWH_78_HWB = value;
    } else if (name.compare("eWH_78_DHW") == 0) {
        eWH_78_DHW = value;
    } else if (name.compare("eWH_78_DeltaGF") == 0) {
        eWH_78_DeltaGF = value;
    } else if (name.compare("eWH_1314_Hbox") == 0) {
        eWH_1314_Hbox = value;
    } else if (name.compare("eWH_1314_HQ3_11") == 0) {
        eWH_1314_HQ3_11 = value;
    } else if (name.compare("eWH_1314_HD") == 0) {
        eWH_1314_HD = value;
    } else if (name.compare("eWH_1314_HW") == 0) {
        eWH_1314_HW = value;
    } else if (name.compare("eWH_1314_HWB") == 0) {
        eWH_1314_HWB = value;
    } else if (name.compare("eWH_1314_DHW") == 0) {
        eWH_1314_DHW = value;
    } else if (name.compare("eWH_1314_DeltaGF") == 0) {
        eWH_1314_DeltaGF = value;
    } else if (name.compare("eZH_2_Hbox") == 0) {
        eZH_2_Hbox = value;
    } else if (name.compare("eZH_2_HQ1_11") == 0) {
        eZH_2_HQ1_11 = value;
    } else if (name.compare("eZH_2_Hu_11") == 0) {
        eZH_2_Hu_11 = value;
    } else if (name.compare("eZH_2_Hd_11") == 0) {
        eZH_2_Hd_11 = value;
    } else if (name.compare("eZH_2_HQ3_11") == 0) {
        eZH_2_HQ3_11 = value;
    } else if (name.compare("eZH_2_HD") == 0) {
        eZH_2_HD = value;
    } else if (name.compare("eZH_2_HB") == 0) {
        eZH_2_HB = value;
    } else if (name.compare("eZH_2_HW") == 0) {
        eZH_2_HW = value;
    } else if (name.compare("eZH_2_HWB") == 0) {
        eZH_2_HWB = value;
    } else if (name.compare("eZH_2_DHB") == 0) {
        eZH_2_DHB = value;
    } else if (name.compare("eZH_2_DHW") == 0) {
        eZH_2_DHW = value;
    } else if (name.compare("eZH_2_DeltaGF") == 0) {
        eZH_2_DeltaGF = value;
    } else if (name.compare("eZH_78_Hbox") == 0) {
        eZH_78_Hbox = value;
    } else if (name.compare("eZH_78_HQ1_11") == 0) {
        eZH_78_HQ1_11 = value;
    } else if (name.compare("eZH_78_Hu_11") == 0) {
        eZH_78_Hu_11 = value;
    } else if (name.compare("eZH_78_Hd_11") == 0) {
        eZH_78_Hd_11 = value;
    } else if (name.compare("eZH_78_HQ3_11") == 0) {
        eZH_78_HQ3_11 = value;
    } else if (name.compare("eZH_78_HD") == 0) {
        eZH_78_HD = value;
    } else if (name.compare("eZH_78_HB") == 0) {
        eZH_78_HB = value;
    } else if (name.compare("eZH_78_HW") == 0) {
        eZH_78_HW = value;
    } else if (name.compare("eZH_78_HWB") == 0) {
        eZH_78_HWB = value;
    } else if (name.compare("eZH_78_DHB") == 0) {
        eZH_78_DHB = value;
    } else if (name.compare("eZH_78_DHW") == 0) {
        eZH_78_DHW = value;
    } else if (name.compare("eZH_78_DeltaGF") == 0) {
        eZH_78_DeltaGF = value;
    } else if (name.compare("eZH_1314_Hbox") == 0) {
        eZH_1314_Hbox = value;
    } else if (name.compare("eZH_1314_HQ1_11") == 0) {
        eZH_1314_HQ1_11 = value;
    } else if (name.compare("eZH_1314_Hu_11") == 0) {
        eZH_1314_Hu_11 = value;
    } else if (name.compare("eZH_1314_Hd_11") == 0) {
        eZH_1314_Hd_11 = value;
    } else if (name.compare("eZH_1314_HQ3_11") == 0) {
        eZH_1314_HQ3_11 = value;
    } else if (name.compare("eZH_1314_HD") == 0) {
        eZH_1314_HD = value;
    } else if (name.compare("eZH_1314_HB") == 0) {
        eZH_1314_HB = value;
    } else if (name.compare("eZH_1314_HW") == 0) {
        eZH_1314_HW = value;
    } else if (name.compare("eZH_1314_HWB") == 0) {
        eZH_1314_HWB = value;
    } else if (name.compare("eZH_1314_DHB") == 0) {
        eZH_1314_DHB = value;
    } else if (name.compare("eZH_1314_DHW") == 0) {
        eZH_1314_DHW = value;
    } else if (name.compare("eZH_1314_DeltaGF") == 0) {
        eZH_1314_DeltaGF = value;
    } else if (name.compare("ettH_2_HG") == 0) {
        ettH_2_HG = value;
    } else if (name.compare("ettH_2_G") == 0) {
        ettH_2_G = value;
    } else if (name.compare("ettH_2_uG_33r") == 0) {
        ettH_2_uG_33r = value;
    } else if (name.compare("ettH_2_DeltagHt") == 0) {
        ettH_2_DeltagHt = value;
    } else if (name.compare("ettH_78_HG") == 0) {
        ettH_78_HG = value;
    } else if (name.compare("ettH_78_G") == 0) {
        ettH_78_G = value;
    } else if (name.compare("ettH_78_uG_33r") == 0) {
        ettH_78_uG_33r = value;
    } else if (name.compare("ettH_78_DeltagHt") == 0) {
        ettH_78_DeltagHt = value;
    } else if (name.compare("ettH_1314_HG") == 0) {
        ettH_1314_HG = value;
    } else if (name.compare("ettH_1314_G") == 0) {
        ettH_1314_G = value;
    } else if (name.compare("ettH_1314_uG_33r") == 0) {
        ettH_1314_uG_33r = value;
    } else if (name.compare("ettH_1314_DeltagHt") == 0) {
        ettH_1314_DeltagHt = value;
    } else
        NPbase::setParameter(name, value);
}

//I think that for this model, with so many parameters, it's better to include only those we're really interested in
//Since all the parameters are initialized to zero we can just skip the CheckParameters for this model
/*bool NPSMEFTd6General::CheckParameters(const std::map<std::string, double>& DPars)
{
    for (int i = 0; i < NNPSMEFTd6GeneralVars; i++) {
        if (DPars.find(NPSMEFTd6GeneralVars[i]) == DPars.end()) {
            std::cout << "ERROR: Missing mandatory NPSMEFTd6General parameter "
                    << NPSMEFTd6GeneralVars << std::endl;
            raiseMissingModelParameterCount();
            addMissingModelParameter(NPSMEFTd6GeneralVars[i]);
        }
    }
    return (NPbase::CheckParameters(DPars));
}
*/

bool NPSMEFTd6General::setFlag(const std::string name, const bool value)
{
    bool res = false;
    if (name.compare("QuadraticTerms") == 0) {
        FlagQuadraticTerms = value;
        if (value) setModelLinearized(false);
        res = true;
    } else if (name.compare("RotateCHWCHB") == 0) {
        FlagRotateCHWCHB = value;
        res = true;
    } else if (name.compare("HiggsSM") == 0) {
        FlagHiggsSM = value;
        res = true;
    } else if (name.compare("LoopHd6") == 0) {
        FlagLoopHd6 = value;
        res = true;
    } else if (name.compare("LoopH3d6Quad") == 0) {
        FlagLoopH3d6Quad = value;
        res = true;
    } else if (name.compare("MWinput") == 0) {
        FlagMWinput = value;
        res = true;
    } else if (name.compare("LeptonUniversal") == 0) {
        FlagLeptonUniversal = value;
        res = true;   
    } else if (name.compare("QuarkUniversal") == 0) {
        FlagQuarkUniversal = value;
        res = true;   
    } else
        res = NPbase::setFlag(name, value);

    return (res);
}

////////////////////////////////////////////////////////////////////////





////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
//////  From here on we will comment everything since everything comes from the previous code /////    
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////




////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//Before these functions were taking the values of the operators after
//the approximate running. Now we set them to the values of the operators
//after the complete running. Now we have included all the complex parts
//so there are some functions that should be promoted to complex now.
//Finally, some of the entries are zero since it was so before, this
//needs to be updated


double NPSMEFTd6General::CHF1_diag(const Particle F) const
{
    //We include only the real part for the moment
    if (F.is("NEUTRINO_1") || F.is("ELECTRON"))
        return CHl1R[0][0];
    else if (F.is("NEUTRINO_2") || F.is("MU"))
        return CHl1R[1][1];
    else if (F.is("NEUTRINO_3") || F.is("TAU"))
        return CHl1R[2][2];
    else if (F.is("UP") || F.is("DOWN"))
        return CHq1R[0][0];
    else if (F.is("CHARM") || F.is("STRANGE"))
        return CHq1R[1][1];
    else if (F.is("TOP") || F.is("BOTTOM"))
        return CHq1R[2][2];
    else
        throw std::runtime_error("NPSMEFTd6::CHF1_diag(): wrong argument");
}

double NPSMEFTd6General::CHF3_diag(const Particle F) const
{
    if (F.is("NEUTRINO_1") || F.is("ELECTRON"))
        return CHl3R[0][0];
    else if (F.is("NEUTRINO_2") || F.is("MU"))
        return CHl3R[1][1];
    else if (F.is("NEUTRINO_3") || F.is("TAU"))
        return CHl3R[2][2];
    else if (F.is("UP") || F.is("DOWN"))
        return CHq3R[0][0];
    else if (F.is("CHARM") || F.is("STRANGE"))
        return CHq3R[1][1];
    else if (F.is("TOP") || F.is("BOTTOM"))
        return CHq3R[2][2];
    else
        throw std::runtime_error("NPSMEFTd6::CHF3_diag(): wrong argument");
}

double NPSMEFTd6General::CHf_diag(const Particle f) const
{
    if (f.is("NEUTRINO_1") || f.is("NEUTRINO_2") || f.is("NEUTRINO_3"))
        return 0.0;
    else if (f.is("ELECTRON"))
        return CHeR[0][0];
    else if (f.is("MU"))
        return CHeR[1][1];
    else if (f.is("TAU"))
        return CHeR[2][2];
    else if (f.is("UP"))
        return CHuR[0][0];
    else if (f.is("CHARM"))
        return CHuR[1][1];
    else if (f.is("TOP"))
        return CHuR[2][2];
    else if (f.is("DOWN"))
        return CHdR[0][0];
    else if (f.is("STRANGE"))
        return CHdR[1][1];
    else if (f.is("BOTTOM"))
        return CHdR[2][2];
    else
        throw std::runtime_error("NPSMEFTd6::CHf_diag(): wrong argument");
}

gslpp::complex NPSMEFTd6General::CHud_diag(const Particle u) const
{
    if (!u.is("QUARK") || u.getIndex() % 2 != 0)
        throw std::runtime_error("NPSMEFTd6::CHud_diag(): wrong argument");

    if (u.is("UP"))
        return gslpp::complex(CHudR[0][0], CHudI[0][0], false);
    else if (u.is("CHARM"))
        return gslpp::complex(CHudR[1][1], CHudI[1][1], false);
    else if (u.is("TOP"))
        return gslpp::complex(CHudR[2][2], CHudI[2][2], false);
    else
        throw std::runtime_error("NPSMEFTd6::CHud_diag(): wrong argument");
}

gslpp::complex NPSMEFTd6General::CfH_diag(const Particle f) const
{
    if (f.is("NEUTRINO_1") || f.is("NEUTRINO_2") || f.is("NEUTRINO_3"))
        return 0.0;
    else if (f.is("ELECTRON"))
        return gslpp::complex(CeHR[0][0], CeHI[0][0], false);
    else if (f.is("MU"))
        return gslpp::complex(CeHR[1][1], CeHI[1][1], false);
    else if (f.is("TAU"))
        return gslpp::complex(CeHR[2][2], CeHI[2][2], false);
    else if (f.is("UP"))
        return gslpp::complex(CuHR[0][0], CuHI[0][0], false);
    else if (f.is("CHARM"))
        return gslpp::complex(CuHR[1][1], CuHI[1][1], false);
    else if (f.is("TOP"))
        return gslpp::complex(CuHR[2][2], CuHI[2][2], false);
    else if (f.is("DOWN"))
        return gslpp::complex(CdHR[0][0], CdHI[0][0], false);
    else if (f.is("STRANGE"))
        return gslpp::complex(CdHR[1][1], CdHI[1][1], false);
    else if (f.is("BOTTOM"))
        return gslpp::complex(CdHR[2][2], CdHI[2][2], false);
    else
        throw std::runtime_error("NPSMEFTd6::CfH_diag(): wrong argument");
}
      
gslpp::complex NPSMEFTd6General::CfG_diag(const Particle f) const
{
    if (f.is("NEUTRINO_1") || f.is("NEUTRINO_2") || f.is("NEUTRINO_3"))
        return 0.0;
    else if (f.is("ELECTRON"))
        return 0.0;
    else if (f.is("MU"))
        return 0.0;
    else if (f.is("TAU"))
        return 0.0;
    else if (f.is("UP"))
        return gslpp::complex(CuGR[0][0], CuGI[0][0], false);
    else if (f.is("CHARM"))
        return gslpp::complex(CuGR[1][1], CuGI[1][1], false);
    else if (f.is("TOP"))
        return gslpp::complex(CuGR[2][2], CuGI[2][2], false);
    else if (f.is("DOWN"))
        return 0.0;
    else if (f.is("STRANGE"))
        return 0.0;
    else if (f.is("BOTTOM"))
        return 0.0;
    else
        throw std::runtime_error("NPSMEFTd6::CfG_diag(): wrong argument");
}
      
gslpp::complex NPSMEFTd6General::CfW_diag(const Particle f) const
{
    if (f.is("NEUTRINO_1") || f.is("NEUTRINO_2") || f.is("NEUTRINO_3"))
        return 0.0;
    else if (f.is("ELECTRON"))
        return 0.0;
    else if (f.is("MU"))
        return 0.0;
    else if (f.is("TAU"))
        return 0.0;
    else if (f.is("UP"))
        return gslpp::complex(CuWR[0][0], CuWI[0][0], false);
    else if (f.is("CHARM"))
        return gslpp::complex(CuWR[1][1], CuWI[1][1], false);
    else if (f.is("TOP"))
        return gslpp::complex(CuWR[2][2], CuWI[2][2], false);
    else if (f.is("DOWN"))
        return 0.0;
    else if (f.is("STRANGE"))
        return 0.0;
    else if (f.is("BOTTOM"))
        return 0.0;
    else
        throw std::runtime_error("NPSMEFTd6::CfW_diag(): wrong argument");
}
      
gslpp::complex NPSMEFTd6General::CfB_diag(const Particle f) const
{
    if (f.is("NEUTRINO_1") || f.is("NEUTRINO_2") || f.is("NEUTRINO_3"))
        return 0.0;
    else if (f.is("ELECTRON"))
        return 0.0;
    else if (f.is("MU"))
        return 0.0;
    else if (f.is("TAU"))
        return 0.0;
    else if (f.is("UP"))
        return gslpp::complex(CuBR[0][0], CuBI[0][0], false);
    else if (f.is("CHARM"))
        return gslpp::complex(CuBR[1][1], CuBI[1][1], false);
    else if (f.is("TOP"))
        return gslpp::complex(CuBR[2][2], CuBI[2][2], false);
    else if (f.is("DOWN"))
        return 0.0;
    else if (f.is("STRANGE"))
        return 0.0;
    else if (f.is("BOTTOM"))
        return 0.0;
    else
        throw std::runtime_error("NPSMEFTd6::CfB_diag(): wrong argument");
}


////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
/////////////////////////// Until here /////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////








double NPSMEFTd6General::DeltaGF() const
{
    return ((CHl3R[0][0] + CHl3R[1][1] - 0.5 * (CllR[0][1][1][0] + CllR[1][0][0][1])) * v2_over_LambdaNP2);
}


double NPSMEFTd6General::obliqueS() const
{
    return (4.0 * sW_tree * cW_tree * CHWB / aleMz * v2_over_LambdaNP2);
}

double NPSMEFTd6General::obliqueT() const
{
    return (-CHD / 2.0 / aleMz * v2_over_LambdaNP2);
}

double NPSMEFTd6General::obliqueU() const
{
    return 0.0;
}

double NPSMEFTd6General::obliqueW() const
{
    return (-g2_tree * g2_tree * (C2W + 0.5 * C2WS) * v2_over_LambdaNP2 / 2.0);
}

double NPSMEFTd6General::obliqueY() const
{
    return (-g2_tree * g2_tree * (C2B + 0.5 * C2BS) * v2_over_LambdaNP2 / 2.0);
}

/////////////////////////////// Deviations in the experimental values of the SM input parameters /////////////////////////////////////////

double NPSMEFTd6General::deltaMz() const
{
    //  Ref. value used in MG simulations
    return ( (Mz - 91.1879) / 91.1879);
}

double NPSMEFTd6General::deltaMz2() const
{
    return ( 0.0);
}

double NPSMEFTd6General::deltaMh() const
{
    //  Ref. value used in MG simulations
    return ( (mHl - 125.1) / 125.1);
}

double NPSMEFTd6General::deltaMh2() const
{
    return ( 0.0);
}

double NPSMEFTd6General::deltamt() const
{
    //  Ref. value used in MG simulations
    return ( (mtpole - 173.0) / 173.0);
}

double NPSMEFTd6General::deltamt2() const
{
    return ( 0.0);
}

double NPSMEFTd6General::deltamb() const
{
    //  Ref. value used in MG simulations
    return ( ((quarks[BOTTOM].getMass()) - 4.18) / 4.18);
}

double NPSMEFTd6General::deltamb2() const
{
    return ( 0.0);
}

double NPSMEFTd6General::deltamc() const
{
    //  Ref. value used in MG simulations
    return ( ((quarks[CHARM].getMass()) - 1.275) / 1.275);
}

double NPSMEFTd6General::deltamc2() const
{
    return ( 0.0);
}

double NPSMEFTd6General::deltamtau() const
{
    //  Ref. value used in MG simulations
    return ( ((leptons[TAU].getMass()) - 1.77682) / 1.77682);
}

double NPSMEFTd6General::deltamtau2() const
{
    return ( 0.0);
}

double NPSMEFTd6General::deltaGmu() const
{
    //  Ref. value used in MG simulations
    return ( (GF - 1.16637 / 100000.0) / (1.16637 / 100000.0));
}

double NPSMEFTd6General::deltaGmu2() const
{
    return ( 0.0);
}

double NPSMEFTd6General::deltaaMZ() const
{
    //  Ref. value used in MG simulations
    return ( (aleMz - 0.007754633699856456) / 0.007754633699856456);
}

double NPSMEFTd6General::deltaaMZ2() const
{
    return ( 0.0);
}

double NPSMEFTd6General::deltaa0() const
{
    //  Ref. value used in MG simulations
    return ( (aleMz - 0.0072973525664) / 0.0072973525664);
}

double NPSMEFTd6General::deltaa02() const
{
    return ( 0.0);
}

double NPSMEFTd6General::deltaaSMZ() const
{
    //  Ref. value used in MG simulations
    return ( (AlsMz - 0.1180) / 0.1180);
}

double NPSMEFTd6General::deltaaSMZ2() const
{
    return ( 0.0);
}

double NPSMEFTd6General::deltaMw() const
{
    //  Ref. value used in MG simulations
    //  (Value chosen to produce the same tree level SM pars as in the Alpha scheme with the input pars above)
    return ( (Mw_inp - 79.96717329554225) / 79.96717329554225);
}

double NPSMEFTd6General::deltaMw2() const
{
    return ( 0.0);
}


////////////////////////////////////////////////////////////////////////




double NPSMEFTd6General::alphaMz() const
{
    return (aleMz * (1.0 + 2.0 * delta_e + delta_A));
}

double NPSMEFTd6General::Mw() const
{
    //    return (trueSM.Mw() - Mw_tree / 4.0 / (cW2_tree - sW2_tree)
    //            *(4.0 * sW_tree * cW_tree * CHWB * v2_over_LambdaNP2
    //            + cW2_tree * CHD * v2_over_LambdaNP2
    //            + 2.0 * sW2_tree * delta_GF));

    return (trueSM.Mw() + Mw_tree * (delta_e - 0.5 * delta_sW2 + delta_v));
}

double NPSMEFTd6General::deltaMwd6() const
{
    //    return (- 1.0 / 4.0 / (cW2_tree - sW2_tree)
    //            *(4.0 * sW_tree * cW_tree * CHWB * v2_over_LambdaNP2
    //            + cW2_tree * CHD * v2_over_LambdaNP2
    //            + 2.0 * sW2_tree * delta_GF));

    return (delta_e - 0.5 * delta_sW2 + delta_v);
}

double NPSMEFTd6General::deltaMwd62() const
{
    double dMW = 0.0;

    return (dMW * dMW);
}

double NPSMEFTd6General::deltaGamma_Wff(const Particle fi, const Particle fj) const
{
    double G0 = GF * pow(Mz*cW_tree, 3.0) / 6.0 / sqrt(2.0) / M_PI;
    double deltaGamma_Wij;
    double GammaW_tree;
    double CHF3ij;

    if (fj.getIndex() - fi.getIndex() == 1)
        CHF3ij = CHF3_diag(fi);
    else
        CHF3ij = 0.;

    if (fi.is("QUARK")) {
        GammaW_tree = Nc * G0;
    } else {
        GammaW_tree = G0;
    }

    //    deltaGamma_Wij = - 3.0 * GammaW_tree / 4.0 / (cW2_tree - sW2_tree)
    //            *(4.0 * sW_tree * cW_tree * CHWB * v2_over_LambdaNP2
    //            + cW2_tree * CHD * v2_over_LambdaNP2
    //            + 2.0 * (1.0 + cW2_tree) / 3.0 * delta_GF);

    //    deltaGamma_Wij = deltaGamma_Wij + 2.0 * GammaW_tree * CHF3ij * v2_over_LambdaNP2;

    deltaGamma_Wij = deltaMwd6() + 2.0 * delta_UgCC;

    deltaGamma_Wij = GammaW_tree * (deltaGamma_Wij + 2.0 * CHF3ij * v2_over_LambdaNP2);

    return deltaGamma_Wij;
}

double NPSMEFTd6General::GammaW(const Particle fi, const Particle fj) const
{
    return ( trueSM.GammaW(fi, fj) + deltaGamma_Wff(fi, fj));
}



double NPSMEFTd6General::deltaGamma_W() const
{
    double G0 = GF * pow(Mz*cW_tree, 3.0) / 6.0 / sqrt(2.0) / M_PI;
    double GammaW_tree = (3.0 + 2.0 * Nc) * G0;

    //    return (- 3.0 * GammaW_tree / 4.0 / (cW2_tree - sW2_tree)
    //            *(4.0 * sW_tree * cW_tree * CHWB * v2_over_LambdaNP2
    //            + cW2_tree * CHD * v2_over_LambdaNP2
    //            + 2.0 * (1.0 + cW2_tree) / 3.0 * delta_GF)
    //            + 2.0 * G0 * (CHl3R[0][0] + CHl3R[1][1] + CHl3R[2][2] + Nc*(CHq3R[0][0] + CHq3R[1][1])) * v2_over_LambdaNP2);          

    return ( GammaW_tree * (deltaMwd6() + 2.0 * delta_UgCC)
            + 2.0 * G0 * (CHl3R[0][0] + CHl3R[1][1] + CHl3R[2][2] + Nc * (CHq3R[0][0] + CHq3R[1][1])) * v2_over_LambdaNP2);
}

double NPSMEFTd6General::GammaW() const
{
    return ( trueSM.GammaW() + deltaGamma_W());
}

double NPSMEFTd6General::deltaGwd6() const
{
    return ( deltaGamma_W() / trueSM.GammaW());
}

double NPSMEFTd6General::deltaGwd62() const
{
    double dWW = 0.0;

    return (dWW * dWW);
}

double NPSMEFTd6General::deltaGzd6() const
{
    return ( deltaGamma_Z() / trueSM.Gamma_Z());
}

double NPSMEFTd6General::deltaGzd62() const
{
    double dWZ = 0.0;

    return (dWZ * dWZ);
}

double NPSMEFTd6General::deltaGV_f(const Particle p) const
{
    return (deltaGL_f(p) + deltaGR_f(p));
}

double NPSMEFTd6General::deltaGA_f(const Particle p) const
{
    return (deltaGL_f(p) - deltaGR_f(p));
}

double NPSMEFTd6General::deltaGL_f(const Particle p) const
{
    double I3p = p.getIsospin(), Qp = p.getCharge();
    double CHF1 = CHF1_diag(p);
    double CHF3 = CHF3_diag(p);
    double NPindirect;

    //    NPindirect = -I3p / 4.0 * (CHD * v2_over_LambdaNP2 + 2.0 * delta_GF)
    //                - Qp * sW2_tree / 4.0 / (cW2_tree - sW2_tree)
    //                *((4.0 * cW_tree / sW_tree * CHWB + CHD) * v2_over_LambdaNP2 + 2.0 * delta_GF);

    NPindirect = (I3p - Qp * sW2_tree) * delta_UgNC + Qp * delta_QgNC;

    double NPdirect = -0.5 * (CHF1 - 2.0 * I3p * CHF3) * v2_over_LambdaNP2;
    return (NPindirect + NPdirect);
}

double NPSMEFTd6General::deltaGR_f(const Particle p) const
{
    double Qp = p.getCharge();
    double CHf = CHf_diag(p);
    double NPindirect;

    //    NPindirect = -Qp * sW2_tree / 4.0 / (cW2_tree - sW2_tree)
    //                *((4.0 * cW_tree / sW_tree * CHWB + CHD) * v2_over_LambdaNP2 + 2.0 * delta_GF);

    NPindirect = (-Qp * sW2_tree) * delta_UgNC + Qp * delta_QgNC;

    double NPdirect = -0.5 * CHf*v2_over_LambdaNP2;
    return (NPindirect + NPdirect);
}

double NPSMEFTd6General::BrW(const Particle fi, const Particle fj) const
{
    double GammW0 = trueSM.GammaW();
    double dGammW = deltaGamma_W();

    double GammWij0 = trueSM.GammaW(fi, fj);
    double dGammWij = deltaGamma_Wff(fi, fj);

    return GammWij0 / GammW0 + dGammWij / GammW0 - GammWij0 * dGammW / GammW0 / GammW0;
}

double NPSMEFTd6General::RWlilj(const Particle li, const Particle lj) const
{
    double GammWli0, GammWlj0;
    double dGammWli, dGammWlj;

    if (li.is("ELECTRON")) {
        GammWli0 = trueSM.GammaW(leptons[NEUTRINO_1], li);
        dGammWli = deltaGamma_Wff(leptons[NEUTRINO_1], li);
    } else if (li.is("MU")) {
        GammWli0 = trueSM.GammaW(leptons[NEUTRINO_2], li);
        dGammWli = deltaGamma_Wff(leptons[NEUTRINO_2], li);
    } else if (li.is("TAU")) {
        GammWli0 = trueSM.GammaW(leptons[NEUTRINO_3], li);
        dGammWli = deltaGamma_Wff(leptons[NEUTRINO_3], li);
    } else {
        throw std::runtime_error("Error in NPSMEFTd6General::RWlilj. li must be a charged lepton");
    }

    if (lj.is("ELECTRON")) {
        GammWlj0 = trueSM.GammaW(leptons[NEUTRINO_1], lj);
        dGammWlj = deltaGamma_Wff(leptons[NEUTRINO_1], lj);
    } else if (lj.is("MU")) {
        GammWlj0 = trueSM.GammaW(leptons[NEUTRINO_2], lj);
        dGammWlj = deltaGamma_Wff(leptons[NEUTRINO_2], lj);
    } else if (lj.is("TAU")) {
        GammWlj0 = trueSM.GammaW(leptons[NEUTRINO_3], lj);
        dGammWlj = deltaGamma_Wff(leptons[NEUTRINO_3], lj);
    } else {
        throw std::runtime_error("Error in NPSMEFTd6General::RWlilj. lj must be a charged lepton");
    }

    return GammWli0 / GammWlj0 + dGammWli / GammWlj0 - GammWli0 * dGammWlj / GammWlj0 / GammWlj0;
}

double NPSMEFTd6General::RWc() const
{
    double GammWcX0, GammWhad0;
    double dGammWcX, dGammWhad;

    //  For the SM contributions to the of W widths, proceed as in the SM implementation, 
    //  using W->cX = W->cs and W->had = W->ud + W->cs. (See comments in StandardModel.cpp>RWc.)

    //  Add all the  W-> cX decays
    //  In SM GammaW fermion masses are ignored and CKM=1 but uses that SM CKM is unitary => I only need W->cs
    GammWcX0 = trueSM.GammaW(quarks[CHARM], quarks[STRANGE]);

    //  SMEFT NP effects, however, can break CKM unitarity and I need to add all fermion decays explicitly
    dGammWcX = deltaGamma_Wff(quarks[CHARM], quarks[STRANGE])
            + deltaGamma_Wff(quarks[CHARM], quarks[DOWN])
            + deltaGamma_Wff(quarks[CHARM], quarks[BOTTOM]);

    //  For the same reasons, I only need to add the W-> ud decays into the SM hadronic W width
    GammWhad0 = GammWcX0
            + trueSM.GammaW(quarks[UP], quarks[DOWN]);

    //  and, similarly, for the NP corrections to hadronic width I need all fermion decays explicitly
    dGammWhad = dGammWcX
            + deltaGamma_Wff(quarks[UP], quarks[STRANGE])
            + deltaGamma_Wff(quarks[UP], quarks[DOWN])
            + deltaGamma_Wff(quarks[UP], quarks[BOTTOM]);

    return GammWcX0 / GammWhad0 + dGammWcX / GammWhad0 - GammWcX0 * dGammWhad / GammWhad0 / GammWhad0;
}

double NPSMEFTd6General::RZlilj(const Particle li, const Particle lj) const
{
    double GammZli0, GammZlj0;
    double dGammZli, dGammZlj;

    if (li.is("ELECTRON") || li.is("MU") || li.is("TAU")) {
        GammZli0 = trueSM.GammaZ(li);
        dGammZli = deltaGamma_Zf(li);
    } else {
        throw std::runtime_error("Error in NPSMEFTd6General::RZlilj. li must be a charged lepton");
    }

    if (lj.is("ELECTRON") || lj.is("MU") || lj.is("TAU")) {
        GammZlj0 = trueSM.GammaZ(lj);
        dGammZlj = deltaGamma_Zf(lj);
    } else {
        throw std::runtime_error("Error in NPSMEFTd6General::RZlilj. lj must be a charged lepton");
    }

    return GammZli0 / GammZlj0 + dGammZli / GammZlj0 - GammZli0 * dGammZlj / GammZlj0 / GammZlj0;
}



////////////////////////////////////////////////////////////////////////

gslpp::complex NPSMEFTd6General::deltaGL_Wff(const Particle pbar, const Particle p) const
{
    if (pbar.getIndex() + 1 != p.getIndex() || pbar.getIndex() % 2 != 0)
        throw std::runtime_error("NPSMEFTd6General::deltaGL_Wff(): Not implemented");

    double CHF3 = CHF3_diag(pbar);
    double NPindirect;

    //    NPindirect = -cW2_tree / 4.0 / (cW2_tree - sW2_tree)
    //                * ((4.0 * sW_tree / cW_tree * CHWB + CHD) * v2_over_LambdaNP2 + 2.0 * delta_GF);

    NPindirect = delta_UgCC;

    double NPdirect = CHF3 * v2_over_LambdaNP2;
    return (NPindirect + NPdirect);
}

gslpp::complex NPSMEFTd6General::deltaGR_Wff(const Particle pbar, const Particle p) const
{
    if (pbar.getIndex() + 1 != p.getIndex() || pbar.getIndex() % 2 != 0)
        throw std::runtime_error("NPSMEFTd6General::deltaGR_Wff(): Not implemented");

    gslpp::complex CHud = CHud_diag(pbar);
    return (0.5 * CHud * v2_over_LambdaNP2);
}

double NPSMEFTd6General::deltaG_hgg() const
{
    return (CHG * v2_over_LambdaNP2 / v());
}

double NPSMEFTd6General::deltaG_hggRatio() const
{
    double m_t = mtpole;
    double m_b = quarks[BOTTOM].getMass();
    double m_c = quarks[CHARM].getMass();
    double tau_t = 4.0 * m_t * m_t / mHl / mHl;
    double tau_b = 4.0 * m_b * m_b / mHl / mHl;
    double tau_c = 4.0 * m_c * m_c / mHl / mHl;
    double aSPiv = AlsMz / 16.0 / M_PI / v();
    gslpp::complex gSM, dg;
    gslpp::complex dKappa_t = cLHd6 * deltaG_hff(quarks[TOP]) / (-m_t / v());
    gslpp::complex dKappa_b = cLHd6 * deltaG_hff(quarks[BOTTOM]) / (-m_b / v());
    gslpp::complex dKappa_c = cLHd6 * deltaG_hff(quarks[CHARM]) / (-m_c / v());
    double deltaloc = deltaG_hgg();

    gSM = aSPiv * (AH_f(tau_t) + AH_f(tau_b) + AH_f(tau_c));

    dg = deltaloc / gSM + (aSPiv / gSM) * (dKappa_t * AH_f(tau_t) + dKappa_b * AH_f(tau_b) + dKappa_c * AH_f(tau_c));

    return dg.real();
}

double NPSMEFTd6General::deltaG1_hWW() const
{
    return ((2.0 * CHW - 0.5 * eeMz * CDHW / sW_tree) * v2_over_LambdaNP2 / v());
}

double NPSMEFTd6General::deltaG2_hWW() const
{
    return ( -0.5 * eeMz * (CDHW / sW_tree) * v2_over_LambdaNP2 / v());
}

double NPSMEFTd6General::deltaG3_hWW() const
{
    double NPindirect;

    //    NPindirect = 2.0 * cW2_tree * Mz * Mz / v()
    //                * (delta_h - 1.0 / 2.0 / (cW2_tree - sW2_tree)
    //                * ((4.0 * sW_tree * cW_tree * CHWB + cW2_tree * CHD) * v2_over_LambdaNP2 + delta_GF));

    NPindirect = 2.0 * cW2_tree * Mz * Mz / v()
            * (delta_h + 0.5 * delta_GF + 2.0 * delta_e - delta_sW2);

    return NPindirect;
}

double NPSMEFTd6General::deltaG1_hZZ() const
{
    return ( (delta_ZZ - 0.25 * eeMz * (CDHB / cW_tree + CDHW / sW_tree) * v2_over_LambdaNP2) / v());
}

double NPSMEFTd6General::deltaG2_hZZ() const
{
    return ( -0.5 * eeMz * (CDHB / cW_tree + CDHW / sW_tree) * v2_over_LambdaNP2 / v());
}

double NPSMEFTd6General::deltaG3_hZZ() const
{
    //    double NPindirect = Mz * Mz / v() * (-0.5 * CHD * v2_over_LambdaNP2 + delta_h - 0.5 * delta_GF);
    double NPindirect = Mz * Mz / v() * (delta_Z + delta_h + 0.5 * delta_GF + 2.0 * delta_e - (1.0 - sW2_tree / cW2_tree) * delta_sW2);
    double NPdirect = Mz * Mz / v() * CHD * v2_over_LambdaNP2;

    return (NPindirect + NPdirect);
}

double NPSMEFTd6General::deltaG1_hZA() const
{
    return ( (delta_AZ + 0.25 * eeMz * (CDHB / sW_tree - CDHW / cW_tree) * v2_over_LambdaNP2) / v());
}

double NPSMEFTd6General::deltaG1_hZARatio() const
{
    double m_t = mtpole;
    double m_b = quarks[BOTTOM].getMass();
    double m_c = quarks[CHARM].getMass();
    double m_tau = leptons[TAU].getMass();
    double m_mu = leptons[MU].getMass();

    double M_w_2 = (trueSM.Mw())*(trueSM.Mw());

    double Qt = quarks[TOP].getCharge();
    double Qb = quarks[BOTTOM].getCharge();
    double Qc = quarks[CHARM].getCharge();
    double Qtau = leptons[TAU].getCharge();
    double Qmu = leptons[MU].getCharge();

    double tau_t = 4.0 * m_t * m_t / mHl / mHl;
    double tau_b = 4.0 * m_b * m_b / mHl / mHl;
    double tau_c = 4.0 * m_c * m_c / mHl / mHl;
    double tau_tau = 4.0 * m_tau * m_tau / mHl / mHl;
    double tau_mu = 4.0 * m_mu * m_mu / mHl / mHl;
    double tau_W = 4.0 * M_w_2 / mHl / mHl;

    double lambda_t = 4.0 * m_t * m_t / Mz / Mz;
    double lambda_b = 4.0 * m_b * m_b / Mz / Mz;
    double lambda_c = 4.0 * m_c * m_c / Mz / Mz;
    double lambda_tau = 4.0 * m_tau * m_tau / Mz / Mz;
    double lambda_mu = 4.0 * m_mu * m_mu / Mz / Mz;
    double lambda_W = 4.0 * M_w_2 / Mz / Mz;
    double alpha2 = sqrt(2.0) * GF * M_w_2 / M_PI;
    double aPiv = sqrt(ale * alpha2) / 4.0 / M_PI / v();

    //  mod. of Higgs couplings
    gslpp::complex gSM, dg;
    gslpp::complex dKappa_t = cLHd6 * deltaG_hff(quarks[TOP]) / (-m_t / v());
    gslpp::complex dKappa_b = cLHd6 * deltaG_hff(quarks[BOTTOM]) / (-m_b / v());
    gslpp::complex dKappa_c = cLHd6 * deltaG_hff(quarks[CHARM]) / (-m_c / v());
    gslpp::complex dKappa_tau = cLHd6 * deltaG_hff(leptons[TAU]) / (-m_tau / v());
    gslpp::complex dKappa_mu = cLHd6 * deltaG_hff(leptons[MU]) / (-m_mu / v());
    double dKappa_W = cLHd6 * (0.5 * v() / M_w_2) * deltaG3_hWW();

    //  mod of EW vector couplings vf =2 gvf    
    double vSMt = 2.0 * (quarks[TOP].getIsospin()) - 4.0 * Qt * sW2_tree;
    double vSMb = 2.0 * (quarks[BOTTOM].getIsospin()) - 4.0 * Qb * sW2_tree;
    double vSMc = 2.0 * (quarks[CHARM].getIsospin()) - 4.0 * Qc * sW2_tree;
    double vSMtau = 2.0 * (leptons[TAU].getIsospin()) - 4.0 * Qtau * sW2_tree;
    double vSMmu = 2.0 * (leptons[MU].getIsospin()) - 4.0 * Qmu * sW2_tree;

    double dvSMt = cLHd6 * 2.0 * deltaGV_f(quarks[TOP]);
    double dvSMb = cLHd6 * 2.0 * deltaGV_f(quarks[BOTTOM]);
    double dvSMc = cLHd6 * 2.0 * deltaGV_f(quarks[CHARM]);
    double dvSMtau = cLHd6 * 2.0 * deltaGV_f(leptons[TAU]);
    double dvSMmu = cLHd6 * 2.0 * deltaGV_f(leptons[MU]);

    double deltaloc = deltaG1_hZA();

    gSM = -aPiv * ((3.0 * vSMt * Qt * AHZga_f(tau_t, lambda_t) +
            3.0 * vSMb * Qb * AHZga_f(tau_b, lambda_b) +
            3.0 * vSMc * Qc * AHZga_f(tau_c, lambda_c) +
            vSMtau * Qtau * AHZga_f(tau_tau, lambda_tau) +
            vSMmu * Qmu * AHZga_f(tau_mu, lambda_mu)) / cW_tree +
            AHZga_W(tau_W, lambda_W));

    dg = deltaloc / gSM - (aPiv / gSM) * (
            (3.0 * vSMt * dKappa_t * Qt * AHZga_f(tau_t, lambda_t) +
            3.0 * vSMb * dKappa_b * Qb * AHZga_f(tau_b, lambda_b) +
            3.0 * vSMc * dKappa_c * Qc * AHZga_f(tau_c, lambda_c) +
            dKappa_tau * vSMtau * Qtau * AHZga_f(tau_tau, lambda_tau) +
            dKappa_mu * vSMmu * Qmu * AHZga_f(tau_mu, lambda_mu)) / cW_tree +
            dKappa_W * AHZga_W(tau_W, lambda_W) +
            (3.0 * dvSMt * Qt * AHZga_f(tau_t, lambda_t) +
            3.0 * dvSMb * Qb * AHZga_f(tau_b, lambda_b) +
            3.0 * dvSMc * Qc * AHZga_f(tau_c, lambda_c) +
            dvSMtau * Qtau * AHZga_f(tau_tau, lambda_tau) +
            dvSMmu * Qmu * AHZga_f(tau_mu, lambda_mu)) / cW_tree
            );

    return dg.real();
}

double NPSMEFTd6General::deltaG2_hZA() const
{
    return ( 0.5 * eeMz * (CDHB / sW_tree - CDHW / cW_tree) * v2_over_LambdaNP2 / v());
}

double NPSMEFTd6General::deltaG_hAA() const
{
    return (delta_AA / v());
}

double NPSMEFTd6General::deltaG_hAARatio() const
{
    double m_t = mtpole;
    double m_b = quarks[BOTTOM].getMass();
    double m_c = quarks[CHARM].getMass();
    double m_tau = leptons[TAU].getMass();
    double m_mu = leptons[MU].getMass();

    double M_w_2 = (trueSM.Mw())*(trueSM.Mw());

    double Qt = quarks[TOP].getCharge();
    double Qb = quarks[BOTTOM].getCharge();
    double Qc = quarks[CHARM].getCharge();
    double Qtau = leptons[TAU].getCharge();
    double Qmu = leptons[MU].getCharge();

    double tau_t = 4.0 * m_t * m_t / mHl / mHl;
    double tau_b = 4.0 * m_b * m_b / mHl / mHl;
    double tau_c = 4.0 * m_c * m_c / mHl / mHl;
    double tau_tau = 4.0 * m_tau * m_tau / mHl / mHl;
    double tau_mu = 4.0 * m_mu * m_mu / mHl / mHl;
    double tau_W = 4.0 * M_w_2 / mHl / mHl;

    double aPiv = ale / 8.0 / M_PI / v();
    gslpp::complex gSM, dg;
    gslpp::complex dKappa_t = cLHd6 * deltaG_hff(quarks[TOP]) / (-m_t / v());
    gslpp::complex dKappa_b = cLHd6 * deltaG_hff(quarks[BOTTOM]) / (-m_b / v());
    gslpp::complex dKappa_c = cLHd6 * deltaG_hff(quarks[CHARM]) / (-m_c / v());
    gslpp::complex dKappa_tau = cLHd6 * deltaG_hff(leptons[TAU]) / (-m_tau / v());
    gslpp::complex dKappa_mu = cLHd6 * deltaG_hff(leptons[MU]) / (-m_mu / v());
    double dKappa_W = cLHd6 * (0.5 * v() / M_w_2) * deltaG3_hWW();

    double deltaloc = deltaG_hAA();

    gSM = aPiv * (3.0 * Qt * Qt * AH_f(tau_t) +
            3.0 * Qb * Qb * AH_f(tau_b) +
            3.0 * Qc * Qc * AH_f(tau_c) +
            Qtau * Qtau * AH_f(tau_tau) +
            Qmu * Qmu * AH_f(tau_mu) +
            AH_W(tau_W));

    dg = deltaloc / gSM + (aPiv / gSM) * (
            3.0 * Qt * Qt * dKappa_t * AH_f(tau_t) +
            3.0 * Qb * Qb * dKappa_b * AH_f(tau_b) +
            3.0 * Qc * Qc * dKappa_c * AH_f(tau_c) +
            dKappa_tau * Qtau * Qtau * AH_f(tau_tau) +
            dKappa_mu * Qmu * Qmu * AH_f(tau_mu) +
            dKappa_W * AH_W(tau_W)
            );

    return dg.real();
}

gslpp::complex NPSMEFTd6General::deltaG_hff(const Particle p) const
{
    // The effects of the RG running are neglected. 
    double mf;
    if (p.is("TOP"))
        //mf = p.getMass(); // m_t(m_t)
        mf = mtpole; // pole mass
    else
        mf = p.getMass();
    gslpp::complex CfH = CfH_diag(p);
    return (-mf / v() * (delta_h - 0.5 * delta_GF)
            + CfH * v2_over_LambdaNP2 / sqrt(2.0));
}

double NPSMEFTd6General::deltaG_hhhRatio() const
{
    double dg;

    dg = -0.5 * delta_GF + 3.0 * delta_h - 2.0 * CH * v2_over_LambdaNP2 * v2 / mHl / mHl;

    return dg;
}

gslpp::complex NPSMEFTd6General::deltaGL_Wffh(const Particle pbar, const Particle p) const
{
    if (pbar.getIndex() + 1 != p.getIndex() || pbar.getIndex() % 2 != 0)
        throw std::runtime_error("NPSMEFTd6General::deltaGL_Wffh(): Not implemented");

    double CHF3 = CHF3_diag(pbar);
    return (2.0 * sqrt(2.0) * Mz * cW_tree / v() / v() * CHF3 * v2_over_LambdaNP2);
}

gslpp::complex NPSMEFTd6General::deltaGR_Wffh(const Particle pbar, const Particle p) const
{
    if (pbar.getIndex() + 1 != p.getIndex() || pbar.getIndex() % 2 != 0)
        throw std::runtime_error("NPSMEFTd6General::deltaGR_Wffh(): Not implemented");

    gslpp::complex CHud = CHud_diag(pbar);
    return (sqrt(2.0) * Mz * cW_tree / v() / v() * CHud * v2_over_LambdaNP2);
}

double NPSMEFTd6General::deltaGL_Zffh(const Particle p) const
{
    double I3p = p.getIsospin();
    double CHF1 = CHF1_diag(p);
    double CHF3 = CHF3_diag(p);
    return (-2.0 * Mz / v() / v() * (CHF1 - 2.0 * I3p * CHF3) * v2_over_LambdaNP2);
}

double NPSMEFTd6General::deltaGR_Zffh(const Particle p) const
{
    double CHf = CHf_diag(p);
    return (-2.0 * Mz / v() / v() * CHf * v2_over_LambdaNP2);
}

gslpp::complex NPSMEFTd6General::deltaG_hGff(const Particle p) const
{
    // Set to 0. for the moment 

    return 0.;
}

gslpp::complex NPSMEFTd6General::deltaG_hZff(const Particle p) const
{
    // Set to 0. for the moment 

    return 0.;
}

gslpp::complex NPSMEFTd6General::deltaG_hAff(const Particle p) const
{
    // Set to 0. for the moment 

    return 0.;
}

gslpp::complex NPSMEFTd6General::deltaG_Gff(const Particle p) const
{
    // Set to 0. for the moment 

    return 0.;
}

gslpp::complex NPSMEFTd6General::deltaG_Zff(const Particle p) const
{
    // Set to 0. for the moment 

    return 0.;
}

gslpp::complex NPSMEFTd6General::deltaG_Aff(const Particle p) const
{
    // Set to 0. for the moment 

    return 0.;
}

double NPSMEFTd6General::deltag3G() const
{
    // Set to 0. for the moment 

    return 0.;
}


////////////////////////////////////////////////////////////////////////



gslpp::complex NPSMEFTd6General::f_triangle(const double tau) const
{
    gslpp::complex tmp;
    if (tau >= 1.0) {
        tmp = asin(1.0 / sqrt(tau));
        return (tmp * tmp);
    } else {
        tmp = log((1.0 + sqrt(1.0 - tau)) / (1.0 - sqrt(1.0 - tau))) - M_PI * gslpp::complex::i();
        return (-0.25 * tmp * tmp);
    }
}

gslpp::complex NPSMEFTd6General::g_triangle(const double tau) const
{
    gslpp::complex tmp;
    if (tau >= 1.0) {
        tmp = sqrt(tau - 1.0) * asin(1.0 / sqrt(tau));
        return tmp;
    } else {
        tmp = sqrt(1.0 - tau) * (log((1.0 + sqrt(1.0 - tau)) / (1.0 - sqrt(1.0 - tau))) - M_PI * gslpp::complex::i());
        return 0.5 * tmp;
    }
}

gslpp::complex NPSMEFTd6General::I_triangle_1(const double tau, const double lambda) const
{
    gslpp::complex tmp;

    tmp = (tau * lambda * (f_triangle(tau) - f_triangle(lambda)) + 2.0 * tau * (g_triangle(tau) - g_triangle(lambda))) / (tau - lambda);

    tmp = tau * lambda * (1.0 + tmp) / (2.0 * (tau - lambda));

    return tmp;
}

gslpp::complex NPSMEFTd6General::I_triangle_2(const double tau, const double lambda) const
{
    gslpp::complex tmp;

    tmp = -0.5 * tau * lambda * (f_triangle(tau) - f_triangle(lambda)) / (tau - lambda);

    return tmp;
}

gslpp::complex NPSMEFTd6General::AH_f(const double tau) const
{
    return (2.0 * tau * (1.0 + (1.0 - tau) * f_triangle(tau)));
}

gslpp::complex NPSMEFTd6General::AH_W(const double tau) const
{
    return -(2.0 + 3.0 * tau + 3.0 * tau * (2.0 - tau) * f_triangle(tau));
}

gslpp::complex NPSMEFTd6General::AHZga_f(const double tau, const double lambda) const
{
    return I_triangle_1(tau, lambda) - I_triangle_2(tau, lambda);
}

gslpp::complex NPSMEFTd6General::AHZga_W(const double tau, const double lambda) const
{
    gslpp::complex tmp;

    double tan2w = trueSM.sW2() / trueSM.cW2();

    tmp = 4.0 * (3.0 - tan2w) * I_triangle_2(tau, lambda);

    tmp = tmp + ((1.0 + 2.0 / tau) * tan2w - (5.0 + 2.0 / tau)) * I_triangle_1(tau, lambda);

    return sqrt(trueSM.cW2()) * tmp;
}


double NPSMEFTd6General::muggH(const double sqrt_s) const
{

    double C1 = 0.0066; //It seems to be independent of energy 

    double m_t = mtpole;
    //double m_t = quarks[TOP].getMass();
    double m_b = quarks[BOTTOM].getMass();
    double m_c = quarks[CHARM].getMass();

    // L_eff_SM = (G_eff_t_SM + G_eff_b_SM)*hGG 
    gslpp::complex G_eff_t_SM = AlsMz / 16.0 / M_PI / v() * AH_f(4.0 * m_t * m_t / mHl / mHl);
    gslpp::complex G_eff_b_SM = AlsMz / 16.0 / M_PI / v() * AH_f(4.0 * m_b * m_b / mHl / mHl);
    gslpp::complex G_eff_c_SM = AlsMz / 16.0 / M_PI / v() * AH_f(4.0 * m_c * m_c / mHl / mHl);
    gslpp::complex G_eff_SM = G_eff_t_SM + G_eff_b_SM + G_eff_c_SM;

    //double sigma_tt_SM = trueSM.computeSigmaggH_tt(sqrt_s);
    //double sigma_bb_SM = trueSM.computeSigmaggH_bb(sqrt_s);
    //double sigma_tb_SM = trueSM.computeSigmaggH_tb(sqrt_s);
    //gslpp::complex tmp = (2.0 * dKappa_t * sigma_tt_SM
    //        + 2.0 * dKappa_b * sigma_bb_SM
    //        + (dKappa_t + dKappa_b) * sigma_tb_SM)
    //        / (sigma_tt_SM + sigma_bb_SM + sigma_tb_SM);

    gslpp::complex dKappa_t = cLHd6 * deltaG_hff(quarks[TOP]) / (-m_t / v());
    gslpp::complex dKappa_b = cLHd6 * deltaG_hff(quarks[BOTTOM]) / (-m_b / v());
    gslpp::complex dKappa_c = cLHd6 * deltaG_hff(quarks[CHARM]) / (-m_c / v());

    gslpp::complex tmpHG = CHG / v() * v2_over_LambdaNP2 / G_eff_SM;
    gslpp::complex tmpt = G_eff_t_SM * dKappa_t / G_eff_SM;
    gslpp::complex tmpb = G_eff_b_SM * dKappa_b / G_eff_SM;
    gslpp::complex tmpc = G_eff_c_SM * dKappa_c / G_eff_SM;

    double mu = (1.0 + 2.0 * (tmpt.real() + tmpb.real() + tmpc.real() + tmpHG.real()));

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    //  Linear contribution from 4 top operators
    //  WARNING: The implementation of the log terms below and the use of RGd6SMEFTlogs() 
    //  may lead to double counting of certain log terms. RGd6SMEFTlogs() disabled for the moment
    mu = mu + cLHd6 * ((Cqu1R[2][2][2][2] / LambdaNP2)*(9.91 + cRGEon * 2.0 * 2.76 * log(0.5 * mHl / Lambda_NP))*1000.
            + (Cqu8R[2][2][2][2] / LambdaNP2)*(13.2 + cRGEon * 2.0 * 3.68 * log(0.5 * mHl / Lambda_NP))*1000.
            + (Cquqd1R[2][2][2][2] / LambdaNP2)*(28.4 + cRGEon * 2.0 * 9.21 * log(0.5 * mHl / Lambda_NP))*1000.
            + (Cquqd8R[2][2][2][2] / LambdaNP2)*(5.41 + cRGEon * 2.0 * 1.76 * log(0.5 * mHl / Lambda_NP))*1000.
            );

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        gslpp::complex tmp2 = tmpt + tmpb + tmpc + tmpHG;

        mu += tmp2.abs2();

    }

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eggFint + eggFpar;

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::muggHH(const double sqrt_s) const
{
    double mu = 1.0;
    double A1HH = 0.0, A2HH = 0.0, A3HH = 0.0, A4HH = 0.0, A5HH = 0.0;
    double A6HH = 0.0, A7HH = 0.0, A8HH = 0.0, A9HH = 0.0, A10HH = 0.0;
    double A11HH = 0.0, A12HH = 0.0, A13HH = 0.0, A14HH = 0.0, A15HH = 0.0;
    double ct, c2t, c3, cg, c2g;

    if (sqrt_s == 14.0) {

        // From the cut-based analysis. Table IV

        A1HH = 1.70;
        A2HH = 10.7;
        A3HH = 0.117;
        A4HH = 6.11;
        A5HH = 217.0;
        A6HH = -7.56;
        A7HH = -0.819;
        A8HH = 1.95;
        A9HH = 10.90;
        A10HH = 51.6;
        A11HH = -3.86;
        A12HH = -12.5;
        A13HH = 1.46;
        A14HH = 5.49;
        A15HH = 58.4;

    } else if (sqrt_s == 100.0) {

        // From the cut-based analysis. Table IV

        A1HH = 1.59;
        A2HH = 12.8;
        A3HH = 0.090;
        A4HH = 5.2;
        A5HH = 358.0;
        A6HH = -7.66;
        A7HH = -0.681;
        A8HH = 1.83;
        A9HH = 9.25;
        A10HH = 51.2;
        A11HH = -2.61;
        A12HH = -7.35;
        A13HH = 1.03;
        A14HH = 4.65;
        A15HH = 65.5;

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::muggHH()");

    ct = 1.0 - 0.5 * delta_GF + delta_h - v() * CuHR[2][2] * v2_over_LambdaNP2 / sqrt(2.0) / mtpole;
    c2t = delta_h - 3.0 * v() * CuHR[2][2] * v2_over_LambdaNP2 / 2.0 / sqrt(2.0) / mtpole;
    c3 = 1.0 + deltaG_hhhRatio();
    cg = M_PI * CHG * v2_over_LambdaNP2 / AlsMz;
    c2g = cg;

    // In the SM the Eq. returns 0.999. Fix that small offset by adding 0.0010    
    mu = 0.0010 + A1HH * ct * ct * ct * ct +
            A2HH * c2t * c2t +
            A3HH * ct * ct * c3 * c3 +
            A4HH * cg * cg * c3 * c3 +
            A5HH * c2g * c2g +
            A6HH * c2t * ct * ct +
            A7HH * ct * ct * ct * c3 +
            A8HH * c2t * ct * c3 +
            A9HH * c2t * cg * c3 +
            A10HH * c2t * c2g +
            A11HH * ct * ct * cg * c3 +
            A12HH * ct * ct * c2g +
            A13HH * ct * c3 * c3 * cg +
            A14HH * ct * c3 * c2g +
            A15HH * cg * c3*c2g;

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::muVBF(const double sqrt_s) const
{
    double mu = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 1.96) {

        C1 = 0.0; // N.A.

        mu +=
                +121321. * (1. + eVBF_2_Hbox) * CHbox / LambdaNP2
                + 5770.95 * (1. + eVBF_2_HB) * CHB / LambdaNP2
                - 51626.2 * (1. + eVBF_2_HW) * CHW / LambdaNP2
                + 57783.8 * (1. + eVBF_2_HG) * CHG / LambdaNP2
                + 771.294 * (1. + eVBF_2_DHB) * CDHB / LambdaNP2
                - 31008.9 * (1. + eVBF_2_DHW) * CDHW / LambdaNP2
                - 15060.5 * (1. + eVBF_2_HQ1_11) * CHq1R[0][0] / LambdaNP2
                - 1122.91 * (1. + eVBF_2_HQ1_11) * CHq1R[1][1] / LambdaNP2
                - 9988.6 * (1. + eVBF_2_Hu_11) * CHuR[0][0] / LambdaNP2
                - 629.4 * (1. + eVBF_2_Hu_11) * CHuR[1][1] / LambdaNP2
                + 2994.79 * (1. + eVBF_2_Hd_11) * CHdR[0][0] / LambdaNP2
                + 467.105 * (1. + eVBF_2_Hd_11) * CHdR[1][1] / LambdaNP2
                - 205793. * (1. + eVBF_2_HQ3_11) * CHq3R[0][0] / LambdaNP2
                - 16751.6 * (1. + eVBF_2_HQ3_11) * CHq3R[1][1] / LambdaNP2
                + cAsch * (-170868. * (1. + eVBF_2_HD) * CHD / LambdaNP2
                - 322062. * (1. + eVBF_2_HWB) * CHWB / LambdaNP2
                - 4.567 * (1. + eVBF_2_DeltaGF) * delta_GF
                - 3.498 * deltaMwd6())
                + cWsch * (-13112. * (1. + eVBF_2_HD) * CHD / LambdaNP2
                + 21988.3 * (1. + eVBF_2_HWB) * CHWB / LambdaNP2
                - 3.003 * (1. + eVBF_2_DeltaGF) * delta_GF)
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            mu += 0.0;

        }

    } else if (sqrt_s == 7.0) {

        C1 = 0.0065;

        mu +=
                +121090. * (1. + eVBF_78_Hbox) * CHbox / LambdaNP2
                - 810.554 * (1. + eVBF_78_HB) * CHB / LambdaNP2
                - 86724.3 * (1. + eVBF_78_HW) * CHW / LambdaNP2
                - 155709. * (1. + eVBF_78_HG) * CHG / LambdaNP2
                - 369.549 * (1. + eVBF_78_DHB) * CDHB / LambdaNP2
                - 54328.9 * (1. + eVBF_78_DHW) * CDHW / LambdaNP2
                + 15633.8 * (1. + eVBF_78_HQ1_11) * CHq1R[0][0] / LambdaNP2
                - 2932.56 * (1. + eVBF_78_HQ1_11) * CHq1R[1][1] / LambdaNP2
                - 24997.3 * (1. + eVBF_78_Hu_11) * CHuR[0][0] / LambdaNP2
                - 2380.75 * (1. + eVBF_78_Hu_11) * CHuR[1][1] / LambdaNP2
                + 7157.18 * (1. + eVBF_78_Hd_11) * CHdR[0][0] / LambdaNP2
                + 1508.92 * (1. + eVBF_78_Hd_11) * CHdR[1][1] / LambdaNP2
                - 355189. * (1. + eVBF_78_HQ3_11) * CHq3R[0][0] / LambdaNP2
                - 52211.2 * (1. + eVBF_78_HQ3_11) * CHq3R[1][1] / LambdaNP2
                + cAsch * (-166792. * (1. + eVBF_78_HD) * CHD / LambdaNP2
                - 316769. * (1. + eVBF_78_HWB) * CHWB / LambdaNP2
                - 4.542 * (1. + eVBF_78_DeltaGF) * delta_GF
                - 3.253 * deltaMwd6())
                + cWsch * (-11689.4 * (1. + eVBF_78_HD) * CHD / LambdaNP2
                + 23083.4 * (1. + eVBF_78_HWB) * CHWB / LambdaNP2
                - 3.004 * (1. + eVBF_78_DeltaGF) * delta_GF)
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            mu += 0.0;

        }

    } else if (sqrt_s == 8.0) {

        C1 = 0.0065;

        mu +=
                +121100. * (1. + eVBF_78_Hbox) * CHbox / LambdaNP2
                - 684.545 * (1. + eVBF_78_HB) * CHB / LambdaNP2
                - 85129.2 * (1. + eVBF_78_HW) * CHW / LambdaNP2
                - 136876. * (1. + eVBF_78_HG) * CHG / LambdaNP2
                - 456.67 * (1. + eVBF_78_DHB) * CDHB / LambdaNP2
                - 56410.8 * (1. + eVBF_78_DHW) * CDHW / LambdaNP2
                + 15225.3 * (1. + eVBF_78_HQ1_11) * CHq1R[0][0] / LambdaNP2
                - 3114.83 * (1. + eVBF_78_HQ1_11) * CHq1R[1][1] / LambdaNP2
                - 25391.2 * (1. + eVBF_78_Hu_11) * CHuR[0][0] / LambdaNP2
                - 2583.43 * (1. + eVBF_78_Hu_11) * CHuR[1][1] / LambdaNP2
                + 7410.87 * (1. + eVBF_78_Hd_11) * CHdR[0][0] / LambdaNP2
                + 1629.31 * (1. + eVBF_78_Hd_11) * CHdR[1][1] / LambdaNP2
                - 363032. * (1. + eVBF_78_HQ3_11) * CHq3R[0][0] / LambdaNP2
                - 56263.7 * (1. + eVBF_78_HQ3_11) * CHq3R[1][1] / LambdaNP2
                + cAsch * (-166792. * (1. + eVBF_78_HD) * CHD / LambdaNP2
                - 317073. * (1. + eVBF_78_HWB) * CHWB / LambdaNP2
                - 4.541 * (1. + eVBF_78_DeltaGF) * delta_GF
                - 3.347 * deltaMwd6())
                + cWsch * (-11741.3 * (1. + eVBF_78_HD) * CHD / LambdaNP2
                + 22626.6 * (1. + eVBF_78_HWB) * CHWB / LambdaNP2
                - 3.003 * (1. + eVBF_78_DeltaGF) * delta_GF)
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            mu += 0.0;

        }
    } else if (sqrt_s == 13.0) {

        C1 = 0.0064;

        mu +=
                +121332. * (1. + eVBF_1314_Hbox) * CHbox / LambdaNP2
                - 283.27 * (1. + eVBF_1314_HB) * CHB / LambdaNP2
                - 80829.5 * (1. + eVBF_1314_HW) * CHW / LambdaNP2
                - 90637.9 * (1. + eVBF_1314_HG) * CHG / LambdaNP2
                - 769.333 * (1. + eVBF_1314_DHB) * CDHB / LambdaNP2
                - 63886.1 * (1. + eVBF_1314_DHW) * CDHW / LambdaNP2
                + 13466.3 * (1. + eVBF_1314_HQ1_11) * CHq1R[0][0] / LambdaNP2
                - 3912.24 * (1. + eVBF_1314_HQ1_11) * CHq1R[1][1] / LambdaNP2
                - 26789.8 * (1. + eVBF_1314_Hu_11) * CHuR[0][0] / LambdaNP2
                - 3408.16 * (1. + eVBF_1314_Hu_11) * CHuR[1][1] / LambdaNP2
                + 8302.17 * (1. + eVBF_1314_Hd_11) * CHdR[0][0] / LambdaNP2
                + 2107.16 * (1. + eVBF_1314_Hd_11) * CHdR[1][1] / LambdaNP2
                - 389656. * (1. + eVBF_1314_HQ3_11) * CHq3R[0][0] / LambdaNP2
                - 72334.1 * (1. + eVBF_1314_HQ3_11) * CHq3R[1][1] / LambdaNP2
                + cAsch * (-166707. * (1. + eVBF_1314_HD) * CHD / LambdaNP2
                - 317068. * (1. + eVBF_1314_HWB) * CHWB / LambdaNP2
                - 4.532 * (1. + eVBF_1314_DeltaGF) * delta_GF
                - 3.247 * deltaMwd6())
                + cWsch * (-11844.9 * (1. + eVBF_1314_HD) * CHD / LambdaNP2
                + 21545. * (1. + eVBF_1314_HWB) * CHWB / LambdaNP2
                - 2.999 * (1. + eVBF_1314_DeltaGF) * delta_GF)
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 14.0) {

        // Only Alpha scheme

        C1 = 0.0064;

        mu +=
                +121214. * (1. + eVBF_1314_Hbox) * CHbox / LambdaNP2
                // +10009.1 * (1. + eVBF_1314_HQ1_11 ) * CHq1R[0][0] / LambdaNP2
                // -31070.5 * (1. + eVBF_1314_Hu_11 ) * CHuR[0][0] / LambdaNP2
                // +10788.6 * (1. + eVBF_1314_Hd_11 ) * CHdR[0][0] / LambdaNP2
                // -472970. * (1. + eVBF_1314_HQ3_11 ) * CHq3R[0][0] / LambdaNP2
                + 13451.5 * (1. + eVBF_1314_HQ1_11) * CHq1R[0][0] / LambdaNP2
                - 4103.42 * (1. + eVBF_1314_HQ1_11) * CHq1R[1][1] / LambdaNP2
                - 27417.3 * (1. + eVBF_1314_Hu_11) * CHuR[0][0] / LambdaNP2
                - 3604.82 * (1. + eVBF_1314_Hu_11) * CHuR[1][1] / LambdaNP2
                + 8579.9 * (1. + eVBF_1314_Hd_11) * CHdR[0][0] / LambdaNP2
                + 2219.75 * (1. + eVBF_1314_Hd_11) * CHdR[1][1] / LambdaNP2
                - 396964. * (1. + eVBF_1314_HQ3_11) * CHq3R[0][0] / LambdaNP2
                - 75687.4 * (1. + eVBF_1314_HQ3_11) * CHq3R[1][1] / LambdaNP2
                - 166015. * (1. + eVBF_1314_HD) * CHD / LambdaNP2
                - 239.03 * (1. + eVBF_1314_HB) * CHB / LambdaNP2
                - 81639.9 * (1. + eVBF_1314_HW) * CHW / LambdaNP2
                - 331061. * (1. + eVBF_1314_HWB) * CHWB / LambdaNP2
                - 84843. * (1. + eVBF_1314_HG) * CHG / LambdaNP2
                - 842.254 * (1. + eVBF_1314_DHB) * CDHB / LambdaNP2
                - 65370.6 * (1. + eVBF_1314_DHW) * CDHW / LambdaNP2
                - 4.528 * (1. + eVBF_1314_DeltaGF) * delta_GF
                - 3.193 * deltaMwd6()
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 27.0) {

        // Only Alpha scheme

        C1 = 0.0062; // From arXiv: 1902.00134

        mu +=
                +120777. * CHbox / LambdaNP2
                + 6664.27 * CHq1R[0][0] / LambdaNP2
                - 34230.7 * CHuR[0][0] / LambdaNP2
                + 12917.3 * CHdR[0][0] / LambdaNP2
                - 536216. * CHq3R[0][0] / LambdaNP2
                - 163493. * CHD / LambdaNP2
                + 58.33 * CHB / LambdaNP2
                - 81360.5 * CHW / LambdaNP2
                - 313026. * CHWB / LambdaNP2
                - 16430. * CHG / LambdaNP2
                - 1314.45 * CDHB / LambdaNP2
                - 75884.6 * CDHW / LambdaNP2
                - 4.475 * delta_GF
                - 2.99 * deltaMwd6()
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 100.0) {

        // Only Alpha scheme

        C1 = 0.0; // N.A.

        mu +=
                +121714. * CHbox / LambdaNP2
                - 2261.73 * CHq1R[0][0] / LambdaNP2
                - 42045.4 * CHuR[0][0] / LambdaNP2
                + 17539.2 * CHdR[0][0] / LambdaNP2
                - 674206. * CHq3R[0][0] / LambdaNP2
                - 163344. * CHD / LambdaNP2
                + 71.488 * CHB / LambdaNP2
                - 90808.2 * CHW / LambdaNP2
                - 312544. * CHWB / LambdaNP2
                - 8165.65 * CHG / LambdaNP2
                - 2615.48 * CDHB / LambdaNP2
                - 96539.6 * CDHW / LambdaNP2
                - 4.452 * delta_GF
                - 2.949 * deltaMwd6()
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::muVBF()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eVBFint + eVBFpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::muVBFgamma(const double sqrt_s) const
{
    double mu = 1.0;

    double C1 = 0.0; //Use same values as VBF

    if (sqrt_s == 13.0) {

        C1 = 0.0064;

        mu +=
                +121253. * CHbox / LambdaNP2
                + 11791.5 * CHB / LambdaNP2
                - 130714. * CHW / LambdaNP2
                - 18848.5 * CDHB / LambdaNP2
                - 69191.8 * CDHW / LambdaNP2
                + 23472.1 * CW / LambdaNP2
                - 461704. * CHq3R[0][0] / LambdaNP2
                - 35103.4 * CHq3R[1][1] / LambdaNP2
                + cAsch * (-203622. * CHD / LambdaNP2
                - 270077. * CHWB / LambdaNP2
                - 4.714 * delta_GF
                - 5.764 * deltaMwd6())
                + cWsch * (-131254. * CHD / LambdaNP2
                - 111576. * CHWB / LambdaNP2
                - 3.998 * delta_GF)
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::muVBFgamma()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy. Use same as VBF.)
    mu += eVBFint + eVBFpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::mueeWBF(const double sqrt_s) const
{

    //  Only Alpha scheme
    double mu = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 0.240) {

        C1 = 0.0064;

        mu +=
                +121120. * CHbox / LambdaNP2
                - 138682. * CHl3R[0][0] / LambdaNP2
                - 203727. * CHD / LambdaNP2
                - 24699.7 * CHW / LambdaNP2
                - 379830. * CHWB / LambdaNP2
                - 18173.7 * CDHW / LambdaNP2
                - 4.716 * delta_GF
                - 5.665 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +3.307 * deltaMz()
                - 3.995 * deltaMh()
                - 0.486 * deltaaMZ()
                + 3.507 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.250) {

        C1 = 0.0064;

        mu +=
                +121142. * CHbox / LambdaNP2
                - 147357. * CHl3R[0][0] / LambdaNP2
                - 203726. * CHD / LambdaNP2
                - 26559.2 * CHW / LambdaNP2
                - 379797. * CHWB / LambdaNP2
                - 19265.3 * CDHW / LambdaNP2
                - 4.717 * delta_GF
                - 5.593 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +3.413 * deltaMz()
                - 3.644 * deltaMh()
                - 0.502 * deltaaMZ()
                + 3.523 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.350) {

        C1 = 0.0062;

        mu +=
                +121107. * CHbox / LambdaNP2
                - 219582. * CHl3R[0][0] / LambdaNP2
                - 203717. * CHD / LambdaNP2
                - 39722.3 * CHW / LambdaNP2
                - 379795. * CHWB / LambdaNP2
                - 28864.2 * CDHW / LambdaNP2
                - 4.714 * delta_GF
                - 5.13 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +4.073 * deltaMz()
                - 1.94 * deltaMh()
                - 0.598 * deltaaMZ()
                + 3.623 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.365) {

        C1 = 0.0062; // Use the same as 350 GeV

        mu +=
                +121071. * CHbox / LambdaNP2
                - 228452. * CHl3R[0][0] / LambdaNP2
                - 203725. * CHD / LambdaNP2
                - 40966.9 * CHW / LambdaNP2
                - 379798. * CHWB / LambdaNP2
                - 30110.4 * CDHW / LambdaNP2
                - 4.714 * delta_GF
                - 5.08 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +4.136 * deltaMz()
                - 1.817 * deltaMh()
                - 0.609 * deltaaMZ()
                + 3.635 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.380) {

        C1 = 0.0062; // Use the same as 350 GeV

        mu +=
                +121001. * CHbox / LambdaNP2
                - 237126. * CHl3R[0][0] / LambdaNP2
                - 203726. * CHD / LambdaNP2
                - 42070.9 * CHW / LambdaNP2
                - 379788. * CHWB / LambdaNP2
                - 31352.7 * CDHW / LambdaNP2
                - 4.714 * delta_GF
                - 5.044 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +4.192 * deltaMz()
                - 1.711 * deltaMh()
                - 0.618 * deltaaMZ()
                + 3.64 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.500) {

        C1 = 0.0061;

        mu +=
                +121063. * CHbox / LambdaNP2
                - 295115. * CHl3R[0][0] / LambdaNP2
                - 203679. * CHD / LambdaNP2
                - 47539.5 * CHW / LambdaNP2
                - 379773. * CHWB / LambdaNP2
                - 39825.1 * CDHW / LambdaNP2
                - 4.715 * delta_GF
                - 4.817 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +4.509 * deltaMz()
                - 1.178 * deltaMh()
                - 0.666 * deltaaMZ()
                + 3.692 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 1.0) {

        C1 = 0.0059;

        mu +=
                +120960. * CHbox / LambdaNP2
                - 442647. * CHl3R[0][0] / LambdaNP2
                - 203748. * CHD / LambdaNP2
                - 49375.4 * CHW / LambdaNP2
                - 379685. * CHWB / LambdaNP2
                - 63503.9 * CDHW / LambdaNP2
                - 4.712 * delta_GF
                - 4.481 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +4.99 * deltaMz()
                - 0.582 * deltaMh()
                - 0.734 * deltaaMZ()
                + 3.765 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 1.4) {

        C1 = 0.0058;

        mu +=
                +121118. * CHbox / LambdaNP2
                - 515189. * CHl3R[0][0] / LambdaNP2
                - 203684. * CHD / LambdaNP2
                - 46619.5 * CHW / LambdaNP2
                - 379667. * CHWB / LambdaNP2
                - 75747.8 * CDHW / LambdaNP2
                - 4.714 * delta_GF
                - 4.391 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +5.13 * deltaMz()
                - 0.446 * deltaMh()
                - 0.754 * deltaaMZ()
                + 3.784 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 1.5) {

        C1 = 0.0058; // Use the same as 1400 GeV

        mu +=
                +121200. * CHbox / LambdaNP2
                - 530152. * CHl3R[0][0] / LambdaNP2
                - 203649. * CHD / LambdaNP2
                - 45921.3 * CHW / LambdaNP2
                - 379591. * CHWB / LambdaNP2
                - 78241.3 * CDHW / LambdaNP2
                - 4.715 * delta_GF
                - 4.38 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +5.154 * deltaMz()
                - 0.424 * deltaMh()
                - 0.757 * deltaaMZ()
                + 3.786 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 3.0) {

        C1 = 0.0057;

        mu +=
                +121321. * CHbox / LambdaNP2
                - 684382. * CHl3R[0][0] / LambdaNP2
                - 203585. * CHD / LambdaNP2
                - 38239. * CHW / LambdaNP2
                - 379518. * CHWB / LambdaNP2
                - 104465. * CDHW / LambdaNP2
                - 4.714 * delta_GF
                - 4.258 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +5.331 * deltaMz()
                - 0.279 * deltaMh()
                - 0.785 * deltaaMZ()
                + 3.81 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeWBF()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eeeWBFint + eeeWBFpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::mueeWBFPol(const double sqrt_s, const double Pol_em, const double Pol_ep) const
{

    //  Pure WBF, hence only initiated by LH fermions. No difference between polarizations at the linear level.
    //  Expand like other functions when quadratic terms are included

    return mueeWBF(sqrt_s);
}

double NPSMEFTd6General::mueeHvv(const double sqrt_s) const
{

    //  Only Alpha scheme

    double mu = 1.0;

    double C1 = 0.0;

    //  For the Higgs trilinear dependence assume the WBF mechanism dominates

    if (sqrt_s == 0.240) {

        C1 = 0.0064;

        mu +=
                +121539. * CHbox / LambdaNP2
                + 328845. * CHl1R[0][0] / LambdaNP2
                - 37798.9 * CHeR[0][0] / LambdaNP2
                + 279733. * CHl3R[0][0] / LambdaNP2
                - 196039. * CHD / LambdaNP2
                - 70718.5 * CHB / LambdaNP2
                + 29671.9 * CHW / LambdaNP2
                - 401378. * CHWB / LambdaNP2
                - 23969.3 * CDHB / LambdaNP2
                - 1814.47 * CDHW / LambdaNP2
                - 4.698 * delta_GF
                - 5.463 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +4.842 * deltaMz()
                - 2.535 * deltaMh()
                - 0.528 * deltaaMZ()
                + 3.46 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.250) {

        C1 = 0.0064;

        mu +=
                +120627. * CHbox / LambdaNP2
                + 256825. * CHl1R[0][0] / LambdaNP2
                - 38677.5 * CHeR[0][0] / LambdaNP2
                + 175735. * CHl3R[0][0] / LambdaNP2
                - 201059. * CHD / LambdaNP2
                - 57405. * CHB / LambdaNP2
                - 9860.82 * CHW / LambdaNP2
                - 403474. * CHWB / LambdaNP2
                - 20447.1 * CDHB / LambdaNP2
                - 9672.74 * CDHW / LambdaNP2
                - 4.656 * delta_GF
                - 5.633 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +4.194 * deltaMz()
                - 2.783 * deltaMh()
                - 0.477 * deltaaMZ()
                + 3.414 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.350) {

        C1 = 0.0062;

        mu +=
                +120666. * CHbox / LambdaNP2
                - 19184.6 * CHl1R[0][0] / LambdaNP2
                - 27432.1 * CHeR[0][0] / LambdaNP2
                - 238244. * CHl3R[0][0] / LambdaNP2
                - 204898. * CHD / LambdaNP2
                + 11833.5 * CHB / LambdaNP2
                - 94273.3 * CHW / LambdaNP2
                - 377703. * CHWB / LambdaNP2
                + 1111.63 * CDHB / LambdaNP2
                - 31735.2 * CDHW / LambdaNP2
                - 4.669 * delta_GF
                - 5.329 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +3.738 * deltaMz()
                - 1.994 * deltaMh()
                - 0.537 * deltaaMZ()
                + 3.484 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.365) {

        C1 = 0.0062; // Use the same as 350 GeV

        mu +=
                +120864. * CHbox / LambdaNP2
                - 24430. * CHl1R[0][0] / LambdaNP2
                - 24398.7 * CHeR[0][0] / LambdaNP2
                - 253414. * CHl3R[0][0] / LambdaNP2
                - 204817. * CHD / LambdaNP2
                + 12826.5 * CHB / LambdaNP2
                - 93455. * CHW / LambdaNP2
                - 377489. * CHWB / LambdaNP2
                + 1693.48 * CDHB / LambdaNP2
                - 32834.7 * CDHW / LambdaNP2
                - 4.68 * delta_GF
                - 5.265 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +3.834 * deltaMz()
                - 1.867 * deltaMh()
                - 0.556 * deltaaMZ()
                + 3.512 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.380) {

        C1 = 0.0062; // Use the same as 350 GeV

        mu +=
                +120775. * CHbox / LambdaNP2
                - 27548.7 * CHl1R[0][0] / LambdaNP2
                - 22022.3 * CHeR[0][0] / LambdaNP2
                - 266603. * CHl3R[0][0] / LambdaNP2
                - 204782. * CHD / LambdaNP2
                + 13052.3 * CHB / LambdaNP2
                - 92560.2 * CHW / LambdaNP2
                - 377461. * CHWB / LambdaNP2
                + 1916.19 * CDHB / LambdaNP2
                - 33824.9 * CDHW / LambdaNP2
                - 4.684 * delta_GF
                - 5.221 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +3.931 * deltaMz()
                - 1.75 * deltaMh()
                - 0.574 * deltaaMZ()
                + 3.532 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.500) {

        C1 = 0.0061;

        mu +=
                +120683. * CHbox / LambdaNP2
                - 26906.2 * CHl1R[0][0] / LambdaNP2
                - 11055.8 * CHeR[0][0] / LambdaNP2
                - 326940. * CHl3R[0][0] / LambdaNP2
                - 204335. * CHD / LambdaNP2
                + 10505.8 * CHB / LambdaNP2
                - 82453.1 * CHW / LambdaNP2
                - 378407. * CHWB / LambdaNP2
                + 1889.64 * CDHB / LambdaNP2
                - 41332.3 * CDHW / LambdaNP2
                - 4.705 * delta_GF
                - 4.943 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +4.412 * deltaMz()
                - 1.191 * deltaMh()
                - 0.659 * deltaaMZ()
                + 3.633 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 1.0) {

        C1 = 0.0059;

        mu +=
                +120462. * CHbox / LambdaNP2
                - 9025.99 * CHl1R[0][0] / LambdaNP2
                - 3124.38 * CHeR[0][0] / LambdaNP2
                - 454282. * CHl3R[0][0] / LambdaNP2
                - 204077. * CHD / LambdaNP2
                + 3421.94 * CHB / LambdaNP2
                - 61892.5 * CHW / LambdaNP2
                - 379786. * CHWB / LambdaNP2
                + 396.747 * CDHB / LambdaNP2
                - 63826.6 * CDHW / LambdaNP2
                - 4.711 * delta_GF
                - 4.587 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +4.969 * deltaMz()
                - 0.583 * deltaMh()
                - 0.745 * deltaaMZ()
                + 3.729 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 1.4) {

        C1 = 0.0058;

        mu +=
                +120512. * CHbox / LambdaNP2
                - 4746.27 * CHl1R[0][0] / LambdaNP2
                - 2212.55 * CHeR[0][0] / LambdaNP2
                - 521829. * CHl3R[0][0] / LambdaNP2
                - 204054. * CHD / LambdaNP2
                + 1891.37 * CHB / LambdaNP2
                - 54492.9 * CHW / LambdaNP2
                - 379916. * CHWB / LambdaNP2
                + 142.745 * CDHB / LambdaNP2
                - 75976. * CDHW / LambdaNP2
                - 4.712 * delta_GF
                - 4.486 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +5.108 * deltaMz()
                - 0.447 * deltaMh()
                - 0.767 * deltaaMZ()
                + 3.751 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 1.5) {

        C1 = 0.0058; // Use the same as 1400 GeV

        mu +=
                +120512. * CHbox / LambdaNP2
                - 4105.67 * CHl1R[0][0] / LambdaNP2
                - 2086.49 * CHeR[0][0] / LambdaNP2
                - 536150. * CHl3R[0][0] / LambdaNP2
                - 204072. * CHD / LambdaNP2
                + 1682.65 * CHB / LambdaNP2
                - 53138.1 * CHW / LambdaNP2
                - 379943. * CHWB / LambdaNP2
                + 134.612 * CDHB / LambdaNP2
                - 78546.2 * CDHW / LambdaNP2
                - 4.711 * delta_GF
                - 4.469 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +5.132 * deltaMz()
                - 0.424 * deltaMh()
                - 0.773 * deltaaMZ()
                + 3.757 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 3.0) {

        C1 = 0.0057;

        mu +=
                +120404. * CHbox / LambdaNP2
                - 1215.14 * CHl1R[0][0] / LambdaNP2
                - 1382.75 * CHeR[0][0] / LambdaNP2
                - 686451. * CHl3R[0][0] / LambdaNP2
                - 204039. * CHD / LambdaNP2
                + 293.31 * CHB / LambdaNP2
                - 41440.6 * CHW / LambdaNP2
                - 380130. * CHWB / LambdaNP2
                - 272.36 * CDHB / LambdaNP2
                - 104900. * CDHW / LambdaNP2
                - 4.706 * delta_GF
                - 4.343 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +5.307 * deltaMz()
                - 0.283 * deltaMh()
                - 0.802 * deltaaMZ()
                + 3.789 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeHvv()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eeeWBFint + eeeWBFpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::mueeHvvPol(const double sqrt_s, const double Pol_em, const double Pol_ep) const
{

    //  Only Alpha scheme

    double mu = 1.0;

    double C1 = 0.0;

    //  For the Higgs trilinear dependence assume the WBF mechanism dominates

    if (sqrt_s == 0.240) {

        C1 = 0.0064;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121180. * CHbox / LambdaNP2
                    + 221479. * CHl1R[0][0] / LambdaNP2
                    - 508958. * CHeR[0][0] / LambdaNP2
                    + 220003. * CHl3R[0][0] / LambdaNP2
                    - 149238. * CHD / LambdaNP2
                    + 24268.3 * CHB / LambdaNP2
                    - 32411.5 * CHW / LambdaNP2
                    - 194663. * CHWB / LambdaNP2
                    + 29267.1 * CDHB / LambdaNP2
                    - 11610.1 * CDHW / LambdaNP2
                    - 3.633 * delta_GF
                    - 4.394 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.975 * deltaMz()
                    - 2.624 * deltaMh()
                    + 0.379 * deltaaMZ()
                    + 2.282 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121456. * CHbox / LambdaNP2
                    + 337881. * CHl1R[0][0] / LambdaNP2
                    + 931.718 * CHeR[0][0] / LambdaNP2
                    + 283908. * CHl3R[0][0] / LambdaNP2
                    - 199920. * CHD / LambdaNP2
                    - 78796.8 * CHB / LambdaNP2
                    + 34606.7 * CHW / LambdaNP2
                    - 418335. * CHWB / LambdaNP2
                    - 28484. * CDHB / LambdaNP2
                    - 1197.92 * CDHW / LambdaNP2
                    - 4.781 * delta_GF
                    - 5.537 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+5.005 * deltaMz()
                    - 2.529 * deltaMh()
                    - 0.603 * deltaaMZ()
                    + 3.57 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121483. * CHbox / LambdaNP2
                    + 266382. * CHl1R[0][0] / LambdaNP2
                    - 313151. * CHeR[0][0] / LambdaNP2
                    + 245682. * CHl3R[0][0] / LambdaNP2
                    - 168446. * CHD / LambdaNP2
                    - 15072.1 * CHB / LambdaNP2
                    - 6209.98 * CHW / LambdaNP2
                    - 281195. * CHWB / LambdaNP2
                    + 6468.72 * CDHB / LambdaNP2
                    - 7633.09 * CDHW / LambdaNP2
                    - 4.079 * delta_GF
                    - 4.832 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.758 * deltaMz()
                    - 2.579 * deltaMh()
                    + 0.009 * deltaaMZ()
                    + 2.778 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121500. * CHbox / LambdaNP2
                    + 337280. * CHl1R[0][0] / LambdaNP2
                    - 1209.82 * CHeR[0][0] / LambdaNP2
                    + 283754. * CHl3R[0][0] / LambdaNP2
                    - 199723. * CHD / LambdaNP2
                    - 78465.3 * CHB / LambdaNP2
                    + 34393.4 * CHW / LambdaNP2
                    - 417413. * CHWB / LambdaNP2
                    - 28344.3 * CDHB / LambdaNP2
                    - 1296.23 * CDHW / LambdaNP2
                    - 4.777 * delta_GF
                    - 5.539 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.99 * deltaMz()
                    - 2.528 * deltaMh()
                    - 0.6 * deltaaMZ()
                    + 3.56 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeHvvPol()");
        }

    } else if (sqrt_s == 0.250) {

        C1 = 0.0064;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +120626. * CHbox / LambdaNP2
                    + 172936. * CHl1R[0][0] / LambdaNP2
                    - 516799. * CHeR[0][0] / LambdaNP2
                    + 146366. * CHl3R[0][0] / LambdaNP2
                    - 156275. * CHD / LambdaNP2
                    + 30993.1 * CHB / LambdaNP2
                    - 62277.2 * CHW / LambdaNP2
                    - 213096. * CHWB / LambdaNP2
                    + 32593.7 * CDHB / LambdaNP2
                    - 18479.4 * CDHW / LambdaNP2
                    - 3.678 * delta_GF
                    - 4.598 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.739 * deltaMz()
                    - 2.661 * deltaMh()
                    + 0.356 * deltaaMZ()
                    + 2.343 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +120567. * CHbox / LambdaNP2
                    + 263666. * CHl1R[0][0] / LambdaNP2
                    - 351.165 * CHeR[0][0] / LambdaNP2
                    - 396055. * CHl3R[0][0] / LambdaNP2
                    - 204612. * CHD / LambdaNP2
                    - 64672.8 * CHB / LambdaNP2
                    - 5618.64 * CHW / LambdaNP2
                    - 418629. * CHWB / LambdaNP2
                    - 24815.6 * CDHB / LambdaNP2
                    - 9013.23 * CDHW / LambdaNP2
                    + 286902. * CllR[0][1][1][0] / LambdaNP2
                    - 5.706 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.313 * deltaMz()
                    - 2.793 * deltaMh()
                    - 0.544 * deltaaMZ()
                    + 3.494 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +120240. * CHbox / LambdaNP2
                    + 208124. * CHl1R[0][0] / LambdaNP2
                    - 315248. * CHeR[0][0] / LambdaNP2
                    + 158895. * CHl3R[0][0] / LambdaNP2
                    - 175074. * CHD / LambdaNP2
                    - 6529.15 * CHB / LambdaNP2
                    - 40099.4 * CHW / LambdaNP2
                    - 293696. * CHWB / LambdaNP2
                    + 10284.9 * CDHB / LambdaNP2
                    - 15311.7 * CDHW / LambdaNP2
                    - 4.092 * delta_GF
                    - 5.01 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.351 * deltaMz()
                    - 2.698 * deltaMh()
                    - 0.006 * deltaaMZ()
                    + 2.791 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +120459. * CHbox / LambdaNP2
                    + 263262. * CHl1R[0][0] / LambdaNP2
                    - 2507.98 * CHeR[0][0] / LambdaNP2
                    + 177390. * CHl3R[0][0] / LambdaNP2
                    - 204514. * CHD / LambdaNP2
                    - 64371.5 * CHB / LambdaNP2
                    - 5927.95 * CHW / LambdaNP2
                    - 417860. * CHWB / LambdaNP2
                    - 24699.8 * CDHB / LambdaNP2
                    - 9119.93 * CDHW / LambdaNP2
                    - 4.726 * delta_GF
                    - 5.715 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.305 * deltaMz()
                    - 2.793 * deltaMh()
                    - 0.54 * deltaaMZ()
                    + 3.492 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeHvvPol()");
        }

    } else if (sqrt_s == 0.350) {

        C1 = 0.0062;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +120937. * CHbox / LambdaNP2
                    - 41080.7 * CHl1R[0][0] / LambdaNP2
                    - 416801. * CHeR[0][0] / LambdaNP2
                    - 192794. * CHl3R[0][0] / LambdaNP2
                    - 182281. * CHD / LambdaNP2
                    + 102909. * CHB / LambdaNP2
                    - 87947.8 * CHW / LambdaNP2
                    - 228111. * CHWB / LambdaNP2
                    + 40181.7 * CDHB / LambdaNP2
                    - 37530.5 * CDHW / LambdaNP2
                    - 4.236 * delta_GF
                    - 4.832 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.177 * deltaMz()
                    - 1.894 * deltaMh()
                    - 0.171 * deltaaMZ()
                    + 3.022 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +120796. * CHbox / LambdaNP2
                    - 17710.6 * CHl1R[0][0] / LambdaNP2
                    - 1357.61 * CHeR[0][0] / LambdaNP2
                    - 241114. * CHl3R[0][0] / LambdaNP2
                    - 206464. * CHD / LambdaNP2
                    + 5738.97 * CHB / LambdaNP2
                    - 94600.4 * CHW / LambdaNP2
                    - 387581. * CHWB / LambdaNP2
                    - 1403.89 * CDHB / LambdaNP2
                    - 31363.8 * CDHW / LambdaNP2
                    - 4.699 * delta_GF
                    - 5.361 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.768 * deltaMz()
                    - 2. * deltaMh()
                    - 0.556 * deltaaMZ()
                    + 3.512 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121065. * CHbox / LambdaNP2
                    - 30567.4 * CHl1R[0][0] / LambdaNP2
                    - 235832. * CHeR[0][0] / LambdaNP2
                    - 213581. * CHl3R[0][0] / LambdaNP2
                    - 192620. * CHD / LambdaNP2
                    + 60320.1 * CHB / LambdaNP2
                    - 90446.2 * CHW / LambdaNP2
                    - 297833. * CHWB / LambdaNP2
                    + 22132.1 * CDHB / LambdaNP2
                    - 34844.4 * CDHW / LambdaNP2
                    - 4.439 * delta_GF
                    - 5.054 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.437 * deltaMz()
                    - 1.943 * deltaMh()
                    - 0.343 * deltaaMZ()
                    + 3.237 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +120725. * CHbox / LambdaNP2
                    - 17741.9 * CHl1R[0][0] / LambdaNP2
                    - 2786.58 * CHeR[0][0] / LambdaNP2
                    - 241197. * CHl3R[0][0] / LambdaNP2
                    - 206387. * CHD / LambdaNP2
                    + 6134.48 * CHB / LambdaNP2
                    - 94603.3 * CHW / LambdaNP2
                    - 387053. * CHWB / LambdaNP2
                    - 1323.12 * CDHB / LambdaNP2
                    - 31434.2 * CDHW / LambdaNP2
                    - 4.696 * delta_GF
                    - 5.365 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.764 * deltaMz()
                    - 2. * deltaMh()
                    - 0.556 * deltaaMZ()
                    + 3.517 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeHvvPol()");
        }

    } else if (sqrt_s == 0.365) {

        C1 = 0.0062; // Use the same as 350 GeV

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121120. * CHbox / LambdaNP2
                    - 43274.8 * CHl1R[0][0] / LambdaNP2
                    - 379332. * CHeR[0][0] / LambdaNP2
                    - 213151. * CHl3R[0][0] / LambdaNP2
                    - 185704. * CHD / LambdaNP2
                    + 95027.9 * CHB / LambdaNP2
                    - 87042.2 * CHW / LambdaNP2
                    - 246839. * CHWB / LambdaNP2
                    + 37834.6 * CDHB / LambdaNP2
                    - 38594.2 * CDHW / LambdaNP2
                    - 4.314 * delta_GF
                    - 4.867 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.356 * deltaMz()
                    - 1.787 * deltaMh()
                    - 0.246 * deltaaMZ()
                    + 3.12 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +120708. * CHbox / LambdaNP2
                    - 23163.4 * CHl1R[0][0] / LambdaNP2
                    - 1266.64 * CHeR[0][0] / LambdaNP2
                    - 256145. * CHl3R[0][0] / LambdaNP2
                    - 206112. * CHD / LambdaNP2
                    + 7209.08 * CHB / LambdaNP2
                    - 94095.3 * CHW / LambdaNP2
                    - 386056. * CHWB / LambdaNP2
                    - 673.745 * CDHB / LambdaNP2
                    - 32528.4 * CDHW / LambdaNP2
                    - 4.703 * delta_GF
                    - 5.297 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.865 * deltaMz()
                    - 1.869 * deltaMh()
                    - 0.577 * deltaaMZ()
                    + 3.533 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +120872. * CHbox / LambdaNP2
                    - 34492.1 * CHl1R[0][0] / LambdaNP2
                    - 212361. * CHeR[0][0] / LambdaNP2
                    - 232050. * CHl3R[0][0] / LambdaNP2
                    - 194801. * CHD / LambdaNP2
                    + 56353. * CHB / LambdaNP2
                    - 90080.9 * CHW / LambdaNP2
                    - 308151. * CHWB / LambdaNP2
                    + 20707.2 * CDHB / LambdaNP2
                    - 35840.6 * CDHW / LambdaNP2
                    - 4.485 * delta_GF
                    - 5.033 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.586 * deltaMz()
                    - 1.817 * deltaMh()
                    - 0.393 * deltaaMZ()
                    + 3.287 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +120806. * CHbox / LambdaNP2
                    - 23082.3 * CHl1R[0][0] / LambdaNP2
                    - 2521.89 * CHeR[0][0] / LambdaNP2
                    - 255807. * CHl3R[0][0] / LambdaNP2
                    - 205972. * CHD / LambdaNP2
                    + 7600.7 * CHB / LambdaNP2
                    - 94080.6 * CHW / LambdaNP2
                    - 385587. * CHWB / LambdaNP2
                    - 525.394 * CDHB / LambdaNP2
                    - 32486.9 * CDHW / LambdaNP2
                    - 4.703 * delta_GF
                    - 5.294 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.87 * deltaMz()
                    - 1.873 * deltaMh()
                    - 0.577 * deltaaMZ()
                    + 3.533 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeHvvPol()");
        }

    } else if (sqrt_s == 0.380) {

        C1 = 0.0062; // Use the same as 350 GeV

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +120907. * CHbox / LambdaNP2
                    - 43917.7 * CHl1R[0][0] / LambdaNP2
                    - 344628. * CHeR[0][0] / LambdaNP2
                    - 230932. * CHl3R[0][0] / LambdaNP2
                    - 188656. * CHD / LambdaNP2
                    + 86802.5 * CHB / LambdaNP2
                    - 86378.3 * CHW / LambdaNP2
                    - 262732. * CHWB / LambdaNP2
                    + 35211.7 * CDHB / LambdaNP2
                    - 39122. * CDHW / LambdaNP2
                    - 4.375 * delta_GF
                    - 4.833 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.526 * deltaMz()
                    - 1.675 * deltaMh()
                    - 0.322 * deltaaMZ()
                    + 3.202 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +120826. * CHbox / LambdaNP2
                    - 26397.1 * CHl1R[0][0] / LambdaNP2
                    - 1156.51 * CHeR[0][0] / LambdaNP2
                    - 268680. * CHl3R[0][0] / LambdaNP2
                    - 205752. * CHD / LambdaNP2
                    + 8226.72 * CHB / LambdaNP2
                    - 92973.9 * CHW / LambdaNP2
                    - 384868. * CHWB / LambdaNP2
                    - 154.996 * CDHB / LambdaNP2
                    - 33479.2 * CDHW / LambdaNP2
                    - 4.706 * delta_GF
                    - 5.24 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.957 * deltaMz()
                    - 1.756 * deltaMh()
                    - 0.592 * deltaaMZ()
                    + 3.551 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121123. * CHbox / LambdaNP2
                    - 35934.5 * CHl1R[0][0] / LambdaNP2
                    - 191922. * CHeR[0][0] / LambdaNP2
                    - 247636. * CHl3R[0][0] / LambdaNP2
                    - 196255. * CHD / LambdaNP2
                    + 52143.1 * CHB / LambdaNP2
                    - 89227.7 * CHW / LambdaNP2
                    - 317018. * CHWB / LambdaNP2
                    + 19725.8 * CDHB / LambdaNP2
                    - 36723.5 * CDHW / LambdaNP2
                    - 4.524 * delta_GF
                    - 5.007 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.729 * deltaMz()
                    - 1.706 * deltaMh()
                    - 0.439 * deltaaMZ()
                    + 3.366 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +120839. * CHbox / LambdaNP2
                    - 26545. * CHl1R[0][0] / LambdaNP2
                    - 2293.44 * CHeR[0][0] / LambdaNP2
                    - 268673. * CHl3R[0][0] / LambdaNP2
                    - 205696. * CHD / LambdaNP2
                    + 8476.41 * CHB / LambdaNP2
                    - 92899.6 * CHW / LambdaNP2
                    - 384414. * CHWB / LambdaNP2
                    + 15.496 * CDHB / LambdaNP2
                    - 33502.8 * CDHW / LambdaNP2
                    - 4.704 * delta_GF
                    - 5.232 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.958 * deltaMz()
                    - 1.755 * deltaMh()
                    - 0.59 * deltaaMZ()
                    + 3.555 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeHvvPol()");
        }

    } else if (sqrt_s == 0.500) {

        C1 = 0.0061;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +120734. * CHbox / LambdaNP2
                    - 33626. * CHl1R[0][0] / LambdaNP2
                    - 177471. * CHeR[0][0] / LambdaNP2
                    - 312922. * CHl3R[0][0] / LambdaNP2
                    - 199388. * CHD / LambdaNP2
                    + 44288.8 * CHB / LambdaNP2
                    - 78960.3 * CHW / LambdaNP2
                    - 332501. * CHWB / LambdaNP2
                    + 20615.5 * CDHB / LambdaNP2
                    - 43923.9 * CDHW / LambdaNP2
                    - 4.614 * delta_GF
                    - 4.84 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.296 * deltaMz()
                    - 1.178 * deltaMh()
                    - 0.582 * deltaaMZ()
                    + 3.535 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +120746. * CHbox / LambdaNP2
                    - 26369.8 * CHl1R[0][0] / LambdaNP2
                    - 905.141 * CHeR[0][0] / LambdaNP2
                    - 327709. * CHl3R[0][0] / LambdaNP2
                    - 204622. * CHD / LambdaNP2
                    + 8508.33 * CHB / LambdaNP2
                    - 82669.6 * CHW / LambdaNP2
                    - 381185. * CHWB / LambdaNP2
                    + 784.456 * CDHB / LambdaNP2
                    - 41153.8 * CDHW / LambdaNP2
                    - 4.711 * delta_GF
                    - 4.948 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.417 * deltaMz()
                    - 1.196 * deltaMh()
                    - 0.664 * deltaaMZ()
                    + 3.639 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +120667. * CHbox / LambdaNP2
                    - 30480.6 * CHl1R[0][0] / LambdaNP2
                    - 96672.9 * CHeR[0][0] / LambdaNP2
                    - 320011. * CHl3R[0][0] / LambdaNP2
                    - 201855. * CHD / LambdaNP2
                    + 27690.6 * CHB / LambdaNP2
                    - 80770. * CHW / LambdaNP2
                    - 355060. * CHWB / LambdaNP2
                    + 11299.4 * CDHB / LambdaNP2
                    - 42756.5 * CDHW / LambdaNP2
                    - 4.656 * delta_GF
                    - 4.875 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.345 * deltaMz()
                    - 1.186 * deltaMh()
                    - 0.621 * deltaaMZ()
                    + 3.589 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +120715. * CHbox / LambdaNP2
                    - 26433.4 * CHl1R[0][0] / LambdaNP2
                    - 1490.31 * CHeR[0][0] / LambdaNP2
                    - 327665. * CHl3R[0][0] / LambdaNP2
                    - 204644. * CHD / LambdaNP2
                    + 8471.25 * CHB / LambdaNP2
                    - 82673.2 * CHW / LambdaNP2
                    - 381049. * CHWB / LambdaNP2
                    + 862.813 * CDHB / LambdaNP2
                    - 41179.7 * CDHW / LambdaNP2
                    - 4.711 * delta_GF
                    - 4.942 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.416 * deltaMz()
                    - 1.194 * deltaMh()
                    - 0.664 * deltaaMZ()
                    + 3.64 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeHvvPol()");
        }

    } else if (sqrt_s == 1.0) {

        C1 = 0.0059;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +120494. * CHbox / LambdaNP2
                    - 9728.66 * CHl1R[0][0] / LambdaNP2
                    - 46166.9 * CHeR[0][0] / LambdaNP2
                    - 452752. * CHl3R[0][0] / LambdaNP2
                    - 203700. * CHD / LambdaNP2
                    + 8561.22 * CHB / LambdaNP2
                    - 61449.7 * CHW / LambdaNP2
                    - 374076. * CHWB / LambdaNP2
                    + 6473.98 * CDHB / LambdaNP2
                    - 64032.3 * CDHW / LambdaNP2
                    - 4.706 * delta_GF
                    - 4.581 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.956 * deltaMz()
                    - 0.583 * deltaMh()
                    - 0.739 * deltaaMZ()
                    + 3.723 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +120522. * CHbox / LambdaNP2
                    - 8881.26 * CHl1R[0][0] / LambdaNP2
                    - 529.908 * CHeR[0][0] / LambdaNP2
                    - 454326. * CHl3R[0][0] / LambdaNP2
                    - 204057. * CHD / LambdaNP2
                    + 3158.25 * CHB / LambdaNP2
                    - 61850.9 * CHW / LambdaNP2
                    - 380114. * CHWB / LambdaNP2
                    + 63.589 * CDHB / LambdaNP2
                    - 63800.9 * CDHW / LambdaNP2
                    - 4.712 * delta_GF
                    - 4.587 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.967 * deltaMz()
                    - 0.582 * deltaMh()
                    - 0.746 * deltaaMZ()
                    + 3.731 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == -20.) {
            mu +=
                    +120541. * CHbox / LambdaNP2
                    - 9598.71 * CHl1R[0][0] / LambdaNP2
                    - 37435. * CHeR[0][0] / LambdaNP2
                    - 453118. * CHl3R[0][0] / LambdaNP2
                    - 203771. * CHD / LambdaNP2
                    + 7555.11 * CHB / LambdaNP2
                    - 61524.6 * CHW / LambdaNP2
                    - 375155. * CHWB / LambdaNP2
                    + 5263.81 * CDHB / LambdaNP2
                    - 64001.7 * CDHW / LambdaNP2
                    - 4.706 * delta_GF
                    - 4.589 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.959 * deltaMz()
                    - 0.583 * deltaMh()
                    - 0.741 * deltaaMZ()
                    + 3.726 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 20.) {
            mu +=
                    +120482. * CHbox / LambdaNP2
                    - 8932.26 * CHl1R[0][0] / LambdaNP2
                    - 597.015 * CHeR[0][0] / LambdaNP2
                    - 454406. * CHl3R[0][0] / LambdaNP2
                    - 204110. * CHD / LambdaNP2
                    + 3145.81 * CHB / LambdaNP2
                    - 61837. * CHW / LambdaNP2
                    - 380115. * CHWB / LambdaNP2
                    + 45.924 * CDHB / LambdaNP2
                    - 63834.7 * CDHW / LambdaNP2
                    - 4.711 * delta_GF
                    - 4.588 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.968 * deltaMz()
                    - 0.582 * deltaMh()
                    - 0.746 * deltaaMZ()
                    + 3.73 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +120509. * CHbox / LambdaNP2
                    - 9342.32 * CHl1R[0][0] / LambdaNP2
                    - 25028.5 * CHeR[0][0] / LambdaNP2
                    - 453487. * CHl3R[0][0] / LambdaNP2
                    - 203871. * CHD / LambdaNP2
                    + 6021.71 * CHB / LambdaNP2
                    - 61580. * CHW / LambdaNP2
                    - 376790. * CHWB / LambdaNP2
                    + 3494.08 * CDHB / LambdaNP2
                    - 63959. * CDHW / LambdaNP2
                    - 4.708 * delta_GF
                    - 4.589 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.962 * deltaMz()
                    - 0.582 * deltaMh()
                    - 0.742 * deltaaMZ()
                    + 3.726 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +120526. * CHbox / LambdaNP2
                    - 8927.83 * CHl1R[0][0] / LambdaNP2
                    - 633.766 * CHeR[0][0] / LambdaNP2
                    - 454337. * CHl3R[0][0] / LambdaNP2
                    - 204073. * CHD / LambdaNP2
                    + 3196.39 * CHB / LambdaNP2
                    - 61833.5 * CHW / LambdaNP2
                    - 380094. * CHWB / LambdaNP2
                    + 82.665 * CDHB / LambdaNP2
                    - 63817.5 * CDHW / LambdaNP2
                    - 4.712 * delta_GF
                    - 4.588 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.967 * deltaMz()
                    - 0.582 * deltaMh()
                    - 0.746 * deltaaMZ()
                    + 3.731 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeHvvPol()");
        }

    } else if (sqrt_s == 1.4) {

        C1 = 0.0058;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +120516. * CHbox / LambdaNP2
                    - 5019.36 * CHl1R[0][0] / LambdaNP2
                    - 29937.8 * CHeR[0][0] / LambdaNP2
                    - 521211. * CHl3R[0][0] / LambdaNP2
                    - 203908. * CHD / LambdaNP2
                    + 4153.08 * CHB / LambdaNP2
                    - 54219.3 * CHW / LambdaNP2
                    - 377548. * CHWB / LambdaNP2
                    + 4509.78 * CDHB / LambdaNP2
                    - 76054.8 * CDHW / LambdaNP2
                    - 4.71 * delta_GF
                    - 4.484 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+5.105 * deltaMz()
                    - 0.447 * deltaMh()
                    - 0.765 * deltaaMZ()
                    + 3.747 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +120530. * CHbox / LambdaNP2
                    - 4727.84 * CHl1R[0][0] / LambdaNP2
                    - 488.036 * CHeR[0][0] / LambdaNP2
                    - 521821. * CHl3R[0][0] / LambdaNP2
                    - 204045. * CHD / LambdaNP2
                    + 1784.38 * CHB / LambdaNP2
                    - 54507.5 * CHW / LambdaNP2
                    - 380042. * CHWB / LambdaNP2
                    - 122.009 * CDHB / LambdaNP2
                    - 75950.5 * CDHW / LambdaNP2
                    - 4.712 * delta_GF
                    - 4.487 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+5.108 * deltaMz()
                    - 0.447 * deltaMh()
                    - 0.768 * deltaaMZ()
                    + 3.749 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +120542. * CHbox / LambdaNP2
                    - 4870.22 * CHl1R[0][0] / LambdaNP2
                    - 16376.8 * CHeR[0][0] / LambdaNP2
                    - 521472. * CHl3R[0][0] / LambdaNP2
                    - 203960. * CHD / LambdaNP2
                    + 3068.42 * CHB / LambdaNP2
                    - 54375.2 * CHW / LambdaNP2
                    - 378699. * CHWB / LambdaNP2
                    + 2390.51 * CDHB / LambdaNP2
                    - 75996.8 * CDHW / LambdaNP2
                    - 4.711 * delta_GF
                    - 4.485 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+5.107 * deltaMz()
                    - 0.448 * deltaMh()
                    - 0.766 * deltaaMZ()
                    + 3.749 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +120504. * CHbox / LambdaNP2
                    - 4718.66 * CHl1R[0][0] / LambdaNP2
                    - 574.963 * CHeR[0][0] / LambdaNP2
                    - 521805. * CHl3R[0][0] / LambdaNP2
                    - 204053. * CHD / LambdaNP2
                    + 1784.37 * CHB / LambdaNP2
                    - 54482.7 * CHW / LambdaNP2
                    - 380051. * CHWB / LambdaNP2
                    - 99.132 * CDHB / LambdaNP2
                    - 75974.5 * CDHW / LambdaNP2
                    - 4.712 * delta_GF
                    - 4.487 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+5.107 * deltaMz()
                    - 0.447 * deltaMh()
                    - 0.767 * deltaaMZ()
                    + 3.749 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeHvvPol()");
        }

    } else if (sqrt_s == 1.5) {

        C1 = 0.0058; // Use the same as 1400 GeV

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +120531. * CHbox / LambdaNP2
                    - 4421.38 * CHl1R[0][0] / LambdaNP2
                    - 28114.2 * CHeR[0][0] / LambdaNP2
                    - 535633. * CHl3R[0][0] / LambdaNP2
                    - 203960. * CHD / LambdaNP2
                    + 3556.32 * CHB / LambdaNP2
                    - 52816.2 * CHW / LambdaNP2
                    - 377932. * CHWB / LambdaNP2
                    + 4253.17 * CDHB / LambdaNP2
                    - 78599.6 * CDHW / LambdaNP2
                    - 4.71 * delta_GF
                    - 4.465 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+5.128 * deltaMz()
                    - 0.424 * deltaMh()
                    - 0.772 * deltaaMZ()
                    + 3.755 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +120491. * CHbox / LambdaNP2
                    - 4113.21 * CHl1R[0][0] / LambdaNP2
                    - 517.747 * CHeR[0][0] / LambdaNP2
                    - 536169. * CHl3R[0][0] / LambdaNP2
                    - 204050. * CHD / LambdaNP2
                    + 1553.24 * CHB / LambdaNP2
                    - 53097.9 * CHW / LambdaNP2
                    - 380055. * CHWB / LambdaNP2
                    - 129.437 * CDHB / LambdaNP2
                    - 78539.4 * CDHW / LambdaNP2
                    - 4.711 * delta_GF
                    - 4.468 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+5.131 * deltaMz()
                    - 0.424 * deltaMh()
                    - 0.773 * deltaaMZ()
                    + 3.755 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +120525. * CHbox / LambdaNP2
                    - 4256.39 * CHl1R[0][0] / LambdaNP2
                    - 15376.9 * CHeR[0][0] / LambdaNP2
                    - 535845. * CHl3R[0][0] / LambdaNP2
                    - 203987. * CHD / LambdaNP2
                    + 2641.32 * CHB / LambdaNP2
                    - 53045.1 * CHW / LambdaNP2
                    - 378920. * CHWB / LambdaNP2
                    + 2237.55 * CDHB / LambdaNP2
                    - 78549.8 * CDHW / LambdaNP2
                    - 4.711 * delta_GF
                    - 4.468 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+5.129 * deltaMz()
                    - 0.424 * deltaMh()
                    - 0.772 * deltaaMZ()
                    + 3.753 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +120499. * CHbox / LambdaNP2
                    - 4113.23 * CHl1R[0][0] / LambdaNP2
                    - 616.984 * CHeR[0][0] / LambdaNP2
                    - 536155. * CHl3R[0][0] / LambdaNP2
                    - 204035. * CHD / LambdaNP2
                    + 1570.5 * CHB / LambdaNP2
                    - 53079.3 * CHW / LambdaNP2
                    - 380043. * CHWB / LambdaNP2
                    - 112.179 * CDHB / LambdaNP2
                    - 78543.9 * CDHW / LambdaNP2
                    - 4.711 * delta_GF
                    - 4.468 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+5.13 * deltaMz()
                    - 0.424 * deltaMh()
                    - 0.773 * deltaaMZ()
                    + 3.755 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeHvvPol()");
        }

    } else if (sqrt_s == 3.0) {

        C1 = 0.0057;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +120384. * CHbox / LambdaNP2
                    - 1301.85 * CHl1R[0][0] / LambdaNP2
                    - 16370.4 * CHeR[0][0] / LambdaNP2
                    - 686389. * CHl3R[0][0] / LambdaNP2
                    - 204031. * CHD / LambdaNP2
                    + 628.479 * CHB / LambdaNP2
                    - 41464.7 * CHW / LambdaNP2
                    - 379766. * CHWB / LambdaNP2
                    + 2259.53 * CDHB / LambdaNP2
                    - 104941. * CDHW / LambdaNP2
                    - 4.706 * delta_GF
                    - 4.342 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+5.306 * deltaMz()
                    - 0.283 * deltaMh()
                    - 0.802 * deltaaMZ()
                    + 3.787 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +120423. * CHbox / LambdaNP2
                    - 1253.47 * CHl1R[0][0] / LambdaNP2
                    - 537.201 * CHeR[0][0] / LambdaNP2
                    - 686427. * CHl3R[0][0] / LambdaNP2
                    - 204047. * CHD / LambdaNP2
                    + 268.601 * CHB / LambdaNP2
                    - 41454. * CHW / LambdaNP2
                    - 380141. * CHWB / LambdaNP2
                    - 447.668 * CDHB / LambdaNP2
                    - 104906. * CDHW / LambdaNP2
                    - 4.707 * delta_GF
                    - 4.342 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+5.305 * deltaMz()
                    - 0.284 * deltaMh()
                    - 0.802 * deltaaMZ()
                    + 3.787 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +120399. * CHbox / LambdaNP2
                    - 1267.47 * CHl1R[0][0] / LambdaNP2
                    - 9008.44 * CHeR[0][0] / LambdaNP2
                    - 686485. * CHl3R[0][0] / LambdaNP2
                    - 204052. * CHD / LambdaNP2
                    + 439.947 * CHB / LambdaNP2
                    - 41459.8 * CHW / LambdaNP2
                    - 379947. * CHWB / LambdaNP2
                    + 1005.59 * CDHB / LambdaNP2
                    - 104927. * CDHW / LambdaNP2
                    - 4.706 * delta_GF
                    - 4.342 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+5.303 * deltaMz()
                    - 0.283 * deltaMh()
                    - 0.802 * deltaaMZ()
                    + 3.789 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +120385. * CHbox / LambdaNP2
                    - 1245.4 * CHl1R[0][0] / LambdaNP2
                    - 535.407 * CHeR[0][0] / LambdaNP2
                    - 686461. * CHl3R[0][0] / LambdaNP2
                    - 204048. * CHD / LambdaNP2
                    + 244.425 * CHB / LambdaNP2
                    - 41447.5 * CHW / LambdaNP2
                    - 380150. * CHWB / LambdaNP2
                    - 430.653 * CDHB / LambdaNP2
                    - 104905. * CDHW / LambdaNP2
                    - 4.706 * delta_GF
                    - 4.343 * deltaMwd6()
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+5.307 * deltaMz()
                    - 0.283 * deltaMh()
                    - 0.802 * deltaaMZ()
                    + 3.789 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeHvvPol()");
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeHvvPol()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eeeWBFint + eeeWBFpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::mueeZBF(const double sqrt_s) const
{

    //  Only Alpha scheme

    double mu = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 0.240) {

        C1 = 0.0070;

        mu +=
                +121661. * CHbox / LambdaNP2
                + 489617. * CHl1R[0][0] / LambdaNP2
                - 357163. * CHeR[0][0] / LambdaNP2
                + 489617. * CHl3R[0][0] / LambdaNP2
                - 39217.8 * CHD / LambdaNP2
                + 1525468. * CHB / LambdaNP2
                + 378019. * CHW / LambdaNP2
                + 215983. * CHWB / LambdaNP2
                - 6554.11 * CDHB / LambdaNP2
                + 1175.47 * CDHW / LambdaNP2
                - 3.161 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+0.908 * deltaMz()
                - 5.799 * deltaMh()
                - 0.248 * deltaaMZ()
                + 3.158 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.250) {

        C1 = 0.0070;

        mu +=
                +122144. * CHbox / LambdaNP2
                + 444406. * CHl1R[0][0] / LambdaNP2
                - 315727. * CHeR[0][0] / LambdaNP2
                + 444406. * CHl3R[0][0] / LambdaNP2
                - 41440.8 * CHD / LambdaNP2
                + 1186855. * CHB / LambdaNP2
                + 301913. * CHW / LambdaNP2
                + 98540.5 * CHWB / LambdaNP2
                - 5766.35 * CDHB / LambdaNP2
                + 294.724 * CDHW / LambdaNP2
                - 3.279 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+2.044 * deltaMz()
                - 4.578 * deltaMh()
                - 0.341 * deltaaMZ()
                + 3.283 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.350) {

        C1 = 0.0069;

        mu +=
                +121556. * CHbox / LambdaNP2
                + 46354.9 * CHl1R[0][0] / LambdaNP2
                - 251.929 * CHeR[0][0] / LambdaNP2
                + 46354.9 * CHl3R[0][0] / LambdaNP2
                - 43426.2 * CHD / LambdaNP2
                + 450512. * CHB / LambdaNP2
                + 166493. * CHW / LambdaNP2
                - 198898. * CHWB / LambdaNP2
                - 4408.76 * CDHB / LambdaNP2
                - 17005.2 * CDHW / LambdaNP2
                - 3.427 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+3.845 * deltaMz()
                - 1.857 * deltaMh()
                - 0.423 * deltaaMZ()
                + 3.407 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.365) {

        C1 = 0.0069; // use same as 350 GeV

        mu +=
                +121067. * CHbox / LambdaNP2
                + 9887.64 * CHl1R[0][0] / LambdaNP2
                + 27809. * CHeR[0][0] / LambdaNP2
                + 9887.64 * CHl3R[0][0] / LambdaNP2
                - 43174.2 * CHD / LambdaNP2
                + 417865. * CHB / LambdaNP2
                + 154270. * CHW / LambdaNP2
                - 201517. * CHWB / LambdaNP2
                - 4943.82 * CDHB / LambdaNP2
                - 19213.5 * CDHW / LambdaNP2
                - 3.423 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+3.861 * deltaMz()
                - 1.736 * deltaMh()
                - 0.426 * deltaaMZ()
                + 3.375 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.380) {

        C1 = 0.0069; // use same as 350 GeV

        mu +=
                +121214. * CHbox / LambdaNP2
                - 22289.7 * CHl1R[0][0] / LambdaNP2
                + 52903.2 * CHeR[0][0] / LambdaNP2
                - 22289.7 * CHl3R[0][0] / LambdaNP2
                - 43137.3 * CHD / LambdaNP2
                + 388336. * CHB / LambdaNP2
                + 140923. * CHW / LambdaNP2
                - 202884. * CHWB / LambdaNP2
                - 5363.69 * CDHB / LambdaNP2
                - 21404.2 * CDHW / LambdaNP2
                - 3.418 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+3.887 * deltaMz()
                - 1.633 * deltaMh()
                - 0.419 * deltaaMZ()
                + 3.393 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.500) {

        C1 = 0.0067;

        mu +=
                +121453. * CHbox / LambdaNP2
                - 185326. * CHl1R[0][0] / LambdaNP2
                + 178925. * CHeR[0][0] / LambdaNP2
                - 185326. * CHl3R[0][0] / LambdaNP2
                - 42051.6 * CHD / LambdaNP2
                + 236945. * CHB / LambdaNP2
                + 67833.5 * CHW / LambdaNP2
                - 178623. * CHWB / LambdaNP2
                - 8004.61 * CDHB / LambdaNP2
                - 33567.3 * CDHW / LambdaNP2
                - 3.416 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+3.963 * deltaMz()
                - 1.143 * deltaMh()
                - 0.408 * deltaaMZ()
                + 3.383 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 1.0) {

        C1 = 0.0065;

        mu +=
                +121062. * CHbox / LambdaNP2
                - 409543. * CHl1R[0][0] / LambdaNP2
                + 356730. * CHeR[0][0] / LambdaNP2
                - 409543. * CHl3R[0][0] / LambdaNP2
                - 42133.9 * CHD / LambdaNP2
                + 69851. * CHB / LambdaNP2
                - 14416.8 * CHW / LambdaNP2
                - 113198. * CHWB / LambdaNP2
                - 18688.4 * CDHB / LambdaNP2
                - 61696. * CDHW / LambdaNP2
                - 3.405 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+4.216 * deltaMz()
                - 0.546 * deltaMh()
                - 0.407 * deltaaMZ()
                + 3.393 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 1.4) {

        C1 = 0.0065;

        mu +=
                +120749. * CHbox / LambdaNP2
                - 493617. * CHl1R[0][0] / LambdaNP2
                + 426669. * CHeR[0][0] / LambdaNP2
                - 493617. * CHl3R[0][0] / LambdaNP2
                - 42486.9 * CHD / LambdaNP2
                + 34633.1 * CHB / LambdaNP2
                - 27609.6 * CHW / LambdaNP2
                - 97014.2 * CHWB / LambdaNP2
                - 23942.2 * CDHB / LambdaNP2
                - 74940.3 * CDHW / LambdaNP2
                - 3.405 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+4.309 * deltaMz()
                - 0.422 * deltaMh()
                - 0.402 * deltaaMZ()
                + 3.379 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 1.5) {

        C1 = 0.0065; // Use the same as 1400 GeV

        mu +=
                +120587. * CHbox / LambdaNP2
                - 510290. * CHl1R[0][0] / LambdaNP2
                + 440504. * CHeR[0][0] / LambdaNP2
                - 510290. * CHl3R[0][0] / LambdaNP2
                - 42529.6 * CHD / LambdaNP2
                + 30448.1 * CHB / LambdaNP2
                - 30741.2 * CHW / LambdaNP2
                - 95903.3 * CHWB / LambdaNP2
                - 25074.9 * CDHB / LambdaNP2
                - 77634.5 * CDHW / LambdaNP2
                - 3.401 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+4.326 * deltaMz()
                - 0.4 * deltaMh()
                - 0.403 * deltaaMZ()
                + 3.37 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 3.0) {

        C1 = 0.0063;

        mu +=
                +120474. * CHbox / LambdaNP2
                - 677185. * CHl1R[0][0] / LambdaNP2
                + 582037. * CHeR[0][0] / LambdaNP2
                - 677185. * CHl3R[0][0] / LambdaNP2
                - 42541.3 * CHD / LambdaNP2
                + 6810.6 * CHB / LambdaNP2
                - 32994.5 * CHW / LambdaNP2
                - 78012.3 * CHWB / LambdaNP2
                - 36250. * CDHB / LambdaNP2
                - 105734. * CDHW / LambdaNP2
                - 3.405 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+4.463 * deltaMz()
                - 0.265 * deltaMh()
                - 0.405 * deltaaMZ()
                + 3.351 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZBF()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    //(Assume similar to WBF.)
    mu += eeeWBFint + eeeWBFpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::mueeZBFPol(const double sqrt_s, const double Pol_em, const double Pol_ep) const
{

    //  Only Alpha scheme

    double mu = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 0.240) {

        C1 = 0.0070;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121531. * CHbox / LambdaNP2
                    + 58943.5 * CHl1R[0][0] / LambdaNP2
                    - 939512. * CHeR[0][0] / LambdaNP2
                    + 58943.5 * CHl3R[0][0] / LambdaNP2
                    + 77442.6 * CHD / LambdaNP2
                    + 2082256. * CHB / LambdaNP2
                    + 108043. * CHW / LambdaNP2
                    + 1362693. * CHWB / LambdaNP2
                    + 40385. * CDHB / LambdaNP2
                    - 21886. * CDHW / LambdaNP2
                    + 0.563 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-6.582 * deltaMz()
                    - 5.732 * deltaMh()
                    + 3.573 * deltaaMZ()
                    - 0.708 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +122065. * CHbox / LambdaNP2
                    + 905327. * CHl1R[0][0] / LambdaNP2
                    - 55689. * CHeR[0][0] / LambdaNP2
                    + 905327. * CHl3R[0][0] / LambdaNP2
                    - 124548. * CHD / LambdaNP2
                    + 905057. * CHB / LambdaNP2
                    + 540185. * CHW / LambdaNP2
                    - 329708. * CHWB / LambdaNP2
                    - 37296.9 * CDHB / LambdaNP2
                    + 20497.1 * CDHW / LambdaNP2
                    - 5.854 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+6.473 * deltaMz()
                    - 5.971 * deltaMh()
                    - 3.019 * deltaaMZ()
                    + 5.959 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121947. * CHbox / LambdaNP2
                    + 88774.4 * CHl1R[0][0] / LambdaNP2
                    - 753269. * CHeR[0][0] / LambdaNP2
                    + 88774.4 * CHl3R[0][0] / LambdaNP2
                    + 54593.2 * CHD / LambdaNP2
                    + 2101955. * CHB / LambdaNP2
                    + 182237. * CHW / LambdaNP2
                    + 972861. * CHWB / LambdaNP2
                    + 29346.2 * CDHB / LambdaNP2
                    - 18562.1 * CDHW / LambdaNP2
                    - 0.206 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-5.131 * deltaMz()
                    - 5.658 * deltaMh()
                    + 2.794 * deltaaMZ()
                    + 0.082 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +122265. * CHbox / LambdaNP2
                    + 785643. * CHl1R[0][0] / LambdaNP2
                    - 66907.6 * CHeR[0][0] / LambdaNP2
                    + 785643. * CHl3R[0][0] / LambdaNP2
                    - 107673. * CHD / LambdaNP2
                    + 1115316. * CHB / LambdaNP2
                    + 521873. * CHW / LambdaNP2
                    - 331727. * CHWB / LambdaNP2
                    - 32442.4 * CDHB / LambdaNP2
                    + 15348.7 * CDHW / LambdaNP2
                    - 5.334 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+5.367 * deltaMz()
                    - 5.87 * deltaMh()
                    - 2.491 * deltaaMZ()
                    + 5.409 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZBFPol()");
        }

    } else if (sqrt_s == 0.250) {

        C1 = 0.0070;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121054. * CHbox / LambdaNP2
                    + 51113. * CHl1R[0][0] / LambdaNP2
                    - 851357. * CHeR[0][0] / LambdaNP2
                    + 51113. * CHl3R[0][0] / LambdaNP2
                    + 76762.9 * CHD / LambdaNP2
                    + 1629614. * CHB / LambdaNP2
                    + 72741.6 * CHW / LambdaNP2
                    + 1130834. * CHWB / LambdaNP2
                    + 34381.7 * CDHB / LambdaNP2
                    - 19876.5 * CDHW / LambdaNP2
                    + 0.563 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-5.658 * deltaMz()
                    - 4.485 * deltaMh()
                    + 3.577 * deltaaMZ()
                    - 0.638 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121471. * CHbox / LambdaNP2
                    + 824294. * CHl1R[0][0] / LambdaNP2
                    - 45066.5 * CHeR[0][0] / LambdaNP2
                    + 824294. * CHl3R[0][0] / LambdaNP2
                    - 128864. * CHD / LambdaNP2
                    + 644513. * CHB / LambdaNP2
                    + 425051. * CHW / LambdaNP2
                    - 383720. * CHWB / LambdaNP2
                    - 32434.3 * CDHB / LambdaNP2
                    + 15329.4 * CDHW / LambdaNP2
                    - 6.022 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+7.852 * deltaMz()
                    - 4.536 * deltaMh()
                    - 3.165 * deltaaMZ()
                    + 6.136 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121494. * CHbox / LambdaNP2
                    + 77372.1 * CHl1R[0][0] / LambdaNP2
                    - 676199. * CHeR[0][0] / LambdaNP2
                    + 77372.1 * CHl3R[0][0] / LambdaNP2
                    + 53294.7 * CHD / LambdaNP2
                    + 1668830. * CHB / LambdaNP2
                    + 145010. * CHW / LambdaNP2
                    + 772902. * CHWB / LambdaNP2
                    + 23910.6 * CDHB / LambdaNP2
                    - 16890.6 * CDHW / LambdaNP2
                    - 0.226 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-4.183 * deltaMz()
                    - 4.557 * deltaMh()
                    + 2.773 * deltaaMZ()
                    + 0.148 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121947. * CHbox / LambdaNP2
                    + 713174. * CHl1R[0][0] / LambdaNP2
                    - 53393.3 * CHeR[0][0] / LambdaNP2
                    + 713174. * CHl3R[0][0] / LambdaNP2
                    - 111120. * CHD / LambdaNP2
                    + 843388. * CHB / LambdaNP2
                    + 417838. * CHW / LambdaNP2
                    - 386753. * CHWB / LambdaNP2
                    - 27915.7 * CDHB / LambdaNP2
                    + 11946.5 * CDHW / LambdaNP2
                    - 5.496 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+6.641 * deltaMz()
                    - 4.576 * deltaMh()
                    - 2.605 * deltaaMZ()
                    + 5.56 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZBFPol()");
        }

    } else if (sqrt_s == 0.350) {

        C1 = 0.0069;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121674. * CHbox / LambdaNP2
                    - 47420.2 * CHl1R[0][0] / LambdaNP2
                    - 172088. * CHeR[0][0] / LambdaNP2
                    - 47420.2 * CHl3R[0][0] / LambdaNP2
                    + 59728. * CHD / LambdaNP2
                    + 544205. * CHB / LambdaNP2
                    + 83604.4 * CHW / LambdaNP2
                    + 435393. * CHWB / LambdaNP2
                    - 24800.4 * CDHB / LambdaNP2
                    - 4583.09 * CDHW / LambdaNP2
                    - 0.05 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.905 * deltaMz()
                    - 1.842 * deltaMh()
                    + 2.966 * deltaaMZ()
                    + 0.009 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121541. * CHbox / LambdaNP2
                    + 197618. * CHl1R[0][0] / LambdaNP2
                    + 42238.9 * CHeR[0][0] / LambdaNP2
                    + 197618. * CHl3R[0][0] / LambdaNP2
                    - 124376. * CHD / LambdaNP2
                    + 181154. * CHB / LambdaNP2
                    + 195329. * CHW / LambdaNP2
                    - 505800. * CHWB / LambdaNP2
                    + 13082.6 * CDHB / LambdaNP2
                    - 26607.4 * CDHW / LambdaNP2
                    - 6.096 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+9.303 * deltaMz()
                    - 1.82 * deltaMh()
                    - 3.105 * deltaaMZ()
                    + 6.071 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121760. * CHbox / LambdaNP2
                    - 62853. * CHl1R[0][0] / LambdaNP2
                    - 83019.6 * CHeR[0][0] / LambdaNP2
                    - 62853. * CHl3R[0][0] / LambdaNP2
                    + 34395.4 * CHD / LambdaNP2
                    + 623389. * CHB / LambdaNP2
                    + 123932. * CHW / LambdaNP2
                    + 181789. * CHWB / LambdaNP2
                    - 20420. * CDHB / LambdaNP2
                    - 7820.42 * CDHW / LambdaNP2
                    - 0.875 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-1.322 * deltaMz()
                    - 1.873 * deltaMh()
                    + 2.14 * deltaaMZ()
                    + 0.844 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121557. * CHbox / LambdaNP2
                    + 131443. * CHl1R[0][0] / LambdaNP2
                    + 63326.7 * CHeR[0][0] / LambdaNP2
                    + 131443. * CHl3R[0][0] / LambdaNP2
                    - 103038. * CHD / LambdaNP2
                    + 323596. * CHB / LambdaNP2
                    + 201676. * CHW / LambdaNP2
                    - 491019. * CHWB / LambdaNP2
                    + 7992.43 * CDHB / LambdaNP2
                    - 24283.6 * CDHW / LambdaNP2
                    - 5.391 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+7.818 * deltaMz()
                    - 1.846 * deltaMh()
                    - 2.402 * deltaaMZ()
                    + 5.358 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZBFPol()");
        }

    } else if (sqrt_s == 0.365) {

        C1 = 0.0069; // Use same as 350 GeV

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121458. * CHbox / LambdaNP2
                    - 58695.1 * CHl1R[0][0] / LambdaNP2
                    - 109686. * CHeR[0][0] / LambdaNP2
                    - 58695.1 * CHl3R[0][0] / LambdaNP2
                    + 58496.7 * CHD / LambdaNP2
                    + 489137. * CHB / LambdaNP2
                    + 80751.3 * CHW / LambdaNP2
                    + 410304. * CHWB / LambdaNP2
                    - 30918.3 * CDHB / LambdaNP2
                    - 3571.31 * CDHW / LambdaNP2
                    - 0.085 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.809 * deltaMz()
                    - 1.721 * deltaMh()
                    + 2.93 * deltaaMZ()
                    + 0.026 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121152. * CHbox / LambdaNP2
                    + 136019. * CHl1R[0][0] / LambdaNP2
                    + 50762. * CHeR[0][0] / LambdaNP2
                    + 136019. * CHl3R[0][0] / LambdaNP2
                    - 123859. * CHD / LambdaNP2
                    + 165799. * CHB / LambdaNP2
                    + 176652. * CHW / LambdaNP2
                    - 504889. * CHWB / LambdaNP2
                    + 16920.7 * CDHB / LambdaNP2
                    - 31414.1 * CDHW / LambdaNP2
                    - 6.076 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+9.271 * deltaMz()
                    - 1.7 * deltaMh()
                    - 3.092 * deltaaMZ()
                    + 6.031 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121193. * CHbox / LambdaNP2
                    - 76905.7 * CHl1R[0][0] / LambdaNP2
                    - 32264.3 * CHeR[0][0] / LambdaNP2
                    - 76905.7 * CHl3R[0][0] / LambdaNP2
                    + 33650.3 * CHD / LambdaNP2
                    + 573505. * CHB / LambdaNP2
                    + 117937. * CHW / LambdaNP2
                    + 166382. * CHWB / LambdaNP2
                    - 25012.1 * CDHB / LambdaNP2
                    - 7703.47 * CDHW / LambdaNP2
                    - 0.911 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-1.233 * deltaMz()
                    - 1.746 * deltaMh()
                    + 2.101 * deltaaMZ()
                    + 0.861 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121177. * CHbox / LambdaNP2
                    + 77981.5 * CHl1R[0][0] / LambdaNP2
                    + 74274.1 * CHeR[0][0] / LambdaNP2
                    + 77981.5 * CHl3R[0][0] / LambdaNP2
                    - 102068. * CHD / LambdaNP2
                    + 305730. * CHB / LambdaNP2
                    + 183682. * CHW / LambdaNP2
                    - 487770. * CHWB / LambdaNP2
                    + 10624.8 * CDHB / LambdaNP2
                    - 28092.3 * CDHW / LambdaNP2
                    - 5.366 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+7.791 * deltaMz()
                    - 1.726 * deltaMh()
                    - 2.377 * deltaaMZ()
                    + 5.325 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZBFPol()");
        }

    } else if (sqrt_s == 0.380) {

        C1 = 0.0069; // Use same as 350 GeV

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121392. * CHbox / LambdaNP2
                    - 68799.8 * CHl1R[0][0] / LambdaNP2
                    - 54383.2 * CHeR[0][0] / LambdaNP2
                    - 68799.8 * CHl3R[0][0] / LambdaNP2
                    + 57427.7 * CHD / LambdaNP2
                    + 439155. * CHB / LambdaNP2
                    + 76978.2 * CHW / LambdaNP2
                    + 392293. * CHWB / LambdaNP2
                    - 36175.9 * CDHB / LambdaNP2
                    - 3193.74 * CDHW / LambdaNP2
                    - 0.11 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.74 * deltaMz()
                    - 1.62 * deltaMh()
                    + 2.907 * deltaaMZ()
                    + 0.079 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121306. * CHbox / LambdaNP2
                    + 80159.7 * CHl1R[0][0] / LambdaNP2
                    + 58002.2 * CHeR[0][0] / LambdaNP2
                    + 80159.7 * CHl3R[0][0] / LambdaNP2
                    - 123524. * CHD / LambdaNP2
                    + 151617. * CHB / LambdaNP2
                    + 154342. * CHW / LambdaNP2
                    - 500961. * CHWB / LambdaNP2
                    + 20509.9 * CDHB / LambdaNP2
                    - 35718.1 * CDHW / LambdaNP2
                    - 6.064 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+9.254 * deltaMz()
                    - 1.608 * deltaMh()
                    - 3.07 * deltaaMZ()
                    + 6.04 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121171. * CHbox / LambdaNP2
                    - 89494.3 * CHl1R[0][0] / LambdaNP2
                    + 11882.3 * CHeR[0][0] / LambdaNP2
                    - 89494.3 * CHl3R[0][0] / LambdaNP2
                    + 32430.1 * CHD / LambdaNP2
                    + 524620. * CHB / LambdaNP2
                    + 111520. * CHW / LambdaNP2
                    + 156122. * CHWB / LambdaNP2
                    - 29271.1 * CDHB / LambdaNP2
                    - 8056.8 * CDHW / LambdaNP2
                    - 0.928 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-1.145 * deltaMz()
                    - 1.643 * deltaMh()
                    + 2.077 * deltaaMZ()
                    + 0.898 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121286. * CHbox / LambdaNP2
                    + 30046.7 * CHl1R[0][0] / LambdaNP2
                    + 84014. * CHeR[0][0] / LambdaNP2
                    + 30046.7 * CHl3R[0][0] / LambdaNP2
                    - 101539. * CHD / LambdaNP2
                    + 286981. * CHB / LambdaNP2
                    + 164662. * CHW / LambdaNP2
                    - 480410. * CHWB / LambdaNP2
                    + 13149.6 * CDHB / LambdaNP2
                    - 31886.7 * CDHW / LambdaNP2
                    - 5.346 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+7.766 * deltaMz()
                    - 1.629 * deltaMh()
                    - 2.353 * deltaaMZ()
                    + 5.316 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZBFPol()");
        }

    } else if (sqrt_s == 0.500) {

        C1 = 0.0067;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121372. * CHbox / LambdaNP2
                    - 121062. * CHl1R[0][0] / LambdaNP2
                    + 224754. * CHeR[0][0] / LambdaNP2
                    - 121062. * CHl3R[0][0] / LambdaNP2
                    + 55161.7 * CHD / LambdaNP2
                    + 201238. * CHB / LambdaNP2
                    + 52456.6 * CHW / LambdaNP2
                    + 335517. * CHWB / LambdaNP2
                    - 63733.4 * CDHB / LambdaNP2
                    - 2379.21 * CDHW / LambdaNP2
                    - 0.207 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.453 * deltaMz()
                    - 1.136 * deltaMh()
                    + 2.81 * deltaaMZ()
                    + 0.175 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121399. * CHbox / LambdaNP2
                    - 200849. * CHl1R[0][0] / LambdaNP2
                    + 96427.7 * CHeR[0][0] / LambdaNP2
                    - 200849. * CHl3R[0][0] / LambdaNP2
                    - 121178. * CHD / LambdaNP2
                    + 83220.9 * CHB / LambdaNP2
                    + 42832.2 * CHW / LambdaNP2
                    - 464173. * CHWB / LambdaNP2
                    + 37654.2 * CDHB / LambdaNP2
                    - 59029.6 * CDHW / LambdaNP2
                    - 6.025 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+9.205 * deltaMz()
                    - 1.133 * deltaMh()
                    - 3.019 * deltaaMZ()
                    + 5.99 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121435. * CHbox / LambdaNP2
                    - 154953. * CHl1R[0][0] / LambdaNP2
                    + 235326. * CHeR[0][0] / LambdaNP2
                    - 154953. * CHl3R[0][0] / LambdaNP2
                    + 30472. * CHD / LambdaNP2
                    + 298145. * CHB / LambdaNP2
                    + 75047.6 * CHW / LambdaNP2
                    + 137304. * CHWB / LambdaNP2
                    - 49636.1 * CDHB / LambdaNP2
                    - 10277.1 * CDHW / LambdaNP2
                    - 1.027 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-0.829 * deltaMz()
                    - 1.142 * deltaMh()
                    + 1.988 * deltaaMZ()
                    + 0.989 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121468. * CHbox / LambdaNP2
                    - 208577. * CHl1R[0][0] / LambdaNP2
                    + 134790. * CHeR[0][0] / LambdaNP2
                    - 208577. * CHl3R[0][0] / LambdaNP2
                    - 98708.1 * CHD / LambdaNP2
                    + 190310. * CHB / LambdaNP2
                    + 62321.4 * CHW / LambdaNP2
                    - 429412. * CHWB / LambdaNP2
                    + 24628.2 * CDHB / LambdaNP2
                    - 51722.9 * CDHW / LambdaNP2
                    - 5.287 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+7.714 * deltaMz()
                    - 1.14 * deltaMh()
                    - 2.279 * deltaaMZ()
                    + 5.251 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZBFPol()");
        }

    } else if (sqrt_s == 1.0) {

        C1 = 0.0065;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121044. * CHbox / LambdaNP2
                    - 206156. * CHl1R[0][0] / LambdaNP2
                    + 586357. * CHeR[0][0] / LambdaNP2
                    - 206156. * CHl3R[0][0] / LambdaNP2
                    + 54157.3 * CHD / LambdaNP2
                    - 30839.6 * CHB / LambdaNP2
                    + 18110.3 * CHW / LambdaNP2
                    + 345253. * CHWB / LambdaNP2
                    - 108488. * CDHB / LambdaNP2
                    - 12324.2 * CDHW / LambdaNP2
                    - 0.229 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.141 * deltaMz()
                    - 0.544 * deltaMh()
                    + 2.775 * deltaaMZ()
                    + 0.211 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121085. * CHbox / LambdaNP2
                    - 565700. * CHl1R[0][0] / LambdaNP2
                    + 157498. * CHeR[0][0] / LambdaNP2
                    - 565700. * CHl3R[0][0] / LambdaNP2
                    - 120795. * CHD / LambdaNP2
                    + 7953.6 * CHB / LambdaNP2
                    - 79908.9 * CHW / LambdaNP2
                    - 402278. * CHWB / LambdaNP2
                    + 54805.3 * CDHB / LambdaNP2
                    - 101988. * CDHW / LambdaNP2
                    - 6.001 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+9.412 * deltaMz()
                    - 0.546 * deltaMh()
                    - 3.005 * deltaaMZ()
                    + 5.986 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == -20.) {
            mu +=
                    +121091. * CHbox / LambdaNP2
                    - 225779. * CHl1R[0][0] / LambdaNP2
                    + 568149. * CHeR[0][0] / LambdaNP2
                    - 225779. * CHl3R[0][0] / LambdaNP2
                    + 45736.7 * CHD / LambdaNP2
                    + 2164.38 * CHB / LambdaNP2
                    + 20504.6 * CHW / LambdaNP2
                    + 290141. * CHWB / LambdaNP2
                    - 100416. * CDHB / LambdaNP2
                    - 16574.6 * CDHW / LambdaNP2
                    - 0.51 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-1.569 * deltaMz()
                    - 0.555 * deltaMh()
                    + 2.507 * deltaaMZ()
                    + 0.493 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 20.) {
            mu +=
                    +121091. * CHbox / LambdaNP2
                    - 552286. * CHl1R[0][0] / LambdaNP2
                    + 177286. * CHeR[0][0] / LambdaNP2
                    - 552286. * CHl3R[0][0] / LambdaNP2
                    - 113484. * CHD / LambdaNP2
                    + 29757.9 * CHB / LambdaNP2
                    - 69897.4 * CHW / LambdaNP2
                    - 385087. * CHWB / LambdaNP2
                    + 47999.3 * CDHB / LambdaNP2
                    - 98310.4 * CDHW / LambdaNP2
                    - 5.76 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+8.942 * deltaMz()
                    - 0.556 * deltaMh()
                    - 2.75 * deltaaMZ()
                    + 5.748 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +120996. * CHbox / LambdaNP2
                    - 263143. * CHl1R[0][0] / LambdaNP2
                    + 533190. * CHeR[0][0] / LambdaNP2
                    - 263143. * CHl3R[0][0] / LambdaNP2
                    + 29434.5 * CHD / LambdaNP2
                    + 63176.5 * CHB / LambdaNP2
                    + 26728.5 * CHW / LambdaNP2
                    + 184228. * CHWB / LambdaNP2
                    - 85487.1 * CDHB / LambdaNP2
                    - 24906.1 * CDHW / LambdaNP2
                    - 1.044 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-0.508 * deltaMz()
                    - 0.545 * deltaMh()
                    + 1.958 * deltaaMZ()
                    + 1.027 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121114. * CHbox / LambdaNP2
                    - 524119. * CHl1R[0][0] / LambdaNP2
                    + 218758. * CHeR[0][0] / LambdaNP2
                    - 524119. * CHl3R[0][0] / LambdaNP2
                    - 98164. * CHD / LambdaNP2
                    + 74694.7 * CHB / LambdaNP2
                    - 49060.4 * CHW / LambdaNP2
                    - 348619. * CHWB / LambdaNP2
                    + 33861.6 * CDHB / LambdaNP2
                    - 90369.8 * CDHW / LambdaNP2
                    - 5.256 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+7.922 * deltaMz()
                    - 0.546 * deltaMh()
                    - 2.261 * deltaaMZ()
                    + 5.242 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZBFPol()");
        }

    } else if (sqrt_s == 1.4) {

        C1 = 0.0065;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +120762. * CHbox / LambdaNP2
                    - 242720. * CHl1R[0][0] / LambdaNP2
                    + 714345. * CHeR[0][0] / LambdaNP2
                    - 242720. * CHl3R[0][0] / LambdaNP2
                    + 53823.3 * CHD / LambdaNP2
                    - 64876.7 * CHB / LambdaNP2
                    + 9362.37 * CHW / LambdaNP2
                    + 355440. * CHWB / LambdaNP2
                    - 127361. * CDHB / LambdaNP2
                    - 18147.3 * CDHW / LambdaNP2
                    - 0.228 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.05 * deltaMz()
                    - 0.422 * deltaMh()
                    + 2.78 * deltaaMZ()
                    + 0.2 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +120818. * CHbox / LambdaNP2
                    - 692905. * CHl1R[0][0] / LambdaNP2
                    + 184416. * CHeR[0][0] / LambdaNP2
                    - 692905. * CHl3R[0][0] / LambdaNP2
                    - 121143. * CHD / LambdaNP2
                    - 4989.81 * CHB / LambdaNP2
                    - 93241.6 * CHW / LambdaNP2
                    - 392394. * CHWB / LambdaNP2
                    + 60556.9 * CDHB / LambdaNP2
                    - 121409. * CDHW / LambdaNP2
                    - 6.003 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+9.501 * deltaMz()
                    - 0.422 * deltaMh()
                    - 2.999 * deltaaMZ()
                    + 5.972 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +120773. * CHbox / LambdaNP2
                    - 309806. * CHl1R[0][0] / LambdaNP2
                    + 643900. * CHeR[0][0] / LambdaNP2
                    - 309806. * CHl3R[0][0] / LambdaNP2
                    + 29091.1 * CHD / LambdaNP2
                    + 22438.3 * CHB / LambdaNP2
                    + 16021.7 * CHW / LambdaNP2
                    + 202496. * CHWB / LambdaNP2
                    - 100775. * CDHB / LambdaNP2
                    - 32830.8 * CDHW / LambdaNP2
                    - 1.043 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-0.415 * deltaMz()
                    - 0.422 * deltaMh()
                    + 1.961 * deltaaMZ()
                    + 1.014 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +120795. * CHbox / LambdaNP2
                    - 637584. * CHl1R[0][0] / LambdaNP2
                    + 256188. * CHeR[0][0] / LambdaNP2
                    - 637584. * CHl3R[0][0] / LambdaNP2
                    - 98543.3 * CHD / LambdaNP2
                    + 49040.2 * CHB / LambdaNP2
                    - 63051.7 * CHW / LambdaNP2
                    - 332850. * CHWB / LambdaNP2
                    + 36510.1 * CDHB / LambdaNP2
                    - 108018. * CDHW / LambdaNP2
                    - 5.256 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+8.01 * deltaMz()
                    - 0.423 * deltaMh()
                    - 2.255 * deltaaMZ()
                    + 5.227 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZBFPol()");
        }

    } else if (sqrt_s == 1.5) {

        C1 = 0.0065; // Use the same as 1400 GeV

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +120570. * CHbox / LambdaNP2
                    - 250340. * CHl1R[0][0] / LambdaNP2
                    + 739684. * CHeR[0][0] / LambdaNP2
                    - 250340. * CHl3R[0][0] / LambdaNP2
                    + 53685.8 * CHD / LambdaNP2
                    - 71192.9 * CHB / LambdaNP2
                    + 9743.41 * CHW / LambdaNP2
                    + 357556. * CHWB / LambdaNP2
                    - 131206. * CDHB / LambdaNP2
                    - 19448. * CDHW / LambdaNP2
                    - 0.224 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.032 * deltaMz()
                    - 0.4 * deltaMh()
                    + 2.778 * deltaaMZ()
                    + 0.194 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +120602. * CHbox / LambdaNP2
                    - 718001. * CHl1R[0][0] / LambdaNP2
                    + 189852. * CHeR[0][0] / LambdaNP2
                    - 718001. * CHl3R[0][0] / LambdaNP2
                    - 121214. * CHD / LambdaNP2
                    - 6057.91 * CHB / LambdaNP2
                    - 95148.1 * CHW / LambdaNP2
                    - 390958. * CHWB / LambdaNP2
                    + 61690.7 * CDHB / LambdaNP2
                    - 125382. * CDHW / LambdaNP2
                    - 5.997 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+9.519 * deltaMz()
                    - 0.399 * deltaMh()
                    - 3.001 * deltaaMZ()
                    + 5.965 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +120563. * CHbox / LambdaNP2
                    - 319378. * CHl1R[0][0] / LambdaNP2
                    + 665765. * CHeR[0][0] / LambdaNP2
                    - 319378. * CHl3R[0][0] / LambdaNP2
                    + 29010.7 * CHD / LambdaNP2
                    + 14190.4 * CHB / LambdaNP2
                    + 16080. * CHW / LambdaNP2
                    + 205187. * CHWB / LambdaNP2
                    - 103927. * CDHB / LambdaNP2
                    - 34420.2 * CDHW / LambdaNP2
                    - 1.04 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-0.398 * deltaMz()
                    - 0.4 * deltaMh()
                    + 1.96 * deltaaMZ()
                    + 1.01 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +120607. * CHbox / LambdaNP2
                    - 659879. * CHl1R[0][0] / LambdaNP2
                    + 263841. * CHeR[0][0] / LambdaNP2
                    - 659879. * CHl3R[0][0] / LambdaNP2
                    - 98617.3 * CHD / LambdaNP2
                    + 46418.4 * CHB / LambdaNP2
                    - 64166.6 * CHW / LambdaNP2
                    - 330855. * CHWB / LambdaNP2
                    + 36774.5 * CDHB / LambdaNP2
                    - 111573. * CDHW / LambdaNP2
                    - 5.253 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+8.03 * deltaMz()
                    - 0.4 * deltaMh()
                    - 2.257 * deltaaMZ()
                    + 5.221 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZBFPol()");
        }

    } else if (sqrt_s == 3.0) {

        C1 = 0.0063;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +120539. * CHbox / LambdaNP2
                    - 327096. * CHl1R[0][0] / LambdaNP2
                    + 988310. * CHeR[0][0] / LambdaNP2
                    - 327096. * CHl3R[0][0] / LambdaNP2
                    + 53758.1 * CHD / LambdaNP2
                    - 79161. * CHB / LambdaNP2
                    + 3856.87 * CHW / LambdaNP2
                    + 369878. * CHWB / LambdaNP2
                    - 170059. * CDHB / LambdaNP2
                    - 32235.8 * CDHW / LambdaNP2
                    - 0.226 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-1.896 * deltaMz()
                    - 0.264 * deltaMh()
                    + 2.778 * deltaaMZ()
                    + 0.174 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +120565. * CHbox / LambdaNP2
                    - 961658. * CHl1R[0][0] / LambdaNP2
                    + 247947. * CHeR[0][0] / LambdaNP2
                    - 961658. * CHl3R[0][0] / LambdaNP2
                    - 121230. * CHD / LambdaNP2
                    - 10752.9 * CHB / LambdaNP2
                    - 92123.7 * CHW / LambdaNP2
                    - 391807. * CHWB / LambdaNP2
                    + 73242.2 * CDHB / LambdaNP2
                    - 165690. * CDHW / LambdaNP2
                    - 6.002 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+9.659 * deltaMz()
                    - 0.264 * deltaMh()
                    - 3.003 * deltaaMZ()
                    + 5.943 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +120534. * CHbox / LambdaNP2
                    - 417962. * CHl1R[0][0] / LambdaNP2
                    + 884851. * CHeR[0][0] / LambdaNP2
                    - 417962. * CHl3R[0][0] / LambdaNP2
                    + 29065.5 * CHD / LambdaNP2
                    - 10885.4 * CHB / LambdaNP2
                    + 8249.25 * CHW / LambdaNP2
                    + 228820. * CHWB / LambdaNP2
                    - 135851. * CDHB / LambdaNP2
                    - 51177.2 * CDHW / LambdaNP2
                    - 1.04 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-0.262 * deltaMz()
                    - 0.264 * deltaMh()
                    + 1.959 * deltaaMZ()
                    + 0.987 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +120480. * CHbox / LambdaNP2
                    - 880604. * CHl1R[0][0] / LambdaNP2
                    + 344657. * CHeR[0][0] / LambdaNP2
                    - 880604. * CHl3R[0][0] / LambdaNP2
                    - 98656.8 * CHD / LambdaNP2
                    + 28681.4 * CHB / LambdaNP2
                    - 66216.6 * CHW / LambdaNP2
                    - 320715. * CHWB / LambdaNP2
                    + 41721.6 * CDHB / LambdaNP2
                    - 148698. * CDHW / LambdaNP2
                    - 5.256 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+8.169 * deltaMz()
                    - 0.264 * deltaMh()
                    - 2.259 * deltaaMZ()
                    + 5.202 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZBFPol()");
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZBFPol()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    //(Assume similar to WBF.)
    mu += eeeWBFint + eeeWBFpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::muepWBF(const double sqrt_s) const
{

    //  Only Alpha scheme

    double mu = 1.0;

    if (sqrt_s == 1.3) {

        mu +=
                +121790. * CHbox / LambdaNP2
                - 161604. * CHl3R[0][0] / LambdaNP2
                - 161282. * CHq3R[0][0] / LambdaNP2
                - 203141. * CHD / LambdaNP2
                - 88171.6 * CHW / LambdaNP2
                - 377218. * CHWB / LambdaNP2
                - 37738.9 * CDHW / LambdaNP2
                - 4.676 * delta_GF
                - 4.916 * deltaMwd6()
                ;

        //        if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients

        //        }

    } else if (sqrt_s == 1.8) {

        mu +=
                +121867. * CHbox / LambdaNP2
                - 182643. * CHl3R[0][0] / LambdaNP2
                - 181961. * CHq3R[0][0] / LambdaNP2
                - 202400. * CHD / LambdaNP2
                - 78295.8 * CHW / LambdaNP2
                - 377193. * CHWB / LambdaNP2
                - 45757.3 * CDHW / LambdaNP2
                - 4.672 * delta_GF
                - 4.637 * deltaMwd6()
                ;

        //        if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients

        //        }

    } else if (sqrt_s == 3.5) {

        mu +=
                +121250. * CHbox / LambdaNP2
                - 216885. * CHl3R[0][0] / LambdaNP2
                - 218544. * CHq3R[0][0] / LambdaNP2
                - 202390. * CHD / LambdaNP2
                - 64783.2 * CHW / LambdaNP2
                - 377727. * CHWB / LambdaNP2
                - 60431.2 * CDHW / LambdaNP2
                - 4.688 * delta_GF
                - 4.573 * deltaMwd6()
                ;

        //        if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients

        //        }

    } else if (sqrt_s == 5.0) {

        mu +=
                +119662. * CHbox / LambdaNP2
                - 237868. * CHl3R[0][0] / LambdaNP2
                - 236470. * CHq3R[0][0] / LambdaNP2
                - 203294. * CHD / LambdaNP2
                - 60911. * CHW / LambdaNP2
                - 378045. * CHWB / LambdaNP2
                - 67483.7 * CDHW / LambdaNP2
                - 4.667 * delta_GF
                - 4.437 * deltaMwd6()
                ;

        //        if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients

        //        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::muepWBF()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eepWBFint + eepWBFpar;

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::muepZBF(const double sqrt_s) const
{

    //  Only Alpha scheme

    double mu = 1.0;

    if (sqrt_s == 1.3) {

        mu +=
                +121280. * CHbox / LambdaNP2
                - 152367. * CHl1R[0][0] / LambdaNP2
                + 32200. * CHq1R[0][0] / LambdaNP2
                + 124934. * CHeR[0][0] / LambdaNP2
                - 42209.5 * CHuR[0][0] / LambdaNP2
                + 12445.7 * CHdR[0][0] / LambdaNP2
                - 152367. * CHl3R[0][0] / LambdaNP2
                - 165343. * CHq3R[0][0] / LambdaNP2
                - 173922. * CHD / LambdaNP2
                - 34636.2 * CHB / LambdaNP2
                - 121438. * CHW / LambdaNP2
                - 74939.1 * CHWB / LambdaNP2
                - 5454.93 * CDHB / LambdaNP2
                - 39349.6 * CDHW / LambdaNP2
                - 3.719 * delta_GF
                ;

        //        if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients

        //        }

    } else if (sqrt_s == 1.8) {

        mu +=
                +120218. * CHbox / LambdaNP2
                - 173566. * CHl1R[0][0] / LambdaNP2
                + 26307.1 * CHq1R[0][0] / LambdaNP2
                + 142600. * CHeR[0][0] / LambdaNP2
                - 47449. * CHuR[0][0] / LambdaNP2
                + 14356.2 * CHdR[0][0] / LambdaNP2
                - 173566. * CHl3R[0][0] / LambdaNP2
                - 188606. * CHq3R[0][0] / LambdaNP2
                - 174301. * CHD / LambdaNP2
                - 19800. * CHB / LambdaNP2
                - 103254. * CHW / LambdaNP2
                - 89049.2 * CHWB / LambdaNP2
                - 8304.85 * CDHB / LambdaNP2
                - 48942.9 * CDHW / LambdaNP2
                - 3.714 * delta_GF
                ;

        //        if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients

        //        }

    } else if (sqrt_s == 3.5) {

        mu +=
                +123119. * CHbox / LambdaNP2
                - 206981. * CHl1R[0][0] / LambdaNP2
                + 18620.9 * CHq1R[0][0] / LambdaNP2
                + 177706. * CHeR[0][0] / LambdaNP2
                - 53822. * CHuR[0][0] / LambdaNP2
                + 20491.5 * CHdR[0][0] / LambdaNP2
                - 206981. * CHl3R[0][0] / LambdaNP2
                - 227549. * CHq3R[0][0] / LambdaNP2
                - 172298. * CHD / LambdaNP2
                - 6887.17 * CHB / LambdaNP2
                - 79245. * CHW / LambdaNP2
                - 103223. * CHWB / LambdaNP2
                - 9863.11 * CDHB / LambdaNP2
                - 61304.3 * CDHW / LambdaNP2
                - 3.721 * delta_GF
                ;

        //        if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients

        //        }

    } else if (sqrt_s == 5.0) {

        mu +=
                +121709. * CHbox / LambdaNP2
                - 225267. * CHl1R[0][0] / LambdaNP2
                + 13471.8 * CHq1R[0][0] / LambdaNP2
                + 193542. * CHeR[0][0] / LambdaNP2
                - 57640.9 * CHuR[0][0] / LambdaNP2
                + 22573. * CHdR[0][0] / LambdaNP2
                - 225267. * CHl3R[0][0] / LambdaNP2
                - 247738. * CHq3R[0][0] / LambdaNP2
                - 172768. * CHD / LambdaNP2
                - 4524.89 * CHB / LambdaNP2
                - 71935.4 * CHW / LambdaNP2
                - 104998. * CHWB / LambdaNP2
                - 11877.8 * CDHB / LambdaNP2
                - 69467.3 * CDHW / LambdaNP2
                - 3.71 * delta_GF
                ;

        //        if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients

        //        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::muepZBF()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eepZBFint + eepZBFpar;

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::muWH(const double sqrt_s) const
{
    double mu = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 1.96) {

        C1 = 0.0; // N.A.

        mu +=
                +121231. * (1. + eWH_2_Hbox) * CHbox / LambdaNP2
                + 855498. * (1. + eWH_2_HW) * CHW / LambdaNP2
                + 135077. * (1. + eWH_2_DHW) * CDHW / LambdaNP2
                + 1554889. * (1. + eWH_2_HQ3_11) * CHq3R[0][0] / LambdaNP2
                + 10415.1 * (1. + eWH_2_HQ3_11) * CHq3R[1][1] / LambdaNP2
                + cAsch * (-160273. * (1. + eWH_2_HD) * CHD / LambdaNP2
                - 284953. * (1. + eWH_2_HWB) * CHWB / LambdaNP2
                - 3.288 * (1. + eWH_2_DeltaGF) * delta_GF
                - 2.258 * deltaMwd6())
                + cWsch * (-30311.6 * (1. + eWH_2_HD) * CHD / LambdaNP2
                + 0. * (1. + eWH_2_HWB) * CHWB / LambdaNP2
                - 2. * (1. + eWH_2_DeltaGF) * delta_GF)
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 7.0) {

        C1 = 0.0106;

        mu +=
                +121215. * (1. + eWH_78_Hbox) * CHbox / LambdaNP2
                + 874536. * (1. + eWH_78_HW) * CHW / LambdaNP2
                + 168556. * (1. + eWH_78_DHW) * CDHW / LambdaNP2
                + 1688781. * (1. + eWH_78_HQ3_11) * CHq3R[0][0] / LambdaNP2
                + 101677. * (1. + eWH_78_HQ3_11) * CHq3R[1][1] / LambdaNP2
                + cAsch * (-160236. * (1. + eWH_78_HD) * CHD / LambdaNP2
                - 284911. * (1. + eWH_78_HWB) * CHWB / LambdaNP2
                - 3.286 * (1. + eWH_78_DeltaGF) * delta_GF
                - 2.217 * deltaMwd6())
                + cWsch * (-30300.4 * (1. + eWH_78_HD) * CHD / LambdaNP2
                + 0. * (1. + eWH_78_HWB) * CHWB / LambdaNP2
                - 1.999 * (1. + eWH_78_DeltaGF) * delta_GF)
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 8.0) {

        C1 = 0.0105;

        mu +=
                +121222. * (1. + eWH_78_Hbox) * CHbox / LambdaNP2
                + 877503. * (1. + eWH_78_HW) * CHW / LambdaNP2
                + 174299. * (1. + eWH_78_DHW) * CDHW / LambdaNP2
                + 1716018. * (1. + eWH_78_HQ3_11) * CHq3R[0][0] / LambdaNP2
                + 113210. * (1. + eWH_78_HQ3_11) * CHq3R[1][1] / LambdaNP2
                + cAsch * (-160294. * (1. + eWH_78_HD) * CHD / LambdaNP2
                - 284954. * (1. + eWH_78_HWB) * CHWB / LambdaNP2
                - 3.287 * (1. + eWH_78_DeltaGF) * delta_GF
                - 2.179 * deltaMwd6())
                + cWsch * (-30310.6 * (1. + eWH_78_HD) * CHD / LambdaNP2
                + 0. * (1. + eWH_78_HWB) * CHWB / LambdaNP2
                - 1.999 * (1. + eWH_78_DeltaGF) * delta_GF)
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 13.0) {

        C1 = 0.0103;

        mu +=
                +121126. * (1. + eWH_1314_Hbox) * CHbox / LambdaNP2
                + 886205. * (1. + eWH_1314_HW) * CHW / LambdaNP2
                + 193294. * (1. + eWH_1314_DHW) * CDHW / LambdaNP2
                + 1792005. * (1. + eWH_1314_HQ3_11) * CHq3R[0][0] / LambdaNP2
                + 161535. * (1. + eWH_1314_HQ3_11) * CHq3R[1][1] / LambdaNP2
                + cAsch * (-160176. * (1. + eWH_1314_HD) * CHD / LambdaNP2
                - 284823. * (1. + eWH_1314_HWB) * CHWB / LambdaNP2
                - 3.287 * (1. + eWH_1314_DeltaGF) * delta_GF
                - 2.139 * deltaMwd6())
                + cWsch * (-30285.8 * (1. + eWH_1314_HD) * CHD / LambdaNP2
                + 0. * (1. + eWH_1314_HWB) * CHWB / LambdaNP2
                - 1.999 * (1. + eWH_1314_DeltaGF) * delta_GF)
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 14.0) {

        // Only Alpha scheme

        C1 = 0.0103;

        mu +=
                +121112. * (1. + eWH_1314_Hbox) * CHbox / LambdaNP2
                // +1973653. * (1. + eWH_1314_HQ3_11 ) * CHq3R[0][0] / LambdaNP2
                + 1804876. * (1. + eWH_1314_HQ3_11) * CHq3R[0][0] / LambdaNP2
                + 169913. * (1. + eWH_1314_HQ3_11) * CHq3R[1][1] / LambdaNP2
                - 160171. * (1. + eWH_1314_HD) * CHD / LambdaNP2
                + 893242. * (1. + eWH_1314_HW) * CHW / LambdaNP2
                - 284850. * (1. + eWH_1314_HWB) * CHWB / LambdaNP2
                + 195766. * (1. + eWH_1314_DHW) * CDHW / LambdaNP2
                - 3.286 * (1. + eWH_1314_DeltaGF) * delta_GF
                - 2.103 * deltaMwd6()
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 27.0) {

        // Only Alpha scheme

        C1 = 0.0101; // From arXiv: 1902.00134

        mu +=
                +120696. * CHbox / LambdaNP2
                + 2105646. * CHq3R[0][0] / LambdaNP2
                - 159695. * CHD / LambdaNP2
                + 900162. * CHW / LambdaNP2
                - 283257. * CHWB / LambdaNP2
                + 215592. * CDHW / LambdaNP2
                - 3.256 * delta_GF
                - 2.063 * deltaMwd6()
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 100.0) {

        // Only Alpha scheme

        C1 = 0.0; // N.A. 

        mu +=
                +121319. * CHbox / LambdaNP2
                + 2294991. * CHq3R[0][0] / LambdaNP2
                - 159242. * CHD / LambdaNP2
                + 908130. * CHW / LambdaNP2
                - 282574. * CHWB / LambdaNP2
                + 245406. * CDHW / LambdaNP2
                - 3.259 * delta_GF
                - 2.047 * deltaMwd6()
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::muWH()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eWHint + eWHpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::muWHpT250(const double sqrt_s) const
{
    double mu = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 13.0) {

        C1 = 0.0119;

        mu +=
                +121150. * (1. + eWH_1314_Hbox) * CHbox / LambdaNP2
                + 1095782. * (1. + eWH_1314_HW) * CHW / LambdaNP2
                + 1870485. * (1. + eWH_1314_DHW) * CDHW / LambdaNP2
                + 11951748. * (1. + eWH_1314_HQ3_11) * CHq3R[0][0] / LambdaNP2
                + 540010. * (1. + eWH_1314_HQ3_11) * CHq3R[1][1] / LambdaNP2
                + cAsch * (-160282. * (1. + eWH_1314_HD) * CHD / LambdaNP2
                - 285105. * (1. + eWH_1314_HWB) * CHWB / LambdaNP2
                - 3.287 * (1. + eWH_1314_DeltaGF) * delta_GF
                - 1.986 * deltaMwd6())
                + cWsch * (-30279.5 * (1. + eWH_1314_HD) * CHD / LambdaNP2
                + 0. * (1. + eWH_1314_HWB) * CHWB / LambdaNP2
                - 2. * (1. + eWH_1314_DeltaGF) * delta_GF)
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::muWHpT250()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eWHint + eWHpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::muZH(const double sqrt_s) const
{
    double mu = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 1.96) {

        C1 = 0.0; // N.A.

        mu +=
                +121186. * (1. + eZH_2_Hbox) * CHbox / LambdaNP2
                + 79191.5 * (1. + eZH_2_HB) * CHB / LambdaNP2
                + 712325. * (1. + eZH_2_HW) * CHW / LambdaNP2
                + 9992.07 * (1. + eZH_2_DHB) * CDHB / LambdaNP2
                + 131146. * (1. + eZH_2_DHW) * CDHW / LambdaNP2
                - 813859. * (1. + eZH_2_HQ1_11) * CHq1R[0][0] / LambdaNP2
                + 3350.92 * (1. + eZH_2_HQ1_11) * CHq1R[1][1] / LambdaNP2
                + 527754. * (1. + eZH_2_Hu_11) * CHuR[0][0] / LambdaNP2
                + 1274.21 * (1. + eZH_2_Hu_11) * CHuR[1][1] / LambdaNP2
                - 67806.5 * (1. + eZH_2_Hd_11) * CHdR[0][0] / LambdaNP2
                - 1130.86 * (1. + eZH_2_Hd_11) * CHdR[1][1] / LambdaNP2
                + 1558454. * (1. + eZH_2_HQ3_11) * CHq3R[0][0] / LambdaNP2
                + 9076.74 * (1. + eZH_2_HQ3_11) * CHq3R[1][1] / LambdaNP2
                + cAsch * (-16406.7 * (1. + eZH_2_HD) * CHD / LambdaNP2
                + 189539. * (1. + eZH_2_HWB) * CHWB / LambdaNP2
                - 2.54 * (1. + eZH_2_DeltaGF) * delta_GF)
                + cWsch * (+38221.8 * (1. + eZH_2_HD) * CHD / LambdaNP2
                + 309296. * (1. + eZH_2_HWB) * CHWB / LambdaNP2
                - 2. * (1. + eZH_2_DeltaGF) * delta_GF)
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 7.0) {

        C1 = 0.0123;

        mu +=
                +121226. * (1. + eZH_78_Hbox) * CHbox / LambdaNP2
                + 87099.3 * (1. + eZH_78_HB) * CHB / LambdaNP2
                + 717825. * (1. + eZH_78_HW) * CHW / LambdaNP2
                + 17433.4 * (1. + eZH_78_DHB) * CDHB / LambdaNP2
                + 153216. * (1. + eZH_78_DHW) * CDHW / LambdaNP2
                - 213136. * (1. + eZH_78_HQ1_11) * CHq1R[0][0] / LambdaNP2
                + 30259.1 * (1. + eZH_78_HQ1_11) * CHq1R[1][1] / LambdaNP2
                + 405194. * (1. + eZH_78_Hu_11) * CHuR[0][0] / LambdaNP2
                + 16467.8 * (1. + eZH_78_Hu_11) * CHuR[1][1] / LambdaNP2
                - 127014. * (1. + eZH_78_Hd_11) * CHdR[0][0] / LambdaNP2
                - 12241.3 * (1. + eZH_78_Hd_11) * CHdR[1][1] / LambdaNP2
                + 1608269. * (1. + eZH_78_HQ3_11) * CHq3R[0][0] / LambdaNP2
                + 104261. * (1. + eZH_78_HQ3_11) * CHq3R[1][1] / LambdaNP2
                + cAsch * (-15321.2 * (1. + eZH_78_HD) * CHD / LambdaNP2
                + 203123. * (1. + eZH_78_HWB) * CHWB / LambdaNP2
                - 2.506 * (1. + eZH_78_DeltaGF) * delta_GF)
                + cWsch * (+35707.6 * (1. + eZH_78_HD) * CHD / LambdaNP2
                + 315273. * (1. + eZH_78_HWB) * CHWB / LambdaNP2
                - 1.999 * (1. + eZH_78_DeltaGF) * delta_GF)
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 8.0) {

        C1 = 0.0122;

        mu +=
                +121277. * (1. + eZH_78_Hbox) * CHbox / LambdaNP2
                + 87409.1 * (1. + eZH_78_HB) * CHB / LambdaNP2
                + 721014. * (1. + eZH_78_HW) * CHW / LambdaNP2
                + 18357.2 * (1. + eZH_78_DHB) * CDHB / LambdaNP2
                + 158294. * (1. + eZH_78_DHW) * CDHW / LambdaNP2
                - 211101. * (1. + eZH_78_HQ1_11) * CHq1R[0][0] / LambdaNP2
                + 32881.7 * (1. + eZH_78_HQ1_11) * CHq1R[1][1] / LambdaNP2
                + 409966. * (1. + eZH_78_Hu_11) * CHuR[0][0] / LambdaNP2
                + 18389.4 * (1. + eZH_78_Hu_11) * CHuR[1][1] / LambdaNP2
                - 129402. * (1. + eZH_78_Hd_11) * CHdR[0][0] / LambdaNP2
                - 13507. * (1. + eZH_78_Hd_11) * CHdR[1][1] / LambdaNP2
                + 1632382. * (1. + eZH_78_HQ3_11) * CHq3R[0][0] / LambdaNP2
                + 115538. * (1. + eZH_78_HQ3_11) * CHq3R[1][1] / LambdaNP2
                + cAsch * (-15333.2 * (1. + eZH_78_HD) * CHD / LambdaNP2
                + 204451. * (1. + eZH_78_HWB) * CHWB / LambdaNP2
                - 2.506 * (1. + eZH_78_DeltaGF) * delta_GF)
                + cWsch * (+35736.8 * (1. + eZH_78_HD) * CHD / LambdaNP2
                + 316485. * (1. + eZH_78_HWB) * CHWB / LambdaNP2
                - 2. * (1. + eZH_78_DeltaGF) * delta_GF)
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 13.0) {

        C1 = 0.0119;

        mu +=
                +121234. * (1. + eZH_1314_Hbox) * CHbox / LambdaNP2
                + 88512.4 * (1. + eZH_1314_HB) * CHB / LambdaNP2
                + 728790. * (1. + eZH_1314_HW) * CHW / LambdaNP2
                + 21680.9 * (1. + eZH_1314_DHB) * CDHB / LambdaNP2
                + 175494. * (1. + eZH_1314_DHW) * CDHW / LambdaNP2
                - 196945. * (1. + eZH_1314_HQ1_11) * CHq1R[0][0] / LambdaNP2
                + 43331.9 * (1. + eZH_1314_HQ1_11) * CHq1R[1][1] / LambdaNP2
                + 422018. * (1. + eZH_1314_Hu_11) * CHuR[0][0] / LambdaNP2
                + 26503. * (1. + eZH_1314_Hu_11) * CHuR[1][1] / LambdaNP2
                - 136921. * (1. + eZH_1314_Hd_11) * CHdR[0][0] / LambdaNP2
                - 18730.5 * (1. + eZH_1314_Hd_11) * CHdR[1][1] / LambdaNP2
                + 1700150. * (1. + eZH_1314_HQ3_11) * CHq3R[0][0] / LambdaNP2
                + 162456. * (1. + eZH_1314_HQ3_11) * CHq3R[1][1] / LambdaNP2
                + cAsch * (-15274.7 * (1. + eZH_1314_HD) * CHD / LambdaNP2
                + 207822. * (1. + eZH_1314_HWB) * CHWB / LambdaNP2
                - 2.502 * (1. + eZH_1314_DeltaGF) * delta_GF)
                + cWsch * (+35605.2 * (1. + eZH_1314_HD) * CHD / LambdaNP2
                + 319361. * (1. + eZH_1314_HWB) * CHWB / LambdaNP2
                - 1.999 * (1. + eZH_1314_DeltaGF) * delta_GF)
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 14.0) {

        // Only Alpha scheme

        C1 = 0.0118;

        mu +=
                +121216. * (1. + eZH_1314_Hbox) * CHbox / LambdaNP2
                // -148862. * (1. + eZH_1314_HQ1_11 ) * CHq1R[0][0] / LambdaNP2
                // +451139. * (1. + eZH_1314_Hu_11 ) * CHuR[0][0] / LambdaNP2
                // -157486. * (1. + eZH_1314_Hd_11 ) * CHdR[0][0] / LambdaNP2
                // +1879522. * (1. + eZH_1314_HQ3_11 ) * CHq3R[0][0] / LambdaNP2
                - 192919. * (1. + eZH_1314_HQ1_11) * CHq1R[0][0] / LambdaNP2
                + 45027.7 * (1. + eZH_1314_HQ1_11) * CHq1R[1][1] / LambdaNP2
                + 423160. * (1. + eZH_1314_Hu_11) * CHuR[0][0] / LambdaNP2
                + 27887. * (1. + eZH_1314_Hu_11) * CHuR[1][1] / LambdaNP2
                - 137883. * (1. + eZH_1314_Hd_11) * CHdR[0][0] / LambdaNP2
                - 19603.3 * (1. + eZH_1314_Hd_11) * CHdR[1][1] / LambdaNP2
                + 1709121. * (1. + eZH_1314_HQ3_11) * CHq3R[0][0] / LambdaNP2
                + 170449. * (1. + eZH_1314_HQ3_11) * CHq3R[1][1] / LambdaNP2
                - 15263.4 * (1. + eZH_1314_HD) * CHD / LambdaNP2
                + 88565.4 * (1. + eZH_1314_HB) * CHB / LambdaNP2
                + 729690. * (1. + eZH_1314_HW) * CHW / LambdaNP2
                + 208170. * (1. + eZH_1314_HWB) * CHWB / LambdaNP2
                + 22093. * (1. + eZH_1314_DHB) * CDHB / LambdaNP2
                + 177891. * (1. + eZH_1314_DHW) * CDHW / LambdaNP2
                - 2.504 * (1. + eZH_1314_DeltaGF) * delta_GF
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 27.0) {

        // Only Alpha scheme

        C1 = 0.0116; // From arXiv: 1902.00134

        mu +=
                +121206. * CHbox / LambdaNP2
                - 101865. * CHq1R[0][0] / LambdaNP2
                + 468029. * CHuR[0][0] / LambdaNP2
                - 173377. * CHdR[0][0] / LambdaNP2
                + 2002478. * CHq3R[0][0] / LambdaNP2
                - 15486.3 * CHD / LambdaNP2
                + 89958. * CHB / LambdaNP2
                + 735013. * CHW / LambdaNP2
                + 211026. * CHWB / LambdaNP2
                + 25604. * CDHB / LambdaNP2
                + 196710. * CDHW / LambdaNP2
                - 2.505 * delta_GF
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 100.0) {

        // Only Alpha scheme

        C1 = 0.0; // N.A.

        mu +=
                +121269. * CHbox / LambdaNP2
                + 90.68 * CHq1R[0][0] / LambdaNP2
                + 484275. * CHuR[0][0] / LambdaNP2
                - 197878. * CHdR[0][0] / LambdaNP2
                + 2175601. * CHq3R[0][0] / LambdaNP2
                - 14992.4 * CHD / LambdaNP2
                + 91707.3 * CHB / LambdaNP2
                + 741805. * CHW / LambdaNP2
                + 215319. * CHWB / LambdaNP2
                + 31435.6 * CDHB / LambdaNP2
                + 223843. * CDHW / LambdaNP2
                - 2.504 * delta_GF
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::muZH()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eZHint + eZHpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::muZHpT250(const double sqrt_s) const
{
    double mu = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 13.0) {

        C1 = 0.0119;

        mu +=
                +121102. * (1. + eZH_1314_Hbox) * CHbox / LambdaNP2
                + 103334. * (1. + eZH_1314_HB) * CHB / LambdaNP2
                + 968778. * (1. + eZH_1314_HW) * CHW / LambdaNP2
                + 295029. * (1. + eZH_1314_DHB) * CDHB / LambdaNP2
                + 1652242. * (1. + eZH_1314_DHW) * CDHW / LambdaNP2
                - 1507566. * (1. + eZH_1314_HQ1_11) * CHq1R[0][0] / LambdaNP2
                + 165375. * (1. + eZH_1314_HQ1_11) * CHq1R[1][1] / LambdaNP2
                + 2712770. * (1. + eZH_1314_Hu_11) * CHuR[0][0] / LambdaNP2
                + 83533. * (1. + eZH_1314_Hu_11) * CHuR[1][1] / LambdaNP2
                - 836015. * (1. + eZH_1314_Hd_11) * CHdR[0][0] / LambdaNP2
                - 64306.7 * (1. + eZH_1314_Hd_11) * CHdR[1][1] / LambdaNP2
                + 10690175. * (1. + eZH_1314_HQ3_11) * CHq3R[0][0] / LambdaNP2
                + 540904. * (1. + eZH_1314_HQ3_11) * CHq3R[1][1] / LambdaNP2
                + cAsch * (-15339.3 * (1. + eZH_1314_HD) * CHD / LambdaNP2
                + 286518. * (1. + eZH_1314_HWB) * CHWB / LambdaNP2
                - 2.508 * (1. + eZH_1314_DeltaGF) * delta_GF)
                + cWsch * (+35828.1 * (1. + eZH_1314_HD) * CHD / LambdaNP2
                + 398987. * (1. + eZH_1314_HWB) * CHWB / LambdaNP2
                - 2. * (1. + eZH_1314_DeltaGF) * delta_GF)
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::muZHpT250()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eZHint + eZHpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::mueeZH(const double sqrt_s) const
{

    // Only Alpha scheme

    double mu = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 0.240) {

        C1 = 0.017;

        mu +=
                +121263. * CHbox / LambdaNP2
                + 898682. * CHl1R[0][0] / LambdaNP2
                - 767820. * CHeR[0][0] / LambdaNP2
                + 898682. * CHl3R[0][0] / LambdaNP2
                - 6046.36 * CHD / LambdaNP2
                + 122439. * CHB / LambdaNP2
                + 540057. * CHW / LambdaNP2
                + 231063. * CHWB / LambdaNP2
                + 17593.2 * CDHB / LambdaNP2
                + 53409.5 * CDHW / LambdaNP2
                - 2.2 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 4.775 * deltaMz()
                - 3.071 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.250) {

        C1 = 0.015;

        mu +=
                +121263. * CHbox / LambdaNP2
                + 975101. * CHl1R[0][0] / LambdaNP2
                - 833750. * CHeR[0][0] / LambdaNP2
                + 975101. * CHl3R[0][0] / LambdaNP2
                - 6046.36 * CHD / LambdaNP2
                + 128443. * CHB / LambdaNP2
                + 568273. * CHW / LambdaNP2
                + 244206. * CHWB / LambdaNP2
                + 19818.6 * CDHB / LambdaNP2
                + 60127.6 * CDHW / LambdaNP2
                - 2.2 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 5.219 * deltaMz()
                - 2.27 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.350) {

        C1 = 0.0057;

        mu +=
                +121283. * CHbox / LambdaNP2
                + 1911340. * CHl1R[0][0] / LambdaNP2
                - 1640958. * CHeR[0][0] / LambdaNP2
                + 1911340. * CHl3R[0][0] / LambdaNP2
                - 6009.52 * CHD / LambdaNP2
                + 173183. * CHB / LambdaNP2
                + 785843. * CHW / LambdaNP2
                + 344494. * CHWB / LambdaNP2
                + 59158.7 * CDHB / LambdaNP2
                + 167954. * CDHW / LambdaNP2
                - 2.201 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 5.396 * deltaMz()
                - 0.729 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.365) {

        C1 = 0.0057; // Use same as 350 GeV

        mu +=
                +121243. * CHbox / LambdaNP2
                + 2078482. * CHl1R[0][0] / LambdaNP2
                - 1785085. * CHeR[0][0] / LambdaNP2
                + 2078482. * CHl3R[0][0] / LambdaNP2
                - 6010.65 * CHD / LambdaNP2
                + 178173. * CHB / LambdaNP2
                + 809806. * CHW / LambdaNP2
                + 355487. * CHWB / LambdaNP2
                + 67662.7 * CDHB / LambdaNP2
                + 190194. * CDHW / LambdaNP2
                - 2.201 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 5.348 * deltaMz()
                - 0.664 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.380) {

        C1 = 0.0057; // Use same as 350 GeV

        mu +=
                +121281. * CHbox / LambdaNP2
                + 2253013. * CHl1R[0][0] / LambdaNP2
                - 1934557. * CHeR[0][0] / LambdaNP2
                + 2253013. * CHl3R[0][0] / LambdaNP2
                - 6026.37 * CHD / LambdaNP2
                + 182674. * CHB / LambdaNP2
                + 832109. * CHW / LambdaNP2
                + 365819. * CHWB / LambdaNP2
                + 76742. * CDHB / LambdaNP2
                + 214030. * CDHW / LambdaNP2
                - 2.202 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 5.301 * deltaMz()
                - 0.609 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.500) {

        C1 = 0.00099;

        mu +=
                +121264. * CHbox / LambdaNP2
                + 3900384. * CHl1R[0][0] / LambdaNP2
                - 3350136. * CHeR[0][0] / LambdaNP2
                + 3900384. * CHl3R[0][0] / LambdaNP2
                - 6019.22 * CHD / LambdaNP2
                + 209229. * CHB / LambdaNP2
                + 959942. * CHW / LambdaNP2
                + 425112. * CHWB / LambdaNP2
                + 169841. * CDHB / LambdaNP2
                + 455437. * CDHW / LambdaNP2
                - 2.202 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 5. * deltaMz()
                - 0.351 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 1.0) {

        C1 = -0.0012;

        mu +=
                +121274. * CHbox / LambdaNP2
                + 15601820. * CHl1R[0][0] / LambdaNP2
                - 13395670. * CHeR[0][0] / LambdaNP2
                + 15601820. * CHl3R[0][0] / LambdaNP2
                - 6040.16 * CHD / LambdaNP2
                + 243960. * CHB / LambdaNP2
                + 1128805. * CHW / LambdaNP2
                + 503138. * CHWB / LambdaNP2
                + 899357. * CDHB / LambdaNP2
                + 2321619. * CDHW / LambdaNP2
                - 2.202 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 4.574 * deltaMz()
                - 0.092 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 1.4) {

        C1 = -0.0011;

        mu +=
                +121283. * CHbox / LambdaNP2
                + 30579278. * CHl1R[0][0] / LambdaNP2
                - 26253064. * CHeR[0][0] / LambdaNP2
                + 30579278. * CHl3R[0][0] / LambdaNP2
                - 6010.77 * CHD / LambdaNP2
                + 250804. * CHB / LambdaNP2
                + 1161208. * CHW / LambdaNP2
                + 518040. * CHWB / LambdaNP2
                + 1848758. * CDHB / LambdaNP2
                + 4747422. * CDHW / LambdaNP2
                - 2.203 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 4.491 * deltaMz()
                - 0.047 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 1.5) {

        C1 = -0.0011; // Use the same as 1400 GeV

        mu +=
                +121262. * CHbox / LambdaNP2
                + 35102329. * CHl1R[0][0] / LambdaNP2
                - 30135878. * CHeR[0][0] / LambdaNP2
                + 35102329. * CHl3R[0][0] / LambdaNP2
                - 6034.22 * CHD / LambdaNP2
                + 251576. * CHB / LambdaNP2
                + 1165634. * CHW / LambdaNP2
                + 519954. * CHWB / LambdaNP2
                + 2132554. * CDHB / LambdaNP2
                + 5481906. * CDHW / LambdaNP2
                - 2.203 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 4.479 * deltaMz()
                - 0.041 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 3.0) {

        C1 = -0.00054;

        mu +=
                +121279. * CHbox / LambdaNP2
                + 140413697. * CHl1R[0][0] / LambdaNP2
                - 120540988. * CHeR[0][0] / LambdaNP2
                + 140413697. * CHl3R[0][0] / LambdaNP2
                - 6012.61 * CHD / LambdaNP2
                + 257222. * CHB / LambdaNP2
                + 1188444. * CHW / LambdaNP2
                + 530503. * CHWB / LambdaNP2
                + 8839419. * CDHB / LambdaNP2
                + 22583370. * CDHW / LambdaNP2
                - 2.202 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-0.2 * deltaaMZ()
                + 2.2 * deltaGmu()
                + 4.42 * deltaMz()
                - 0.01 * deltaMh());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZH()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eeeZHint + eeeZHpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::mueeZllH(const double sqrt_s) const
{

    //  The signal strength eeZH
    double mu = mueeZH(sqrt_s);

    //  The (relative) linear correction to the Z>ll BR
    double deltaBRratio;

    deltaBRratio = deltaGamma_Zf(leptons[ELECTRON])
            + deltaGamma_Zf(leptons[MU]);

    deltaBRratio = deltaBRratio /
            (trueSM.GammaZ(leptons[ELECTRON]) + trueSM.GammaZ(leptons[MU]));

    deltaBRratio = deltaBRratio - deltaGamma_Z() / trueSM.Gamma_Z();

    return mu + deltaBRratio;
}

double NPSMEFTd6General::mueeZqqH(const double sqrt_s) const
{

    //  The signal strength eeZH
    double mu = mueeZH(sqrt_s);

    //  The (relative) linear correction to the Z>qq BR
    double deltaBRratio;

    deltaBRratio = deltaGamma_Zf(quarks[UP])
            + deltaGamma_Zf(quarks[DOWN])
            + deltaGamma_Zf(quarks[CHARM])
            + deltaGamma_Zf(quarks[STRANGE])
            + deltaGamma_Zf(quarks[BOTTOM]);

    deltaBRratio = deltaBRratio /
            (trueSM.GammaZ(quarks[UP]) + trueSM.GammaZ(quarks[DOWN])
            + trueSM.GammaZ(quarks[CHARM]) + trueSM.GammaZ(quarks[STRANGE])
            + trueSM.GammaZ(quarks[BOTTOM]));

    deltaBRratio = deltaBRratio - deltaGamma_Z() / trueSM.Gamma_Z();

    return mu + deltaBRratio;
}

double NPSMEFTd6General::mueeZHPol(const double sqrt_s, const double Pol_em, const double Pol_ep) const
{

    // Only Alpha scheme

    double mu = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 0.240) {

        C1 = 0.017;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121260. * CHbox / LambdaNP2
                    + 117191. * CHl1R[0][0] / LambdaNP2
                    - 1681596. * CHeR[0][0] / LambdaNP2
                    + 117191. * CHl3R[0][0] / LambdaNP2
                    + 74555.1 * CHD / LambdaNP2
                    + 528105. * CHB / LambdaNP2
                    + 134403. * CHW / LambdaNP2
                    + 872560. * CHWB / LambdaNP2
                    + 137571. * CDHB / LambdaNP2
                    - 12321.5 * CDHW / LambdaNP2
                    + 0.459 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    - 0.544 * deltaMz()
                    - 3.071 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121254. * CHbox / LambdaNP2
                    + 1495015. * CHl1R[0][0] / LambdaNP2
                    - 76567.2 * CHeR[0][0] / LambdaNP2
                    + 1495015. * CHl3R[0][0] / LambdaNP2
                    - 67582.1 * CHD / LambdaNP2
                    - 187104. * CHB / LambdaNP2
                    + 849552. * CHW / LambdaNP2
                    - 258537. * CHWB / LambdaNP2
                    - 73970.1 * CDHB / LambdaNP2
                    + 103582. * CDHW / LambdaNP2
                    - 4.23 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 8.834 * deltaMz()
                    - 3.071 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121256. * CHbox / LambdaNP2
                    + 204529. * CHl1R[0][0] / LambdaNP2
                    - 1578998. * CHeR[0][0] / LambdaNP2
                    + 204529. * CHl3R[0][0] / LambdaNP2
                    + 65548.7 * CHD / LambdaNP2
                    + 482729. * CHB / LambdaNP2
                    + 179733. * CHW / LambdaNP2
                    + 800870. * CHWB / LambdaNP2
                    + 124170. * CDHB / LambdaNP2
                    - 5016.48 * CDHW / LambdaNP2
                    + 0.162 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    + 0.05 * deltaMz()
                    - 3.071 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121264. * CHbox / LambdaNP2
                    + 1442776. * CHl1R[0][0] / LambdaNP2
                    - 137405. * CHeR[0][0] / LambdaNP2
                    + 1442776. * CHl3R[0][0] / LambdaNP2
                    - 62167.6 * CHD / LambdaNP2
                    - 159988. * CHB / LambdaNP2
                    + 822448. * CHW / LambdaNP2
                    - 215639. * CHWB / LambdaNP2
                    - 65950.1 * CDHB / LambdaNP2
                    + 99206.1 * CDHW / LambdaNP2
                    - 4.052 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 8.479 * deltaMz()
                    - 3.071 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else if (sqrt_s == 0.250) {

        C1 = 0.015;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121264. * CHbox / LambdaNP2
                    + 127210. * CHl1R[0][0] / LambdaNP2
                    - 1824910. * CHeR[0][0] / LambdaNP2
                    + 127210. * CHl3R[0][0] / LambdaNP2
                    + 74597.1 * CHD / LambdaNP2
                    + 560319. * CHB / LambdaNP2
                    + 136129. * CHW / LambdaNP2
                    + 902676. * CHWB / LambdaNP2
                    + 154358. * CDHB / LambdaNP2
                    - 13612.9 * CDHW / LambdaNP2
                    + 0.459 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    - 0.1 * deltaMz()
                    - 2.27 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121257. * CHbox / LambdaNP2
                    + 1622228. * CHl1R[0][0] / LambdaNP2
                    - 83107. * CHeR[0][0] / LambdaNP2
                    + 1622228. * CHl3R[0][0] / LambdaNP2
                    - 67554.3 * CHD / LambdaNP2
                    - 201409. * CHB / LambdaNP2
                    + 898116. * CHW / LambdaNP2
                    - 258306. * CHWB / LambdaNP2
                    - 82898. * CDHB / LambdaNP2
                    + 116421. * CDHW / LambdaNP2
                    - 4.23 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 9.279 * deltaMz()
                    - 2.27 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121309. * CHbox / LambdaNP2
                    + 221930. * CHl1R[0][0] / LambdaNP2
                    - 1714047. * CHeR[0][0] / LambdaNP2
                    + 221930. * CHl3R[0][0] / LambdaNP2
                    + 65599.6 * CHD / LambdaNP2
                    + 512136. * CHB / LambdaNP2
                    + 184424. * CHW / LambdaNP2
                    + 829145. * CHWB / LambdaNP2
                    + 139369. * CDHB / LambdaNP2
                    - 5351.17 * CDHW / LambdaNP2
                    + 0.162 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    + 0.494 * deltaMz()
                    - 2.27 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121269. * CHbox / LambdaNP2
                    + 1565559. * CHl1R[0][0] / LambdaNP2
                    - 148908. * CHeR[0][0] / LambdaNP2
                    + 1565559. * CHl3R[0][0] / LambdaNP2
                    - 62170. * CHD / LambdaNP2
                    - 172540. * CHB / LambdaNP2
                    + 869218. * CHW / LambdaNP2
                    - 214299. * CHWB / LambdaNP2
                    - 73929.8 * CDHB / LambdaNP2
                    + 111494. * CDHW / LambdaNP2
                    - 4.053 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 8.923 * deltaMz()
                    - 2.27 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else if (sqrt_s == 0.350) {

        C1 = 0.0057;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121274. * CHbox / LambdaNP2
                    + 249309. * CHl1R[0][0] / LambdaNP2
                    - 3576996. * CHeR[0][0] / LambdaNP2
                    + 249309. * CHl3R[0][0] / LambdaNP2
                    + 74596.5 * CHD / LambdaNP2
                    + 812491. * CHB / LambdaNP2
                    + 146212. * CHW / LambdaNP2
                    + 1135161. * CHWB / LambdaNP2
                    + 395085. * CDHB / LambdaNP2
                    - 16140.8 * CDHW / LambdaNP2
                    + 0.458 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    + 0.077 * deltaMz()
                    - 0.729 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121289. * CHbox / LambdaNP2
                    + 3179548. * CHl1R[0][0] / LambdaNP2
                    - 163347. * CHeR[0][0] / LambdaNP2
                    + 3179548. * CHl3R[0][0] / LambdaNP2
                    - 67524.8 * CHD / LambdaNP2
                    - 314653. * CHB / LambdaNP2
                    + 1273817. * CHW / LambdaNP2
                    - 258947. * CHWB / LambdaNP2
                    - 197137. * CDHB / LambdaNP2
                    + 308384. * CDHW / LambdaNP2
                    - 4.231 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 9.456 * deltaMz()
                    - 0.729 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121304. * CHbox / LambdaNP2
                    + 434952. * CHl1R[0][0] / LambdaNP2
                    - 3360980. * CHeR[0][0] / LambdaNP2
                    + 434952. * CHl3R[0][0] / LambdaNP2
                    + 65624.7 * CHD / LambdaNP2
                    + 741142. * CHB / LambdaNP2
                    + 217654. * CHW / LambdaNP2
                    + 1046799. * CHWB / LambdaNP2
                    + 357606. * CDHB / LambdaNP2
                    + 4440.1 * CDHW / LambdaNP2
                    + 0.161 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    + 0.671 * deltaMz()
                    - 0.729 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121259. * CHbox / LambdaNP2
                    + 3068356. * CHl1R[0][0] / LambdaNP2
                    - 292427. * CHeR[0][0] / LambdaNP2
                    + 3068356. * CHl3R[0][0] / LambdaNP2
                    - 62160.7 * CHD / LambdaNP2
                    - 271962. * CHB / LambdaNP2
                    + 1231171. * CHW / LambdaNP2
                    - 206112. * CHWB / LambdaNP2
                    - 174718. * CDHB / LambdaNP2
                    + 296046. * CDHW / LambdaNP2
                    - 4.053 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 9.1 * deltaMz()
                    - 0.729 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else if (sqrt_s == 0.365) {

        C1 = 0.0057; // Use same as 350 GeV

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121270. * CHbox / LambdaNP2
                    + 271098. * CHl1R[0][0] / LambdaNP2
                    - 3890169. * CHeR[0][0] / LambdaNP2
                    + 271098. * CHl3R[0][0] / LambdaNP2
                    + 74554. * CHD / LambdaNP2
                    + 840573. * CHB / LambdaNP2
                    + 147108. * CHW / LambdaNP2
                    + 1160947. * CHWB / LambdaNP2
                    + 442125. * CDHB / LambdaNP2
                    - 15038.8 * CDHW / LambdaNP2
                    + 0.459 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    + 0.029 * deltaMz()
                    - 0.664 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121238. * CHbox / LambdaNP2
                    + 3457848. * CHl1R[0][0] / LambdaNP2
                    - 177584. * CHeR[0][0] / LambdaNP2
                    + 3457848. * CHl3R[0][0] / LambdaNP2
                    - 67578.3 * CHD / LambdaNP2
                    - 327391. * CHB / LambdaNP2
                    + 1315671. * CHW / LambdaNP2
                    - 259142. * CHWB / LambdaNP2
                    - 218241. * CDHB / LambdaNP2
                    + 346804. * CDHW / LambdaNP2
                    - 4.231 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 9.408 * deltaMz()
                    - 0.664 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121251. * CHbox / LambdaNP2
                    + 472985. * CHl1R[0][0] / LambdaNP2
                    - 3655203. * CHeR[0][0] / LambdaNP2
                    + 472985. * CHl3R[0][0] / LambdaNP2
                    + 65559.4 * CHD / LambdaNP2
                    + 766585. * CHB / LambdaNP2
                    + 221202. * CHW / LambdaNP2
                    + 1070933. * CHWB / LambdaNP2
                    + 400293. * CDHB / LambdaNP2
                    + 7914.02 * CDHW / LambdaNP2
                    + 0.161 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    + 0.623 * deltaMz()
                    - 0.664 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121238. * CHbox / LambdaNP2
                    + 3336984. * CHl1R[0][0] / LambdaNP2
                    - 317944. * CHeR[0][0] / LambdaNP2
                    + 3336984. * CHl3R[0][0] / LambdaNP2
                    - 62188.9 * CHD / LambdaNP2
                    - 283174. * CHB / LambdaNP2
                    + 1271272. * CHW / LambdaNP2
                    - 205330. * CHWB / LambdaNP2
                    - 193153. * CDHB / LambdaNP2
                    + 333078. * CDHW / LambdaNP2
                    - 4.053 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 9.052 * deltaMz()
                    - 0.664 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else if (sqrt_s == 0.380) {

        C1 = 0.0057; // Use same as 350 GeV

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121228. * CHbox / LambdaNP2
                    + 293860. * CHl1R[0][0] / LambdaNP2
                    - 4216491. * CHeR[0][0] / LambdaNP2
                    + 293860. * CHl3R[0][0] / LambdaNP2
                    + 74561.4 * CHD / LambdaNP2
                    + 866754. * CHB / LambdaNP2
                    + 147982. * CHW / LambdaNP2
                    + 1184912. * CHWB / LambdaNP2
                    + 492018. * CDHB / LambdaNP2
                    - 13596.5 * CDHW / LambdaNP2
                    + 0.459 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    - 0.018 * deltaMz()
                    - 0.609 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121226. * CHbox / LambdaNP2
                    + 3747707. * CHl1R[0][0] / LambdaNP2
                    - 192650. * CHeR[0][0] / LambdaNP2
                    + 3747707. * CHl3R[0][0] / LambdaNP2
                    - 67608.3 * CHD / LambdaNP2
                    - 339193. * CHB / LambdaNP2
                    + 1354040. * CHW / LambdaNP2
                    - 259321. * CHWB / LambdaNP2
                    - 240311. * CDHB / LambdaNP2
                    + 387710. * CDHW / LambdaNP2
                    - 4.23 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 9.361 * deltaMz()
                    - 0.609 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121325. * CHbox / LambdaNP2
                    + 512707. * CHl1R[0][0] / LambdaNP2
                    - 3961665. * CHeR[0][0] / LambdaNP2
                    + 512707. * CHl3R[0][0] / LambdaNP2
                    + 65601.7 * CHD / LambdaNP2
                    + 790306. * CHB / LambdaNP2
                    + 224394. * CHW / LambdaNP2
                    + 1093297. * CHWB / LambdaNP2
                    + 445530. * CDHB / LambdaNP2
                    + 11860.4 * CDHW / LambdaNP2
                    + 0.161 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    + 0.576 * deltaMz()
                    - 0.609 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121273. * CHbox / LambdaNP2
                    + 3617032. * CHl1R[0][0] / LambdaNP2
                    - 344629. * CHeR[0][0] / LambdaNP2
                    + 3617032. * CHl3R[0][0] / LambdaNP2
                    - 62148.3 * CHD / LambdaNP2
                    - 293491. * CHB / LambdaNP2
                    + 1308558. * CHW / LambdaNP2
                    - 204594. * CHWB / LambdaNP2
                    - 212514. * CDHB / LambdaNP2
                    + 372554. * CDHW / LambdaNP2
                    - 4.053 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 9.005 * deltaMz()
                    - 0.609 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else if (sqrt_s == 0.500) {

        C1 = 0.00099;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121268. * CHbox / LambdaNP2
                    + 508715. * CHl1R[0][0] / LambdaNP2
                    - 7299333. * CHeR[0][0] / LambdaNP2
                    + 508715. * CHl3R[0][0] / LambdaNP2
                    + 74603.6 * CHD / LambdaNP2
                    + 1018069. * CHB / LambdaNP2
                    + 151257. * CHW / LambdaNP2
                    + 1323862. * CHWB / LambdaNP2
                    + 985604. * CDHB / LambdaNP2
                    + 8362.16 * CDHW / LambdaNP2
                    + 0.458 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    - 0.319 * deltaMz()
                    - 0.351 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121273. * CHbox / LambdaNP2
                    + 6488707. * CHl1R[0][0] / LambdaNP2
                    - 332950. * CHeR[0][0] / LambdaNP2
                    + 6488707. * CHl3R[0][0] / LambdaNP2
                    - 67530.9 * CHD / LambdaNP2
                    - 408101. * CHB / LambdaNP2
                    + 1576859. * CHW / LambdaNP2
                    - 260777. * CHWB / LambdaNP2
                    - 452746. * CDHB / LambdaNP2
                    + 796569. * CDHW / LambdaNP2
                    - 4.231 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 9.06 * deltaMz()
                    - 0.351 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121280. * CHbox / LambdaNP2
                    + 887632. * CHl1R[0][0] / LambdaNP2
                    - 6858533. * CHeR[0][0] / LambdaNP2
                    + 887632. * CHl3R[0][0] / LambdaNP2
                    + 65606.6 * CHD / LambdaNP2
                    + 927745. * CHB / LambdaNP2
                    + 241619. * CHW / LambdaNP2
                    + 1223535. * CHWB / LambdaNP2
                    + 894441. * CDHB / LambdaNP2
                    + 58317. * CDHW / LambdaNP2
                    + 0.161 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    + 0.275 * deltaMz()
                    - 0.351 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121268. * CHbox / LambdaNP2
                    + 6262095. * CHl1R[0][0] / LambdaNP2
                    - 597046. * CHeR[0][0] / LambdaNP2
                    + 6262095. * CHl3R[0][0] / LambdaNP2
                    - 62148.8 * CHD / LambdaNP2
                    - 353914. * CHB / LambdaNP2
                    + 1522841. * CHW / LambdaNP2
                    - 200684. * CHWB / LambdaNP2
                    - 398214. * CDHB / LambdaNP2
                    + 766821. * CDHW / LambdaNP2
                    - 4.054 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 8.704 * deltaMz()
                    - 0.351 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else if (sqrt_s == 1.0) {

        C1 = -0.0012;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121236. * CHbox / LambdaNP2
                    + 2034785. * CHl1R[0][0] / LambdaNP2
                    - 29195703. * CHeR[0][0] / LambdaNP2
                    + 2034785. * CHl3R[0][0] / LambdaNP2
                    + 74612.7 * CHD / LambdaNP2
                    + 1218284. * CHB / LambdaNP2
                    + 154779. * CHW / LambdaNP2
                    + 1507673. * CHWB / LambdaNP2
                    + 4701988. * CDHB / LambdaNP2
                    + 239404. * CDHW / LambdaNP2
                    + 0.458 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    - 0.745 * deltaMz()
                    - 0.092 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121298. * CHbox / LambdaNP2
                    + 25954994. * CHl1R[0][0] / LambdaNP2
                    - 1333713. * CHeR[0][0] / LambdaNP2
                    + 25954994. * CHl3R[0][0] / LambdaNP2
                    - 67536.7 * CHD / LambdaNP2
                    - 499699. * CHB / LambdaNP2
                    + 1872177. * CHW / LambdaNP2
                    - 263454. * CHWB / LambdaNP2
                    - 1999387. * CDHB / LambdaNP2
                    + 3910434. * CDHW / LambdaNP2
                    - 4.233 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 8.633 * deltaMz()
                    - 0.092 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == -20.) {
            mu +=
                    +121257. * CHbox / LambdaNP2
                    + 2475072. * CHl1R[0][0] / LambdaNP2
                    - 28682974. * CHeR[0][0] / LambdaNP2
                    + 2475072. * CHl3R[0][0] / LambdaNP2
                    + 72023. * CHD / LambdaNP2
                    + 1186280. * CHB / LambdaNP2
                    + 186435. * CHW / LambdaNP2
                    + 1475072. * CHWB / LambdaNP2
                    + 4578518. * CDHB / LambdaNP2
                    + 307070. * CDHW / LambdaNP2
                    + 0.371 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-0.572 * deltaMz()
                    - 0.091 * deltaMh()
                    + 2.375 * deltaaMZ()
                    - 0.377 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 20.) {
            mu +=
                    +121306. * CHbox / LambdaNP2
                    + 25696973. * CHl1R[0][0] / LambdaNP2
                    - 1634825. * CHeR[0][0] / LambdaNP2
                    + 25696973. * CHl3R[0][0] / LambdaNP2
                    - 65976.8 * CHD / LambdaNP2
                    - 480973. * CHB / LambdaNP2
                    + 1853631. * CHW / LambdaNP2
                    - 244288. * CHWB / LambdaNP2
                    - 1927204. * CDHB / LambdaNP2
                    + 3870798. * CDHW / LambdaNP2
                    - 4.182 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+8.536 * deltaMz()
                    - 0.09 * deltaMh()
                    - 2.178 * deltaaMZ()
                    + 4.178 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121307. * CHbox / LambdaNP2
                    + 3550656. * CHl1R[0][0] / LambdaNP2
                    - 27432206. * CHeR[0][0] / LambdaNP2
                    + 3550656. * CHl3R[0][0] / LambdaNP2
                    + 65607.4 * CHD / LambdaNP2
                    + 1109435. * CHB / LambdaNP2
                    + 263679. * CHW / LambdaNP2
                    + 1395519. * CHWB / LambdaNP2
                    + 4277336. * CDHB / LambdaNP2
                    + 472106. * CDHW / LambdaNP2
                    + 0.159 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    - 0.151 * deltaMz()
                    - 0.092 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121327. * CHbox / LambdaNP2
                    + 25048839. * CHl1R[0][0] / LambdaNP2
                    - 2390358. * CHeR[0][0] / LambdaNP2
                    + 25048839. * CHl3R[0][0] / LambdaNP2
                    - 62132.7 * CHD / LambdaNP2
                    - 434824. * CHB / LambdaNP2
                    + 1807095. * CHW / LambdaNP2
                    - 196264. * CHWB / LambdaNP2
                    - 1746222. * CDHB / LambdaNP2
                    + 3771341. * CDHW / LambdaNP2
                    - 4.056 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 8.278 * deltaMz()
                    - 0.092 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else if (sqrt_s == 1.4) {

        C1 = -0.0011;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121277. * CHbox / LambdaNP2
                    + 3988231. * CHl1R[0][0] / LambdaNP2
                    - 57226150. * CHeR[0][0] / LambdaNP2
                    + 3988231. * CHl3R[0][0] / LambdaNP2
                    + 74608.5 * CHD / LambdaNP2
                    + 1256970. * CHB / LambdaNP2
                    + 155358. * CHW / LambdaNP2
                    + 1542655. * CHWB / LambdaNP2
                    + 9506894. * CDHB / LambdaNP2
                    + 553431. * CDHW / LambdaNP2
                    + 0.457 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    - 0.828 * deltaMz()
                    - 0.047 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121314. * CHbox / LambdaNP2
                    + 50871646. * CHl1R[0][0] / LambdaNP2
                    - 2614134. * CHeR[0][0] / LambdaNP2
                    + 50871646. * CHl3R[0][0] / LambdaNP2
                    - 67535.5 * CHD / LambdaNP2
                    - 516385. * CHB / LambdaNP2
                    + 1928805. * CHW / LambdaNP2
                    - 264072. * CHWB / LambdaNP2
                    - 3989947. * CDHB / LambdaNP2
                    + 7948308. * CDHW / LambdaNP2
                    - 4.233 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 8.55 * deltaMz()
                    - 0.047 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121250. * CHbox / LambdaNP2
                    + 6958750. * CHl1R[0][0] / LambdaNP2
                    - 53762500. * CHeR[0][0] / LambdaNP2
                    + 6958750. * CHl3R[0][0] / LambdaNP2
                    + 65589.3 * CHD / LambdaNP2
                    + 1144464. * CHB / LambdaNP2
                    + 267732. * CHW / LambdaNP2
                    + 1428214. * CHWB / LambdaNP2
                    + 8650536. * CDHB / LambdaNP2
                    + 1021964. * CDHW / LambdaNP2
                    + 0.16 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    - 0.234 * deltaMz()
                    - 0.047 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121278. * CHbox / LambdaNP2
                    + 49094486. * CHl1R[0][0] / LambdaNP2
                    - 4685522. * CHeR[0][0] / LambdaNP2
                    + 49094486. * CHl3R[0][0] / LambdaNP2
                    - 62150.9 * CHD / LambdaNP2
                    - 450090. * CHB / LambdaNP2
                    + 1861602. * CHW / LambdaNP2
                    - 195621. * CHWB / LambdaNP2
                    - 3478338. * CDHB / LambdaNP2
                    + 7668095. * CDHW / LambdaNP2
                    - 4.055 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 8.195 * deltaMz()
                    - 0.047 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else if (sqrt_s == 1.5) {

        C1 = -0.0011; // Use the same as 1400 GeV

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121268. * CHbox / LambdaNP2
                    + 4578315. * CHl1R[0][0] / LambdaNP2
                    - 65691823. * CHeR[0][0] / LambdaNP2
                    + 4578315. * CHl3R[0][0] / LambdaNP2
                    + 74595.2 * CHD / LambdaNP2
                    + 1262261. * CHB / LambdaNP2
                    + 155435. * CHW / LambdaNP2
                    + 1547379. * CHWB / LambdaNP2
                    + 10961322. * CDHB / LambdaNP2
                    + 649157. * CDHW / LambdaNP2
                    + 0.457 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    - 0.84 * deltaMz()
                    - 0.041 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121277. * CHbox / LambdaNP2
                    + 58398883. * CHl1R[0][0] / LambdaNP2
                    - 3000385. * CHeR[0][0] / LambdaNP2
                    + 58398883. * CHl3R[0][0] / LambdaNP2
                    - 67535.8 * CHD / LambdaNP2
                    - 518798. * CHB / LambdaNP2
                    + 1936613. * CHW / LambdaNP2
                    - 264171. * CHWB / LambdaNP2
                    - 4590136. * CDHB / LambdaNP2
                    + 9169803. * CDHW / LambdaNP2
                    - 4.233 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 8.539 * deltaMz()
                    - 0.041 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121289. * CHbox / LambdaNP2
                    + 7988570. * CHl1R[0][0] / LambdaNP2
                    - 61718691. * CHeR[0][0] / LambdaNP2
                    + 7988570. * CHl3R[0][0] / LambdaNP2
                    + 65599. * CHD / LambdaNP2
                    + 1149083. * CHB / LambdaNP2
                    + 268317. * CHW / LambdaNP2
                    + 1432777. * CHWB / LambdaNP2
                    + 9972576. * CDHB / LambdaNP2
                    + 1188554. * CDHW / LambdaNP2
                    + 0.16 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    - 0.246 * deltaMz()
                    - 0.041 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121259. * CHbox / LambdaNP2
                    + 56356946. * CHl1R[0][0] / LambdaNP2
                    - 5378233. * CHeR[0][0] / LambdaNP2
                    + 56356946. * CHl3R[0][0] / LambdaNP2
                    - 62168.7 * CHD / LambdaNP2
                    - 452149. * CHB / LambdaNP2
                    + 1869136. * CHW / LambdaNP2
                    - 195562. * CHWB / LambdaNP2
                    - 4000306. * CDHB / LambdaNP2
                    + 8846432. * CDHW / LambdaNP2
                    - 4.055 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 8.183 * deltaMz()
                    - 0.041 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else if (sqrt_s == 3.0) {

        C1 = -0.00054;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121320. * CHbox / LambdaNP2
                    + 18314161. * CHl1R[0][0] / LambdaNP2
                    - 262773345. * CHeR[0][0] / LambdaNP2
                    + 18314161. * CHl3R[0][0] / LambdaNP2
                    + 74663.6 * CHD / LambdaNP2
                    + 1289569. * CHB / LambdaNP2
                    + 155612. * CHW / LambdaNP2
                    + 1572580. * CHWB / LambdaNP2
                    + 44806408. * CDHB / LambdaNP2
                    + 2877519. * CDHW / LambdaNP2
                    + 0.456 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.46 * deltaaMZ()
                    - 0.46 * deltaGmu()
                    - 0.899 * deltaMz()
                    - 0.01 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121305. * CHbox / LambdaNP2
                    + 233598342. * CHl1R[0][0] / LambdaNP2
                    - 12002450. * CHeR[0][0] / LambdaNP2
                    + 233598342. * CHl3R[0][0] / LambdaNP2
                    - 67507.7 * CHD / LambdaNP2
                    - 531387. * CHB / LambdaNP2
                    + 1976750. * CHW / LambdaNP2
                    - 264661. * CHWB / LambdaNP2
                    - 18587969. * CDHB / LambdaNP2
                    + 37618569. * CDHW / LambdaNP2
                    - 4.233 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.23 * deltaaMZ()
                    + 4.23 * deltaGmu()
                    + 8.48 * deltaMz()
                    - 0.01 * deltaMh());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121225. * CHbox / LambdaNP2
                    + 31953446. * CHl1R[0][0] / LambdaNP2
                    - 246870182. * CHeR[0][0] / LambdaNP2
                    + 31953446. * CHl3R[0][0] / LambdaNP2
                    + 65576.5 * CHD / LambdaNP2
                    + 1173703. * CHB / LambdaNP2
                    + 270983. * CHW / LambdaNP2
                    + 1456032. * CHWB / LambdaNP2
                    + 40783748. * CDHB / LambdaNP2
                    + 5077924. * CDHW / LambdaNP2
                    + 0.16 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+2.163 * deltaaMZ()
                    - 0.163 * deltaGmu()
                    - 0.305 * deltaMz()
                    - 0.01 * deltaMh());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121248. * CHbox / LambdaNP2
                    + 225427310. * CHl1R[0][0] / LambdaNP2
                    - 21505526. * CHeR[0][0] / LambdaNP2
                    + 225427310. * CHl3R[0][0] / LambdaNP2
                    - 62193.4 * CHD / LambdaNP2
                    - 463403. * CHB / LambdaNP2
                    + 1907593. * CHW / LambdaNP2
                    - 195017. * CHWB / LambdaNP2
                    - 16188019. * CDHB / LambdaNP2
                    + 36299719. * CDHW / LambdaNP2
                    - 4.054 * delta_GF
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-2.052 * deltaaMZ()
                    + 4.052 * deltaGmu()
                    + 8.124 * deltaMz()
                    - 0.01 * deltaMh());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeZHPol()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eeeZHint + eeeZHpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::mueeZllHPol(const double sqrt_s, const double Pol_em, const double Pol_ep) const
{

    //  The signal strength eeZH
    double mu = mueeZHPol(sqrt_s, Pol_em, Pol_ep);

    //  The (relative) linear correction to the Z>ll BR
    double deltaBRratio;

    deltaBRratio = deltaGamma_Zf(leptons[ELECTRON])
            + deltaGamma_Zf(leptons[MU]);

    deltaBRratio = deltaBRratio /
            (trueSM.GammaZ(leptons[ELECTRON]) + trueSM.GammaZ(leptons[MU]));

    deltaBRratio = deltaBRratio - deltaGamma_Z() / trueSM.Gamma_Z();

    return mu + deltaBRratio;
}

double NPSMEFTd6General::mueeZqqHPol(const double sqrt_s, const double Pol_em, const double Pol_ep) const
{

    //  The signal strength eeZH
    double mu = mueeZHPol(sqrt_s, Pol_em, Pol_ep);

    //  The (relative) linear correction to the Z>qq BR
    double deltaBRratio;

    deltaBRratio = deltaGamma_Zf(quarks[UP])
            + deltaGamma_Zf(quarks[DOWN])
            + deltaGamma_Zf(quarks[CHARM])
            + deltaGamma_Zf(quarks[STRANGE])
            + deltaGamma_Zf(quarks[BOTTOM]);

    deltaBRratio = deltaBRratio /
            (trueSM.GammaZ(quarks[UP]) + trueSM.GammaZ(quarks[DOWN])
            + trueSM.GammaZ(quarks[CHARM]) + trueSM.GammaZ(quarks[STRANGE])
            + trueSM.GammaZ(quarks[BOTTOM]));

    deltaBRratio = deltaBRratio - deltaGamma_Z() / trueSM.Gamma_Z();

    return mu + deltaBRratio;
}

double NPSMEFTd6General::aPskPol(const double sqrt_s, const double Pol_em, const double Pol_ep) const
{

    // Expression missing Cll contributions!

    double aL, aR, aPol;
    double sM = sqrt_s * sqrt_s;
    double Mz2 = Mz*Mz;
    double MH2 = mHl*mHl;
    double dMz = 0.0;
    double dMH = 0.0;
    double dv, dg, dgp, dgL, dgR;
    double kCM, kCM2, EZ, EZ2, kZ, kH;
    double EtaZ;
    double CHpsk, CTpsk, CHl, CHlp, CHE;
    double CWB, CBB, CWW;

    // Convention for dim 6 operators
    CWB = g2_tree * g2_tree / (8.0 * g2_tree * g1_tree) * CHWB * v2_over_LambdaNP2;
    CBB = 0.25 * (g2_tree * g2_tree / g1_tree / g1_tree) * CHB * v2_over_LambdaNP2;
    CWW = 0.25 * CHW * v2_over_LambdaNP2;

    CHpsk = (-2.0 * CHbox + 0.25 * CHD) * v2_over_LambdaNP2;
    CTpsk = -0.5 * CHD * v2_over_LambdaNP2;
    CHl = CHl1R[0][0] * v2_over_LambdaNP2;
    CHlp = CHl3R[0][0] * v2_over_LambdaNP2;
    CHE = CHeR[0][0] * v2_over_LambdaNP2;

    //  Other parameters (1): Missing Cll!!!
    dv = 0.5 * (CHl3R[0][0] + CHl3R[1][1]) * v2_over_LambdaNP2;

    // WFR
    EtaZ = -(1.0 / 2.0) * CHpsk + 2.0 * dMz - dv - CTpsk;

    // Kinematics
    kCM = sqrt((sM * sM + (MH2 - Mz2)*(MH2 - Mz2) - 2.0 * sM * (MH2 + Mz2)) / (4.0 * sM));
    kCM2 = kCM*kCM;

    EZ = sqrt(Mz2 + kCM2);
    EZ2 = EZ*EZ;

    kZ = 2.0 * Mz2 / (sM - Mz2) + (EZ * Mz2) / (2 * kCM2 * sqrt_s) - Mz2 / (2 * kCM2) - (EZ2 / Mz2) / (2.0 + EZ2 / Mz2)*(1.0 - Mz2 / (EZ * sqrt_s));

    kH = -((EZ * MH2) / (2 * kCM2 * sqrt_s)) - (EZ2 / Mz2) / (2 + EZ2 / Mz2) * MH2 / (EZ * sqrt_s);

    //  Other parameters (2): Missing Cll!!!
    dg = -(1.0 / (g1_tree * (cW2_tree * cW2_tree - sW2_tree * sW2_tree))) * (dv * cW2_tree * g1_tree
            - cW2_tree * dMz * g1_tree + 0.25 * CHD * cW2_tree * g1_tree * v2_over_LambdaNP2
            + CHW * cW2_tree * cW2_tree * g1_tree * v2_over_LambdaNP2 + CHWB * cW2_tree * g2_tree * sW2_tree * v2_over_LambdaNP2
            - CHW * g1_tree * sW2_tree * sW2_tree * v2_over_LambdaNP2 + CHWB * g2_tree * sW2_tree * sW2_tree * v2_over_LambdaNP2);


    dgp = -(1.0 / (cW2_tree * g1_tree * g1_tree * (-cW2_tree * cW2_tree + sW2_tree * sW2_tree))) * (dv * cW2_tree * g1_tree * g1_tree * sW2_tree
            - cW2_tree * dMz * g1_tree * g1_tree * sW2_tree + 0.25 * CHD * cW2_tree * g1_tree * g1_tree * sW2_tree * v2_over_LambdaNP2
            + CHWB * cW2_tree * cW2_tree * g1_tree * g2_tree * sW2_tree * v2_over_LambdaNP2
            - CHB * cW2_tree * cW2_tree * g2_tree * g2_tree * sW2_tree * v2_over_LambdaNP2
            + CHWB * cW2_tree * g1_tree * g2_tree * sW2_tree * sW2_tree * v2_over_LambdaNP2
            + CHB * g2_tree * g2_tree * sW2_tree * sW2_tree * sW2_tree * v2_over_LambdaNP2);

    dgL = (1.0 / (0.5 - sW2_tree))*(cW2_tree * (0.5 + sW2_tree) * dg
            - sW2_tree * (0.5 + cW2_tree) * dgp
            + 0.5 * (CHl + CHlp)
            + 0.25 * cW2_tree * (1.0 + 2.0 * sW2_tree)*8.0 * CWW
            - 0.5 * sW2_tree * (1.0 - 2.0 * sW2_tree)*8.0 * CWB
            - 0.25 * sW2_tree * sW2_tree / cW2_tree * (1.0 + 2.0 * cW2_tree)*8.0 * CBB);

    dgR = -cW2_tree * dg + (1.0 + cW2_tree) * dgp
            - 1.0 / (2.0 * sW2_tree) * CHE - 0.5 * cW2_tree * 8 * CWW
            + cW2_tree * 8.0 * CWB + 0.5 * sW2_tree / cW2_tree * (1.0 + cW2_tree)*8.0 * CBB;


    //  LH and RH pars            

    aL = dgL + 2 * dMz - dv + EtaZ + (sM - Mz2) / (2 * Mz2)*(CHl + CHlp) / (0.5 - sW2_tree) + kZ * dMz + kH*dMH;
    aR = dgR + 2 * dMz - dv + EtaZ - (sM - Mz2) / (2 * Mz2) * CHE / sW2_tree + kZ * dMz + kH*dMH;

    //  Polarized a parameter
    aPol = 0.25 * ((1.0 - Pol_em / 100.0)*(1.0 + Pol_ep / 100.0) * aL
            + (1.0 + Pol_em / 100.0)*(1.0 - Pol_ep / 100.0) * aR);

    return aPol;
}

double NPSMEFTd6General::bPskPol(const double sqrt_s, const double Pol_em, const double Pol_ep) const
{
    double bL, bR, bPol;
    double sM = sqrt_s * sqrt_s;
    double Mz2 = Mz*Mz;

    double ZetaZ, ZetaAZ;
    double CWB, CBB, CWW;

    // Convention for dim 6 operators
    CWB = g2_tree * g2_tree / (8.0 * g2_tree * g1_tree) * CHWB * v2_over_LambdaNP2;
    CBB = 0.25 * (g2_tree * g2_tree / g1_tree / g1_tree) * CHB * v2_over_LambdaNP2;
    CWW = 0.25 * CHW * v2_over_LambdaNP2;

    ZetaZ = cW2_tree * 8.0 * CWW + 2.0 * sW2_tree * 8 * CWB + (sW2_tree * sW2_tree / cW2_tree)*8.0 * CBB;
    ZetaAZ = sW_tree * cW_tree * (8.0 * CWW - (1.0 - sW2_tree / cW2_tree)*8 * CWB - (sW2_tree / cW2_tree)*8.0 * CBB);

    //  LH and RH pars 
    bL = ZetaZ + (sW_tree * cW_tree) / (0.5 - sW2_tree)*(sM - Mz2) / sM*ZetaAZ;
    bR = ZetaZ - (cW_tree / sW_tree)*(sM - Mz2) / sM*ZetaAZ;

    //  Polarized b parameter
    bPol = 0.25 * ((1.0 - Pol_em / 100.0)*(1.0 + Pol_ep / 100.0) * bL
            + (1.0 + Pol_em / 100.0)*(1.0 - Pol_ep / 100.0) * bR);

    return bPol;
}

double NPSMEFTd6General::muVH(const double sqrt_s) const
{
    double sigmaWH_SM = computeSigmaWH(sqrt_s);
    double sigmaZH_SM = computeSigmaZH(sqrt_s);
    double sigmaWH = muWH(sqrt_s) * sigmaWH_SM;
    double sigmaZH = muZH(sqrt_s) * sigmaZH_SM;
    double mu = ((sigmaWH + sigmaZH) / (sigmaWH_SM + sigmaZH_SM));

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::muVHpT250(const double sqrt_s) const
{
    //Use MG SM values
    double sigmaWH_SM = 0.26944e-01;
    double sigmaZH_SM = 0.14600e-01;
    double sigmaWH = muWHpT250(sqrt_s) * sigmaWH_SM;
    double sigmaZH = muZHpT250(sqrt_s) * sigmaZH_SM;
    double mu = ((sigmaWH + sigmaZH) / (sigmaWH_SM + sigmaZH_SM));

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::muVBFpVH(const double sqrt_s) const
{
    double sigmaWH_SM = computeSigmaWH(sqrt_s);
    double sigmaZH_SM = computeSigmaZH(sqrt_s);
    double sigmaVBF_SM = computeSigmaVBF(sqrt_s);
    double sigmaWH = muWH(sqrt_s) * sigmaWH_SM;
    double sigmaZH = muZH(sqrt_s) * sigmaZH_SM;
    double sigmaVBF = muVBF(sqrt_s) * sigmaVBF_SM;
    double mu = ((sigmaWH + sigmaZH + sigmaVBF) / (sigmaWH_SM + sigmaZH_SM + sigmaVBF_SM));

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::muttH(const double sqrt_s) const
{
    double mu = 1.0;

    double C1 = 0.0;

    // 4F ccontributions computed using SMEFTsimA

    if (sqrt_s == 1.96) {

        C1 = 0.0; // N.A.

        mu +=
                +423765. * (1. + ettH_2_HG) * CHG / LambdaNP2
                - 4152.27 * (1. + ettH_2_G) * CG / LambdaNP2
                + 568696. * (1. + ettH_2_uG_33r) * CuGR[2][2] / LambdaNP2
                - 2.844 * (1. + ettH_2_DeltagHt) * deltaG_hff(quarks[TOP]).real()
                + 57950.7 * Cqq1R[0][0][2][2] / LambdaNP2
                + 572237. * Cqq1R[0][2][2][0] / LambdaNP2
                + 68506.5 * Cqq3R[0][0][2][2] / LambdaNP2
                + 689368. * Cqq3R[0][2][2][0] / LambdaNP2
                + 34359.2 * CuuR[0][0][2][2] / LambdaNP2
                + 562953. * CuuR[0][2][2][0] / LambdaNP2
                - 1123.41 * Cud1R[2][2][0][0] / LambdaNP2
                + 15070.6 * Cud8R[2][2][0][0] / LambdaNP2
                + 22531.7 * Cqu1R[0][0][2][2] / LambdaNP2
                + 13290.1 * Cqu1R[2][2][0][0] / LambdaNP2
                + 152635. * Cqu8R[0][0][2][2] / LambdaNP2
                + 137479. * Cqu8R[2][2][0][0] / LambdaNP2
                - 890.245 * Cqd1R[2][2][0][0] / LambdaNP2
                + 15388.5 * Cqd8R[2][2][0][0] / LambdaNP2
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 7.0) {

        C1 = 0.0387;

        mu +=
                +531046. * (1. + ettH_78_HG) * CHG / LambdaNP2
                - 85174.4 * (1. + ettH_78_G) * CG / LambdaNP2
                + 810365. * (1. + ettH_78_uG_33r) * CuGR[2][2] / LambdaNP2
                - 2.846 * (1. + ettH_78_DeltagHt) * deltaG_hff(quarks[TOP]).real()
                + 19387.7 * Cqq1R[0][0][2][2] / LambdaNP2
                + 309431. * Cqq1R[0][2][2][0] / LambdaNP2
                + 53723.7 * Cqq3R[0][0][2][2] / LambdaNP2
                + 633768. * Cqq3R[0][2][2][0] / LambdaNP2
                + 19654.7 * CuuR[0][0][2][2] / LambdaNP2
                + 303278. * CuuR[0][2][2][0] / LambdaNP2
                - 3442.03 * Cud1R[2][2][0][0] / LambdaNP2
                + 41220. * Cud8R[2][2][0][0] / LambdaNP2
                + 6827.86 * Cqu1R[0][0][2][2] / LambdaNP2
                + 7038.59 * Cqu1R[2][2][0][0] / LambdaNP2
                + 116509. * Cqu8R[0][0][2][2] / LambdaNP2
                + 74277.5 * Cqu8R[2][2][0][0] / LambdaNP2
                - 2514.79 * Cqd1R[2][2][0][0] / LambdaNP2
                + 41346.5 * Cqd8R[2][2][0][0] / LambdaNP2
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 8.0) {

        C1 = 0.0378;

        mu +=
                +535133. * (1. + ettH_78_HG) * CHG / LambdaNP2
                - 86316.6 * (1. + ettH_78_G) * CG / LambdaNP2
                + 824047. * (1. + ettH_78_uG_33r) * CuGR[2][2] / LambdaNP2
                - 2.846 * (1. + ettH_78_DeltagHt) * deltaG_hff(quarks[TOP]).real()
                + 18617. * Cqq1R[0][0][2][2] / LambdaNP2
                + 294168. * Cqq1R[0][2][2][0] / LambdaNP2
                + 51386.8 * Cqq3R[0][0][2][2] / LambdaNP2
                + 603913. * Cqq3R[0][2][2][0] / LambdaNP2
                + 18807. * CuuR[0][0][2][2] / LambdaNP2
                + 287709. * CuuR[0][2][2][0] / LambdaNP2
                - 3419.45 * Cud1R[2][2][0][0] / LambdaNP2
                + 39513.7 * Cud8R[2][2][0][0] / LambdaNP2
                + 6838.91 * Cqu1R[0][0][2][2] / LambdaNP2
                + 6363.98 * Cqu1R[2][2][0][0] / LambdaNP2
                + 110752. * Cqu8R[0][0][2][2] / LambdaNP2
                + 70573.7 * Cqu8R[2][2][0][0] / LambdaNP2
                - 2659.57 * Cqd1R[2][2][0][0] / LambdaNP2
                + 39608.7 * Cqd8R[2][2][0][0] / LambdaNP2
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 13.0) {

        C1 = 0.0351;

        mu +=
                +538046. * (1. + ettH_1314_HG) * CHG / LambdaNP2
                - 85159.5 * (1. + ettH_1314_G) * CG / LambdaNP2
                + 861157. * (1. + ettH_1314_uG_33r) * CuGR[2][2] / LambdaNP2
                - 2.846 * (1. + ettH_1314_DeltagHt) * deltaG_hff(quarks[TOP]).real()
                + 13574.9 * Cqq1R[0][0][2][2] / LambdaNP2
                + 227043. * Cqq1R[0][2][2][0] / LambdaNP2
                + 41257.5 * Cqq3R[0][0][2][2] / LambdaNP2
                + 473396. * Cqq3R[0][2][2][0] / LambdaNP2
                + 14488.3 * CuuR[0][0][2][2] / LambdaNP2
                + 221664. * CuuR[0][2][2][0] / LambdaNP2
                - 3400.07 * Cud1R[2][2][0][0] / LambdaNP2
                + 31615.5 * Cud8R[2][2][0][0] / LambdaNP2
                + 4516.51 * Cqu1R[0][0][2][2] / LambdaNP2
                + 4161.27 * Cqu1R[2][2][0][0] / LambdaNP2
                + 85356.9 * Cqu8R[0][0][2][2] / LambdaNP2
                + 53893.6 * Cqu8R[2][2][0][0] / LambdaNP2
                - 2791.1 * Cqd1R[2][2][0][0] / LambdaNP2
                + 30575.2 * Cqd8R[2][2][0][0] / LambdaNP2
                ;

        //  Linear contribution from 4 top operators
        //  WARNING: The implementation of the log terms below and the use of RGd6SMEFTlogs() 
        //  may lead to double counting of certain log terms. RGd6SMEFTlogs() disabled for the moment
        mu = mu + cLHd6 * ((Cqu1R[2][2][2][2] / LambdaNP2)*(-420. - cRGEon * 2.0 * 2.78 * log((mtpole + 0.5 * mHl) / Lambda_NP))*1000.
                + (Cqu8R[2][2][2][2] / LambdaNP2)*(68.1 - cRGEon * 2.0 * 2.40 * log((mtpole + 0.5 * mHl) / Lambda_NP))*1000.
                + (Cqq1R[2][2][2][2] / LambdaNP2)*(1.75 + cRGEon * 2.0 * 1.84 * log((mtpole + 0.5 * mHl) / Lambda_NP))*1000.
                + (Cqq3R[2][2][2][2] / LambdaNP2)*(13.2 + cRGEon * 2.0 * 5.48 * log((mtpole + 0.5 * mHl) / Lambda_NP))*1000.
                + (CuuR[2][2][2][2] / LambdaNP2)*(4.60 + cRGEon * 2.0 * 1.82 * log((mtpole + 0.5 * mHl) / Lambda_NP))*1000.
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 14.0) {

        //  Old (but ok) implementation + Missing 4F

        C1 = 0.0347;

        mu +=
                +536980. * (1. + ettH_1314_HG) * CHG / LambdaNP2
                - 83662.2 * (1. + ettH_1314_G) * CG / LambdaNP2
                + 864481. * (1. + ettH_1314_uG_33r) * CuGR[2][2] / LambdaNP2
                - 2.844 * (1. + ettH_1314_DeltagHt) * deltaG_hff(quarks[TOP]).real()
                ;

        //  Linear contribution from 4 top operators
        //  WARNING: The implementation of the log terms below and the use of RGd6SMEFTlogs() 
        //  may lead to double counting of certain log terms. RGd6SMEFTlogs() disabled for the moment
        mu = mu + cLHd6 * ((Cqu1R[2][2][2][2] / LambdaNP2)*(-430. - cRGEon * 2.0 * 2.78 * log((mtpole + 0.5 * mHl) / Lambda_NP))*1000.
                + (Cqu8R[2][2][2][2] / LambdaNP2)*(72.9 - cRGEon * 2.0 * 2.48 * log((mtpole + 0.5 * mHl) / Lambda_NP))*1000.
                + (Cqq1R[2][2][2][2] / LambdaNP2)*(1.65 + cRGEon * 2.0 * 1.76 * log((mtpole + 0.5 * mHl) / Lambda_NP))*1000.
                + (Cqq3R[2][2][2][2] / LambdaNP2)*(12.4 + cRGEon * 2.0 * 5.30 * log((mtpole + 0.5 * mHl) / Lambda_NP))*1000.
                + (CuuR[2][2][2][2] / LambdaNP2)*(4.57 + cRGEon * 2.0 * 1.74 * log((mtpole + 0.5 * mHl) / Lambda_NP))*1000.
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 27.0) {

        //  Old (but ok) implementation + Missing 4F

        C1 = 0.0320; // From arXiv: 1902.00134

        mu +=
                +519682. * CHG / LambdaNP2
                - 68463.1 * CG / LambdaNP2
                + 884060. * CuGR[2][2] / LambdaNP2
                - 2.849 * deltaG_hff(quarks[TOP]).real()
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 100.0) {

        //  Old (but ok) implementation + Missing 4F

        C1 = 0.0; // N.A.

        mu +=
                +467438. * CHG / LambdaNP2
                - 22519. * CG / LambdaNP2
                + 880378. * CuGR[2][2] / LambdaNP2
                - 2.837 * deltaG_hff(quarks[TOP]).real()
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::muttH()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += ettHint + ettHpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::mutHq(const double sqrt_s) const
{
    double mu = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 7.0) {

        C1 = 0.0;

        mu += 0.0;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 8.0) {

        C1 = 0.0;

        mu += 0.0;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 13.0) {

        C1 = 0.0;

        mu += 0.0;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 14.0) {

        C1 = 0.0;

        mu += 0.0;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 27.0) {

        C1 = 0.0;

        mu += 0.0;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else if (sqrt_s == 100.0) {

        C1 = 0.0;

        mu += 0.0;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;

        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mutHq()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    //mu += etHqint + etHqpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::muggHpttH(const double sqrt_s) const
{
    double sigmaggH_SM = computeSigmaggH(sqrt_s);
    double sigmattH_SM = computeSigmattH(sqrt_s);
    double sigmaggH = muggH(sqrt_s) * sigmaggH_SM;
    double sigmattH = muttH(sqrt_s) * sigmattH_SM;

    double mu = ((sigmaggH + sigmattH) / (sigmaggH_SM + sigmattH_SM));

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::mueettH(const double sqrt_s) const
{

    // Only Alpha scheme

    double mu = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 0.500) {

        C1 = 0.086;

        mu +=
                +121901. * CHbox / LambdaNP2
                + 84038.2 * CHl1R[0][0] / LambdaNP2
                + 41671.2 * CHeR[0][0] / LambdaNP2
                - 31418.2 * CHuR[0][0] / LambdaNP2
                + 84038.2 * CHl3R[0][0] / LambdaNP2
                - 121791. * CuHR[2][2] / LambdaNP2
                - 59467.6 * CHD / LambdaNP2
                + 138929. * CHB / LambdaNP2
                + 130909. * CHW / LambdaNP2
                - 253030. * CHWB / LambdaNP2
                - 1757.66 * CDHB / LambdaNP2
                + 1501.34 * CDHW / LambdaNP2
                + 1386027. * CuWR[2][2] / LambdaNP2
                + 1698012. * CuBR[2][2] / LambdaNP2
                - 1.965 * delta_GF
                - 1.187 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+1.932 * deltaMz()
                - 9.827 * deltaMh()
                + 1.04 * deltaaMZ()
                + 1.992 * deltaGmu()
                - 18.476 * deltamt());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 1.0) {

        C1 = 0.017;

        mu +=
                +122013. * CHbox / LambdaNP2
                + 889282. * CHl1R[0][0] / LambdaNP2
                - 543424. * CHeR[0][0] / LambdaNP2
                - 8240.83 * CHuR[0][0] / LambdaNP2
                + 889282. * CHl3R[0][0] / LambdaNP2
                - 116099. * CuHR[2][2] / LambdaNP2
                - 60351.9 * CHD / LambdaNP2
                + 352804. * CHB / LambdaNP2
                + 361918. * CHW / LambdaNP2
                - 397547. * CHWB / LambdaNP2
                + 37326.1 * CDHB / LambdaNP2
                + 113772. * CDHW / LambdaNP2
                + 2758980. * CuWR[2][2] / LambdaNP2
                + 3462941. * CuBR[2][2] / LambdaNP2
                - 2.08 * delta_GF
                - 2.575 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+2.185 * deltaMz()
                - 1.195 * deltaMh()
                + 0.92 * deltaaMZ()
                + 2.096 * deltaGmu()
                + 2.136 * deltamt());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 1.4) {

        C1 = 0.0094;

        mu +=
                +122081. * CHbox / LambdaNP2
                + 2544832. * CHl1R[0][0] / LambdaNP2
                - 1901938. * CHeR[0][0] / LambdaNP2
                + 3241.73 * CHuR[0][0] / LambdaNP2
                + 2544832. * CHl3R[0][0] / LambdaNP2
                - 112208. * CuHR[2][2] / LambdaNP2
                - 60340.4 * CHD / LambdaNP2
                + 464967. * CHB / LambdaNP2
                + 487659. * CHW / LambdaNP2
                - 471053. * CHWB / LambdaNP2
                + 134900. * CDHB / LambdaNP2
                + 371767. * CDHW / LambdaNP2
                + 3804096. * CuWR[2][2] / LambdaNP2
                + 4800265. * CuBR[2][2] / LambdaNP2
                - 2.139 * delta_GF
                - 3.203 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+2.309 * deltaMz()
                - 0.898 * deltaMh()
                + 0.872 * deltaaMZ()
                + 2.157 * deltaGmu()
                + 2.262 * deltamt());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 1.5) {

        C1 = 0.0094; // Use the same as 1400 GeV

        mu +=
                +122173. * CHbox / LambdaNP2
                + 3117293. * CHl1R[0][0] / LambdaNP2
                - 2378233. * CHeR[0][0] / LambdaNP2
                + 5531.15 * CHuR[0][0] / LambdaNP2
                + 3117293. * CHl3R[0][0] / LambdaNP2
                - 111274. * CuHR[2][2] / LambdaNP2
                - 60192. * CHD / LambdaNP2
                + 487962. * CHB / LambdaNP2
                + 513503. * CHW / LambdaNP2
                - 485782. * CHWB / LambdaNP2
                + 170734. * CDHB / LambdaNP2
                + 462665. * CDHW / LambdaNP2
                + 4068326. * CuWR[2][2] / LambdaNP2
                + 5138930. * CuBR[2][2] / LambdaNP2
                - 2.149 * delta_GF
                - 3.325 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+2.322 * deltaMz()
                - 0.858 * deltaMh()
                + 0.866 * deltaaMZ()
                + 2.164 * deltaGmu()
                + 2.265 * deltamt());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 3.0) {

        C1 = 0.0037;

        mu +=
                +121915. * CHbox / LambdaNP2
                + 19529668. * CHl1R[0][0] / LambdaNP2
                - 16356276. * CHeR[0][0] / LambdaNP2
                + 23142.9 * CHuR[0][0] / LambdaNP2
                + 19529668. * CHl3R[0][0] / LambdaNP2
                - 104011. * CuHR[2][2] / LambdaNP2
                - 58710.4 * CHD / LambdaNP2
                + 697868. * CHB / LambdaNP2
                + 751003. * CHW / LambdaNP2
                - 625171. * CHWB / LambdaNP2
                + 1204441. * CDHB / LambdaNP2
                + 3111413. * CDHW / LambdaNP2
                + 8604912. * CuWR[2][2] / LambdaNP2
                + 10946841. * CuBR[2][2] / LambdaNP2
                - 2.224 * delta_GF
                - 4.279 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+2.483 * deltaMz()
                - 0.572 * deltaMh()
                + 0.771 * deltaaMZ()
                + 2.242 * deltaGmu()
                + 2.182 * deltamt());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mueettH()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eeettHint + eeettHpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::mueettHPol(const double sqrt_s, const double Pol_em, const double Pol_ep) const
{

    // Only Alpha scheme

    double mu = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 0.500) {

        C1 = 0.086;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121861. * CHbox / LambdaNP2
                    + 14207.9 * CHl1R[0][0] / LambdaNP2
                    + 124191. * CHeR[0][0] / LambdaNP2
                    + 112591. * CHuR[0][0] / LambdaNP2
                    + 14207.9 * CHl3R[0][0] / LambdaNP2
                    - 123399. * CuHR[2][2] / LambdaNP2
                    - 12437.7 * CHD / LambdaNP2
                    + 249779. * CHB / LambdaNP2
                    + 18912.8 * CHW / LambdaNP2
                    - 109936. * CHWB / LambdaNP2
                    - 5170.73 * CDHB / LambdaNP2
                    + 3167.65 * CDHW / LambdaNP2
                    + 174267. * CuWR[2][2] / LambdaNP2
                    + 3032981. * CuBR[2][2] / LambdaNP2
                    - 0.388 * delta_GF
                    + 3.51 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-1.319 * deltaMz()
                    - 9.866 * deltaMh()
                    + 2.617 * deltaaMZ()
                    + 0.421 * deltaGmu()
                    - 18.44 * deltamt());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121809. * CHbox / LambdaNP2
                    + 116253. * CHl1R[0][0] / LambdaNP2
                    + 3415.4 * CHeR[0][0] / LambdaNP2
                    - 98311.8 * CHuR[0][0] / LambdaNP2
                    + 116253. * CHl3R[0][0] / LambdaNP2
                    - 121117. * CuHR[2][2] / LambdaNP2
                    - 81321.2 * CHD / LambdaNP2
                    + 87352.2 * CHB / LambdaNP2
                    + 182702. * CHW / LambdaNP2
                    - 319427. * CHWB / LambdaNP2
                    - 21.616 * CDHB / LambdaNP2
                    + 799.81 * CDHW / LambdaNP2
                    + 1948272. * CuWR[2][2] / LambdaNP2
                    + 1078489. * CuBR[2][2] / LambdaNP2
                    - 2.697 * delta_GF
                    - 3.37 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.441 * deltaMz()
                    - 9.806 * deltaMh()
                    + 0.308 * deltaaMZ()
                    + 2.725 * deltaGmu()
                    - 18.491 * deltamt());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121837. * CHbox / LambdaNP2
                    + 24323.6 * CHl1R[0][0] / LambdaNP2
                    + 111998. * CHeR[0][0] / LambdaNP2
                    + 91391.1 * CHuR[0][0] / LambdaNP2
                    + 24323.6 * CHl3R[0][0] / LambdaNP2
                    - 123203. * CuHR[2][2] / LambdaNP2
                    - 19404.2 * CHD / LambdaNP2
                    + 233452. * CHB / LambdaNP2
                    + 35310.2 * CHW / LambdaNP2
                    - 131019. * CHWB / LambdaNP2
                    - 4810.06 * CDHB / LambdaNP2
                    + 2842.31 * CDHW / LambdaNP2
                    + 351790. * CuWR[2][2] / LambdaNP2
                    + 2837005. * CuBR[2][2] / LambdaNP2
                    - 0.617 * delta_GF
                    + 2.818 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-0.843 * deltaMz()
                    - 9.86 * deltaMh()
                    + 2.385 * deltaaMZ()
                    + 0.645 * deltaGmu()
                    - 18.45 * deltamt());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121814. * CHbox / LambdaNP2
                    + 113858. * CHl1R[0][0] / LambdaNP2
                    + 6221.44 * CHeR[0][0] / LambdaNP2
                    - 93321.6 * CHuR[0][0] / LambdaNP2
                    + 113858. * CHl3R[0][0] / LambdaNP2
                    - 121180. * CuHR[2][2] / LambdaNP2
                    - 79695. * CHD / LambdaNP2
                    + 91201.9 * CHB / LambdaNP2
                    + 178853. * CHW / LambdaNP2
                    - 314513. * CHWB / LambdaNP2
                    - 137.642 * CDHB / LambdaNP2
                    + 853.383 * CDHW / LambdaNP2
                    + 1906734. * CuWR[2][2] / LambdaNP2
                    + 1124181. * CuBR[2][2] / LambdaNP2
                    - 2.642 * delta_GF
                    - 3.21 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.33 * deltaMz()
                    - 9.807 * deltaMh()
                    + 0.362 * deltaaMZ()
                    + 2.671 * deltaGmu()
                    - 18.489 * deltamt());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueettHPol()");
        }

    } else if (sqrt_s == 1.0) {

        C1 = 0.017;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +122269. * CHbox / LambdaNP2
                    + 148925. * CHl1R[0][0] / LambdaNP2
                    - 1516295. * CHeR[0][0] / LambdaNP2
                    + 181376. * CHuR[0][0] / LambdaNP2
                    + 148925. * CHl3R[0][0] / LambdaNP2
                    - 115721. * CuHR[2][2] / LambdaNP2
                    - 9966.97 * CHD / LambdaNP2
                    + 648027. * CHB / LambdaNP2
                    + 58990.6 * CHW / LambdaNP2
                    - 166947. * CHWB / LambdaNP2
                    + 258446. * CDHB / LambdaNP2
                    + 27641. * CDHW / LambdaNP2
                    + 416063. * CuWR[2][2] / LambdaNP2
                    + 5771745. * CuBR[2][2] / LambdaNP2
                    - 0.426 * delta_GF
                    + 3.026 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-1.159 * deltaMz()
                    - 1.211 * deltaMh()
                    + 2.586 * deltaaMZ()
                    + 0.445 * deltaGmu()
                    + 2.101 * deltamt());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +122212. * CHbox / LambdaNP2
                    + 1266376. * CHl1R[0][0] / LambdaNP2
                    - 47326.8 * CHeR[0][0] / LambdaNP2
                    - 104685. * CHuR[0][0] / LambdaNP2
                    + 1266376. * CHl3R[0][0] / LambdaNP2
                    - 116193. * CuHR[2][2] / LambdaNP2
                    - 85861. * CHD / LambdaNP2
                    + 202732. * CHB / LambdaNP2
                    + 516612. * CHW / LambdaNP2
                    - 514723. * CHWB / LambdaNP2
                    - 75504.5 * CDHB / LambdaNP2
                    + 158356. * CDHW / LambdaNP2
                    + 3954267. * CuWR[2][2] / LambdaNP2
                    + 2288387. * CuBR[2][2] / LambdaNP2
                    - 2.929 * delta_GF
                    - 5.432 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.902 * deltaMz()
                    - 1.192 * deltaMh()
                    + 0.075 * deltaaMZ()
                    + 2.94 * deltaGmu()
                    + 2.16 * deltamt());

        } else if (Pol_em == 80. && Pol_ep == -20.) {
            mu +=
                    +122563. * CHbox / LambdaNP2
                    + 179718. * CHl1R[0][0] / LambdaNP2
                    - 1476392. * CHeR[0][0] / LambdaNP2
                    + 173910. * CHuR[0][0] / LambdaNP2
                    + 179718. * CHl3R[0][0] / LambdaNP2
                    - 115349. * CuHR[2][2] / LambdaNP2
                    - 11797.8 * CHD / LambdaNP2
                    + 636347. * CHB / LambdaNP2
                    + 71703.6 * CHW / LambdaNP2
                    - 176417. * CHWB / LambdaNP2
                    + 249649. * CDHB / LambdaNP2
                    + 31542.3 * CDHW / LambdaNP2
                    + 513357. * CuWR[2][2] / LambdaNP2
                    + 5678281. * CuBR[2][2] / LambdaNP2
                    - 0.497 * delta_GF
                    + 2.823 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-0.986 * deltaMz()
                    - 1.242 * deltaMh()
                    + 2.514 * deltaaMZ()
                    + 0.529 * deltaGmu()
                    + 2.133 * deltamt());

        } else if (Pol_em == -80. && Pol_ep == 20.) {
            mu +=
                    +122316. * CHbox / LambdaNP2
                    + 1258544. * CHl1R[0][0] / LambdaNP2
                    - 57807.1 * CHeR[0][0] / LambdaNP2
                    - 102560. * CHuR[0][0] / LambdaNP2
                    + 1258544. * CHl3R[0][0] / LambdaNP2
                    - 116091. * CuHR[2][2] / LambdaNP2
                    - 85249.7 * CHD / LambdaNP2
                    + 206295. * CHB / LambdaNP2
                    + 513404. * CHW / LambdaNP2
                    - 512197. * CHWB / LambdaNP2
                    - 72925.9 * CDHB / LambdaNP2
                    + 157286. * CDHW / LambdaNP2
                    + 3929488. * CuWR[2][2] / LambdaNP2
                    + 2314064. * CuBR[2][2] / LambdaNP2
                    - 2.911 * delta_GF
                    - 5.37 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.877 * deltaMz()
                    - 1.222 * deltaMh()
                    + 0.099 * deltaaMZ()
                    + 2.937 * deltaGmu()
                    + 2.184 * deltamt());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +122564. * CHbox / LambdaNP2
                    + 252265. * CHl1R[0][0] / LambdaNP2
                    - 1381101. * CHeR[0][0] / LambdaNP2
                    + 155161. * CHuR[0][0] / LambdaNP2
                    + 252265. * CHl3R[0][0] / LambdaNP2
                    - 115358. * CuHR[2][2] / LambdaNP2
                    - 16813.1 * CHD / LambdaNP2
                    + 607466. * CHB / LambdaNP2
                    + 101359. * CHW / LambdaNP2
                    - 198737. * CHWB / LambdaNP2
                    + 227834. * CDHB / LambdaNP2
                    + 39939.6 * CDHW / LambdaNP2
                    + 742520. * CuWR[2][2] / LambdaNP2
                    + 5453267. * CuBR[2][2] / LambdaNP2
                    - 0.659 * delta_GF
                    + 2.273 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-0.69 * deltaMz()
                    - 1.205 * deltaMh()
                    + 2.349 * deltaaMZ()
                    + 0.676 * deltaGmu()
                    + 2.105 * deltamt());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +122380. * CHbox / LambdaNP2
                    + 1238124. * CHl1R[0][0] / LambdaNP2
                    - 84811.2 * CHeR[0][0] / LambdaNP2
                    - 97259.2 * CHuR[0][0] / LambdaNP2
                    + 1238124. * CHl3R[0][0] / LambdaNP2
                    - 116044. * CuHR[2][2] / LambdaNP2
                    - 83798.9 * CHD / LambdaNP2
                    + 214128. * CHB / LambdaNP2
                    + 505118. * CHW / LambdaNP2
                    - 505830. * CHWB / LambdaNP2
                    - 66814.1 * CDHB / LambdaNP2
                    + 155075. * CDHW / LambdaNP2
                    + 3863710. * CuWR[2][2] / LambdaNP2
                    + 2378351. * CuBR[2][2] / LambdaNP2
                    - 2.867 * delta_GF
                    - 5.212 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.771 * deltaMz()
                    - 1.195 * deltaMh()
                    + 0.137 * deltaaMZ()
                    + 2.878 * deltaGmu()
                    + 2.166 * deltamt());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueettHPol()");
        }

    } else if (sqrt_s == 1.4) {

        C1 = 0.0094;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121945. * CHbox / LambdaNP2
                    + 416437. * CHl1R[0][0] / LambdaNP2
                    - 5198451. * CHeR[0][0] / LambdaNP2
                    + 211446. * CHuR[0][0] / LambdaNP2
                    + 416437. * CHl3R[0][0] / LambdaNP2
                    - 110413. * CuHR[2][2] / LambdaNP2
                    - 8089.5 * CHD / LambdaNP2
                    + 852065. * CHB / LambdaNP2
                    + 78915.7 * CHW / LambdaNP2
                    - 191411. * CHWB / LambdaNP2
                    + 881670. * CDHB / LambdaNP2
                    + 72289.2 * CDHW / LambdaNP2
                    + 588296. * CuWR[2][2] / LambdaNP2
                    + 7812392. * CuBR[2][2] / LambdaNP2
                    - 0.441 * delta_GF
                    + 2.819 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-1.109 * deltaMz()
                    - 0.905 * deltaMh()
                    + 2.571 * deltaaMZ()
                    + 0.451 * deltaGmu()
                    + 2.225 * deltamt());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +122124. * CHbox / LambdaNP2
                    + 3668482. * CHl1R[0][0] / LambdaNP2
                    - 164738. * CHeR[0][0] / LambdaNP2
                    - 106285. * CHuR[0][0] / LambdaNP2
                    + 3668482. * CHl3R[0][0] / LambdaNP2
                    - 112775. * CuHR[2][2] / LambdaNP2
                    - 87497.2 * CHD / LambdaNP2
                    + 261266. * CHB / LambdaNP2
                    + 703789. * CHW / LambdaNP2
                    - 618584. * CHWB / LambdaNP2
                    - 257636. * CDHB / LambdaNP2
                    + 530202. * CDHW / LambdaNP2
                    + 5501929. * CuWR[2][2] / LambdaNP2
                    + 3213842. * CuBR[2][2] / LambdaNP2
                    - 3.038 * delta_GF
                    - 6.378 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.12 * deltaMz()
                    - 0.898 * deltaMh()
                    - 0.029 * deltaaMZ()
                    + 3.056 * deltaGmu()
                    + 2.28 * deltamt());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121843. * CHbox / LambdaNP2
                    + 706068. * CHl1R[0][0] / LambdaNP2
                    - 4748505. * CHeR[0][0] / LambdaNP2
                    + 182964. * CHuR[0][0] / LambdaNP2
                    + 706068. * CHl3R[0][0] / LambdaNP2
                    - 110672. * CuHR[2][2] / LambdaNP2
                    - 15249.5 * CHD / LambdaNP2
                    + 798771. * CHB / LambdaNP2
                    + 134415. * CHW / LambdaNP2
                    - 229663. * CHWB / LambdaNP2
                    + 779863. * CDHB / LambdaNP2
                    + 112951. * CDHW / LambdaNP2
                    + 1026697. * CuWR[2][2] / LambdaNP2
                    + 7402171. * CuBR[2][2] / LambdaNP2
                    - 0.673 * delta_GF
                    + 1.996 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-0.648 * deltaMz()
                    - 0.901 * deltaMh()
                    + 2.34 * deltaaMZ()
                    + 0.693 * deltaGmu()
                    + 2.232 * deltamt());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +122069. * CHbox / LambdaNP2
                    + 3581543. * CHl1R[0][0] / LambdaNP2
                    - 298692. * CHeR[0][0] / LambdaNP2
                    - 97874.3 * CHuR[0][0] / LambdaNP2
                    + 3581543. * CHl3R[0][0] / LambdaNP2
                    - 112737. * CuHR[2][2] / LambdaNP2
                    - 85431.2 * CHD / LambdaNP2
                    + 276629. * CHB / LambdaNP2
                    + 687136. * CHW / LambdaNP2
                    - 607155. * CHWB / LambdaNP2
                    - 227375. * CDHB / LambdaNP2
                    + 517945. * CDHW / LambdaNP2
                    + 5370183. * CuWR[2][2] / LambdaNP2
                    + 3335906. * CuBR[2][2] / LambdaNP2
                    - 2.969 * delta_GF
                    - 6.138 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.976 * deltaMz()
                    - 0.895 * deltaMh()
                    + 0.039 * deltaaMZ()
                    + 2.986 * deltaGmu()
                    + 2.271 * deltamt());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueettHPol()");
        }

    } else if (sqrt_s == 1.5) {

        C1 = 0.0094; // Use the same as 1400 GeV

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +121854. * CHbox / LambdaNP2
                    + 507190. * CHl1R[0][0] / LambdaNP2
                    - 6475118. * CHeR[0][0] / LambdaNP2
                    + 216935. * CHuR[0][0] / LambdaNP2
                    + 507190. * CHl3R[0][0] / LambdaNP2
                    - 109820. * CuHR[2][2] / LambdaNP2
                    - 7568.59 * CHD / LambdaNP2
                    + 893094. * CHB / LambdaNP2
                    + 82781.5 * CHW / LambdaNP2
                    - 196556. * CHWB / LambdaNP2
                    + 1099527. * CDHB / LambdaNP2
                    + 87228. * CDHW / LambdaNP2
                    + 630747. * CuWR[2][2] / LambdaNP2
                    + 8328477. * CuBR[2][2] / LambdaNP2
                    - 0.442 * delta_GF
                    + 2.756 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-1.104 * deltaMz()
                    - 0.856 * deltaMh()
                    + 2.568 * deltaaMZ()
                    + 0.455 * deltaGmu()
                    + 2.232 * deltamt());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +121994. * CHbox / LambdaNP2
                    + 4501280. * CHl1R[0][0] / LambdaNP2
                    - 206085. * CHeR[0][0] / LambdaNP2
                    - 106381. * CHuR[0][0] / LambdaNP2
                    + 4501280. * CHl3R[0][0] / LambdaNP2
                    - 112104. * CuHR[2][2] / LambdaNP2
                    - 87805.6 * CHD / LambdaNP2
                    + 273106. * CHB / LambdaNP2
                    + 741955. * CHW / LambdaNP2
                    - 639545. * CHWB / LambdaNP2
                    - 322155. * CDHB / LambdaNP2
                    + 661931. * CDHW / LambdaNP2
                    + 5892414. * CuWR[2][2] / LambdaNP2
                    + 3448015. * CuBR[2][2] / LambdaNP2
                    - 3.057 * delta_GF
                    - 6.552 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.154 * deltaMz()
                    - 0.856 * deltaMh()
                    - 0.045 * deltaaMZ()
                    + 3.071 * deltaGmu()
                    + 2.287 * deltamt());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +121793. * CHbox / LambdaNP2
                    + 861242. * CHl1R[0][0] / LambdaNP2
                    - 5919951. * CHeR[0][0] / LambdaNP2
                    + 188249. * CHuR[0][0] / LambdaNP2
                    + 861242. * CHl3R[0][0] / LambdaNP2
                    - 109696. * CuHR[2][2] / LambdaNP2
                    - 14806.7 * CHD / LambdaNP2
                    + 837632. * CHB / LambdaNP2
                    + 141142. * CHW / LambdaNP2
                    - 235907. * CHWB / LambdaNP2
                    + 973107. * CDHB / LambdaNP2
                    + 138331. * CDHW / LambdaNP2
                    + 1097452. * CuWR[2][2] / LambdaNP2
                    + 7895510. * CuBR[2][2] / LambdaNP2
                    - 0.673 * delta_GF
                    + 1.935 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-0.637 * deltaMz()
                    - 0.859 * deltaMh()
                    + 2.339 * deltaaMZ()
                    + 0.68 * deltaGmu()
                    + 2.236 * deltamt());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +122029. * CHbox / LambdaNP2
                    + 4394189. * CHl1R[0][0] / LambdaNP2
                    - 373205. * CHeR[0][0] / LambdaNP2
                    - 97750.6 * CHuR[0][0] / LambdaNP2
                    + 4394189. * CHl3R[0][0] / LambdaNP2
                    - 112024. * CuHR[2][2] / LambdaNP2
                    - 85643.3 * CHD / LambdaNP2
                    + 289620. * CHB / LambdaNP2
                    + 724463. * CHW / LambdaNP2
                    - 627885. * CHWB / LambdaNP2
                    - 284076. * CDHB / LambdaNP2
                    + 646658. * CDHW / LambdaNP2
                    + 5753330. * CuWR[2][2] / LambdaNP2
                    + 3578793. * CuBR[2][2] / LambdaNP2
                    - 2.989 * delta_GF
                    - 6.311 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.014 * deltaMz()
                    - 0.855 * deltaMh()
                    + 0.024 * deltaaMZ()
                    + 3.011 * deltaGmu()
                    + 2.286 * deltamt());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueettHPol()");
        }

    } else if (sqrt_s == 3.0) {

        C1 = 0.0037;

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    +122442. * CHbox / LambdaNP2
                    + 3092340. * CHl1R[0][0] / LambdaNP2
                    - 43264264. * CHeR[0][0] / LambdaNP2
                    + 259622. * CHuR[0][0] / LambdaNP2
                    + 3092340. * CHl3R[0][0] / LambdaNP2
                    - 100510. * CuHR[2][2] / LambdaNP2
                    - 3230.01 * CHD / LambdaNP2
                    + 1267548. * CHB / LambdaNP2
                    + 118886. * CHW / LambdaNP2
                    - 247164. * CHWB / LambdaNP2
                    + 7397753. * CDHB / LambdaNP2
                    + 510206. * CDHW / LambdaNP2
                    + 1343630. * CuWR[2][2] / LambdaNP2
                    + 17234081. * CuBR[2][2] / LambdaNP2
                    - 0.459 * delta_GF
                    + 2.453 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-1.07 * deltaMz()
                    - 0.576 * deltaMh()
                    + 2.542 * deltaaMZ()
                    + 0.468 * deltaGmu()
                    + 2.145 * deltamt());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    +122230. * CHbox / LambdaNP2
                    + 28686134. * CHl1R[0][0] / LambdaNP2
                    - 1435177. * CHeR[0][0] / LambdaNP2
                    - 108195. * CHuR[0][0] / LambdaNP2
                    + 28686134. * CHl3R[0][0] / LambdaNP2
                    - 105858. * CuHR[2][2] / LambdaNP2
                    - 89803.1 * CHD / LambdaNP2
                    + 381886. * CHB / LambdaNP2
                    + 1102843. * CHW / LambdaNP2
                    - 834821. * CHWB / LambdaNP2
                    - 2237555. * CDHB / LambdaNP2
                    + 4557030. * CDHW / LambdaNP2
                    + 12639913. * CuWR[2][2] / LambdaNP2
                    + 7455995. * CuBR[2][2] / LambdaNP2
                    - 3.212 * delta_GF
                    - 8.009 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.469 * deltaMz()
                    - 0.595 * deltaMh()
                    - 0.222 * deltaaMZ()
                    + 3.22 * deltaGmu()
                    + 2.195 * deltamt());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    +122688. * CHbox / LambdaNP2
                    + 5271741. * CHl1R[0][0] / LambdaNP2
                    - 39707692. * CHeR[0][0] / LambdaNP2
                    + 228729. * CHuR[0][0] / LambdaNP2
                    + 5271741. * CHl3R[0][0] / LambdaNP2
                    - 100891. * CuHR[2][2] / LambdaNP2
                    - 10526.3 * CHD / LambdaNP2
                    + 1192421. * CHB / LambdaNP2
                    + 202915. * CHW / LambdaNP2
                    - 296939. * CHWB / LambdaNP2
                    + 6582510. * CDHB / LambdaNP2
                    + 853895. * CDHW / LambdaNP2
                    + 2303644. * CuWR[2][2] / LambdaNP2
                    + 16407287. * CuBR[2][2] / LambdaNP2
                    - 0.693 * delta_GF
                    + 1.565 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (-0.597 * deltaMz()
                    - 0.565 * deltaMh()
                    + 2.305 * deltaaMZ()
                    + 0.708 * deltaGmu()
                    + 2.153 * deltamt());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    +121781. * CHbox / LambdaNP2
                    + 27966374. * CHl1R[0][0] / LambdaNP2
                    - 2597153. * CHeR[0][0] / LambdaNP2
                    - 98089.4 * CHuR[0][0] / LambdaNP2
                    + 27966374. * CHl3R[0][0] / LambdaNP2
                    - 105885. * CuHR[2][2] / LambdaNP2
                    - 87600.3 * CHD / LambdaNP2
                    + 406305. * CHB / LambdaNP2
                    + 1075086. * CHW / LambdaNP2
                    - 818808. * CHWB / LambdaNP2
                    - 1967062. * CDHB / LambdaNP2
                    + 4442109. * CDHW / LambdaNP2
                    + 12322125. * CuWR[2][2] / LambdaNP2
                    + 7728315. * CuBR[2][2] / LambdaNP2
                    - 3.134 * delta_GF
                    - 7.724 * 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                    ;

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.305 * deltaMz()
                    - 0.59 * deltaMh()
                    - 0.147 * deltaaMZ()
                    + 3.144 * deltaGmu()
                    + 2.192 * deltamt());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueettHPol()");
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mueettHPol()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eeettHint + eeettHpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::mummH(const double sqrt_s) const
{
    double mu = 1.0;

    if (sqrt_s == 0.125) {

        //  Peak production cross section mu mu -> H -> X = 4 pi/mH^2 * BR(H->mu mu) * BR(H-> X)
        //  Use mu mu -> H = 4 pi/mH^2 * BR(H->mu mu), so the xs BR formulae still applies
        mu = BrHmumuRatio();

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mummH()");

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::mummHNWA(const double sqrt_s) const
{
    double mu = 1.0;

    double dymu = deltaG_hff(leptons[MU]).real();
    double ymuSM = -(leptons[MU].getMass()) / v();

    //  The ratio is given by a scaling of the muon Yukawa.
    mu = 1.0 + 2.0 * dymu / ymuSM;

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        mu += dymu * dymu / ymuSM / ymuSM;
    }

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::mummZH(const double sqrt_s) const
{

    // Only Alpha scheme

    double mu = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 3.0) {

        C1 = -0.00054; // Use the same as CLIC

        mu +=
                +120311. * CHbox / LambdaNP2
                - 5772.03 * CHD / LambdaNP2
                + 253308. * CHB / LambdaNP2
                + 1178831. * CHW / LambdaNP2
                + 526388. * CHWB / LambdaNP2
                + 8753562. * CDHB / LambdaNP2
                + 22389067. * CDHW / LambdaNP2
                + 139222448. * CHl1R[1][1] / LambdaNP2
                - 119515557. * CHeR[1][1] / LambdaNP2
                + 0. * CHl3R[0][0] / LambdaNP2
                + 139217069. * CHl3R[1][1] / LambdaNP2
                - 2.19 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+4.384 * deltaMz()
                - 0.009 * deltaMh()
                - 0.198 * deltaaMZ()
                + 2.199 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 10.0) {

        C1 = 0.0; // NA

        mu +=
                +110705. * CHbox / LambdaNP2
                - 2881.46 * CHD / LambdaNP2
                + 234510. * CHB / LambdaNP2
                + 1090997. * CHW / LambdaNP2
                + 487384. * CHWB / LambdaNP2
                + 90542251. * CDHB / LambdaNP2
                + 230979695. * CDHW / LambdaNP2
                + 1423231114. * CHl1R[1][1] / LambdaNP2
                - 1221737534. * CHeR[1][1] / LambdaNP2
                + 74.649 * CHl3R[0][0] / LambdaNP2
                + 1423208868. * CHl3R[1][1] / LambdaNP2
                - 2.096 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+4.016 * deltaMz()
                + 0. * deltaMh()
                - 0.182 * deltaaMZ()
                + 2.183 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mummZH()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eeeZHint + eeeZHpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::mummHvv(const double sqrt_s) const
{

    //  Only Alpha scheme

    double mu = 1.0;

    double C1 = 0.0;

    //  For the Higgs trilinear dependence assume the WBF mechanism dominates

    if (sqrt_s == 3.0) {

        C1 = 0.0057; // Use the same as CLIC

        mu +=
                +120415. * CHbox / LambdaNP2
                - 204193. * CHD / LambdaNP2
                + 584.639 * CHB / LambdaNP2
                - 40740.1 * CHW / LambdaNP2
                - 380159. * CHWB / LambdaNP2
                + 96.414 * CDHB / LambdaNP2
                - 104066. * CDHW / LambdaNP2
                - 518.996 * CHl1R[1][1] / LambdaNP2
                - 1015.43 * CHeR[1][1] / LambdaNP2
                - 1128.25 * CHl3R[0][0] / LambdaNP2
                - 678627. * CHl3R[1][1] / LambdaNP2
                - 4.701 * delta_GF
                - 4.244 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +5.314 * deltaMz()
                - 0.277 * deltaMh()
                - 0.795 * deltaaMZ()
                + 3.787 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 10.0) {

        C1 = 0.0; // NA

        mu +=
                +120660. * CHbox / LambdaNP2
                - 204535. * CHD / LambdaNP2
                - 38.696 * CHB / LambdaNP2
                - 27111.7 * CHW / LambdaNP2
                - 380108. * CHWB / LambdaNP2
                - 85.858 * CDHB / LambdaNP2
                - 151122. * CDHW / LambdaNP2
                + 296.269 * CHl1R[1][1] / LambdaNP2
                - 613.096 * CHeR[1][1] / LambdaNP2
                - 1584.13 * CHl3R[0][0] / LambdaNP2
                - 952573. * CHl3R[1][1] / LambdaNP2
                - 4.696 * delta_GF
                - 4.223 * deltaMwd6()
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (
                +5.49 * deltaMz()
                - 0.177 * deltaMh()
                - 0.821 * deltaaMZ()
                + 3.804 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mummHvv()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eeeWBFint + eeeWBFpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::mummHmm(const double sqrt_s) const
{

    //  Only Alpha scheme

    double mu = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 3.0) {

        C1 = 0.0063; // Use the same as CLIC

        mu +=
                +120754. * CHbox / LambdaNP2
                - 42566.4 * CHD / LambdaNP2
                + 5651.3 * CHB / LambdaNP2
                - 34526.8 * CHW / LambdaNP2
                - 77320.9 * CHWB / LambdaNP2
                - 36523.8 * CDHB / LambdaNP2
                - 105717. * CDHW / LambdaNP2
                - 676758. * CHl1R[1][1] / LambdaNP2
                + 581864. * CHeR[1][1] / LambdaNP2
                - 1258.06 * CHl3R[0][0] / LambdaNP2
                - 677145. * CHl3R[1][1] / LambdaNP2
                - 3.389 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+4.494 * deltaMz()
                - 0.253 * deltaMh()
                - 0.397 * deltaaMZ()
                + 3.403 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 10.0) {

        C1 = 0.0; //NA

        mu +=
                +121595. * CHbox / LambdaNP2
                - 42528.7 * CHD / LambdaNP2
                - 3306.42 * CHB / LambdaNP2
                - 26428.1 * CHW / LambdaNP2
                - 65710.7 * CHWB / LambdaNP2
                - 55246.2 * CDHB / LambdaNP2
                - 154926. * CDHW / LambdaNP2
                - 972321. * CHl1R[1][1] / LambdaNP2
                + 835352. * CHeR[1][1] / LambdaNP2
                - 208.826 * CHl3R[0][0] / LambdaNP2
                - 970869. * CHl3R[1][1] / LambdaNP2
                - 3.401 * delta_GF
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+4.603 * deltaMz()
                - 0.147 * deltaMh()
                - 0.394 * deltaaMZ()
                + 3.403 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mummHmm()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    //(Assume similar to WBF.)
    mu += eeeWBFint + eeeWBFpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::mummttH(const double sqrt_s) const
{

    // Only Alpha scheme

    double mu = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 3.0) {

        C1 = 0.0037; // Use the same as CLIC

        mu +=
                +121703. * CHbox / LambdaNP2
                - 105827. * CuHR[2][2] / LambdaNP2
                - 60143.2 * CHD / LambdaNP2
                + 696642. * CHB / LambdaNP2
                + 749580. * CHW / LambdaNP2
                - 625570. * CHWB / LambdaNP2
                + 1203584. * CDHB / LambdaNP2
                + 3110823. * CDHW / LambdaNP2
                + 8600327. * CuWR[2][2] / LambdaNP2
                + 10933756. * CuBR[2][2] / LambdaNP2
                + 19536100. * CHl1R[1][1] / LambdaNP2
                - 16360523. * CHeR[1][1] / LambdaNP2
                + 22577.7 * CHuR[2][2] / LambdaNP2
                - 120.094 * CHl3R[0][0] / LambdaNP2
                + 19529711. * CHl3R[1][1] / LambdaNP2
                - 2.244 * delta_GF
                + 4.309 * -0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+2.486 * deltaMz()
                - 0.594 * deltaMh()
                + 0.777 * deltaaMZ()
                + 2.227 * deltaGmu()
                + 2.183 * deltamt());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 10.0) {

        C1 = 0.0037; //NA

        mu +=
                +121697. * CHbox / LambdaNP2
                - 99433. * CuHR[2][2] / LambdaNP2
                - 59412.6 * CHD / LambdaNP2
                + 977027. * CHB / LambdaNP2
                + 1069899. * CHW / LambdaNP2
                - 816019. * CHWB / LambdaNP2
                + 19093781. * CDHB / LambdaNP2
                + 48703755. * CDHW / LambdaNP2
                + 48598343. * CuWR[2][2] / LambdaNP2
                + 62025699. * CuBR[2][2] / LambdaNP2
                + 300770201. * CHl1R[1][1] / LambdaNP2
                - 257079386. * CHeR[1][1] / LambdaNP2
                + 37385. * CHuR[2][2] / LambdaNP2
                - 36.349 * CHl3R[0][0] / LambdaNP2
                + 299984515. * CHl3R[1][1] / LambdaNP2
                - 2.329 * delta_GF
                + 5.129 * -0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
                ;

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+2.661 * deltaMz()
                - 0.39 * deltaMh()
                + 0.693 * deltaaMZ()
                + 2.295 * deltaGmu()
                + 2.081 * deltamt());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mummttH()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    mu += eeettHint + eeettHpar;

    //  Linear contribution from Higgs self-coupling
    mu = mu + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    mu = mu + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}


////////////HIGGS DECAY WIDTHS AND BRANCHING RATIOS/////////////

double NPSMEFTd6General::computeGammaTotalRatio() const
{
    double width = 1.0;

    width += dGammaHTotR1;

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += dGammaHTotR2;
    }

    if (width < 0) return std::numeric_limits<double>::quiet_NaN();

    return width;

}

double NPSMEFTd6General::deltaGammaTotalRatio1() const
{
    double deltaGammaRatio;

    //  The change in the ratio asumming only SM decays
    deltaGammaRatio = (trueSM.computeBrHtogg() * deltaGammaHggRatio1()
            //            + trueSM.computeBrHtoWW() * deltaGammaHWWRatio1()
            //            + trueSM.computeBrHtoZZ() * deltaGammaHZZRatio1()
            + trueSM.computeBrHto4f() * deltaGammaH4fRatio1()
            + trueSM.computeBrHtoZga() * deltaGammaHZgaRatio1()
            + trueSM.computeBrHtogaga() * deltaGammaHgagaRatio1()
            + trueSM.computeBrHtomumu() * deltaGammaHmumuRatio1()
            + trueSM.computeBrHtotautau() * deltaGammaHtautauRatio1()
            + trueSM.computeBrHtocc() * deltaGammaHccRatio1()
            + trueSM.computeBrHtobb() * deltaGammaHbbRatio1());

    //  Add the effect of the invisible and exotic BR. Include also here the
    //  pure contribution from BrHinv and BrHexo even in case of no dim 6 contibutions    
    deltaGammaRatio = -1.0 + (1.0 + deltaGammaRatio) / (1.0 - BrHinv - BrHexo);

    return deltaGammaRatio;
}

double NPSMEFTd6General::deltaGammaTotalRatio1noError() const
{
    double deltaGammaRatio;

    //  The change in the ratio asumming only SM decays
    deltaGammaRatio = (trueSM.computeBrHtogg() * (deltaGammaHggRatio1() - eHggint - eHggpar)
            //            + trueSM.computeBrHtoWW() * (deltaGammaHWWRatio1() - eHWWint - eHWWpar )
            //            + trueSM.computeBrHtoZZ() * (deltaGammaHZZRatio1() - eHZZint - eHZZpar )          
            + trueSM.computeBrHto4f() * deltaGammaH4fRatio1()
            - trueSM.computeBrHtoWW() * (eHWWint + eHWWpar)
            - trueSM.computeBrHtoZZ() * (eHZZint + eHZZpar)
            + trueSM.computeBrHtoZga() * (deltaGammaHZgaRatio1() - eHZgaint - eHZgapar)
            + trueSM.computeBrHtogaga() * (deltaGammaHgagaRatio1() - eHgagaint - eHgagapar)
            + trueSM.computeBrHtomumu() * (deltaGammaHmumuRatio1() - eHmumuint - eHmumupar)
            + trueSM.computeBrHtotautau() * (deltaGammaHtautauRatio1() - eHtautauint - eHtautaupar)
            + trueSM.computeBrHtocc() * (deltaGammaHccRatio1() - eHccint - eHccpar)
            + trueSM.computeBrHtobb() * (deltaGammaHbbRatio1() - eHbbint - eHbbpar));

    //  Add the effect of the invisible and exotic BR. Include also here the
    //  pure contribution from BrHinv and BrHexo even in case of no dim 6 contibutions    
    deltaGammaRatio = -1.0 + (1.0 + deltaGammaRatio) / (1.0 - BrHinv - BrHexo);

    return deltaGammaRatio;
}

double NPSMEFTd6General::deltaGammaTotalRatio2() const
{
    double deltaGammaRatio;

    //  The change in the ratio asumming only SM decays
    deltaGammaRatio = trueSM.computeBrHtogg() * deltaGammaHggRatio2()
            //            + trueSM.computeBrHtoWW() * deltaGammaHWWRatio2()
            //            + trueSM.computeBrHtoZZ() * deltaGammaHZZRatio2()
            + trueSM.computeBrHto4f() * deltaGammaH4fRatio2()
            + trueSM.computeBrHtoZga() * deltaGammaHZgaRatio2()
            + trueSM.computeBrHtogaga() * deltaGammaHgagaRatio2()
            + trueSM.computeBrHtomumu() * deltaGammaHmumuRatio2()
            + trueSM.computeBrHtotautau() * deltaGammaHtautauRatio2()
            + trueSM.computeBrHtocc() * deltaGammaHccRatio2()
            + trueSM.computeBrHtobb() * deltaGammaHbbRatio2();

    //  Add the effect of the invisible and exotic BR and return     
    return (deltaGammaRatio / (1.0 - BrHinv - BrHexo));
}

double NPSMEFTd6General::GammaHggRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHggRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHggRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHggRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0066;

    dwidth = (+37526258. * CHG / LambdaNP2
            + cLHd6 * (
            +121248. * CHbox / LambdaNP2
            + 173353. * CuHR[1][1] / LambdaNP2
            - 129155. * CuHR[2][2] / LambdaNP2
            + 248530. * CdHR[2][2] / LambdaNP2
            - 30312.1 * CHD / LambdaNP2
            - 60624.1 * delta_GF / v() / v())
            );

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    //  Linear contribution from 4 top operators
    //  WARNING: The implementation of the log terms below and the use of RGd6SMEFTlogs() 
    //  may lead to double counting of certain log terms. RGd6SMEFTlogs() disabled for the moment
    dwidth = dwidth + cLHd6 * ((Cqu1R[2][2][2][2] / LambdaNP2)*(6.08 + cRGEon * 2.0 * 2.76 * log(mHl / Lambda_NP))*1000.
            + (Cqu8R[2][2][2][2] / LambdaNP2)*(8.11 + cRGEon * 2.0 * 3.68 * log(mHl / Lambda_NP))*1000.
            + (Cquqd1R[2][2][2][2] / LambdaNP2)*(15.7 + cRGEon * 2.0 * 9.21 * log(mHl / Lambda_NP))*1000.
            + (Cquqd8R[2][2][2][2] / LambdaNP2)*(2.98 + cRGEon * 2.0 * 1.76 * log(mHl / Lambda_NP))*1000.
            );

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (+1.003 * deltaGmu()
            + 2.31 * deltaaSMZ()
            + 3.276 * deltaMh()
            - 0.134 * deltamt()
            - 0.106 * deltamb()
            - 0.03 * deltamc());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHggint + eHggpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaHggRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHggRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHggRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHggRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaHWWRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHWWRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHWWRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHWWRatio1() const
{
    double dwidth = 0.0;

    //    double C1 = 0.0073;

    dwidth = deltaGammaHWW4fRatio1();

    //  Linear contribution from Higgs self-coupling
    //    dwidth = dwidth + cLHd6*(C1 + 2.0*dZH1)*deltaG_hhhRatio(); 
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    //    dwidth = dwidth + cLHd6*cLH3d62*dZH2*deltaG_hhhRatio()*deltaG_hhhRatio();

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //    dwidth += eHWWint + eHWWpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHWWRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    dwidth = deltaGammaHWW4fRatio2();


    return dwidth;

}

double NPSMEFTd6General::BrHWWRatio() const
{

    return BrHWW4fRatio();

}

double NPSMEFTd6General::GammaHWlvRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHWlvRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHWlvRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHWlvRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0073;

    dwidth = (+121875. * CHbox / LambdaNP2
            + 18351.9 * (1.0 / 2.0) * (CHl3R[0][0] + CHl3R[1][1]) / LambdaNP2
            - 159873. * CHD / LambdaNP2
            - 91288.7 * CHW / LambdaNP2
            - 284689. * CHWB / LambdaNP2
            + 37703.7 * CDHW / LambdaNP2
            - 3.292 * delta_GF
            - 15.14 * deltaMwd6());

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 );

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHWWint + eHWWpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHWlvRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHWlvRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHWlvRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHWlvRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::GammaHWW2l2vRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHWW2l2vRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHWW2l2vRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHWW2l2vRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0073;

    dwidth = (+120742. * CHbox / LambdaNP2
            + 131582. * (1.0 / 2.0) * (CHl3R[0][0] + CHl3R[1][1]) / LambdaNP2
            - 204043. * CHD / LambdaNP2
            - 91463.9 * CHW / LambdaNP2
            - 379529. * CHWB / LambdaNP2
            + 36848.2 * CDHW / LambdaNP2
            - 4.705 * delta_GF
            - 13.735 * deltaMwd6()
            - 0.965 * deltaGwd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (-12.123 * deltaMz()
            + 13.615 * deltaMh()
            + 1.756 * deltaaMZ()
            + 0.216 * deltaGmu());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHWWint + eHWWpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHWW2l2vRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHWW2l2vRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHWW2l2vRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHWW2l2vRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::GammaHWjjRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHWjjRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHWjjRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHWjjRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0073;

    dwidth = (+121611. * CHbox / LambdaNP2
            + 17701.4 * (1.0 / 2.0) * (CHq3R[0][0] + CHq3R[1][1]) / LambdaNP2
            - 159273. * CHD / LambdaNP2
            - 91021.6 * CHW / LambdaNP2
            - 282574. * CHWB / LambdaNP2
            + 37917.5 * CDHW / LambdaNP2
            - 3.259 * delta_GF
            - 15.198 * deltaMwd6());

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 ); 

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHWWint + eHWWpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHWjjRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHWjjRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHWjjRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHWjjRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::GammaHWW4jRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHWW4jRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHWW4jRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHWW4jRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0073;

    dwidth = (+121936. * CHbox / LambdaNP2
            + 138860. * (1.0 / 2.0) * (CHq3R[0][0] + CHq3R[1][1]) / LambdaNP2
            - 205023. * CHD / LambdaNP2
            - 89938.5 * CHW / LambdaNP2
            - 383944. * CHWB / LambdaNP2
            + 38244.6 * CDHW / LambdaNP2
            - 4.816 * delta_GF
            - 13.647 * deltaMwd6()
            - 0.959 * deltaGwd6());

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (-12.168 * deltaMz()
            + 13.66 * deltaMh()
            + 1.899 * deltaaMZ()
            + 0.189 * deltaGmu());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHWWint + eHWWpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHWW4jRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHWW4jRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHWW4jRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHWW4jRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::GammaHWffRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHWffRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHWffRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHWffRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0073;

    dwidth = (+121288. * CHbox / LambdaNP2
            + 5395.21 * (1.0 / 3.0) * (CHl3R[0][0] + CHl3R[1][1] + CHl3R[2][2]) / LambdaNP2
            + 11680.9 * (1.0 / 2.0) * (CHq3R[0][0] + CHq3R[1][1]) / LambdaNP2
            - 159787. * CHD / LambdaNP2
            - 91509.1 * CHW / LambdaNP2
            - 283092. * CHWB / LambdaNP2
            + 37845.1 * CDHW / LambdaNP2
            - 3.259 * delta_GF
            - 15.196 * deltaMwd6());

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 ); 

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHWWint + eHWWpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHWffRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHWffRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHWffRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHWffRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::GammaHWW4fRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHWW4fRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHWW4fRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHWW4fRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0073;

    double CWff, sf;

    CWff = (CHl3R[0][0] + CHl3R[1][1] + CHl3R[2][2]) * v2_over_LambdaNP2 +
            Nc * (CHq3R[0][0] + CHq3R[1][1]) * v2_over_LambdaNP2;

    CWff = CWff / (3.0 + 2.0 * Nc);

    sf = 90362.5 * (1.0 / 2.0) * (3.0 + 2.0 * Nc) / (Nc * v2); // Coefficient of the CWff term. From the CHq3R[0][0] term in the ME.

    dwidth = (+121886. * CHbox / LambdaNP2
            + sf * CWff
            - 204009. * CHD / LambdaNP2
            - 91455.7 * CHW / LambdaNP2
            - 382903. * CHWB / LambdaNP2
            + 38314.9 * CDHW / LambdaNP2
            - 4.757 * delta_GF
            - 13.716 * deltaMwd6()
            - 0.963 * deltaGwd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (-12.271 * deltaMz()
            + 13.665 * deltaMh()
            + 1.85 * deltaaMZ()
            + 0.224 * deltaGmu());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHWWint + eHWWpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHWW4fRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHWW4fRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHWW4fRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHWW4fRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::GammaHZZRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZZRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZZRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHZZRatio1() const
{
    double dwidth = 0.0;

    //    double C1 = 0.0083;

    dwidth = deltaGammaHZZ4fRatio1();

    //  Linear contribution from Higgs self-coupling
    //    dwidth = dwidth + cLHd6*(C1 + 2.0*dZH1)*deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    //    dwidth = dwidth + cLHd6*cLH3d62*dZH2*deltaG_hhhRatio()*deltaG_hhhRatio();

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //    dwidth += eHZZint + eHZZpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHZZRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    dwidth = deltaGammaHZZ4fRatio2();


    return dwidth;

}

double NPSMEFTd6General::BrHZZRatio() const
{
    return BrHZZ4fRatio();
}

double NPSMEFTd6General::GammaHZllRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZllRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZllRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHZllRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121715. * CHbox / LambdaNP2
            + 8726.9 * (1.0 / 2.0) * (CHl1R[0][0] + CHl1R[1][1]) / LambdaNP2
            - 7315.2 * (1.0 / 2.0) * (CHeR[0][0] + CHeR[1][1]) / LambdaNP2
            + 8726.9 * (1.0 / 2.0) * (CHl3R[0][0] + CHl3R[1][1]) / LambdaNP2
            - 5544.15 * CHD / LambdaNP2
            - 13560.9 * CHB / LambdaNP2
            - 45585.2 * CHW / LambdaNP2
            - 53507.9 * CHWB / LambdaNP2
            + 16829.2 * CDHB / LambdaNP2
            + 30766.6 * CDHW / LambdaNP2
            - 2.204 * delta_GF);

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 ); 

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHZZint + eHZZpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHZllRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHZllRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZllRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZllRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::GammaHZeeRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZeeRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZeeRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHZeeRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    //  Derived from the HZll expression for l=e only

    dwidth = (+121715. * CHbox / LambdaNP2
            + 8726.9 * CHl1R[0][0] / LambdaNP2
            - 7315.2 * CHeR[0][0] / LambdaNP2
            + 8726.9 * CHl3R[0][0] / LambdaNP2
            - 5544.15 * CHD / LambdaNP2
            - 13560.9 * CHB / LambdaNP2
            - 45585.2 * CHW / LambdaNP2
            - 53507.9 * CHWB / LambdaNP2
            + 16829.2 * CDHB / LambdaNP2
            + 30766.6 * CDHW / LambdaNP2
            - 2.204 * delta_GF);

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 ); 

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHZZint + eHZZpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHZeeRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::GammaHZmumuRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZmumuRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZmumuRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHZmumuRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    //  Derived from the HZll expression for l=mu only

    dwidth = (+121715. * CHbox / LambdaNP2
            + 8726.9 * CHl1R[1][1] / LambdaNP2
            - 7315.2 * CHeR[1][1] / LambdaNP2
            + 8726.9 * CHl3R[1][1] / LambdaNP2
            - 5544.15 * CHD / LambdaNP2
            - 13560.9 * CHB / LambdaNP2
            - 45585.2 * CHW / LambdaNP2
            - 53507.9 * CHWB / LambdaNP2
            + 16829.2 * CDHB / LambdaNP2
            + 30766.6 * CDHW / LambdaNP2
            - 2.204 * delta_GF);

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 ); 

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHZZint + eHZZpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHZmumuRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::GammaHZZ4lRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZZ4lRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZZ4lRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHZZ4lRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    double CZll, sf;

    CZll = gZlL * (-0.5 * (CHl1R[0][0] + CHl1R[1][1] + CHl3R[0][0] + CHl3R[1][1]) * v2_over_LambdaNP2) +
            gZlR * (-0.5 * (CHeR[0][0] + CHeR[1][1]) * v2_over_LambdaNP2);

    CZll = CZll / (2.0 * (gZlL * gZlL + gZlR * gZlR));

    sf = 124479. * (1.0 / 2.0) * (2.0 * (gZlL * gZlL + gZlR * gZlR)) / (-0.5 * gZlL * v2); // Coefficient of the CZll term. From the CHl1R[0][0] term in the ME.

    dwidth = (+122273. * CHbox / LambdaNP2
            + sf * CZll
            - 44025.7 * CHD / LambdaNP2
            - 13602.6 * CHB / LambdaNP2
            - 45248.6 * CHW / LambdaNP2
            - 88372.1 * CHWB / LambdaNP2
            + 16088.6 * CDHB / LambdaNP2
            + 29210.1 * CDHW / LambdaNP2
            - 3.462 * delta_GF
            - 0.808 * deltaGzd6());

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (-9.734 * deltaMz()
            + 15.37 * deltaMh()
            - 0.154 * deltaaMZ()
            + 2.339 * deltaGmu());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHZZ4lRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHZZ4lRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZZ4lRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZZ4lRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::GammaHZZ4eRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZZ4eRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZZ4eRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHZZ4eRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121386. * CHbox / LambdaNP2
            + 123413. * CHl1R[0][0] / LambdaNP2
            - 103717. * CHeR[0][0] / LambdaNP2
            + 123413. * CHl3R[0][0] / LambdaNP2
            - 44056.9 * CHD / LambdaNP2
            - 13385.3 * CHB / LambdaNP2
            - 45127.7 * CHW / LambdaNP2
            - 91708.7 * CHWB / LambdaNP2
            + 16138.9 * CDHB / LambdaNP2
            + 28759.4 * CDHW / LambdaNP2
            - 3.462 * delta_GF
            - 0.769 * deltaGzd6());

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (-9.228 * deltaMz()
            + 15.148 * deltaMh()
            - 0.229 * deltaaMZ()
            + 2.493 * deltaGmu());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHZZ4eRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHZZ4eRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZZ4eRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZZ4eRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::GammaHZZ2e2muRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZZ2e2muRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZZ2e2muRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHZZ2e2muRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+120836. * CHbox / LambdaNP2
            + 126374. * (1.0 / 2.0) * (CHl1R[0][0] + CHl1R[1][1]) / LambdaNP2
            - 109064. * (1.0 / 2.0) * (CHeR[0][0] + CHeR[1][1]) / LambdaNP2
            + 126374. * (1.0 / 2.0) * (CHl3R[0][0] + CHl3R[1][1]) / LambdaNP2
            - 42370.4 * CHD / LambdaNP2
            - 14299. * CHB / LambdaNP2
            - 47298.2 * CHW / LambdaNP2
            - 83098.2 * CHWB / LambdaNP2
            + 16362.7 * CDHB / LambdaNP2
            + 29503.4 * CDHW / LambdaNP2
            - 3.378 * delta_GF
            - 0.85 * deltaGzd6());

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (-10.07 * deltaMz()
            + 15.626 * deltaMh()
            - 0.128 * deltaaMZ()
            + 2.258 * deltaGmu());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHZZ2e2muRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHZZ2e2muRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZZ2e2muRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZZ2e2muRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::GammaHZZ4muRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZZ4muRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZZ4muRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHZZ4muRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+120688. * CHbox / LambdaNP2
            + 123059. * CHl1R[1][1] / LambdaNP2
            - 103862. * CHeR[1][1] / LambdaNP2
            + 123059. * CHl3R[1][1] / LambdaNP2
            - 43977.1 * CHD / LambdaNP2
            - 13575.5 * CHB / LambdaNP2
            - 45200.8 * CHW / LambdaNP2
            - 91625.2 * CHWB / LambdaNP2
            + 15449.3 * CDHB / LambdaNP2
            + 28489.5 * CDHW / LambdaNP2
            - 3.471 * delta_GF
            - 0.774 * deltaGzd6());

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (-9.254 * deltaMz()
            + 15.109 * deltaMh()
            - 0.207 * deltaaMZ()
            + 2.405 * deltaGmu());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHZZ4muRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHZZ4muRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZZ4muRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZZ4muRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::GammaHZvvRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZvvRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZvvRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHZvvRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121530. * CHbox / LambdaNP2
            - 7943.34 * (1.0 / 3.0) * (CHl1R[0][0] + CHl1R[1][1] + CHl1R[2][2]) / LambdaNP2
            + 7943.34 * (1.0 / 3.0) * (CHl3R[0][0] + CHl3R[1][1] + CHl3R[2][2]) / LambdaNP2
            - 229.41 * CHD / LambdaNP2
            - 13535.2 * CHB / LambdaNP2
            - 45480.6 * CHW / LambdaNP2
            - 24891. * CHWB / LambdaNP2
            + 16833. * CDHB / LambdaNP2
            + 30597.6 * CDHW / LambdaNP2
            - 2. * delta_GF);

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 ); 

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHZZint + eHZZpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHZvvRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHZvvRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZvvRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZvvRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::GammaHZZ4vRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZZ4vRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZZ4vRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHZZ4vRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+120596. * CHbox / LambdaNP2
            - 115532. * (1.0 / 3.0) * (CHl1R[0][0] + CHl1R[1][1] + CHl1R[2][2]) / LambdaNP2
            + 115532. * (1.0 / 3.0) * (CHl3R[0][0] + CHl3R[1][1] + CHl3R[2][2]) / LambdaNP2
            - 28744.1 * CHD / LambdaNP2
            - 13816.7 * CHB / LambdaNP2
            - 44782.1 * CHW / LambdaNP2
            - 25256.6 * CHWB / LambdaNP2
            + 15982.5 * CDHB / LambdaNP2
            + 28910.7 * CDHW / LambdaNP2
            - 3.013 * delta_GF
            - 0.787 * deltaGzd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (-10.49 * deltaMz()
            + 15.294 * deltaMh()
            + 0.255 * deltaaMZ()
            + 1.979 * deltaGmu());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHZZ4vRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHZZ4vRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZZ4vRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZZ4vRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::GammaHZuuRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZuuRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZuuRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHZuuRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121512. * CHbox / LambdaNP2
            - 9648.28 * (1.0 / 2.0) * (CHq1R[0][0] + CHq1R[1][1]) / LambdaNP2
            + 4218.6 * (1.0 / 2.0) * (CHuR[0][0] + CHuR[1][1]) / LambdaNP2
            + 9648.28 * (1.0 / 2.0) * (CHq3R[0][0] + CHq3R[1][1]) / LambdaNP2
            - 17762.5 * CHD / LambdaNP2
            - 13473.3 * CHB / LambdaNP2
            - 45667.9 * CHW / LambdaNP2
            - 110057. * CHWB / LambdaNP2
            + 16854.2 * CDHB / LambdaNP2
            + 30781.7 * CDHW / LambdaNP2
            - 2.6 * delta_GF);

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 ); 

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHZZint + eHZZpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHZuuRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHZuuRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZuuRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZuuRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::BrHZZ4uRatio() const
{
    double deltaBRratio;

    deltaBRratio = deltaGamma_Zf(quarks[UP])
            + deltaGamma_Zf(quarks[CHARM]);

    deltaBRratio = deltaBRratio /
            (trueSM.GammaZ(quarks[UP]) + trueSM.GammaZ(quarks[CHARM]));

    deltaBRratio = deltaBRratio - deltaGamma_Z() / trueSM.Gamma_Z();

    return ( BrHZuuRatio() + deltaBRratio);
}

double NPSMEFTd6General::GammaHZddRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZddRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZddRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHZddRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121756. * CHbox / LambdaNP2
            + 9252.73 * (1.0 / 3.0) * (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / LambdaNP2
            - 1471.03 * (1.0 / 3.0) * (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / LambdaNP2
            + 9252.73 * (1.0 / 3.0) * (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / LambdaNP2
            - 12714.3 * CHD / LambdaNP2
            - 13589.3 * CHB / LambdaNP2
            - 45689.4 * CHW / LambdaNP2
            - 85582.3 * CHWB / LambdaNP2
            + 17007.1 * CDHB / LambdaNP2
            + 30733.1 * CDHW / LambdaNP2
            - 2.427 * delta_GF);

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 ); 

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHZZint + eHZZpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHZddRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHZddRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZddRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZddRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::BrHZZ4dRatio() const
{
    double deltaBRratio;

    deltaBRratio = deltaGamma_Zf(quarks[DOWN])
            + deltaGamma_Zf(quarks[STRANGE])
            + deltaGamma_Zf(quarks[BOTTOM]);

    deltaBRratio = deltaBRratio /
            (trueSM.GammaZ(quarks[DOWN])
            + trueSM.GammaZ(quarks[STRANGE])
            + trueSM.GammaZ(quarks[BOTTOM]));

    deltaBRratio = deltaBRratio - deltaGamma_Z() / trueSM.Gamma_Z();

    return ( BrHZddRatio() + deltaBRratio);
}

double NPSMEFTd6General::GammaHZffRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZffRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZffRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHZffRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121551. * CHbox / LambdaNP2
            - 824.482 * (1.0 / 3.0) * (CHl1R[0][0] + CHl1R[1][1] + CHl1R[2][2]) / LambdaNP2
            + 1840.54 * (1.0 / 12.0) * (5.0 * CHq1R[0][0] + 5.0 * CHq1R[1][1] + 2.0 * CHq1R[2][2] - CHq3R[0][0] - CHq3R[1][1] + 2.0 * CHq3R[2][2]) / LambdaNP2
            - 795.383 * (1.0 / 3.0) * (CHeR[0][0] + CHeR[1][1] + CHeR[2][2]) / LambdaNP2
            + 1069.4 * (1.0 / 2.0) * (CHuR[0][0] + CHuR[1][1]) / LambdaNP2
            - 579.563 * (1.0 / 3.0) * (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / LambdaNP2
            + 3164.56 * (1.0 / 3.0) * (CHl3R[0][0] + CHl3R[1][1] + CHl3R[2][2]) / LambdaNP2
            + 6413.99 * (-1.0 / 12.0) * (CHq1R[0][0] + CHq1R[1][1] - 2.0 * CHq1R[2][2] - 5.0 * CHq3R[0][0] - 5.0 * CHq3R[1][1] - 2.0 * CHq3R[2][2]) / LambdaNP2
            - 10839.5 * CHD / LambdaNP2
            - 14222.3 * CHB / LambdaNP2
            - 45455.6 * CHW / LambdaNP2
            - 75343.1 * CHWB / LambdaNP2
            + 16804.9 * CDHB / LambdaNP2
            + 30421. * CDHW / LambdaNP2
            - 2.356 * delta_GF);

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    //dwidth += cHSM * ( 0.0 ); 

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    //dwidth += eHZZint + eHZZpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHZffRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHZffRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZffRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZffRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::GammaHZZ4fRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZZ4fRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZZ4fRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHZZ4fRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    double CZff, sf;

    CZff = gZvL * (-0.5 * (CHl1R[0][0] + CHl1R[1][1] + CHl1R[2][2] - CHl3R[0][0] - CHl3R[1][1] - CHl3R[2][2]) * v2_over_LambdaNP2) +
            gZlL * (-0.5 * (CHl1R[0][0] + CHl1R[1][1] + CHl1R[2][2] + CHl3R[0][0] + CHl3R[1][1] + CHl3R[2][2]) * v2_over_LambdaNP2) +
            gZlR * (-0.5 * (CHeR[0][0] + CHeR[1][1] + CHeR[2][2]) * v2_over_LambdaNP2) +
            Nc * (
            gZdL * (-0.5 * (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2] + CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) * v2_over_LambdaNP2) +
            gZdR * (-0.5 * (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) * v2_over_LambdaNP2) +
            gZuL * (-0.5 * (CHq1R[0][0] + CHq1R[1][1] - CHq3R[0][0] - CHq3R[1][1]) * v2_over_LambdaNP2) +
            gZuR * (-0.5 * (CHuR[0][0] + CHuR[1][1]) * v2_over_LambdaNP2)
            );

    CZff = CZff / (
            3.0 * (gZvL * gZvL + gZlL * gZlL + gZlR * gZlR) +
            Nc * (3.0 * (gZdL * gZdL + gZdR * gZdR) + 2.0 * (gZuL * gZuL + gZuR * gZuR))
            );

    sf = -11267.6 * (1.0 / 3.0) * (
            3.0 * (gZvL * gZvL + gZlL * gZlL + gZlR * gZlR) +
            Nc * (3.0 * (gZdL * gZdL + gZdR * gZdR) + 2.0 * (gZuL * gZuL + gZuR * gZuR))
            );

    sf = sf / (-0.5 * (gZlL + gZvL) * v2); // Coefficient of the CZff term. From the CHl1R[0][0] term in the ME.

    dwidth = (+121373. * CHbox / LambdaNP2
            + sf * CZff
            - 50927.1 * CHD / LambdaNP2
            - 14137.9 * CHB / LambdaNP2
            - 46350.1 * CHW / LambdaNP2
            - 126336. * CHWB / LambdaNP2
            + 16558.7 * CDHB / LambdaNP2
            + 29628.7 * CDHW / LambdaNP2
            - 3.715 * delta_GF
            - 0.834 * deltaGzd6()
            );

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (-9.548 * deltaMz()
            + 15.799 * deltaMh()
            - 0.412 * deltaaMZ()
            + 2.569 * deltaGmu());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;

}

double NPSMEFTd6General::deltaGammaHZZ4fRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHZZ4fRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZZ4fRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZZ4fRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::BrHVVRatio() const
{
    double BrZZSM = trueSM.computeBrHtoZZ(), BrWWSM = trueSM.computeBrHtoWW();

    return (BrZZSM * BrHZZRatio() + BrWWSM * BrHWWRatio()) / (BrZZSM + BrWWSM);
}

double NPSMEFTd6General::GammaHZgaRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHZgaRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHZgaRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHZgaRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0;

    //  It includes modifications of Zff vertices and MW, but not on the pure VVV and VVVV vertices

    //  Write the tree-level contributions directly as a function 
    //  of delta_ZA (or deltaG1_hZA()) to account for variations of sw2 and cw2

    dwidth = (-71769.02 * deltaG1_hZA()
            //            +14894914. * CHB / LambdaNP2
            //            -14894913. * CHW / LambdaNP2
            //            +9508089. * CHWB / LambdaNP2
            //            -2869576. * CDHB / LambdaNP2
            //            +1572613. * CDHW / LambdaNP2            
            + cLHd6 * (
            +120002. * CHbox / LambdaNP2
            + 50.12 * CHl1R[2][2] / LambdaNP2
            + 17401. * CHq1R[2][2] / LambdaNP2
            + 50.12 * CHeR[2][2] / LambdaNP2
            + 17188.7 * CHuR[2][2] / LambdaNP2
            + 212.376 * CHdR[2][2] / LambdaNP2
            + 50.12 * CHl3R[2][2] / LambdaNP2
            - 16976.3 * CHq3R[2][2] / LambdaNP2
            - 373.856 * CeHR[2][2] / LambdaNP2
            - 2953.05 * CuHR[1][1] / LambdaNP2
            + 6636.34 * CuHR[2][2] / LambdaNP2
            - 6121.66 * CdHR[2][2] / LambdaNP2
            - 111254. * CHD / LambdaNP2
            - 162538. * CHWB / LambdaNP2
            - 96076.1 * delta_GF / v() / v()
            - 0.123 * deltaMwd6())
            );

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (+1. * deltaa0()
            - 0.629 * deltaaMZ()
            + 2.629 * deltaGmu()
            - 4.926 * deltaMz()
            + 0.004 * deltaaSMZ()
            + 11.167 * deltaMh()
            + 0.013 * deltamt()
            + 0.004 * deltamb()
            + 0.001 * deltamc()
            + 0. * deltamtau());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZgaint + eHZgapar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaHZgaRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHZgaRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHZgaRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHZgaRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::BrHZgallRatio() const
{
    double deltaBRratio;

    deltaBRratio = deltaGamma_Zf(leptons[ELECTRON])
            + deltaGamma_Zf(leptons[MU]);

    deltaBRratio = deltaBRratio /
            (trueSM.GammaZ(leptons[ELECTRON]) + trueSM.GammaZ(leptons[MU]));

    deltaBRratio = deltaBRratio - deltaGamma_Z() / trueSM.Gamma_Z();

    return ( BrHZgaRatio() + deltaBRratio);
}

double NPSMEFTd6General::BrHZgaeeRatio() const
{
    double deltaBRratio;

    deltaBRratio = deltaGamma_Zf(leptons[ELECTRON]) / (trueSM.GammaZ(leptons[ELECTRON]));

    deltaBRratio = deltaBRratio - deltaGamma_Z() / trueSM.Gamma_Z();

    return ( BrHZgaRatio() + deltaBRratio);
}

double NPSMEFTd6General::BrHZgamumuRatio() const
{
    double deltaBRratio;

    deltaBRratio = deltaGamma_Zf(leptons[MU]) / (trueSM.GammaZ(leptons[MU]));

    deltaBRratio = deltaBRratio - deltaGamma_Z() / trueSM.Gamma_Z();

    return ( BrHZgaRatio() + deltaBRratio);
}

double NPSMEFTd6General::GammaHgagaRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHgagaRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHgagaRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHgagaRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0049;

    //  It does not include modifications of MW

    //  Write the tree-level contributions directly as a function 
    //  of delta_AA (or deltaG_hAA) to account for variations of sw2 and cw2

    dwidth = (-255156.97 * deltaG_hAA()
            //            -48314158. * CHB / LambdaNP2
            //            -14510502. * CHW / LambdaNP2
            //            +26477588. * CHWB / LambdaNP2 
            + cLHd6 * (
            +119766. * CHbox / LambdaNP2
            - 42565.7 * CeHR[2][2] / LambdaNP2
            - 48868.1 * CuHR[1][1] / LambdaNP2
            + 32078.2 * CuHR[2][2] / LambdaNP2
            - 18428.3 * CdHR[2][2] / LambdaNP2
            - 137452. * CHD / LambdaNP2
            - 235677. * CHWB / LambdaNP2
            - 124462. * delta_GF / v() / v()
            - 1.257 * deltaMwd6())
            );

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    //  Linear contribution from 4 top operators
    //  WARNING: The implementation of the log terms below and the use of RGd6SMEFTlogs() 
    //  may lead to double counting of certain log terms. RGd6SMEFTlogs() disabled for the moment
    dwidth = dwidth + cLHd6 * ((Cqu1R[2][2][2][2] / LambdaNP2)*(-1.76 - cRGEon * 2.0 * 0.8 * log(mHl / Lambda_NP))*1000.
            + (Cqu8R[2][2][2][2] / LambdaNP2)*(-2.09 - cRGEon * 2.0 * 1.07 * log(mHl / Lambda_NP))*1000.
            + (Cquqd1R[2][2][2][2] / LambdaNP2)*(-1.30 - cRGEon * 2.0 * 0.78 * log(mHl / Lambda_NP))*1000.
            + (Cquqd8R[2][2][2][2] / LambdaNP2)*(-0.25 - cRGEon * 2.0 * 0.15 * log(mHl / Lambda_NP))*1000.
            );

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (+2. * deltaa0()
            + 0.27 * deltaaMZ()
            + 0.736 * deltaGmu()
            - 1.797 * deltaMz()
            + 0.02 * deltaaSMZ()
            + 4.195 * deltaMh()
            + 0.047 * deltamt()
            + 0.008 * deltamb()
            + 0.009 * deltamc()
            + 0.01 * deltamtau());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHgagaint + eHgagapar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaHgagaRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHgagaRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHgagaRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHgagaRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaHmumuRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHmumuRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHmumuRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHmumuRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0;

    dwidth = (+121248. * CHbox / LambdaNP2
            - 199792511. * CeHR[1][1] / LambdaNP2
            - 30312.1 * CHD / LambdaNP2
            - 60624.1 * delta_GF / v() / v());

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (+1. * deltaGmu()
            + 1. * deltaMh());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHmumuint + eHmumupar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaHmumuRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHmumuRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHmumuRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHmumuRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaHtautauRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHtautauRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHtautauRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHtautauRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0;

    dwidth = (+121248. * CHbox / LambdaNP2
            - 11880369. * CeHR[2][2] / LambdaNP2
            - 30312.1 * CHD / LambdaNP2
            - 60624.1 * delta_GF / v() / v());

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (+1. * deltaGmu()
            + 1.002 * deltaMh()
            + 1.998 * deltamtau());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHtautauint + eHtautaupar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaHtautauRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHtautauRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHtautauRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHtautauRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaHccRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHccRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHccRatio2();
    }

    return width;

}

double NPSMEFTd6General::deltaGammaHccRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0;

    if (FlagLoopHd6) {

        dwidth = (+121248. * CHbox / LambdaNP2
                - 16421890. * CuHR[1][1] / LambdaNP2
                - 992.159 * CuHR[2][2] / LambdaNP2
                - 30312.1 * CHD / LambdaNP2
                - 60624.1 * delta_GF / v() / v());

    } else {

        dwidth = (+121248. * CHbox / LambdaNP2
                - 16556668. * CuHR[1][1] / LambdaNP2
                - 30312.1 * CHD / LambdaNP2
                - 60624.1 * delta_GF / v() / v());
    }

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (+1. * deltaGmu()
            - 0.789 * deltaaSMZ()
            + 1.004 * deltaMh()
            + 0.001 * deltamt()
            + 1.995 * deltamc());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHccint + eHccpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaHccRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHccRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHccRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHccRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaHbbRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHXXRatio1
    double width = 1.0;

    width += deltaGammaHbbRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHbbRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaHbbRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0;

    if (FlagLoopHd6) {

        dwidth = (+121248. * CHbox / LambdaNP2
                - 558.186 * CuHR[2][2] / LambdaNP2
                - 5027051. * CdHR[2][2] / LambdaNP2
                - 30312.1 * CHD / LambdaNP2
                - 60624.1 * delta_GF / v() / v());

    } else {

        dwidth = (+121248. * CHbox / LambdaNP2
                - 5050180. * CdHR[2][2] / LambdaNP2
                - 30312.1 * CHD / LambdaNP2
                - 60624.1 * delta_GF / v() / v());
    }

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    //  Linear contribution from 4 top operators
    //  WARNING: The implementation of the log terms below and the use of RGd6SMEFTlogs() 
    //  may lead to double counting of certain log terms. RGd6SMEFTlogs() disabled for the moment
    dwidth = dwidth + cLHd6 * ((Cquqd1R[2][2][2][2] / LambdaNP2)*(92.5 + cRGEon * 2.0 * 168. * log(mHl / Lambda_NP))*1000.
            + (Cquqd8R[2][2][2][2] / LambdaNP2)*(17.6 + cRGEon * 2.0 * 32.0 * log(mHl / Lambda_NP))*1000.
            );

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (+1. * deltaGmu()
            - 0.23 * deltaaSMZ()
            + 1.007 * deltaMh()
            + 0.001 * deltamt()
            + 1.992 * deltamb());

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHbbint + eHbbpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaHbbRatio2() const
{
    double dwidth = 0.0;


    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHbbRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHbbRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHbbRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2L2LRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2L2LRatio1
    double width = 1.0;

    width += deltaGammaH2L2LRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2L2LRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2L2LRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121302. * CHbox / LambdaNP2
            - 59592.5 * CHB / LambdaNP2
            - 6187.97 * CHW / LambdaNP2
            + 27262.7 * CDHB / LambdaNP2
            + 23783.2 * CDHW / LambdaNP2
            + 42404.3 * (CHl1R[0][0] + CHl3R[0][0]) / LambdaNP2
            + 42440.7 * (CHl1R[1][1] + CHl3R[1][1]) / LambdaNP2
            + 42633.3 * (CHl1R[2][2] + CHl3R[2][2]) / LambdaNP2
            - 36384.4 * CHeR[0][0] / LambdaNP2
            - 36395.3 * CHeR[1][1] / LambdaNP2
            - 36589.1 * CHeR[2][2] / LambdaNP2
            + cAsch * (-42519.3 * CHD / LambdaNP2
            - 112124. * CHWB / LambdaNP2
            - 3.401 * delta_GF
            - 0.836 * deltaGzd6()
            )
            + cWsch * (-1940.8 * CHD / LambdaNP2
            - 23529. * CHWB / LambdaNP2
            - 3.002 * delta_GF
            - 0.836 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-10.484 * deltaMz()
            + 16.233 * deltaMh()
            - 0.114 * deltaaMZ()
            + 2.278 * deltaGmu()))
            + cWsch * (cHSM * (-11.298 * deltaMz()
            + 16.233 * deltaMh()
            + 2.163 * deltaGmu()
            + 0.552 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2L2LRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2L2LRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2L2LRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2L2LRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2e2muRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2e2muRatio1
    double width = 1.0;

    width += deltaGammaH2e2muRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2e2muRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2e2muRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121249. * CHbox / LambdaNP2
            - 59336.7 * CHB / LambdaNP2
            - 7152.53 * CHW / LambdaNP2
            + 27264.5 * CDHB / LambdaNP2
            + 23839.6 * CDHW / LambdaNP2
            + 63753.6 * (CHl1R[0][0] + CHl3R[0][0]) / LambdaNP2
            + 63771.3 * (CHl1R[1][1] + CHl3R[1][1]) / LambdaNP2
            - 54745.8 * CHeR[0][0] / LambdaNP2
            - 54706. * CHeR[1][1] / LambdaNP2
            + cAsch * (-42424.4 * CHD / LambdaNP2
            - 111863. * CHWB / LambdaNP2
            - 3.401 * delta_GF
            - 0.837 * deltaGzd6()
            )
            + cWsch * (-2206.38 * CHD / LambdaNP2
            - 23677.2 * CHWB / LambdaNP2
            - 3.001 * delta_GF
            - 0.837 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-10.452 * deltaMz()
            + 16.193 * deltaMh()
            - 0.096 * deltaaMZ()
            + 2.281 * deltaGmu()))
            + cWsch * (cHSM * (-11.25 * deltaMz()
            + 16.193 * deltaMh()
            + 2.17 * deltaGmu()
            + 0.522 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2e2muRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2e2muRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2e2muRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2e2muRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2v2vRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2v2vRatio1
    double width = 1.0;

    width += deltaGammaH2v2vRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2v2vRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2v2vRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121344. * CHbox / LambdaNP2
            - 14021.1 * CHB / LambdaNP2
            - 46733.1 * CHW / LambdaNP2
            + 15986.2 * CDHB / LambdaNP2
            + 29166.5 * CDHW / LambdaNP2
            - 39647.5 * (CHl1R[0][0] - CHl3R[0][0]) / LambdaNP2
            - 39690.9 * (CHl1R[1][1] - CHl3R[1][1]) / LambdaNP2
            - 39622.3 * (CHl1R[2][2] - CHl3R[2][2]) / LambdaNP2
            + cAsch * (-30324.8 * CHD / LambdaNP2
            - 25575.1 * CHWB / LambdaNP2
            - 3.003 * delta_GF
            - 0.847 * deltaGzd6()
            )
            + cWsch * (-30324.8 * CHD / LambdaNP2
            - 25575.1 * CHWB / LambdaNP2
            - 3.003 * delta_GF
            - 0.847 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-10.87 * deltaMz()
            + 15.738 * deltaMh()
            + 0.292 * deltaaMZ()
            + 1.853 * deltaGmu()))
            + cWsch * (cHSM * (-8.952 * deltaMz()
            + 15.738 * deltaMh()
            + 2.164 * deltaGmu()
            - 1.149 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2v2vRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2v2vRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2v2vRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2v2vRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2L2vRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2L2vRatio1
    double width = 1.0;

    width += deltaGammaH2L2vRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2L2vRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2L2vRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121291. * CHbox / LambdaNP2
            - 35349.6 * CHB / LambdaNP2
            - 27095.7 * CHW / LambdaNP2
            + 21443.2 * CDHB / LambdaNP2
            + 26588.4 * CDHW / LambdaNP2
            + 3026.29 * CHl1R[0][0] / LambdaNP2
            + 3021.87 * CHl1R[1][1] / LambdaNP2
            + 2746.62 * CHl1R[2][2] / LambdaNP2
            - 18924.3 * CHeR[0][0] / LambdaNP2
            - 18918.4 * CHeR[1][1] / LambdaNP2
            - 18820.4 * CHeR[2][2] / LambdaNP2
            + 41085.2 * CHl3R[0][0] / LambdaNP2
            + 41121.1 * CHl3R[1][1] / LambdaNP2
            + 41134.2 * CHl3R[2][2] / LambdaNP2
            + cAsch * (-36393. * CHD / LambdaNP2
            - 69325.9 * CHWB / LambdaNP2
            - 3.201 * delta_GF
            - 0.846 * deltaGzd6()
            )
            + cWsch * (-16170.3 * CHD / LambdaNP2
            - 24273.2 * CHWB / LambdaNP2
            - 3. * delta_GF
            - 0.846 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-10.683 * deltaMz()
            + 15.939 * deltaMh()
            + 0.095 * deltaaMZ()
            + 2.099 * deltaGmu()))
            + cWsch * (cHSM * (-10.108 * deltaMz()
            + 15.939 * deltaMh()
            + 2.178 * deltaGmu()
            - 0.402 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2L2vRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2L2vRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2L2vRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2L2vRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2L2v2Ratio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2L2v2Ratio1
    double width = 1.0;

    width += deltaGammaH2L2v2Ratio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2L2v2Ratio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2L2v2Ratio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121298. * CHbox / LambdaNP2
            - 35499.1 * CHB / LambdaNP2
            - 27241.9 * CHW / LambdaNP2
            + 21422.8 * CDHB / LambdaNP2
            + 26606.6 * CDHW / LambdaNP2
            + 18600.1 * CHl1R[0][0] / LambdaNP2
            + 18562.6 * CHl1R[1][1] / LambdaNP2
            - 28682. * CHl1R[2][2] / LambdaNP2
            - 28294.2 * CHeR[0][0] / LambdaNP2
            - 28285.3 * CHeR[1][1] / LambdaNP2
            + 47342.8 * CHl3R[0][0] / LambdaNP2
            + 47360.7 * CHl3R[1][1] / LambdaNP2
            + 28708.8 * CHl3R[2][2] / LambdaNP2
            + cAsch * (-36443.1 * CHD / LambdaNP2
            - 68837.8 * CHWB / LambdaNP2
            - 3.201 * delta_GF
            - 0.839 * deltaGzd6()
            )
            + cWsch * (-16226. * CHD / LambdaNP2
            - 24353. * CHWB / LambdaNP2
            - 3.002 * delta_GF
            - 0.839 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-10.697 * deltaMz()
            + 16.002 * deltaMh()
            + 0.083 * deltaaMZ()
            + 2.115 * deltaGmu()))
            + cWsch * (cHSM * (-10.137 * deltaMz()
            + 16.002 * deltaMh()
            + 2.179 * deltaGmu()
            - 0.466 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2L2v2Ratio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2L2v2Ratio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2L2v2Ratio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2L2v2Ratio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2e2vRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2e2vRatio1
    double width = 1.0;

    width += deltaGammaH2e2vRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2e2vRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2e2vRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121287. * CHbox / LambdaNP2
            - 35405.9 * CHB / LambdaNP2
            - 27195.5 * CHW / LambdaNP2
            + 21469.4 * CDHB / LambdaNP2
            + 26548.6 * CDHW / LambdaNP2
            + 65790.6 * (CHl1R[0][0] + CHl3R[0][0]) / LambdaNP2
            - 28690.7 * (CHl1R[1][1] - CHl3R[1][1]) / LambdaNP2
            - 28703.9 * (CHl1R[2][2] - CHl3R[2][2]) / LambdaNP2
            - 56575.7 * CHeR[0][0] / LambdaNP2
            + cAsch * (-36350.8 * CHD / LambdaNP2
            - 68896.2 * CHWB / LambdaNP2
            - 3.199 * delta_GF
            - 0.846 * deltaGzd6())
            + cWsch * (-16304.9 * CHD / LambdaNP2
            - 24376.4 * CHWB / LambdaNP2
            - 3. * delta_GF
            - 0.846 * deltaGzd6())
            );

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (cAsch * (-10.705 * deltaMz()
            + 15.922 * deltaMh()
            + 0.079 * deltaaMZ()
            + 2.103 * deltaGmu())
            + cWsch * (
            -10.099 * deltaMz()
            + 15.922 * deltaMh()
            + 2.191 * deltaGmu()
            - 0.445 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2e2vRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2e2vRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2e2vRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2e2vRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2mu2vRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2mu2vRatio1
    double width = 1.0;

    width += deltaGammaH2mu2vRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2mu2vRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2mu2vRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121291. * CHbox / LambdaNP2
            - 35658.4 * CHB / LambdaNP2
            - 26866.3 * CHW / LambdaNP2
            + 21500.1 * CDHB / LambdaNP2
            + 26571.5 * CDHW / LambdaNP2
            - 28684.4 * (CHl1R[0][0] - CHl3R[0][0]) / LambdaNP2
            + 65832. * (CHl1R[1][1] + CHl3R[1][1]) / LambdaNP2
            - 28703.3 * (CHl1R[2][2] - CHl3R[2][2]) / LambdaNP2
            - 56559.6 * CHeR[1][1] / LambdaNP2
            + cAsch * (-36391.6 * CHD / LambdaNP2
            - 69347.6 * CHWB / LambdaNP2
            - 3.198 * delta_GF
            - 0.842 * deltaGzd6())
            + cWsch * (-16131.8 * CHD / LambdaNP2
            - 24298.9 * CHWB / LambdaNP2
            - 3. * delta_GF
            - 0.842 * deltaGzd6())
            );

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (cAsch * (-10.716 * deltaMz()
            + 15.962 * deltaMh()
            + 0.082 * deltaaMZ()
            + 2.075 * deltaGmu())
            + cWsch * (-10.13 * deltaMz()
            + 15.962 * deltaMh()
            + 2.177 * deltaGmu()
            - 0.489 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2mu2vRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2mu2vRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2mu2vRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2mu2vRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2u2uRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2u2uRatio1
    double width = 1.0;

    width += deltaGammaH2u2uRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2u2uRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2u2uRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121242. * CHbox / LambdaNP2
            - 147406. * CHB / LambdaNP2
            + 73926.6 * CHW / LambdaNP2
            + 47688.3 * CDHB / LambdaNP2
            + 12016.1 * CDHW / LambdaNP2
            - 71435.3 * (CHq1R[0][0] - CHq3R[0][0]) / LambdaNP2
            - 71331.9 * (CHq1R[1][1] - CHq3R[1][1]) / LambdaNP2
            + 31760.4 * CHuR[0][0] / LambdaNP2
            + 31666.6 * CHuR[1][1] / LambdaNP2
            + cAsch * (-66129.8 * CHD / LambdaNP2
            - 270623. * CHWB / LambdaNP2
            - 4.182 * delta_GF
            - 0.827 * deltaGzd6()
            )
            + cWsch * (+53075.8 * CHD / LambdaNP2
            - 9701.32 * CHWB / LambdaNP2
            - 3.002 * delta_GF
            - 0.827 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.043 * deltaMz()
            + 16.707 * deltaMh()
            - 0.908 * deltaaMZ()
            + 3.065 * deltaGmu()))
            + cWsch * (cHSM * (-15.04 * deltaMz()
            + 16.707 * deltaMh()
            + 2.177 * deltaGmu()
            + 4.215 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2u2uRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2u2uRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2u2uRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2u2uRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2d2dRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2d2dRatio1
    double width = 1.0;

    width += deltaGammaH2d2dRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2d2dRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2d2dRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121209. * CHbox / LambdaNP2
            - 109493. * CHB / LambdaNP2
            + 40559.6 * CHW / LambdaNP2
            + 39022.8 * CDHB / LambdaNP2
            + 17020.8 * CDHW / LambdaNP2
            + 43704.5 * (CHq1R[0][0] + CHq3R[0][0]) / LambdaNP2
            + 43686.8 * (CHq1R[1][1] + CHq3R[1][1]) / LambdaNP2
            + 48405. * (CHq1R[2][2] + CHq3R[2][2]) / LambdaNP2
            - 7957.66 * CHdR[0][0] / LambdaNP2
            - 7942.9 * CHdR[1][1] / LambdaNP2
            - 8231.05 * CHdR[2][2] / LambdaNP2
            + cAsch * (-55688.4 * CHD / LambdaNP2
            - 202420. * CHWB / LambdaNP2
            - 3.837 * delta_GF
            - 0.829 * deltaGzd6()
            )
            + cWsch * (+28762.7 * CHD / LambdaNP2
            - 17533.6 * CHWB / LambdaNP2
            - 3. * delta_GF
            - 0.829 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.78 * deltaMz()
            + 16.533 * deltaMh()
            - 0.55 * deltaaMZ()
            + 2.769 * deltaGmu()))
            + cWsch * (cHSM * (-13.39 * deltaMz()
            + 16.533 * deltaMh()
            + 2.228 * deltaGmu()
            + 2.601 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2d2dRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2d2dRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2d2dRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2d2dRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2u2dRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2u2dRatio1
    double width = 1.0;

    width += deltaGammaH2u2dRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2u2dRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2u2dRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121245. * CHbox / LambdaNP2
            - 129896. * CHB / LambdaNP2
            + 58951.9 * CHW / LambdaNP2
            + 43749.1 * CDHB / LambdaNP2
            + 14365.1 * CDHW / LambdaNP2
            - 18953.2 * CHq1R[0][0] / LambdaNP2
            - 18954.1 * CHq1R[1][1] / LambdaNP2
            + 36775. * CHq1R[2][2] / LambdaNP2
            + 15639.1 * CHuR[0][0] / LambdaNP2
            + 15598.5 * CHuR[1][1] / LambdaNP2
            - 2951.74 * CHdR[0][0] / LambdaNP2
            - 2940.03 * CHdR[1][1] / LambdaNP2
            - 6238.49 * CHdR[2][2] / LambdaNP2
            + 51319. * CHq3R[0][0] / LambdaNP2
            + 51289.2 * CHq3R[1][1] / LambdaNP2
            + 36755.6 * CHq3R[2][2] / LambdaNP2
            + cAsch * (-60973.2 * CHD / LambdaNP2
            - 238821. * CHWB / LambdaNP2
            - 4.013 * delta_GF
            - 0.832 * deltaGzd6()
            )
            + cWsch * (+41194.1 * CHD / LambdaNP2
            - 14774.7 * CHWB / LambdaNP2
            - 3.001 * delta_GF
            - 0.832 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.34 * deltaMz()
            + 16.613 * deltaMh()
            - 0.716 * deltaaMZ()
            + 2.838 * deltaGmu()))
            + cWsch * (cHSM * (-14.238 * deltaMz()
            + 16.613 * deltaMh()
            + 2.133 * deltaGmu()
            + 3.346 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2u2dRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2u2dRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2u2dRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2u2dRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2L2uRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2L2uRatio1
    double width = 1.0;

    width += deltaGammaH2L2uRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2L2uRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2L2uRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121251. * CHbox / LambdaNP2
            - 103956. * CHB / LambdaNP2
            + 35760.1 * CHW / LambdaNP2
            + 38002.6 * CDHB / LambdaNP2
            + 17867.3 * CDHW / LambdaNP2
            + 21276.1 * (CHl1R[0][0] + CHl3R[0][0]) / LambdaNP2
            + 21284.8 * (CHl1R[1][1] + CHl3R[1][1]) / LambdaNP2
            + 21179.4 * (CHl1R[2][2] + CHl3R[2][2]) / LambdaNP2
            - 35906.7 * (CHq1R[0][0] - CHq3R[0][0]) / LambdaNP2
            - 35849.3 * (CHq1R[1][1] - CHq3R[1][1]) / LambdaNP2
            - 18274.6 * CHeR[0][0] / LambdaNP2
            - 18258.1 * CHeR[1][1] / LambdaNP2
            - 18170.5 * CHeR[2][2] / LambdaNP2
            + 15975.7 * CHuR[0][0] / LambdaNP2
            + 15912.4 * CHuR[1][1] / LambdaNP2
            + cAsch * (-54348.3 * CHD / LambdaNP2
            - 194795. * CHWB / LambdaNP2
            - 3.791 * delta_GF
            - 0.836 * deltaGzd6()
            )
            + cWsch * (+25556.3 * CHD / LambdaNP2
            - 19191.5 * CHWB / LambdaNP2
            - 3. * delta_GF
            - 0.836 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.689 * deltaMz()
            + 16.184 * deltaMh()
            - 0.517 * deltaaMZ()
            + 2.692 * deltaGmu()))
            + cWsch * (cHSM * (-13.135 * deltaMz()
            + 16.184 * deltaMh()
            + 2.157 * deltaGmu()
            + 2.403 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2L2uRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2L2uRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2L2uRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2L2uRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2L2dRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2L2dRatio1
    double width = 1.0;

    width += deltaGammaH2L2dRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2L2dRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2L2dRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121289. * CHbox / LambdaNP2
            - 84134.2 * CHB / LambdaNP2
            + 17402.7 * CHW / LambdaNP2
            + 33258.3 * CDHB / LambdaNP2
            + 20429.8 * CDHW / LambdaNP2
            + 21075. * (CHl1R[0][0] + CHl3R[0][0]) / LambdaNP2
            + 21073.9 * (CHl1R[1][1] + CHl3R[1][1]) / LambdaNP2
            + 20966.2 * (CHl1R[2][2] + CHl3R[2][2]) / LambdaNP2
            + 23026.5 * (CHq1R[0][0] + CHq3R[0][0]) / LambdaNP2
            + 23023.9 * (CHq1R[1][1] + CHq3R[1][1]) / LambdaNP2
            + 22666. * (CHq1R[2][2] + CHq3R[2][2]) / LambdaNP2
            - 18090.2 * CHeR[0][0] / LambdaNP2
            - 18067. * CHeR[1][1] / LambdaNP2
            - 17980.6 * CHeR[2][2] / LambdaNP2
            - 4190.57 * CHdR[0][0] / LambdaNP2
            - 4189.38 * CHdR[1][1] / LambdaNP2
            - 3850.11 * CHdR[2][2] / LambdaNP2
            + cAsch * (-48948.9 * CHD / LambdaNP2
            - 158101. * CHWB / LambdaNP2
            - 3.617 * delta_GF
            - 0.837 * deltaGzd6()
            )
            + cWsch * (+13172. * CHD / LambdaNP2
            - 21275. * CHWB / LambdaNP2
            - 3. * delta_GF
            - 0.837 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-10.043 * deltaMz()
            + 16.281 * deltaMh()
            - 0.342 * deltaaMZ()
            + 2.516 * deltaGmu()))
            + cWsch * (cHSM * (-12.322 * deltaMz()
            + 16.281 * deltaMh()
            + 2.201 * deltaGmu()
            + 1.57 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2L2dRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2L2dRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2L2dRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2L2dRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2v2uRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2v2uRatio1
    double width = 1.0;

    width += deltaGammaH2v2uRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2v2uRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2v2uRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121248. * CHbox / LambdaNP2
            - 76316.6 * CHB / LambdaNP2
            + 13981.5 * CHW / LambdaNP2
            + 31756.8 * CDHB / LambdaNP2
            + 20941.3 * CDHW / LambdaNP2
            - 19052.2 * (CHl1R[0][0] - CHl3R[0][0]) / LambdaNP2
            - 19081.3 * (CHl1R[1][1] - CHl3R[1][1]) / LambdaNP2
            - 19088.9 * (CHl1R[2][2] - CHl3R[2][2]) / LambdaNP2
            - 37234.1 * (CHq1R[0][0] - CHq3R[0][0]) / LambdaNP2
            - 37155.9 * (CHq1R[1][1] - CHq3R[1][1]) / LambdaNP2
            + 16564.7 * CHuR[0][0] / LambdaNP2
            + 16487.2 * CHuR[1][1] / LambdaNP2
            + cAsch * (-48203. * CHD / LambdaNP2
            - 150929. * CHWB / LambdaNP2
            - 3.589 * delta_GF
            - 0.849 * deltaGzd6()
            )
            + cWsch * (+11461.3 * CHD / LambdaNP2
            - 20220.2 * CHWB / LambdaNP2
            - 2.998 * delta_GF
            - 0.849 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.867 * deltaMz()
            + 15.889 * deltaMh()
            - 0.28 * deltaaMZ()
            + 2.519 * deltaGmu()))
            + cWsch * (cHSM * (-11.908 * deltaMz()
            + 15.889 * deltaMh()
            + 2.169 * deltaGmu()
            + 1.303 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2v2uRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2v2uRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2v2uRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2v2uRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2v2dRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2v2dRatio1
    double width = 1.0;

    width += deltaGammaH2v2dRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2v2dRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2v2dRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121140. * CHbox / LambdaNP2
            - 57872.8 * CHB / LambdaNP2
            - 4371.77 * CHW / LambdaNP2
            + 27059.2 * CDHB / LambdaNP2
            + 23376.6 * CDHW / LambdaNP2
            - 18746.1 * (CHl1R[0][0] - CHl3R[0][0]) / LambdaNP2
            - 18746.1 * (CHl1R[1][1] - CHl3R[1][1]) / LambdaNP2
            - 18868.3 * (CHl1R[2][2] - CHl3R[2][2]) / LambdaNP2
            + 23856.6 * (CHq1R[0][0] + CHq3R[0][0]) / LambdaNP2
            + 23828.1 * (CHq1R[1][1] + CHq3R[1][1]) / LambdaNP2
            + 23481.4 * (CHq1R[2][2] + CHq3R[2][2]) / LambdaNP2
            - 4335.75 * CHdR[0][0] / LambdaNP2
            - 4341.01 * CHdR[1][1] / LambdaNP2
            - 4000. * CHdR[2][2] / LambdaNP2
            + cAsch * (-42945.7 * CHD / LambdaNP2
            - 113953. * CHWB / LambdaNP2
            - 3.412 * delta_GF
            - 0.842 * deltaGzd6()
            )
            + cWsch * (-837.5 * CHD / LambdaNP2
            - 21725.9 * CHWB / LambdaNP2
            - 2.996 * delta_GF
            - 0.842 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-10.269 * deltaMz()
            + 15.979 * deltaMh()
            - 0.143 * deltaaMZ()
            + 2.286 * deltaGmu()))
            + cWsch * (cHSM * (-11.132 * deltaMz()
            + 15.979 * deltaMh()
            + 2.144 * deltaGmu()
            + 0.598 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2v2dRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2v2dRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2v2dRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2v2dRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH4LRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4LRatio1
    double width = 1.0;

    width += deltaGammaH4LRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4LRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH4LRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121291. * CHbox / LambdaNP2
            - 103587. * CHB / LambdaNP2
            - 25126.1 * CHW / LambdaNP2
            + 25935.6 * CDHB / LambdaNP2
            + 22895.7 * CDHW / LambdaNP2
            + 40801.2 * (CHl1R[0][0] + CHl3R[0][0]) / LambdaNP2
            + 40841.5 * (CHl1R[1][1] + CHl3R[1][1]) / LambdaNP2
            + 40593.4 * (CHl1R[2][2] + CHl3R[2][2]) / LambdaNP2
            - 35062.5 * CHeR[0][0] / LambdaNP2
            - 35200.6 * CHeR[1][1] / LambdaNP2
            - 34739.1 * CHeR[2][2] / LambdaNP2
            + cAsch * (-43327.2 * CHD / LambdaNP2
            - 83516.6 * CHWB / LambdaNP2
            - 3.426 * delta_GF
            - 0.759 * deltaGzd6()
            )
            + cWsch * (-79.855 * CHD / LambdaNP2
            + 10882.3 * CHWB / LambdaNP2
            - 3. * delta_GF
            - 0.759 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.741 * deltaMz()
            + 15.903 * deltaMh()
            - 0.172 * deltaaMZ()
            + 2.401 * deltaGmu()))
            + cWsch * (cHSM * (-10.943 * deltaMz()
            + 15.903 * deltaMh()
            + 2.234 * deltaGmu()
            + 0.855 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH4LRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH4LRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4LRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4LRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH4L2Ratio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4L2Ratio1
    double width = 1.0;

    width += deltaGammaH4L2Ratio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4L2Ratio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH4L2Ratio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121305. * CHbox / LambdaNP2
            - 101068. * CHB / LambdaNP2
            - 26272.7 * CHW / LambdaNP2
            + 25787.2 * CDHB / LambdaNP2
            + 23110.1 * CDHW / LambdaNP2
            + 61265. * (CHl1R[0][0] + CHl3R[0][0]) / LambdaNP2
            + 61239.2 * (CHl1R[1][1] + CHl3R[1][1]) / LambdaNP2
            - 52542.2 * CHeR[0][0] / LambdaNP2
            - 52658.5 * CHeR[1][1] / LambdaNP2
            + cAsch * (-43256.5 * CHD / LambdaNP2
            - 82588.8 * CHWB / LambdaNP2
            - 3.426 * delta_GF
            - 0.761 * deltaGzd6()
            )
            + cWsch * (-451.131 * CHD / LambdaNP2
            + 10429. * CHWB / LambdaNP2
            - 3.003 * delta_GF
            - 0.761 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.718 * deltaMz()
            + 15.845 * deltaMh()
            - 0.163 * deltaaMZ()
            + 2.408 * deltaGmu()))
            + cWsch * (cHSM * (-10.905 * deltaMz()
            + 15.845 * deltaMh()
            + 2.236 * deltaGmu()
            + 0.81 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH4L2Ratio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH4L2Ratio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4L2Ratio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4L2Ratio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH4eRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4eRatio1
    double width = 1.0;

    width += deltaGammaH4eRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4eRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH4eRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121313. * CHbox / LambdaNP2
            - 101223. * CHB / LambdaNP2
            - 25774.5 * CHW / LambdaNP2
            + 25802.5 * CDHB / LambdaNP2
            + 23066. * CDHW / LambdaNP2
            + 122287. * (CHl1R[0][0] + CHl3R[0][0]) / LambdaNP2
            - 104859. * CHeR[0][0] / LambdaNP2
            + cAsch * (-43133.2 * CHD / LambdaNP2
            - 82523.3 * CHWB / LambdaNP2
            - 3.424 * delta_GF
            - 0.754 * deltaGzd6())
            + cWsch * (-321.416 * CHD / LambdaNP2
            + 10203.3 * CHWB / LambdaNP2
            - 3. * delta_GF
            - 0.754 * deltaGzd6())
            );

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (cAsch * (-9.739 * deltaMz()
            + 15.858 * deltaMh()
            - 0.16 * deltaaMZ()
            + 2.408 * deltaGmu())
            + cWsch * (-10.859 * deltaMz()
            + 15.858 * deltaMh()
            + 2.236 * deltaGmu()
            + 0.749 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH4eRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH4eRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4eRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4eRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH4muRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4muRatio1
    double width = 1.0;

    width += deltaGammaH4muRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4muRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH4muRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121280. * CHbox / LambdaNP2
            - 101266. * CHB / LambdaNP2
            - 25189.1 * CHW / LambdaNP2
            + 25799.1 * CDHB / LambdaNP2
            + 23071.4 * CDHW / LambdaNP2
            + 122245. * (CHl1R[1][1] + CHl3R[1][1]) / LambdaNP2
            - 105313. * CHeR[1][1] / LambdaNP2
            + cAsch * (-43187.7 * CHD / LambdaNP2
            - 82284. * CHWB / LambdaNP2
            - 3.424 * delta_GF
            - 0.756 * deltaGzd6())
            + cWsch * (-448.867 * CHD / LambdaNP2
            + 10693.5 * CHWB / LambdaNP2
            - 2.999 * delta_GF
            - 0.756 * deltaGzd6())
            );

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (cAsch * (-9.697 * deltaMz()
            + 15.843 * deltaMh()
            - 0.171 * deltaaMZ()
            + 2.408 * deltaGmu())
            + cWsch * (-10.868 * deltaMz()
            + 15.843 * deltaMh()
            + 2.244 * deltaGmu()
            + 0.672 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH4muRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH4muRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4muRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4muRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH4vRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4vRatio1
    double width = 1.0;

    width += deltaGammaH4vRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4vRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH4vRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121311. * CHbox / LambdaNP2
            - 13320.2 * CHB / LambdaNP2
            - 44355.6 * CHW / LambdaNP2
            + 15020. * CDHB / LambdaNP2
            + 27416.8 * CDHW / LambdaNP2
            - 37027.3 * (CHl1R[0][0] - CHl3R[0][0]) / LambdaNP2
            - 36969.3 * (CHl1R[1][1] - CHl3R[1][1]) / LambdaNP2
            - 37032.5 * (CHl1R[2][2] - CHl3R[2][2]) / LambdaNP2
            + cAsch * (-30309.7 * CHD / LambdaNP2
            - 24266.2 * CHWB / LambdaNP2
            - 2.998 * delta_GF
            - 0.715 * deltaGzd6()
            )
            + cWsch * (-30309.7 * CHD / LambdaNP2
            - 24266.2 * CHWB / LambdaNP2
            - 2.998 * delta_GF
            - 0.715 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.608 * deltaMz()
            + 14.774 * deltaMh()
            + 0.233 * deltaaMZ()
            + 2.016 * deltaGmu()))
            + cWsch * (cHSM * (-7.952 * deltaMz()
            + 14.777 * deltaMh()
            + 2.262 * deltaGmu()
            - 1.206 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH4vRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH4vRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4vRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4vRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH4uRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4uRatio1
    double width = 1.0;

    width += deltaGammaH4uRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4uRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH4uRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121283. * CHbox / LambdaNP2
            - 153814. * CHB / LambdaNP2
            + 70762.7 * CHW / LambdaNP2
            - 476614. * CHG / LambdaNP2
            + 47719.2 * CDHB / LambdaNP2
            + 11347.8 * CDHW / LambdaNP2
            - 70157.4 * (CHq1R[0][0] - CHq3R[0][0]) / LambdaNP2
            - 70569. * (CHq1R[1][1] - CHq3R[1][1]) / LambdaNP2
            + 30328.1 * CHuR[0][0] / LambdaNP2
            + 30455.3 * CHuR[1][1] / LambdaNP2
            + cAsch * (-67742.3 * CHD / LambdaNP2
            - 272758. * CHWB / LambdaNP2
            - 4.233 * delta_GF
            - 0.781 * deltaGzd6()
            )
            + cWsch * (+56825.9 * CHD / LambdaNP2
            + 5.842 * CHWB / LambdaNP2
            - 3.002 * delta_GF
            - 0.781 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-8.52 * deltaMz()
            + 16.373 * deltaMh()
            - 0.942 * deltaaMZ()
            + 3.167 * deltaGmu()))
            + cWsch * (cHSM * (-14.978 * deltaMz()
            + 16.373 * deltaMh()
            + 2.198 * deltaGmu()
            + 4.578 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH4uRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH4uRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4uRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4uRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH4dRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4dRatio1
    double width = 1.0;

    width += deltaGammaH4dRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4dRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH4dRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121248. * CHbox / LambdaNP2
            - 106312. * CHB / LambdaNP2
            + 37722.3 * CHW / LambdaNP2
            - 368494. * CHG / LambdaNP2
            + 38027.3 * CDHB / LambdaNP2
            + 16455.2 * CDHW / LambdaNP2
            + 43669.1 * (CHq1R[0][0] + CHq3R[0][0]) / LambdaNP2
            + 43649.7 * (CHq1R[1][1] + CHq3R[1][1]) / LambdaNP2
            + 45003.6 * (CHq1R[2][2] + CHq3R[2][2]) / LambdaNP2
            - 7637.9 * CHdR[0][0] / LambdaNP2
            - 7633.36 * CHdR[1][1] / LambdaNP2
            - 7294.61 * CHdR[2][2] / LambdaNP2
            + cAsch * (-56026.9 * CHD / LambdaNP2
            - 199805. * CHWB / LambdaNP2
            - 3.841 * delta_GF
            - 0.778 * deltaGzd6()
            )
            + cWsch * (+29594.4 * CHD / LambdaNP2
            - 12377.7 * CHWB / LambdaNP2
            - 2.995 * delta_GF
            - 0.778 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.19 * deltaMz()
            + 16.387 * deltaMh()
            - 0.596 * deltaaMZ()
            + 2.807 * deltaGmu()))
            + cWsch * (cHSM * (-13.077 * deltaMz()
            + 16.387 * deltaMh()
            + 2.268 * deltaGmu()
            + 2.743 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH4dRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH4dRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4dRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4dRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaHLvvLRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHLvvLRatio1
    double width = 1.0;

    width += deltaGammaHLvvLRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHLvvLRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaHLvvLRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0073;

    dwidth = (+121150. * CHbox / LambdaNP2
            - 91767.5 * CHW / LambdaNP2
            + 36978. * CDHW / LambdaNP2
            + 45140.3 * CHl3R[0][0] / LambdaNP2
            + 45192.1 * CHl3R[1][1] / LambdaNP2
            + 45407.7 * CHl3R[2][2] / LambdaNP2
            + cAsch * (-203598. * CHD / LambdaNP2
            - 379536. * CHWB / LambdaNP2
            - 4.713 * delta_GF
            - 13.743 * deltaMwd6()
            - 0.962 * deltaGwd6()
            )
            + cWsch * (-30310.3 * CHD / LambdaNP2
            + 0. * CHWB / LambdaNP2
            - 2.996 * delta_GF
            - 0.962 * deltaGwd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-12.232 * deltaMz()
            + 13.669 * deltaMh()
            + 1.829 * deltaaMZ()
            + 0.189 * deltaGmu()))
            + cWsch * (cHSM * (-0.016 * deltaMz()
            - 8.548 * deltaMw()
            + 13.67 * deltaMh()
            + 2.003 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaHLvvLRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHLvvLRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHLvvLRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHLvvLRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaHevmuvRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHevmuvRatio1
    double width = 1.0;

    width += deltaGammaHevmuvRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHevmuvRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaHevmuvRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0073;

    dwidth = (+121407. * CHbox / LambdaNP2
            - 91741.5 * CHW / LambdaNP2
            + 36995.8 * CDHW / LambdaNP2
            + 68126.1 * CHl3R[0][0] / LambdaNP2
            + 68223.8 * CHl3R[1][1] / LambdaNP2
            + cAsch * (-203550. * CHD / LambdaNP2
            - 380035. * CHWB / LambdaNP2
            - 4.711 * delta_GF
            - 13.53 * deltaMwd6()
            - 0.964 * deltaGwd6()
            )
            + cWsch * (-30299.6 * CHD / LambdaNP2
            + 0. * CHWB / LambdaNP2
            - 3. * delta_GF
            - 0.964 * deltaGwd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-12.178 * deltaMz()
            + 13.623 * deltaMh()
            + 1.825 * deltaaMZ()
            + 0.233 * deltaGmu()))
            + cWsch * (cHSM * (-0.016 * deltaMz()
            - 8.445 * deltaMw()
            + 13.623 * deltaMh()
            + 2.089 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaHevmuvRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHevmuvRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHevmuvRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHevmuvRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaHudduRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHudduRatio1
    double width = 1.0;

    width += deltaGammaHudduRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHudduRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaHudduRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0073;

    dwidth = (+121333. * CHbox / LambdaNP2
            - 92283.9 * CHW / LambdaNP2
            + 37165.5 * CDHW / LambdaNP2
            + 68273.4 * CHq3R[0][0] / LambdaNP2
            + 68176.3 * CHq3R[1][1] / LambdaNP2
            + cAsch * (-203776. * CHD / LambdaNP2
            - 380178. * CHWB / LambdaNP2
            - 4.719 * delta_GF
            - 14.006 * deltaMwd6()
            - 0.956 * deltaGwd6()
            )
            + cWsch * (-30312.7 * CHD / LambdaNP2
            + 0. * CHWB / LambdaNP2
            - 3.003 * delta_GF
            - 0.956 * deltaGwd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-12.618 * deltaMz()
            + 14.254 * deltaMh()
            + 1.912 * deltaaMZ()
            + 0.149 * deltaGmu()))
            + cWsch * (cHSM * (-0.018 * deltaMz()
            - 8.857 * deltaMw()
            + 14.251 * deltaMh()
            + 2.073 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaHudduRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHudduRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHudduRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHudduRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaHLvudRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHLvudRatio1
    double width = 1.0;

    width += deltaGammaHLvudRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHLvudRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaHLvudRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0073;

    dwidth = (+121281. * CHbox / LambdaNP2
            - 93409.7 * CHW / LambdaNP2
            + 37365.5 * CDHW / LambdaNP2
            + 22531.9 * CHl3R[0][0] / LambdaNP2
            + 22479. * CHl3R[1][1] / LambdaNP2
            + 22364.3 * CHl3R[2][2] / LambdaNP2
            + 34744.7 * CHq3R[0][0] / LambdaNP2
            + 34720.9 * CHq3R[1][1] / LambdaNP2
            + cAsch * (-203784. * CHD / LambdaNP2
            - 380028. * CHWB / LambdaNP2
            - 4.721 * delta_GF
            - 13.591 * deltaMwd6()
            - 0.969 * deltaGwd6()
            )
            + cWsch * (-30359.9 * CHD / LambdaNP2
            + 0. * CHWB / LambdaNP2
            - 3.004 * delta_GF
            - 0.969 * deltaGwd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-12.333 * deltaMz()
            + 13.766 * deltaMh()
            + 1.852 * deltaaMZ()
            + 0.169 * deltaGmu()))
            + cWsch * (cHSM * (-0.015 * deltaMz()
            - 8.492 * deltaMw()
            + 13.769 * deltaMh()
            + 2.065 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaHLvudRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHLvudRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHLvudRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHLvudRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2udRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2udRatio1
    double width = 1.0;

    width += deltaGammaH2udRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2udRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2udRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0073;

    dwidth = (+121425. * CHbox / LambdaNP2
            - 3244.8 * CHB / LambdaNP2
            - 88391.2 * CHW / LambdaNP2
            - 55282. * CHG / LambdaNP2
            + 1177.32 * CDHB / LambdaNP2
            + 36769.9 * CDHW / LambdaNP2
            - 23.442 * CHq1R[0][0] / LambdaNP2
            - 22.98 * CHq1R[1][1] / LambdaNP2
            + 559.485 * CHuR[0][0] / LambdaNP2
            + 560.558 * CHuR[1][1] / LambdaNP2
            - 217.102 * CHdR[0][0] / LambdaNP2
            - 218.04 * CHdR[1][1] / LambdaNP2
            + 68556.8 * CHq3R[0][0] / LambdaNP2
            + 68783.1 * CHq3R[1][1] / LambdaNP2
            + cAsch * (-199535. * CHD / LambdaNP2
            - 375669. * CHWB / LambdaNP2
            - 4.696 * delta_GF
            - 0.026 * deltaGzd6()
            - 13.64 * deltaMwd6()
            - 0.944 * deltaGwd6()
            )
            + cWsch * (-28852.8 * CHD / LambdaNP2
            - 1306.57 * CHWB / LambdaNP2
            - 3.002 * delta_GF
            - 0.026 * deltaGzd6()
            - 0.944 * deltaGwd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-12.708 * deltaMz()
            + 14.393 * deltaMh()
            + 1.82 * deltaaMZ()
            + 0.188 * deltaGmu()))
            + cWsch * (cHSM * (-0.441 * deltaMz()
            - 8.601 * deltaMw()
            + 14.393 * deltaMh()
            + 2.022 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)  
    // Dominated by CC => Use HWW uncertainty
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2udRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2udRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2udRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2udRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2LvRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2LvRatio1
    double width = 1.0;

    width += deltaGammaH2LvRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2LvRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2LvRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0073;

    dwidth = (+121133. * CHbox / LambdaNP2
            + 1057.61 * CHB / LambdaNP2
            - 91969.3 * CHW / LambdaNP2
            - 210.15 * CDHB / LambdaNP2
            + 37475. * CDHW / LambdaNP2
            - 137.279 * CHl1R[0][0] / LambdaNP2
            - 137.825 * CHl1R[1][1] / LambdaNP2
            - 123.03 * CHl1R[2][2] / LambdaNP2
            - 897.801 * CHeR[0][0] / LambdaNP2
            - 865.641 * CHeR[1][1] / LambdaNP2
            - 862.721 * CHeR[2][2] / LambdaNP2
            + 45408.9 * CHl3R[0][0] / LambdaNP2
            + 45540.1 * CHl3R[1][1] / LambdaNP2
            + 45765.4 * CHl3R[2][2] / LambdaNP2
            + cAsch * (-198032. * CHD / LambdaNP2
            - 364301. * CHWB / LambdaNP2
            - 4.631 * delta_GF
            - 13.529 * deltaMwd6()
            - 0.956 * deltaGwd6()
            - 0.037 * deltaGzd6()
            )
            + cWsch * (-33553.1 * CHD / LambdaNP2
            - 3437.65 * CHWB / LambdaNP2
            - 3.001 * delta_GF
            - 0.036 * deltaGzd6()
            - 0.956 * deltaGwd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-12.684 * deltaMz()
            + 13.95 * deltaMh()
            + 1.899 * deltaaMZ()
            + 0.151 * deltaGmu()))
            + cWsch * (cHSM * (-0.128 * deltaMz()
            - 8.864 * deltaMw()
            + 13.95 * deltaMh()
            + 2.045 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)  
    // Dominated by CC => Use HWW uncertainty
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2LvRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2LvRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2LvRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2LvRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2Lv2Ratio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2Lv2Ratio1
    double width = 1.0;

    width += deltaGammaH2Lv2Ratio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2Lv2Ratio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2Lv2Ratio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0073;

    dwidth = (+121215. * CHbox / LambdaNP2
            + 1054.39 * CHB / LambdaNP2
            - 91849.7 * CHW / LambdaNP2
            - 207.764 * CDHB / LambdaNP2
            + 37474.1 * CDHW / LambdaNP2
            - 205.44 * CHl1R[0][0] / LambdaNP2
            - 205.933 * CHl1R[1][1] / LambdaNP2
            - 1345.15 * CHeR[0][0] / LambdaNP2
            - 1299.22 * CHeR[1][1] / LambdaNP2
            + 68383.7 * CHl3R[0][0] / LambdaNP2
            + 68347.6 * CHl3R[1][1] / LambdaNP2
            + cAsch * (-198193. * CHD / LambdaNP2
            - 364163. * CHWB / LambdaNP2
            - 4.627 * delta_GF
            - 13.439 * deltaMwd6()
            - 0.961 * deltaGwd6()
            - 0.042 * deltaGzd6()
            )
            + cWsch * (-33577.8 * CHD / LambdaNP2
            - 3457.89 * CHWB / LambdaNP2
            - 2.999 * delta_GF
            - 0.042 * deltaGzd6()
            - 0.961 * deltaGwd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-12.755 * deltaMz()
            + 14.08 * deltaMh()
            + 1.884 * deltaaMZ()
            + 0.121 * deltaGmu()))
            + cWsch * (cHSM * (-0.118 * deltaMz()
            - 8.746 * deltaMw()
            + 14.08 * deltaMh()
            + 2.002 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)  
    // Dominated by CC => Use HWW uncertainty
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2Lv2Ratio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2Lv2Ratio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2Lv2Ratio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2Lv2Ratio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2evRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2evRatio1
    double width = 1.0;

    width += deltaGammaH2evRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2evRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2evRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0073;

    dwidth = (+121306. * CHbox / LambdaNP2
            + 1054.18 * CHB / LambdaNP2
            - 91797.7 * CHW / LambdaNP2
            - 205.428 * CDHB / LambdaNP2
            + 37460.6 * CDHW / LambdaNP2
            - 411.183 * CHl1R[0][0] / LambdaNP2
            - 2684.07 * CHeR[0][0] / LambdaNP2
            + 136899. * CHl3R[0][0] / LambdaNP2
            + cAsch * (-198266. * CHD / LambdaNP2
            - 364381. * CHWB / LambdaNP2
            - 4.629 * delta_GF
            - 0.037 * deltaGzd6()
            - 13.549 * deltaMwd6()
            - 0.965 * deltaGwd6())
            + cWsch * (-33589.4 * CHD / LambdaNP2
            - 3458.14 * CHWB / LambdaNP2
            - 2.999 * delta_GF
            - 0.037 * deltaGzd6()
            - 0.965 * deltaGwd6())
            );

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (cAsch * (-12.638 * deltaMz()
            + 14.08 * deltaMh()
            + 1.901 * deltaaMZ()
            + 0.103 * deltaGmu())
            + cWsch * (-0.103 * deltaMz()
            - 8.875 * deltaMw()
            + 14.08 * deltaMh()
            + 2.015 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)  
    // Dominated by CC => Use HWW uncertainty
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2evRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2evRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2evRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2evRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2muvRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2muvRatio1
    double width = 1.0;

    width += deltaGammaH2muvRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2muvRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2muvRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0073;

    dwidth = (+121244. * CHbox / LambdaNP2
            + 1045.26 * CHB / LambdaNP2
            - 91781. * CHW / LambdaNP2
            - 206.573 * CDHB / LambdaNP2
            + 37435.3 * CDHW / LambdaNP2
            - 410.738 * CHl1R[1][1] / LambdaNP2
            - 2593.82 * CHeR[1][1] / LambdaNP2
            + 136695. * CHl3R[1][1] / LambdaNP2
            + cAsch * (-198022. * CHD / LambdaNP2
            - 364213. * CHWB / LambdaNP2
            - 4.625 * delta_GF
            - 0.031 * deltaGzd6())
            + cWsch * (-33559. * CHD / LambdaNP2
            - 3447.11 * CHWB / LambdaNP2
            - 2.998 * delta_GF
            - 0.031 * deltaGzd6())
            );

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cHSM * (cAsch * (-12.671 * deltaMz()
            - 13.492 * deltaMwd6()
            - 0.957 * deltaGwd6()
            + 14.005 * deltaMh()
            + 1.868 * deltaaMZ()
            + 0.103 * deltaGmu())
            + cWsch * (-0.177 * deltaMz()
            - 8.833 * deltaMw()
            - 0.957 * deltaGwd6()
            + 14.005 * deltaMh()
            + 1.959 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)  
    // Dominated by CC => Use HWW uncertainty
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2muvRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2muvRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2muvRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2muvRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH4fRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4fRatio1
    double width = 1.0;

    width += deltaGammaH4fRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4fRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH4fRatio1() const
{
    double dwidth = 0.0;

    // SM decay widths (from MG simulations)
    double wH2L2LSM = 0.65682e-06, wH2v2vSM = 0.28126e-05, wH2L2vSM = 0.27224e-05;
    double wH2u2uSM = 0.22500e-05, wH2d2dSM = 0.11906e-04, wH2u2dSM = 0.12361e-04;
    double wH2L2uSM = 0.45029e-05, wH2L2dSM = 0.85830e-05, wH2v2uSM = 0.93233e-05;
    double wH2v2dSM = 0.17794e-04, wH4LSM = 0.33973e-06, wH4vSM = 0.16884e-05;
    double wH4uSM = 0.23669e-05, wH4dSM = 0.60254e-05;
    double wHLvvLSM = 0.58098e-04, wHudduSM = 0.13384e-03, wHLvudSM = 0.34149e-03;
    double wH2udSM = 0.13711e-03, wH2LvSM = 0.27557e-04;

    // Sum
    double wH4fSM = wH2L2LSM + wH2v2vSM + wH2L2vSM + wH2u2uSM + wH2d2dSM + wH2u2dSM +
            wH2L2uSM + wH2L2dSM + wH2v2uSM + wH2v2dSM + wH4LSM + wH4vSM + wH4uSM + wH4dSM + wHLvvLSM + wHudduSM +
            wHLvudSM + wH2udSM + wH2LvSM;

    dwidth = (wH2L2LSM * deltaGammaH2L2LRatio1() + wH2v2vSM * deltaGammaH2v2vRatio1() + wH2L2vSM * deltaGammaH2L2vRatio1() +
            wH2u2uSM * deltaGammaH2u2uRatio1() + wH2d2dSM * deltaGammaH2d2dRatio1() + wH2u2dSM * deltaGammaH2u2dRatio1() +
            wH2L2uSM * deltaGammaH2L2uRatio1() + wH2L2dSM * deltaGammaH2L2dRatio1() + wH2v2uSM * deltaGammaH2v2uRatio1() +
            wH2v2dSM * deltaGammaH2v2dRatio1() + wH4LSM * deltaGammaH4LRatio1() + wH4LSM * deltaGammaH4LRatio1() +
            wH4uSM * deltaGammaH4uRatio1() + wH4dSM * deltaGammaH4dRatio1() +
            wHLvvLSM * deltaGammaHLvvLRatio1() + wHudduSM * deltaGammaHudduRatio1() + wHLvudSM * deltaGammaHLvudRatio1() +
            wH2udSM * deltaGammaH2udRatio1() + wH2LvSM * deltaGammaH2LvRatio1()) / wH4fSM;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH4fRatio2() const
{
    double dwidth = 0.0;

    // SM decay widths (from MG simulations)
    double wH2L2LSM = 0.65682e-06, wH2v2vSM = 0.28126e-05, wH2L2vSM = 0.27224e-05;
    double wH2u2uSM = 0.22500e-05, wH2d2dSM = 0.11906e-04, wH2u2dSM = 0.12361e-04;
    double wH2L2uSM = 0.45029e-05, wH2L2dSM = 0.85830e-05, wH2v2uSM = 0.93233e-05;
    double wH2v2dSM = 0.17794e-04, wH4LSM = 0.33973e-06, wH4vSM = 0.16884e-05;
    double wH4uSM = 0.23669e-05, wH4dSM = 0.60254e-05;
    double wHLvvLSM = 0.58098e-04, wHudduSM = 0.13384e-03, wHLvudSM = 0.39063e-03;
    double wH2udSM = 0.13711e-03, wH2LvSM = 0.27557e-04;

    // Sum
    double wH4fSM = wH2L2LSM + wH2v2vSM + wH2L2vSM + wH2u2uSM + wH2d2dSM + wH2u2dSM +
            wH2L2uSM + wH2L2dSM + wH2v2uSM + wH2v2dSM + wH4LSM + wH4vSM + wH4uSM + wH4dSM + wHLvvLSM + wHudduSM +
            wHLvudSM + wH2udSM + wH2LvSM;

    //Contributions that are quadratic in the effective coefficients
    dwidth = (wH2L2LSM * deltaGammaH2L2LRatio2() + wH2v2vSM * deltaGammaH2v2vRatio2() + wH2L2vSM * deltaGammaH2L2vRatio2() +
            wH2u2uSM * deltaGammaH2u2uRatio2() + wH2d2dSM * deltaGammaH2d2dRatio2() + wH2u2dSM * deltaGammaH2u2dRatio2() +
            wH2L2uSM * deltaGammaH2L2uRatio2() + wH2L2dSM * deltaGammaH2L2dRatio2() + wH2v2uSM * deltaGammaH2v2uRatio2() +
            wH2v2dSM * deltaGammaH2v2dRatio2() + wH4LSM * deltaGammaH4LRatio2() + wH4LSM * deltaGammaH4LRatio2() +
            wH4uSM * deltaGammaH4uRatio2() + wH4dSM * deltaGammaH4dRatio2() +
            wHLvvLSM * deltaGammaHLvvLRatio2() + wHudduSM * deltaGammaHudduRatio2() + wHLvudSM * deltaGammaHLvudRatio2() +
            wH2udSM * deltaGammaH2udRatio2() + wH2LvSM * deltaGammaH2LvRatio2()) / wH4fSM;

    return ( dwidth);

}

double NPSMEFTd6General::BrH4fRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4fRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4fRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH4lRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH4lRatio1
    double width = 1.0;

    width += deltaGammaH4lRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH4lRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH4lRatio1() const
{
    double dwidth = 0.0;

    // SM decay widths (from MG simmulations)
    double wH2e2muSM = 0.22065e-06, wH4L2SM = 0.22716e-06;

    // Sum
    double wH4lSM = wH2e2muSM + wH4L2SM;

    dwidth = (wH2e2muSM * deltaGammaH2e2muRatio1() + wH4L2SM * deltaGammaH4L2Ratio1()) / wH4lSM;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH4lRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH4lRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH4lRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH4lRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaH2l2vRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaH2l2vRatio1
    double width = 1.0;

    width += deltaGammaH2l2vRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaH2l2vRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaH2l2vRatio1() const
{
    double dwidth = 0.0;

    // SM decay widths (from MG simmulations)
    double wH2L2v2SM = 0.18213e-05, wHevmuvSM = 0.19421e-04, wH2Lv2SM = 0.18353e-04;

    // Sum
    double wH2l2vSM = wH2L2v2SM + wHevmuvSM + wH2Lv2SM;

    dwidth = (wH2L2v2SM * deltaGammaH2L2v2Ratio1() + wHevmuvSM * deltaGammaHevmuvRatio1()
            + wH2Lv2SM * deltaGammaH2Lv2Ratio1()) / wH2l2vSM;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaH2l2vRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrH2l2vRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaH2l2vRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaH2l2vRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

///////////////////////OTHER DEDICATED (SEMI-)LEPTONIC 4 FERMION DECAYS/////////////////////////

double NPSMEFTd6General::GammaHlljjRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHlljjRatio1
    double width = 1.0;

    width += deltaGammaHlljjRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHlljjRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaHlljjRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0083;

    dwidth = (+121311. * CHbox / LambdaNP2
            - 92298.6 * CHB / LambdaNP2
            + 24856.5 * CHW / LambdaNP2
            + 35209.4 * CDHB / LambdaNP2
            + 19445.9 * CDHW / LambdaNP2
            + 31820. * (CHl1R[0][0] + CHl3R[0][0]) / LambdaNP2
            + 31802.8 * (CHl1R[1][1] + CHl3R[1][1]) / LambdaNP2
            + 3495.26 * CHq1R[0][0] / LambdaNP2
            + 3545.61 * CHq1R[1][1] / LambdaNP2
            - 27325.3 * CHeR[0][0] / LambdaNP2
            - 27320.8 * CHeR[1][1] / LambdaNP2
            + 6992.68 * CHuR[0][0] / LambdaNP2
            + 6968.35 * CHuR[1][1] / LambdaNP2
            - 3496.34 * CHdR[0][0] / LambdaNP2
            - 3497.7 * CHdR[1][1] / LambdaNP2
            + 34929.4 * CHq3R[0][0] / LambdaNP2
            + 34902.6 * CHq3R[1][1] / LambdaNP2
            + cAsch * (-51170.9 * CHD / LambdaNP2
            - 173417. * CHWB / LambdaNP2
            - 3.69 * delta_GF
            - 0.84 * deltaGzd6()
            )
            + cWsch * (+18275. * CHD / LambdaNP2
            - 20362.3 * CHWB / LambdaNP2
            - 3.001 * delta_GF
            - 0.84 * deltaGzd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-9.881 * deltaMz()
            + 16.162 * deltaMh()
            - 0.407 * deltaaMZ()
            + 2.579 * deltaGmu()))
            + cWsch * (cHSM * (-12.635 * deltaMz()
            + 16.162 * deltaMh()
            + 2.15 * deltaGmu()
            + 1.831 * deltaMw()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHZZint + eHZZpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaHlljjRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHlljjRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHlljjRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHlljjRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaHlvjjRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHlvjjRatio1
    double width = 1.0;

    width += deltaGammaHlvjjRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHlvjjRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaHlvjjRatio1() const
{
    double dwidth = 0.0;

    double C1 = 0.0073;

    dwidth = (+121253. * CHbox / LambdaNP2
            - 93392.5 * CHW / LambdaNP2
            + 37361. * CDHW / LambdaNP2
            + 33596.1 * CHl3R[0][0] / LambdaNP2
            + 33564.4 * CHl3R[1][1] / LambdaNP2
            + 34752.8 * CHq3R[0][0] / LambdaNP2
            + 34719.9 * CHq3R[1][1] / LambdaNP2
            + cAsch * (-203815. * CHD / LambdaNP2
            - 380827. * CHWB / LambdaNP2
            - 4.723 * delta_GF
            - 13.742 * deltaMwd6()
            - 0.962 * deltaGwd6()
            )
            + cWsch * (-30332.8 * CHD / LambdaNP2
            + 0. * CHWB / LambdaNP2
            - 3.004 * delta_GF
            - 0.962 * deltaGwd6()
            ));

    //  Linear contribution from Higgs self-coupling
    dwidth = dwidth + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    dwidth = dwidth + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    // Add modifications due to small variations of the SM parameters    
    dwidth += cAsch * (cHSM * (-12.383 * deltaMz()
            + 13.843 * deltaMh()
            + 1.845 * deltaaMZ()
            + 0.244 * deltaGmu()))
            + cWsch * (cHSM * (-0.034 * deltaMz()
            - 8.477 * deltaMw()
            + 13.843 * deltaMh()
            + 2.008 * deltaGmu()));

    // SM (1) + intrinsic + parametric theory relative errors (free pars)    
    dwidth += eHWWint + eHWWpar;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaHlvjjRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHlvjjRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHlvjjRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHlvjjRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaHlv_lvorjjRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHlv_lvorjjRatio1
    double width = 1.0;

    width += deltaGammaHlv_lvorjjRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHlv_lvorjjRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaHlv_lvorjjRatio1() const
{
    double dwidth = 0.0;

    // SM decay widths (from MG simulations)
    double wH2Lv2SM = 0.18353e-04, wHevmuvSM = 0.19421e-04, wHlvjjSM = 0.228e-03;

    // Sum
    double wHlv_lvorjjSM = wH2Lv2SM + wHevmuvSM + wHlvjjSM;

    dwidth = (wH2Lv2SM * deltaGammaH2Lv2Ratio1()
            + wHevmuvSM * deltaGammaHevmuvRatio1()
            + wHlvjjSM * deltaGammaHlvjjRatio1()) / wHlv_lvorjjSM;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaHlv_lvorjjRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHlv_lvorjjRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHlv_lvorjjRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHlv_lvorjjRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

double NPSMEFTd6General::GammaHll_vvorjjRatio() const
{
    // SM (1). Intrinsic + parametric theory relative errors (free pars) included in deltaGammaHll_vvorjjRatio1
    double width = 1.0;

    width += deltaGammaHll_vvorjjRatio1();

    if (FlagQuadraticTerms) {
        //Add contributions that are quadratic in the effective coefficients
        width += deltaGammaHll_vvorjjRatio2();
    }

    return width;
}

double NPSMEFTd6General::deltaGammaHll_vvorjjRatio1() const
{
    double dwidth = 0.0;

    // SM decay widths (from MG simmulations)
    double wH2L2v2SM = 0.18213e-05, wHlljjSM = 0.69061E-05;

    // Sum
    double wHll_vvorjjSM = wH2L2v2SM + wHlljjSM;

    dwidth = (wH2L2v2SM * deltaGammaH2L2v2Ratio1()
            + wHlljjSM * deltaGammaHlljjRatio1()) / wHll_vvorjjSM;

    return dwidth;
}

double NPSMEFTd6General::deltaGammaHll_vvorjjRatio2() const
{
    double dwidth = 0.0;

    //Contributions that are quadratic in the effective coefficients
    return ( dwidth);

}

double NPSMEFTd6General::BrHll_vvorjjRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiR2 = 0.0, GHiR = 1.0;

    dGHiR1 = deltaGammaHll_vvorjjRatio1();

    Br += dGHiR1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        dGHiR2 = deltaGammaHll_vvorjjRatio2();

        //Add contributions that are quadratic in the effective coefficients
        Br += -dGHiR1 * dGammaHTotR1
                + dGHiR2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHiR += dGHiR1 + dGHiR2;
    if ((Br < 0) || (GHiR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;

}

///////////////////////OTHER HIGGS BRANCHING RATIOS///////////////////////// 

double NPSMEFTd6General::Br_H_exo() const
{
    if (BrHexo < 0) return std::numeric_limits<double>::quiet_NaN();

    return BrHexo;
}

double NPSMEFTd6General::Br_H_inv() const
{
    //  Contributions from both modifications in H->ZZ->4v and the extra invisible decays
    double BR4v;

    BR4v = BrHZZ4vRatio()*(trueSM.computeBrHto4v());

    //  BR4v positivity is already checked inside BrHZZ4vRatio()
    //  and will be nan if negative. Check here BrHinv, to make sure both are positive
    if (BrHinv < 0) return std::numeric_limits<double>::quiet_NaN();

    return BR4v + BrHinv;
}

double NPSMEFTd6General::Br_H_inv_NP() const
{

    //  BR4v positivity is already checked inside BrHZZ4vRatio()
    //  and will be nan if negative. Check here BrHinv, to make sure both are positive
    if (BrHinv < 0) return std::numeric_limits<double>::quiet_NaN();

    return BrHinv;
}

double NPSMEFTd6General::BrHvisRatio() const
{
    double Br = 1.0;
    double dvis1 = 0.0, dvis2 = 0.0, delta2SM;
    double GHvisR = 1.0;

    //  Sum over decays of visible SM and exotic modes
    dvis1 = (trueSM.computeBrHtogg() * deltaGammaHggRatio1()
            + trueSM.computeBrHtoWW() * deltaGammaHWWRatio1()
            + trueSM.computeBrHtoZZ() * deltaGammaHZZRatio1()
            + trueSM.computeBrHtoZga() * deltaGammaHZgaRatio1()
            + trueSM.computeBrHtogaga() * deltaGammaHgagaRatio1()
            + trueSM.computeBrHtomumu() * deltaGammaHmumuRatio1()
            + trueSM.computeBrHtotautau() * deltaGammaHtautauRatio1()
            + trueSM.computeBrHtocc() * deltaGammaHccRatio1()
            + trueSM.computeBrHtobb() * deltaGammaHbbRatio1()
            + BrHexo);

    Br += dvis1 - dGammaHTotR1;

    if (FlagQuadraticTerms) {

        //  Sum over decays of visible SM and exotic modes
        delta2SM = trueSM.computeBrHtogg() * deltaGammaHggRatio2()
                + trueSM.computeBrHtoWW() * deltaGammaHWWRatio2()
                + trueSM.computeBrHtoZZ() * deltaGammaHZZRatio2()
                + trueSM.computeBrHtoZga() * deltaGammaHZgaRatio2()
                + trueSM.computeBrHtogaga() * deltaGammaHgagaRatio2()
                + trueSM.computeBrHtomumu() * deltaGammaHmumuRatio2()
                + trueSM.computeBrHtotautau() * deltaGammaHtautauRatio2()
                + trueSM.computeBrHtocc() * deltaGammaHccRatio2()
                + trueSM.computeBrHtobb() * deltaGammaHbbRatio2();

        dvis2 = delta2SM + (BrHexo)*(BrHexo + delta2SM);

        //Add contributions that are quadratic in the effective coefficients
        Br += -dvis1 * dGammaHTotR1
                + dvis2 - dGammaHTotR2
                + pow(dGammaHTotR1, 2.0);
    }

    GHvisR += dvis1 + dvis2;
    if ((Br < 0) || (GHvisR < 0) || (GammaHTotR < 0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::BrHtoinvRatio() const
{
    return (Br_H_inv() / (trueSM.computeBrHto4v()));
}


///////////////////////SPECIAL OBSERVABLES/////////////////////////

double NPSMEFTd6General::muttHZbbboost(const double sqrt_s) const
{
    // Ratios of BR with the SM
    double BrHbbrat = BrHbbRatio();
    double BrZbbSM = (trueSM.GammaZ(quarks[BOTTOM])) / trueSM.Gamma_Z();
    double BrZbbrat = BR_Zf(quarks[BOTTOM]) / BrZbbSM;

    //    gslpp::complex dKappa_t = deltaG_hff(quarks[TOP]) / (-mtpole / v());    
    //    double dkt = dKappa_t.real();

    //    double dgV = deltaGV_f(quarks[TOP]);
    //    double dgA = deltaGA_f(quarks[TOP]);
    //    double gLSM = quarks[TOP].getIsospin() 
    //    - (quarks[TOP].getCharge())*sW2_tree;
    //    double gRSM = - (quarks[TOP].getCharge())*sW2_tree;

    //    double dgL = 0.5*(dgV + dgA)/gLSM;
    //    double dgR = 0.5*(dgV - dgA)/gRSM;

    double dsigmarat;

    // VERY CRUDE APPROX. 
    //dsigmarat = 1.0 + 
    //        2.0 * dkt -
    //        2.0 * (gLSM*gLSM*dgL + gRSM*gRSM*dgR)/(gLSM*gLSM + gRSM*gRSM);

    dsigmarat = 1.0;
    //  ttH 100 TeV (from muttH func): NOT BOOSTED YET
    dsigmarat += +467438. * CHG / LambdaNP2
            - 22519. * CG / LambdaNP2
            + 880378. * CuGR[2][2] / LambdaNP2
            - 2.837 * deltaG_hff(quarks[TOP]).real()
            ;
    //  Divided (linearized) by ttZ 100 TeV
    dsigmarat = dsigmarat - (
            -40869.4 * CHD / LambdaNP2
            - 52607.9 * CHWB / LambdaNP2
            - 90424.9 * CHG / LambdaNP2
            + 432089. * CG / LambdaNP2
            + 326525. * CuGR[2][2] / LambdaNP2
            - 2028.11 * CuWR[2][2] / LambdaNP2
            + 1679.85 * CuBR[2][2] / LambdaNP2
            + 1454.5 * CHq1R[0][0] / LambdaNP2
            + 1065.27 * CHuR[0][0] / LambdaNP2
            + 82169.1 * CHuR[2][2] / LambdaNP2
            - 1229.16 * CHdR[0][0] / LambdaNP2
            + 6780.84 * CHq3R[0][0] / LambdaNP2
            - 1.374 * delta_GF
            + 4.242 * -0.5 * (CHq1R[2][2] - CHq3R[2][2]) * v2_over_LambdaNP2
            );

    return dsigmarat * (BrHbbrat / BrZbbrat);

}

double NPSMEFTd6General::muggHgaga(const double sqrt_s) const
{
    return muggH(sqrt_s) * BrHgagaRatio();

}

double NPSMEFTd6General::muVBFHgaga(const double sqrt_s) const
{
    return muVBF(sqrt_s) * BrHgagaRatio();

}

double NPSMEFTd6General::muZHgaga(const double sqrt_s) const
{
    return muZH(sqrt_s) * BrHgagaRatio();

}

double NPSMEFTd6General::muWHgaga(const double sqrt_s) const
{
    return muWH(sqrt_s) * BrHgagaRatio();

}

double NPSMEFTd6General::muVHgaga(const double sqrt_s) const
{
    return muVH(sqrt_s) * BrHgagaRatio();

}

double NPSMEFTd6General::muttHgaga(const double sqrt_s) const
{
    return muttH(sqrt_s) * BrHgagaRatio();

}

double NPSMEFTd6General::muggHZga(const double sqrt_s) const
{
    return muggH(sqrt_s) * BrHZgaRatio();

}

double NPSMEFTd6General::muVBFHZga(const double sqrt_s) const
{
    return muVBF(sqrt_s) * BrHZgaRatio();

}

double NPSMEFTd6General::muZHZga(const double sqrt_s) const
{
    return muZH(sqrt_s) * BrHZgaRatio();

}

double NPSMEFTd6General::muWHZga(const double sqrt_s) const
{
    return muWH(sqrt_s) * BrHZgaRatio();

}

double NPSMEFTd6General::muVHZga(const double sqrt_s) const
{
    return muVH(sqrt_s) * BrHZgaRatio();

}

double NPSMEFTd6General::muttHZga(const double sqrt_s) const
{
    return muttH(sqrt_s) * BrHZgaRatio();

}

double NPSMEFTd6General::muggHZZ(const double sqrt_s) const
{
    return muggH(sqrt_s) * BrHZZRatio();

}

double NPSMEFTd6General::muVBFHZZ(const double sqrt_s) const
{
    return muVBF(sqrt_s) * BrHZZRatio();

}

double NPSMEFTd6General::muZHZZ(const double sqrt_s) const
{
    return muZH(sqrt_s) * BrHZZRatio();

}

double NPSMEFTd6General::muWHZZ(const double sqrt_s) const
{
    return muWH(sqrt_s) * BrHZZRatio();

}

double NPSMEFTd6General::muVHZZ(const double sqrt_s) const
{
    return muVH(sqrt_s) * BrHZZRatio();

}

double NPSMEFTd6General::muttHZZ(const double sqrt_s) const
{
    return muttH(sqrt_s) * BrHZZRatio();

}

double NPSMEFTd6General::muggHZZ4l(const double sqrt_s) const
{
    return muggH(sqrt_s) * BrHZZ4lRatio();

}

double NPSMEFTd6General::muVBFHZZ4l(const double sqrt_s) const
{
    return muVBF(sqrt_s) * BrHZZ4lRatio();

}

double NPSMEFTd6General::muZHZZ4l(const double sqrt_s) const
{
    return muZH(sqrt_s) * BrHZZ4lRatio();

}

double NPSMEFTd6General::muWHZZ4l(const double sqrt_s) const
{
    return muWH(sqrt_s) * BrHZZ4lRatio();

}

double NPSMEFTd6General::muVHZZ4l(const double sqrt_s) const
{
    return muVH(sqrt_s) * BrHZZ4lRatio();

}

double NPSMEFTd6General::muttHZZ4l(const double sqrt_s) const
{
    return muttH(sqrt_s) * BrHZZ4lRatio();

}

double NPSMEFTd6General::muggHWW(const double sqrt_s) const
{
    return muggH(sqrt_s) * BrHWWRatio();

}

double NPSMEFTd6General::muVBFHWW(const double sqrt_s) const
{
    return muVBF(sqrt_s) * BrHWWRatio();

}

double NPSMEFTd6General::muZHWW(const double sqrt_s) const
{
    return muZH(sqrt_s) * BrHWWRatio();

}

double NPSMEFTd6General::muWHWW(const double sqrt_s) const
{
    return muWH(sqrt_s) * BrHWWRatio();

}

double NPSMEFTd6General::muVHWW(const double sqrt_s) const
{
    return muVH(sqrt_s) * BrHWWRatio();

}

double NPSMEFTd6General::muttHWW(const double sqrt_s) const
{
    return muttH(sqrt_s) * BrHWWRatio();

}

double NPSMEFTd6General::muggHWW2l2v(const double sqrt_s) const
{
    return muggH(sqrt_s) * BrHWW2l2vRatio();

}

double NPSMEFTd6General::muVBFHWW2l2v(const double sqrt_s) const
{
    return muVBF(sqrt_s) * BrHWW2l2vRatio();

}

double NPSMEFTd6General::muZHWW2l2v(const double sqrt_s) const
{
    return muZH(sqrt_s) * BrHWW2l2vRatio();

}

double NPSMEFTd6General::muWHWW2l2v(const double sqrt_s) const
{
    return muWH(sqrt_s) * BrHWW2l2vRatio();

}

double NPSMEFTd6General::muVHWW2l2v(const double sqrt_s) const
{
    return muVH(sqrt_s) * BrHWW2l2vRatio();

}

double NPSMEFTd6General::muttHWW2l2v(const double sqrt_s) const
{
    return muttH(sqrt_s) * BrHWW2l2vRatio();

}

double NPSMEFTd6General::muggHmumu(const double sqrt_s) const
{
    return muggH(sqrt_s) * BrHmumuRatio();

}

double NPSMEFTd6General::muVBFHmumu(const double sqrt_s) const
{
    return muVBF(sqrt_s) * BrHmumuRatio();

}

double NPSMEFTd6General::muZHmumu(const double sqrt_s) const
{
    return muZH(sqrt_s) * BrHmumuRatio();

}

double NPSMEFTd6General::muWHmumu(const double sqrt_s) const
{
    return muWH(sqrt_s) * BrHmumuRatio();

}

double NPSMEFTd6General::muVHmumu(const double sqrt_s) const
{
    return muVH(sqrt_s) * BrHmumuRatio();

}

double NPSMEFTd6General::muttHmumu(const double sqrt_s) const
{
    return muttH(sqrt_s) * BrHmumuRatio();

}

double NPSMEFTd6General::muggHtautau(const double sqrt_s) const
{
    return muggH(sqrt_s) * BrHtautauRatio();

}

double NPSMEFTd6General::muVBFHtautau(const double sqrt_s) const
{
    return muVBF(sqrt_s) * BrHtautauRatio();

}

double NPSMEFTd6General::muZHtautau(const double sqrt_s) const
{
    return muZH(sqrt_s) * BrHtautauRatio();

}

double NPSMEFTd6General::muWHtautau(const double sqrt_s) const
{
    return muWH(sqrt_s) * BrHtautauRatio();

}

double NPSMEFTd6General::muVHtautau(const double sqrt_s) const
{
    return muVH(sqrt_s) * BrHtautauRatio();

}

double NPSMEFTd6General::muttHtautau(const double sqrt_s) const
{
    return muttH(sqrt_s) * BrHtautauRatio();

}

double NPSMEFTd6General::muggHbb(const double sqrt_s) const
{
    return muggH(sqrt_s) * BrHbbRatio();

}

double NPSMEFTd6General::muVBFHbb(const double sqrt_s) const
{
    return muVBF(sqrt_s) * BrHbbRatio();

}

double NPSMEFTd6General::muZHbb(const double sqrt_s) const
{
    return muZH(sqrt_s) * BrHbbRatio();

}

double NPSMEFTd6General::muWHbb(const double sqrt_s) const
{
    return muWH(sqrt_s) * BrHbbRatio();

}

double NPSMEFTd6General::muVHbb(const double sqrt_s) const
{
    return muVH(sqrt_s) * BrHbbRatio();

}

double NPSMEFTd6General::muttHbb(const double sqrt_s) const
{
    return muttH(sqrt_s) * BrHbbRatio();

}

////////////////////////////////////////////////////////////////////////////////////////////
//-----------------------------------------------------------------------------------------
//-- Special Hadron collider signal strengths with separate full TH unc U(prod x decay) ---
//-----------------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////// 


double NPSMEFTd6General::muTHUggHgaga(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHgagaRatio() * (1.0 + eggFHgaga) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHgagaint + eHgagapar));
    } else {
        return ( muggH(sqrt_s) + BrHgagaRatio() - 1.0 + eggFHgaga - eggFint - eggFpar - eHgagaint - eHgagapar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUVBFHgaga(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHgagaRatio() * (1.0 + eVBFHgaga) * (1.0 + eHwidth) / (1.0 + eVBFint + eVBFpar) / (1.0 + eHgagaint + eHgagapar));
    } else {
        return ( muVBF(sqrt_s) + BrHgagaRatio() - 1.0 + eVBFHgaga - eVBFint - eVBFpar - eHgagaint - eHgagapar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUZHgaga(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muZH(sqrt_s) * BrHgagaRatio() * (1.0 + eZHgaga) * (1.0 + eHwidth) / (1.0 + eZHint + eZHpar) / (1.0 + eHgagaint + eHgagapar));
    } else {
        return ( muZH(sqrt_s) + BrHgagaRatio() - 1.0 + eZHgaga - eZHint - eZHpar - eHgagaint - eHgagapar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUWHgaga(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muWH(sqrt_s) * BrHgagaRatio() * (1.0 + eWHgaga) * (1.0 + eHwidth) / (1.0 + eWHint + eWHpar) / (1.0 + eHgagaint + eHgagapar));
    } else {
        return ( muWH(sqrt_s) + BrHgagaRatio() - 1.0 + eWHgaga - eWHint - eWHpar - eHgagaint - eHgagapar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUVHgaga(const double sqrt_s) const
{
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot, eVHgaga;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    eVHgaga = (eWHgaga * sigmaWH_SM + eZHgaga * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHgagaRatio() * (1.0 + eVHgaga) * (1.0 + eHwidth) / (1.0 + eVHtot) / (1.0 + eHgagaint + eHgagapar));
    } else {
        return ( muVH(sqrt_s) + BrHgagaRatio() - 1.0 + eVHgaga - eVHtot - eHgagaint - eHgagapar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUttHgaga(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muttH(sqrt_s) * BrHgagaRatio() * (1.0 + ettHgaga) * (1.0 + eHwidth) / (1.0 + eeettHint + eeettHpar) / (1.0 + eHgagaint + eHgagapar));
    } else {
        return ( muttH(sqrt_s) + BrHgagaRatio() - 1.0 + ettHgaga - eeettHint - eeettHpar - eHgagaint - eHgagapar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUggHZga(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHZgaRatio() * (1.0 + eggFHZga) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHZgaint + eHZgapar));
    } else {
        return ( muggH(sqrt_s) + BrHZgaRatio() - 1.0 + eggFHZga - eggFint - eggFpar - eHZgaint - eHZgapar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUVBFHZga(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHZgaRatio() * (1.0 + eVBFHZga) * (1.0 + eHwidth) / (1.0 + eVBFint + eVBFpar) / (1.0 + eHZgaint + eHZgapar));
    } else {
        return ( muVBF(sqrt_s) + BrHZgaRatio() - 1.0 + eVBFHZga - eVBFint - eVBFpar - eHZgaint - eHZgapar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUZHZga(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muZH(sqrt_s) * BrHZgaRatio() * (1.0 + eZHZga) * (1.0 + eHwidth) / (1.0 + eZHint + eZHpar) / (1.0 + eHZgaint + eHZgapar));
    } else {
        return ( muZH(sqrt_s) + BrHZgaRatio() - 1.0 + eZHZga - eZHint - eZHpar - eHZgaint - eHZgapar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUWHZga(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muWH(sqrt_s) * BrHZgaRatio() * (1.0 + eWHZga) * (1.0 + eHwidth) / (1.0 + eWHint + eWHpar) / (1.0 + eHZgaint + eHZgapar));
    } else {
        return ( muWH(sqrt_s) + BrHZgaRatio() - 1.0 + eWHZga - eWHint - eWHpar - eHZgaint - eHZgapar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUVHZga(const double sqrt_s) const
{
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot, eVHZga;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    eVHZga = (eWHZga * sigmaWH_SM + eZHZga * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHZgaRatio() * (1.0 + eVHZga) * (1.0 + eHwidth) / (1.0 + eVHtot) / (1.0 + eHZgaint + eHZgapar));
    } else {
        return ( muVH(sqrt_s) + BrHZgaRatio() - 1.0 + eVHZga - eVHtot - eHZgaint - eHZgapar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUttHZga(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muttH(sqrt_s) * BrHZgaRatio() * (1.0 + ettHZga) * (1.0 + eHwidth) / (1.0 + eeettHint + eeettHpar) / (1.0 + eHZgaint + eHZgapar));
    } else {
        return ( muttH(sqrt_s) + BrHZgaRatio() - 1.0 + ettHZga - eeettHint - eeettHpar - eHZgaint - eHZgapar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUggHZZ(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHZZRatio() * (1.0 + eggFHZZ) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muggH(sqrt_s) + BrHZZRatio() - 1.0 + eggFHZZ - eggFint - eggFpar - eHZZint - eHZZpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUVBFHZZ(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHZZRatio() * (1.0 + eVBFHZZ) * (1.0 + eHwidth) / (1.0 + eVBFint + eVBFpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muVBF(sqrt_s) + BrHZZRatio() - 1.0 + eVBFHZZ - eVBFint - eVBFpar - eHZZint - eHZZpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUZHZZ(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muZH(sqrt_s) * BrHZZRatio() * (1.0 + eZHZZ) * (1.0 + eHwidth) / (1.0 + eZHint + eZHpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muZH(sqrt_s) + BrHZZRatio() - 1.0 + eZHZZ - eZHint - eZHpar - eHZZint - eHZZpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUWHZZ(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muWH(sqrt_s) * BrHZZRatio() * (1.0 + eWHZZ) * (1.0 + eHwidth) / (1.0 + eWHint + eWHpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muWH(sqrt_s) + BrHZZRatio() - 1.0 + eWHZZ - eWHint - eWHpar - eHZZint - eHZZpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUVHZZ(const double sqrt_s) const
{
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot, eVHZZ;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    eVHZZ = (eWHZZ * sigmaWH_SM + eZHZZ * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHZZRatio() * (1.0 + eVHZZ) * (1.0 + eHwidth) / (1.0 + eVHtot) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muVH(sqrt_s) + BrHZZRatio() - 1.0 + eVHZZ - eVHtot - eHZZint - eHZZpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUttHZZ(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muttH(sqrt_s) * BrHZZRatio() * (1.0 + ettHZZ) * (1.0 + eHwidth) / (1.0 + eeettHint + eeettHpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muttH(sqrt_s) + BrHZZRatio() - 1.0 + ettHZZ - eeettHint - eeettHpar - eHZZint - eHZZpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUggHZZ4l(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHZZ4lRatio() * (1.0 + eggFHZZ) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muggH(sqrt_s) + BrHZZ4lRatio() - 1.0 + eggFHZZ - eggFint - eggFpar - eHZZint - eHZZpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUVBFHZZ4l(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHZZ4lRatio() * (1.0 + eVBFHZZ) * (1.0 + eHwidth) / (1.0 + eVBFint + eVBFpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muVBF(sqrt_s) + BrHZZ4lRatio() - 1.0 + eVBFHZZ - eVBFint - eVBFpar - eHZZint - eHZZpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUZHZZ4l(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muZH(sqrt_s) * BrHZZ4lRatio() * (1.0 + eZHZZ) * (1.0 + eHwidth) / (1.0 + eZHint + eZHpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muZH(sqrt_s) + BrHZZ4lRatio() - 1.0 + eZHZZ - eZHint - eZHpar - eHZZint - eHZZpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUWHZZ4l(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muWH(sqrt_s) * BrHZZ4lRatio() * (1.0 + eWHZZ) * (1.0 + eHwidth) / (1.0 + eWHint + eWHpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muWH(sqrt_s) + BrHZZ4lRatio() - 1.0 + eWHZZ - eWHint - eWHpar - eHZZint - eHZZpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUVHZZ4l(const double sqrt_s) const
{
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot, eVHZZ;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    eVHZZ = (eWHZZ * sigmaWH_SM + eZHZZ * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHZZ4lRatio() * (1.0 + eVHZZ) * (1.0 + eHwidth) / (1.0 + eVHtot) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muVH(sqrt_s) + BrHZZ4lRatio() - 1.0 + eVHZZ - eVHtot - eHZZint - eHZZpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUttHZZ4l(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muttH(sqrt_s) * BrHZZ4lRatio() * (1.0 + ettHZZ) * (1.0 + eHwidth) / (1.0 + eeettHint + eeettHpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muttH(sqrt_s) + BrHZZ4lRatio() - 1.0 + ettHZZ - eeettHint - eeettHpar - eHZZint - eHZZpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUggHWW(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHWWRatio() * (1.0 + eggFHWW) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muggH(sqrt_s) + BrHWWRatio() - 1.0 + eggFHWW - eggFint - eggFpar - eHWWint - eHWWpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUVBFHWW(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHWWRatio() * (1.0 + eVBFHWW) * (1.0 + eHwidth) / (1.0 + eVBFint + eVBFpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muVBF(sqrt_s) + BrHWWRatio() - 1.0 + eVBFHWW - eVBFint - eVBFpar - eHWWint - eHWWpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUZHWW(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muZH(sqrt_s) * BrHWWRatio() * (1.0 + eZHWW) * (1.0 + eHwidth) / (1.0 + eZHint + eZHpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muZH(sqrt_s) + BrHWWRatio() - 1.0 + eZHWW - eZHint - eZHpar - eHWWint - eHWWpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUWHWW(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muWH(sqrt_s) * BrHWWRatio() * (1.0 + eWHWW) * (1.0 + eHwidth) / (1.0 + eWHint + eWHpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muWH(sqrt_s) + BrHWWRatio() - 1.0 + eWHWW - eWHint - eWHpar - eHWWint - eHWWpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUVHWW(const double sqrt_s) const
{
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot, eVHWW;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    eVHWW = (eWHWW * sigmaWH_SM + eZHWW * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHWWRatio() * (1.0 + eVHWW) * (1.0 + eHwidth) / (1.0 + eVHtot) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muVH(sqrt_s) + BrHWWRatio() - 1.0 + eVHWW - eVHtot - eHWWint - eHWWpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUttHWW(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muttH(sqrt_s) * BrHWWRatio() * (1.0 + ettHWW) * (1.0 + eHwidth) / (1.0 + eeettHint + eeettHpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muttH(sqrt_s) + BrHWWRatio() - 1.0 + ettHWW - eeettHint - eeettHpar - eHWWint - eHWWpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUggHWW2l2v(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHWW2l2vRatio() * (1.0 + eggFHWW) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muggH(sqrt_s) + BrHWW2l2vRatio() - 1.0 + eggFHWW - eggFint - eggFpar - eHWWint - eHWWpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUVBFHWW2l2v(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHWW2l2vRatio() * (1.0 + eVBFHWW) * (1.0 + eHwidth) / (1.0 + eVBFint + eVBFpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muVBF(sqrt_s) + BrHWW2l2vRatio() - 1.0 + eVBFHWW - eVBFint - eVBFpar - eHWWint - eHWWpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUZHWW2l2v(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muZH(sqrt_s) * BrHWW2l2vRatio() * (1.0 + eZHWW) * (1.0 + eHwidth) / (1.0 + eZHint + eZHpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muZH(sqrt_s) + BrHWW2l2vRatio() - 1.0 + eZHWW - eZHint - eZHpar - eHWWint - eHWWpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUWHWW2l2v(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muWH(sqrt_s) * BrHWW2l2vRatio() * (1.0 + eWHWW) * (1.0 + eHwidth) / (1.0 + eWHint + eWHpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muWH(sqrt_s) + BrHWW2l2vRatio() - 1.0 + eWHWW - eWHint - eWHpar - eHWWint - eHWWpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUVHWW2l2v(const double sqrt_s) const
{
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot, eVHWW;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    eVHWW = (eWHWW * sigmaWH_SM + eZHWW * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHWW2l2vRatio() * (1.0 + eVHWW) * (1.0 + eHwidth) / (1.0 + eVHtot) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muVH(sqrt_s) + BrHWW2l2vRatio() - 1.0 + eVHWW - eVHtot - eHWWint - eHWWpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUttHWW2l2v(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muttH(sqrt_s) * BrHWW2l2vRatio() * (1.0 + ettHWW) * (1.0 + eHwidth) / (1.0 + eeettHint + eeettHpar) / (1.0 + eHWWint + eHWWpar));
    } else {
        return ( muttH(sqrt_s) + BrHWW2l2vRatio() - 1.0 + ettHWW - eeettHint - eeettHpar - eHWWint - eHWWpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUggHmumu(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHmumuRatio() * (1.0 + eggFHmumu) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHmumuint + eHmumupar));
    } else {
        return ( muggH(sqrt_s) + BrHmumuRatio() - 1.0 + eggFHmumu - eggFint - eggFpar - eHmumuint - eHmumupar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUVBFHmumu(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHmumuRatio() * (1.0 + eVBFHmumu) * (1.0 + eHwidth) / (1.0 + eVBFint + eVBFpar) / (1.0 + eHmumuint + eHmumupar));
    } else {
        return ( muVBF(sqrt_s) + BrHmumuRatio() - 1.0 + eVBFHmumu - eVBFint - eVBFpar - eHmumuint - eHmumupar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUZHmumu(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muZH(sqrt_s) * BrHmumuRatio() * (1.0 + eZHmumu) * (1.0 + eHwidth) / (1.0 + eZHint + eZHpar) / (1.0 + eHmumuint + eHmumupar));
    } else {
        return ( muZH(sqrt_s) + BrHmumuRatio() - 1.0 + eZHmumu - eZHint - eZHpar - eHmumuint - eHmumupar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUWHmumu(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muWH(sqrt_s) * BrHmumuRatio() * (1.0 + eWHmumu) * (1.0 + eHwidth) / (1.0 + eWHint + eWHpar) / (1.0 + eHmumuint + eHmumupar));
    } else {
        return ( muWH(sqrt_s) + BrHmumuRatio() - 1.0 + eWHmumu - eWHint - eWHpar - eHmumuint - eHmumupar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUVHmumu(const double sqrt_s) const
{
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot, eVHmumu;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    eVHmumu = (eWHmumu * sigmaWH_SM + eZHmumu * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHmumuRatio() * (1.0 + eVHmumu) * (1.0 + eHwidth) / (1.0 + eVHtot) / (1.0 + eHmumuint + eHmumupar));
    } else {
        return ( muVH(sqrt_s) + BrHmumuRatio() - 1.0 + eVHmumu - eVHtot - eHmumuint - eHmumupar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUttHmumu(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muttH(sqrt_s) * BrHmumuRatio() * (1.0 + ettHmumu) * (1.0 + eHwidth) / (1.0 + eeettHint + eeettHpar) / (1.0 + eHmumuint + eHmumupar));
    } else {
        return ( muttH(sqrt_s) + BrHmumuRatio() - 1.0 + ettHmumu - eeettHint - eeettHpar - eHmumuint - eHmumupar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUggHtautau(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHtautauRatio() * (1.0 + eggFHtautau) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHtautauint + eHtautaupar));
    } else {
        return ( muggH(sqrt_s) + BrHtautauRatio() - 1.0 + eggFHtautau - eggFint - eggFpar - eHtautauint - eHtautaupar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUVBFHtautau(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHtautauRatio() * (1.0 + eVBFHtautau) * (1.0 + eHwidth) / (1.0 + eVBFint + eVBFpar) / (1.0 + eHtautauint + eHtautaupar));
    } else {
        return ( muVBF(sqrt_s) + BrHtautauRatio() - 1.0 + eVBFHtautau - eVBFint - eVBFpar - eHtautauint - eHtautaupar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUZHtautau(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muZH(sqrt_s) * BrHtautauRatio() * (1.0 + eZHtautau) * (1.0 + eHwidth) / (1.0 + eZHint + eZHpar) / (1.0 + eHtautauint + eHtautaupar));
    } else {
        return ( muZH(sqrt_s) + BrHtautauRatio() - 1.0 + eZHtautau - eZHint - eZHpar - eHtautauint - eHtautaupar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUWHtautau(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muWH(sqrt_s) * BrHtautauRatio() * (1.0 + eWHtautau) * (1.0 + eHwidth) / (1.0 + eWHint + eWHpar) / (1.0 + eHtautauint + eHtautaupar));
    } else {
        return ( muWH(sqrt_s) + BrHtautauRatio() - 1.0 + eWHtautau - eWHint - eWHpar - eHtautauint - eHtautaupar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUVHtautau(const double sqrt_s) const
{
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot, eVHtautau;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    eVHtautau = (eWHtautau * sigmaWH_SM + eZHtautau * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHtautauRatio() * (1.0 + eVHtautau) * (1.0 + eHwidth) / (1.0 + eVHtot) / (1.0 + eHtautauint + eHtautaupar));
    } else {
        return ( muVH(sqrt_s) + BrHtautauRatio() - 1.0 + eVHtautau - eVHtot - eHtautauint - eHtautaupar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUttHtautau(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muttH(sqrt_s) * BrHtautauRatio() * (1.0 + ettHtautau) * (1.0 + eHwidth) / (1.0 + eeettHint + eeettHpar) / (1.0 + eHtautauint + eHtautaupar));
    } else {
        return ( muttH(sqrt_s) + BrHtautauRatio() - 1.0 + ettHtautau - eeettHint - eeettHpar - eHtautauint - eHtautaupar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUggHbb(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHbbRatio() * (1.0 + eggFHbb) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHbbint + eHbbpar));
    } else {
        return ( muggH(sqrt_s) + BrHbbRatio() - 1.0 + eggFHbb - eggFint - eggFpar - eHbbint - eHbbpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUVBFHbb(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHbbRatio() * (1.0 + eVBFHbb) * (1.0 + eHwidth) / (1.0 + eVBFint + eVBFpar) / (1.0 + eHbbint + eHbbpar));
    } else {
        return ( muVBF(sqrt_s) + BrHbbRatio() - 1.0 + eVBFHbb - eVBFint - eVBFpar - eHbbint - eHbbpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUZHbb(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muZH(sqrt_s) * BrHbbRatio() * (1.0 + eZHbb) * (1.0 + eHwidth) / (1.0 + eZHint + eZHpar) / (1.0 + eHbbint + eHbbpar));
    } else {
        return ( muZH(sqrt_s) + BrHbbRatio() - 1.0 + eZHbb - eZHint - eZHpar - eHbbint - eHbbpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUWHbb(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muWH(sqrt_s) * BrHbbRatio() * (1.0 + eWHbb) * (1.0 + eHwidth) / (1.0 + eWHint + eWHpar) / (1.0 + eHbbint + eHbbpar));
    } else {
        return ( muWH(sqrt_s) + BrHbbRatio() - 1.0 + eWHbb - eWHint - eWHpar - eHbbint - eHbbpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUVHbb(const double sqrt_s) const
{
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot, eVHbb;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    eVHbb = (eWHbb * sigmaWH_SM + eZHbb * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHbbRatio() * (1.0 + eVHbb) * (1.0 + eHwidth) / (1.0 + eVHtot) / (1.0 + eHbbint + eHbbpar));
    } else {
        return ( muVH(sqrt_s) + BrHbbRatio() - 1.0 + eVHbb - eVHtot - eHbbint - eHbbpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUttHbb(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muttH(sqrt_s) * BrHbbRatio() * (1.0 + ettHbb) * (1.0 + eHwidth) / (1.0 + eeettHint + eeettHpar) / (1.0 + eHbbint + eHbbpar));
    } else {
        return ( muttH(sqrt_s) + BrHbbRatio() - 1.0 + ettHbb - eeettHint - eeettHpar - eHbbint - eHbbpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUVBFBRinv(const double sqrt_s) const
{
    return ( muVBF(sqrt_s) * Br_H_inv() * (1.0 + eVBFHinv) / (1.0 + eVBFint + eVBFpar));
}

double NPSMEFTd6General::muTHUVBFHinv(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muVBF(sqrt_s) * BrHtoinvRatio() * (1.0 + eVBFHinv) / (1.0 + eVBFint + eVBFpar));
    } else {
        return ( muVBF(sqrt_s) + BrHtoinvRatio() - 1.0 + eVBFHinv - eVBFint - eVBFpar);
    }
}

double NPSMEFTd6General::muTHUVHBRinv(const double sqrt_s) const
{
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    return ( muVH(sqrt_s) * Br_H_inv() * (1.0 + eVHinv) / (1.0 + eVHtot));
}

double NPSMEFTd6General::muTHUVHinv(const double sqrt_s) const
{
    //  Theory uncertainty in VH production, from the WH and ZH ones
    double sigmaWH_SM = trueSM.computeSigmaWH(sqrt_s);
    double sigmaZH_SM = trueSM.computeSigmaZH(sqrt_s);
    double eVHtot;

    eVHtot = ((eWHint + eWHpar) * sigmaWH_SM + (eZHint + eZHpar) * sigmaZH_SM) / (sigmaWH_SM + sigmaZH_SM);

    if (FlagQuadraticTerms) {
        return ( muVH(sqrt_s) * BrHtoinvRatio() * (1.0 + eVHinv) / (1.0 + eVHtot));
    } else {
        return ( muVH(sqrt_s) + BrHtoinvRatio() - 1.0 + eVHinv - eVHtot);
    }
}

double NPSMEFTd6General::muTHUggHZZ4mu(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHZZ4muRatio() * (1.0 + eggFHZZ) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHZZint + eHZZpar));
    } else {
        return ( muggH(sqrt_s) + BrHZZ4muRatio() - 1.0 + eggFHZZ - eggFint - eggFpar - eHZZint - eHZZpar + eHwidth);
    }
}

double NPSMEFTd6General::muTHUggHZgamumu(const double sqrt_s) const
{
    if (FlagQuadraticTerms) {
        return ( muggH(sqrt_s) * BrHZgamumuRatio() * (1.0 + eggFHZga) * (1.0 + eHwidth) / (1.0 + eggFint + eggFpar) / (1.0 + eHZgaint + eHZgapar));
    } else {
        return ( muggH(sqrt_s) + BrHZgamumuRatio() - 1.0 + eggFHZga - eggFint - eggFpar - eHZgaint - eHZgapar + eHwidth);
    }
}


///////////////////////////////////////////////////////////////////////////////

double NPSMEFTd6General::deltag1ZNP() const
{
    double NPdirect, NPindirect;

    NPdirect = sW_tree / eeMz;
    NPdirect = -NPdirect * (Mz * Mz / v() / v()) * CDHW * v2_over_LambdaNP2;

    //      NPindirect = - 1.0 / (cW2_tree-sW2_tree);

    //      NPindirect = NPindirect * (sW_tree * CHWB / cW_tree 
    //              + 0.25 * CHD ) * v2_over_LambdaNP2
    //              + 0.5 * NPindirect * delta_GF ;

    NPindirect = delta_e - 0.5 * delta_sW2 / cW2_tree + 0.5 * delta_Z - sW_tree * delta_ZA / cW_tree;

    return NPdirect + NPindirect + dg1Z;
}

double NPSMEFTd6General::deltaKZNP() const
{
    // Obtain from the other aTGC  

    return ( deltag1ZNP() - (sW2_tree / cW2_tree) * (deltaKgammaNP() - deltag1gaNP()));
}

double NPSMEFTd6General::deltag1gaNP() const
{
    double NPindirect;

    NPindirect = delta_e + 0.5 * delta_A;

    return NPindirect;
}

double NPSMEFTd6General::deltaKgammaNP() const
{
    double NPdirect, NPindirect;

    NPdirect = eeMz / 4.0 / sW2_tree;

    NPdirect = NPdirect * ((4.0 * sW_tree * cW_tree / eeMz) * CHWB
            - sW_tree * CDHW
            - cW_tree * CDHB) * v2_over_LambdaNP2;

    NPindirect = delta_e + 0.5 * delta_A;

    return NPdirect + NPindirect + dKappaga;
}

double NPSMEFTd6General::lambdaZNP() const
{
    double NPdirect;

    //    Translate from LHCHXWG-INT-2015-001: Checked with own calculations  
    NPdirect = -(3.0 / 2.0) * (eeMz / sW_tree) * CW * v2_over_LambdaNP2;

    return NPdirect + lambZ;
}

///////////////////////////////////////////////////////////////////////////////

double NPSMEFTd6General::deltag1ZNPEff() const
{
    // From arXiv:1708.09079 [hep-ph]. In our case, delta_e=0 since it is taken as inputs and its effects propagated
    // everywhere else 
    double dgEff;

    dgEff = (1.0 / cW2_tree) * ((cW2_tree - sW2_tree) * deltaGL_f(leptons[ELECTRON]) / gZlL +
            sW2_tree * deltaGR_f(leptons[ELECTRON]) / gZlR -
            2.0 * deltaGL_Wff(leptons[NEUTRINO_1], leptons[ELECTRON]).real() / UevL);

    return dgEff + deltag1ZNP();
}

double NPSMEFTd6General::deltaKgammaNPEff() const
{
    // From arXiv:1708.09079 [hep-ph]. In our case, delta_e=0 since it is taken as inputs and its effects propagated
    // everywhere else 
    double dgEff;

    dgEff = (cW2_tree - sW2_tree)*(deltaGL_f(leptons[ELECTRON]) / gZlL - deltaGR_f(leptons[ELECTRON]) / gZlR)
            - 2.0 * deltaGL_Wff(leptons[NEUTRINO_1], leptons[ELECTRON]).real() / UevL;

    return dgEff + deltaKgammaNP();
}

///////////////////////////////////////////////////////////////////////////////

double NPSMEFTd6General::deltaxseeWW4fLEP2(const double sqrt_s, const int fstate) const
{

    //  Returns cross section in pb

    //  fstate = 0 (jjjj), 1 (e v jj), 2 (mu v jj), 3 (tau v jj),
    //       4 (e v e v), 5 (mu v mu v), 6 (tau v tau v),
    //       7 (e v mu v), 8 (e v tau v), 9 (mu v tau v)
    //      10 (l v jj), 11 (l v l v)

    double xspb = 0.0;

    double xspbSM0;
    double xspbSM[8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
    // SM values from hep-ex/0409016    
    double xsjjjjSM[8] = {7.42, 7.56, 7.68, 7.76, 7.79, 7.81, 7.82, 7.82};
    double xslvjjSM[8] = {7.14, 7.26, 7.38, 7.44, 7.47, 7.50, 7.50, 7.50}; // All leptons. Divide by 3 for each
    double xslvlvSM[8] = {1.72, 1.76, 1.79, 1.80, 1.81, 1.82, 1.82, 1.82}; // All leptons. Divide by 6 for each

    double dgWve, dgWpm1, dgWpm2, dmZ2, dmW2, dGW, dGZ, dGF, dgZ, dsW2, dgVZee, dgAZee, dgZ1, dgga1, dkga, dkZ, dlga, dlZ, deem;

    double gVZeeSM, gAZeeSM;

    double norm4f = 1.0;

    //  Values of the couplings: final-state independent couplings
    gVZeeSM = -0.25 + sW2_tree;
    gAZeeSM = -0.25;

    dGF = delta_GF / sqrt(2.0);

    dmZ2 = cAsch * (0.5 * CHD + 2.0 * cW_tree * sW_tree * CHWB) * v2_over_LambdaNP2
            + cWsch * (0.5 * CHD + 2.0 * (Mw_inp / Mz) * sqrt(1.0 - Mw_inp * Mw_inp / Mz / Mz) * CHWB) * v2_over_LambdaNP2;

    dmW2 = -2.0 * deltaMwd6(); //There is a minus sign between refs. definition of dmW2 and ours

    dGW = deltaGwd6();

    dGZ = deltaGzd6();

    dsW2 = cAsch * (-0.5 * (cW2_tree / (1.0 - 2.0 * sW2_tree)) * ((CHD
            + 2.0 * CHWB / cW_tree / sW_tree) * v2_over_LambdaNP2
            + 2.0 * sqrt(2.0) * dGF))
            + cWsch * (1.0 / sW2_tree) * (0.5 * Mw_inp * Mw_inp * CHD / Mz / Mz + Mw_inp * sqrt(1.0 - Mw_inp * Mw_inp / Mz / Mz) * CHWB / Mz) * v2_over_LambdaNP2;

    dgZ = -dGF / sqrt(2.0) - 0.5 * dmZ2
            + cW_tree * sW_tree * CHWB * v2_over_LambdaNP2;

    dgVZee = dgZ * gVZeeSM
            - 0.25 * (CHeR[0][0] + CHl1R[0][0] + CHl3R[0][0]) * v2_over_LambdaNP2
            - sW2_tree * dsW2;

    dgAZee = dgZ * gAZeeSM
            + 0.25 * (CHeR[0][0] - CHl1R[0][0] - CHl3R[0][0]) * v2_over_LambdaNP2;

    dgWve = 0.5 * CHl3R[0][0] * v2_over_LambdaNP2
            + cAsch * (0.25 * (cW_tree * CHWB / sW_tree) * v2_over_LambdaNP2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    dgZ1 = deltag1ZNP();

    dgga1 = deltag1gaNP();

    dkga = deltaKgammaNP();

    dkZ = dgZ1 - (sW2_tree / cW2_tree) * (dkga - dgga1);

    dlga = -lambdaZNP();

    dlZ = -lambdaZNP();

    deem = delta_e + 0.5 * delta_A;

    //  Values of the couplings: final-state dependent couplings
    dgWpm1 = 0.0;
    dgWpm2 = 0.0;

    switch (fstate) {

        case 0:
            //  fstate = 0 (jjjj)       
            dgWpm1 = 0.5 * (CHq3R[0][0] + CHq3R[1][1]);
            dgWpm2 = 0.5 * (CHq3R[0][0] + CHq3R[1][1]);
            norm4f = 1.01;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xsjjjjSM[i];
            }
            break;
        case 1:
            //  fstate = 1 (e v jj)            
            dgWpm1 = CHl3R[0][0];
            dgWpm2 = 0.5 * (CHq3R[0][0] + CHq3R[1][1]);
            norm4f = 1.0;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvjjSM[i] / 3.0;
            }
            break;
        case 2:
            //  fstate = 2 (mu v jj)            
            dgWpm1 = CHl3R[1][1];
            dgWpm2 = 0.5 * (CHq3R[0][0] + CHq3R[1][1]);
            norm4f = 1.0;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvjjSM[i] / 3.0;
            }
            break;
        case 3:
            //  fstate = 3 (tau v jj)            
            dgWpm1 = CHl3R[2][2];
            dgWpm2 = 0.5 * (CHq3R[0][0] + CHq3R[1][1]);
            norm4f = 1.0;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvjjSM[i] / 3.0;
            }
            break;
        case 4:
            //  fstate = 4 (e v e v)            
            dgWpm1 = CHl3R[0][0];
            dgWpm2 = CHl3R[0][0];
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 5:
            //  fstate = 5 (mu v mu v)            
            dgWpm1 = CHl3R[1][1];
            dgWpm2 = CHl3R[1][1];
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 6:
            //  fstate = 6 (tau v tau v)            
            dgWpm1 = CHl3R[2][2];
            dgWpm2 = CHl3R[2][2];
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 7:
            //  fstate = 7 (e v mu v)            
            dgWpm1 = CHl3R[0][0];
            dgWpm2 = CHl3R[1][1];
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 8:
            //  fstate = 8 (e v tau v)           
            dgWpm1 = CHl3R[0][0];
            dgWpm2 = CHl3R[2][2];
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 9:
            //  fstate = 9 (mu v tau v)           
            dgWpm1 = CHl3R[1][1];
            dgWpm2 = CHl3R[2][2];
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 10:
            //  fstate = 10 (l v jj)           
            dgWpm1 = (1.0 / 3.0) * (CHl3R[0][0] + CHl3R[1][1] + CHl3R[2][2]);
            dgWpm2 = 0.5 * (CHq3R[0][0] + CHq3R[1][1]);
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvjjSM[i];
            }
            break;
        case 11:
            //  fstate = 11 (l v l v)           
            dgWpm1 = (1.0 / 3.0) * (CHl3R[0][0] + CHl3R[1][1] + CHl3R[2][2]);
            dgWpm2 = (1.0 / 3.0) * (CHl3R[0][0] + CHl3R[1][1] + CHl3R[2][2]);
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i];
            }
            break;
    }

    dgWpm1 = 0.5 * dgWpm1
            + cAsch * (0.25 * (cW_tree * CHWB / sW_tree) * v2_over_LambdaNP2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    dgWpm2 = 0.5 * dgWpm2
            + cAsch * (0.25 * (cW_tree * CHWB / sW_tree) * v2_over_LambdaNP2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    if (sqrt_s == 0.1886) {

        xspb += norm4f * cAsch * (
                +2.6 * dmW2
                - 17.0 * dGW
                + 72.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 5.3 * dgVZee
                + 0.3 * dgAZee
                - 0.08 * dgZ1
                - 0.50 * dkga
                - 0.19 * dkZ
                - 0.29 * dlga
                + 0.026 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 72.0 * dgWve
                + 33.4 * dgWpm1
                + 33.4 * dgWpm2
                + 5.72 * dgVZee
                + 0.21 * dgAZee
                - 0.05 * dgZ1
                - 0.57 * dkga
                - 0.16 * dkZ
                - 0.34 * dlga
                + 0.051 * dlZ
                + 0.0005 * dGZ
                - 0.41 * dgga1
                - 0.98 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }
        // Save the SM value, to check the total cross section, SM+NP is not negative
        xspbSM0 = xspbSM[0];

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[0];

    } else if (sqrt_s == 0.1916) {

        xspb += norm4f * cAsch * (
                +1.6 * dmW2
                - 17.0 * dGW
                + 73.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 5.8 * dgVZee
                + 0.4 * dgAZee
                - 0.10 * dgZ1
                - 0.56 * dkga
                - 0.22 * dkZ
                - 0.32 * dlga
                + 0.018 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 72.0 * dgWve
                + 33.6 * dgWpm1
                + 33.6 * dgWpm2
                + 6.26 * dgVZee
                + 0.33 * dgAZee
                - 0.07 * dgZ1
                - 0.64 * dkga
                - 0.19 * dkZ
                - 0.37 * dlga
                + 0.045 * dlZ
                + 0.0005 * dGZ
                - 0.41 * dgga1
                - 1.08 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        // Save the SM value, to check the total cross section, SM+NP is not negative
        xspbSM0 = xspbSM[1];

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[1];

    } else if (sqrt_s == 0.1955) {

        xspb += norm4f * cAsch * (
                +0.26 * dmW2
                - 17.0 * dGW
                + 74.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 6.5 * dgVZee
                + 0.6 * dgAZee
                - 0.12 * dgZ1
                - 0.64 * dkga
                - 0.27 * dkZ
                - 0.36 * dlga
                + 0.005 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 73.0 * dgWve
                + 33.8 * dgWpm1
                + 33.8 * dgWpm2
                + 6.91 * dgVZee
                + 0.50 * dgAZee
                - 0.09 * dgZ1
                - 0.72 * dkga
                - 0.22 * dkZ
                - 0.41 * dlga
                + 0.035 * dlZ
                + 0.0005 * dGZ
                - 0.49 * dgga1
                - 1.20 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        // Save the SM value, to check the total cross section, SM+NP is not negative
        xspbSM0 = xspbSM[2];

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[2];

    } else if (sqrt_s == 0.1995) {

        xspb += norm4f * cAsch * (
                -0.54 * dmW2
                - 17.0 * dGW
                + 75.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 7.1 * dgVZee
                + 0.8 * dgAZee
                - 0.15 * dgZ1
                - 0.71 * dkga
                - 0.31 * dkZ
                - 0.40 * dlga
                - 0.009 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 74.0 * dgWve
                + 33.7 * dgWpm1
                + 33.7 * dgWpm2
                + 7.52 * dgVZee
                + 0.68 * dgAZee
                - 0.11 * dgZ1
                - 0.79 * dkga
                - 0.26 * dkZ
                - 0.45 * dlga
                + 0.022 * dlZ
                + 0.0005 * dGZ
                - 0.53 * dgga1
                - 1.33 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        // Save the SM value, to check the total cross section, SM+NP is not negative
        xspbSM0 = xspbSM[3];

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[3];

    } else if (sqrt_s == 0.2016) {

        xspb += norm4f * cAsch * (
                -0.97 * dmW2
                - 17.0 * dGW
                + 75.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 7.4 * dgVZee
                + 0.9 * dgAZee
                - 0.16 * dgZ1
                - 0.75 * dkga
                - 0.33 * dkZ
                - 0.42 * dlga
                - 0.017 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 74.0 * dgWve
                + 33.7 * dgWpm1
                + 33.7 * dgWpm2
                + 7.82 * dgVZee
                + 0.78 * dgAZee
                - 0.12 * dgZ1
                - 0.83 * dkga
                - 0.28 * dkZ
                - 0.47 * dlga
                + 0.016 * dlZ
                + 0.0005 * dGZ
                - 0.55 * dgga1
                - 1.39 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        // Save the SM value, to check the total cross section, SM+NP is not negative
        xspbSM0 = xspbSM[4];

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[4];

    } else if (sqrt_s == 0.2049) {

        xspb += norm4f * cAsch * (
                -1.4 * dmW2
                - 17.0 * dGW
                + 75.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 7.8 * dgVZee
                + 1.0 * dgAZee
                - 0.18 * dgZ1
                - 0.80 * dkga
                - 0.37 * dkZ
                - 0.44 * dlga
                - 0.029 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 74.0 * dgWve
                + 33.5 * dgWpm1
                + 33.5 * dgWpm2
                + 8.24 * dgVZee
                + 0.93 * dgAZee
                - 0.14 * dgZ1
                - 0.89 * dkga
                - 0.32 * dkZ
                - 0.47 * dlga
                + 0.005 * dlZ
                + 0.0005 * dGZ
                - 0.58 * dgga1
                - 1.47 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        // Save the SM value, to check the total cross section, SM+NP is not negative
        xspbSM0 = xspbSM[5];

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[5];

    } else if (sqrt_s == 0.2066) {

        xspb += norm4f * cAsch * (
                -1.8 * dmW2
                - 17.0 * dGW
                + 76.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 8.0 * dgVZee
                + 1.1 * dgAZee
                - 0.19 * dgZ1
                - 0.83 * dkga
                - 0.39 * dkZ
                - 0.46 * dlga
                - 0.036 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 75.0 * dgWve
                + 33.4 * dgWpm1
                + 33.4 * dgWpm2
                + 8.45 * dgVZee
                + 1.01 * dgAZee
                - 0.15 * dgZ1
                - 0.92 * dkga
                - 0.33 * dkZ
                - 0.51 * dlga
                - 0.001 * dlZ
                + 0.0005 * dGZ
                - 0.60 * dgga1
                - 1.52 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        // Save the SM value, to check the total cross section, SM+NP is not negative
        xspbSM0 = xspbSM[6];

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[6];

    } else if (sqrt_s == 0.208) {

        xspb += norm4f * cAsch * (
                -2.0 * dmW2
                - 17.0 * dGW
                + 76.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 8.2 * dgVZee
                + 1.2 * dgAZee
                - 0.20 * dgZ1
                - 0.85 * dkga
                - 0.40 * dkZ
                - 0.47 * dlga
                - 0.042 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 75.0 * dgWve
                + 33.3 * dgWpm1
                + 33.3 * dgWpm2
                + 8.62 * dgVZee
                + 1.08 * dgAZee
                - 0.16 * dgZ1
                - 0.94 * dkga
                - 0.35 * dkZ
                - 0.52 * dlga
                - 0.007 * dlZ
                + 0.0005 * dGZ
                - 0.61 * dgga1
                - 1.55 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        // Save the SM value, to check the total cross section, SM+NP is not negative
        xspbSM0 = xspbSM[7];

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[7];

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::deltaxseeWW4fLEP2()");

    if ((xspbSM0 + xspb) < 0) return std::numeric_limits<double>::quiet_NaN();

    return xspb;
}

double NPSMEFTd6General::xseeWW4fLEP2(const double sqrt_s, const int fstate) const
{

    //  Returns cross section in pb

    //  fstate = 0 (jjjj), 1 (e v jj), 2 (mu v jj), 3 (tau v jj),
    //       4 (e v e v), 5 (mu v mu v), 6 (tau v tau v),
    //       7 (e v mu v), 8 (e v tau v), 9 (mu v tau v)
    //      10 (l v jj), 11 (l v l v)

    double xspb = 0.0;

    double xspbSM[8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
    // SM values from hep-ex/0409016    
    double xsjjjjSM[8] = {7.42, 7.56, 7.68, 7.76, 7.79, 7.81, 7.82, 7.82};
    double xslvjjSM[8] = {7.14, 7.26, 7.38, 7.44, 7.47, 7.50, 7.50, 7.50}; // All leptons. Divide by 3 for each
    double xslvlvSM[8] = {1.72, 1.76, 1.79, 1.80, 1.81, 1.82, 1.82, 1.82}; // All leptons. Divide by 6 for each

    double dgWve, dgWpm1, dgWpm2, dmZ2, dmW2, dGW, dGZ, dGF, dgZ, dsW2, dgVZee, dgAZee, dgZ1, dgga1, dkga, dkZ, dlga, dlZ, deem;

    double gVZeeSM, gAZeeSM;

    double norm4f = 1.0;

    //  Values of the couplings: final-state independent couplings
    gVZeeSM = -0.25 + sW2_tree;
    gAZeeSM = -0.25;

    dGF = delta_GF / sqrt(2.0);

    dmZ2 = cAsch * (0.5 * CHD + 2.0 * cW_tree * sW_tree * CHWB) * v2_over_LambdaNP2
            + cWsch * (0.5 * CHD + 2.0 * (Mw_inp / Mz) * sqrt(1.0 - Mw_inp * Mw_inp / Mz / Mz) * CHWB) * v2_over_LambdaNP2;

    dmW2 = -2.0 * deltaMwd6(); //There is a minus sign between refs. definition of dmW2 and ours

    dGW = deltaGwd6();

    dGZ = deltaGzd6();

    dsW2 = cAsch * (-0.5 * (cW2_tree / (1.0 - 2.0 * sW2_tree)) * ((CHD
            + 2.0 * CHWB / cW_tree / sW_tree) * v2_over_LambdaNP2
            + 2.0 * sqrt(2.0) * dGF))
            + cWsch * (1.0 / sW2_tree) * (0.5 * Mw_inp * Mw_inp * CHD / Mz / Mz + Mw_inp * sqrt(1.0 - Mw_inp * Mw_inp / Mz / Mz) * CHWB / Mz) * v2_over_LambdaNP2;

    dgZ = -dGF / sqrt(2.0) - 0.5 * dmZ2
            + cW_tree * sW_tree * CHWB * v2_over_LambdaNP2;

    dgVZee = dgZ * gVZeeSM
            - 0.25 * (CHeR[0][0] + CHl1R[0][0] + CHl3R[0][0]) * v2_over_LambdaNP2
            - sW2_tree * dsW2;

    dgAZee = dgZ * gAZeeSM
            + 0.25 * (CHeR[0][0] - CHl1R[0][0] - CHl3R[0][0]) * v2_over_LambdaNP2;

    dgWve = 0.5 * CHl3R[0][0] * v2_over_LambdaNP2
            + cAsch * (0.25 * (cW_tree * CHWB / sW_tree) * v2_over_LambdaNP2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    dgZ1 = deltag1ZNP();

    dgga1 = deltag1gaNP();

    dkga = deltaKgammaNP();

    dkZ = dgZ1 - (sW2_tree / cW2_tree) * (dkga - dgga1);

    dlga = -lambdaZNP();

    dlZ = -lambdaZNP();

    deem = delta_e + 0.5 * delta_A;

    //  Values of the couplings: final-state dependent couplings
    dgWpm1 = 0.0;
    dgWpm2 = 0.0;

    switch (fstate) {

        case 0:
            //  fstate = 0 (jjjj)       
            dgWpm1 = 0.5 * (CHq3R[0][0] + CHq3R[1][1]);
            dgWpm2 = 0.5 * (CHq3R[0][0] + CHq3R[1][1]);
            norm4f = 1.01;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xsjjjjSM[i];
            }
            break;
        case 1:
            //  fstate = 1 (e v jj)            
            dgWpm1 = CHl3R[0][0];
            dgWpm2 = 0.5 * (CHq3R[0][0] + CHq3R[1][1]);
            norm4f = 1.0;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvjjSM[i] / 3.0;
            }
            break;
        case 2:
            //  fstate = 2 (mu v jj)            
            dgWpm1 = CHl3R[1][1];
            dgWpm2 = 0.5 * (CHq3R[0][0] + CHq3R[1][1]);
            norm4f = 1.0;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvjjSM[i] / 3.0;
            }
            break;
        case 3:
            //  fstate = 3 (tau v jj)            
            dgWpm1 = CHl3R[2][2];
            dgWpm2 = 0.5 * (CHq3R[0][0] + CHq3R[1][1]);
            norm4f = 1.0;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvjjSM[i] / 3.0;
            }
            break;
        case 4:
            //  fstate = 4 (e v e v)            
            dgWpm1 = CHl3R[0][0];
            dgWpm2 = CHl3R[0][0];
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 5:
            //  fstate = 5 (mu v mu v)            
            dgWpm1 = CHl3R[1][1];
            dgWpm2 = CHl3R[1][1];
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 6:
            //  fstate = 6 (tau v tau v)            
            dgWpm1 = CHl3R[2][2];
            dgWpm2 = CHl3R[2][2];
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 7:
            //  fstate = 7 (e v mu v)            
            dgWpm1 = CHl3R[0][0];
            dgWpm2 = CHl3R[1][1];
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 8:
            //  fstate = 8 (e v tau v)           
            dgWpm1 = CHl3R[0][0];
            dgWpm2 = CHl3R[2][2];
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 9:
            //  fstate = 9 (mu v tau v)           
            dgWpm1 = CHl3R[1][1];
            dgWpm2 = CHl3R[2][2];
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i] / 6.0;
            }
            break;
        case 10:
            //  fstate = 10 (l v jj)           
            dgWpm1 = (1.0 / 3.0) * (CHl3R[0][0] + CHl3R[1][1] + CHl3R[2][2]);
            dgWpm2 = 0.5 * (CHq3R[0][0] + CHq3R[1][1]);
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvjjSM[i];
            }
            break;
        case 11:
            //  fstate = 11 (l v l v)           
            dgWpm1 = (1.0 / 3.0) * (CHl3R[0][0] + CHl3R[1][1] + CHl3R[2][2]);
            dgWpm2 = (1.0 / 3.0) * (CHl3R[0][0] + CHl3R[1][1] + CHl3R[2][2]);
            norm4f = 1.0 / 4.04;
            for (int i = 0; i < 8; ++i) {
                xspbSM[i] = xslvlvSM[i];
            }
            break;
    }

    dgWpm1 = 0.5 * dgWpm1
            + cAsch * (0.25 * (cW_tree * CHWB / sW_tree) * v2_over_LambdaNP2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    dgWpm2 = 0.5 * dgWpm2
            + cAsch * (0.25 * (cW_tree * CHWB / sW_tree) * v2_over_LambdaNP2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    if (sqrt_s == 0.1886) {

        xspb += xspbSM[0] + norm4f * cAsch * (
                +2.6 * dmW2
                - 17.0 * dGW
                + 72.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 5.3 * dgVZee
                + 0.3 * dgAZee
                - 0.08 * dgZ1
                - 0.50 * dkga
                - 0.19 * dkZ
                - 0.29 * dlga
                + 0.026 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 72.0 * dgWve
                + 33.4 * dgWpm1
                + 33.4 * dgWpm2
                + 5.72 * dgVZee
                + 0.21 * dgAZee
                - 0.05 * dgZ1
                - 0.57 * dkga
                - 0.16 * dkZ
                - 0.34 * dlga
                + 0.051 * dlZ
                + 0.0005 * dGZ
                - 0.41 * dgga1
                - 0.98 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[0];

    } else if (sqrt_s == 0.1916) {

        xspb += xspbSM[1] + norm4f * cAsch * (
                +1.6 * dmW2
                - 17.0 * dGW
                + 73.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 5.8 * dgVZee
                + 0.4 * dgAZee
                - 0.10 * dgZ1
                - 0.56 * dkga
                - 0.22 * dkZ
                - 0.32 * dlga
                + 0.018 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 72.0 * dgWve
                + 33.6 * dgWpm1
                + 33.6 * dgWpm2
                + 6.26 * dgVZee
                + 0.33 * dgAZee
                - 0.07 * dgZ1
                - 0.64 * dkga
                - 0.19 * dkZ
                - 0.37 * dlga
                + 0.045 * dlZ
                + 0.0005 * dGZ
                - 0.41 * dgga1
                - 1.08 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[1];

    } else if (sqrt_s == 0.1955) {

        xspb += xspbSM[2] + norm4f * cAsch * (
                +0.26 * dmW2
                - 17.0 * dGW
                + 74.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 6.5 * dgVZee
                + 0.6 * dgAZee
                - 0.12 * dgZ1
                - 0.64 * dkga
                - 0.27 * dkZ
                - 0.36 * dlga
                + 0.005 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 73.0 * dgWve
                + 33.8 * dgWpm1
                + 33.8 * dgWpm2
                + 6.91 * dgVZee
                + 0.50 * dgAZee
                - 0.09 * dgZ1
                - 0.72 * dkga
                - 0.22 * dkZ
                - 0.41 * dlga
                + 0.035 * dlZ
                + 0.0005 * dGZ
                - 0.49 * dgga1
                - 1.20 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[2];

    } else if (sqrt_s == 0.1995) {

        xspb += xspbSM[3] + norm4f * cAsch * (
                -0.54 * dmW2
                - 17.0 * dGW
                + 75.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 7.1 * dgVZee
                + 0.8 * dgAZee
                - 0.15 * dgZ1
                - 0.71 * dkga
                - 0.31 * dkZ
                - 0.40 * dlga
                - 0.009 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 74.0 * dgWve
                + 33.7 * dgWpm1
                + 33.7 * dgWpm2
                + 7.52 * dgVZee
                + 0.68 * dgAZee
                - 0.11 * dgZ1
                - 0.79 * dkga
                - 0.26 * dkZ
                - 0.45 * dlga
                + 0.022 * dlZ
                + 0.0005 * dGZ
                - 0.53 * dgga1
                - 1.33 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[3];

    } else if (sqrt_s == 0.2016) {

        xspb += xspbSM[4] + norm4f * cAsch * (
                -0.97 * dmW2
                - 17.0 * dGW
                + 75.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 7.4 * dgVZee
                + 0.9 * dgAZee
                - 0.16 * dgZ1
                - 0.75 * dkga
                - 0.33 * dkZ
                - 0.42 * dlga
                - 0.017 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 74.0 * dgWve
                + 33.7 * dgWpm1
                + 33.7 * dgWpm2
                + 7.82 * dgVZee
                + 0.78 * dgAZee
                - 0.12 * dgZ1
                - 0.83 * dkga
                - 0.28 * dkZ
                - 0.47 * dlga
                + 0.016 * dlZ
                + 0.0005 * dGZ
                - 0.55 * dgga1
                - 1.39 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[4];

    } else if (sqrt_s == 0.2049) {

        xspb += xspbSM[5] + norm4f * cAsch * (
                -1.4 * dmW2
                - 17.0 * dGW
                + 75.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 7.8 * dgVZee
                + 1.0 * dgAZee
                - 0.18 * dgZ1
                - 0.80 * dkga
                - 0.37 * dkZ
                - 0.44 * dlga
                - 0.029 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 74.0 * dgWve
                + 33.5 * dgWpm1
                + 33.5 * dgWpm2
                + 8.24 * dgVZee
                + 0.93 * dgAZee
                - 0.14 * dgZ1
                - 0.89 * dkga
                - 0.32 * dkZ
                - 0.47 * dlga
                + 0.005 * dlZ
                + 0.0005 * dGZ
                - 0.58 * dgga1
                - 1.47 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[5];

    } else if (sqrt_s == 0.2066) {

        xspb += xspbSM[6] + norm4f * cAsch * (
                -1.8 * dmW2
                - 17.0 * dGW
                + 76.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 8.0 * dgVZee
                + 1.1 * dgAZee
                - 0.19 * dgZ1
                - 0.83 * dkga
                - 0.39 * dkZ
                - 0.46 * dlga
                - 0.036 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 75.0 * dgWve
                + 33.4 * dgWpm1
                + 33.4 * dgWpm2
                + 8.45 * dgVZee
                + 1.01 * dgAZee
                - 0.15 * dgZ1
                - 0.92 * dkga
                - 0.33 * dkZ
                - 0.51 * dlga
                - 0.001 * dlZ
                + 0.0005 * dGZ
                - 0.60 * dgga1
                - 1.52 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[6];

    } else if (sqrt_s == 0.208) {

        xspb += xspbSM[7] + norm4f * cAsch * (
                -2.0 * dmW2
                - 17.0 * dGW
                + 76.0 * dgWve
                + 34.0 * dgWpm1
                + 34.0 * dgWpm2
                + 8.2 * dgVZee
                + 1.2 * dgAZee
                - 0.20 * dgZ1
                - 0.85 * dkga
                - 0.40 * dkZ
                - 0.47 * dlga
                - 0.042 * dlZ
                );

        xspb += norm4f * cWsch * (
                -17.0 * dGW
                + 75.0 * dgWve
                + 33.3 * dgWpm1
                + 33.3 * dgWpm2
                + 8.62 * dgVZee
                + 1.08 * dgAZee
                - 0.16 * dgZ1
                - 0.94 * dkga
                - 0.35 * dkZ
                - 0.52 * dlga
                - 0.007 * dlZ
                + 0.0005 * dGZ
                - 0.61 * dgga1
                - 1.55 * deem
                );

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

        //Add relative theory errors (free par). (Assume they are constant in energy.)
        xspb += eeeWWint * xspbSM[7];

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::xseeWW4fLEP2()");

    if (xspb < 0) return std::numeric_limits<double>::quiet_NaN();

    return xspb;
}

double NPSMEFTd6General::deltaxseeWWtotLEP2(const double sqrt_s) const
{
    return ( deltaxseeWW4fLEP2(sqrt_s, 0) + deltaxseeWW4fLEP2(sqrt_s, 10) + deltaxseeWW4fLEP2(sqrt_s, 11));
}

double NPSMEFTd6General::xseeWWtotLEP2(const double sqrt_s) const
{
    return ( xseeWW4fLEP2(sqrt_s, 0) + xseeWW4fLEP2(sqrt_s, 10) + xseeWW4fLEP2(sqrt_s, 11));
}

double NPSMEFTd6General::deltadxsdcoseeWWlvjjLEP2(const double sqrt_s, const int bin) const
{

    //  Returns differential cross section in pb  
    //  bin = 1, 2, 3, 4

    double xspb = 0.0;

    double xspbSM;
    // SM values from Table 8 in hep-ex/0409016
    // Sum bin contents into B1=[-1,-0.8], B2=[-0.4,-0.2], B3=[0.4,0.6], B4=[0.8,1]
    double xslvjjSM183[4] = {0.74, 1.20, 2.86, 5.47};
    double xslvjjSM206[4] = {0.52, 0.98, 2.92, 7.80};

    double dgWve, dgWpm1, dgWpm2, dmZ2, dmW2, dGW, dGF, dgZ, dsW2, dgVZee, dgAZee, dgZ1, dgga1, dkga, dkZ, dlga, dlZ, deem;

    double gVZeeSM, gAZeeSM;

    //  Values of the couplings: final-state independent couplings
    gVZeeSM = -0.25 + sW2_tree;
    gAZeeSM = -0.25;

    dGF = delta_GF / sqrt(2.0);

    dmZ2 = cAsch * (0.5 * CHD + 2.0 * cW_tree * sW_tree * CHWB) * v2_over_LambdaNP2
            + cWsch * (0.5 * CHD + 2.0 * (Mw_inp / Mz) * sqrt(1.0 - Mw_inp * Mw_inp / Mz / Mz) * CHWB) * v2_over_LambdaNP2;

    dmW2 = -2.0 * deltaMwd6(); //There is a minus sign between refs. definition of dmW2 and ours

    dGW = deltaGwd6();

    dsW2 = cAsch * (-0.5 * (cW2_tree / (1.0 - 2.0 * sW2_tree)) * ((CHD
            + 2.0 * CHWB / cW_tree / sW_tree) * v2_over_LambdaNP2
            + 2.0 * sqrt(2.0) * dGF))
            + cWsch * (1.0 / sW2_tree) * (0.5 * Mw_inp * Mw_inp * CHD / Mz / Mz + Mw_inp * sqrt(1.0 - Mw_inp * Mw_inp / Mz / Mz) * CHWB / Mz) * v2_over_LambdaNP2;

    dgZ = -dGF / sqrt(2.0) - 0.5 * dmZ2
            + cW_tree * sW_tree * CHWB * v2_over_LambdaNP2;

    dgVZee = dgZ * gVZeeSM
            - 0.25 * (CHeR[0][0] + CHl1R[0][0] + CHl3R[0][0]) * v2_over_LambdaNP2
            - sW2_tree * dsW2;

    dgAZee = dgZ * gAZeeSM
            + 0.25 * (CHeR[0][0] - CHl1R[0][0] - CHl3R[0][0]) * v2_over_LambdaNP2;

    dgWve = 0.5 * CHl3R[0][0] * v2_over_LambdaNP2
            + cAsch * (0.25 * (cW_tree * CHWB / sW_tree) * v2_over_LambdaNP2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    dgZ1 = deltag1ZNP();

    dgga1 = deltag1gaNP();

    dkga = deltaKgammaNP();

    dkZ = dgZ1 - (sW2_tree / cW2_tree) * (dkga - dgga1);

    dlga = -lambdaZNP();

    dlZ = -lambdaZNP();

    deem = delta_e + 0.5 * delta_A;

    //  Values of the couplings for the W decays: I assume ME from arXiv: 1606.06693 [hep-ph] are, as in
    //  the LEP2 experimental analyses they use, for l=e, mu    
    dgWpm1 = 0.25 * (CHl3R[0][0] + CHl3R[1][1]) * v2_over_LambdaNP2
            + cAsch * (0.25 * (cW_tree * CHWB / sW_tree) * v2_over_LambdaNP2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    dgWpm2 = 0.25 * (CHq3R[0][0] + CHq3R[1][1]) * v2_over_LambdaNP2
            + cAsch * (0.25 * (cW_tree * CHWB / sW_tree) * v2_over_LambdaNP2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    if (sqrt_s == 0.1827) {

        switch (bin) {
            case 1:
                //  Bin 1        
                xspbSM = xslvjjSM183[0];
                xspb += cAsch * (-1.6 * dmW2
                        - 1.5 * dGW
                        + 12.0 * dgWve
                        + 2.9 * dgWpm1
                        + 2.9 * dgWpm2
                        + 4.1 * dgVZee
                        + 3.0 * dgAZee
                        - 0.44 * dgZ1
                        - 0.34 * dkga
                        - 0.47 * dkZ
                        - 0.32 * dlga
                        - 0.45 * dlZ)
                        ;

                xspb += cWsch * (
                        -1.5 * dGW
                        + 12.0 * dgWve
                        + 2.9 * dgWpm1
                        + 2.9 * dgWpm2
                        + 4.3 * dgVZee
                        + 3.0 * dgAZee
                        - 0.42 * dgZ1
                        - 0.37 * dkga
                        - 0.45 * dkZ
                        - 0.35 * dlga
                        - 0.43 * dlZ
                        - 0.34 * dgga1
                        - 0.71 * deem
                        );

                break;

            case 2:
                //  Bin 2   
                xspbSM = xslvjjSM183[1];
                xspb += cAsch * (-1.5 * dmW2
                        - 2.8 * dGW
                        + 16.0 * dgWve
                        + 5.5 * dgWpm1
                        + 5.5 * dgWpm2
                        + 3.5 * dgVZee
                        + 2.2 * dgAZee
                        - 0.30 * dgZ1
                        - 0.32 * dkga
                        - 0.39 * dkZ
                        - 0.26 * dlga
                        - 0.34 * dlZ)
                        ;

                xspb += cWsch * (
                        -2.8 * dGW
                        + 16.0 * dgWve
                        + 5.4 * dgWpm1
                        + 5.4 * dgWpm2
                        + 3.7 * dgVZee
                        + 2.3 * dgAZee
                        - 0.29 * dgZ1
                        - 0.35 * dkga
                        - 0.38 * dkZ
                        - 0.28 * dlga
                        - 0.32 * dlZ
                        - 0.27 * dgga1
                        - 0.62 * deem
                        );

                break;

            case 3:
                //  Bin 3      
                xspbSM = xslvjjSM183[2];
                xspb += cAsch * (0.16 * dmW2
                        - 5.3 * dGW
                        + 22.0 * dgWve
                        + 10.0 * dgWpm1
                        + 10.0 * dgWpm2
                        + 1.5 * dgVZee
                        + 0.2 * dgAZee
                        - 0.04 * dgZ1
                        - 0.14 * dkga
                        - 0.06 * dkZ
                        - 0.06 * dlga
                        + 0.026 * dlZ)
                        ;

                xspb += cWsch * (
                        -5.2 * dGW
                        + 22.0 * dgWve
                        + 10.2 * dgWpm1
                        + 10.2 * dgWpm2
                        + 1.7 * dgVZee
                        + 0.2 * dgAZee
                        - 0.04 * dgZ1
                        - 0.16 * dkga
                        - 0.06 * dkZ
                        - 0.08 * dlga
                        + 0.03 * dlZ
                        - 0.12 * dgga1
                        - 0.29 * deem
                        );

                break;

            case 4:
                //  Bin 4        
                xspbSM = xslvjjSM183[3];
                xspb += cAsch * (18.0 * dmW2
                        - 14.0 * dGW
                        + 39.0 * dgWve
                        + 27.0 * dgWpm1
                        + 27.0 * dgWpm2
                        - 7.7 * dgVZee
                        - 8.8 * dgAZee
                        + 1.2 * dgZ1
                        + 0.62 * dkga
                        + 1.3 * dkZ
                        + 0.63 * dlga
                        + 1.3 * dlZ)
                        ;

                xspb += cWsch * (
                        -14.1 * dGW
                        + 40.0 * dgWve
                        + 27.5 * dgWpm1
                        + 27.5 * dgWpm2
                        - 7.8 * dgVZee
                        - 9.0 * dgAZee
                        + 1.20 * dgZ1
                        + 0.67 * dkga
                        + 1.27 * dkZ
                        + 0.68 * dlga
                        + 1.27 * dlZ
                        + 0.64 * dgga1
                        + 1.30 * deem
                        );

                break;

        }

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

    } else if (sqrt_s == 0.2059) {

        switch (bin) {
            case 1:
                //  Bin 1        
                xspbSM = xslvjjSM206[0];
                xspb += cAsch * (-1.1 * dmW2
                        - 0.9 * dGW
                        + 11.0 * dgWve
                        + 1.8 * dgWpm1
                        + 1.8 * dgWpm2
                        + 4.9 * dgVZee
                        + 3.0 * dgAZee
                        - 0.44 * dgZ1
                        - 0.44 * dkga
                        - 0.50 * dkZ
                        - 0.40 * dlga
                        - 0.46 * dlZ)
                        ;

                xspb += cWsch * (
                        -0.9 * dGW
                        + 10.0 * dgWve
                        + 1.8 * dgWpm1
                        + 1.8 * dgWpm2
                        + 4.9 * dgVZee
                        + 2.9 * dgAZee
                        - 0.40 * dgZ1
                        - 0.47 * dkga
                        - 0.46 * dkZ
                        - 0.43 * dlga
                        - 0.43 * dlZ
                        - 0.41 * dgga1
                        - 0.88 * deem
                        );

                break;

            case 2:
                //  Bin 2        
                xspbSM = xslvjjSM206[1];
                xspb += cAsch * (-1.7 * dmW2
                        - 2.1 * dGW
                        + 15.0 * dgWve
                        + 4.1 * dgWpm1
                        + 4.1 * dgWpm2
                        + 5.0 * dgVZee
                        + 2.8 * dgAZee
                        - 0.34 * dgZ1
                        - 0.53 * dkga
                        - 0.55 * dkZ
                        - 0.37 * dlga
                        - 0.41 * dlZ)
                        ;

                xspb += cWsch * (
                        -2.0 * dGW
                        + 15.0 * dgWve
                        + 4.0 * dgWpm1
                        + 4.0 * dgWpm2
                        + 5.1 * dgVZee
                        + 2.8 * dgAZee
                        - 0.31 * dgZ1
                        - 0.57 * dkga
                        - 0.51 * dkZ
                        - 0.40 * dlga
                        - 0.38 * dlZ
                        - 0.35 * dgga1
                        - 0.92 * deem
                        );

                break;

            case 3:
                //  Bin 3        
                xspbSM = xslvjjSM206[2];
                xspb += cAsch * (-2.3 * dmW2
                        - 4.6 * dGW
                        + 22.0 * dgWve
                        + 9.0 * dgWpm1
                        + 9.0 * dgWpm2
                        + 3.5 * dgVZee
                        + 1.2 * dgAZee
                        - 0.19 * dgZ1
                        - 0.35 * dkga
                        - 0.25 * dkZ
                        - 0.19 * dlga
                        - 0.086 * dlZ)
                        ;

                xspb += cWsch * (
                        -4.5 * dGW
                        + 22.0 * dgWve
                        + 8.8 * dgWpm1
                        + 8.8 * dgWpm2
                        + 3.7 * dgVZee
                        + 1.2 * dgAZee
                        - 0.17 * dgZ1
                        - 0.39 * dkga
                        - 0.22 * dkZ
                        - 0.21 * dlga
                        - 0.07 * dlZ
                        - 0.27 * dgga1
                        - 0.66 * deem
                        );

                break;

            case 4:
                //  Bin 4        
                xspbSM = xslvjjSM206[3];
                xspb += cAsch * (10.0 * dmW2
                        - 20.0 * dGW
                        + 59.0 * dgWve
                        + 39.0 * dgWpm1
                        + 39.0 * dgWpm2
                        - 9.6 * dgVZee
                        - 11.0 * dgAZee
                        + 1.5 * dgZ1
                        + 0.86 * dkga
                        + 1.7 * dkZ
                        + 0.9 * dlga
                        + 1.7 * dlZ)
                        ;

                xspb += cWsch * (
                        -19.8 * dGW
                        + 59.0 * dgWve
                        + 39.0 * dgWpm1
                        + 39.0 * dgWpm2
                        - 9.5 * dgVZee
                        - 11.4 * dgAZee
                        + 1.48 * dgZ1
                        + 0.88 * dkga
                        + 1.63 * dkZ
                        + 0.93 * dlga
                        + 1.67 * dlZ
                        + 0.81 * dgga1
                        + 1.69 * deem
                        );

                break;
        }

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::deltadxsdcoseeWWlvjjLEP2()");

    //Add relative theory errors (free par). (Assume they are constant in energy.)
    xspb += edeeWWdcint * xspbSM;

    if ((xspbSM + xspb) < 0) return std::numeric_limits<double>::quiet_NaN();

    return xspb;
}

double NPSMEFTd6General::dxsdcoseeWWlvjjLEP2(const double sqrt_s, const int bin) const
{

    //  Returns differential cross section in pb  
    //  bin = 1, 2, 3, 4

    double xspb = 0.0;

    double xspbSM;
    // SM values from Table 8 in hep-ex/0409016
    // Sum bin contents into B1=[-1,-0.8], B2=[-0.4,-0.2], B3=[0.4,0.6], B4=[0.8,1]
    double xslvjjSM183[4] = {0.74, 1.20, 2.86, 5.47};
    double xslvjjSM206[4] = {0.52, 0.98, 2.92, 7.80};

    double dgWve, dgWpm1, dgWpm2, dmZ2, dmW2, dGW, dGF, dgZ, dsW2, dgVZee, dgAZee, dgZ1, dgga1, dkga, dkZ, dlga, dlZ, deem;

    double gVZeeSM, gAZeeSM;

    //  Values of the couplings: final-state independent couplings
    gVZeeSM = -0.25 + sW2_tree;
    gAZeeSM = -0.25;

    dGF = delta_GF / sqrt(2.0);

    dmZ2 = cAsch * (0.5 * CHD + 2.0 * cW_tree * sW_tree * CHWB) * v2_over_LambdaNP2
            + cWsch * (0.5 * CHD + 2.0 * (Mw_inp / Mz) * sqrt(1.0 - Mw_inp * Mw_inp / Mz / Mz) * CHWB) * v2_over_LambdaNP2;

    dmW2 = -2.0 * deltaMwd6(); //There is a minus sign between refs. definition of dmW2 and ours

    dGW = deltaGwd6();

    dsW2 = cAsch * (-0.5 * (cW2_tree / (1.0 - 2.0 * sW2_tree)) * ((CHD
            + 2.0 * CHWB / cW_tree / sW_tree) * v2_over_LambdaNP2
            + 2.0 * sqrt(2.0) * dGF))
            + cWsch * (1.0 / sW2_tree) * (0.5 * Mw_inp * Mw_inp * CHD / Mz / Mz + Mw_inp * sqrt(1.0 - Mw_inp * Mw_inp / Mz / Mz) * CHWB / Mz) * v2_over_LambdaNP2;

    dgZ = -dGF / sqrt(2.0) - 0.5 * dmZ2
            + cW_tree * sW_tree * CHWB * v2_over_LambdaNP2;

    dgVZee = dgZ * gVZeeSM
            - 0.25 * (CHeR[0][0] + CHl1R[0][0] + CHl3R[0][0]) * v2_over_LambdaNP2
            - sW2_tree * dsW2;

    dgAZee = dgZ * gAZeeSM
            + 0.25 * (CHeR[0][0] - CHl1R[0][0] - CHl3R[0][0]) * v2_over_LambdaNP2;

    dgWve = 0.5 * CHl3R[0][0] * v2_over_LambdaNP2
            + cAsch * (0.25 * (cW_tree * CHWB / sW_tree) * v2_over_LambdaNP2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    dgZ1 = deltag1ZNP();

    dgga1 = deltag1gaNP();

    dkga = deltaKgammaNP();

    dkZ = dgZ1 - (sW2_tree / cW2_tree) * (dkga - dgga1);

    dlga = -lambdaZNP();

    dlZ = -lambdaZNP();

    deem = delta_e + 0.5 * delta_A;

    //  Values of the couplings for the W decays: I assume ME from arXiv: 1606.06693 [hep-ph] are, as in
    //  the LEP2 experimental analyses they use, for l=e, mu
    dgWpm1 = 0.25 * (CHl3R[0][0] + CHl3R[1][1]) * v2_over_LambdaNP2
            + cAsch * (0.25 * (cW_tree * CHWB / sW_tree) * v2_over_LambdaNP2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    dgWpm2 = 0.25 * (CHq3R[0][0] + CHq3R[1][1]) * v2_over_LambdaNP2
            + cAsch * (0.25 * (cW_tree * CHWB / sW_tree) * v2_over_LambdaNP2 + 0.25 * dsW2)
            + cWsch * (-dGF / 2.0 / sqrt(2.0));

    if (sqrt_s == 0.1827) {

        switch (bin) {
            case 1:
                //  Bin 1        
                xspbSM = xslvjjSM183[0];
                xspb += xspbSM
                        + cAsch * (-1.6 * dmW2
                        - 1.5 * dGW
                        + 12.0 * dgWve
                        + 2.9 * dgWpm1
                        + 2.9 * dgWpm2
                        + 4.1 * dgVZee
                        + 3.0 * dgAZee
                        - 0.44 * dgZ1
                        - 0.34 * dkga
                        - 0.47 * dkZ
                        - 0.32 * dlga
                        - 0.45 * dlZ)
                        ;

                xspb += cWsch * (
                        -1.5 * dGW
                        + 12.0 * dgWve
                        + 2.9 * dgWpm1
                        + 2.9 * dgWpm2
                        + 4.3 * dgVZee
                        + 3.0 * dgAZee
                        - 0.42 * dgZ1
                        - 0.37 * dkga
                        - 0.45 * dkZ
                        - 0.35 * dlga
                        - 0.43 * dlZ
                        - 0.34 * dgga1
                        - 0.71 * deem
                        );

                break;

            case 2:
                //  Bin 2   
                xspbSM = xslvjjSM183[1];
                xspb += xspbSM
                        + cAsch * (-1.5 * dmW2
                        - 2.8 * dGW
                        + 16.0 * dgWve
                        + 5.5 * dgWpm1
                        + 5.5 * dgWpm2
                        + 3.5 * dgVZee
                        + 2.2 * dgAZee
                        - 0.30 * dgZ1
                        - 0.32 * dkga
                        - 0.39 * dkZ
                        - 0.26 * dlga
                        - 0.34 * dlZ)
                        ;

                xspb += cWsch * (
                        -2.8 * dGW
                        + 16.0 * dgWve
                        + 5.4 * dgWpm1
                        + 5.4 * dgWpm2
                        + 3.7 * dgVZee
                        + 2.3 * dgAZee
                        - 0.29 * dgZ1
                        - 0.35 * dkga
                        - 0.38 * dkZ
                        - 0.28 * dlga
                        - 0.32 * dlZ
                        - 0.27 * dgga1
                        - 0.62 * deem
                        );

                break;

            case 3:
                //  Bin 3      
                xspbSM = xslvjjSM183[2];
                xspb += xspbSM
                        + cAsch * (+0.16 * dmW2
                        - 5.3 * dGW
                        + 22.0 * dgWve
                        + 10.0 * dgWpm1
                        + 10.0 * dgWpm2
                        + 1.5 * dgVZee
                        + 0.2 * dgAZee
                        - 0.04 * dgZ1
                        - 0.14 * dkga
                        - 0.06 * dkZ
                        - 0.06 * dlga
                        + 0.026 * dlZ)
                        ;

                xspb += cWsch * (
                        -5.2 * dGW
                        + 22.0 * dgWve
                        + 10.2 * dgWpm1
                        + 10.2 * dgWpm2
                        + 1.7 * dgVZee
                        + 0.2 * dgAZee
                        - 0.04 * dgZ1
                        - 0.16 * dkga
                        - 0.06 * dkZ
                        - 0.08 * dlga
                        + 0.03 * dlZ
                        - 0.12 * dgga1
                        - 0.29 * deem
                        );

                break;

            case 4:
                //  Bin 4        
                xspbSM = xslvjjSM183[3];
                xspb += xspbSM
                        + cAsch * (+18.0 * dmW2
                        - 14.0 * dGW
                        + 39.0 * dgWve
                        + 27.0 * dgWpm1
                        + 27.0 * dgWpm2
                        - 7.7 * dgVZee
                        - 8.8 * dgAZee
                        + 1.2 * dgZ1
                        + 0.62 * dkga
                        + 1.3 * dkZ
                        + 0.63 * dlga
                        + 1.3 * dlZ)
                        ;

                xspb += cWsch * (
                        -14.1 * dGW
                        + 40.0 * dgWve
                        + 27.5 * dgWpm1
                        + 27.5 * dgWpm2
                        - 7.8 * dgVZee
                        - 9.0 * dgAZee
                        + 1.20 * dgZ1
                        + 0.67 * dkga
                        + 1.27 * dkZ
                        + 0.68 * dlga
                        + 1.27 * dlZ
                        + 0.64 * dgga1
                        + 1.30 * deem
                        );

                break;

        }

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

    } else if (sqrt_s == 0.2059) {

        switch (bin) {
            case 1:
                //  Bin 1        
                xspbSM = xslvjjSM206[0];
                xspb += xspbSM
                        + cAsch * (-1.1 * dmW2
                        - 0.9 * dGW
                        + 11.0 * dgWve
                        + 1.8 * dgWpm1
                        + 1.8 * dgWpm2
                        + 4.9 * dgVZee
                        + 3.0 * dgAZee
                        - 0.44 * dgZ1
                        - 0.44 * dkga
                        - 0.50 * dkZ
                        - 0.40 * dlga
                        - 0.46 * dlZ)
                        ;

                xspb += cWsch * (
                        -0.9 * dGW
                        + 10.0 * dgWve
                        + 1.8 * dgWpm1
                        + 1.8 * dgWpm2
                        + 4.9 * dgVZee
                        + 2.9 * dgAZee
                        - 0.40 * dgZ1
                        - 0.47 * dkga
                        - 0.46 * dkZ
                        - 0.43 * dlga
                        - 0.43 * dlZ
                        - 0.41 * dgga1
                        - 0.88 * deem
                        );

                break;

            case 2:
                //  Bin 2        
                xspbSM = xslvjjSM206[1];
                xspb += xspbSM
                        + cAsch * (-1.7 * dmW2
                        - 2.1 * dGW
                        + 15.0 * dgWve
                        + 4.1 * dgWpm1
                        + 4.1 * dgWpm2
                        + 5.0 * dgVZee
                        + 2.8 * dgAZee
                        - 0.34 * dgZ1
                        - 0.53 * dkga
                        - 0.55 * dkZ
                        - 0.37 * dlga
                        - 0.41 * dlZ)
                        ;

                xspb += cWsch * (
                        -2.0 * dGW
                        + 15.0 * dgWve
                        + 4.0 * dgWpm1
                        + 4.0 * dgWpm2
                        + 5.1 * dgVZee
                        + 2.8 * dgAZee
                        - 0.31 * dgZ1
                        - 0.57 * dkga
                        - 0.51 * dkZ
                        - 0.40 * dlga
                        - 0.38 * dlZ
                        - 0.35 * dgga1
                        - 0.92 * deem
                        );

                break;

            case 3:
                //  Bin 3        
                xspbSM = xslvjjSM206[2];
                xspb += xspbSM
                        + cAsch * (-2.3 * dmW2
                        - 4.6 * dGW
                        + 22.0 * dgWve
                        + 9.0 * dgWpm1
                        + 9.0 * dgWpm2
                        + 3.5 * dgVZee
                        + 1.2 * dgAZee
                        - 0.19 * dgZ1
                        - 0.35 * dkga
                        - 0.25 * dkZ
                        - 0.19 * dlga
                        - 0.086 * dlZ)
                        ;

                xspb += cWsch * (
                        -4.5 * dGW
                        + 22.0 * dgWve
                        + 8.8 * dgWpm1
                        + 8.8 * dgWpm2
                        + 3.7 * dgVZee
                        + 1.2 * dgAZee
                        - 0.17 * dgZ1
                        - 0.39 * dkga
                        - 0.22 * dkZ
                        - 0.21 * dlga
                        - 0.07 * dlZ
                        - 0.27 * dgga1
                        - 0.66 * deem
                        );

                break;

            case 4:
                //  Bin 4        
                xspbSM = xslvjjSM206[3];
                xspb += xspbSM
                        + cAsch * (+10.0 * dmW2
                        - 20.0 * dGW
                        + 59.0 * dgWve
                        + 39.0 * dgWpm1
                        + 39.0 * dgWpm2
                        - 9.6 * dgVZee
                        - 11.0 * dgAZee
                        + 1.5 * dgZ1
                        + 0.86 * dkga
                        + 1.7 * dkZ
                        + 0.9 * dlga
                        + 1.7 * dlZ)
                        ;

                xspb += cWsch * (
                        -19.8 * dGW
                        + 59.0 * dgWve
                        + 39.0 * dgWpm1
                        + 39.0 * dgWpm2
                        - 9.5 * dgVZee
                        - 11.4 * dgAZee
                        + 1.48 * dgZ1
                        + 0.88 * dkga
                        + 1.63 * dkZ
                        + 0.93 * dlga
                        + 1.67 * dlZ
                        + 0.81 * dgga1
                        + 1.69 * deem
                        );

                break;
        }

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            xspb += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::dxsdcoseeWWlvjjLEP2()");

    //Add relative theory errors (free par). (Assume they are constant in energy.)
    xspb += edeeWWdcint * xspbSM;

    if (xspb < 0) return std::numeric_limits<double>::quiet_NaN();

    return xspb;
}

///////////////////////////////////////////////////////////////////////////////

double NPSMEFTd6General::dxseeWWdcos(const double sqrt_s, const double cos) const
{
    double sqrt_sGeV = 1000. * sqrt_s;
    double s = sqrt_sGeV * sqrt_sGeV;
    double cos2 = cos * cos;
    double sin2 = 1.0 - cos2;
    double sin = sqrt(sin2);

    double topb = 0.3894 * 1000000000.0;

    //  NC and CC couplings
    double gLe, gRe;
    gslpp::complex Uenu;

    gLe = -0.5 + sW2_tree + deltaGL_f(leptons[ELECTRON]);
    gRe = sW2_tree + deltaGR_f(leptons[ELECTRON]);

    Uenu = deltaGL_Wff(leptons[NEUTRINO_1], leptons[ELECTRON]);
    Uenu = 1.0 + Uenu;

    //  W mass
    double mw;

    mw = Mw();

    //  Wigner functions
    double d1pp[2], d1mm[2], d1p0[2], d1m0[2], d10p[2], d10m[2], d100[2];

    d1pp[0] = sqrt((1.0 - cos2) / 2.0);
    d1pp[1] = -sqrt((1.0 - cos2) / 2.0);

    d1mm[0] = d1pp[0];
    d1mm[1] = d1pp[1];

    d1p0[0] = (1.0 - cos) / 2.0;
    d1p0[1] = (1.0 + cos) / 2.0;

    d1m0[0] = d1p0[1];
    d1m0[1] = d1p0[0];

    d10p[0] = d1p0[1];
    d10p[1] = d1p0[0];

    d10m[0] = d1p0[0];
    d10m[1] = d1p0[1];

    d100[0] = d1pp[0];
    d100[1] = d1pp[1];

    gslpp::matrix<double> d1LH(3, 3, 0.0);

    gslpp::matrix<double> d1RH(3, 3, 0.0);

    d1LH.assign(0, 0, d1pp[0]);
    d1LH.assign(0, 1, d1p0[0]);
    d1LH.assign(0, 2, 0.0);

    d1LH.assign(1, 0, d10p[0]);
    d1LH.assign(1, 1, d100[0]);
    d1LH.assign(1, 2, d10m[0]);

    d1LH.assign(2, 0, 0.0);
    d1LH.assign(2, 1, d1m0[0]);
    d1LH.assign(2, 2, d1mm[0]);

    d1RH.assign(0, 0, d1pp[1]);
    d1RH.assign(0, 1, d1p0[1]);
    d1RH.assign(0, 2, 0.0);

    d1RH.assign(1, 0, d10p[1]);
    d1RH.assign(1, 1, d100[1]);
    d1RH.assign(1, 2, d10m[1]);

    d1RH.assign(2, 0, 0.0);
    d1RH.assign(2, 1, d1m0[1]);
    d1RH.assign(2, 2, d1mm[1]);

    //  TGC parameterization
    double g1Z, g1ga, kZ, kga, lambdaZ, lambdaga, g4Z, g4ga, g5Z, g5ga, ktZ, ktga, lambdatZ, lambdatga;

    //  TGC present in the SM     
    g1Z = 1.0 + deltag1ZNP();
    g1ga = 1.0;
    kZ = 1.0 + deltag1ZNP() - (sW2_tree / cW2_tree) * deltaKgammaNP();
    kga = 1.0 + deltaKgammaNP();
    //  TGC not present in the SM
    lambdaZ = lambdaZNP(); //Check normalization
    lambdaga = lambdaZ;
    g4Z = 0.0;
    g4ga = 0.0;
    g5Z = 0.0;
    g5ga = 0.0;
    ktZ = 0.0;
    ktga = 0.0;
    lambdatZ = 0.0;
    lambdatga = 0.0;

    double f3Z, f3ga;

    f3Z = g1Z + kZ + lambdaZ;
    f3ga = g1ga + kga + lambdaga;

    // Kinematic factors
    double beta, gamma, gamma2;

    beta = sqrt(1.0 - 4.0 * mw * mw / s);
    gamma = sqrt_sGeV / (2.0 * mw);
    gamma2 = gamma*gamma;

    //  J=1 Subamplitudes: Z
    gslpp::complex AZpp, AZmm, AZp0, AZm0, AZ0p, AZ0m, AZ00;

    AZpp = gslpp::complex(g1Z + 2.0 * gamma2* lambdaZ, (ktZ + lambdatZ - 2.0 * lambdatZ) / beta, false);
    AZmm = gslpp::complex(g1Z + 2.0 * gamma2* lambdaZ, -(ktZ + lambdatZ - 2.0 * lambdatZ) / beta, false);
    AZp0 = gslpp::complex(f3Z + beta * g5Z, -g4Z + (ktZ - lambdatZ) / beta, false);
    AZp0 = gamma * AZp0;
    AZm0 = gslpp::complex(f3Z - beta * g5Z, -g4Z - (ktZ - lambdatZ) / beta, false);
    AZm0 = gamma * AZm0;
    AZ0p = gslpp::complex(f3Z - beta * g5Z, g4Z + (ktZ - lambdatZ) / beta, false);
    AZ0p = gamma * AZ0p;
    AZ0m = gslpp::complex(f3Z + beta * g5Z, g4Z - (ktZ - lambdatZ) / beta, false);
    AZ0m = gamma * AZ0m;
    AZ00 = gslpp::complex(g1Z + 2.0 * gamma2*kZ, 0.0, false);

    //  Collect in matrices and separate LH and RH
    gslpp::matrix<gslpp::complex> AmpZLH(3, 3, 0.0);
    gslpp::matrix<gslpp::complex> AmpZRH(3, 3, 0.0);

    AmpZLH.assign(0, 0, AZpp * d1LH(0, 0));
    AmpZLH.assign(0, 1, AZp0 * d1LH(0, 1));
    AmpZLH.assign(0, 2, 0.0);

    AmpZLH.assign(1, 0, AZ0p * d1LH(1, 0));
    AmpZLH.assign(1, 1, AZ00 * d1LH(1, 1));
    AmpZLH.assign(1, 2, AZ0m * d1LH(1, 2));

    AmpZLH.assign(2, 0, 0.0);
    AmpZLH.assign(2, 1, AZm0 * d1LH(2, 1));
    AmpZLH.assign(2, 2, AZmm * d1LH(2, 2));

    AmpZLH = AmpZLH * beta * s / (s - Mz * Mz);

    //  Add the correct Zff coupling
    AmpZLH = AmpZLH * gLe / sW2_tree;

    AmpZRH.assign(0, 0, AZpp * d1RH(0, 0));
    AmpZRH.assign(0, 1, AZp0 * d1RH(0, 1));
    AmpZRH.assign(0, 2, 0.0);

    AmpZRH.assign(1, 0, AZ0p * d1RH(1, 0));
    AmpZRH.assign(1, 1, AZ00 * d1RH(1, 1));
    AmpZRH.assign(1, 2, AZ0m * d1RH(1, 2));

    AmpZRH.assign(2, 0, 0.0);
    AmpZRH.assign(2, 1, AZm0 * d1RH(2, 1));
    AmpZRH.assign(2, 2, AZmm * d1RH(2, 2));

    AmpZRH = AmpZRH * beta * s / (s - Mz * Mz);

    //  Add the correct Zff coupling    
    AmpZRH = AmpZRH * gRe / sW2_tree;

    //  J=1 Subamplitudes: gamma
    gslpp::complex Agapp, Agamm, Agap0, Agam0, Aga0p, Aga0m, Aga00;

    Agapp = gslpp::complex(g1ga + 2.0 * gamma2* lambdaga, (ktga + lambdatga - 2.0 * lambdatga) / beta, false);
    Agamm = gslpp::complex(g1ga + 2.0 * gamma2* lambdaga, -(ktga + lambdatga - 2.0 * lambdatga) / beta, false);
    Agap0 = gslpp::complex(f3ga + beta * g5ga, -g4ga + (ktga - lambdatga) / beta, false);
    Agap0 = gamma * Agap0;
    Agam0 = gslpp::complex(f3ga - beta * g5ga, -g4ga - (ktga - lambdatga) / beta, false);
    Agam0 = gamma * Agam0;
    Aga0p = gslpp::complex(f3ga - beta * g5ga, g4ga + (ktga - lambdatga) / beta, false);
    Aga0p = gamma * Aga0p;
    Aga0m = gslpp::complex(f3ga + beta * g5ga, g4ga - (ktga - lambdatga) / beta, false);
    Aga0m = gamma * Aga0m;
    Aga00 = gslpp::complex(g1ga + 2.0 * gamma2*kga, 0.0, false);

    //  Collect in matrices. Here LH = RH, except for the Wigner functions  
    gslpp::matrix<gslpp::complex> AmpgaLH(3, 3, 0.0);
    gslpp::matrix<gslpp::complex> AmpgaRH(3, 3, 0.0);

    AmpgaLH.assign(0, 0, Agapp * d1LH(0, 0));
    AmpgaLH.assign(0, 1, Agap0 * d1LH(0, 1));
    AmpgaLH.assign(0, 2, 0.0);

    AmpgaLH.assign(1, 0, Aga0p * d1LH(1, 0));
    AmpgaLH.assign(1, 1, Aga00 * d1LH(1, 1));
    AmpgaLH.assign(1, 2, Aga0m * d1LH(1, 2));

    AmpgaLH.assign(2, 0, 0.0);
    AmpgaLH.assign(2, 1, Agam0 * d1LH(2, 1));
    AmpgaLH.assign(2, 2, Agamm * d1LH(2, 2));

    AmpgaRH.assign(0, 0, Agapp * d1RH(0, 0));
    AmpgaRH.assign(0, 1, Agap0 * d1RH(0, 1));
    AmpgaRH.assign(0, 2, 0.0);

    AmpgaRH.assign(1, 0, Aga0p * d1RH(1, 0));
    AmpgaRH.assign(1, 1, Aga00 * d1RH(1, 1));
    AmpgaRH.assign(1, 2, Aga0m * d1RH(1, 2));

    AmpgaRH.assign(2, 0, 0.0);
    AmpgaRH.assign(2, 1, Agam0 * d1RH(2, 1));
    AmpgaRH.assign(2, 2, Agamm * d1RH(2, 2));

    AmpgaLH = -beta * AmpgaLH;
    AmpgaRH = -beta * AmpgaRH;

    //  J=1 Subamplitudes: neutrino
    gslpp::complex Bpp, Bmm, Bp0, Bm0, B0p, B0m, B00;
    gslpp::complex Cpp, Cmm, Cp0, Cm0, C0p, C0m, C00;

    Bpp = gslpp::complex(1.0, 0.0, false);
    Bmm = Bpp;
    Bp0 = gslpp::complex(2.0 * gamma, 0.0, false);
    Bm0 = Bp0;
    B0p = Bp0;
    B0m = Bp0;
    B00 = gslpp::complex(2.0 * gamma2, 0.0, false);

    Cpp = gslpp::complex(1.0 / gamma2, 0.0, false);
    Cmm = Cpp;
    Cp0 = gslpp::complex(2.0 * (1.0 + beta) / gamma, 0.0, false);
    Cm0 = gslpp::complex(2.0 * (1.0 - beta) / gamma, 0.0, false);
    C0p = Cm0;
    C0m = Cp0;
    C00 = gslpp::complex(2.0 / gamma2, 0.0, false);

    //  Collect in matrices. Here LH = RH    
    gslpp::matrix<gslpp::complex> Bnu(3, 3, 0.0);
    gslpp::matrix<gslpp::complex> Cnu(3, 3, 0.0);

    Bnu.assign(0, 0, Bpp * d1LH(0, 0));
    Bnu.assign(0, 1, Bp0 * d1LH(0, 1));
    Bnu.assign(0, 2, 0.0);

    Bnu.assign(1, 0, B0p * d1LH(1, 0));
    Bnu.assign(1, 1, B00 * d1LH(1, 1));
    Bnu.assign(1, 2, B0m * d1LH(1, 2));

    Bnu.assign(2, 0, 0.0);
    Bnu.assign(2, 1, Bm0 * d1LH(2, 1));
    Bnu.assign(2, 2, Bmm * d1LH(2, 2));

    Cnu.assign(0, 0, Cpp * d1LH(0, 0));
    Cnu.assign(0, 1, Cp0 * d1LH(0, 1));
    Cnu.assign(0, 2, 0.0);

    Cnu.assign(1, 0, C0p * d1LH(1, 0));
    Cnu.assign(1, 1, C00 * d1LH(1, 1));
    Cnu.assign(1, 2, C0m * d1LH(1, 2));

    Cnu.assign(2, 0, 0.0);
    Cnu.assign(2, 1, Cm0 * d1LH(2, 1));
    Cnu.assign(2, 2, Cmm * d1LH(2, 2));

    //  The matrix with the total J=1 neutrino amplitude (only LH neutrinos)  
    gslpp::matrix<gslpp::complex> Ampnu1(3, 3, 0.0);

    Ampnu1 = Bnu - Cnu / (1.0 + beta * beta - 2.0 * beta * cos);

    Ampnu1 = Uenu * Uenu.conjugate() * Ampnu1 / (2.0 * beta * sW2_tree);

    gslpp::matrix<gslpp::complex> Ampnu2(3, 3, 0.0);

    Ampnu2.assign(0, 2, (1.0 - cos) / 2.0);
    Ampnu2.assign(1, 1, 0.0);
    Ampnu2.assign(2, 0, -(1.0 + cos) / 2.0);

    Ampnu2 = (2.0 * eeMz2 / sW2_tree) * Uenu * Uenu.conjugate() * Ampnu2 * sin / (1.0 + beta * beta - 2.0 * beta * cos);

    //  Total amplitudes 
    gslpp::matrix<gslpp::complex> MRH(3, 3, 0.0);
    gslpp::matrix<gslpp::complex> MLH(3, 3, 0.0);

    MRH = sqrt(2.0) * eeMz2 * (AmpZRH + AmpgaRH);
    MLH = -sqrt(2.0) * eeMz2 * (AmpZLH + AmpgaLH + Ampnu1) + Ampnu2;

    //  Total amplitude squared and differential cross section (in pb)
    gslpp::matrix<double> M2(3, 3, 0.0);
    double dxsdcos;

    dxsdcos = 0.0;

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            M2.assign(i, j, (MRH(i, j)* (MRH(i, j).conjugate())
                    + MLH(i, j)* (MLH(i, j).conjugate())).real());

            dxsdcos = dxsdcos + M2(i, j);
        }
    }

    //  Differential cross section in pb
    dxsdcos = (topb * beta / 32.0 / M_PI / s) * dxsdcos;

    return dxsdcos;
}

double NPSMEFTd6General::dxseeWWdcosBin(const double sqrt_s, const double cos1, const double cos2) const
{
    double xsWWbin; // *< Gsl integral variable 
    double errWW; // *< Gsl integral variable 

    gsl_function FR; // *< Gsl integral variable 

    FR = convertToGslFunction(bind(&NPSMEFTd6General::dxseeWWdcos, &(*this), sqrt_s, _1));

    gsl_integration_cquad(&FR, cos1, cos2, 1.e-5, 1.e-4, w_WW, &xsWWbin, &errWW, NULL);

    //  Simple integration for testing
    //    double cosx;

    //    xsWWbin = 0.0;

    //    for (int i=1; i<100; i++){
    //        cosx = cos1 +  i*(cos2-cos1)/100;
    //        xsWWbin = xsWWbin + dxseeWWdcos(sqrt_s, cosx);
    //    }

    //    xsWWbin = xsWWbin + 0.5 * (dxseeWWdcos(sqrt_s, cos1) + dxseeWWdcos(sqrt_s, cos2));

    //    xsWWbin = xsWWbin * (cos2-cos1)/100;

    //  Compute the BR into e nu, mu nu for one W and into jets for the other
    double BRlv, BRjj;

    BRlv = GammaW(leptons[NEUTRINO_1], leptons[ELECTRON]) +
            GammaW(leptons[NEUTRINO_2], leptons[MU]) +
            GammaW(leptons[NEUTRINO_3], leptons[TAU]);

    BRjj = GammaW() - BRlv;

    BRlv = BRlv - GammaW(leptons[NEUTRINO_3], leptons[TAU]);

    BRlv = BRlv / GammaW();

    BRjj = BRjj / GammaW();



    return xsWWbin * BRlv * BRjj;
}

double NPSMEFTd6General::xseeWW(const double sqrt_s) const
{
    return dxseeWWdcosBin(sqrt_s, -1.0, 1.0);
}

double NPSMEFTd6General::mueeWW(const double sqrt_s) const
{
    double mu = 1.0;

    if (sqrt_s == 0.161) {

        mu +=
                -127.685 * CHl1R[0][0] / LambdaNP2
                - 175.567 * CHeR[0][0] / LambdaNP2
                + 242506. * CHl3R[0][0] / LambdaNP2
                - 86570.7 * CHD / LambdaNP2
                - 189772. * CHWB / LambdaNP2
                + 12.769 * CDHB / LambdaNP2
                + 6.384 * CDHW / LambdaNP2
                + 0. * CW / LambdaNP2
                - 2.858 * delta_GF
                - 70.01 * deltaMwd6();

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (-13.134 * deltaMz()
                + 0. * deltaaMZ()
                + 18.795 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.240) {

        mu +=
                -26882.4 * CHl1R[0][0] / LambdaNP2
                - 17485.4 * CHeR[0][0] / LambdaNP2
                + 267456. * CHl3R[0][0] / LambdaNP2
                - 83799.2 * CHD / LambdaNP2
                - 168074. * CHWB / LambdaNP2
                + 3199.72 * CDHB / LambdaNP2
                + 3401.93 * CDHW / LambdaNP2
                + 6649.22 * CW / LambdaNP2
                - 2.812 * delta_GF
                - 0.993 * deltaMwd6();

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+4.101 * deltaMz()
                - 0.584 * deltaaMZ()
                + 2.688 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.250) {

        mu +=
                -29442.7 * CHl1R[0][0] / LambdaNP2
                - 18494.5 * CHeR[0][0] / LambdaNP2
                + 269747. * CHl3R[0][0] / LambdaNP2
                - 83750.9 * CHD / LambdaNP2
                - 167811. * CHWB / LambdaNP2
                + 3401.99 * CDHB / LambdaNP2
                + 3624.67 * CDHW / LambdaNP2
                + 7249.33 * CW / LambdaNP2
                - 2.812 * delta_GF
                - 0.959 * deltaMwd6();

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+4.184 * deltaMz()
                - 0.585 * deltaaMZ()
                + 2.709 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.350) {

        mu +=
                -47552.4 * CHl1R[0][0] / LambdaNP2
                - 23798.8 * CHeR[0][0] / LambdaNP2
                + 289379. * CHl3R[0][0] / LambdaNP2
                - 83905.3 * CHD / LambdaNP2
                - 168326. * CHWB / LambdaNP2
                + 5979.05 * CDHB / LambdaNP2
                + 6520.95 * CDHW / LambdaNP2
                + 10476.9 * CW / LambdaNP2
                - 2.832 * delta_GF
                - 0.781 * deltaMwd6();

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+4.516 * deltaMz()
                - 0.659 * deltaaMZ()
                + 2.768 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.365) {

        mu +=
                -49800.4 * CHl1R[0][0] / LambdaNP2
                - 24520.1 * CHeR[0][0] / LambdaNP2
                + 290743. * CHl3R[0][0] / LambdaNP2
                - 84033.5 * CHD / LambdaNP2
                - 168466. * CHWB / LambdaNP2
                + 6310.59 * CDHB / LambdaNP2
                + 6842.81 * CDHW / LambdaNP2
                + 10606.3 * CW / LambdaNP2
                - 2.828 * delta_GF
                - 0.775 * deltaMwd6();

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+4.533 * deltaMz()
                - 0.661 * deltaaMZ()
                + 2.789 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else if (sqrt_s == 0.500) {

        mu +=
                -68234.1 * CHl1R[0][0] / LambdaNP2
                - 31290. * CHeR[0][0] / LambdaNP2
                + 309504. * CHl3R[0][0] / LambdaNP2
                - 84926.8 * CHD / LambdaNP2
                - 171658. * CHWB / LambdaNP2
                + 9325.19 * CDHB / LambdaNP2
                + 10009.9 * CDHW / LambdaNP2
                + 10896.4 * CW / LambdaNP2
                - 2.84 * delta_GF
                - 0.705 * deltaMwd6();

        // Add modifications due to small variations of the SM parameters    
        mu += cHSM * (+4.7 * deltaMz()
                - 0.683 * deltaaMZ()
                + 2.799 * deltaGmu());

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            mu += 0.0;
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeWW()");

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

double NPSMEFTd6General::mueeWWPol(const double sqrt_s, const double Pol_em, const double Pol_ep) const
{
    double mu = 1.0;

    if (sqrt_s == 0.240) {

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    -23395. * CHl1R[0][0] / LambdaNP2
                    - 261092. * CHeR[0][0] / LambdaNP2
                    + 231526. * CHl3R[0][0] / LambdaNP2
                    - 72645.8 * CHD / LambdaNP2
                    - 25084.5 * CHWB / LambdaNP2
                    + 27060.4 * CDHB / LambdaNP2
                    - 7822.83 * CDHW / LambdaNP2
                    - 587.63 * CW / LambdaNP2
                    - 2.437 * delta_GF
                    - 1.554 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.226 * deltaMz()
                    - 0.083 * deltaaMZ()
                    + 2.189 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    -27334.5 * CHl1R[0][0] / LambdaNP2
                    - 564.392 * CHeR[0][0] / LambdaNP2
                    + 269600. * CHl3R[0][0] / LambdaNP2
                    - 84684.5 * CHD / LambdaNP2
                    - 178168. * CHWB / LambdaNP2
                    + 1539.25 * CDHB / LambdaNP2
                    + 4130.32 * CDHW / LambdaNP2
                    + 7121.6 * CW / LambdaNP2
                    - 2.838 * delta_GF
                    - 0.949 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.156 * deltaMz()
                    - 0.607 * deltaaMZ()
                    + 2.724 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeWWPol()");
        }

    } else if (sqrt_s == 0.250) {

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    -25554.9 * CHl1R[0][0] / LambdaNP2
                    - 274633. * CHeR[0][0] / LambdaNP2
                    + 234621. * CHl3R[0][0] / LambdaNP2
                    - 72498.3 * CHD / LambdaNP2
                    - 23308.5 * CHWB / LambdaNP2
                    + 29321.9 * CDHB / LambdaNP2
                    - 7518.62 * CDHW / LambdaNP2
                    + 314.876 * CW / LambdaNP2
                    - 2.444 * delta_GF
                    - 1.448 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.37 * deltaMz()
                    - 0.119 * deltaaMZ()
                    + 2.223 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    -29714.6 * CHl1R[0][0] / LambdaNP2
                    - 693.518 * CHeR[0][0] / LambdaNP2
                    + 271032. * CHl3R[0][0] / LambdaNP2
                    - 84929.3 * CHD / LambdaNP2
                    - 177727. * CHWB / LambdaNP2
                    + 1648.44 * CDHB / LambdaNP2
                    + 4443.85 * CDHW / LambdaNP2
                    + 7778.07 * CW / LambdaNP2
                    - 2.829 * delta_GF
                    - 0.914 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.233 * deltaMz()
                    - 0.62 * deltaaMZ()
                    + 2.73 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    -27418.7 * CHl1R[0][0] / LambdaNP2
                    - 157891. * CHeR[0][0] / LambdaNP2
                    + 250086. * CHl3R[0][0] / LambdaNP2
                    - 77904.2 * CHD / LambdaNP2
                    - 89451.9 * CHWB / LambdaNP2
                    + 17499.7 * CDHB / LambdaNP2
                    - 2499.14 * CDHW / LambdaNP2
                    + 3435.6 * CW / LambdaNP2
                    - 2.607 * delta_GF
                    - 1.242 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+3.759 * deltaMz()
                    - 0.343 * deltaaMZ()
                    + 2.459 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    -29686. * CHl1R[0][0] / LambdaNP2
                    - 1698.32 * CHeR[0][0] / LambdaNP2
                    + 271004. * CHl3R[0][0] / LambdaNP2
                    - 84881.5 * CHD / LambdaNP2
                    - 177249. * CHWB / LambdaNP2
                    + 1732.98 * CDHB / LambdaNP2
                    + 4380.98 * CDHW / LambdaNP2
                    + 7742.96 * CW / LambdaNP2
                    - 2.828 * delta_GF
                    - 0.915 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.244 * deltaMz()
                    - 0.624 * deltaaMZ()
                    + 2.729 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeWWPol()");
        }

    } else if (sqrt_s == 0.350) {

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    -43312.4 * CHl1R[0][0] / LambdaNP2
                    - 370403. * CHeR[0][0] / LambdaNP2
                    + 262809. * CHl3R[0][0] / LambdaNP2
                    - 76119.5 * CHD / LambdaNP2
                    - 35565.5 * CHWB / LambdaNP2
                    + 48488.8 * CDHB / LambdaNP2
                    - 4519.05 * CDHW / LambdaNP2
                    + 6279.71 * CW / LambdaNP2
                    - 2.571 * delta_GF
                    - 1.059 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.035 * deltaMz()
                    - 0.336 * deltaaMZ()
                    + 2.471 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    -47925. * CHl1R[0][0] / LambdaNP2
                    - 912.302 * CHeR[0][0] / LambdaNP2
                    + 290384. * CHl3R[0][0] / LambdaNP2
                    - 84475.3 * CHD / LambdaNP2
                    - 177142. * CHWB / LambdaNP2
                    + 3105.71 * CDHB / LambdaNP2
                    + 7205.25 * CDHW / LambdaNP2
                    + 10660.4 * CW / LambdaNP2
                    - 2.841 * delta_GF
                    - 0.773 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.542 * deltaMz()
                    - 0.672 * deltaaMZ()
                    + 2.797 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    -45448.7 * CHl1R[0][0] / LambdaNP2
                    - 208484. * CHeR[0][0] / LambdaNP2
                    + 274583. * CHl3R[0][0] / LambdaNP2
                    - 80024.1 * CHD / LambdaNP2
                    - 97902.7 * CHWB / LambdaNP2
                    + 28562.8 * CDHB / LambdaNP2
                    + 575.898 * CDHW / LambdaNP2
                    + 8122.74 * CW / LambdaNP2
                    - 2.687 * delta_GF
                    - 0.928 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.257 * deltaMz()
                    - 0.496 * deltaaMZ()
                    + 2.607 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    -47903.7 * CHl1R[0][0] / LambdaNP2
                    - 2144.19 * CHeR[0][0] / LambdaNP2
                    + 290349. * CHl3R[0][0] / LambdaNP2
                    - 84405.4 * CHD / LambdaNP2
                    - 176530. * CHWB / LambdaNP2
                    + 3309.62 * CDHB / LambdaNP2
                    + 7174.21 * CDHW / LambdaNP2
                    + 10675.5 * CW / LambdaNP2
                    - 2.84 * delta_GF
                    - 0.777 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.543 * deltaMz()
                    - 0.674 * deltaaMZ()
                    + 2.798 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeWWPol()");
        }

    } else if (sqrt_s == 0.365) {

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    -45618.2 * CHl1R[0][0] / LambdaNP2
                    - 382668. * CHeR[0][0] / LambdaNP2
                    + 265703. * CHl3R[0][0] / LambdaNP2
                    - 77085.4 * CHD / LambdaNP2
                    - 38791. * CHWB / LambdaNP2
                    + 51079.9 * CDHB / LambdaNP2
                    - 3972.2 * CDHW / LambdaNP2
                    + 6727.91 * CW / LambdaNP2
                    - 2.582 * delta_GF
                    - 1.04 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.09 * deltaMz()
                    - 0.349 * deltaaMZ()
                    + 2.483 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    -50230.7 * CHl1R[0][0] / LambdaNP2
                    - 1000.53 * CHeR[0][0] / LambdaNP2
                    + 291951. * CHl3R[0][0] / LambdaNP2
                    - 84657.2 * CHD / LambdaNP2
                    - 177196. * CHWB / LambdaNP2
                    + 3348.72 * CDHB / LambdaNP2
                    + 7579.53 * CDHW / LambdaNP2
                    + 10879.2 * CW / LambdaNP2
                    - 2.84 * delta_GF
                    - 0.753 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.576 * deltaMz()
                    - 0.681 * deltaaMZ()
                    + 2.795 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeWWPol()");
        }

    } else if (sqrt_s == 0.380) {

        if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    -49806.5 * CHl1R[0][0] / LambdaNP2
                    - 221155. * CHeR[0][0] / LambdaNP2
                    + 280445. * CHl3R[0][0] / LambdaNP2
                    - 80550.4 * CHD / LambdaNP2
                    - 101476. * CHWB / LambdaNP2
                    + 31723.3 * CDHB / LambdaNP2
                    + 1672.16 * CDHW / LambdaNP2
                    + 8838.57 * CW / LambdaNP2
                    - 2.707 * delta_GF
                    - 0.891 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.331 * deltaMz()
                    - 0.503 * deltaaMZ()
                    + 2.64 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    -52386.5 * CHl1R[0][0] / LambdaNP2
                    - 2537.08 * CHeR[0][0] / LambdaNP2
                    + 294134. * CHl3R[0][0] / LambdaNP2
                    - 84922.5 * CHD / LambdaNP2
                    - 176871. * CHWB / LambdaNP2
                    + 3635.55 * CDHB / LambdaNP2
                    + 7973.68 * CDHW / LambdaNP2
                    + 10984.7 * CW / LambdaNP2
                    - 2.838 * delta_GF
                    - 0.753 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.589 * deltaMz()
                    - 0.68 * deltaaMZ()
                    + 2.81 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeWWPol()");
        }

    } else if (sqrt_s == 0.500) {

        if (Pol_em == 80. && Pol_ep == -30.) {
            mu +=
                    -64264.6 * CHl1R[0][0] / LambdaNP2
                    - 495727. * CHeR[0][0] / LambdaNP2
                    + 289682. * CHl3R[0][0] / LambdaNP2
                    - 80108.8 * CHD / LambdaNP2
                    - 61678. * CHWB / LambdaNP2
                    + 75403.3 * CDHB / LambdaNP2
                    + 458.146 * CDHW / LambdaNP2
                    + 8723.87 * CW / LambdaNP2
                    - 2.664 * delta_GF
                    - 0.849 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.362 * deltaMz()
                    - 0.496 * deltaaMZ()
                    + 2.591 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 30.) {
            mu +=
                    -68310.7 * CHl1R[0][0] / LambdaNP2
                    - 1341.22 * CHeR[0][0] / LambdaNP2
                    + 311528. * CHl3R[0][0] / LambdaNP2
                    - 84984.5 * CHD / LambdaNP2
                    - 178260. * CHWB / LambdaNP2
                    + 5206.37 * CDHB / LambdaNP2
                    + 10705.4 * CDHW / LambdaNP2
                    + 11071.1 * CW / LambdaNP2
                    - 2.855 * delta_GF
                    - 0.671 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.728 * deltaMz()
                    - 0.698 * deltaaMZ()
                    + 2.817 * deltaGmu());

        } else if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    -66178. * CHl1R[0][0] / LambdaNP2
                    - 274919. * CHeR[0][0] / LambdaNP2
                    + 299745. * CHl3R[0][0] / LambdaNP2
                    - 82524.6 * CHD / LambdaNP2
                    - 113979. * CHWB / LambdaNP2
                    + 43898.4 * CDHB / LambdaNP2
                    + 5024.43 * CDHW / LambdaNP2
                    + 9759.79 * CW / LambdaNP2
                    - 2.752 * delta_GF
                    - 0.778 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.515 * deltaMz()
                    - 0.602 * deltaaMZ()
                    + 2.695 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    -68435.6 * CHl1R[0][0] / LambdaNP2
                    - 3089.11 * CHeR[0][0] / LambdaNP2
                    + 310020. * CHl3R[0][0] / LambdaNP2
                    - 85227.7 * CHD / LambdaNP2
                    - 178139. * CHWB / LambdaNP2
                    + 5322.77 * CDHB / LambdaNP2
                    + 10598. * CDHW / LambdaNP2
                    + 11009.9 * CW / LambdaNP2
                    - 2.846 * delta_GF
                    - 0.681 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.725 * deltaMz()
                    - 0.695 * deltaaMZ()
                    + 2.828 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeWWPol()");
        }

    } else if (sqrt_s == 1.0) {

        if (Pol_em == 80. && Pol_ep == -20.) {
            mu +=
                    -145951. * CHl1R[0][0] / LambdaNP2
                    - 885593. * CHeR[0][0] / LambdaNP2
                    + 383080. * CHl3R[0][0] / LambdaNP2
                    - 83628.6 * CHD / LambdaNP2
                    - 114732. * CHWB / LambdaNP2
                    + 159832. * CDHB / LambdaNP2
                    + 17735.5 * CDHW / LambdaNP2
                    + 8916.37 * CW / LambdaNP2
                    - 2.787 * delta_GF
                    - 0.57 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.793 * deltaMz()
                    - 0.653 * deltaaMZ()
                    + 2.677 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 20.) {
            mu +=
                    -150086. * CHl1R[0][0] / LambdaNP2
                    - 4395.1 * CHeR[0][0] / LambdaNP2
                    + 394641. * CHl3R[0][0] / LambdaNP2
                    - 85925.1 * CHD / LambdaNP2
                    - 181046. * CHWB / LambdaNP2
                    + 13333.6 * CDHB / LambdaNP2
                    + 23871.2 * CDHW / LambdaNP2
                    + 9450.35 * CW / LambdaNP2
                    - 2.871 * delta_GF
                    - 0.492 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+5.001 * deltaMz()
                    - 0.752 * deltaaMZ()
                    + 2.79 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeWWPol()");
        }

    } else if (sqrt_s == 1.5) {

        if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    -261040. * CHl1R[0][0] / LambdaNP2
                    - 1059495. * CHeR[0][0] / LambdaNP2
                    + 500666. * CHl3R[0][0] / LambdaNP2
                    - 84992.3 * CHD / LambdaNP2
                    - 144925. * CHWB / LambdaNP2
                    + 205215. * CDHB / LambdaNP2
                    + 38777.5 * CDHW / LambdaNP2
                    + 7857.84 * CW / LambdaNP2
                    - 2.817 * delta_GF
                    - 0.471 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+4.975 * deltaMz()
                    - 0.718 * deltaaMZ()
                    + 2.688 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    -265008. * CHl1R[0][0] / LambdaNP2
                    - 13002.4 * CHeR[0][0] / LambdaNP2
                    + 507924. * CHl3R[0][0] / LambdaNP2
                    - 86313.9 * CHD / LambdaNP2
                    - 182113. * CHWB / LambdaNP2
                    + 24953.6 * CDHB / LambdaNP2
                    + 42429.8 * CDHW / LambdaNP2
                    + 8014.86 * CW / LambdaNP2
                    - 2.857 * delta_GF
                    - 0.429 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+5.094 * deltaMz()
                    - 0.768 * deltaaMZ()
                    + 2.739 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeWWPol()");
        }

    } else if (sqrt_s == 3.0) {

        if (Pol_em == 80. && Pol_ep == 0.) {
            mu +=
                    -776767. * CHl1R[0][0] / LambdaNP2
                    - 3168410. * CHeR[0][0] / LambdaNP2
                    + 1016120. * CHl3R[0][0] / LambdaNP2
                    - 85414.3 * CHD / LambdaNP2
                    - 155729. * CHWB / LambdaNP2
                    + 628130. * CDHB / LambdaNP2
                    + 123368. * CDHW / LambdaNP2
                    + 6454.34 * CW / LambdaNP2
                    - 2.831 * delta_GF
                    - 0.352 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+5.165 * deltaMz()
                    - 0.755 * deltaaMZ()
                    + 2.77 * deltaGmu());

        } else if (Pol_em == -80. && Pol_ep == 0.) {
            mu +=
                    -785359. * CHl1R[0][0] / LambdaNP2
                    - 39533. * CHeR[0][0] / LambdaNP2
                    + 1027322. * CHl3R[0][0] / LambdaNP2
                    - 86621.7 * CHD / LambdaNP2
                    - 184516. * CHWB / LambdaNP2
                    + 75975.5 * CDHB / LambdaNP2
                    + 127086. * CDHW / LambdaNP2
                    + 6519.78 * CW / LambdaNP2
                    - 2.86 * delta_GF
                    - 0.328 * deltaMwd6();

            // Add modifications due to small variations of the SM parameters    
            mu += cHSM * (+5.246 * deltaMz()
                    - 0.79 * deltaaMZ()
                    + 2.81 * deltaGmu());

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeWWPol()");
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mueeWWPol()");

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;
}

////////////////////////////////////////////////////////////////////////

//----- High Energy diboson observables at hadron colliders

double NPSMEFTd6General::ppZHprobe(const double sqrt_s) const
{

    double gpZ = 0.0;

    double ghZuL, ghZdL, ghZuR, ghZdR;

    // In the Warsaw basis the contact interactions are generated only by CHF ops but
    // in the modified basis ODHB, ODHW also contribute

    ghZuL = -(eeMz / sW_tree / cW_tree)*(CHq1R[0][0] - CHq3R[0][0] + g1_tree * (1.0 / 12.0) * CDHB - (g2_tree / 4.0) * CDHW) * v2_over_LambdaNP2;
    ghZdL = -(eeMz / sW_tree / cW_tree)*(CHq1R[0][0] + CHq3R[0][0] + g1_tree * (1.0 / 12.0) * CDHB + (g2_tree / 4.0) * CDHW) * v2_over_LambdaNP2;
    ghZuR = -(eeMz / sW_tree / cW_tree)*(CHuR[0][0] + g1_tree * (1.0 / 3.0) * CDHB) * v2_over_LambdaNP2;
    ghZdR = -(eeMz / sW_tree / cW_tree)*(CHdR[0][0] - g1_tree * (1.0 / 6.0) * CDHB) * v2_over_LambdaNP2;

    if (sqrt_s == 14.0) {

        gpZ = ghZuL - 0.76 * ghZdL - 0.45 * ghZuR + 0.14 * ghZdR;

    } else if (sqrt_s == 27.0) {
        // Use the same as for 14 TeV for the moment 

        gpZ = ghZuL - 0.76 * ghZdL - 0.45 * ghZuR + 0.14 * ghZdR;

    } else if (sqrt_s == 100.0) {

        gpZ = ghZuL - 0.90 * ghZdL - 0.45 * ghZuR + 0.17 * ghZdR;

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::ppZHprobe()");


    return gpZ;

}

double NPSMEFTd6General::mupTVppWZ(const double sqrt_s, const double pTV1, const double pTV2) const
{
    double mu = 1.0;

    double cHWp = 0.0;

    // In the Warsaw basis the contact interactions are generated only by CiHQ3 but
    // in the modified basis ODHW also contribute
    // Master Equations below are for cHWp = Ci/Lambda^2 in units of TeV^{-2}, 
    // but LambdaNP is in GeV. Add conversion factor.

    cHWp = 4.0 * (sW2_tree / eeMz2) * (CHq3R[0][0] + (g2_tree / 4.0) * CDHW) * 1000000.0 / LambdaNP2;

    //  Bin dependences assuming cutoff of the EFT at 5 TeV
    //  Normalize to the total number of events to remove the dependence on Lumi
    //  (Numbers correspond to 3/ab)
    if (sqrt_s == 14.0) {

        if (pTV1 == 100.) {
            mu += (558.0 * cHWp + 56.8 * cHWp * cHWp) / 3450.0;

        } else if (pTV1 == 150.) {
            mu += (410.0 * cHWp + 17.64 * cHWp * cHWp) / 2690.0;

        } else if (pTV1 == 220.) {
            mu += (266.0 * cHWp + 45.6 * cHWp * cHWp) / 925.0;

        } else if (pTV1 == 300.) {
            mu += (304.0 * cHWp + 108.0 * cHWp * cHWp) / 563.0;

        } else if (pTV1 == 500.) {
            mu += (114.40 * cHWp + 96.8 * cHWp * cHWp) / 85.1;

        } else if (pTV1 == 750.) {
            mu += (46.20 * cHWp + 86.8 * cHWp * cHWp) / 14.9;

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mupTVppWZ()");
        }

    } else if (sqrt_s == 27.0) {

        if (pTV1 == 150.) {
            mu += (824.0 * cHWp + 71.6 * cHWp * cHWp) / 5370.0;

        } else if (pTV1 == 220.) {
            mu += (510.0 * cHWp + 75.2 * cHWp * cHWp) / 2210.0;

        } else if (pTV1 == 300.) {
            mu += (808.0 * cHWp + 268.4 * cHWp * cHWp) / 1610.0;

        } else if (pTV1 == 500.) {
            mu += (374.0 * cHWp + 308.0 * cHWp * cHWp) / 331.0;

        } else if (pTV1 == 750.) {
            mu += (216.0 * cHWp + 420.0 * cHWp * cHWp) / 85.9;

        } else if (pTV1 == 1200.) {
            mu += (78.2 * cHWp + 325.2 * cHWp * cHWp) / 10.0;

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mupTVppWZ()");
        }

    } else if (sqrt_s == 100.0) {

        if (pTV1 == 220.) {
            mu += (2000.0 * cHWp + 368.4 * cHWp * cHWp) / 8030.0;

        } else if (pTV1 == 300.) {
            mu += (2780.0 * cHWp + 1000.0 * cHWp * cHWp) / 7270.0;

        } else if (pTV1 == 500.) {
            mu += (1544.0 * cHWp + 1428.0 * cHWp * cHWp) / 2000.0;

        } else if (pTV1 == 750.) {
            mu += (1256.0 * cHWp + 2668.0 * cHWp * cHWp) / 717.0;

        } else if (pTV1 == 1200.) {
            mu += (678.0 * cHWp + 3400.0 * cHWp * cHWp) / 142.0;

        } else if (pTV1 == 1800.) {
            mu += (234.0 * cHWp + 2540.0 * cHWp * cHWp) / 27.5;

        } else {
            throw std::runtime_error("Bad argument in NPSMEFTd6General::mupTVppWZ()");
        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::mupTVppWZ()");

    if (mu < 0) return std::numeric_limits<double>::quiet_NaN();

    return mu;

}



////////////////////////////////////////////////////////////////////////


//----- Simplified Template Cross Sections Bins

//----- Stage 0

double NPSMEFTd6General::STXS0_qqH(const double sqrt_s) const
{

    double STXSb = 1.0;

    double C1 = 0.0;

    if (sqrt_s == 13.0) {

        C1 = 0.0064; // Use the same as VBF 

        STXSb +=
                +121687. * CHbox / LambdaNP2
                - 162383. * CHD / LambdaNP2
                + 6933.53 * CHB / LambdaNP2
                + 133459. * CHW / LambdaNP2
                - 286707. * CHWB / LambdaNP2
                + 1616.64 * CDHB / LambdaNP2
                - 1257.62 * CDHW / LambdaNP2
                - 1929.85 * CHq1R[0][0] / LambdaNP2
                + 1378.01 * CHq1R[1][1] / LambdaNP2
                + 2505.13 * CHq1R[2][2] / LambdaNP2
                + 17471.4 * CHuR[0][0] / LambdaNP2
                + 532.133 * CHuR[1][1] / LambdaNP2
                - 6552.85 * CHdR[0][0] / LambdaNP2
                - 454.364 * CHdR[1][1] / LambdaNP2
                - 437.319 * CHdR[2][2] / LambdaNP2
                + 152289. * CHq3R[0][0] / LambdaNP2
                - 2645.75 * CHq3R[1][1] / LambdaNP2
                + 2515.78 * CHq3R[2][2] / LambdaNP2
                - 4.496 * delta_GF
                - 0.084 * deltaGzd6()
                - 2.759 * deltaMwd6()
                - 0.142 * deltaGwd6()
                ;

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients
            STXSb += 0.0;

        }

    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS0_qqH()");

    //Add intrinsic and parametric relative theory errors (free par). (Assume they are constant in energy.)
    // Use the same as VBF
    STXSb += eVBFint + eVBFpar;

    //  Linear contribution from Higgs self-coupling
    STXSb = STXSb + cLHd6 * (C1 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    STXSb = STXSb + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}


//----- Stage 1
// NOTE: Not our own calculations. From https://twiki.cern.ch/twiki/bin/view/LHCPhysics/STXStoEFT  for HEL calculations
// From Table 3 in ATL-PHYS-PUB-2019-042 for Warsaw basis calculations

double NPSMEFTd6General::STXS_ggH_VBFtopo_j3v(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 + 56.6 * aiG + 5.5 * ai3G + 4.36 * ai2G;

    return STXSb;
}

double NPSMEFTd6General::STXS_ggH_VBFtopo_j3(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 + 55.9 * aiG + 9.04 * ai3G + 8.1 * ai2G;

    return STXSb;
}

double NPSMEFTd6General::STXS_ggH0j(const double sqrt_s) const
{

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    //    STXSb = 1.0 + 55.2*aiG + 0.362*ai3G + 0.276*ai2G;

    STXSb += (35.0 * CHG) * (1000000.0 / LambdaNP2);

    return STXSb;
}

double NPSMEFTd6General::STXS_ggH1j_pTH_0_60(const double sqrt_s) const
{

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    //    STXSb = 1.0 + 56.0*aiG + 1.52*ai3G + 1.19*ai2G;

    STXSb += (28.3 * CHG) * (1000000.0 / LambdaNP2);

    return STXSb;
}

double NPSMEFTd6General::STXS_ggH1j_pTH_60_120(const double sqrt_s) const
{

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    //    STXSb = 1.0 + 55.5*aiG + 4.12*ai3G + 2.76*ai2G;

    STXSb += (26.1 * CHG) * (1000000.0 / LambdaNP2);

    return STXSb;
}

double NPSMEFTd6General::STXS_ggH1j_pTH_120_200(const double sqrt_s) const
{

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    //    STXSb = 1.0 + 56.5*aiG + 17.8*ai3G + 11.2*ai2G;

    STXSb += (23.1 * CHG) * (1000000.0 / LambdaNP2);

    return STXSb;
}

double NPSMEFTd6General::STXS_ggH1j_pTH_200(const double sqrt_s) const
{

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    //    STXSb = 1.0 + 55.0*aiG + 52.0*ai3G + 34.0*ai2G;

    STXSb += (15.6 * CHG) * (1000000.0 / LambdaNP2);

    return STXSb;
}

double NPSMEFTd6General::STXS_ggH2j_pTH_0_200(const double sqrt_s) const
{

    // Warsaw parameterization

    double STXSb = 1.0;

    STXSb = 1.0 + 16.0 * CHG;

    return STXSb;
}

double NPSMEFTd6General::STXS_ggH2j_pTH_0_60(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 + 55.6 * aiG + 3.66 * ai3G + 4.23 * ai2G;

    return STXSb;
}

double NPSMEFTd6General::STXS_ggH2j_pTH_60_120(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 + 56.1 * aiG + 7.73 * ai3G + 6.81 * ai2G;

    return STXSb;
}

double NPSMEFTd6General::STXS_ggH2j_pTH_120_200(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 + 55.8 * aiG + 23.0 * ai3G + 17.5 * ai2G;

    return STXSb;
}

double NPSMEFTd6General::STXS_ggH2j_pTH_200(const double sqrt_s) const
{

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    //    STXSb = 1.0 + 56.0*aiG + 89.8*ai3G + 68.1*ai2G;

    STXSb += (15.6 * CHG) * (1000000.0 / LambdaNP2);

    return STXSb;
}

double NPSMEFTd6General::STXS_qqHqq_VBFtopo_Rest(const double sqrt_s) const
{

    return STXS_qqHqq_Rest(sqrt_s);
}

double NPSMEFTd6General::STXS_qqHqq_VBFtopo_j3v(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 + 1.256 * aiWW - 0.02319 * aiB - 4.31 * aiHW - 0.2907 * aiHB;

    return STXSb;
}

double NPSMEFTd6General::STXS_qqHqq_VBFtopo_j3(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 + 1.204 * aiWW - 0.02692 * aiB - 5.76 * aiHW - 0.4058 * aiHB;

    return STXSb;
}

double NPSMEFTd6General::STXS_qqHqq_nonVHtopo(const double sqrt_s) const
{

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    // Fix for non-universal
    double CiHL3 = CHl3R[0][0];
    double CiHQ1 = CHq1R[0][0], CiHQ3 = CHq3R[0][0], CiHu = CHuR[0][0], CiHd = CHdR[0][0];

    //    STXSb = 1.0 + 1.389*aiWW - 0.0284*aiB - 6.23*aiHW - 0.417*aiHB;

    STXSb += (0.1213 * CHbox - 0.0107 * CHD - 0.008 * CHW + 0.0313 * CHWB
            - 0.364 * CiHL3 + 0.0043 * CiHQ1 - 0.212 * CiHQ3 - 0.0108 * CiHu
            + 0.0038 * CiHd + 0.182 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

    return STXSb;
}

double NPSMEFTd6General::STXS_qqHqq_VHtopo(const double sqrt_s) const
{

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    // Fix for non-universal
    double CiHL3 = CHl3R[0][0];
    double CiHQ1 = CHq1R[0][0], CiHQ3 = CHq3R[0][0], CiHu = CHuR[0][0], CiHd = CHdR[0][0];

    //    STXSb = 1.0 + 1.389*aiWW - 0.0284*aiB - 6.23*aiHW - 0.417*aiHB;

    STXSb += (0.120 * CHbox - 0.0071 * CHD + 0.623 * CHW + 0.0215 * CHB
            + 0.098 * CHWB - 0.360 * CiHL3 - 0.026 * CiHQ1 + 1.86 * CiHQ3
            + 0.135 * CiHu - 0.0506 * CiHd + 0.181 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

    return STXSb;
}

double NPSMEFTd6General::STXS_qqHqq_Rest(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 + 1.546 * aiWW - 0.02509 * aiB - 3.631 * aiHW - 0.2361 * aiHB;

    return STXSb;
}

double NPSMEFTd6General::STXS_qqHqq_pTj_200(const double sqrt_s) const
{

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    // Fix for non-universal
    double CiHL3 = CHl3R[0][0];
    double CiHQ1 = CHq1R[0][0], CiHQ3 = CHq3R[0][0], CiHu = CHuR[0][0], CiHd = CHdR[0][0];

    //    STXSb = 1.0 + 7.82*aiWW - 0.1868*aiB - 30.65*aiHW - 2.371*aiHB;

    STXSb += (0.122 * CHbox - 0.0073 * CHD - 0.25 * CHW + 0.0024 * CHB
            + 0.045 * CHWB - 0.367 * CiHL3 + 0.030 * CiHQ1 - 0.47 * CiHQ3
            - 0.030 * CiHu + 0.0087 * CiHd + 0.180 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

    return STXSb;
}

double NPSMEFTd6General::STXS_qqHlv_pTV_0_250(const double sqrt_s) const
{

    // Warsaw parameterization

    double STXSb = 1.0;

    // Fix for non-universal
    double CiHL3 = CHl3R[0][0];
    double CiHQ3 = CHq3R[0][0];

    STXSb += (0.1212 * CHbox - 0.0304 * CHD + 0.874 * CHW
            - 0.242 * CiHL3 + 1.710 * CiHQ3 + 0.182 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

    return STXSb;
}

double NPSMEFTd6General::STXS_qqHlv_pTV_0_150(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 1.001 * aiH + 33.63 * aiWW + 11.49 * aiHW + 23.62 * aipHQ + 2.013 * aipHL;

    return STXSb;
}

double NPSMEFTd6General::STXS_qqHlv_pTV_150_250_0j(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 0.998 * aiH + 76.3 * aiWW + 50.7 * aiHW + 66.5 * aipHQ + 2.03 * aipHL;

    return STXSb;
}

double NPSMEFTd6General::STXS_qqHlv_pTV_150_250_1j(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 1.006 * aiH + 70.9 * aiWW + 45.5 * aiHW + 60.8 * aipHQ + 2.04 * aipHL;

    return STXSb;
}

double NPSMEFTd6General::STXS_qqHlv_pTV_250(const double sqrt_s) const
{

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    // Fix for non-universal
    double CiHL3 = CHl3R[0][0];
    double CiHQ3 = CHq3R[0][0];

    //    STXSb = 1.0 - 1.001*aiH + 196.5*aiWW + 169.4*aiHW + 186.3*aipHQ + 2.03*aipHL;

    STXSb += (0.121 * CHbox - 0.0299 * CHD + 1.06 * CHW - 0.237 * CiHL3
            + 10.9 * CiHQ3 + 0.184 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

    return STXSb;
}

double NPSMEFTd6General::STXS_qqHll_pTV_0_150(const double sqrt_s) const
{

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    // Fix for non-universal
    double CiHL1 = CHl1R[0][0], CiHL3 = CHl3R[0][0], CiHe = CHeR[0][0];
    double CiHQ1 = CHq1R[0][0], CiHQ3 = CHq3R[0][0], CiHu = CHuR[0][0], CiHd = CHdR[0][0];

    //    STXSb = 1.0 - 1.0*aiH - 4.001*aiT + 29.82*aiWW + 8.43*aiB + 8.5*aiHW 
    //            + 2.545*aiHB + 0.0315*aiA - 1.89*aiHQ + 22.84*aipHQ + 5.247*aiHu 
    //            - 2.0*aiHd - 0.963*aiHL + 2.042*aipHL - 0.2307*aiHe;

    STXSb += (0.1218 * CHbox + 0.0259 * CHD + 0.696 * CHW + 0.0846 * CHB
            + 0.328 * CHWB + 0.1332 * CiHL1 - 0.231 * CiHL3 - 0.1076 * CiHe
            + 0.016 * CiHQ1 + 1.409 * CiHQ3 + 0.315 * CiHu - 0.1294 * CiHd
            + 0.182 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

    return STXSb;
}

double NPSMEFTd6General::STXS_qqHll_pTV_150_250(const double sqrt_s) const
{

    // Warsaw parameterization

    double STXSb = 1.0;

    // Fix for non-universal
    double CiHL1 = CHl1R[0][0], CiHL3 = CHl3R[0][0], CiHe = CHeR[0][0];
    double CiHQ1 = CHq1R[0][0], CiHQ3 = CHq3R[0][0], CiHu = CHuR[0][0], CiHd = CHdR[0][0];


    STXSb += (0.124 * CHbox + 0.026 * CHD + 0.85 * CHW + 0.102 * CHB
            + 0.389 * CHWB + 0.134 * CiHL1 - 0.232 * CiHL3 - 0.109 * CiHe
            - 0.16 * CiHQ1 + 3.56 * CiHQ3 + 0.85 * CiHu - 0.315 * CiHd
            + 0.184 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

    return STXSb;
}

double NPSMEFTd6General::STXS_qqHll_pTV_150_250_0j(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 0.993 * aiH - 4.0 * aiT + 62.4 * aiWW + 18.08 * aiB + 37.6 * aiHW
            + 11.22 * aiHB - 5.03 * aiHQ + 61.0 * aipHQ + 14.39 * aiHu - 5.17 * aiHd
            - 0.977 * aiHL + 2.08 * aipHL - 0.234 * aiHe;

    return STXSb;
}

double NPSMEFTd6General::STXS_qqHll_pTV_150_250_1j(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 1.002 * aiH - 4.01 * aiT + 57.9 * aiWW + 16.78 * aiB + 32.8 * aiHW
            + 9.86 * aiHB - 4.58 * aiHQ + 55.6 * aipHQ + 13.54 * aiHu - 4.56 * aiHd
            - 0.989 * aiHL + 2.09 * aipHL - 0.235 * aiHe;

    return STXSb;
}

double NPSMEFTd6General::STXS_qqHll_pTV_250(const double sqrt_s) const
{

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    // Fix for non-universal
    double CiHL1 = CHl1R[0][0], CiHL3 = CHl3R[0][0], CiHe = CHeR[0][0];
    double CiHQ1 = CHq1R[0][0], CiHQ3 = CHq3R[0][0], CiHu = CHuR[0][0], CiHd = CHdR[0][0];

    //    STXSb = 1.0 - 0.998*aiH - 4.0*aiT + 153.1*aiWW + 45.6*aiB + 126.4*aiHW 
    //            + 37.9*aiHB - 13.85*aiHQ + 168.6*aipHQ + 41.7*aiHu - 13.48*aiHd 
    //            - 0.977*aiHL + 2.09*aipHL - 0.238*aiHe;

    STXSb += (0.122 * CHbox + 0.028 * CHD + 0.88 * CHW + 0.121 * CHB
            + 0.43 * CHWB + 0.137 * CiHL1 - 0.234 * CiHL3 - 0.113 * CiHe
            - 0.82 * CiHQ1 + 8.5 * CiHQ3 + 2.14 * CiHu - 0.71 * CiHd
            + 0.182 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

    return STXSb;
}

double NPSMEFTd6General::STXS_ttHtH(const double sqrt_s) const
{

    // Warsaw parameterization
    // (HEL parameterization commented out)

    double STXSb = 1.0;

    // Fix for non-universal
    double CiHL3 = CHl3R[0][0];
    double CiHQ3 = CHq3R[0][0];

    //  Set 4 quark operators to zero for the moment.
    double Cqq1 = 0.0, Cqq11 = 0.0, Cqq3 = 0.0, Cqq31 = 0.0;
    double Cuu = 0.0, Cuu1 = 0.0, Cud1 = 0.0, Cud8 = 0.0;
    double Cqu1 = 0.0, Cqu8 = 0.0, Cqd1 = 0.0, Cqd8 = 0.0;

    //    STXSb = 1.0 - 0.983*aiH + 2.949*aiu + 0.928*aiG + 313.6*aiuG 
    //            + 27.48*ai3G - 13.09*ai2G;

    STXSb += (0.133 * CG + 0.1182 * CHbox - 0.0296 * CHD + 0.532 * CHG
            + 0.0120 * CHW - 0.1152 * CuHR[2][2] - 0.790 * CuGR[2][2] - 0.0111 * CuWR[2][2]
            - 0.0017 * CuBR[2][2] - 0.1320 * CiHL3 + 0.0146 * CiHQ3
            + 0.0660 * CllR[0][1][1][0] + 0.0218 * Cqq1 + 0.1601 * Cqq11 + 0.0263 * Cqq3
            + 0.388 * Cqq31 + 0.0114 * Cuu + 0.1681 * Cuu1 - 0.0018 * Cud1
            + 0.0265 * Cud8 + 0.007 * Cqu1 + 0.1087 * Cqu8
            - 0.0011 * Cqd1 + 0.0266 * Cqd8) * (1000000.0 / LambdaNP2);

    return STXSb;
}

double NPSMEFTd6General::STXS_WHqqHqq_VBFtopo_j3v(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 0.94 * aiH + 39.5 * aiWW + 13.8 * aiHW + 32.1 * aipHQ;

    return STXSb;
}

double NPSMEFTd6General::STXS_WHqqHqq_VBFtopo_j3(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 1.04 * aiH + 44.9 * aiWW + 20.3 * aiHW + 36.8 * aipHQ;

    return STXSb;
}

double NPSMEFTd6General::STXS_WHqqHqq_VH2j(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 0.996 * aiH + 45.57 * aiWW + 23.66 * aiHW + 37.55 * aipHQ;

    return STXSb;
}

double NPSMEFTd6General::STXS_WHqqHqq_Rest(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 1.002 * aiH + 34.29 * aiWW + 11.56 * aiHW + 26.27 * aipHQ;

    return STXSb;
}

double NPSMEFTd6General::STXS_WHqqHqq_pTj1_200(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 1.003 * aiH + 181.2 * aiWW + 152.3 * aiHW + 173.7 * aipHQ;

    return STXSb;
}

double NPSMEFTd6General::STXS_ZHqqHqq_VBFtopo_j3v(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 0.94 * aiH - 4.0 * aiT + 34.8 * aiWW + 10.0 * aiB + 9.9 * aiHW
            + 3.04 * aiHB - 2.14 * aiHQ + 31.1 * aipHQ + 7.6 * aiHu - 2.59 * aiHd;

    return STXSb;
}

double NPSMEFTd6General::STXS_ZHqqHqq_VBFtopo_j3(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 0.97 * aiH - 3.98 * aiT + 38.1 * aiWW + 10.5 * aiB + 14.2 * aiHW
            + 4.15 * aiHB - 2.36 * aiHQ + 34.5 * aipHQ + 8.4 * aiHu - 2.79 * aiHd;

    return STXSb;
}

double NPSMEFTd6General::STXS_ZHqqHqq_VH2j(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 0.998 * aiH - 4.002 * aiT + 37.99 * aiWW + 10.47 * aiB + 16.45 * aiHW
            + 4.927 * aiHB - 2.401 * aiHQ + 34.45 * aipHQ + 7.94 * aiHu - 2.993 * aiHd;

    return STXSb;
}

double NPSMEFTd6General::STXS_ZHqqHqq_Rest(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 1.001 * aiH - 3.998 * aiT + 30.89 * aiWW + 8.35 * aiB + 8.71 * aiHW
            + 2.616 * aiHB - 1.782 * aiHQ + 26.1 * aipHQ + 5.942 * aiHu - 2.305 * aiHd;

    return STXSb;
}

double NPSMEFTd6General::STXS_ZHqqHqq_pTj1_200(const double sqrt_s) const
{

    // HEL parameterization

    double STXSb = 1.0;

    STXSb = 1.0 - 1.003 * aiH - 4.03 * aiT + 141.5 * aiWW + 41.6 * aiB + 112.5 * aiHW
            + 33.6 * aiHB - 11.52 * aiHQ + 156.2 * aipHQ + 38.9 * aiHu - 12.53 * aiHd;

    return STXSb;
}


//----- Stage 1.2
// NOTE: Not our own calculations.
// From Appendix A in ATLAS-CONF-2020-053 
// Warsaw basis calculations in {GF,MW,MZ} scheme, assuming U(3)^5 symmetry

double NPSMEFTd6General::STXS12_BrH4lRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiTotR1 = 0.0;

    // 4l
    dGHiR1 = (0.12 * CHbox + 0.005 * CHD - 0.296 * CHW - 0.197 * CHB + 0.296 * CHWB
            + 0.126 * (CHl1R[0][0] + CHl1R[1][1]) / 2.0 - 0.234 * (CHl3R[0][0] + CHl3R[1][1]) / 2.0
            - 0.101 * (CHeR[0][0] + CHeR[1][1]) / 2.0 + 0.181 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

    // Tot
    dGHiTotR1 = (-0.001 * CW + 0.12 * CHbox - 0.030 * CHD + 1.362 * CHG - 0.048 * CHW
            - 0.049 * CHB + 0.046 * CHWB - 0.005 * CeHR[2][2] - 0.012 * CuHR[2][2] - 0.085 * CdHR[2][2]
            + 0.051 * CuGR[2][2] - 0.002 * CuWR[2][2] - 0.003 * CuBR[2][2]
            - 0.150 * (CHl3R[0][0] + CHl3R[1][1] + CHl3R[2][2]) / 3.0 + 0.013 * (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0
            + 0.079 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

    Br += dGHiR1 - dGHiTotR1;

    if ((Br < 0) || (dGHiR1 < -1.0) || (dGHiTotR1 < -1.0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::STXS12_BrHevmuvRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiTotR1 = 0.0;

    // e v mu v
    dGHiR1 = deltaGammaHevmuvRatio1();

    // Tot
    dGHiTotR1 = (-0.001 * CW + 0.12 * CHbox - 0.030 * CHD + 1.362 * CHG - 0.048 * CHW
            - 0.049 * CHB + 0.046 * CHWB - 0.005 * CeHR[2][2] - 0.012 * CuHR[2][2] - 0.085 * CdHR[2][2]
            + 0.051 * CuGR[2][2] - 0.002 * CuWR[2][2] - 0.003 * CuBR[2][2]
            - 0.150 * (CHl3R[0][0] + CHl3R[1][1] + CHl3R[2][2]) / 3.0 + 0.013 * (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0
            + 0.079 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

    Br += dGHiR1 - dGHiTotR1;

    if ((Br < 0) || (dGHiR1 < -1.0) || (dGHiTotR1 < -1.0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::STXS12_BrHgagaRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiTotR1 = 0.0;

    // gaga
    dGHiR1 = (-40.15 * CHB - 13.08 * CHW + 22.4 * CHWB - 0.9463 * CW + 0.12 * CHbox
            - 0.2417 * CHD + 0.03447 * CuHR[2][2] - 1.151 * CuWR[2][2] - 2.150 * CuBR[2][2]
            - 0.3637 * (CHl3R[0][0] + CHl3R[1][1]) / 2.0 + 0.1819 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);
    ;

    // Tot
    dGHiTotR1 = (-0.001 * CW + 0.12 * CHbox - 0.030 * CHD + 1.362 * CHG - 0.048 * CHW
            - 0.049 * CHB + 0.046 * CHWB - 0.005 * CeHR[2][2] - 0.012 * CuHR[2][2] - 0.085 * CdHR[2][2]
            + 0.051 * CuGR[2][2] - 0.002 * CuWR[2][2] - 0.003 * CuBR[2][2]
            - 0.150 * (CHl3R[0][0] + CHl3R[1][1] + CHl3R[2][2]) / 3.0 + 0.013 * (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0
            + 0.079 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

    Br += dGHiR1 - dGHiTotR1;

    if ((Br < 0) || (dGHiR1 < -1.0) || (dGHiTotR1 < -1.0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::STXS12_BrHbbRatio() const
{
    double Br = 1.0;
    double dGHiR1 = 0.0, dGHiTotR1 = 0.0;

    // bb
    dGHiR1 = (0.12 * CHbox - 0.030 * CHD - 0.121 * CdHR[2][2] - 0.121 * (CHl3R[0][0] + CHl3R[1][1]) / 2.0
            + 0.061 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

    // Tot
    dGHiTotR1 = (-0.001 * CW + 0.12 * CHbox - 0.030 * CHD + 1.362 * CHG - 0.048 * CHW
            - 0.049 * CHB + 0.046 * CHWB - 0.005 * CeHR[2][2] - 0.012 * CuHR[2][2] - 0.085 * CdHR[2][2]
            + 0.051 * CuGR[2][2] - 0.002 * CuWR[2][2] - 0.003 * CuBR[2][2]
            - 0.150 * (CHl3R[0][0] + CHl3R[1][1] + CHl3R[2][2]) / 3.0 + 0.013 * (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0
            + 0.079 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

    Br += dGHiR1 - dGHiTotR1;

    if ((Br < 0) || (dGHiR1 < -1.0) || (dGHiTotR1 < -1.0)) return std::numeric_limits<double>::quiet_NaN();

    return Br;
}

double NPSMEFTd6General::STXS12_ggH_pTH200_300_Nj01(const double sqrt_s) const
{

    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.030 * CHD + 47 * CHG - 0.122 * CuHR[2][2]
                - 1.69 * CuGR[2][2] - 0.120 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.058 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH200_300_Nj01()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggH_pTH300_450_Nj01(const double sqrt_s) const
{

    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.029 * CHD + 60 * CHG - 0.12 * CuHR[2][2]
                - 2.1 * CuGR[2][2] - 0.11 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.055 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH300_450_Nj01()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggH_pTH450_650_Nj01(const double sqrt_s) const
{

    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.030 * CHD + 70 * CHG - 0.14 * CuHR[2][2]
                - 2. * CuGR[2][2] - 0.13 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.07 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH450_650_Nj01()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggH_pTH650_Inf_Nj01(const double sqrt_s) const
{

    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.02 * CHD + 200 * CHG - 0.05 * CuHR[2][2]
                - 10 * CuGR[2][2] - 0.07 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.06 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH650_Inf_Nj01()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggH_pTH0_10_Nj0(const double sqrt_s) const
{

    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0294 * CHD + 42.0 * CHG - 0.117 * CuHR[2][2]
                - 1.59 * CuGR[2][2] - 0.117 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.0587 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH0_10_Nj0()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggH_pTH10_Inf_Nj0(const double sqrt_s) const
{

    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0295 * CHD + 42.2 * CHG - 0.1186 * CuHR[2][2]
                - 1.62 * CuGR[2][2] - 0.1182 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.0590 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH10_Inf_Nj0()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggH_pTH0_60_Nj1(const double sqrt_s) const
{

    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0330 * CHD + 44.0 * CHG - 0.132 * CuHR[2][2]
                - 1.60 * CuGR[2][2] - 0.132 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.065 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH0_60_Nj1()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggH_pTH60_120_Nj1(const double sqrt_s) const
{

    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0314 * CHD + 43.5 * CHG - 0.125 * CuHR[2][2]
                - 1.58 * CuGR[2][2] - 0.125 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.063 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH60_120_Nj1()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggH_pTH120_200_Nj1(const double sqrt_s) const
{

    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.028 * CHD + 44 * CHG - 0.118 * CuHR[2][2]
                - 1.60 * CuGR[2][2] - 0.112 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.058 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_pTH120_200_Nj1()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggH_mjj0_350_pTH0_60_Nj2(const double sqrt_s) const
{

    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.033 * CHD + 46 * CHG - 0.128 * CuHR[2][2]
                - 1.63 * CuGR[2][2] - 0.132 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.065 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_mjj0_350_pTH0_60_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggH_mjj0_350_pTH60_120_Nj2(const double sqrt_s) const
{

    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.033 * CHD + 47 * CHG - 0.133 * CuHR[2][2]
                - 1.59 * CuGR[2][2] - 0.130 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.065 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_mjj0_350_pTH60_120_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggH_mjj0_350_pTH120_200_Nj2(const double sqrt_s) const
{

    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.032 * CHD + 46 * CHG - 0.132 * CuHR[2][2]
                - 1.48 * CuGR[2][2] - 0.130 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.066 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_mjj0_350_pTH120_200_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggH_mjj350_700_pTH0_200_ptHjj0_25_Nj2(const double sqrt_s) const
{

    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.038 * CHD + 48 * CHG - 0.16 * CuHR[2][2]
                - 1.60 * CuGR[2][2] - 0.147 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.075 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_mjj350_700_pTH0_200_ptHjj0_25_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggH_mjj350_700_pTH0_200_ptHjj25_Inf_Nj2(const double sqrt_s) const
{

    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.033 * CHD + 42 * CHG - 0.131 * CuHR[2][2]
                - 1.43 * CuGR[2][2] - 0.124 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.064 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_mjj350_700_pTH0_200_ptHjj25_Inf_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggH_mjj700_Inf_pTH0_200_ptHjj0_25_Nj2(const double sqrt_s) const
{

    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.033 * CHD + 50 * CHG - 0.14 * CuHR[2][2]
                - 1.60 * CuGR[2][2] - 0.13 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.068 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_mjj700_Inf_pTH0_200_ptHjj0_25_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggH_mjj700_Inf_pTH0_200_ptHjj25_Inf_Nj2(const double sqrt_s) const
{

    double STXSb = 1.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.030 * CHD + 44 * CHG - 0.13 * CuHR[2][2]
                - 1.4 * CuGR[2][2] - 0.13 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.061 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggH_mjj700_Inf_pTH0_200_ptHjj25_Inf_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggHll_pTV0_75(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / 3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0057 * CHD + 0.0090 * CHWB
                + 0.0454 * CuHR[2][2] - 0.309 * CuGR[2][2]
                - 0.0102 * 0.5 * (CHl1R[0][0] + CHl1R[1][1] - CHl3R[0][0] - CHl3R[1][1])
                - 0.2932 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                - 0.0231 * 0.5 * (CHeR[0][0] + CHeR[1][1]) - 0.827 * CiHQ1
                - 0.289 * CiHQ3
                + 0.246 * CiHu + 0.296 * CiHd
                + 0.218 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggHll_pTV0_75()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggHll_pTV75_150(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / 3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0015 * CHD + 0.0088 * CHWB
                + 0.0542 * CuHR[2][2] - 0.387 * CuGR[2][2]
                - 0.0103 * 0.5 * (CHl1R[0][0] + CHl1R[1][1] - CHl3R[0][0] - CHl3R[1][1])
                - 0.2943 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                - 0.0235 * 0.5 * (CHeR[0][0] + CHeR[1][1]) - 0.698 * CiHQ1
                - 0.250 * CiHQ3
                + 0.199 * CiHu + 0.257 * CiHd
                + 0.220 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggHll_pTV75_150()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggHll_pTV150_250_Nj0(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / 3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox + 0.020 * CHD + 0.008 * CHWB
                + 0.100 * CuHR[2][2] - 0.539 * CuGR[2][2]
                - 0.0104 * 0.5 * (CHl1R[0][0] + CHl1R[1][1] - CHl3R[0][0] - CHl3R[1][1])
                - 0.2974 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                - 0.0236 * 0.5 * (CHeR[0][0] + CHeR[1][1]) - 0.499 * CiHQ1
                - 0.199 * CiHQ3 + 0.105 * CiHu + 0.205 * CiHd
                + 0.223 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggHll_pTV150_250_Nj0()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggHll_pTV150_250_Nj1(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / 3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox + 0.0142 * CHD + 0.0084 * CHWB
                + 0.0851 * CuHR[2][2] - 0.491 * CuGR[2][2]
                - 0.0103 * 0.5 * (CHl1R[0][0] + CHl1R[1][1] - CHl3R[0][0] - CHl3R[1][1])
                - 0.2943 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                - 0.0233 * 0.5 * (CHeR[0][0] + CHeR[1][1]) - 0.552 * CiHQ1
                - 0.212 * CiHQ3 + 0.131 * CiHu + 0.219 * CiHd
                + 0.219 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggHll_pTV150_250_Nj1()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ggHll_pTV250_Inf(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / 3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox + 0.050 * CHD + 0.0091 * CHWB
                + 0.163 * CuHR[2][2] - 0.680 * CuGR[2][2]
                - 0.0108 * 0.5 * (CHl1R[0][0] + CHl1R[1][1] - CHl3R[0][0] - CHl3R[1][1])
                - 0.2968 * 0.5 * (CHl3R[0][0] + CHl3R[1][1]) - 0.0240 * 0.5 * (CHeR[0][0] + CHeR[1][1])
                - 0.352 * CiHQ1 - 0.171 * CiHQ3 + 0.020 * CiHu
                + 0.177 * CiHd + 0.221 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ggHll_pTV250_Inf()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHqq_Nj0(const double sqrt_s) const
{

    double STXSb = 1.0;

    //double CiHQ1;    
    double CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    //CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2])/3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.011 * CHD + 0.32 * CHW + 0.008 * CHB
                + 0.048 * CHWB - 0.36 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.46 * CiHQ3 + 0.027 * CiHu - 0.0125 * CiHd
                + 0.18 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_Nj0()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHqq_Nj1(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / 3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0111 * CHD + 0.187 * CHW + 0.0063 * CHB
                + 0.047 * CHWB - 0.368 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.003 * CiHQ1 + 0.39 * CiHQ3 + 0.0278 * CiHu
                - 0.0113 * CiHd + 0.183 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_Nj1()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHqq_mjj0_60_Nj2(const double sqrt_s) const
{

    double STXSb = 1.0;

    //double CiHQ1;    
    double CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    //CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2])/3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.011 * CHD + 0.38 * CHW + 0.012 * CHB
                + 0.060 * CHWB - 0.36 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.94 * CiHQ3 + 0.055 * CiHu - 0.022 * CiHd
                + 0.178 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj0_60_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHqq_mjj60_120_Nj2(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / 3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0072 * CHD + 0.638 * CHW + 0.0230 * CHB
                + 0.100 * CHWB - 0.364 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                - 0.015 * CiHQ1 + 2.07 * CiHQ3 + 0.152 * CiHu
                - 0.0593 * CiHd + 0.181 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj60_120_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHqq_mjj120_350_Nj2(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / 3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0099 * CHD - 0.021 * CHW + 0.0017 * CHB
                + 0.0368 * CHWB - 0.363 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                - 0.003 * CiHQ1 - 0.155 * CiHQ3 - 0.0038 * CiHu
                + 0.0022 * CiHd + 0.181 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj120_350_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHqq_mjj350_Inf_pTH200_Inf_Nj2(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / 3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0072 * CHD + 0.188 * CHW - 0.0012 * CHB
                + 0.038 * CHWB - 0.362 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.047 * CiHQ1 - 1.33 * CiHQ3 - 0.095 * CiHu
                + 0.0314 * CiHd + 0.181 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj350_Inf_pTH200_Inf_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHqq_mjj350_700_pTH0_200_pTHjj0_25_Nj2(const double sqrt_s) const
{

    double STXSb = 1.0;

    //double CiHQ1;
    double CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    //CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2])/3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0110 * CHD - 0.134 * CHW - 0.0014 * CHB
                + 0.0234 * CHWB - 0.368 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                - 0.371 * CiHQ3 - 0.0203 * CiHu
                + 0.0084 * CiHd + 0.184 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj350_700_pTH0_200_pTHjj0_25_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHqq_mjj350_700_pTH0_200_pTHjj25_Inf_Nj2(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / 3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0101 * CHD - 0.143 * CHW + 0.027 * CHWB
                - 0.358 * 0.5 * (CHl3R[0][0] + CHl3R[1][1]) + 0.002 * CiHQ1
                - 0.38 * CiHQ3 - 0.0204 * CiHu + 0.0081 * CiHd
                + 0.183 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj350_700_pTH0_200_pTHjj25_Inf_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHqq_mjj700_Inf_pTH0_200_pTHjj0_25_Nj2(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / 3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0101 * CHD - 0.117 * CHW - 0.0016 * CHB
                + 0.0231 * CHWB - 0.365 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.010 * CiHQ1 - 0.364 * CiHQ3 - 0.0216 * CiHu
                + 0.0074 * CiHd + 0.182 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj700_Inf_pTH0_200_pTHjj0_25_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHqq_mjj700_Inf_pTH0_200_pTHjj25_Inf_Nj2(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / 3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0096 * CHD - 0.168 * CHW + 0.023 * CHWB
                - 0.361 * 0.5 * (CHl3R[0][0] + CHl3R[1][1]) + 0.015 * CiHQ1
                - 0.442 * CiHQ3 - 0.0282 * CiHu + 0.0091 * CiHd
                + 0.180 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHqq_mjj700_Inf_pTH0_200_pTHjj25_Inf_Nj2()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHlv_pTV0_75(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ3; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0304 * CHD + 0.813 * CHW
                - 0.241 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 1.142 * CiHQ3 + 0.183 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHlv_pTV0_75()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHlv_pTV75_150(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ3; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0304 * CHD + 0.946 * CHW
                - 0.244 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 1.90 * CiHQ3 + 0.183 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHlv_pTV75_150()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHlv_pTV150_250_Nj0(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ3; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0312 * CHD + 1.06 * CHW
                - 0.247 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 4.07 * CiHQ3 + 0.187 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHlv_pTV150_250_Nj0()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHlv_pTV150_250_Nj1(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ3; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0307 * CHD + 1.08 * CHW
                - 0.239 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 3.58 * CiHQ3 + 0.180 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHlv_pTV150_250_Nj1()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHlv_pTV250_Inf(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ3; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0282 * CHD + 1.07 * CHW
                - 0.228 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 10.6 * CiHQ3 + 0.170 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHlv_pTV250_Inf()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHll_pTV0_75(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / 3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox + 0.0129 * CHD + 0.665 * CHW + 0.0835 * CHB
                + 0.303 * CHWB - 0.0362 * 0.5 * (CHl1R[0][0] + CHl1R[1][1] - CHl3R[0][0] - CHl3R[1][1])
                - 0.2772 * 0.5 * (CHl3R[0][0] + CHl3R[1][1]) - 0.0359 * 0.5 * (CHeR[0][0] + CHeR[1][1])
                + 0.029 * CiHQ1 + 1.27 * CiHQ3 + 0.245 * CiHu - 0.1064 * CiHd
                + 0.183 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHll_pTV0_75()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHll_pTV75_150(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / 3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox + 0.0128 * CHD + 0.771 * CHW + 0.092 * CHB
                + 0.341 * CHWB - 0.0360 * 0.5 * (CHl1R[0][0] + CHl1R[1][1] - CHl3R[0][0] - CHl3R[1][1])
                - 0.274 * 0.5 * (CHl3R[0][0] + CHl3R[1][1]) - 0.0362 * 0.5 * (CHeR[0][0] + CHeR[1][1])
                + 0.01 * CiHQ1 + 1.80 * CiHQ3 + 0.403 * CiHu - 0.166 * CiHd
                + 0.182 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHll_pTV75_150()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHll_pTV150_250_Nj0(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / 3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox + 0.013 * CHD + 0.86 * CHW + 0.103 * CHB
                + 0.366 * CHWB - 0.035 * 0.5 * (CHl1R[0][0] + CHl1R[1][1] - CHl3R[0][0] - CHl3R[1][1])
                - 0.267 * 0.5 * (CHl3R[0][0] + CHl3R[1][1]) - 0.0358 * 0.5 * (CHeR[0][0] + CHeR[1][1])
                - 0.12 * CiHQ1 + 3.63 * CiHQ3 + 0.87 * CiHu - 0.323 * CiHd
                + 0.177 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHll_pTV150_250_Nj0()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHll_pTV150_250_Nj1(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / 3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox + 0.013 * CHD + 0.85 * CHW + 0.102 * CHB
                + 0.373 * CHWB - 0.036 * 0.5 * (CHl1R[0][0] + CHl1R[1][1] - CHl3R[0][0] - CHl3R[1][1])
                - 0.266 * 0.5 * (CHl3R[0][0] + CHl3R[1][1]) - 0.0367 * 0.5 * (CHeR[0][0] + CHeR[1][1])
                - 0.10 * CiHQ1 + 3.19 * CiHQ3 + 0.77 * CiHu - 0.282 * CiHd
                + 0.177 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHll_pTV150_250_Nj1()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_qqHll_pTV250_Inf(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / 3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox + 0.010 * CHD + 0.88 * CHW + 0.135 * CHB
                + 0.41 * CHWB - 0.037 * 0.5 * (CHl1R[0][0] + CHl1R[1][1] - CHl3R[0][0] - CHl3R[1][1])
                - 0.271 * 0.5 * (CHl3R[0][0] + CHl3R[1][1]) - 0.036 * 0.5 * (CHeR[0][0] + CHeR[1][1])
                - 1.12 * CiHQ1 + 9.9 * CiHQ3 + 2.51 * CiHu - 0.81 * CiHd
                + 0.181 * CllR[0][1][1][0]) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_qqHll_pTV250_Inf()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ttH_pTH0_60(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ3; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (-0.021 * CG + 0.12 * CHbox - 0.0301 * CHD + 0.411 * CHG
                - 0.121 * CuHR[2][2] + 0.764 * CuGR[2][2] + 0.004 * CuWR[2][2]
                + 0.0015 * CuBR[2][2] - 0.121 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.0031 * CiHQ3
                + 0.0612 * CllR[0][1][1][0]
                //+ 0.0154 * Ciqq1 + 0.121 * Ciqq11 
                //+ 0.0142 * Ciqq3 + 0.299 * Ciqq31 
                //+ 0.0088 * Ciuu + 0.128 * Ciuu1 
                //- 0.0015 * Ciud1 + 0.0213 * Ciud8 
                //+ 0.0056 * Ciqu1 + 0.082 * Ciqu8 
                //- 0.001 * Ciqd1 + 0.0215 * Ciqd8
                ) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ttH_pTH0_60()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ttH_pTH60_120(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ3; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (-0.061 * CG + 0.12 * CHbox - 0.0286 * CHD + 0.450 * CHG
                - 0.1149 * CuHR[2][2] + 0.790 * CuGR[2][2] + 0.005 * CuWR[2][2]
                + 0.0017 * CuBR[2][2] - 0.1151 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.0032 * CiHQ3
                + 0.0574 * CllR[0][1][1][0]
                //+ 0.0183 * Ciqq1 + 0.138 * Ciqq11 
                //+ 0.0175 * Ciqq3 + 0.340 * Ciqq31 
                //+ 0.0104 * Ciuu + 0.147 * Ciuu1 
                //- 0.0017 * Ciud1 + 0.0244 * Ciud8 
                //+ 0.0066 * Ciqu1 + 0.0968 * Ciqu8 
                //- 0.001 * Ciqd1 + 0.0243 * Ciqd8
                ) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ttH_pTH60_120()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ttH_pTH120_200(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ3; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (-0.152 * CG + 0.12 * CHbox - 0.0282 * CHD + 0.553 * CHG
                + 0.0013 * CHW - 0.113 * CuHR[2][2] + 0.890 * CuGR[2][2]
                + 0.007 * CuWR[2][2] + 0.002 * CuBR[2][2]
                - 0.114 * 0.5 * (CHl3R[0][0] + CHl3R[1][1])
                + 0.0045 * CiHQ3 + 0.0569 * CllR[0][1][1][0]
                //+ 0.0282 * Ciqq1 + 0.202 * Ciqq11 
                //+ 0.0275 * Ciqq3 + 0.493 * Ciqq31 
                //+ 0.0156 * Ciuu + 0.217 * Ciuu1 
                //- 0.0025 * Ciud1 + 0.0347 * Ciud8 
                //+ 0.0097 * Ciqu1 + 0.138 * Ciqu8 
                //- 0.0016 * Ciqd1 + 0.0345 * Ciqd8
                ) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ttH_pTH120_200()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ttH_pTH200_300(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ1, CiHQ3; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / 3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (-0.311 * CG + 0.12 * CHbox - 0.0277 * CHD + 0.68 * CHG
                + 0.002 * CHW - 0.001 * CHWB - 0.112 * CuHR[2][2]
                + 0.97 * CuGR[2][2] + 0.0105 * CuWR[2][2] + 0.003 * CuBR[2][2]
                - 0.114 * 0.5 * (CHl3R[0][0] + CHl3R[1][1]) - 0.0015 * CiHQ1
                + 0.0091 * CiHQ3 + 0.0569 * CllR[0][1][1][0]
                //+ 0.0493 * Ciqq1 + 0.336 * Ciqq11 
                //+ 0.0484 * Ciqq3 + 0.82 * Ciqq31 
                //+ 0.0268 * Ciuu + 0.358 * Ciuu1 
                //- 0.0042 * Ciud1 + 0.0545 * Ciud8 
                //+ 0.0159 * Ciqu1 + 0.228 * Ciqu8 
                //- 0.0025 * Ciqd1 + 0.0541 * Ciqd8
                ) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ttH_pTH200_300()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_ttH_pTH300_Inf(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ1, CiHQ3, CiHu, CiHd; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ1 = (CHq1R[0][0] + CHq1R[1][1] + CHq1R[2][2]) / 3.0;
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;
    CiHu = (CHuR[0][0] + CHuR[1][1] + CHuR[2][2]) / 3.0;
    CiHd = (CHdR[0][0] + CHdR[1][1] + CHdR[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (-0.58 * CG + 0.12 * CHbox - 0.0276 * CHD + 0.84 * CHG
                + 0.003 * CHW - 0.001 * CHWB - 0.110 * CuHR[2][2]
                + 1.04 * CuGR[2][2] + 0.0186 * CuWR[2][2] + 0.0068 * CuBR[2][2]
                - 0.112 * 0.5 * (CHl3R[0][0] + CHl3R[1][1]) - 0.0105 * CiHQ1
                + 0.0503 * CiHQ3 + 0.0110 * CiHu - 0.0032 * CiHd
                + 0.056 * CllR[0][1][1][0]
                //+ 0.120 * Ciqq1 + 0.75 * Ciqq11 
                //+ 0.122 * Ciqq3 + 1.70 * Ciqq31 
                //+ 0.064 * Ciuu + 0.78 * Ciuu1 
                //- 0.0091 * Ciud1 + 0.110 * Ciud8 
                //+ 0.0344 * Ciqu1 + 0.497 * Ciqu8 
                //- 0.0045 * Ciqd1 + 0.111 * Ciqd8
                ) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_ttH_pTH300_Inf()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}

double NPSMEFTd6General::STXS12_tH(const double sqrt_s) const
{

    double STXSb = 1.0;

    double CiHQ3; // Cannot resolve fam. dependence -> assume universality for quarks. 
    CiHQ3 = (CHq3R[0][0] + CHq3R[1][1] + CHq3R[2][2]) / 3.0;

    if (sqrt_s == 13.0) {

        STXSb += (0.12 * CHbox - 0.0272 * CHD + 0.254 * CHG + 0.1808 * CHW
                - 0.0764 * CuHR[2][2] + 0.119 * CuGR[2][2] + 0.170 * CuWR[2][2]
                - 0.2679 * 0.5 * (CHl3R[0][0] + CHl3R[1][1]) + 0.319 * CiHQ3
                + 0.1341 * CllR[0][1][1][0]
                //+ 0.418 * Ciqq3
                ) * (1000000.0 / LambdaNP2);

        if (FlagQuadraticTerms) {
            //Add contributions that are quadratic in the effective coefficients

            STXSb += 0.0;

        }
    } else
        throw std::runtime_error("Bad argument in NPSMEFTd6General::STXS12_tH()");

    if (STXSb < 0) return std::numeric_limits<double>::quiet_NaN();

    return STXSb;
}


///////////////////////////////////////////////////////////////////////////////

double NPSMEFTd6General::kappamueff() const
{
    return sqrt(GammaHmumuRatio());
}

double NPSMEFTd6General::kappataueff() const
{
    return sqrt(GammaHtautauRatio());
}

double NPSMEFTd6General::kappaceff() const
{
    return sqrt(GammaHccRatio());
}

double NPSMEFTd6General::kappabeff() const
{
    return sqrt(GammaHbbRatio());
}

double NPSMEFTd6General::kappaGeff() const
{
    return sqrt(GammaHggRatio());
}

double NPSMEFTd6General::kappaZeff() const
{
    return sqrt(GammaHZZRatio());
}

double NPSMEFTd6General::kappaWeff() const
{
    return sqrt(GammaHWWRatio());
}

double NPSMEFTd6General::kappaAeff() const
{
    return sqrt(GammaHgagaRatio());
}

double NPSMEFTd6General::kappaZAeff() const
{
    return sqrt(GammaHZgaRatio());
}


/////////////Basic interactions of the so-called Higgs basis////////////////

double NPSMEFTd6General::deltayt_HB() const
{
    double mf = mtpole;
    double ciHB;

    ciHB = -(v() / mf / sqrt(2.0)) * CuHR[2][2] * v2_over_LambdaNP2 + delta_h - 0.5 * delta_GF;

    return ciHB;
}

double NPSMEFTd6General::deltayb_HB() const
{
    double mf = (quarks[BOTTOM].getMass());
    double ciHB;

    ciHB = -(v() / mf / sqrt(2.0)) * CdHR[2][2] * v2_over_LambdaNP2 + delta_h - 0.5 * delta_GF;

    return ciHB;
}

double NPSMEFTd6General::deltaytau_HB() const
{
    double mf = (leptons[TAU].getMass());
    double ciHB;

    ciHB = -(v() / mf / sqrt(2.0)) * CeHR[2][2] * v2_over_LambdaNP2 + delta_h - 0.5 * delta_GF;

    return ciHB;
}

double NPSMEFTd6General::deltayc_HB() const
{
    double mf = (quarks[CHARM].getMass());
    double ciHB;

    ciHB = -(v() / mf / sqrt(2.0)) * CuHR[1][1] * v2_over_LambdaNP2 + delta_h - 0.5 * delta_GF;

    return ciHB;
}

double NPSMEFTd6General::deltaymu_HB() const
{
    double mf = (leptons[MU].getMass());
    double ciHB;

    ciHB = -(v() / mf / sqrt(2.0)) * CeHR[1][1] * v2_over_LambdaNP2 + delta_h - 0.5 * delta_GF;

    return ciHB;
}

double NPSMEFTd6General::deltacZ_HB() const
{
    double ciHB;

    ciHB = delta_h - (3.0 / 2.0) * delta_GF;

    return ciHB;
}

double NPSMEFTd6General::cZBox_HB() const
{
    double ciHB;

    ciHB = (sW2_tree / eeMz2)*(delta_GF + 0.5 * CHD * v2_over_LambdaNP2);

    ciHB = ciHB + 0.5 * (sW2_tree / eeMz)*(CDHB / cW_tree + CDHW / sW_tree) * v2_over_LambdaNP2; // Extra, not in Warsaw basis

    return ciHB;
}

double NPSMEFTd6General::cZZ_HB() const
{
    double ciHB;

    ciHB = (4.0 * sW2_tree * cW2_tree / eeMz2)*(cW2_tree * CHW + sW2_tree * CHB + sW_tree * cW_tree * CHWB) * v2_over_LambdaNP2;

    ciHB = ciHB - (sW2_tree * cW2_tree / eeMz)*(CDHB / cW_tree + CDHW / sW_tree) * v2_over_LambdaNP2; // Extra, not in Warsaw basis

    return ciHB;
}

double NPSMEFTd6General::cZga_HB() const
{
    double ciHB;

    ciHB = (sW2_tree * cW2_tree / eeMz2)*(4.0 * CHW - 4.0 * CHB - (2.0 * (cW2_tree - sW2_tree) / sW_tree / cW_tree) * CHWB) * v2_over_LambdaNP2;

    ciHB = ciHB + 0.5 * (sW_tree * cW_tree / eeMz)*(CDHB / sW_tree - CDHW / cW_tree) * v2_over_LambdaNP2; // Extra, not in Warsaw basis

    return ciHB;
}

double NPSMEFTd6General::cgaga_HB() const
{
    double ciHB;

    ciHB = (4.0 / eeMz2)*(sW2_tree * CHW + cW2_tree * CHB - sW_tree * cW_tree * CHWB) * v2_over_LambdaNP2;

    return ciHB;
}

double NPSMEFTd6General::cgg_HB() const
{
    double ciHB;

    ciHB = (1.0 / (M_PI * AlsMz)) * CHG*v2_over_LambdaNP2;

    return ciHB;
}

double NPSMEFTd6General::cggEff_HB() const
{
    double ciHB;

    double m_t = mtpole;
    //doulbe m_t = quarks[TOP].getMass();
    double m_b = quarks[BOTTOM].getMass();
    double m_c = quarks[CHARM].getMass();

    double At = deltayt_HB() * AH_f(4.0 * m_t * m_t / mHl / mHl).real();
    double Ab = deltayb_HB() * AH_f(4.0 * m_b * m_b / mHl / mHl).real();
    double Ac = deltayc_HB() * AH_f(4.0 * m_c * m_c / mHl / mHl).real();

    ciHB = cgg_HB() + (1.0 / 16.0 / M_PI / M_PI) * (At + Ab + Ac);

    return ciHB;
}

double NPSMEFTd6General::lambz_HB() const
{
    double ciHB;

    ciHB = -(3.0 / 2.0)*(eeMz / sW_tree) * CW*v2_over_LambdaNP2;

    return ciHB;
}

/////////////Combinations of Warsaw basis coefficients constrained by EWPO////////////////

double NPSMEFTd6General::CEWHL111() const
{
    return CHl1R[0][0] + (1.0 / 4.0) * CHD;
}

double NPSMEFTd6General::CEWHL122() const
{
    return CHl1R[1][1] + (1.0 / 4.0) * CHD;
}

double NPSMEFTd6General::CEWHL133() const
{
    return CHl1R[2][2] + (1.0 / 4.0) * CHD;
}

double NPSMEFTd6General::CEWHL311() const
{
    return CHl3R[0][0] + (1.0 / 4.0) * (cW2_tree / sW2_tree) * CHD + (cW_tree / sW_tree) * CHD;
}

double NPSMEFTd6General::CEWHL322() const
{
    return CHl3R[1][1] + (1.0 / 4.0) * (cW2_tree / sW2_tree) * CHD + (cW_tree / sW_tree) * CHD;
}

double NPSMEFTd6General::CEWHL333() const
{
    return CHl3R[2][2] + (1.0 / 4.0) * (cW2_tree / sW2_tree) * CHD + (cW_tree / sW_tree) * CHD;
}

double NPSMEFTd6General::CEWHQ111() const
{
    return CHq1R[0][0] - (1.0 / 12.0) * CHD;
}

double NPSMEFTd6General::CEWHQ122() const
{
    return CHq1R[1][1] - (1.0 / 12.0) * CHD;
}

double NPSMEFTd6General::CEWHQ133() const
{
    return CHq1R[2][2] - (1.0 / 12.0) * CHD;
}

double NPSMEFTd6General::CEWHQ311() const
{
    return CHq3R[0][0] + (1.0 / 4.0) * (cW2_tree / sW2_tree) * CHD + (cW_tree / sW_tree) * CHD;
}

double NPSMEFTd6General::CEWHQ322() const
{
    return CHq3R[1][1] + (1.0 / 4.0) * (cW2_tree / sW2_tree) * CHD + (cW_tree / sW_tree) * CHD;
}

double NPSMEFTd6General::CEWHQ333() const
{
    return CHq3R[2][2] + (1.0 / 4.0) * (cW2_tree / sW2_tree) * CHD + (cW_tree / sW_tree) * CHD;
}

double NPSMEFTd6General::CEWHQd33() const
{
    return 0.5 * ((CHq1R[2][2] - (1.0 / 12.0) * CHD) +
            (CHq3R[2][2] + (1.0 / 4.0) * (cW2_tree / sW2_tree) * CHD + (cW_tree / sW_tree) * CHD));
}

double NPSMEFTd6General::CEWHe11() const
{
    return CHeR[0][0] + (1.0 / 2.0) * CHD;
}

double NPSMEFTd6General::CEWHe22() const
{
    return CHeR[1][1] + (1.0 / 2.0) * CHD;
}

double NPSMEFTd6General::CEWHe33() const
{
    return CHeR[2][2] + (1.0 / 2.0) * CHD;
}

double NPSMEFTd6General::CEWHu11() const
{
    return CHuR[0][0] - (1.0 / 3.0) * CHD;
}

double NPSMEFTd6General::CEWHu22() const
{
    return CHuR[1][1] - (1.0 / 3.0) * CHD;
}

double NPSMEFTd6General::CEWHu33() const
{
    return CHuR[2][2] - (1.0 / 3.0) * CHD;
}

double NPSMEFTd6General::CEWHd11() const
{
    return CHdR[0][0] + (1.0 / 6.0) * CHD;
}

double NPSMEFTd6General::CEWHd22() const
{
    return CHdR[1][1] + (1.0 / 6.0) * CHD;
}

double NPSMEFTd6General::CEWHd33() const
{
    return CHdR[2][2] + (1.0 / 6.0) * CHD;
}

////////////////////////////Auxiliary observables//////////////////////////////

double NPSMEFTd6General::AuxObs_NP1() const
{
    // To be used for some temporary observable

    // WY analysis at 13 TeV for HL-LHC 3/ab
    double Wpar, Ypar, Wpar2, Ypar2;
    double Chi2NC13, Chi2CC13, Chi2Tot;

    Wpar = 10000.0 * obliqueW();
    Ypar = 10000.0 * obliqueY();

    Wpar2 = Wpar*Wpar;
    Ypar2 = Ypar*Ypar;

    Chi2CC13 = Wpar2 * (18.365037149441695 + 2.422904241798858 * Wpar + 0.12120594308623695 * Wpar2);

    Chi2NC13 = 0.032772034538390675 * Wpar2 * Wpar2 + 2.815243944990361 * Ypar2 - 0.36522061776278516 * Ypar2 * Ypar
            + 0.017375258924241194 * Ypar2 * Ypar2 + Wpar2 * Wpar * (-0.7059117582389635 + 0.006816297425306027 * Ypar)
            + Wpar * Ypar * (7.988302197022343 + Ypar * (-0.5450119819316416 + 0.0050292149953719766 * Ypar))
            + Wpar2 * (5.68581760491364 + Ypar * (-0.5794111075840261 + 0.048026245835369625 * Ypar));

    Chi2Tot = Chi2CC13 + Chi2NC13;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

double NPSMEFTd6General::AuxObs_NP2() const
{
    // To be used for some temporary observable

    // WY analysis at 13 TeV for HL-LHC 3/ab for the CC
    // WY analysis at 27 TeV for HE-LHC 15/ab for the NC. 5% systematics (corr and uncorr)
    double Wpar, Ypar, Wpar2, Ypar2;
    double Chi2NC27, Chi2CC13, Chi2Tot;

    Wpar = 10000.0 * obliqueW();
    Ypar = 10000.0 * obliqueY();

    Wpar2 = Wpar*Wpar;
    Ypar2 = Ypar*Ypar;

    Chi2CC13 = Wpar2 * (18.365037149441695 + 2.422904241798858 * Wpar + 0.12120594308623695 * Wpar2);

    Chi2NC27 = 21.139285368181907 * Wpar2 * Wpar2 + Wpar2 * Wpar * (-89.16828370317616 + 7.182929295852857 * Ypar)
            + Wpar * Ypar * (208.8092257396059 + Ypar * (-81.00102926445666 + 6.203591096144735 * Ypar))
            + Ypar2 * (81.01075991905888 + Ypar * (-58.822719932531164 + 14.670206406369107 * Ypar))
            + Wpar2 * (136.70787790194357 + Ypar * (-86.48485007990255 + 35.67671393730628 * Ypar));

    Chi2Tot = Chi2CC13 + Chi2NC27;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

double NPSMEFTd6General::AuxObs_NP3() const
{
    // To be used for some temporary observable

    // WY analysis at 13 TeV for HL-LHC 3/ab for the CC
    // WY analysis at 27 TeV for HE-LHC 15/ab for the NC. 1% systematics (corr and uncorr)
    double Wpar, Ypar, Wpar2, Ypar2;
    double Chi2NC27, Chi2CC13, Chi2Tot;

    Wpar = 10000.0 * obliqueW();
    Ypar = 10000.0 * obliqueY();

    Wpar2 = Wpar*Wpar;
    Ypar2 = Ypar*Ypar;

    Chi2CC13 = Wpar2 * (18.365037149441695 + 2.422904241798858 * Wpar + 0.12120594308623695 * Wpar2);

    Chi2NC27 = 25.148424251427552 * Wpar2 * Wpar2 + Wpar2 * Wpar * (-105.31753344410277 + 8.01723084630248 * Ypar)
            + Wpar * Ypar * (253.11721255992683 + Ypar * (-93.18990615818014 + 6.8250043104055816 * Ypar))
            + Ypar2 * (97.52107126224298 + Ypar * (-67.961770347904945 + 16.80046890875678 * Ypar))
            + Wpar2 * (166.84179829911304 + Ypar * (-100.88118582829852 + 41.55424691040131 * Ypar));

    Chi2Tot = Chi2CC13 + Chi2NC27;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

double NPSMEFTd6General::AuxObs_NP4() const
{
    // WH distribution at 14 TeV: From 1704.01953 + hvqq terms

    double Bin1 = 1.0, Bin2 = 1.0, Bin3 = 1.0, Bin4 = 1.0, Bin5 = 1.0;

    double dVud = 0.0, dVcs = 0.0;
    double dcZ = 0.0, cZBox = 0.0, cZZ = 0.0, cZA = 0.0, cAA = 0.0;

    double C11 = 0.0178, C12 = 0.0144, C13 = 0.0102, C14 = 0.0052, C15 = 0.0006;

    double dchi2;

    //  Production in each bin (signal strength)

    Bin1 += 12.8 * dVud + 1.75 * dVcs
            + 2.00 * dcZ + 5.01 * cZBox + 2.72 * cZZ - 0.0267 * cZA - 0.0217 * cAA;

    //  Linear contribution from Higgs self-coupling
    Bin1 = Bin1 + cLHd6 * (C11 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    Bin1 = Bin1 + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    Bin2 += 15.3 * dVud + 1.91 * dVcs
            + 2.00 * dcZ + 5.81 * cZBox + 3.10 * cZZ - 0.0337 * cZA - 0.0255 * cAA;

    //  Linear contribution from Higgs self-coupling
    Bin2 = Bin2 + cLHd6 * (C12 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    Bin2 = Bin2 + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    Bin3 += 20.7 * dVud + 2.49 * dVcs
            + 2.01 * dcZ + 7.44 * cZBox + 3.76 * cZZ - 0.0535 * cZA - 0.0340 * cAA;

    //  Linear contribution from Higgs self-coupling
    Bin3 = Bin3 + cLHd6 * (C13 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    Bin3 = Bin3 + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    Bin4 += 35.1 * dVud + 3.63 * dVcs
            + 1.98 * dcZ + 11.8 * cZBox + 5.40 * cZZ - 0.112 * cZA - 0.0572 * cAA;

    //  Linear contribution from Higgs self-coupling
    Bin4 = Bin4 + cLHd6 * (C14 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    Bin4 = Bin4 + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    Bin5 += 67.7 * dVud + 5.41 * dVcs
            + 2.03 * dcZ + 22.6 * cZBox + 9.05 * cZZ - 0.276 * cZA - 0.117 * cAA;

    //  Linear contribution from Higgs self-coupling
    Bin5 = Bin5 + cLHd6 * (C15 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    Bin5 = Bin5 + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    //  Compute Chi square using only the last bin and the diphoton, ZZ and bb channels
    dchi2 = (Bin5 * BrHZZ4lRatio() - 1.0) * (Bin5 * BrHZZ4lRatio() - 1.0) / (0.07 * 0.07 + 0.48 * 0.48)
            + (Bin5 * BrHgagaRatio() - 1.0) * (Bin5 * BrHgagaRatio() - 1.0) / (0.08 * 0.08 + 0.54 * 0.54)
            + (Bin5 * BrHbbRatio() - 1.0) * (Bin5 * BrHbbRatio() - 1.0) / (0.33 * 0.33 + 0.61 * 0.61);

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(dchi2);
}

double NPSMEFTd6General::AuxObs_NP5() const
{
    // ZH distribution at 14 TeV: From 1704.01953 + hvqq terms

    double Bin1 = 1.0, Bin2 = 1.0, Bin3 = 1.0, Bin4 = 1.0, Bin5 = 1.0;

    double dgLZuu = 0.0, dgRZuu = 0.0, dgLZcc = 0.0, dgRZcc = 0.0;
    double dgLZdd = 0.0, dgRZdd = 0.0, dgLZss = 0.0, dgRZss = 0.0;

    double dcZ = 0.0, cZBox = 0.0, cZZ = 0.0, cZA = 0.0, cAA = 0.0;

    double C11 = 0.0208, C12 = 0.0164, C13 = 0.0112, C14 = 0.0051, C15 = 0.0021;

    double dchi2;

    //  Production in each bin (signal strength)

    Bin1 += 14.6 * dgLZuu - 6.74 * dgRZuu - 11.6 * dgLZdd + 2.28 * dgRZdd
            + 1.35 * dgLZcc - 0.589 * dgRZcc - 2.35 * dgLZss + 0.431 * dgRZss
            + 2.01 * dcZ + 4.14 * cZBox + 2.12 * cZZ - 0.0237 * cZA - 0.0126 * cAA;

    //  Linear contribution from Higgs self-coupling
    Bin1 = Bin1 + cLHd6 * (C11 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    Bin1 = Bin1 + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    Bin2 += 16.2 * dgLZuu - 7.77 * dgRZuu - 13.4 * dgLZdd + 2.63 * dgRZdd
            + 1.44 * dgLZcc - 0.668 * dgRZcc - 2.52 * dgLZss + 0.462 * dgRZss
            + 2.01 * dcZ + 4.86 * cZBox + 2.49 * cZZ - 0.0284 * cZA - 0.0156 * cAA;

    //  Linear contribution from Higgs self-coupling
    Bin2 = Bin2 + cLHd6 * (C12 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    Bin2 = Bin2 + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    Bin3 += 23.0 * dgLZuu - 10.8 * dgRZuu - 19.0 * dgLZdd + 3.64 * dgRZdd
            + 1.88 * dgLZcc - 0.891 * dgRZcc - 3.19 * dgLZss + 0.591 * dgRZss
            + 2.00 * dcZ + 6.35 * cZBox + 3.02 * cZZ - 0.0448 * cZA - 0.0221 * cAA;

    //  Linear contribution from Higgs self-coupling
    Bin3 = Bin3 + cLHd6 * (C13 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    Bin3 = Bin3 + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    Bin4 += 39.2 * dgLZuu - 18.4 * dgRZuu - 31.4 * dgLZdd + 5.88 * dgRZdd
            + 2.78 * dgLZcc - 1.36 * dgRZcc - 4.64 * dgLZss + 0.919 * dgRZss
            + 1.98 * dcZ + 10.5 * cZBox + 4.44 * cZZ - 0.0873 * cZA - 0.0396 * cAA;

    //  Linear contribution from Higgs self-coupling
    Bin4 = Bin4 + cLHd6 * (C14 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    Bin4 = Bin4 + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    Bin5 += 73.4 * dgLZuu - 35.5 * dgRZuu - 58.5 * dgLZdd + 11.2 * dgRZdd
            + 4.13 * dgLZcc - 1.95 * dgRZcc - 6.97 * dgLZss + 1.41 * dgRZss
            + 1.96 * dcZ + 20.3 * cZBox + 7.27 * cZZ - 0.193 * cZA - 0.0800 * cAA;

    //  Linear contribution from Higgs self-coupling
    Bin5 = Bin5 + cLHd6 * (C15 + 2.0 * dZH1) * deltaG_hhhRatio();
    //  Quadratic contribution from Higgs self-coupling: add separately from FlagQuadraticTerms
    Bin5 = Bin5 + cLHd6 * cLH3d62 * dZH2 * deltaG_hhhRatio() * deltaG_hhhRatio();

    //  Compute Chi square using only the last bin and the diphoton, ZZ and bb channels
    dchi2 = (Bin5 * BrHZZ4lRatio() - 1.0) * (Bin5 * BrHZZ4lRatio() - 1.0) / (0.09 * 0.09 + 0.65 * 0.65)
            + (Bin5 * BrHgagaRatio() - 1.0) * (Bin5 * BrHgagaRatio() - 1.0) / (0.03 * 0.03 + 0.99 * 0.99)
            + (Bin5 * BrHbbRatio() - 1.0) * (Bin5 * BrHbbRatio() - 1.0) / (0.10 * 0.10 + 0.34 * 0.34);

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(dchi2);
}

double NPSMEFTd6General::AuxObs_NP6() const
{
    // To be used for some temporary observable

    // HL-LHC DiHiggs invariant mass distribution: 14 TeV 3/ab

    double Chi2Tot;

    //  NP in decays
    double dGH2, dGgaga, dGbb, dBRTot;

    //  Contributions from the different bins    
    double Bin1, Bin2, Bin3, Bin4, Bin5, Bin6;
    double LLBin1, LLBin2, LLBin3, LLBin4, LLBin5, LLBin6;

    //  Higgs basis parameters
    double dcZHB, cZboxHB, cZZHB, cZgaHB, cgagaHB, cggHB;
    double dytHB, dybHB, dytauHB;
    double dKlambda;

    dcZHB = deltacZ_HB();
    cZboxHB = cZBox_HB();
    cZZHB = cZZ_HB();

    // In the paper it seems they use diff. norm but in the chi 2.nb
    //  they translate into that convention, so I assume their calculation
    //  is directly in the HB for the following 3 couplings 
    cZgaHB = cZga_HB();
    cgagaHB = cgaga_HB();
    cggHB = cgg_HB();

    dytHB = deltayt_HB();
    dybHB = deltayb_HB();
    dytauHB = deltaytau_HB();

    dKlambda = deltaG_hhhRatio();

    //  Corrections to the different Higgs widths
    dGH2 = 1. + 0.010512791990056657 * cZboxHB
            - 0.003819752423722165 * cZZHB + 0.0016024991450954641 * cZgaHB
            - 0.0005968238492400916 * (2.8975474398595105 * cZboxHB
            + 1.8975474398595107 * cZZHB - cZgaHB - 0.3426378481886507 * cgagaHB)
            + 0.0990750425382019 * (1.4487737199297552 * cZboxHB + 0.44877371992975534 * cZZHB
            - 0.2365019764475461 * cZgaHB - 0.08103452830235015 * cgagaHB)
            - 0.0330404571742506 * (cZZHB + 0.4730039528950922 * cZgaHB + 0.055933184863595636 * cgagaHB)
            - 0.00033171593951211893 * cgagaHB + 0.48287726036165796 * dcZHB
            + 1.1541846695471276 * dybHB + 0.12642022723635785 * dytauHB
            + 0.1704272683629381 * (0. + 118.68284969347252 * cggHB
            - 0.031082871395970327 * dybHB + 1.034601498835783 * dytHB)
            + 0.004560729716754681 * (0. - 12.079950077697095 * cgagaHB
            + 1.2739859351743013 * dcZHB + 0.0022136399615102554 * dybHB
            - 0.28081416399029446 * dytHB + 0.0036305606562964158 * dytauHB)
            + 0.003080492878860618 * (0. - 17.021015025105033 * cZgaHB
            + 1.0557935963831278 * dcZHB + 0.0006235357344154619 * dybHB
            - 0.05644023795399054 * dytHB + 0.000023105836447458856 * dytauHB);

    dGH2 = dGH2 * dGH2;

    dGgaga = 1.0 + 2.0 * (0. - 12.079950077697095 * cgagaHB
            + 1.2739859351743013 * dcZHB + 0.0022136399615102554 * dybHB
            - 0.28081416399029446 * dytHB + 0.0036305606562964158 * dytauHB);

    dGbb = 1.0 + 2.0 * dybHB;

    dBRTot = dGbb * dGgaga / dGH2;

    // Bin 1
    Bin1 = 0.17 * (1.0 + 3.9863794294589585 * cggHB
            + 21.333394807321064 * cggHB * cggHB + 3.9527789724382836 * dcZHB
            + 0.5566823785534646 * cggHB * dcZHB + 9.077153576669469 * dcZHB * dcZHB
            - 7.713285621354339 * dytHB + 6.573887966178747 * cggHB * dytHB
            - 45.88983201032187 * dcZHB * dytHB + 62.42156375416841 * dytHB * dytHB
            + 4.257555672380181 * cggHB * dytHB * dytHB + 4.620310477256665 * dcZHB * dytHB * dytHB
            - 9.403185493195476 * dytHB * dytHB * dytHB + 1.1563473213070041 * dytHB * dytHB * dytHB * dytHB
            - 0.14505129596051047 * dKlambda - 0.1418831193390564 * cggHB * dKlambda
            + 1.3502693869386464 * cggHB * cggHB * dKlambda - 0.6675315048183816 * dcZHB * dKlambda
            - 0.002999558395846163 * cggHB * dcZHB * dKlambda
            + 1.5448485758806263 * dytHB * dKlambda
            - 0.005002986050963205 * cggHB * dytHB * dKlambda
            - 0.6675315048183816 * dcZHB * dytHB * dKlambda
            + 1.5222565251876392 * dytHB * dytHB * dKlambda
            + 0.1278814581005547 * cggHB * dytHB * dytHB * dKlambda
            - 0.1676433466534976 * dytHB * dytHB * dytHB * dKlambda
            + 0.011296025346493552 * dKlambda * dKlambda
            + 0.0014116654816114353 * cggHB * dKlambda * dKlambda
            + 0.022260157195710357 * cggHB * cggHB * dKlambda * dKlambda
            + 0.022592050692987104 * dytHB * dKlambda * dKlambda
            + 0.0014116654816114353 * cggHB * dytHB * dKlambda * dKlambda
            + 0.011296025346493552 * dytHB * dytHB * dKlambda * dKlambda);

    Bin1 = 0.67944 + Bin1 * dBRTot;

    // Exclude points with negative values of BinX
    if (Bin1 < 0) return std::numeric_limits<double>::quiet_NaN();

    // Delta chi2 = -2*LL for the bin
    // Add an abs in the denominator of the log, 
    // even if events with negative BinX are not supposed to reach here.
    LLBin1 = 2.0 * (Bin1 - 0.84944 + 0.84944 * log(0.84944 / fabs(Bin1)));

    // Bin 2
    Bin2 = 0.33 * (1.0 + 1.8019627645351037 * cggHB
            + 7.953163597932105 * cggHB * cggHB + 3.735123481549394 * dcZHB
            - 2.654186900737259 * cggHB * dcZHB + 6.403420811368324 * dcZHB * dcZHB
            - 6.991501690350679 * dytHB + 11.425848100026737 * cggHB * dytHB
            - 30.219763494155394 * dcZHB * dytHB + 39.692409895713936 * dytHB * dytHB
            + 1.661324633279857 * cggHB * dytHB * dytHB + 4.46563789250516 * dcZHB * dytHB * dytHB
            - 8.710706509282613 * dytHB * dytHB * dytHB + 1.2361692069676826 * dytHB * dytHB * dytHB * dytHB
            - 0.21386875429750188 * dKlambda + 0.2363972133088796 * cggHB * dKlambda
            + 0.8549707073528667 * cggHB * cggHB * dKlambda - 0.7305144109557659 * dcZHB * dKlambda
            - 0.14136602060890807 * cggHB * dcZHB * dKlambda + 1.50533606463443 * dytHB * dKlambda
            + 0.747017712869579 * cggHB * dytHB * dKlambda - 0.7305144109557659 * dcZHB * dytHB * dKlambda
            + 1.4607351592940678 * dytHB * dytHB * dKlambda
            + 0.08652243773397514 * cggHB * dytHB * dytHB * dKlambda
            - 0.25846965963786395 * dytHB * dytHB * dytHB * dKlambda
            + 0.022300452670181038 * dKlambda * dKlambda + 0.009236644319657653 * cggHB * dKlambda * dKlambda
            + 0.023125582948149842 * cggHB * cggHB * dKlambda * dKlambda
            + 0.044600905340362075 * dytHB * dKlambda * dKlambda
            + 0.009236644319657653 * cggHB * dytHB * dKlambda * dKlambda
            + 0.022300452670181038 * dytHB * dytHB * dKlambda * dKlambda);

    Bin2 = 1.4312 + Bin2 * dBRTot;

    // Exclude points with negative values of BinX
    if (Bin2 < 0) return std::numeric_limits<double>::quiet_NaN();

    // Delta chi2 = -2*LL for the bin
    // Add an abs in the denominator of the log, 
    // even if events with negative BinX are not supposed to reach here.
    LLBin2 = 2.0 * (Bin2 - 1.7612 + 1.7612 * log(1.7612 / fabs(Bin2)));

    // Bin 3
    Bin3 = 0.99 * (1.0 + 0.6707152151845268 * cggHB
            + 4.113022405261353 * cggHB * cggHB + 3.4241906309399726 * dcZHB
            - 2.9926046286644703 * cggHB * dcZHB + 4.72026565086762 * dcZHB * dcZHB
            - 5.98522416048399 * dytHB + 10.012680455917307 * cggHB * dytHB
            - 20.69102310585157 * dcZHB * dytHB + 26.4871108999121 * dytHB * dytHB
            + 0.36415135473936855 * cggHB * dytHB * dytHB
            + 4.206380168414172 * dcZHB * dytHB * dytHB - 7.688318821918381 * dytHB * dytHB * dytHB
            + 1.3217369754941033 * dytHB * dytHB * dytHB * dytHB - 0.2873477323359291 * dKlambda
            + 0.35631144357921507 * cggHB * dKlambda
            + 0.6197019283831009 * cggHB * cggHB * dKlambda
            - 0.7821895374741993 * dcZHB * dKlambda
            - 0.23172596419155064 * cggHB * dcZHB * dKlambda
            + 1.415746929098462 * dytHB * dKlambda
            + 1.0816714186441074 * cggHB * dytHB * dKlambda
            - 0.7821895374741993 * dcZHB * dytHB * dKlambda
            + 1.3469684427821131 * dytHB * dytHB * dKlambda
            + 0.030182082490240562 * cggHB * dytHB * dytHB * dKlambda
            - 0.35612621865227795 * dytHB * dytHB * dytHB * dKlambda
            + 0.03438924315817444 * dKlambda * dKlambda
            + 0.019565500643816278 * cggHB * dKlambda * dKlambda
            + 0.02382411268034237 * cggHB * cggHB * dKlambda * dKlambda
            + 0.06877848631634888 * dytHB * dKlambda * dKlambda
            + 0.019565500643816278 * cggHB * dytHB * dKlambda * dKlambda
            + 0.03438924315817444 * dytHB * dytHB * dKlambda * dKlambda);

    Bin3 = 1.9764 + Bin3 * dBRTot;

    // Exclude points with negative values of BinX
    if (Bin3 < 0) return std::numeric_limits<double>::quiet_NaN();

    // Delta chi2 = -2*LL for the bin
    // Add an abs in the denominator of the log, 
    // even if events with negative BinX are not supposed to reach here.
    LLBin3 = 2.0 * (Bin3 - 2.9664 + 2.9664 * log(2.9664 / fabs(Bin3)));

    // Bin 4
    Bin4 = 2.86 * (1.0 - 0.27406342847042814 * cggHB
            + 1.9597360046161074 * cggHB * cggHB + 3.0113078755334115 * dcZHB
            - 2.776019265892887 * cggHB * dcZHB + 3.1917709639679823 * dcZHB * dcZHB
            - 4.6362529563760955 * dytHB + 7.377234185667426 * cggHB * dytHB
            - 12.294598143269557 * dcZHB * dytHB + 15.407456380301479 * dytHB * dytHB
            - 0.6767601835408067 * cggHB * dytHB * dytHB
            + 3.844719765004924 * dcZHB * dytHB * dytHB
            - 6.227970053277897 * dytHB * dytHB * dytHB + 1.4542592857563688 * dytHB * dytHB * dytHB * dytHB
            - 0.39767067022413716 * dKlambda + 0.3661464075997459 * cggHB * dKlambda
            + 0.4464409042746693 * cggHB * cggHB * dKlambda
            - 0.8334118894715125 * dcZHB * dKlambda
            - 0.3263197431214281 * cggHB * dcZHB * dKlambda
            + 1.1940464266776625 * dytHB * dKlambda
            + 1.2643073873631234 * cggHB * dytHB * dKlambda
            - 0.8334118894715125 * dcZHB * dytHB * dKlambda
            + 1.0808691956131988 * dytHB * dytHB * dKlambda
            - 0.0807982496009068 * cggHB * dytHB * dytHB * dKlambda
            - 0.5108479012886007 * dytHB * dytHB * dytHB * dKlambda
            + 0.05658861553223176 * dKlambda * dKlambda
            + 0.04424790213027415 * cggHB * dKlambda * dKlambda
            + 0.02585578262020257 * cggHB * cggHB * dKlambda * dKlambda
            + 0.11317723106446352 * dytHB * dKlambda * dKlambda
            + 0.04424790213027415 * cggHB * dytHB * dKlambda * dKlambda
            + 0.05658861553223176 * dytHB * dytHB * dKlambda * dKlambda);

    Bin4 = 5.167 + Bin4 * dBRTot;

    // Exclude points with negative values of BinX
    if (Bin4 < 0) return std::numeric_limits<double>::quiet_NaN();

    // Delta chi2 = -2*LL for the bin
    // Add an abs in the denominator of the log, 
    // even if events with negative BinX are not supposed to reach here.
    LLBin4 = 2.0 * (Bin4 - 8.027 + 8.027 * log(8.027 / fabs(Bin4)));

    // Bin 5
    Bin5 = 6.34 * (1.0 - 1.094329254675176 * cggHB
            + 1.0393648302909912 * cggHB * cggHB + 2.6000916816530903 * dcZHB
            - 2.4448264513323226 * cggHB * dcZHB + 2.073935963891534 * dcZHB * dcZHB
            - 3.192332240205929 * dytHB + 4.5914586198385 * cggHB * dytHB
            - 6.2871857258718595 * dcZHB * dytHB + 8.134770266934664 * dytHB * dytHB
            - 1.648691479483292 * cggHB * dytHB * dytHB + 3.5563383758242524 * dcZHB * dytHB * dytHB
            - 4.615570013047001 * dytHB * dytHB * dytHB + 1.7227511548362076 * dytHB * dytHB * dytHB * dytHB
            - 0.6079428047533413 * dKlambda + 0.33825211279194234 * cggHB * dKlambda
            + 0.3879052211526028 * cggHB * cggHB * dKlambda - 0.956246694171162 * dcZHB * dKlambda
            - 0.4572431444456198 * cggHB * dcZHB * dKlambda + 0.8152949680877302 * dytHB * dKlambda
            + 1.3814632626914451 * cggHB * dytHB * dKlambda
            - 0.956246694171162 * dcZHB * dytHB * dKlambda + 0.5856782679219981 * dytHB * dytHB * dKlambda
            - 0.3285182834373566 * cggHB * dytHB * dytHB * dKlambda
            - 0.8375595049190734 * dytHB * dytHB * dytHB * dKlambda + 0.11480835008286604 * dKlambda * dKlambda
            + 0.11240817142118299 * cggHB * dKlambda * dKlambda + 0.03688252014841459 * cggHB * cggHB * dKlambda * dKlambda
            + 0.22961670016573207 * dytHB * dKlambda * dKlambda
            + 0.11240817142118299 * cggHB * dytHB * dKlambda * dKlambda
            + 0.11480835008286604 * dytHB * dytHB * dKlambda * dKlambda);

    Bin5 = 15.93 + Bin5 * dBRTot;

    // Exclude points with negative values of BinX
    if (Bin5 < 0) return std::numeric_limits<double>::quiet_NaN();

    // Delta chi2 = -2*LL for the bin
    // Add an abs in the denominator of the log, 
    // even if events with negative BinX are not supposed to reach here.
    LLBin5 = 2.0 * (Bin5 - 22.27 + 22.27 * log(22.27 / fabs(Bin5)));

    // Bin 6
    Bin6 = 2.14 * (1.0 - 2.007855065799201 * cggHB + 1.1994575008850934 * cggHB * cggHB
            + 2.5987763498382352 * dcZHB - 2.908713303420072 * cggHB * dcZHB
            + 1.804645897901265 * dcZHB * dcZHB - 2.806900956988577 * dytHB
            + 3.5621616844486415 * cggHB * dytHB - 4.250685020965587 * dcZHB * dytHB
            + 5.7468374752045515 * dytHB * dytHB - 3.1561231600123736 * cggHB * dytHB * dytHB
            + 3.9784140166037667 * dcZHB * dytHB * dytHB - 4.4303353405513395 * dytHB * dytHB * dytHB
            + 2.257739308366916 * dytHB * dytHB * dytHB * dytHB - 0.9894280925261291 * dKlambda
            + 0.589956279744333 * cggHB * dKlambda + 0.6687315933211253 * cggHB * cggHB * dKlambda
            - 1.3796376667655315 * dcZHB * dKlambda - 0.8069993678124955 * cggHB * dcZHB * dKlambda
            + 0.6340062910366335 * dytHB * dKlambda + 2.127573647123277 * cggHB * dytHB * dKlambda
            - 1.3796376667655315 * dcZHB * dytHB * dKlambda + 0.09738385935505989 * dytHB * dytHB * dKlambda
            - 0.8833807360585424 * cggHB * dytHB * dytHB * dKlambda - 1.5260505242077027 * dytHB * dytHB * dytHB * dKlambda
            + 0.2683112158407868 * dKlambda * dKlambda + 0.32506892158970235 * cggHB * dKlambda * dKlambda
            + 0.09418943796384227 * cggHB * cggHB * dKlambda * dKlambda + 0.5366224316815736 * dytHB * dKlambda * dKlambda
            + 0.32506892158970235 * cggHB * dytHB * dKlambda * dKlambda
            + 0.2683112158407868 * dytHB * dytHB * dKlambda * dKlambda);

    Bin6 = 12.01 + Bin6 * dBRTot;

    // Exclude points with negative values of BinX
    if (Bin6 < 0) return std::numeric_limits<double>::quiet_NaN();

    // Delta chi2 = -2*LL for the bin
    // Add an abs in the denominator of the log, 
    // even if events with negative BinX are not supposed to reach here.
    LLBin6 = 2.0 * (Bin6 - 14.15 + 14.15 * log(14.15 / fabs(Bin6)));

    // The total contributions to the log-likelihood/chi-square
    Chi2Tot = LLBin1 + LLBin2 + LLBin3 + LLBin4 + LLBin5 + LLBin6;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

double NPSMEFTd6General::AuxObs_NP7() const
{
    // To be used for some temporary observable

    // CLIC STWY using difermion production at all energies: 380, 1500 and 3000 GeV
    double Spar, Tpar, Wpar, Ypar, Spar2, Tpar2, Wpar2, Ypar2;
    double Chi2Tot;

    Spar = obliqueS();
    Tpar = obliqueT();
    Wpar = 10000.0 * obliqueW();
    Ypar = 10000.0 * obliqueY();

    Spar2 = Spar*Spar;
    Tpar2 = Tpar*Tpar;
    Wpar2 = Wpar*Wpar;
    Ypar2 = Ypar*Ypar;

    Chi2Tot = 442.84977653097394 * Spar2
            - 728.5215604181935 * Spar * Tpar
            + 404.15957807101813 * Tpar2
            + 400.03987723904224 * Spar * Wpar
            - 639.6154242400826 * Tpar * Wpar
            + 4337.791457515823 * Wpar2
            - 106.87313892453362 * Spar * Ypar
            - 72.94355609762007 * Tpar * Ypar
            + 3002.848116515672 * Wpar * Ypar
            + 3040.1630882458923 * Ypar2;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

double NPSMEFTd6General::AuxObs_NP8() const
{
    // To be used for some temporary observable

    // CLIC DiHiggs: exclusive analysis. Full CLIC run   
    double Chi2Tot;

    //  Higgs basis parameters
    double dKlambda;

    dKlambda = deltaG_hhhRatio();

    Chi2Tot = dKlambda * dKlambda * (50.04473972806045
            - 104.47283225861888 * dKlambda
            + 84.48333683635175 * dKlambda * dKlambda);

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

double NPSMEFTd6General::AuxObs_NP9() const
{
    // To be used for some temporary observable

    // ILC DiHiggs at 500 GeV: 2/ab per polarization (+-80,-+30) 

    double Chi2p80m30, Chi2m80p30, Chi2Tot;

    //  Higgs basis parameters
    double dcZHB, cZboxHB, cZZHB, cZgaHB, cgagaHB;
    double dKlambda;

    dcZHB = deltacZ_HB();
    cZboxHB = cZBox_HB();
    cZZHB = cZZ_HB();
    cZgaHB = cZga_HB();
    cgagaHB = cgaga_HB();

    dKlambda = deltaG_hhhRatio();

    //  The signal strength -1    
    Chi2p80m30 = 13.6982 * cZZHB
            - 7.58943 * cZgaHB
            + 14.6843 * cZboxHB
            - 1.51882 * cgagaHB
            + 5.46836 * dcZHB
            + 0.565585 * dKlambda
            + 0.000631004 * cZZHB * dKlambda
            - 0.195079 * cZgaHB * dKlambda
            + 0.064441 * cZboxHB * dKlambda
            + 0.440061 * cgagaHB * dKlambda
            + 2.13192 * dcZHB * dKlambda
            + 0.0968208 * dKlambda * dKlambda;

    //  ILC report (1903.01629) gives total cross section a 4/ab: 16.8%. 
    // Assume the precision for each polarization is the same as they do for single Higgs in ZH...    
    Chi2p80m30 = Chi2p80m30 * Chi2p80m30 / 0.168 / 0.168 / 2.0;

    //  The signal strength -1 
    Chi2m80p30 = -2.57112 * cZZHB
            + 6.97966 * cZgaHB
            - 10.2626 * cZboxHB
            + 1.39647 * cgagaHB
            + 5.4684 * dcZHB
            + 0.565577 * dKlambda
            + 4.71916 * cZZHB * dKlambda
            + 0.179045 * cZgaHB * dKlambda
            + 7.28766 * cZboxHB * dKlambda
            - 0.405166 * cgagaHB * dKlambda
            + 2.13189 * dcZHB * dKlambda
            + 0.0968201 * dKlambda * dKlambda;

    //  ILC report (1903.01629) gives total cross section a 4/ab: 16.8%. 
    // Assume the precision for each polarization is the same as they do for single Higgs in ZH...        
    Chi2m80p30 = Chi2m80p30 * Chi2m80p30 / 0.168 / 0.168 / 2.0;

    Chi2Tot = Chi2p80m30 + Chi2m80p30;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

double NPSMEFTd6General::AuxObs_NP10() const
{
    // CLIC STWY using difermion production at all energies: 380 and 1500 GeV
    double Spar, Tpar, Wpar, Ypar, Spar2, Tpar2, Wpar2, Ypar2;
    double Chi2Tot;

    Spar = obliqueS();
    Tpar = obliqueT();
    Wpar = 10000.0 * obliqueW();
    Ypar = 10000.0 * obliqueY();

    Spar2 = Spar*Spar;
    Tpar2 = Tpar*Tpar;
    Wpar2 = Wpar*Wpar;
    Ypar2 = Ypar*Ypar;

    Chi2Tot = 375.63808963031073 * Spar2
            - 617.8864704052573 * Spar * Tpar
            + 353.1650032169891 * Tpar2
            + 215.96605851087603 * Spar * Wpar
            - 309.3469843690006 * Tpar * Wpar
            + 518.10263970583244 * Wpar2
            - 45.972763923203014 * Spar * Ypar
            - 40.670385844305705 * Tpar * Ypar
            + 340.56677318671185 * Wpar * Ypar
            + 364.5290176991845 * Ypar2;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

double NPSMEFTd6General::AuxObs_NP11() const
{
    // CLIC STWY using difermion production at all energies: 380 GeV
    double Spar, Tpar, Wpar, Ypar, Spar2, Tpar2, Wpar2, Ypar2;
    double Chi2Tot;

    Spar = obliqueS();
    Tpar = obliqueT();
    Wpar = 10000.0 * obliqueW();
    Ypar = 10000.0 * obliqueY();

    Spar2 = Spar*Spar;
    Tpar2 = Tpar*Tpar;
    Wpar2 = Wpar*Wpar;
    Ypar2 = Ypar*Ypar;

    Chi2Tot = 282.9842573293628 * Spar2
            - 462.32090035841725 * Spar * Tpar
            + 276.2496928300019 * Tpar2
            + 66.08702076419566 * Spar * Wpar
            - 87.95794393624075 * Tpar * Wpar
            + 9.5435699879102 * Wpar2
            - 26.170009941328716 * Spar * Ypar
            - 9.695238064023518 * Tpar * Ypar
            + 6.519573295893438 * Wpar * Ypar
            + 12.858593910798793 * Ypar2;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

double NPSMEFTd6General::AuxObs_NP12() const
{
    // CLIC dim6 Top fit 1500 GeV: only for SVF operators
    double CHqminus, CHt;
    double Chi2Tot;

    // The chi2 is given assuming C/Lambda^2 is in units of TeV^-2
    CHqminus = 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * (1000000.0 / LambdaNP2);
    CHt = 0.5 * CHuR[2][2] * (1000000.0 / LambdaNP2);

    Chi2Tot = 1203.58 * CHqminus * CHqminus + 1661.59 * CHqminus * CHt + 1257.83 * CHt * CHt;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

double NPSMEFTd6General::AuxObs_NP13() const
{
    // CLIC dim6 Top fit 3000 GeV: only for SVF operators
    double CHqminus, CHt;
    double Chi2Tot;

    // The chi2 is given assuming C/Lambda^2 is in units of TeV^-2
    CHqminus = 0.5 * (CHq1R[2][2] - CHq3R[2][2]) * (1000000.0 / LambdaNP2);
    CHt = 0.5 * CHuR[2][2] * (1000000.0 / LambdaNP2);

    Chi2Tot = 5756.01 * CHqminus * CHqminus + 8013.79 * CHqminus * CHt + 3380.7 * CHt * CHt;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

double NPSMEFTd6General::AuxObs_NP14() const
{
    // Test chi2 for HH production at 100 TeV: only the first two bins in 1704.01953 are included,
    // with the same coefficients (including ratios of cross sections in each bin) its table 4.  The EFT parameterization of Higgs decays are not included.
    double Chi2Tot;

    //  Higgs basis parameters
    double dcZHB, cggHB;
    double dytHB;
    double dKlambda;

    dcZHB = deltacZ_HB();
    cggHB = cgg_HB();
    dytHB = deltayt_HB();
    dKlambda = deltaG_hhhRatio();

    double dcZHB2, dcZHB3, dcZHB4;
    double cggHB2, cggHB3, cggHB4;
    double dytHB2, dytHB3, dytHB4, dytHB5, dytHB6, dytHB7, dytHB8;
    double dKlambda2, dKlambda3, dKlambda4;

    dcZHB2 = dcZHB * dcZHB;
    dcZHB3 = dcZHB2 * dcZHB;
    dcZHB4 = dcZHB3 * dcZHB;

    cggHB2 = cggHB * cggHB;
    cggHB3 = cggHB2 * cggHB;
    cggHB4 = cggHB3 * cggHB;

    dytHB2 = dytHB * dytHB;
    dytHB3 = dytHB2 * dytHB;
    dytHB4 = dytHB3 * dytHB;
    dytHB5 = dytHB4 * dytHB;
    dytHB6 = dytHB5 * dytHB;
    dytHB7 = dytHB6 * dytHB;
    dytHB8 = dytHB7 * dytHB;

    dKlambda2 = dKlambda * dKlambda;
    dKlambda3 = dKlambda2 * dKlambda;
    dKlambda4 = dKlambda3 * dKlambda;

    // The Chi2

    Chi2Tot = 2.0595082782796297e7 * cggHB2 - 3.6971136499764752e9 * cggHB3 + 1.7583900534677216e11 * cggHB4
            - 630035.4483047676 * cggHB * dcZHB + 1.3588174266991532e8 * cggHB2 * dcZHB - 7.10364464231958e9 * cggHB3 * dcZHB
            + 5311.651853836387 * dcZHB2 - 1.7067170379207395e6 * cggHB * dcZHB2 + 1.1851653627034137e8 * cggHB2 * dcZHB2
            + 8180.119549200313 * dcZHB3 - 943018.2335425722 * cggHB * dcZHB3 + 3159.9135213745994 * dcZHB4
            + 180518.97210352542 * cggHB * dKlambda - 2.8949546963646576e7 * cggHB2 * dKlambda - 5.501576225306801e8 * cggHB3 * dKlambda
            + 1.5079027448500854e11 * cggHB4 * dKlambda - 2846.9365320948145 * dcZHB * dKlambda + 797208.485191074 * cggHB * dcZHB * dKlambda
            - 4.978486710457227e6 * cggHB2 * dcZHB * dKlambda - 4.586348042437428e9 * cggHB3 * dcZHB * dKlambda - 6485.875373880575 * dcZHB2 * dKlambda
            + 390177.86145601963 * cggHB * dcZHB2 * dKlambda + 5.056678567468029e7 * cggHB2 * dcZHB2 * dKlambda - 3291.6842405815532 * dcZHB3 * dKlambda
            - 198301.99217208195 * cggHB * dcZHB3 * dKlambda + 399.29685823653153 * dKlambda2 - 95580.41780509672 * cggHB * dKlambda2
            - 7.430874086734321e6 * cggHB2 * dKlambda2 + 7.720064658809748e8 * cggHB3 * dKlambda2 + 5.089872992160051e10 * cggHB4 * dKlambda2
            + 1809.9095844013955 * dcZHB * dKlambda2 - 1150.4119995786175 * cggHB * dcZHB * dKlambda2 - 2.2786176268418655e7 * cggHB2 * dcZHB * dKlambda2
            - 1.0351049455121036e9 * cggHB3 * dcZHB * dKlambda2 + 1362.5781363223641 * dcZHB2 * dKlambda2 + 170792.06609378837 * cggHB * dcZHB2 * dKlambda2
            + 5.658917948194164e6 * cggHB2 * dcZHB2 * dKlambda2 - 178.77181321253659 * dKlambda3 - 11443.938844928987 * cggHB * dKlambda3
            + 2.461878722072089e6 * cggHB2 * dKlambda3 + 2.821167791764089e8 * cggHB3 * dKlambda3 + 7.998289700049803e9 * cggHB4 * dKlambda3
            - 267.7615464146533 * dcZHB * dKlambda3 - 52488.33374581051 * cggHB * dcZHB * dKlambda3 - 3.555711022595523e6 * cggHB2 * dcZHB * dKlambda3
            - 8.149153208622633e7 * cggHB3 * dcZHB * dKlambda3 + 21.07398490236267 * dKlambda4 + 5735.3996792942135 * cggHB * dKlambda4
            + 596986.3215027236 * cggHB2 * dKlambda4 + 2.773647081412465e7 * cggHB3 * dKlambda4 + 4.915460918180312e8 * cggHB4 * dKlambda4
            + 740876.8879497008 * cggHB * dytHB - 1.938279550686329e8 * cggHB2 * dytHB + 1.1944585224312653e10 * cggHB3 * dytHB
            - 12947.635844899749 * dcZHB * dytHB + 4.908519506685015e6 * cggHB * dcZHB * dytHB - 3.742271337006843e8 * cggHB2 * dcZHB * dytHB
            - 33546.241370498166 * dcZHB2 * dytHB + 4.3134482870087875e6 * cggHB * dcZHB2 * dytHB - 18267.038917513022 * dcZHB3 * dytHB
            + 3387.385955080094 * dKlambda * dytHB - 963072.1570381082 * cggHB * dKlambda * dytHB - 2.3453010760683898e7 * cggHB2 * dKlambda * dytHB
            + 9.317798790237669e9 * cggHB3 * dKlambda * dytHB + 14461.190498065112 * dcZHB * dKlambda * dytHB - 276210.0620250288 * cggHB * dcZHB * dKlambda * dytHB
            - 2.1850896154428744e8 * cggHB2 * dcZHB * dKlambda * dytHB + 7442.375770947524 * dcZHB2 * dKlambda * dytHB
            + 1.6339998473341048e6 * cggHB * dcZHB2 * dKlambda * dytHB - 3291.6842405815532 * dcZHB3 * dKlambda * dytHB - 1559.6600507789517 * dKlambda2 * dytHB
            - 212800.20942464058 * cggHB * dKlambda2 * dytHB + 3.499621075016396e7 * cggHB2 * dKlambda2 * dytHB + 2.9495867407085886e9 * cggHB3 * dKlambda2 * dytHB
            - 132.54584108464164 * dcZHB * dKlambda2 * dytHB - 704650.5551856682 * cggHB * dcZHB * dKlambda2 * dytHB
            - 4.6230021860231325e7 * cggHB2 * dcZHB * dKlambda2 * dytHB + 2725.1562726447282 * dcZHB2 * dKlambda2 * dytHB
            + 170792.06609378837 * cggHB * dcZHB2 * dKlambda2 * dytHB - 174.87036642817392 * dKlambda3 * dytHB + 72002.66692264378 * cggHB * dKlambda3 * dytHB
            + 1.2160354917437742e7 * cggHB2 * dKlambda3 * dytHB + 4.500393455278235e8 * cggHB3 * dKlambda3 * dytHB - 803.2846392439599 * dcZHB * dKlambda3 * dytHB
            - 104976.66749162102 * cggHB * dcZHB * dKlambda3 * dytHB - 3.555711022595523e6 * cggHB2 * dcZHB * dKlambda3 * dytHB
            + 84.29593960945068 * dKlambda4 * dytHB + 17206.19903788264 * cggHB * dKlambda4 * dytHB + 1.1939726430054472e6 * cggHB2 * dKlambda4 * dytHB
            + 2.773647081412465e7 * cggHB3 * dKlambda4 * dytHB + 7985.615632692477 * dytHB2 - 4.312707242837639e6 * cggHB * dytHB2
            + 4.446488644358661e8 * cggHB2 * dytHB2 - 5.669235052669609e9 * cggHB3 * dytHB2 + 59322.05816648064 * dcZHB * dytHB2
            - 1.0048203483978426e7 * cggHB * dcZHB * dytHB2 + 2.009903412514487e8 * cggHB2 * dcZHB * dytHB2 + 64971.66315898899 * dcZHB2 * dytHB2
            - 2.4669987769536236e6 * cggHB * dcZHB2 * dytHB2 + 11471.803789781865 * dcZHB3 * dytHB2 - 11811.249755773804 * dKlambda * dytHB2
            + 431747.7364057698 * cggHB * dKlambda * dytHB2 + 2.2358583287946397e8 * cggHB2 * dKlambda * dytHB2 - 3.8910877145439386e9 * cggHB3 * dKlambda * dytHB2
            - 16029.606555240167 * dcZHB * dKlambda * dytHB2 - 2.9253661324121524e6 * cggHB * dcZHB * dKlambda * dytHB2
            + 8.987023921425158e7 * cggHB2 * dcZHB * dKlambda * dytHB2 + 4717.219498302798 * dcZHB2 * dKlambda * dytHB2
            - 540895.9436706528 * cggHB * dcZHB2 * dKlambda * dytHB2 + 214.81067429237223 * dKlambda2 * dytHB2 + 567954.341114266 * cggHB * dKlambda2 * dytHB2
            + 4.5123619667514816e7 * cggHB2 * dKlambda2 * dytHB2 - 9.277345617086976e8 * cggHB3 * dKlambda2 * dytHB2
            - 3081.626211728115 * dcZHB * dKlambda2 * dytHB2 - 381097.4778098703 * cggHB * dcZHB * dKlambda2 * dytHB2
            + 1.050966209735231e7 * cggHB2 * dcZHB * dKlambda2 * dytHB2 + 1362.5781363223641 * dcZHB2 * dKlambda2 * dytHB2
            + 284.9520271687106 * dKlambda3 * dytHB2 + 127206.63260007375 * cggHB * dKlambda3 * dytHB2 + 6.267940600872645e6 * cggHB2 * dKlambda3 * dytHB2
            - 7.655202990726441e7 * cggHB3 * dKlambda3 * dytHB2 - 803.2846392439599 * dcZHB * dKlambda3 * dytHB2 - 52488.33374581051 * cggHB * dcZHB * dKlambda3 * dytHB2
            + 126.44390941417602 * dKlambda4 * dytHB2 + 17206.19903788264 * cggHB * dKlambda4 * dytHB2 + 596986.3215027236 * cggHB2 * dKlambda4 * dytHB2
            - 37223.626257417236 * dytHB3 + 8.269994128894571e6 * cggHB * dytHB3 - 2.9221928856272686e8 * cggHB2 * dytHB3 - 105038.22976459829 * dcZHB * dytHB3
            + 7.149383019204844e6 * cggHB * dcZHB * dytHB3 - 47474.492515326274 * dcZHB2 * dytHB3 + 11656.27418420629 * dKlambda * dytHB3
            + 2.385352845620739e6 * cggHB * dKlambda * dytHB3 - 1.8438201632292444e8 * cggHB2 * dKlambda * dytHB3 - 8524.8765354653 * dcZHB * dKlambda * dytHB3
            + 2.8867300035650665e6 * cggHB * dcZHB * dKlambda * dytHB3 - 9211.031646525304 * dcZHB2 * dKlambda * dytHB3 + 3263.1999469874036 * dKlambda2 * dytHB3
            + 44138.45406924717 * cggHB * dKlambda2 * dytHB3 - 4.193837918690795e7 * cggHB2 * dKlambda2 * dytHB3 + 1474.023437403278 * dcZHB * dKlambda2 * dytHB3
            + 322402.6653762193 * cggHB * dcZHB * dKlambda2 * dytHB3 + 116.36014794980927 * dKlambda3 * dytHB3 - 7370.4909474997985 * cggHB * dKlambda3 * dytHB3
            - 3.4305355944930054e6 * cggHB2 * dKlambda3 * dytHB3 - 267.7615464146533 * dcZHB * dKlambda3 * dytHB3 + 84.29593960945068 * dKlambda4 * dytHB3
            + 5735.3996792942135 * cggHB * dKlambda4 * dytHB3 + 66652.27308402126 * dytHB4 - 6.871040436399154e6 * cggHB * dytHB4
            + 9.22099747455498e7 * cggHB2 * dytHB4 + 92021.78032189047 * dcZHB * dytHB4 - 2.257899878309953e6 * cggHB * dcZHB * dytHB4
            + 16245.693309808961 * dcZHB2 * dytHB4 + 2838.4331580144003 * dKlambda * dytHB4 - 2.731422853592693e6 * cggHB * dKlambda * dytHB4
            + 4.274439860749665e7 * cggHB2 * dKlambda * dytHB4 + 15892.926730807862 * dcZHB * dKlambda * dytHB4 - 515009.5486394962 * cggHB * dcZHB * dKlambda * dytHB4
            - 1056.6073875703482 * dKlambda2 * dytHB4 - 482475.3464808796 * cggHB * dKlambda2 * dytHB4 + 5.170468004804585e6 * cggHB2 * dKlambda2 * dytHB4
            + 2613.194223645355 * dcZHB * dKlambda2 * dytHB4 - 427.75818525652596 * dKlambda3 * dytHB4 - 51130.51778000078 * cggHB * dKlambda3 * dytHB4
            + 21.07398490236267 * dKlambda4 * dytHB4 - 63203.969008703876 * dytHB5 + 3.151938475204292e6 * cggHB * dytHB5 - 42834.09620756765 * dcZHB * dytHB5
            - 12524.979109927113 * dKlambda * dytHB5 + 1.3421161655790398e6 * cggHB * dKlambda * dytHB5 - 8919.930319126936 * dcZHB * dKlambda * dytHB5
            - 849.49051561947 * dKlambda2 * dytHB5 + 158560.3321836832 * cggHB * dKlambda2 * dytHB5 - 263.0677528219873 * dKlambda3 * dytHB5
            + 37913.4502786983 * dytHB6 - 712582.2268647491 * cggHB * dytHB6 + 10593.332328402174 * dcZHB * dytHB6 + 8514.598993531516 * dKlambda * dytHB6
            - 169200.83566434312 * cggHB * dKlambda * dytHB6 + 1296.5492356304262 * dKlambda2 * dytHB6 - 13281.426292006341 * dytHB7
            - 2976.898633587163 * dKlambda * dytHB7 + 2684.433665848417 * dytHB8;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

double NPSMEFTd6General::AuxObs_NP15() const
{
    // diBoson study from arXiv: 2003.07862: LO version
    // Only WW and WZ distributions

    // Effective couplings
    double dgZ1, lZ, dkga, dkZ, dgLZu, dgRZu, dgLZd, dgRZd;

    double chi2WW, chi2WZ;

    double chi2WWA8, chi2WWA13;
    double chi2WZA8, chi2WZC8, chi2WZA13, chi2WZC13;

    // Bins: Theory prediction
    double WWA8bin1LO, WWA8bin2LO, WWA8bin3LO, WWA8bin4LO, WWA8bin5LO;
    double WWA13bin1LO, WWA13bin2LO, WWA13bin3LO, WWA13bin4LO, WWA13bin5LO, WWA13bin6LO, WWA13bin7LO;
    double WZA8bin1LO, WZA8bin2LO, WZA8bin3LO, WZA8bin4LO, WZA8bin5LO, WZA8bin6LO;
    double WZC8bin1LO, WZC8bin2LO, WZC8bin3LO, WZC8bin4LO, WZC8bin5LO, WZC8bin6LO, WZC8bin7LO, WZC8bin8LO, WZC8bin9LO;
    double WZA13bin1LO, WZA13bin2LO, WZA13bin3LO, WZA13bin4LO, WZA13bin5LO, WZA13bin6LO;
    double WZC13bin1LO, WZC13bin2LO, WZC13bin3LO, WZC13bin4LO, WZC13bin5LO, WZC13bin6LO, WZC13bin7LO;

    // Bins: Exp values and errors
    double WWA8bin1Exp = 4022., WWA8bin2Exp = 951., WWA8bin3Exp = 74., WWA8bin4Exp = 2., WWA8bin5Exp = 1.;
    double WWA8bin1Err = 210.863, WWA8bin2Err = 56.6745, WWA8bin3Err = 9.35361, WWA8bin4Err = 1.43849, WWA8bin5Err = 0.866498;

    double WWA13bin1Exp = 419.843, WWA13bin2Exp = 512.837, WWA13bin3Exp = 258.115, WWA13bin4Exp = 170.302, WWA13bin5Exp = 123.998, WWA13bin6Exp = 72.922, WWA13bin7Exp = 35.8834;
    double WWA13bin1Err = 58.121, WWA13bin2Err = 80.142, WWA13bin3Err = 43.32, WWA13bin4Err = 31.5875, WWA13bin5Err = 24.2051, WWA13bin6Err = 14.44, WWA13bin7Err = 9.55206;

    double WZA8bin1Exp = 83.23, WZA8bin2Exp = 324.8, WZA8bin3Exp = 217.21, WZA8bin4Exp = 89.32, WZA8bin5Exp = 8.12, WZA8bin6Exp = 2.03;
    double WZA8bin1Err = 11.4025, WZA8bin2Err = 18.1888, WZA8bin3Err = 13.9014, WZA8bin4Err = 8.66404, WZA8bin5Err = 2.46848, WZA8bin6Err = 1.01906;

    double WZC8bin1Exp = 58016., WZC8bin2Exp = 136024., WZC8bin3Exp = 100352., WZC8bin4Exp = 82320., WZC8bin5Exp = 47040., WZC8bin6Exp = 19208., WZC8bin7Exp = 19600., WZC8bin8Exp = 15758.4, WZC8bin9Exp = 9604.;
    double WZC8bin1Err = 17038.1, WZC8bin2Err = 30818.8, WZC8bin3Err = 28715.2, WZC8bin4Err = 21945., WZC8bin5Err = 16718.7, WZC8bin6Err = 10771.1, WZC8bin7Err = 9505.49, WZC8bin8Err = 10897.5, WZC8bin9Err = 7723.99;

    double WZA13bin1Exp = 280.497, WZA13bin2Exp = 925.965, WZA13bin3Exp = 784.814, WZA13bin4Exp = 280.136, WZA13bin5Exp = 21.299, WZA13bin6Exp = 15.162;
    double WZA13bin1Err = 40.3916, WZA13bin2Err = 62.0397, WZA13bin3Err = 45.5192, WZA13bin4Err = 22.9712, WZA13bin5Err = 4.89877, WZA13bin6Err = 3.54791;

    double WZC13bin1Exp = 475.3, WZC13bin2Exp = 1963.2, WZC13bin3Exp = 849.4, WZC13bin4Exp = 305.1, WZC13bin5Exp = 210., WZC13bin6Exp = 10.9, WZC13bin7Exp = 3.54;
    double WZC13bin1Err = 32.2502, WZC13bin2Err = 107.697, WZC13bin3Err = 51.5083, WZC13bin4Err = 23.1908, WZC13bin5Err = 17.8955, WZC13bin6Err = 3.83689, WZC13bin7Err = 2.01542;

    //  Effective parameters

    // Zff couplings. Approximate them as couplings with 1st family quarks (i.e. all pp is 1st family)
    dgLZu = deltaGL_f(quarks[UP]);

    dgRZu = deltaGR_f(quarks[UP]);

    dgLZd = deltaGL_f(quarks[DOWN]);

    dgRZd = deltaGR_f(quarks[DOWN]);

    // arXiv: 2003.07862 convention for aTGC Lagrangian has a minus sign wrt HEPfit definitions
    dgZ1 = -deltag1ZNP();

    dkga = -deltaKgammaNP();

    dkZ = dgZ1 - (sW2_tree / cW2_tree) * (dkga - deltag1gaNP());

    lZ = -lambdaZNP();

    // Parameterization of pp->WW

    // WW ATLAS pT bins 8 TeV
    WWA8bin1LO = 2410.31 - 7955.92 * dgLZd + 12275.5 * dgLZu + 2557.08 * dgRZd + 2052.71 * dgRZu + 1909.25 * dgZ1 + 2578.16 * dkZ + 2481.23 * lZ;

    WWA8bin2LO = 550.64 - 2620.11 * dgLZd + 3535.75 * dgLZu + 686.547 * dgRZd + 182.622 * dgRZu - 282.928 * dgZ1 + 741.476 * dkZ + 383.857 * lZ;

    WWA8bin3LO = 49.86 - 410.099 * dgLZd + 445.841 * dgLZu + 83.1445 * dgRZd - 52.7319 * dgRZu - 185.631 * dgZ1 + 123.908 * dkZ + 18.1956 * lZ;

    WWA8bin4LO = 5.699 - 79.7396 * dgLZd + 70.0216 * dgLZu + 12.9901 * dgRZd - 18.8422 * dgRZu - 50.7712 * dgZ1 + 26.0995 * dkZ + 1.24051 * lZ;

    WWA8bin5LO = 1.2727 - 30.569 * dgLZd + 21.8664 * dgLZu + 4.07619 * dgRZd - 9.13773 * dgRZu - 22.4705 * dgZ1 + 10.6031 * dkZ - 0.0207054 * lZ;

    // Use only last bin
    chi2WWA8 = 0. * (WWA8bin1Exp - WWA8bin1LO)*(WWA8bin1Exp - WWA8bin1LO) / WWA8bin1Err / WWA8bin1Err +
            0. * (WWA8bin2Exp - WWA8bin2LO)*(WWA8bin2Exp - WWA8bin2LO) / WWA8bin2Err / WWA8bin2Err +
            0. * (WWA8bin3Exp - WWA8bin3LO)*(WWA8bin3Exp - WWA8bin3LO) / WWA8bin3Err / WWA8bin3Err +
            0. * (WWA8bin4Exp - WWA8bin4LO)*(WWA8bin4Exp - WWA8bin4LO) / WWA8bin4Err / WWA8bin4Err +
            (WWA8bin5Exp - WWA8bin5LO)*(WWA8bin5Exp - WWA8bin5LO) / WWA8bin5Err / WWA8bin5Err;


    // WW ATLAS pT bins 13 TeV 
    WWA13bin1LO = 400.32 - 2010.9 * dgLZd + 2743.29 * dgLZu + 518.417 * dgRZd + 74.99 * dgRZu - 334.799 * dgZ1 + 564.605 * dkZ + 277.749 * lZ;

    WWA13bin2LO = 493.759 - 2748.52 * dgLZd + 3608.02 * dgLZu + 674.641 * dgRZd - 19.055 * dgRZu - 667.59 * dgZ1 + 779.098 * dkZ + 298.751 * lZ;

    WWA13bin3LO = 258.115 - 1651.56 * dgLZd + 2047.54 * dgLZu + 379.535 * dgRZd - 97.9571 * dgRZu - 549.495 * dgZ1 + 478.339 * dkZ + 128.105 * lZ;

    WWA13bin4LO = 171.153 - 1266.88 * dgLZd + 1471.52 * dgLZu + 271.806 * dgRZd - 134.097 * dgRZu - 521.841 * dgZ1 + 376.853 * dkZ + 68.516 * lZ;

    WWA13bin5LO = 134.414 - 1215.57 * dgLZd + 1285.59 * dgLZu + 237.757 * dgRZd - 191.781 * dgRZu - 607.825 * dgZ1 + 374.921 * dkZ + 38.9405 * lZ;

    WWA13bin6LO = 69.2759 - 853.385 * dgLZd + 780.617 * dgLZu + 145.743 * dgRZd - 185.211 * dgRZu - 512.435 * dgZ1 + 276.095 * dkZ + 11.456 * lZ;

    WWA13bin7LO = 33.7304 - 713.411 * dgLZd + 510.906 * dgLZu + 97.8425 * dgRZd - 199.708 * dgRZu - 502.132 * dgZ1 + 244.554 * dkZ + 0.233402 * lZ;

    // Exclude last 2 bins
    chi2WWA13 = (WWA13bin1Exp - WWA13bin1LO)*(WWA13bin1Exp - WWA13bin1LO) / WWA13bin1Err / WWA13bin1Err +
            (WWA13bin2Exp - WWA13bin2LO)*(WWA13bin2Exp - WWA13bin2LO) / WWA13bin2Err / WWA13bin2Err +
            (WWA13bin3Exp - WWA13bin3LO)*(WWA13bin3Exp - WWA13bin3LO) / WWA13bin3Err / WWA13bin3Err +
            (WWA13bin4Exp - WWA13bin4LO)*(WWA13bin4Exp - WWA13bin4LO) / WWA13bin4Err / WWA13bin4Err +
            (WWA13bin5Exp - WWA13bin5LO)*(WWA13bin5Exp - WWA13bin5LO) / WWA13bin5Err / WWA13bin5Err +
            0. * (WWA13bin6Exp - WWA13bin6LO)*(WWA13bin6Exp - WWA13bin6LO) / WWA13bin6Err / WWA13bin6Err +
            0. * (WWA13bin7Exp - WWA13bin7LO)*(WWA13bin7Exp - WWA13bin7LO) / WWA13bin7Err / WWA13bin7Err;


    // Total WW chi2
    chi2WW = chi2WWA8 + chi2WWA13;


    // Parameterization of pp->WZ

    // WZ ATLAS MT bins 8 TeV
    WZA8bin1LO = 64.0231 - 262.564 * dgLZd + 271.127 * dgLZu + 64.0231 * dgRZd + 64.0231 * dgRZu + 73.1446 * dgZ1 + 70.0463 * dkZ + 79.3857 * lZ;

    WZA8bin2LO = 266.448 - 1078.16 * dgLZd + 1164.29 * dgLZu + 266.448 * dgRZd + 266.448 * dgRZu + 306.867 * dgZ1 + 282.18 * dkZ + 337.517 * lZ;

    WZA8bin3LO = 199.275 - 1246.69 * dgLZd + 1419.14 * dgLZu + 199.275 * dgRZd + 199.275 * dgRZu - 66.2903 * dgZ1 + 125.888 * dkZ + 130.754 * lZ;

    WZA8bin4LO = 62.4615 - 900.496 * dgLZd + 976.191 * dgLZu + 62.4615 * dgRZd + 62.4615 * dgRZu - 376.789 * dgZ1 - 7.89486 * dkZ - 3.3 * lZ;

    WZA8bin5LO = 4.89157 - 167.729 * dgLZd + 172.898 * dgLZu + 4.89157 * dgRZd + 4.89157 * dgRZu - 101.811 * dgZ1 - 3.62056 * dkZ + 2.56078 * lZ;

    WZA8bin6LO = 1.42958 - 105.344 * dgLZd + 106.596 * dgLZu + 1.42958 * dgRZd + 1.42958 * dgRZu - 73.1082 * dgZ1 - 1.40856 * dkZ + 4.95953 * lZ;

    // Consider only 5 and 6th bin
    chi2WZA8 = 0. * (WZA8bin1Exp - WZA8bin1LO)*(WZA8bin1Exp - WZA8bin1LO) / WZA8bin1Err / WZA8bin1Err +
            0. * (WZA8bin2Exp - WZA8bin2LO)*(WZA8bin2Exp - WZA8bin2LO) / WZA8bin2Err / WZA8bin2Err +
            0. * (WZA8bin3Exp - WZA8bin3LO)*(WZA8bin3Exp - WZA8bin3LO) / WZA8bin3Err / WZA8bin3Err +
            0. * (WZA8bin4Exp - WZA8bin4LO)*(WZA8bin4Exp - WZA8bin4LO) / WZA8bin4Err / WZA8bin4Err +
            (WZA8bin5Exp - WZA8bin5LO)*(WZA8bin5Exp - WZA8bin5LO) / WZA8bin5Err / WZA8bin5Err +
            (WZA8bin6Exp - WZA8bin6LO)*(WZA8bin6Exp - WZA8bin6LO) / WZA8bin6Err / WZA8bin6Err;


    // WZ CMS pT bins 8 TeV
    WZC8bin1LO = 48211.3 - 137924. * dgLZd + 120313. * dgLZu + 48211.3 * dgRZd + 48211.3 * dgRZu + 94261.9 * dgZ1 + 67530. * dkZ + 85895.7 * lZ;

    WZC8bin2LO = 105555. - 440885. * dgLZd + 355350. * dgLZu + 105555. * dgRZd + 105555. * dgRZu + 141264. * dgZ1 + 122367. * dkZ + 148838. * lZ;

    WZC8bin3LO = 95535.1 - 542042. * dgLZd + 467766. * dgLZu + 95535.1 * dgRZd + 95535.1 * dgRZu + 46226.7 * dgZ1 + 80186.7 * dkZ + 97205.6 * lZ;

    WZC8bin4LO = 63880.3 - 479646. * dgLZd + 456064. * dgLZu + 63880.3 * dgRZd + 63880.3 * dgRZu - 44518.1 * dgZ1 + 28691.7 * dkZ + 38018.6 * lZ;

    WZC8bin5LO = 39607.7 - 383899. * dgLZd + 379976. * dgLZu + 39607.7 * dgRZd + 39607.7 * dgRZu - 84542.1 * dgZ1 + 4050.03 * dkZ + 6365.16 * lZ;

    WZC8bin6LO = 24855.2 - 302869. * dgLZd + 304541. * dgLZu + 24855.2 * dgRZd + 24855.2 * dgRZu - 95368.5 * dgZ1 - 4726.25 * dkZ - 6591.92 * lZ;

    WZC8bin7LO = 14988.1 - 224947. * dgLZd + 227541. * dgLZu + 14988.1 * dgRZd + 14988.1 * dgRZu - 87151.6 * dgZ1 - 6575.39 * dkZ - 9906.71 * lZ;

    WZC8bin8LO = 19871.3 - 412140. * dgLZd + 417930. * dgLZu + 19871.3 * dgRZd + 19871.3 * dgRZu - 198439. * dgZ1 - 15171.5 * dkZ - 24525.7 * lZ;

    WZC8bin9LO = 7452.7 - 269883. * dgLZd + 272932. * dgLZu + 7452.7 * dgRZd + 7452.7 * dgRZu - 161173. * dgZ1 - 8792.17 * dkZ - 15465.3 * lZ;

    // All bins
    chi2WZC8 = (WZC8bin1Exp - WZC8bin1LO)*(WZC8bin1Exp - WZC8bin1LO) / WZC8bin1Err / WZC8bin1Err +
            (WZC8bin2Exp - WZC8bin2LO)*(WZC8bin2Exp - WZC8bin2LO) / WZC8bin2Err / WZC8bin2Err +
            (WZC8bin3Exp - WZC8bin3LO)*(WZC8bin3Exp - WZC8bin3LO) / WZC8bin3Err / WZC8bin3Err +
            (WZC8bin4Exp - WZC8bin4LO)*(WZC8bin4Exp - WZC8bin4LO) / WZC8bin4Err / WZC8bin4Err +
            (WZC8bin5Exp - WZC8bin5LO)*(WZC8bin5Exp - WZC8bin5LO) / WZC8bin5Err / WZC8bin5Err +
            (WZC8bin6Exp - WZC8bin6LO)*(WZC8bin6Exp - WZC8bin6LO) / WZC8bin6Err / WZC8bin6Err +
            (WZC8bin7Exp - WZC8bin7LO)*(WZC8bin7Exp - WZC8bin7LO) / WZC8bin7Err / WZC8bin7Err +
            (WZC8bin8Exp - WZC8bin8LO)*(WZC8bin8Exp - WZC8bin8LO) / WZC8bin8Err / WZC8bin8Err +
            (WZC8bin9Exp - WZC8bin9LO)*(WZC8bin9Exp - WZC8bin9LO) / WZC8bin9Err / WZC8bin9Err;


    // WZ ATLAS MT bins 13 TeV
    WZA13bin1LO = 210.9 - 863.074 * dgLZd + 900.382 * dgLZu + 211.842 * dgRZd + 211.842 * dgRZu + 242.98 * dgZ1 + 232.219 * dkZ + 262.962 * lZ;

    WZA13bin2LO = 935.318 - 3772.34 * dgLZd + 4098.21 * dgLZu + 936.319 * dgRZd + 936.319 * dgRZu + 1081.52 * dgZ1 + 993.265 * dkZ + 1188.07 * lZ;

    WZA13bin3LO = 761.955 - 4753.51 * dgLZd + 5422.16 * dgLZu + 762.426 * dgRZd + 762.426 * dgRZu - 246.741 * dgZ1 + 484.428 * dkZ + 506.464 * lZ;

    WZA13bin4LO = 282.966 - 4085.68 * dgLZd + 4424.39 * dgLZu + 284.141 * dgRZd + 284.141 * dgRZu - 1707.42 * dgZ1 - 32.2231 * dkZ - 2.89413 * lZ;

    WZA13bin5LO = 28.3987 - 953.075 * dgLZd + 982.47 * dgLZu + 28.5529 * dgRZd + 28.5529 * dgRZu - 574.883 * dgZ1 - 19.8605 * dkZ + 19.6616 * lZ;

    WZA13bin6LO = 14.1701 - 1069.87 * dgLZd + 1082.36 * dgLZu + 14.3211 * dgRZd + 14.3211 * dgRZu - 744.911 * dgZ1 - 12.7999 * dkZ + 67.0172 * lZ;

    // All bins
    chi2WZA13 = (WZA13bin1Exp - WZA13bin1LO)*(WZA13bin1Exp - WZA13bin1LO) / WZA13bin1Err / WZA13bin1Err +
            (WZA13bin2Exp - WZA13bin2LO)*(WZA13bin2Exp - WZA13bin2LO) / WZA13bin2Err / WZA13bin2Err +
            (WZA13bin3Exp - WZA13bin3LO)*(WZA13bin3Exp - WZA13bin3LO) / WZA13bin3Err / WZA13bin3Err +
            (WZA13bin4Exp - WZA13bin4LO)*(WZA13bin4Exp - WZA13bin4LO) / WZA13bin4Err / WZA13bin4Err +
            (WZA13bin5Exp - WZA13bin5LO)*(WZA13bin5Exp - WZA13bin5LO) / WZA13bin5Err / WZA13bin5Err +
            (WZA13bin6Exp - WZA13bin6LO)*(WZA13bin6Exp - WZA13bin6LO) / WZA13bin6Err / WZA13bin6Err;


    // WZ CMS M bins 13 TeV
    WZC13bin1LO = 310.897 - 1747.83 * dgLZd + 1098.2 * dgLZu + 310.897 * dgRZd + 310.897 * dgRZu + 254.88 * dgZ1 + 308.331 * dkZ + 338.716 * lZ;

    WZC13bin2LO = 1490.35 - 9445.69 * dgLZd + 9529.15 * dgLZu + 1490.35 * dgRZd + 1490.35 * dgRZu - 292.046 * dgZ1 + 1065.37 * dkZ + 1331.03 * lZ;

    WZC13bin3LO = 629.894 - 5705.32 * dgLZd + 5880.54 * dgLZu + 629.894 * dgRZd + 629.894 * dgRZu - 1292.82 * dgZ1 + 241.436 * dkZ + 348.134 * lZ;

    WZC13bin4LO = 232.784 - 2749.58 * dgLZd + 2807.65 * dgLZu + 232.784 * dgRZd + 232.784 * dgRZu - 933.382 * dgZ1 + 49.9535 * dkZ + 91.6478 * lZ;

    WZC13bin5LO = 174.94 - 3217.49 * dgLZd + 3252.81 * dgLZu + 174.94 * dgRZd + 174.94 * dgRZu - 1564.01 * dgZ1 + 7.77705 * dkZ + 55.699 * lZ;

    WZC13bin6LO = 8.27 - 347.727 * dgLZd + 351.047 * dgLZu + 8.27 * dgRZd + 8.27 * dgRZu - 225.256 * dgZ1 - 1.11098 * dkZ + 4.70184 * lZ;

    WZC13bin7LO = 1.71 - 136.248 * dgLZd + 137.365 * dgLZu + 1.71 * dgRZd + 1.71 * dgRZu - 96.8497 * dgZ1 - 0.143322 * dkZ + 2.33017 * lZ;

    // Consider only the last 3 bins
    chi2WZC13 = 0. * (WZC13bin1Exp - WZC13bin1LO)*(WZC13bin1Exp - WZC13bin1LO) / WZC13bin1Err / WZC13bin1Err +
            0. * (WZC13bin2Exp - WZC13bin2LO)*(WZC13bin2Exp - WZC13bin2LO) / WZC13bin2Err / WZC13bin2Err +
            0. * (WZC13bin3Exp - WZC13bin3LO)*(WZC13bin3Exp - WZC13bin3LO) / WZC13bin3Err / WZC13bin3Err +
            0. * (WZC13bin4Exp - WZC13bin4LO)*(WZC13bin4Exp - WZC13bin4LO) / WZC13bin4Err / WZC13bin4Err +
            (WZC13bin5Exp - WZC13bin5LO)*(WZC13bin5Exp - WZC13bin5LO) / WZC13bin5Err / WZC13bin5Err +
            (WZC13bin6Exp - WZC13bin6LO)*(WZC13bin6Exp - WZC13bin6LO) / WZC13bin6Err / WZC13bin6Err +
            (WZC13bin7Exp - WZC13bin7LO)*(WZC13bin7Exp - WZC13bin7LO) / WZC13bin7Err / WZC13bin7Err;


    // Total WW chi2
    chi2WZ = chi2WZA8 + chi2WZC8 + chi2WZA13 + chi2WZC13;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt of the total chi2    
    return sqrt(chi2WW + chi2WZ);
}

double NPSMEFTd6General::AuxObs_NP16() const
{
    // diBoson study from arXiv: 2003.07862: NLO version
    // Only WW and WZ distributions

    // Effective couplings
    double dgZ1, lZ, dkga, dkZ, dgLZu, dgRZu, dgLZd, dgRZd;

    double chi2WW, chi2WZ;

    double chi2WWA8, chi2WWA13;
    double chi2WZA8, chi2WZC8, chi2WZA13, chi2WZC13;

    // Bins: Theory prediction
    double WWA8bin1NLO, WWA8bin2NLO, WWA8bin3NLO, WWA8bin4NLO, WWA8bin5NLO;
    double WWA13bin1NLO, WWA13bin2NLO, WWA13bin3NLO, WWA13bin4NLO, WWA13bin5NLO, WWA13bin6NLO, WWA13bin7NLO;
    double WZA8bin1NLO, WZA8bin2NLO, WZA8bin3NLO, WZA8bin4NLO, WZA8bin5NLO, WZA8bin6NLO;
    double WZC8bin1NLO, WZC8bin2NLO, WZC8bin3NLO, WZC8bin4NLO, WZC8bin5NLO, WZC8bin6NLO, WZC8bin7NLO, WZC8bin8NLO, WZC8bin9NLO;
    double WZA13bin1NLO, WZA13bin2NLO, WZA13bin3NLO, WZA13bin4NLO, WZA13bin5NLO, WZA13bin6NLO;
    double WZC13bin1NLO, WZC13bin2NLO, WZC13bin3NLO, WZC13bin4NLO, WZC13bin5NLO, WZC13bin6NLO, WZC13bin7NLO;

    // Bins: Exp values and errors
    double WWA8bin1Exp = 4022., WWA8bin2Exp = 951., WWA8bin3Exp = 74., WWA8bin4Exp = 2., WWA8bin5Exp = 1.;
    double WWA8bin1Err = 210.863, WWA8bin2Err = 56.6745, WWA8bin3Err = 9.35361, WWA8bin4Err = 1.43849, WWA8bin5Err = 0.866498;

    double WWA13bin1Exp = 419.843, WWA13bin2Exp = 512.837, WWA13bin3Exp = 258.115, WWA13bin4Exp = 170.302, WWA13bin5Exp = 123.998, WWA13bin6Exp = 72.922, WWA13bin7Exp = 35.8834;
    double WWA13bin1Err = 58.121, WWA13bin2Err = 80.142, WWA13bin3Err = 43.32, WWA13bin4Err = 31.5875, WWA13bin5Err = 24.2051, WWA13bin6Err = 14.44, WWA13bin7Err = 9.55206;

    double WZA8bin1Exp = 83.23, WZA8bin2Exp = 324.8, WZA8bin3Exp = 217.21, WZA8bin4Exp = 89.32, WZA8bin5Exp = 8.12, WZA8bin6Exp = 2.03;
    double WZA8bin1Err = 11.4025, WZA8bin2Err = 18.1888, WZA8bin3Err = 13.9014, WZA8bin4Err = 8.66404, WZA8bin5Err = 2.46848, WZA8bin6Err = 1.01906;

    double WZC8bin1Exp = 58016., WZC8bin2Exp = 136024., WZC8bin3Exp = 100352., WZC8bin4Exp = 82320., WZC8bin5Exp = 47040., WZC8bin6Exp = 19208., WZC8bin7Exp = 19600., WZC8bin8Exp = 15758.4, WZC8bin9Exp = 9604.;
    double WZC8bin1Err = 17038.1, WZC8bin2Err = 30818.8, WZC8bin3Err = 28715.2, WZC8bin4Err = 21945., WZC8bin5Err = 16718.7, WZC8bin6Err = 10771.1, WZC8bin7Err = 9505.49, WZC8bin8Err = 10897.5, WZC8bin9Err = 7723.99;

    double WZA13bin1Exp = 280.497, WZA13bin2Exp = 925.965, WZA13bin3Exp = 784.814, WZA13bin4Exp = 280.136, WZA13bin5Exp = 21.299, WZA13bin6Exp = 15.162;
    double WZA13bin1Err = 40.3916, WZA13bin2Err = 62.0397, WZA13bin3Err = 45.5192, WZA13bin4Err = 22.9712, WZA13bin5Err = 4.89877, WZA13bin6Err = 3.54791;

    double WZC13bin1Exp = 475.3, WZC13bin2Exp = 1963.2, WZC13bin3Exp = 849.4, WZC13bin4Exp = 305.1, WZC13bin5Exp = 210., WZC13bin6Exp = 10.9, WZC13bin7Exp = 3.54;
    double WZC13bin1Err = 32.2502, WZC13bin2Err = 107.697, WZC13bin3Err = 51.5083, WZC13bin4Err = 23.1908, WZC13bin5Err = 17.8955, WZC13bin6Err = 3.83689, WZC13bin7Err = 2.01542;

    //  Effective parameters

    // Zff couplings. Approximate them as couplings with 1st family quarks (i.e. all pp is 1st family)
    dgLZu = deltaGL_f(quarks[UP]);

    dgRZu = deltaGR_f(quarks[UP]);

    dgLZd = deltaGL_f(quarks[DOWN]);

    dgRZd = deltaGR_f(quarks[DOWN]);

    // arXiv: 2003.07862 convention for aTGC Lagrangian has a minus sign wrt HEPfit definitions
    dgZ1 = -deltag1ZNP();

    dkga = -deltaKgammaNP();

    dkZ = dgZ1 - (sW2_tree / cW2_tree) * dkga;

    lZ = -lambdaZNP();

    // Parameterization of pp->WW

    // WW ATLAS pT bins 8 TeV
    WWA8bin1NLO = 2410.31 - 7829.11 * dgLZd + 12299.8 * dgLZu + 2556.54 * dgRZd + 2112.94 * dgRZu + 2030.05 * dgZ1 + 2568.87 * dkZ + 2528.84 * lZ;

    WWA8bin2NLO = 550.64 - 2265.28 * dgLZd + 3155.45 * dgLZu + 615.479 * dgRZd + 203.37 * dgRZu - 165.565 * dgZ1 + 650.167 * dkZ + 411.026 * lZ;

    WWA8bin3NLO = 49.86 - 317.921 * dgLZd + 351.102 * dgLZu + 66.4958 * dgRZd - 36.0034 * dgRZu - 135.219 * dgZ1 + 94.4916 * dkZ + 37.3071 * lZ;

    WWA8bin4NLO = 5.699 - 57.4092 * dgLZd + 50.6928 * dgLZu + 9.81372 * dgRZd - 13.2364 * dgRZu - 36.198 * dgZ1 + 18.55 * dkZ + 6.98241 * lZ;

    WWA8bin5NLO = 1.2727 - 20.8509 * dgLZd + 15.6341 * dgLZu + 3.00117 * dgRZd - 6.22156 * dgRZu - 15.5846 * dgZ1 + 7.18415 * dkZ + 2.99976 * lZ;

    // Use only last bin
    chi2WWA8 = 0. * (WWA8bin1Exp - WWA8bin1NLO)*(WWA8bin1Exp - WWA8bin1NLO) / WWA8bin1Err / WWA8bin1Err +
            0. * (WWA8bin2Exp - WWA8bin2NLO)*(WWA8bin2Exp - WWA8bin2NLO) / WWA8bin2Err / WWA8bin2Err +
            0. * (WWA8bin3Exp - WWA8bin3NLO)*(WWA8bin3Exp - WWA8bin3NLO) / WWA8bin3Err / WWA8bin3Err +
            0. * (WWA8bin4Exp - WWA8bin4NLO)*(WWA8bin4Exp - WWA8bin4NLO) / WWA8bin4Err / WWA8bin4Err +
            (WWA8bin5Exp - WWA8bin5NLO)*(WWA8bin5Exp - WWA8bin5NLO) / WWA8bin5Err / WWA8bin5Err;


    // WW ATLAS pT bins 13 TeV 
    WWA13bin1NLO = 400.32 - 1946.32 * dgLZd + 2736.41 * dgLZu + 521.991 * dgRZd + 114.286 * dgRZu - 241.492 * dgZ1 + 557.655 * dkZ + 348.551 * lZ;

    WWA13bin2NLO = 493.759 - 2620.09 * dgLZd + 3518.17 * dgLZu + 666.437 * dgRZd + 38.085 * dgRZu - 533.621 * dgZ1 + 750.58 * dkZ + 409.991 * lZ;

    WWA13bin3NLO = 258.115 - 1522.46 * dgLZd + 1943.17 * dgLZu + 365.503 * dgRZd - 61.1737 * dgRZu - 455.013 * dgZ1 + 446.558 * dkZ + 198.405 * lZ;

    WWA13bin4NLO = 171.153 - 1153.75 * dgLZd + 1360.68 * dgLZu + 256.067 * dgRZd - 102.757 * dgRZu - 434.307 * dgZ1 + 342.709 * dkZ + 132.885 * lZ;

    WWA13bin5NLO = 134.414 - 1086.1 * dgLZd + 1149.72 * dgLZu + 217.941 * dgRZd - 150.149 * dgRZu - 509.092 * dgZ1 + 327.509 * dkZ + 110.989 * lZ;

    WWA13bin6NLO = 69.2759 - 729.641 * dgLZd + 667.246 * dgLZu + 129.686 * dgRZd - 150.65 * dgRZu - 424.099 * dgZ1 + 233.325 * dkZ + 74.4341 * lZ;

    WWA13bin7NLO = 33.7304 - 593.383 * dgLZd + 426.917 * dgLZu + 84.0936 * dgRZd - 160.339 * dgRZu - 410.935 * dgZ1 + 198.867 * dkZ + 61.7305 * lZ;

    // Exclude last 2 bins
    chi2WWA13 = (WWA13bin1Exp - WWA13bin1NLO)*(WWA13bin1Exp - WWA13bin1NLO) / WWA13bin1Err / WWA13bin1Err +
            (WWA13bin2Exp - WWA13bin2NLO)*(WWA13bin2Exp - WWA13bin2NLO) / WWA13bin2Err / WWA13bin2Err +
            (WWA13bin3Exp - WWA13bin3NLO)*(WWA13bin3Exp - WWA13bin3NLO) / WWA13bin3Err / WWA13bin3Err +
            (WWA13bin4Exp - WWA13bin4NLO)*(WWA13bin4Exp - WWA13bin4NLO) / WWA13bin4Err / WWA13bin4Err +
            (WWA13bin5Exp - WWA13bin5NLO)*(WWA13bin5Exp - WWA13bin5NLO) / WWA13bin5Err / WWA13bin5Err +
            0. * (WWA13bin6Exp - WWA13bin6NLO)*(WWA13bin6Exp - WWA13bin6NLO) / WWA13bin6Err / WWA13bin6Err +
            0. * (WWA13bin7Exp - WWA13bin7NLO)*(WWA13bin7Exp - WWA13bin7NLO) / WWA13bin7Err / WWA13bin7Err;


    // Total WW chi2
    chi2WW = chi2WWA8 + chi2WWA13;


    // Parameterization of pp->WZ

    // WZ ATLAS MT bins 8 TeV
    WZA8bin1NLO = 64.0231 - 432.326 * dgLZd + 663.895 * dgLZu + 113.935 * dgRZd + 113.935 * dgRZu + 136.053 * dgZ1 + 127.745 * dkZ + 154.176 * lZ;

    WZA8bin2NLO = 266.448 - 1696.04 * dgLZd + 2682.91 * dgLZu + 455.526 * dgRZd + 455.526 * dgRZu + 567.978 * dgZ1 + 500.809 * dkZ + 624.434 * lZ;

    WZA8bin3NLO = 199.275 - 1851.45 * dgLZd + 2302.17 * dgLZu + 368.076 * dgRZd + 368.076 * dgRZu + 124.683 * dgZ1 + 312.161 * dkZ + 421.23 * lZ;

    WZA8bin4NLO = 62.4615 - 1194.94 * dgLZd + 1449.19 * dgLZu + 127.456 * dgRZd + 127.456 * dgRZu - 352.836 * dgZ1 + 63.0308 * dkZ + 201.643 * lZ;

    WZA8bin5NLO = 4.89157 - 198.225 * dgLZd + 260.69 * dgLZu + 10.1279 * dgRZd + 10.1279 * dgRZu - 106.64 * dgZ1 + 2.82628 * dkZ + 41.4749 * lZ;

    WZA8bin6NLO = 1.42958 - 106.675 * dgLZd + 155.184 * dgLZu + 2.76817 * dgRZd + 2.76817 * dgRZu - 69.2783 * dgZ1 + 0.662577 * dkZ + 26.9946 * lZ;

    // Consider only 5 and 6th bin
    chi2WZA8 = 0. * (WZA8bin1Exp - WZA8bin1NLO)*(WZA8bin1Exp - WZA8bin1NLO) / WZA8bin1Err / WZA8bin1Err +
            0. * (WZA8bin2Exp - WZA8bin2NLO)*(WZA8bin2Exp - WZA8bin2NLO) / WZA8bin2Err / WZA8bin2Err +
            0. * (WZA8bin3Exp - WZA8bin3NLO)*(WZA8bin3Exp - WZA8bin3NLO) / WZA8bin3Err / WZA8bin3Err +
            0. * (WZA8bin4Exp - WZA8bin4NLO)*(WZA8bin4Exp - WZA8bin4NLO) / WZA8bin4Err / WZA8bin4Err +
            (WZA8bin5Exp - WZA8bin5NLO)*(WZA8bin5Exp - WZA8bin5NLO) / WZA8bin5Err / WZA8bin5Err +
            (WZA8bin6Exp - WZA8bin6NLO)*(WZA8bin6Exp - WZA8bin6NLO) / WZA8bin6Err / WZA8bin6Err;


    // WZ CMS pT bins 8 TeV
    WZC8bin1NLO = 48211.3 - 211046. * dgLZd + 574513. * dgLZu + 68328.7 * dgRZd + 68328.7 * dgRZu + 122719. * dgZ1 + 87803.2 * dkZ + 113221. * lZ;

    WZC8bin2NLO = 105555. - 636900. * dgLZd + 771034. * dgLZu + 164538. * dgRZd + 164538. * dgRZu + 227935. * dgZ1 + 185437. * dkZ + 235575. * lZ;

    WZC8bin3NLO = 95535.1 - 800852. * dgLZd + 771583. * dgLZu + 163657. * dgRZd + 163657. * dgRZu + 133396. * dgZ1 + 151539. * dkZ + 198427. * lZ;

    WZC8bin4NLO = 63880.3 - 691881. * dgLZd + 690499. * dgLZu + 117894. * dgRZd + 117894. * dgRZu + 14995.3 * dgZ1 + 85009.3 * dkZ + 122822. * lZ;

    WZC8bin5NLO = 39607.7 - 539249. * dgLZd + 568912. * dgLZu + 78418.4 * dgRZd + 78418.4 * dgRZu - 50735.4 * dgZ1 + 44726.9 * dkZ + 75660.1 * lZ;

    WZC8bin6NLO = 24855.2 - 422586. * dgLZd + 462072. * dgLZu + 53286.7 * dgRZd + 53286.7 * dgRZu - 76050. * dgZ1 + 25301.8 * dkZ + 50553.7 * lZ;

    WZC8bin7NLO = 14988.1 - 313165. * dgLZd + 352433. * dgLZu + 34854.5 * dgRZd + 34854.5 * dgRZu - 77082.3 * dgZ1 + 15108. * dkZ + 36685.2 * lZ;

    WZC8bin8NLO = 19871.3 - 568574. * dgLZd + 670089. * dgLZu + 52746.6 * dgRZd + 52746.6 * dgRZu - 188355. * dgZ1 + 22816.8 * dkZ + 72677. * lZ;

    WZC8bin9NLO = 7452.7 - 349468. * dgLZd + 453250. * dgLZu + 24770.6 * dgRZd + 24770.6 * dgRZu - 160704. * dgZ1 + 13427. * dkZ + 59126.2 * lZ;

    // All bins
    chi2WZC8 = (WZC8bin1Exp - WZC8bin1NLO)*(WZC8bin1Exp - WZC8bin1NLO) / WZC8bin1Err / WZC8bin1Err +
            (WZC8bin2Exp - WZC8bin2NLO)*(WZC8bin2Exp - WZC8bin2NLO) / WZC8bin2Err / WZC8bin2Err +
            (WZC8bin3Exp - WZC8bin3NLO)*(WZC8bin3Exp - WZC8bin3NLO) / WZC8bin3Err / WZC8bin3Err +
            (WZC8bin4Exp - WZC8bin4NLO)*(WZC8bin4Exp - WZC8bin4NLO) / WZC8bin4Err / WZC8bin4Err +
            (WZC8bin5Exp - WZC8bin5NLO)*(WZC8bin5Exp - WZC8bin5NLO) / WZC8bin5Err / WZC8bin5Err +
            (WZC8bin6Exp - WZC8bin6NLO)*(WZC8bin6Exp - WZC8bin6NLO) / WZC8bin6Err / WZC8bin6Err +
            (WZC8bin7Exp - WZC8bin7NLO)*(WZC8bin7Exp - WZC8bin7NLO) / WZC8bin7Err / WZC8bin7Err +
            (WZC8bin8Exp - WZC8bin8NLO)*(WZC8bin8Exp - WZC8bin8NLO) / WZC8bin8Err / WZC8bin8Err +
            (WZC8bin9Exp - WZC8bin9NLO)*(WZC8bin9Exp - WZC8bin9NLO) / WZC8bin9Err / WZC8bin9Err;


    // WZ ATLAS MT bins 13 TeV
    WZA13bin1NLO = 210.9 - 1538.29 * dgLZd + 2090.03 * dgLZu + 412.422 * dgRZd + 412.422 * dgRZu + 495.535 * dgZ1 + 463.077 * dkZ + 573.114 * lZ;

    WZA13bin2NLO = 935.318 - 6327.47 * dgLZd + 8887.4 * dgLZu + 1735.63 * dgRZd + 1735.63 * dgRZu + 2189.77 * dgZ1 + 1920.9 * dkZ + 2423.75 * lZ;

    WZA13bin3NLO = 761.955 - 7639.11 * dgLZd + 9400.48 * dgLZu + 1592.09 * dgRZd + 1592.09 * dgRZu + 727.602 * dgZ1 + 1411.59 * dkZ + 1983.66 * lZ;

    WZA13bin4NLO = 282.966 - 5916.74 * dgLZd + 7021.37 * dgLZu + 704.878 * dgRZd + 704.878 * dgRZu - 1518.83 * dgZ1 + 433.021 * dkZ + 1322.95 * lZ;

    WZA13bin5NLO = 28.3987 - 1235.14 * dgLZd + 1523.66 * dgLZu + 75.7642 * dgRZd + 75.7642 * dgRZu - 622.335 * dgZ1 + 35.011 * dkZ + 340.428 * lZ;

    WZA13bin6NLO = 14.1701 - 1200.86 * dgLZd + 1637.7 * dgLZu + 35.6558 * dgRZd + 35.6558 * dgRZu - 765.679 * dgZ1 + 15.3856 * dkZ + 386.992 * lZ;

    // All bins
    chi2WZA13 = (WZA13bin1Exp - WZA13bin1NLO)*(WZA13bin1Exp - WZA13bin1NLO) / WZA13bin1Err / WZA13bin1Err +
            (WZA13bin2Exp - WZA13bin2NLO)*(WZA13bin2Exp - WZA13bin2NLO) / WZA13bin2Err / WZA13bin2Err +
            (WZA13bin3Exp - WZA13bin3NLO)*(WZA13bin3Exp - WZA13bin3NLO) / WZA13bin3Err / WZA13bin3Err +
            (WZA13bin4Exp - WZA13bin4NLO)*(WZA13bin4Exp - WZA13bin4NLO) / WZA13bin4Err / WZA13bin4Err +
            (WZA13bin5Exp - WZA13bin5NLO)*(WZA13bin5Exp - WZA13bin5NLO) / WZA13bin5Err / WZA13bin5Err +
            (WZA13bin6Exp - WZA13bin6NLO)*(WZA13bin6Exp - WZA13bin6NLO) / WZA13bin6Err / WZA13bin6Err;


    // WZ CMS M bins 13 TeV
    WZC13bin1NLO = 310.897 - 3311.66 * dgLZd + 4923.17 * dgLZu + 730.006 * dgRZd + 730.006 * dgRZu + 718.192 * dgZ1 + 751.263 * dkZ + 850.366 * lZ;

    WZC13bin2NLO = 1490.35 - 15194.9 * dgLZd + 16711.1 * dgLZu + 3034.05 * dgRZd + 3034.05 * dgRZu + 1380.12 * dgZ1 + 2725.68 * dkZ + 3868.96 * lZ;

    WZC13bin3NLO = 629.894 - 8390.66 * dgLZd + 9234.47 * dgLZu + 1290.66 * dgRZd + 1290.66 * dgRZu - 748.093 * dgZ1 + 947.852 * dkZ + 1888.75 * lZ;

    WZC13bin4NLO = 232.784 - 3896.81 * dgLZd + 4345.03 * dgLZu + 485.435 * dgRZd + 485.435 * dgRZu - 810.122 * dgZ1 + 323.179 * dkZ + 894.34 * lZ;

    WZC13bin5NLO = 174.94 - 4161.42 * dgLZd + 5115.65 * dgLZu + 365.576 * dgRZd + 365.576 * dgRZu - 1577.77 * dgZ1 + 224.176 * dkZ + 1058.21 * lZ;

    WZC13bin6NLO = 8.27 - 373.695 * dgLZd + 600.396 * dgLZu + 15.4694 * dgRZd + 15.4694 * dgRZu - 216.476 * dgZ1 + 8.36269 * dkZ + 110.306 * lZ;

    WZC13bin7NLO = 1.71 - 122.273 * dgLZd + 251.559 * dgLZu + 2.55789 * dgRZd + 2.55789 * dgRZu - 78.8209 * dgZ1 + 1.48003 * dkZ + 37.0098 * lZ;

    // Consider only the last 3 bins
    chi2WZC13 = 0. * (WZC13bin1Exp - WZC13bin1NLO)*(WZC13bin1Exp - WZC13bin1NLO) / WZC13bin1Err / WZC13bin1Err +
            0. * (WZC13bin2Exp - WZC13bin2NLO)*(WZC13bin2Exp - WZC13bin2NLO) / WZC13bin2Err / WZC13bin2Err +
            0. * (WZC13bin3Exp - WZC13bin3NLO)*(WZC13bin3Exp - WZC13bin3NLO) / WZC13bin3Err / WZC13bin3Err +
            0. * (WZC13bin4Exp - WZC13bin4NLO)*(WZC13bin4Exp - WZC13bin4NLO) / WZC13bin4Err / WZC13bin4Err +
            (WZC13bin5Exp - WZC13bin5NLO)*(WZC13bin5Exp - WZC13bin5NLO) / WZC13bin5Err / WZC13bin5Err +
            (WZC13bin6Exp - WZC13bin6NLO)*(WZC13bin6Exp - WZC13bin6NLO) / WZC13bin6Err / WZC13bin6Err +
            (WZC13bin7Exp - WZC13bin7NLO)*(WZC13bin7Exp - WZC13bin7NLO) / WZC13bin7Err / WZC13bin7Err;


    // Total WW chi2
    chi2WZ = chi2WZA8 + chi2WZC8 + chi2WZA13 + chi2WZC13;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt of the total chi2    
    return sqrt(chi2WW + chi2WZ);
}

double NPSMEFTd6General::AuxObs_NP17() const
{
    // To be used for some temporary observable

    // Muon Collider WY using difermion production at energy: 3000 GeV
    double Wpar, Ypar, Wpar2, Ypar2;
    double Chi2Tot;

    Wpar = 10000.0 * obliqueW();
    Ypar = 10000.0 * obliqueY();

    Wpar2 = Wpar*Wpar;
    Ypar2 = Ypar*Ypar;

    Chi2Tot = 2250.66 * Wpar2 + 2440.91 * Wpar * Ypar + 1833.38 * Ypar2;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

double NPSMEFTd6General::AuxObs_NP18() const
{
    // To be used for some temporary observable

    // Muon Collider WY using difermion production at energy: 10000 GeV
    double Wpar, Ypar, Wpar2, Ypar2;
    double Chi2Tot;

    Wpar = 10000.0 * obliqueW();
    Ypar = 10000.0 * obliqueY();

    Wpar2 = Wpar*Wpar;
    Ypar2 = Ypar*Ypar;

    Chi2Tot = 278252. * Wpar2 + 268761. * Wpar * Ypar + 222406. * Ypar2;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

double NPSMEFTd6General::AuxObs_NP19() const
{
    // To be used for some temporary observable

    // Muon Collider CB, CW using diboson production at energy: 3000 GeV
    double CBpar, CWpar, CBpar2, CWpar2;
    double Chi2Tot;

    // Chi square formulae requires WC in units of TeV-2
    CBpar = 1.0e+06 * (CDB / g1_tree) / LambdaNP2;
    CWpar = 1.0e+06 * (CDW / g2_tree) / LambdaNP2;

    CBpar2 = CBpar*CBpar;
    CWpar2 = CWpar*CWpar;

    Chi2Tot = 16353.7 * CBpar2 + 71488.1 * CBpar * CWpar + 88825.5 * CWpar2;

    if (FlagQuadraticTerms) {

        Chi2Tot = Chi2Tot + 180317. * CBpar2 * CBpar + 713067. * CBpar2 * CBpar2 + 412966. * CBpar2 * CWpar
                - 1.22601 * 1.0e+06 * CBpar2 * CBpar * CWpar + 39461.7 * CBpar * CWpar2 + 3.68154 * 1.0e+06 * CBpar2 * CWpar2
                + 952190. * CWpar2 * CWpar - 2.32501 * 1.0e+06 * CBpar * CWpar2 * CWpar + 2.71116 * 1.0e+06 * CWpar2 * CWpar2;
    }

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

double NPSMEFTd6General::AuxObs_NP20() const
{
    // To be used for some temporary observable

    // Muon Collider CB, CW using diboson production at energy: 10000 GeV
    double CBpar, CWpar, CBpar2, CWpar2;
    double Chi2Tot;

    // Chi square formulae requires WC in units of TeV-2
    CBpar = 1.0e+06 * (CDB / g1_tree) / LambdaNP2;
    CWpar = 1.0e+06 * (CDW / g2_tree) / LambdaNP2;

    CBpar2 = CBpar*CBpar;
    CWpar2 = CWpar*CWpar;

    Chi2Tot = 1000000. * (2.34317 * CBpar2 + 9.35455 * CBpar * CWpar + 1.01982 * 10. * CWpar2);

    if (FlagQuadraticTerms) {

        Chi2Tot = Chi2Tot + 1.0e+08 * (2.77515 * CBpar2 * CBpar + 1.06951 * 100. * CBpar2 * CBpar2
                + 5.38407 * CBpar2 * CWpar - 1.49637 * 100. * CBpar2 * CBpar * CWpar
                + 1.95735 * CBpar * CWpar2 + 4.90583 * 100. * CBpar2 * CWpar2
                + 1.16919 * 10. * CWpar2 * CWpar - 2.59927 * 100. * CBpar * CWpar2 * CWpar
                + 3.55074 * 100. * CWpar2 * CWpar2);
    }

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);
}

double NPSMEFTd6General::AuxObs_NP21() const
{
    // To be used for some temporary observable

    // Muon Collider CH, C6 using diHiggs M_{HH} invariant distribution at energy: 3000 GeV
    double C6par, CHpar, C6par2, CHpar2;
    double Chi2Tot;

    // C6 v2, CH v2, in the notation of 2012.11555 as function of the Warsaw WC
    C6par = (-2 * v2 * CH / mHl / mHl) * v2_over_LambdaNP2;
    CHpar = (-2.0 * CHbox) * v2_over_LambdaNP2;

    C6par2 = C6par*C6par;
    CHpar2 = CHpar*CHpar;

    //Chi2Tot = 0.0; 

    //if (FlagQuadraticTerms) {

    //  Full chi square

    Chi2Tot = (5.127032998959654 * pow(1. * C6par2 + C6par * (-0.9046361401291156 - 3.160612259276141 * CHpar) + CHpar * (1.4943175205469572 + 3.4987548133070216 * CHpar), 2))
            / (0.4665231049459758 - 0.9046361401291156 * C6par + 1. * C6par2 + 1.4943175205469572 * CHpar - 3.160612259276141 * C6par * CHpar + 3.4987548133070216 * CHpar2)

            +(3.8240160713265476 * pow(1. * C6par2 + C6par * (-0.7068429909035657 - 4.529410356278686 * CHpar) + CHpar * (1.6460931966048826 + 6.212867668302641 * CHpar), 2))
            / (0.262033783826448 - 0.7068429909035657 * C6par + 1. * C6par2 + 1.6460931966048826 * CHpar - 4.529410356278686 * C6par * CHpar + 6.212867668302641 * CHpar2)

            +(0.9569666572585168 * pow(1. * C6par2 + C6par * (-0.8811004415807353 - 6.4350041910598765 * CHpar) + CHpar * (2.920157858804367 + 9.935394583932345 * CHpar), 2))
            / (0.48389118130810876 - 0.8811004415807353 * C6par + 1. * C6par2 + 2.920157858804367 * CHpar - 6.4350041910598765 * C6par * CHpar + 9.935394583932345 * CHpar2)

            +(0.5040979907607566 * pow(1. * C6par2 + C6par * (-4.0368563913001125 - 2.7217670900218875 * CHpar) + CHpar * (5.59639944620888 + 10.367826272055057 * CHpar), 2))
            / (10.356262676995112 - 4.0368563913001125 * C6par + 1. * C6par2 + 5.59639944620888 * CHpar - 2.7217670900218875 * C6par * CHpar + 10.367826272055057 * CHpar2)

            +(3.460963680000871 * pow(1. * C6par2 + C6par * (-1.7371086227288517 - 4.968101131225101 * CHpar) + CHpar * (5.029364134904506 + 12.279932043237457 * CHpar), 2))
            / (2.6070269148526557 - 1.7371086227288517 * C6par + 1. * C6par2 + 5.029364134904506 * CHpar - 4.968101131225101 * C6par * CHpar + 12.279932043237457 * CHpar2)

            +(10.16925886603548 * pow(1. * C6par2 + C6par * (-1.2083942566612897 - 17.59578848524835 * CHpar) + CHpar * (13.84638209179682 + 146.76790379566108 * CHpar), 2))
            / (1.3814785330740036 - 1.2083942566612897 * C6par + 1. * C6par2 + 13.84638209179682 * CHpar - 17.59578848524835 * C6par * CHpar + 146.76790379566108 * CHpar2);
    //}

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);

}

double NPSMEFTd6General::AuxObs_NP22() const
{
    // To be used for some temporary observable

    // Muon Collider CH, C6 using diHiggs M_{HH} invariant distribution at energy: 10000 GeV
    double C6par, CHpar, C6par2, CHpar2;
    double Chi2Tot;

    // C6 v2, CH v2, in the notation of 2012.11555 as function of the Warsaw WC
    C6par = (-2 * v2 * CH / mHl / mHl) * v2_over_LambdaNP2;
    CHpar = (-2.0 * CHbox) * v2_over_LambdaNP2;

    C6par2 = C6par*C6par;
    CHpar2 = CHpar*CHpar;

    //Chi2Tot = 0.0; 

    //if (FlagQuadraticTerms) {

    //  Full chi square

    Chi2Tot = (571.4871835024893 * pow(1. * C6par2 + C6par * (-0.9787185826575221 - 5.193831432488647 * CHpar) + CHpar * (3.0674615767955578 + 10.591622934621405 * CHpar), 2))
            / (0.8501719090063755 - 0.9787185826575221 * C6par + 1. * C6par2 + 3.0674615767955578 * CHpar - 5.193831432488647 * C6par * CHpar + 10.591622934621405 * CHpar2)

            +(1.511128114971615 * pow(1. * C6par2 + C6par * (-1.2911703709918352 - 9.439077589411124 * CHpar) + CHpar * (7.742006029582707 + 24.15741462072724 * CHpar), 2))
            / (1.0820876087868914 - 1.2911703709918352 * C6par + 1. * C6par2 + 7.742006029582707 * CHpar - 9.439077589411124 * C6par * CHpar + 24.15741462072724 * CHpar2)

            +(17.415132210246643 * pow(1. * C6par2 + C6par * (-0.9426311765101452 - 12.02751732743764 * CHpar) + CHpar * (6.014890971256063 + 42.84032267422174 * CHpar), 2))
            / (0.6631618979282716 - 0.9426311765101452 * C6par + 1. * C6par2 + 6.014890971256063 * CHpar - 12.02751732743764 * C6par * CHpar + 42.84032267422174 * CHpar2)

            +(6.944583304323103 * pow(1. * C6par2 + C6par * (-5.605076514786612 - 13.252038744875035 * CHpar) + CHpar * (48.34152435283824 + 121.88758552653347 * CHpar), 2))
            / (25.260881616043218 - 5.605076514786612 * C6par + 1. * C6par2 + 48.34152435283824 * CHpar - 13.252038744875035 * C6par * CHpar + 121.88758552653347 * CHpar2)

            +(46.448610091340626 * pow(1. * C6par2 + C6par * (-1.2424251681131542 - 29.069979810624 * CHpar) + CHpar * (20.05311500484323 + 244.02853953273825 * CHpar), 2))
            / (1.021577814150124 - 1.2424251681131542 * C6par + 1. * C6par2 + 20.05311500484323 * CHpar - 29.069979810624 * C6par * CHpar + 244.02853953273825 * CHpar2)

            +(0.5697696171204448 * pow(1. * C6par2 + C6par * (-1.618811231931265 - 48.52495426623116 * CHpar) + CHpar * (33.85929443804542 + 548.5965053951562 * CHpar), 2))
            / (2.3283968809253617 - 1.618811231931265 * C6par + 1. * C6par2 + 33.85929443804542 * CHpar - 48.52495426623116 * C6par * CHpar + 548.5965053951562 * CHpar2)

            +(0.16515061365809997 * pow(1. * C6par2 + C6par * (-8.53845097380669 - 36.0850764145878 * CHpar) + CHpar * (264.5920285845332 + 746.011160256333 * CHpar), 2))
            / (102.43592556954773 - 8.53845097380669 * C6par + 1. * C6par2 + 264.5920285845332 * CHpar - 36.0850764145878 * C6par * CHpar + 746.011160256333 * CHpar2)

            +(2.956195984479989 * pow(1. * C6par2 + C6par * (-3.780066837776757 - 72.47419413608488 * CHpar) + CHpar * (176.93458387556797 + 1683.271612372297 * CHpar), 2))
            / (10.551295181010284 - 3.780066837776757 * C6par + 1. * C6par2 + 176.93458387556797 * CHpar - 72.47419413608488 * C6par * CHpar + 1683.271612372297 * CHpar2)

            +(17.483420030138998 * pow(1. * C6par2 + C6par * (-1.6021946315041684 - 148.43576718278595 * CHpar) + CHpar * (140.6006415722798 + 10716.660108216498 * CHpar), 2))
            / (1.8226825772967126 - 1.6021946315041684 * C6par + 1. * C6par2 + 140.6006415722798 * CHpar - 148.43576718278595 * C6par * CHpar + 10716.660108216498 * CHpar2);
    //}

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);

}

double NPSMEFTd6General::AuxObs_NP23() const
{
    // LHC FB asymmetry in Drell Yan. We use the results in Eq. (4.11) from
    // arXiv: 2103.12074 [hep-ph] to construct the linear SMEFT chi square

    double xpEFT, ypEFT, zpEFT, tpEFT;
    double Chi2Tot;

    double dgZuL, dgZuR, dgZdL, dgZdR;

    dgZuL = deltaGL_f(quarks[UP]);
    dgZuR = deltaGR_f(quarks[UP]);
    dgZdL = deltaGL_f(quarks[DOWN]);
    dgZdR = deltaGR_f(quarks[DOWN]);

    xpEFT = 0.21 * dgZuL + 0.19 * dgZuR + 0.46 * dgZdL + 0.84 * dgZdR;
    ypEFT = 0.03 * dgZuL - 0.07 * dgZuR - 0.87 * dgZdL + 0.49 * dgZdR;
    zpEFT = 0.83 * dgZuL - 0.54 * dgZuR + 0.02 * dgZdL - 0.10 * dgZdR;
    tpEFT = 0.51 * dgZuL + 0.82 * dgZuR - 0.17 * dgZdL - 0.22 * dgZdR;

    // Substract the central values
    xpEFT = xpEFT + 10.;
    xpEFT = xpEFT - 0.5;
    xpEFT = xpEFT - 0.04;
    xpEFT = xpEFT + 0.001;


    // Add the different (uncorrelated) contributions to the chi square
    Chi2Tot = xpEFT * xpEFT / 4. / 4. + ypEFT * ypEFT / 0.4 / 0.4
            + zpEFT * zpEFT / 0.06 / 0.06 + tpEFT * tpEFT / 0.005 / 0.005;

    // To be used as Gaussian observable with mean=0, var=1 I must return the sqrt.
    return sqrt(Chi2Tot);

}

double NPSMEFTd6General::AuxObs_NP24() const
{
    // To be used for some temporary observable
    return 0.0;

}

double NPSMEFTd6General::AuxObs_NP25() const
{
    // To be used for some temporary observable
    return 0.0;

}

double NPSMEFTd6General::AuxObs_NP26() const
{
    // To be used for some temporary observable
    return 0.0;

}

double NPSMEFTd6General::AuxObs_NP27() const
{
    // To be used for some temporary observable
    return 0.0;

}

double NPSMEFTd6General::AuxObs_NP28() const
{
    // To be used for some temporary observable
    return 0.0;

}

double NPSMEFTd6General::AuxObs_NP29() const
{
    // To be used for some temporary observable
    return 0.0;

}

double NPSMEFTd6General::AuxObs_NP30() const
{
    // To be used for some temporary observable
    return 0.0;

}

///////////////////////////////////////////////////////////////////////////////

double NPSMEFTd6General::Cll_mu() const
{
    return (CllR[0][0][1][1] + CllR[1][1][0][0] + CllR[0][1][1][0] + CllR[1][0][0][1]);
}

double NPSMEFTd6General::Cll_tau() const
{
    return (CllR[0][0][2][2] + CllR[2][2][0][0] + CllR[0][2][2][0] + CllR[2][0][0][2]);
}

double NPSMEFTd6General::Cll_up() const
{
    return (Clq1R[0][0][0][0] - Clq3R[0][0][0][0]);
}

double NPSMEFTd6General::Cll_down() const
{
    return (Clq1R[0][0][0][0] + Clq3R[0][0][0][0]);
}

double NPSMEFTd6General::Cll_charm() const
{
    return (Clq1R[0][0][1][1] + Clq1R[1][1][0][0] - Clq3R[0][0][1][1] - Clq3R[1][1][0][0]);
}

double NPSMEFTd6General::Cll_strange() const
{
    return (Clq1R[0][0][1][1] + Clq1R[1][1][0][0] + Clq3R[0][0][1][1] + Clq3R[1][1][0][0]);
}

double NPSMEFTd6General::Cll_bottom() const
{
    return (Clq1R[0][0][2][2] + Clq1R[2][2][0][0] + Clq3R[0][0][2][2] + Clq3R[2][2][0][0]);
}

double NPSMEFTd6General::CLR_mu() const
{
    return (CleR[0][0][1][1] + CleR[1][1][0][0]);
}

double NPSMEFTd6General::CLR_tau() const
{
    return (CleR[0][0][2][2] + CleR[2][2][0][0]);
}

double NPSMEFTd6General::CLR_up() const
{
    return (CluR[0][0][0][0]);
}

double NPSMEFTd6General::CLR_down() const
{
    return (CldR[0][0][0][0]);
}

double NPSMEFTd6General::CLR_charm() const
{
    return (CluR[0][0][1][1] + CluR[1][1][0][0]);
}

double NPSMEFTd6General::CLR_strange() const
{
    return (CldR[0][0][1][1] + CldR[1][1][0][0]);
}

double NPSMEFTd6General::CLR_bottom() const
{
    return (CldR[0][0][2][2] + CldR[2][2][0][0]);
}

double NPSMEFTd6General::CRL_mu() const
{
    return (CleR[0][0][1][1] + CleR[1][1][0][0]);
}

double NPSMEFTd6General::CRL_tau() const
{
    return (CleR[0][0][2][2] + CleR[2][2][0][0]);
}

double NPSMEFTd6General::CRL_up() const
{
    return (CqeR[0][0][1][1]);
}

double NPSMEFTd6General::CRL_down() const
{
    return (CqeR[0][0][1][1]);
}

double NPSMEFTd6General::CRL_charm() const
{
    return (CqeR[0][0][1][1] + CqeR[1][1][0][0]);
}

double NPSMEFTd6General::CRL_strange() const
{
    return (CqeR[0][0][1][1] + CqeR[1][1][0][0]);
}

double NPSMEFTd6General::CRL_bottom() const
{
    return (CqeR[0][0][2][2] + CqeR[2][2][0][0]);
}

double NPSMEFTd6General::CRR_mu() const
{
    return (CeeR[0][0][1][1] + CeeR[1][1][0][0]);
}

double NPSMEFTd6General::CRR_tau() const
{
    return (CeeR[0][0][2][2] + CeeR[2][2][0][0]);
}

double NPSMEFTd6General::CRR_up() const
{
    return (CeuR[0][0][0][0]);
}

double NPSMEFTd6General::CRR_down() const
{
    return (CedR[0][0][0][0]);
}

double NPSMEFTd6General::CRR_charm() const
{
    return (CeuR[0][0][1][1] + CeuR[1][1][0][0]);
}

double NPSMEFTd6General::CRR_strange() const
{
    return (CedR[0][0][1][1] + CedR[1][1][0][0]);
}

double NPSMEFTd6General::CRR_bottom() const
{
    return (CedR[0][0][2][2] + CedR[2][2][0][0]);
}

